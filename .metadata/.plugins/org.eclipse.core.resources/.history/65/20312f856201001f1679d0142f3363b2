/*
 * hardwareOut.cpp
 *
 *  Created on: Jan 29, 2024
 *      Author: jgonz
 */

#include <main.h>
#include <hardware.h>
#include <string>
#include "stm32l4xx_hal.h"

extern uint8_t superloop;

/////////////
// DISPLAY //
/////////////

extern displayPhysical displayPhy;	//

/////////
// GPS //
/////////

extern UART_HandleTypeDef huart5;

extern bool enableGps;
extern bool startGps;
extern uint8_t rxGps[2];

bool availableGps;
uint16_t countGpsAvailable;
uint16_t limitGpsAvailable	= 5000/superloop;
uint8_t stateHwGpsEnable;

uint8_t commandUart[]	= "$PSTMCFGMSGL,0,1,1,0*87\r\n";
uint8_t commandUart2[]	= "$PSTMCFGMSGL,1,1,0,0*86\r\n";
uint8_t commandUart3[]	= "$PSTMCFGMSGL,2,1,2,0*85\r\n";
uint8_t commandUart4[]	= "$PSTMSETPAR,1210,0,0*35\r\n";
uint8_t commandUart5[]	= "$PSTMSETPAR,1229,0,0*3F\r\n";
uint8_t commandUart6[]	= "$PSTMSETPAR,1211,0,0*34\r\n";
uint8_t commandUart7[]	= "$PSTMSETPAR,1230,0,0*37\r\n";
uint8_t commandUart8[]	= "$PSTMSAVEPAR*58\r\n";
uint8_t commandUart9[]	= "$PSTMSRR*49\r\n";

uint8_t stateConfigGps;

bool flagUartGps;

/////////////
// ALARMAS //
/////////////

bool flagAlarm0;
bool flagAlarm1;

//////////
// LORA //
//////////

extern UART_HandleTypeDef huart4;	// Interfaz UART 4

bool flagTxLora;					// Señal de transmision por HW
extern uint8_t *loraTxCommand0;		// Puntero al comando RN2903
extern uint8_t sizeTxCommand0;		// Largo del comando RN2903
extern uint8_t rxLora[1];			// Buffer de recepcion

///////////////////
// LORA HARDWARE //
///////////////////

uint8_t stateResetHwLora;				// Estado de reinicio chip RN2903
extern bool flagResetHwLora;			// Señal para reinicio de chip
bool flagEnableHwLora;					// Señal de chip habilitado
uint16_t countResetHwLora;					// Contador de reinicio de chip
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip

bool aux;
extern bool flagBoton;
uint8_t countResetHwLora2;


uint8_t stateUartGps;
uint16_t countUartGps;
uint16_t limitUartGps	= 20000/superloop;


/***** OUTPUT	*****/

void hwOutput(){
	//hwDisplay();
}

/************************
 *** DISPLAY HARDWARE ***
 ************************
 *
 *	Accion sobre leds
 *
 */

void hwDisplay(){
	/***** DIGITS 	*****/

	/////////////////
	// FIRST DIGIT //
	/////////////////

	if ( displayPhy.firstNumber() ){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
	}

	//////////////////
	// SECOND DIGIT //
	//////////////////

	if ( displayPhy.secondNumber() ){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
	}

	/////////////////
	// THIRD DIGIT //
	/////////////////

	if ( displayPhy.thirdNumber() ){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
	}

	//////////////////
	// FOURTH DIGIT //
	//////////////////

	if ( displayPhy.fourthNumber() ){
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
	}

	/***** 	LEDS	*****/

	///////////
	// A LED //
	///////////

	if ( displayPhy.aLed() ){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,  GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,  GPIO_PIN_RESET);
	}

	///////////
	// B LED //
	///////////

	if ( displayPhy.bLed() ){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,  GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,  GPIO_PIN_RESET);
	}

	///////////
	// C LED //
	///////////

	if ( displayPhy.cLed() ){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
	}

	///////////
	// D LED //
	///////////

	if ( displayPhy.dLed() ){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
	}

	///////////
	// E LED //
	///////////

	if ( displayPhy.eLed() ){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
	}

	///////////
	// F LED //
	///////////

	if ( displayPhy.fLed() ){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	}

	///////////
	// G LED //
	///////////

	if ( displayPhy.gLed() ){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
	}

	////////////
	// DP LED //
	////////////

	if ( displayPhy.dpLed() ){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}


