
Calibracion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3d8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800d584  0800d584  0000e584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d604  0800d604  0000f440  2**0
                  CONTENTS
  4 .ARM          00000008  0800d604  0800d604  0000e604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d60c  0800d60c  0000f440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800d60c  0800d60c  0000e60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d62c  0800d62c  0000e62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  0800d630  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e48  20000440  0800da70  0000f440  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  0800da70  00010288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f440  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053aee  00000000  00000000  0000f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007de5  00000000  00000000  00062f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  0006ad48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170c  00000000  00000000  0006cb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033c18  00000000  00000000  0006e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002df08  00000000  00000000  000a1e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124924  00000000  00000000  000cfd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f4658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dfc  00000000  00000000  001f469c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001fc498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000440 	.word	0x20000440
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800d56c 	.word	0x0800d56c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000444 	.word	0x20000444
 80001e8:	0800d56c 	.word	0x0800d56c

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__gedf2>:
 8000564:	f04f 3cff 	mov.w	ip, #4294967295
 8000568:	e006      	b.n	8000578 <__cmpdf2+0x4>
 800056a:	bf00      	nop

0800056c <__ledf2>:
 800056c:	f04f 0c01 	mov.w	ip, #1
 8000570:	e002      	b.n	8000578 <__cmpdf2+0x4>
 8000572:	bf00      	nop

08000574 <__cmpdf2>:
 8000574:	f04f 0c01 	mov.w	ip, #1
 8000578:	f84d cd04 	str.w	ip, [sp, #-4]!
 800057c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000588:	bf18      	it	ne
 800058a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800058e:	d01b      	beq.n	80005c8 <__cmpdf2+0x54>
 8000590:	b001      	add	sp, #4
 8000592:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000596:	bf0c      	ite	eq
 8000598:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800059c:	ea91 0f03 	teqne	r1, r3
 80005a0:	bf02      	ittt	eq
 80005a2:	ea90 0f02 	teqeq	r0, r2
 80005a6:	2000      	moveq	r0, #0
 80005a8:	4770      	bxeq	lr
 80005aa:	f110 0f00 	cmn.w	r0, #0
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf58      	it	pl
 80005b4:	4299      	cmppl	r1, r3
 80005b6:	bf08      	it	eq
 80005b8:	4290      	cmpeq	r0, r2
 80005ba:	bf2c      	ite	cs
 80005bc:	17d8      	asrcs	r0, r3, #31
 80005be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005c2:	f040 0001 	orr.w	r0, r0, #1
 80005c6:	4770      	bx	lr
 80005c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005d0:	d102      	bne.n	80005d8 <__cmpdf2+0x64>
 80005d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005d6:	d107      	bne.n	80005e8 <__cmpdf2+0x74>
 80005d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e0:	d1d6      	bne.n	8000590 <__cmpdf2+0x1c>
 80005e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005e6:	d0d3      	beq.n	8000590 <__cmpdf2+0x1c>
 80005e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_cdrcmple>:
 80005f0:	4684      	mov	ip, r0
 80005f2:	4610      	mov	r0, r2
 80005f4:	4662      	mov	r2, ip
 80005f6:	468c      	mov	ip, r1
 80005f8:	4619      	mov	r1, r3
 80005fa:	4663      	mov	r3, ip
 80005fc:	e000      	b.n	8000600 <__aeabi_cdcmpeq>
 80005fe:	bf00      	nop

08000600 <__aeabi_cdcmpeq>:
 8000600:	b501      	push	{r0, lr}
 8000602:	f7ff ffb7 	bl	8000574 <__cmpdf2>
 8000606:	2800      	cmp	r0, #0
 8000608:	bf48      	it	mi
 800060a:	f110 0f00 	cmnmi.w	r0, #0
 800060e:	bd01      	pop	{r0, pc}

08000610 <__aeabi_dcmpeq>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff fff4 	bl	8000600 <__aeabi_cdcmpeq>
 8000618:	bf0c      	ite	eq
 800061a:	2001      	moveq	r0, #1
 800061c:	2000      	movne	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmplt>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffea 	bl	8000600 <__aeabi_cdcmpeq>
 800062c:	bf34      	ite	cc
 800062e:	2001      	movcc	r0, #1
 8000630:	2000      	movcs	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmple>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffe0 	bl	8000600 <__aeabi_cdcmpeq>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpge>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffce 	bl	80005f0 <__aeabi_cdrcmple>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpgt>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffc4 	bl	80005f0 <__aeabi_cdrcmple>
 8000668:	bf34      	ite	cc
 800066a:	2001      	movcc	r0, #1
 800066c:	2000      	movcs	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_uldivmod>:
 8000674:	b953      	cbnz	r3, 800068c <__aeabi_uldivmod+0x18>
 8000676:	b94a      	cbnz	r2, 800068c <__aeabi_uldivmod+0x18>
 8000678:	2900      	cmp	r1, #0
 800067a:	bf08      	it	eq
 800067c:	2800      	cmpeq	r0, #0
 800067e:	bf1c      	itt	ne
 8000680:	f04f 31ff 	movne.w	r1, #4294967295
 8000684:	f04f 30ff 	movne.w	r0, #4294967295
 8000688:	f000 b96a 	b.w	8000960 <__aeabi_idiv0>
 800068c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000690:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000694:	f000 f806 	bl	80006a4 <__udivmoddi4>
 8000698:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a0:	b004      	add	sp, #16
 80006a2:	4770      	bx	lr

080006a4 <__udivmoddi4>:
 80006a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a8:	9d08      	ldr	r5, [sp, #32]
 80006aa:	460c      	mov	r4, r1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d14e      	bne.n	800074e <__udivmoddi4+0xaa>
 80006b0:	4694      	mov	ip, r2
 80006b2:	458c      	cmp	ip, r1
 80006b4:	4686      	mov	lr, r0
 80006b6:	fab2 f282 	clz	r2, r2
 80006ba:	d962      	bls.n	8000782 <__udivmoddi4+0xde>
 80006bc:	b14a      	cbz	r2, 80006d2 <__udivmoddi4+0x2e>
 80006be:	f1c2 0320 	rsb	r3, r2, #32
 80006c2:	4091      	lsls	r1, r2
 80006c4:	fa20 f303 	lsr.w	r3, r0, r3
 80006c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80006cc:	4319      	orrs	r1, r3
 80006ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80006d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006d6:	fa1f f68c 	uxth.w	r6, ip
 80006da:	fbb1 f4f7 	udiv	r4, r1, r7
 80006de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006e2:	fb07 1114 	mls	r1, r7, r4, r1
 80006e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ea:	fb04 f106 	mul.w	r1, r4, r6
 80006ee:	4299      	cmp	r1, r3
 80006f0:	d90a      	bls.n	8000708 <__udivmoddi4+0x64>
 80006f2:	eb1c 0303 	adds.w	r3, ip, r3
 80006f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80006fa:	f080 8112 	bcs.w	8000922 <__udivmoddi4+0x27e>
 80006fe:	4299      	cmp	r1, r3
 8000700:	f240 810f 	bls.w	8000922 <__udivmoddi4+0x27e>
 8000704:	3c02      	subs	r4, #2
 8000706:	4463      	add	r3, ip
 8000708:	1a59      	subs	r1, r3, r1
 800070a:	fa1f f38e 	uxth.w	r3, lr
 800070e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000712:	fb07 1110 	mls	r1, r7, r0, r1
 8000716:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071a:	fb00 f606 	mul.w	r6, r0, r6
 800071e:	429e      	cmp	r6, r3
 8000720:	d90a      	bls.n	8000738 <__udivmoddi4+0x94>
 8000722:	eb1c 0303 	adds.w	r3, ip, r3
 8000726:	f100 31ff 	add.w	r1, r0, #4294967295
 800072a:	f080 80fc 	bcs.w	8000926 <__udivmoddi4+0x282>
 800072e:	429e      	cmp	r6, r3
 8000730:	f240 80f9 	bls.w	8000926 <__udivmoddi4+0x282>
 8000734:	4463      	add	r3, ip
 8000736:	3802      	subs	r0, #2
 8000738:	1b9b      	subs	r3, r3, r6
 800073a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800073e:	2100      	movs	r1, #0
 8000740:	b11d      	cbz	r5, 800074a <__udivmoddi4+0xa6>
 8000742:	40d3      	lsrs	r3, r2
 8000744:	2200      	movs	r2, #0
 8000746:	e9c5 3200 	strd	r3, r2, [r5]
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	428b      	cmp	r3, r1
 8000750:	d905      	bls.n	800075e <__udivmoddi4+0xba>
 8000752:	b10d      	cbz	r5, 8000758 <__udivmoddi4+0xb4>
 8000754:	e9c5 0100 	strd	r0, r1, [r5]
 8000758:	2100      	movs	r1, #0
 800075a:	4608      	mov	r0, r1
 800075c:	e7f5      	b.n	800074a <__udivmoddi4+0xa6>
 800075e:	fab3 f183 	clz	r1, r3
 8000762:	2900      	cmp	r1, #0
 8000764:	d146      	bne.n	80007f4 <__udivmoddi4+0x150>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d302      	bcc.n	8000770 <__udivmoddi4+0xcc>
 800076a:	4290      	cmp	r0, r2
 800076c:	f0c0 80f0 	bcc.w	8000950 <__udivmoddi4+0x2ac>
 8000770:	1a86      	subs	r6, r0, r2
 8000772:	eb64 0303 	sbc.w	r3, r4, r3
 8000776:	2001      	movs	r0, #1
 8000778:	2d00      	cmp	r5, #0
 800077a:	d0e6      	beq.n	800074a <__udivmoddi4+0xa6>
 800077c:	e9c5 6300 	strd	r6, r3, [r5]
 8000780:	e7e3      	b.n	800074a <__udivmoddi4+0xa6>
 8000782:	2a00      	cmp	r2, #0
 8000784:	f040 8090 	bne.w	80008a8 <__udivmoddi4+0x204>
 8000788:	eba1 040c 	sub.w	r4, r1, ip
 800078c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000790:	fa1f f78c 	uxth.w	r7, ip
 8000794:	2101      	movs	r1, #1
 8000796:	fbb4 f6f8 	udiv	r6, r4, r8
 800079a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800079e:	fb08 4416 	mls	r4, r8, r6, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb07 f006 	mul.w	r0, r7, r6
 80007aa:	4298      	cmp	r0, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x11c>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x11a>
 80007b8:	4298      	cmp	r0, r3
 80007ba:	f200 80cd 	bhi.w	8000958 <__udivmoddi4+0x2b4>
 80007be:	4626      	mov	r6, r4
 80007c0:	1a1c      	subs	r4, r3, r0
 80007c2:	fa1f f38e 	uxth.w	r3, lr
 80007c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ca:	fb08 4410 	mls	r4, r8, r0, r4
 80007ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007d2:	fb00 f707 	mul.w	r7, r0, r7
 80007d6:	429f      	cmp	r7, r3
 80007d8:	d908      	bls.n	80007ec <__udivmoddi4+0x148>
 80007da:	eb1c 0303 	adds.w	r3, ip, r3
 80007de:	f100 34ff 	add.w	r4, r0, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0x146>
 80007e4:	429f      	cmp	r7, r3
 80007e6:	f200 80b0 	bhi.w	800094a <__udivmoddi4+0x2a6>
 80007ea:	4620      	mov	r0, r4
 80007ec:	1bdb      	subs	r3, r3, r7
 80007ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007f2:	e7a5      	b.n	8000740 <__udivmoddi4+0x9c>
 80007f4:	f1c1 0620 	rsb	r6, r1, #32
 80007f8:	408b      	lsls	r3, r1
 80007fa:	fa22 f706 	lsr.w	r7, r2, r6
 80007fe:	431f      	orrs	r7, r3
 8000800:	fa20 fc06 	lsr.w	ip, r0, r6
 8000804:	fa04 f301 	lsl.w	r3, r4, r1
 8000808:	ea43 030c 	orr.w	r3, r3, ip
 800080c:	40f4      	lsrs	r4, r6
 800080e:	fa00 f801 	lsl.w	r8, r0, r1
 8000812:	0c38      	lsrs	r0, r7, #16
 8000814:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000818:	fbb4 fef0 	udiv	lr, r4, r0
 800081c:	fa1f fc87 	uxth.w	ip, r7
 8000820:	fb00 441e 	mls	r4, r0, lr, r4
 8000824:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000828:	fb0e f90c 	mul.w	r9, lr, ip
 800082c:	45a1      	cmp	r9, r4
 800082e:	fa02 f201 	lsl.w	r2, r2, r1
 8000832:	d90a      	bls.n	800084a <__udivmoddi4+0x1a6>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f10e 3aff 	add.w	sl, lr, #4294967295
 800083a:	f080 8084 	bcs.w	8000946 <__udivmoddi4+0x2a2>
 800083e:	45a1      	cmp	r9, r4
 8000840:	f240 8081 	bls.w	8000946 <__udivmoddi4+0x2a2>
 8000844:	f1ae 0e02 	sub.w	lr, lr, #2
 8000848:	443c      	add	r4, r7
 800084a:	eba4 0409 	sub.w	r4, r4, r9
 800084e:	fa1f f983 	uxth.w	r9, r3
 8000852:	fbb4 f3f0 	udiv	r3, r4, r0
 8000856:	fb00 4413 	mls	r4, r0, r3, r4
 800085a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800085e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000862:	45a4      	cmp	ip, r4
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x1d2>
 8000866:	193c      	adds	r4, r7, r4
 8000868:	f103 30ff 	add.w	r0, r3, #4294967295
 800086c:	d267      	bcs.n	800093e <__udivmoddi4+0x29a>
 800086e:	45a4      	cmp	ip, r4
 8000870:	d965      	bls.n	800093e <__udivmoddi4+0x29a>
 8000872:	3b02      	subs	r3, #2
 8000874:	443c      	add	r4, r7
 8000876:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800087a:	fba0 9302 	umull	r9, r3, r0, r2
 800087e:	eba4 040c 	sub.w	r4, r4, ip
 8000882:	429c      	cmp	r4, r3
 8000884:	46ce      	mov	lr, r9
 8000886:	469c      	mov	ip, r3
 8000888:	d351      	bcc.n	800092e <__udivmoddi4+0x28a>
 800088a:	d04e      	beq.n	800092a <__udivmoddi4+0x286>
 800088c:	b155      	cbz	r5, 80008a4 <__udivmoddi4+0x200>
 800088e:	ebb8 030e 	subs.w	r3, r8, lr
 8000892:	eb64 040c 	sbc.w	r4, r4, ip
 8000896:	fa04 f606 	lsl.w	r6, r4, r6
 800089a:	40cb      	lsrs	r3, r1
 800089c:	431e      	orrs	r6, r3
 800089e:	40cc      	lsrs	r4, r1
 80008a0:	e9c5 6400 	strd	r6, r4, [r5]
 80008a4:	2100      	movs	r1, #0
 80008a6:	e750      	b.n	800074a <__udivmoddi4+0xa6>
 80008a8:	f1c2 0320 	rsb	r3, r2, #32
 80008ac:	fa20 f103 	lsr.w	r1, r0, r3
 80008b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b4:	fa24 f303 	lsr.w	r3, r4, r3
 80008b8:	4094      	lsls	r4, r2
 80008ba:	430c      	orrs	r4, r1
 80008bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3110 	mls	r1, r8, r0, r3
 80008d0:	0c23      	lsrs	r3, r4, #16
 80008d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008d6:	fb00 f107 	mul.w	r1, r0, r7
 80008da:	4299      	cmp	r1, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x24c>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80008e6:	d22c      	bcs.n	8000942 <__udivmoddi4+0x29e>
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d92a      	bls.n	8000942 <__udivmoddi4+0x29e>
 80008ec:	3802      	subs	r0, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1a5b      	subs	r3, r3, r1
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80008f8:	fb08 3311 	mls	r3, r8, r1, r3
 80008fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000900:	fb01 f307 	mul.w	r3, r1, r7
 8000904:	42a3      	cmp	r3, r4
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x276>
 8000908:	eb1c 0404 	adds.w	r4, ip, r4
 800090c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000910:	d213      	bcs.n	800093a <__udivmoddi4+0x296>
 8000912:	42a3      	cmp	r3, r4
 8000914:	d911      	bls.n	800093a <__udivmoddi4+0x296>
 8000916:	3902      	subs	r1, #2
 8000918:	4464      	add	r4, ip
 800091a:	1ae4      	subs	r4, r4, r3
 800091c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000920:	e739      	b.n	8000796 <__udivmoddi4+0xf2>
 8000922:	4604      	mov	r4, r0
 8000924:	e6f0      	b.n	8000708 <__udivmoddi4+0x64>
 8000926:	4608      	mov	r0, r1
 8000928:	e706      	b.n	8000738 <__udivmoddi4+0x94>
 800092a:	45c8      	cmp	r8, r9
 800092c:	d2ae      	bcs.n	800088c <__udivmoddi4+0x1e8>
 800092e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000932:	eb63 0c07 	sbc.w	ip, r3, r7
 8000936:	3801      	subs	r0, #1
 8000938:	e7a8      	b.n	800088c <__udivmoddi4+0x1e8>
 800093a:	4631      	mov	r1, r6
 800093c:	e7ed      	b.n	800091a <__udivmoddi4+0x276>
 800093e:	4603      	mov	r3, r0
 8000940:	e799      	b.n	8000876 <__udivmoddi4+0x1d2>
 8000942:	4630      	mov	r0, r6
 8000944:	e7d4      	b.n	80008f0 <__udivmoddi4+0x24c>
 8000946:	46d6      	mov	lr, sl
 8000948:	e77f      	b.n	800084a <__udivmoddi4+0x1a6>
 800094a:	4463      	add	r3, ip
 800094c:	3802      	subs	r0, #2
 800094e:	e74d      	b.n	80007ec <__udivmoddi4+0x148>
 8000950:	4606      	mov	r6, r0
 8000952:	4623      	mov	r3, r4
 8000954:	4608      	mov	r0, r1
 8000956:	e70f      	b.n	8000778 <__udivmoddi4+0xd4>
 8000958:	3e02      	subs	r6, #2
 800095a:	4463      	add	r3, ip
 800095c:	e730      	b.n	80007c0 <__udivmoddi4+0x11c>
 800095e:	bf00      	nop

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <_ZN15displayPhysical6enableEb>:

////////////
// ENABLE //
////////////

void displayPhysical::enable( bool onOff ){
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	if ( !onOff ){					//	Si esta apagado
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d003      	beq.n	8000984 <_ZN15displayPhysical6enableEb+0x20>
		this->flagEnable	= 0;	//	Deshabilita
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
	}
	else{							//	Si esta prendido
		this->flagEnable	= 1;	//	Habilita
	}
}
 8000982:	e002      	b.n	800098a <_ZN15displayPhysical6enableEb+0x26>
		this->flagEnable	= 1;	//	Habilita
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80009a6:	88fa      	ldrh	r2, [r7, #6]
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ae:	dc01      	bgt.n	80009b4 <_Z12bytestowritett+0x1e>
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	e003      	b.n	80009bc <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80009ba:	b29b      	uxth	r3, r3
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_Z12EEPROM_WritettPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af04      	add	r7, sp, #16
 80009ce:	60ba      	str	r2, [r7, #8]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	81fb      	strh	r3, [r7, #14]
 80009d6:	460b      	mov	r3, r1
 80009d8:	81bb      	strh	r3, [r7, #12]
 80009da:	4613      	mov	r3, r2
 80009dc:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80009de:	2306      	movs	r3, #6
 80009e0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80009e6:	88fa      	ldrh	r2, [r7, #6]
 80009e8:	89bb      	ldrh	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da00      	bge.n	80009f2 <_Z12EEPROM_WritettPht+0x2a>
 80009f0:	333f      	adds	r3, #63	@ 0x3f
 80009f2:	119b      	asrs	r3, r3, #6
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	4413      	add	r3, r2
 80009fa:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80009fc:	8b7a      	ldrh	r2, [r7, #26]
 80009fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	3301      	adds	r3, #1
 8000a06:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	e034      	b.n	8000a7c <_Z12EEPROM_WritettPht+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000a12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000a26:	89ba      	ldrh	r2, [r7, #12]
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffb2 	bl	8000996 <_Z12bytestowritett>
 8000a32:	4603      	mov	r3, r0
 8000a34:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	8af9      	ldrh	r1, [r7, #22]
 8000a3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a42:	9202      	str	r2, [sp, #8]
 8000a44:	8aba      	ldrh	r2, [r7, #20]
 8000a46:	9201      	str	r2, [sp, #4]
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	21a0      	movs	r1, #160	@ 0xa0
 8000a50:	480f      	ldr	r0, [pc, #60]	@ (8000a90 <_Z12EEPROM_WritettPht+0xc8>)
 8000a52:	f007 f8f1 	bl	8007c38 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a58:	3301      	adds	r3, #1
 8000a5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	8abb      	ldrh	r3, [r7, #20]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000a68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000a6a:	8abb      	ldrh	r3, [r7, #20]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	84bb      	strh	r3, [r7, #36]	@ 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000a70:	2005      	movs	r0, #5
 8000a72:	f004 fa6f 	bl	8004f54 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	8b3b      	ldrh	r3, [r7, #24]
 8000a7e:	6a3a      	ldr	r2, [r7, #32]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbc6      	blt.n	8000a12 <_Z12EEPROM_WritettPht+0x4a>
	}
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200007dc 	.word	0x200007dc

08000a94 <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af04      	add	r7, sp, #16
 8000a9a:	60ba      	str	r2, [r7, #8]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	81fb      	strh	r3, [r7, #14]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	81bb      	strh	r3, [r7, #12]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000aaa:	2306      	movs	r3, #6
 8000aac:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	89bb      	ldrh	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	da00      	bge.n	8000abe <_Z11EEPROM_ReadttPht+0x2a>
 8000abc:	333f      	adds	r3, #63	@ 0x3f
 8000abe:	119b      	asrs	r3, r3, #6
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000ac8:	8b7a      	ldrh	r2, [r7, #26]
 8000aca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	e031      	b.n	8000b42 <_Z11EEPROM_ReadttPht+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000ade:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000af2:	89ba      	ldrh	r2, [r7, #12]
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff4c 	bl	8000996 <_Z12bytestowritett>
 8000afe:	4603      	mov	r3, r0
 8000b00:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	4413      	add	r3, r2
 8000b08:	8af9      	ldrh	r1, [r7, #22]
 8000b0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b0e:	9202      	str	r2, [sp, #8]
 8000b10:	8aba      	ldrh	r2, [r7, #20]
 8000b12:	9201      	str	r2, [sp, #4]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2302      	movs	r3, #2
 8000b18:	460a      	mov	r2, r1
 8000b1a:	21a0      	movs	r1, #160	@ 0xa0
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <_Z11EEPROM_ReadttPht+0xc0>)
 8000b1e:	f007 f99f 	bl	8007e60 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000b22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b24:	3301      	adds	r3, #1
 8000b26:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000b2c:	88fa      	ldrh	r2, [r7, #6]
 8000b2e:	8abb      	ldrh	r3, [r7, #20]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000b34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000b36:	8abb      	ldrh	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	8b3b      	ldrh	r3, [r7, #24]
 8000b44:	6a3a      	ldr	r2, [r7, #32]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbc9      	blt.n	8000ade <_Z11EEPROM_ReadttPht+0x4a>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200007dc 	.word	0x200007dc

08000b58 <_Z3appv>:

/////////
// APP //
/////////

void app(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	warming();
 8000b5c:	f000 fb08 	bl	8001170 <_Z7warmingv>
	stability();
 8000b60:	f000 f8de 	bl	8000d20 <_Z9stabilityv>
	process();
 8000b64:	f000 f9e4 	bl	8000f30 <_Z7processv>
	displayCalib();
 8000b68:	f000 f802 	bl	8000b70 <_Z12displayCalibv>
	//appContent();
	//appLora();
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_Z12displayCalibv>:

void displayCalib(){
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	switch(stateProcess){
 8000b74:	4b65      	ldr	r3, [pc, #404]	@ (8000d0c <_Z12displayCalibv+0x19c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	f200 80c0 	bhi.w	8000cfe <_Z12displayCalibv+0x18e>
 8000b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b84 <_Z12displayCalibv+0x14>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000ba9 	.word	0x08000ba9
 8000b88:	08000bbd 	.word	0x08000bbd
 8000b8c:	08000be9 	.word	0x08000be9
 8000b90:	08000bfd 	.word	0x08000bfd
 8000b94:	08000c11 	.word	0x08000c11
 8000b98:	08000c3d 	.word	0x08000c3d
 8000b9c:	08000c69 	.word	0x08000c69
 8000ba0:	08000ca7 	.word	0x08000ca7
 8000ba4:	08000cd3 	.word	0x08000cd3
	case 0:
		flagLedOn	= 0;
 8000ba8:	4b59      	ldr	r3, [pc, #356]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 1;
 8000bae:	4b59      	ldr	r3, [pc, #356]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000bb4:	4b58      	ldr	r3, [pc, #352]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
		break;
 8000bba:	e0a1      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 1:
		flagLedOn	= 0;
 8000bbc:	4b54      	ldr	r3, [pc, #336]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000bc2:	4b54      	ldr	r3, [pc, #336]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000bc8:	4b53      	ldr	r3, [pc, #332]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'H';
 8000bce:	4b53      	ldr	r3, [pc, #332]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000bd0:	2248      	movs	r2, #72	@ 0x48
 8000bd2:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'E';
 8000bd4:	4b51      	ldr	r3, [pc, #324]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000bd6:	2245      	movs	r2, #69	@ 0x45
 8000bd8:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'A';
 8000bda:	4b50      	ldr	r3, [pc, #320]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000bdc:	2241      	movs	r2, #65	@ 0x41
 8000bde:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'T';
 8000be0:	4b4e      	ldr	r3, [pc, #312]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000be2:	2254      	movs	r2, #84	@ 0x54
 8000be4:	70da      	strb	r2, [r3, #3]
		break;
 8000be6:	e08b      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 2:
		flagLedOn	= 0;
 8000be8:	4b49      	ldr	r3, [pc, #292]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000bee:	4b49      	ldr	r3, [pc, #292]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000bf4:	4b48      	ldr	r3, [pc, #288]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
		break;
 8000bfa:	e081      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 3:
		flagLedOn	= 0;
 8000bfc:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c02:	4b44      	ldr	r3, [pc, #272]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c08:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
		break;
 8000c0e:	e077      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 4:
		flagLedOn	= 1;
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c16:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'E';
 8000c22:	4b3e      	ldr	r3, [pc, #248]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c24:	2245      	movs	r2, #69	@ 0x45
 8000c26:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'R';
 8000c28:	4b3c      	ldr	r3, [pc, #240]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c2a:	2252      	movs	r2, #82	@ 0x52
 8000c2c:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'R';
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c30:	2252      	movs	r2, #82	@ 0x52
 8000c32:	709a      	strb	r2, [r3, #2]
		calibContent[3] = ' ';
 8000c34:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c36:	2220      	movs	r2, #32
 8000c38:	70da      	strb	r2, [r3, #3]
		break;
 8000c3a:	e061      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 5:
		flagLedOn	= 0;
 8000c3c:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 1;
 8000c42:	4b34      	ldr	r3, [pc, #208]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000c48:	4b33      	ldr	r3, [pc, #204]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'S';
 8000c4e:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c50:	2253      	movs	r2, #83	@ 0x53
 8000c52:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'T';
 8000c54:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c56:	2254      	movs	r2, #84	@ 0x54
 8000c58:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'A';
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c5c:	2241      	movs	r2, #65	@ 0x41
 8000c5e:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'R';
 8000c60:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c62:	2252      	movs	r2, #82	@ 0x52
 8000c64:	70da      	strb	r2, [r3, #3]
		break;
 8000c66:	e04b      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 6:
		flagLedOn	= 0;
 8000c68:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c74:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]

		flagLedOn	= 0;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c80:	4b24      	ldr	r3, [pc, #144]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c86:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'C';
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c8e:	2243      	movs	r2, #67	@ 0x43
 8000c90:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'A';
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c94:	2241      	movs	r2, #65	@ 0x41
 8000c96:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'L';
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c9a:	224c      	movs	r2, #76	@ 0x4c
 8000c9c:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'I';
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000ca0:	2249      	movs	r2, #73	@ 0x49
 8000ca2:	70da      	strb	r2, [r3, #3]
		break;
 8000ca4:	e02c      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 7:
		flagLedOn	= 0;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'C';
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cba:	2243      	movs	r2, #67	@ 0x43
 8000cbc:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'A';
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cc0:	2241      	movs	r2, #65	@ 0x41
 8000cc2:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'L';
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cc6:	224c      	movs	r2, #76	@ 0x4c
 8000cc8:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'I';
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000ccc:	2249      	movs	r2, #73	@ 0x49
 8000cce:	70da      	strb	r2, [r3, #3]
		break;
 8000cd0:	e016      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 8:
		flagLedOn	= 1;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'O';
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000ce6:	224f      	movs	r2, #79	@ 0x4f
 8000ce8:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'K';
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cec:	224b      	movs	r2, #75	@ 0x4b
 8000cee:	705a      	strb	r2, [r3, #1]
		calibContent[2] = ' ';
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	709a      	strb	r2, [r3, #2]
		calibContent[3] = ' ';
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	70da      	strb	r2, [r3, #3]
		break;
 8000cfc:	e000      	b.n	8000d00 <_Z12displayCalibv+0x190>

	default:
		break;
 8000cfe:	bf00      	nop
	}
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2000046a 	.word	0x2000046a
 8000d10:	20000604 	.word	0x20000604
 8000d14:	20000605 	.word	0x20000605
 8000d18:	20000606 	.word	0x20000606
 8000d1c:	200004d4 	.word	0x200004d4

08000d20 <_Z9stabilityv>:

///////////////
// STABILITY //
///////////////

void stability(){
 8000d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	if ( stateAdc == 5 ){				// Si se toma una muestra
 8000d24:	4b74      	ldr	r3, [pc, #464]	@ (8000ef8 <_Z9stabilityv+0x1d8>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b05      	cmp	r3, #5
 8000d2a:	d113      	bne.n	8000d54 <_Z9stabilityv+0x34>
		alphaA_LP	= iir(alphaA);		// Inserta en filtro pasabajos
 8000d2c:	4b73      	ldr	r3, [pc, #460]	@ (8000efc <_Z9stabilityv+0x1dc>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fa68 	bl	8001208 <_Z3iirs>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b70      	ldr	r3, [pc, #448]	@ (8000f00 <_Z9stabilityv+0x1e0>)
 8000d3e:	601a      	str	r2, [r3, #0]
		alphaA_BP	= iir3(alphaA);		// Inserta en filtro pasabanda
 8000d40:	4b6e      	ldr	r3, [pc, #440]	@ (8000efc <_Z9stabilityv+0x1dc>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fae0 	bl	800130c <_Z4iir3s>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b6c      	ldr	r3, [pc, #432]	@ (8000f04 <_Z9stabilityv+0x1e4>)
 8000d52:	601a      	str	r2, [r3, #0]
	}

	switch( stateStability ){
 8000d54:	4b6c      	ldr	r3, [pc, #432]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	f200 80ca 	bhi.w	8000ef2 <_Z9stabilityv+0x1d2>
 8000d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d64 <_Z9stabilityv+0x44>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000da1 	.word	0x08000da1
 8000d6c:	08000dcd 	.word	0x08000dcd
 8000d70:	08000e13 	.word	0x08000e13
 8000d74:	08000ecb 	.word	0x08000ecb
 8000d78:	08000edf 	.word	0x08000edf
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		flagFinishStab	= 0;
 8000d7c:	4b63      	ldr	r3, [pc, #396]	@ (8000f0c <_Z9stabilityv+0x1ec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
		flagStability	= 0;
 8000d82:	4b63      	ldr	r3, [pc, #396]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
		if ( flagStartStability ){	// Si se indica inciar
 8000d88:	4b62      	ldr	r3, [pc, #392]	@ (8000f14 <_Z9stabilityv+0x1f4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <_Z9stabilityv+0x78>
			stateStability	= 1;	// Para a S1
 8000d90:	4b5d      	ldr	r3, [pc, #372]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateStability	= 0;	// Queda en S0
		}
		break;
 8000d96:	e0ad      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
			stateStability	= 0;	// Queda en S0
 8000d98:	4b5b      	ldr	r3, [pc, #364]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
		break;
 8000d9e:	e0a9      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
	//////////////////////
	// S1 - WAIT A TIME //
	//////////////////////

	case 1:
		countStability++;						//
 8000da0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f18 <_Z9stabilityv+0x1f8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a5c      	ldr	r2, [pc, #368]	@ (8000f18 <_Z9stabilityv+0x1f8>)
 8000da8:	6013      	str	r3, [r2, #0]

		if (countStability >= limitStability ){	//
 8000daa:	4b5b      	ldr	r3, [pc, #364]	@ (8000f18 <_Z9stabilityv+0x1f8>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b5b      	ldr	r3, [pc, #364]	@ (8000f1c <_Z9stabilityv+0x1fc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d306      	bcc.n	8000dc4 <_Z9stabilityv+0xa4>
			countStability	= 0;				//
 8000db6:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <_Z9stabilityv+0x1f8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
			stateStability	= 2;				//
 8000dbc:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	701a      	strb	r2, [r3, #0]
		}
		else{									//
			stateStability	= 1;				//
		}
		break;
 8000dc2:	e097      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
			stateStability	= 1;				//
 8000dc4:	4b50      	ldr	r3, [pc, #320]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
		break;
 8000dca:	e093      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	////////////////////
	// S2 - SAVE DATA //
	////////////////////
	case 2:
		if ( stateAdc == 5 ){							// Si llega un dato
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef8 <_Z9stabilityv+0x1d8>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b05      	cmp	r3, #5
 8000dd2:	d10d      	bne.n	8000df0 <_Z9stabilityv+0xd0>
			bufferStabA[ countStability2 ]	= alphaA;	// Guarda valor bruto
 8000dd4:	4b52      	ldr	r3, [pc, #328]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b48      	ldr	r3, [pc, #288]	@ (8000efc <_Z9stabilityv+0x1dc>)
 8000ddc:	8819      	ldrh	r1, [r3, #0]
 8000dde:	4b51      	ldr	r3, [pc, #324]	@ (8000f24 <_Z9stabilityv+0x204>)
 8000de0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			countStability2++;							// Suma 1
 8000de4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000dee:	701a      	strb	r2, [r3, #0]
		}

		if ( countStability2 >= sizeBufStab ){			// Si pasa limite del buffer
 8000df0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f28 <_Z9stabilityv+0x208>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d306      	bcc.n	8000e0a <_Z9stabilityv+0xea>
			countStability2	= 0;						// Reinicia contador
 8000dfc:	4b48      	ldr	r3, [pc, #288]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
			stateStability	= 3;						// Pasa a S3
 8000e02:	4b41      	ldr	r3, [pc, #260]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateStability	= 2;						// Queda en S2
		}

		break;
 8000e08:	e074      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
			stateStability	= 2;						// Queda en S2
 8000e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	701a      	strb	r2, [r3, #0]
		break;
 8000e10:	e070      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	case 3:
		for ( countStability2 = 0; countStability2 < sizeBufStab; countStability2++ ){	// Recorre el buffer
 8000e12:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e031      	b.n	8000e7e <_Z9stabilityv+0x15e>
			if ( fabs(bufferStabA[ countStability2 ] - alphaA_LP) < limitStability){	// Si la diferencia entre la muestra y valor Mean es menor al limite de stabilidad
 8000e1a:	4b41      	ldr	r3, [pc, #260]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b40      	ldr	r3, [pc, #256]	@ (8000f24 <_Z9stabilityv+0x204>)
 8000e22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <_Z9stabilityv+0x1e0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fae6 	bl	8001400 <_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e34:	ec55 4b10 	vmov	r4, r5, d0
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <_Z9stabilityv+0x1fc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb17 	bl	8000470 <__aeabi_ui2d>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	2101      	movs	r1, #1
 8000e48:	460e      	mov	r6, r1
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	f7ff fbe9 	bl	8000624 <__aeabi_dcmplt>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <_Z9stabilityv+0x13c>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	461e      	mov	r6, r3
 8000e5c:	b2f3      	uxtb	r3, r6
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <_Z9stabilityv+0x14a>
				flagStability	= 1;													// Marca que es estable
 8000e62:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e003      	b.n	8000e72 <_Z9stabilityv+0x152>
			}
			else{																		// Si no
				flagStability	= 0;													// Marcaque es inestable
 8000e6a:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
				break;																	// Sale del ciclo for
 8000e70:	e00b      	b.n	8000e8a <_Z9stabilityv+0x16a>
		for ( countStability2 = 0; countStability2 < sizeBufStab; countStability2++ ){	// Recorre el buffer
 8000e72:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <_Z9stabilityv+0x208>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3c7      	bcc.n	8000e1a <_Z9stabilityv+0xfa>
			}
		}

		countStability3++;								// Suma 1 al contador
 8000e8a:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b26      	ldr	r3, [pc, #152]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000e94:	701a      	strb	r2, [r3, #0]

		if (flagStability){								// Si es estable
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <_Z9stabilityv+0x18c>
			countStability3	= 0;						// Reinicia contador
 8000e9e:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
			stateStability	= 5;						// Pasa a S5
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	701a      	strb	r2, [r3, #0]
			stateStability	= 4;						// Pasa a S4
		}
		else{											// Si no
			stateStability	= 1;						// Vuelve a S1
		}
		break;
 8000eaa:	e023      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
		else if ( countStability3 >= limitRetStab ){	// Si lleva muchos reintentos
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d906      	bls.n	8000ec2 <_Z9stabilityv+0x1a2>
			countStability3	= 0;						// Reinicia contador
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
			stateStability	= 4;						// Pasa a S4
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	701a      	strb	r2, [r3, #0]
		break;
 8000ec0:	e018      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
			stateStability	= 1;						// Vuelve a S1
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
		break;
 8000ec8:	e014      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	case 4:
		flagFinishStab	= 1;
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <_Z9stabilityv+0x1ec>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		flagStability	= 0;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
		stateStability	= 0;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
		break;
 8000edc:	e00a      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	case 5:
		flagFinishStab	= 1;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <_Z9stabilityv+0x1ec>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
		flagStability	= 1;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
		stateStability	= 0;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
		break;
 8000ef0:	e000      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	default:
		break;
 8000ef2:	bf00      	nop
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef8:	20000534 	.word	0x20000534
 8000efc:	2000054a 	.word	0x2000054a
 8000f00:	20000478 	.word	0x20000478
 8000f04:	2000047c 	.word	0x2000047c
 8000f08:	20000484 	.word	0x20000484
 8000f0c:	20000495 	.word	0x20000495
 8000f10:	20000474 	.word	0x20000474
 8000f14:	20000494 	.word	0x20000494
 8000f18:	20000488 	.word	0x20000488
 8000f1c:	20000490 	.word	0x20000490
 8000f20:	2000048c 	.word	0x2000048c
 8000f24:	20000498 	.word	0x20000498
 8000f28:	20000004 	.word	0x20000004
 8000f2c:	2000048d 	.word	0x2000048d

08000f30 <_Z7processv>:
 * S7:	SET FINAL POINT
 * S8:	SAVE IN EEPROM
 * S9:	WAIT FOR RESET PROCESS
 */

void process(){
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0


	switch ( stateProcess ){
 8000f34:	4b81      	ldr	r3, [pc, #516]	@ (800113c <_Z7processv+0x20c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	f200 80f6 	bhi.w	800112a <_Z7processv+0x1fa>
 8000f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f44 <_Z7processv+0x14>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f69 	.word	0x08000f69
 8000f48:	08000f77 	.word	0x08000f77
 8000f4c:	08000f95 	.word	0x08000f95
 8000f50:	08000fd1 	.word	0x08000fd1
 8000f54:	08001021 	.word	0x08001021
 8000f58:	08001039 	.word	0x08001039
 8000f5c:	08001051 	.word	0x08001051
 8000f60:	080010a1 	.word	0x080010a1
 8000f64:	0800110d 	.word	0x0800110d
	////////////////////////
	// S0 - START PROCESS //
	////////////////////////

	case 0:
		flagResetWarming	= 1;	// Indica que empieza el calentaiento del sensor
 8000f68:	4b75      	ldr	r3, [pc, #468]	@ (8001140 <_Z7processv+0x210>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
		stateProcess		= 1;	// Pasa a S1
 8000f6e:	4b73      	ldr	r3, [pc, #460]	@ (800113c <_Z7processv+0x20c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
		break;
 8000f74:	e0dd      	b.n	8001132 <_Z7processv+0x202>
	///////////////////////////
	// S1 - WAIT FOR WARMING //
	///////////////////////////

	case 1:
		flagResetWarming	= 0;	// Reinicia indicador
 8000f76:	4b72      	ldr	r3, [pc, #456]	@ (8001140 <_Z7processv+0x210>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]

		if ( flagWarmingOk ){		// Si indica que se calentó
 8000f7c:	4b71      	ldr	r3, [pc, #452]	@ (8001144 <_Z7processv+0x214>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <_Z7processv+0x5c>
			stateProcess	= 2;	// Pasa a S2
 8000f84:	4b6d      	ldr	r3, [pc, #436]	@ (800113c <_Z7processv+0x20c>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 1;	// Queda en S1
		}
		break;
 8000f8a:	e0d2      	b.n	8001132 <_Z7processv+0x202>
			stateProcess	= 1;	// Queda en S1
 8000f8c:	4b6b      	ldr	r3, [pc, #428]	@ (800113c <_Z7processv+0x20c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
		break;
 8000f92:	e0ce      	b.n	8001132 <_Z7processv+0x202>
	/////////////////////
	// S2 - SET GROUND //
	/////////////////////

	case 2:
		countProcess++;							// Suma 1 al contador
 8000f94:	4b6c      	ldr	r3, [pc, #432]	@ (8001148 <_Z7processv+0x218>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8001148 <_Z7processv+0x218>)
 8000f9c:	6013      	str	r3, [r2, #0]

		if ( countProcess >= limitProcess){		// Si se llega al limite de tiempo
 8000f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001148 <_Z7processv+0x218>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800114c <_Z7processv+0x21c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d30e      	bcc.n	8000fc8 <_Z7processv+0x98>
			countProcess		= 0;			// Reinicia contador
 8000faa:	4b67      	ldr	r3, [pc, #412]	@ (8001148 <_Z7processv+0x218>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
			meanAlphaA			= alphaA_LP;	// Guarda valor en filtro
 8000fb0:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <_Z7processv+0x220>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b67      	ldr	r3, [pc, #412]	@ (8001154 <_Z7processv+0x224>)
 8000fb8:	801a      	strh	r2, [r3, #0]
			flagStartStability	= 1;			//
 8000fba:	4b67      	ldr	r3, [pc, #412]	@ (8001158 <_Z7processv+0x228>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
			stateProcess		= 3;			// Pasa a S3
 8000fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800113c <_Z7processv+0x20c>)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateProcess	= 2;				// Espera en S2
		}
		break;
 8000fc6:	e0b4      	b.n	8001132 <_Z7processv+0x202>
			stateProcess	= 2;				// Espera en S2
 8000fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800113c <_Z7processv+0x20c>)
 8000fca:	2202      	movs	r2, #2
 8000fcc:	701a      	strb	r2, [r3, #0]
		break;
 8000fce:	e0b0      	b.n	8001132 <_Z7processv+0x202>
	//////////////////////////
	// S3 - CHECK STABILITY //
	//////////////////////////

	case 3:
		flagStartStability	= 0;						//
 8000fd0:	4b61      	ldr	r3, [pc, #388]	@ (8001158 <_Z7processv+0x228>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]

		if ( flagFinishStab && flagStability){			// Si es estable
 8000fd6:	4b61      	ldr	r3, [pc, #388]	@ (800115c <_Z7processv+0x22c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00c      	beq.n	8000ff8 <_Z7processv+0xc8>
 8000fde:	4b60      	ldr	r3, [pc, #384]	@ (8001160 <_Z7processv+0x230>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d008      	beq.n	8000ff8 <_Z7processv+0xc8>
			meanAlphaA		= alphaA_LP;				//
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8001150 <_Z7processv+0x220>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b59      	ldr	r3, [pc, #356]	@ (8001154 <_Z7processv+0x224>)
 8000fee:	801a      	strh	r2, [r3, #0]
			stateProcess	= 5;						// Pasa a S5
 8000ff0:	4b52      	ldr	r3, [pc, #328]	@ (800113c <_Z7processv+0x20c>)
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e012      	b.n	800101e <_Z7processv+0xee>
		}
		else if ( flagFinishStab && !flagStability){	// Si es inestable
 8000ff8:	4b58      	ldr	r3, [pc, #352]	@ (800115c <_Z7processv+0x22c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00a      	beq.n	8001016 <_Z7processv+0xe6>
 8001000:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <_Z7processv+0x230>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <_Z7processv+0xe6>
			stateProcess	= 4;						// Pasa  S4
 800100e:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <_Z7processv+0x20c>)
 8001010:	2204      	movs	r2, #4
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e003      	b.n	800101e <_Z7processv+0xee>
		}
		else{											// Si no marca
			stateProcess	= 3;						// Espera en S3
 8001016:	4b49      	ldr	r3, [pc, #292]	@ (800113c <_Z7processv+0x20c>)
 8001018:	2203      	movs	r2, #3
 800101a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800101c:	e089      	b.n	8001132 <_Z7processv+0x202>
 800101e:	e088      	b.n	8001132 <_Z7processv+0x202>
	////////////////////
	// S4 - SET ERROR //
	////////////////////

	case 4:
		if (flagBoton){				// Si se aprieta boton
 8001020:	4b50      	ldr	r3, [pc, #320]	@ (8001164 <_Z7processv+0x234>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <_Z7processv+0x100>
			stateProcess	= 0;	// Reinicia la maquina
 8001028:	4b44      	ldr	r3, [pc, #272]	@ (800113c <_Z7processv+0x20c>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 4;	// Espera en S4
		}
		break;
 800102e:	e080      	b.n	8001132 <_Z7processv+0x202>
			stateProcess	= 4;	// Espera en S4
 8001030:	4b42      	ldr	r3, [pc, #264]	@ (800113c <_Z7processv+0x20c>)
 8001032:	2204      	movs	r2, #4
 8001034:	701a      	strb	r2, [r3, #0]
		break;
 8001036:	e07c      	b.n	8001132 <_Z7processv+0x202>
	///////////////////////////
	// S5 - WAIT INSTRUCTION //
	///////////////////////////

	case 5:
		if (flagBoton){				// Si se aprieta el boton
 8001038:	4b4a      	ldr	r3, [pc, #296]	@ (8001164 <_Z7processv+0x234>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <_Z7processv+0x118>
			stateProcess	= 6;	// Inicia proceso calibracion
 8001040:	4b3e      	ldr	r3, [pc, #248]	@ (800113c <_Z7processv+0x20c>)
 8001042:	2206      	movs	r2, #6
 8001044:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 5;	// Espera en S5
		}
		break;
 8001046:	e074      	b.n	8001132 <_Z7processv+0x202>
			stateProcess	= 5;	// Espera en S5
 8001048:	4b3c      	ldr	r3, [pc, #240]	@ (800113c <_Z7processv+0x20c>)
 800104a:	2205      	movs	r2, #5
 800104c:	701a      	strb	r2, [r3, #0]
		break;
 800104e:	e070      	b.n	8001132 <_Z7processv+0x202>
	/////////////////////////
	// S6 - DETECT INCEASE //
	/////////////////////////

	case 6:
		countProcess++;										// Suma 1 al contador
 8001050:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <_Z7processv+0x218>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a3c      	ldr	r2, [pc, #240]	@ (8001148 <_Z7processv+0x218>)
 8001058:	6013      	str	r3, [r2, #0]

		if (alphaA_LP - meanAlphaA >=  1){//limitStability ){ // Si se detecta increento
 800105a:	4b3d      	ldr	r3, [pc, #244]	@ (8001150 <_Z7processv+0x220>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a3d      	ldr	r2, [pc, #244]	@ (8001154 <_Z7processv+0x224>)
 8001060:	8812      	ldrh	r2, [r2, #0]
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	dd09      	ble.n	800107c <_Z7processv+0x14c>
			flagStartStability	= 1;
 8001068:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <_Z7processv+0x228>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
			countProcess	= 0;							// Reinicia contador
 800106e:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <_Z7processv+0x218>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
			stateProcess	= 7;							// Pasa a S7
 8001074:	4b31      	ldr	r3, [pc, #196]	@ (800113c <_Z7processv+0x20c>)
 8001076:	2207      	movs	r2, #7
 8001078:	701a      	strb	r2, [r3, #0]
			stateProcess		= 4;						// Pasa a S4 - ERROR
		}
		else{												// Si aun no se cumple el contador
			stateProcess	= 6;							// Queda en S4
		}
		break;
 800107a:	e05a      	b.n	8001132 <_Z7processv+0x202>
		else if ( countProcess >= limitProcess*2 ){			// Si no se detecta crecimiento
 800107c:	4b33      	ldr	r3, [pc, #204]	@ (800114c <_Z7processv+0x21c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	005a      	lsls	r2, r3, #1
 8001082:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <_Z7processv+0x218>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d806      	bhi.n	8001098 <_Z7processv+0x168>
			countProcess		= 0;						// Reinicia contador
 800108a:	4b2f      	ldr	r3, [pc, #188]	@ (8001148 <_Z7processv+0x218>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
			stateProcess		= 4;						// Pasa a S4 - ERROR
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <_Z7processv+0x20c>)
 8001092:	2204      	movs	r2, #4
 8001094:	701a      	strb	r2, [r3, #0]
		break;
 8001096:	e04c      	b.n	8001132 <_Z7processv+0x202>
			stateProcess	= 6;							// Queda en S4
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <_Z7processv+0x20c>)
 800109a:	2206      	movs	r2, #6
 800109c:	701a      	strb	r2, [r3, #0]
		break;
 800109e:	e048      	b.n	8001132 <_Z7processv+0x202>
	/////////////////////////////
	// S7 - WAIT FOR STABILITY //
	/////////////////////////////

	case 7:
		flagStartStability	= 0;						// Reinicia flag
 80010a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001158 <_Z7processv+0x228>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
		countProcess++;									// Suma 1 al proceso
 80010a6:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <_Z7processv+0x218>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a26      	ldr	r2, [pc, #152]	@ (8001148 <_Z7processv+0x218>)
 80010ae:	6013      	str	r3, [r2, #0]

		if ( flagFinishStab && flagStability){			// Si es estable
 80010b0:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <_Z7processv+0x22c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d012      	beq.n	80010de <_Z7processv+0x1ae>
 80010b8:	4b29      	ldr	r3, [pc, #164]	@ (8001160 <_Z7processv+0x230>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00e      	beq.n	80010de <_Z7processv+0x1ae>
			meanAlphaA_2	= alphaA_LP;				//
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <_Z7processv+0x220>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <_Z7processv+0x238>)
 80010c8:	801a      	strh	r2, [r3, #0]
			flagSaveEeprom	= 1;						//
 80010ca:	4b28      	ldr	r3, [pc, #160]	@ (800116c <_Z7processv+0x23c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
			countProcess	= 0;						//
 80010d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <_Z7processv+0x218>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
			stateProcess	= 8;						// Pasa a S5
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <_Z7processv+0x20c>)
 80010d8:	2208      	movs	r2, #8
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e015      	b.n	800110a <_Z7processv+0x1da>
		}
		else if ( flagFinishStab && !flagStability){	// Si es inestable
 80010de:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <_Z7processv+0x22c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00d      	beq.n	8001102 <_Z7processv+0x1d2>
 80010e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <_Z7processv+0x230>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	f083 0301 	eor.w	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <_Z7processv+0x1d2>
			countProcess	= 0;						//
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <_Z7processv+0x218>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
			stateProcess	= 4;						// Pasa  S4
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <_Z7processv+0x20c>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e003      	b.n	800110a <_Z7processv+0x1da>
		}
		else{											// Si no marca
			stateProcess	= 7;						// Espera en S3
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <_Z7processv+0x20c>)
 8001104:	2207      	movs	r2, #7
 8001106:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001108:	e013      	b.n	8001132 <_Z7processv+0x202>
 800110a:	e012      	b.n	8001132 <_Z7processv+0x202>
	////////////////////////
	// S8 - FINISH PROCESS//
	////////////////////////

	case 8:
		flagSaveEeprom		= 0;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <_Z7processv+0x23c>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
		if (flagBoton){				// Si se aprieta el boton
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <_Z7processv+0x234>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <_Z7processv+0x1f2>
			stateProcess	= 0;	// Inicia proceso calibracion
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <_Z7processv+0x20c>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 8;	// Espera en S5
		}
		break;
 8001120:	e007      	b.n	8001132 <_Z7processv+0x202>
			stateProcess	= 8;	// Espera en S5
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <_Z7processv+0x20c>)
 8001124:	2208      	movs	r2, #8
 8001126:	701a      	strb	r2, [r3, #0]
		break;
 8001128:	e003      	b.n	8001132 <_Z7processv+0x202>

	default:
		stateProcess	= 0;
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <_Z7processv+0x20c>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
		break;
 8001130:	bf00      	nop
	}

}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	2000046a 	.word	0x2000046a
 8001140:	20000469 	.word	0x20000469
 8001144:	20000468 	.word	0x20000468
 8001148:	2000046c 	.word	0x2000046c
 800114c:	20000470 	.word	0x20000470
 8001150:	20000478 	.word	0x20000478
 8001154:	20000480 	.word	0x20000480
 8001158:	20000494 	.word	0x20000494
 800115c:	20000495 	.word	0x20000495
 8001160:	20000474 	.word	0x20000474
 8001164:	20000b4c 	.word	0x20000b4c
 8001168:	20000482 	.word	0x20000482
 800116c:	20000607 	.word	0x20000607

08001170 <_Z7warmingv>:

/////////////
// WARMING //
/////////////

void warming(){
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	switch( stateWarming ){
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <_Z7warmingv+0x84>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d02e      	beq.n	80011da <_Z7warmingv+0x6a>
 800117c:	2b02      	cmp	r3, #2
 800117e:	dc33      	bgt.n	80011e8 <_Z7warmingv+0x78>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <_Z7warmingv+0x1a>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00f      	beq.n	80011a8 <_Z7warmingv+0x38>
	case 2:
		flagWarmingOk	= 1;	//
		stateWarming	= 0;	//
		break;
	}
}
 8001188:	e02e      	b.n	80011e8 <_Z7warmingv+0x78>
		flagWarmingOk	= 0;		//
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <_Z7warmingv+0x88>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
		if ( flagResetWarming ){	//
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <_Z7warmingv+0x8c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <_Z7warmingv+0x30>
			stateWarming	= 1;	//
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <_Z7warmingv+0x84>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
		break;
 800119e:	e023      	b.n	80011e8 <_Z7warmingv+0x78>
			stateWarming	= 0;	//
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <_Z7warmingv+0x84>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
		break;
 80011a6:	e01f      	b.n	80011e8 <_Z7warmingv+0x78>
		countWarming++;							//
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <_Z7warmingv+0x90>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <_Z7warmingv+0x90>)
 80011b0:	6013      	str	r3, [r2, #0]
		flagWarmingOk	= 0;					//
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <_Z7warmingv+0x88>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
		if ( countWarming >= limitWarming ){	//
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <_Z7warmingv+0x90>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <_Z7warmingv+0x94>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d306      	bcc.n	80011d2 <_Z7warmingv+0x62>
			countWarming	= 0;				//
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <_Z7warmingv+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
			stateWarming	= 2;				//
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <_Z7warmingv+0x84>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	701a      	strb	r2, [r3, #0]
		break;
 80011d0:	e00a      	b.n	80011e8 <_Z7warmingv+0x78>
			stateWarming	= 1;				//
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_Z7warmingv+0x84>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
		break;
 80011d8:	e006      	b.n	80011e8 <_Z7warmingv+0x78>
		flagWarmingOk	= 1;	//
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <_Z7warmingv+0x88>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
		stateWarming	= 0;	//
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <_Z7warmingv+0x84>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
		break;
 80011e6:	bf00      	nop
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000460 	.word	0x20000460
 80011f8:	20000468 	.word	0x20000468
 80011fc:	20000469 	.word	0x20000469
 8001200:	20000464 	.word	0x20000464
 8001204:	20000000 	.word	0x20000000

08001208 <_Z3iirs>:
	}
	return  value;
}


__int16_t iir(__int16_t NewSample) {
 8001208:	b490      	push	{r4, r7}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
    __int16_t ACoef[NCoef+1] = {
 8001212:	4a3a      	ldr	r2, [pc, #232]	@ (80012fc <_Z3iirs+0xf4>)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121c:	6018      	str	r0, [r3, #0]
 800121e:	3304      	adds	r3, #4
 8001220:	8019      	strh	r1, [r3, #0]
         8294,
        16588,
         8294
    };

    __int16_t BCoef[NCoef+1] = {
 8001222:	4a37      	ldr	r2, [pc, #220]	@ (8001300 <_Z3iirs+0xf8>)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122c:	6018      	str	r0, [r3, #0]
 800122e:	3304      	adds	r3, #4
 8001230:	8019      	strh	r1, [r3, #0]

    static __int16_t x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	e014      	b.n	8001262 <_Z3iirs+0x5a>
       x[n] = x[n-1];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a31      	ldr	r2, [pc, #196]	@ (8001304 <_Z3iirs+0xfc>)
 800123e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001242:	4a30      	ldr	r2, [pc, #192]	@ (8001304 <_Z3iirs+0xfc>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
       y[n] = y[n-1];
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b01      	subs	r3, #1
 800124e:	4a2e      	ldr	r2, [pc, #184]	@ (8001308 <_Z3iirs+0x100>)
 8001250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001254:	492c      	ldr	r1, [pc, #176]	@ (8001308 <_Z3iirs+0x100>)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(n=NCoef; n>0; n--) {
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	3b01      	subs	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	dce7      	bgt.n	8001238 <_Z3iirs+0x30>
    }

    //Calculate the new output
    x[0] = NewSample;
 8001268:	4a26      	ldr	r2, [pc, #152]	@ (8001304 <_Z3iirs+0xfc>)
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	8013      	strh	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800126e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001272:	461a      	mov	r2, r3
 8001274:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <_Z3iirs+0xfc>)
 8001276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	4a22      	ldr	r2, [pc, #136]	@ (8001308 <_Z3iirs+0x100>)
 8001280:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef; n++)
 8001282:	2301      	movs	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e022      	b.n	80012ce <_Z3iirs+0xc6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <_Z3iirs+0x100>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	3320      	adds	r3, #32
 8001292:	443b      	add	r3, r7
 8001294:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001298:	4618      	mov	r0, r3
 800129a:	491a      	ldr	r1, [pc, #104]	@ (8001304 <_Z3iirs+0xfc>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80012a2:	fb03 f100 	mul.w	r1, r3, r0
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	3320      	adds	r3, #32
 80012ac:	443b      	add	r3, r7
 80012ae:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80012b2:	461c      	mov	r4, r3
 80012b4:	4814      	ldr	r0, [pc, #80]	@ (8001308 <_Z3iirs+0x100>)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012bc:	fb04 f303 	mul.w	r3, r4, r3
 80012c0:	1acb      	subs	r3, r1, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	4a10      	ldr	r2, [pc, #64]	@ (8001308 <_Z3iirs+0x100>)
 80012c6:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef; n++)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	3301      	adds	r3, #1
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	ddd9      	ble.n	8001288 <_Z3iirs+0x80>

    y[0] /= BCoef[0];
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <_Z3iirs+0x100>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80012e0:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <_Z3iirs+0x100>)
 80012e2:	6013      	str	r3, [r2, #0]

    return y[0] / DCgain;
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <_Z3iirs+0x100>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da00      	bge.n	80012ee <_Z3iirs+0xe6>
 80012ec:	3307      	adds	r3, #7
 80012ee:	10db      	asrs	r3, r3, #3
 80012f0:	b21b      	sxth	r3, r3
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc90      	pop	{r4, r7}
 80012fa:	4770      	bx	lr
 80012fc:	0800d584 	.word	0x0800d584
 8001300:	0800d58c 	.word	0x0800d58c
 8001304:	200004e4 	.word	0x200004e4
 8001308:	200004d8 	.word	0x200004d8

0800130c <_Z4iir3s>:

    return y2[0] / DCgain2;
}


__int16_t iir3(__int16_t NewSample) {
 800130c:	b490      	push	{r4, r7}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
    __int16_t ACoef3[NCoef2+1] = {
 8001316:	4a36      	ldr	r2, [pc, #216]	@ (80013f0 <_Z4iir3s+0xe4>)
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	ca07      	ldmia	r2, {r0, r1, r2}
 800131e:	c303      	stmia	r3!, {r0, r1}
 8001320:	801a      	strh	r2, [r3, #0]
        -20476,
            0,
        10238
    };

    __int16_t BCoef3[NCoef2+1] = {
 8001322:	4a34      	ldr	r2, [pc, #208]	@ (80013f4 <_Z4iir3s+0xe8>)
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	ca07      	ldmia	r2, {r0, r1, r2}
 800132a:	c303      	stmia	r3!, {r0, r1}
 800132c:	801a      	strh	r2, [r3, #0]

    static __int16_t x3[NCoef2+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef2; n>0; n--) {
 800132e:	2304      	movs	r3, #4
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
 8001332:	e014      	b.n	800135e <_Z4iir3s+0x52>
       x3[n] = x3[n-1];
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	3b01      	subs	r3, #1
 8001338:	4a2f      	ldr	r2, [pc, #188]	@ (80013f8 <_Z4iir3s+0xec>)
 800133a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800133e:	4a2e      	ldr	r2, [pc, #184]	@ (80013f8 <_Z4iir3s+0xec>)
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
       y3[n] = y3[n-1];
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	3b01      	subs	r3, #1
 800134a:	4a2c      	ldr	r2, [pc, #176]	@ (80013fc <_Z4iir3s+0xf0>)
 800134c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001350:	492a      	ldr	r1, [pc, #168]	@ (80013fc <_Z4iir3s+0xf0>)
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(n=NCoef2; n>0; n--) {
 8001358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135a:	3b01      	subs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	2b00      	cmp	r3, #0
 8001362:	dce7      	bgt.n	8001334 <_Z4iir3s+0x28>
    }

    //Calculate the new output
    x3[0] = NewSample;
 8001364:	4a24      	ldr	r2, [pc, #144]	@ (80013f8 <_Z4iir3s+0xec>)
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	8013      	strh	r3, [r2, #0]
    y3[0] = ACoef3[0] * x3[0];
 800136a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800136e:	461a      	mov	r2, r3
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <_Z4iir3s+0xec>)
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	4a20      	ldr	r2, [pc, #128]	@ (80013fc <_Z4iir3s+0xf0>)
 800137c:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef2; n++)
 800137e:	2301      	movs	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
 8001382:	e022      	b.n	80013ca <_Z4iir3s+0xbe>
        y3[0] += ACoef3[n] * x3[n] - BCoef3[n] * y3[n];
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <_Z4iir3s+0xf0>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	3328      	adds	r3, #40	@ 0x28
 800138e:	443b      	add	r3, r7
 8001390:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001394:	4618      	mov	r0, r3
 8001396:	4918      	ldr	r1, [pc, #96]	@ (80013f8 <_Z4iir3s+0xec>)
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800139e:	fb03 f100 	mul.w	r1, r3, r0
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	3328      	adds	r3, #40	@ 0x28
 80013a8:	443b      	add	r3, r7
 80013aa:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80013ae:	461c      	mov	r4, r3
 80013b0:	4812      	ldr	r0, [pc, #72]	@ (80013fc <_Z4iir3s+0xf0>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80013b8:	fb04 f303 	mul.w	r3, r4, r3
 80013bc:	1acb      	subs	r3, r1, r3
 80013be:	4413      	add	r3, r2
 80013c0:	4a0e      	ldr	r2, [pc, #56]	@ (80013fc <_Z4iir3s+0xf0>)
 80013c2:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef2; n++)
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	3301      	adds	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	ddd9      	ble.n	8001384 <_Z4iir3s+0x78>

    y3[0] /= BCoef3[0];
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <_Z4iir3s+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80013dc:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <_Z4iir3s+0xf0>)
 80013de:	6013      	str	r3, [r2, #0]

    return y3[0] / DCgain2;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <_Z4iir3s+0xf0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b21b      	sxth	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3728      	adds	r7, #40	@ 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc90      	pop	{r4, r7}
 80013ee:	4770      	bx	lr
 80013f0:	0800d5a4 	.word	0x0800d5a4
 80013f4:	0800d5b0 	.word	0x0800d5b0
 80013f8:	20000500 	.word	0x20000500
 80013fc:	200004ec 	.word	0x200004ec

08001400 <_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff f841 	bl	8000490 <__aeabi_i2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4614      	mov	r4, r2
 8001414:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001418:	ec45 4b17 	vmov	d7, r4, r5
 800141c:	eeb0 0a47 	vmov.f32	s0, s14
 8001420:	eef0 0a67 	vmov.f32	s1, s15
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800142c <_Z41__static_initialization_and_destruction_0ii>:
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d121      	bne.n	8001480 <_Z41__static_initialization_and_destruction_0ii+0x54>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001442:	4293      	cmp	r3, r2
 8001444:	d11c      	bne.n	8001480 <_Z41__static_initialization_and_destruction_0ii+0x54>
int limitLoraApp = 5000/superloop;		//
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001450:	fb93 f3f2 	sdiv	r3, r3, r2
 8001454:	4a0e      	ldr	r2, [pc, #56]	@ (8001490 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001456:	6013      	str	r3, [r2, #0]
const uint32_t limitProcess	= 20000/superloop;	//
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001462:	fb93 f3f2 	sdiv	r3, r3, r2
 8001466:	461a      	mov	r2, r3
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800146a:	601a      	str	r2, [r3, #0]
const uint32_t limitStability	= 20000/superloop;
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001476:	fb93 f3f2 	sdiv	r3, r3, r2
 800147a:	461a      	mov	r2, r3
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	20000433 	.word	0x20000433
 8001490:	2000045c 	.word	0x2000045c
 8001494:	20000470 	.word	0x20000470
 8001498:	20000490 	.word	0x20000490

0800149c <_GLOBAL__sub_I_stateContent>:
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
 80014a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff ffc1 	bl	800142c <_Z41__static_initialization_and_destruction_0ii>
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_ZN8fifoUartC1Ev>:
}


/********************/

fifoUart::fifoUart(){
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	this->finalElement = this->elements;	// Cuando se construye la fifo
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f103 020c 	add.w	r2, r3, #12
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
											// El puntero de ultimo elemento
											// Apunta al primer elemento de la cadena
}
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_ZN8fifoUart13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

bool fifoUart::insertElement( uint8_t element ){
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]

	if (!(this->bussyFifo)){							// Si no está lleno
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00d      	beq.n	8001502 <_ZN8fifoUart13insertElementEh+0x36>
		*this->finalElement	= element;					// Inserta elemento
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	701a      	strb	r2, [r3, #0]
		this->finalElement = this->finalElement + 1;	// Suma 1 al puntero
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]
		this->large++;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	609a      	str	r2, [r3, #8]
	}

	if ( this->finalElement == &this->elements[50] ){	// Si el puntero es el último del array
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	333e      	adds	r3, #62	@ 0x3e
 800150a:	429a      	cmp	r2, r3
 800150c:	d103      	bne.n	8001516 <_ZN8fifoUart13insertElementEh+0x4a>
		this->bussyFifo	= 1;							// Indica que se lleno el buffer
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	715a      	strb	r2, [r3, #5]
 8001514:	e002      	b.n	800151c <_ZN8fifoUart13insertElementEh+0x50>
	}
	else{												// Si no
		this->bussyFifo	= 0;							// Indica que no se ha llenado
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	715a      	strb	r2, [r3, #5]
	}

	return !(this->bussyFifo);							// 1: Se insertó correctamente
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	795b      	ldrb	r3, [r3, #5]
 8001520:	f083 0301 	eor.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
														// 0: No se inserto por Fifo llena
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_ZN8fifoUart11readElementEv>:

//////////////////
// READ ELEMENT //
//////////////////

uint8_t fifoUart::readElement(){
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]

	uint8_t elementy	= this->elements[0];							// Copia primer valor en fifo
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7b1b      	ldrb	r3, [r3, #12]
 800153e:	72fb      	strb	r3, [r7, #11]

	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	330c      	adds	r3, #12
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e006      	b.n	8001556 <_ZN8fifoUart11readElementEv+0x24>
		*j	= *(j+1);													// Copia el elemento siguiente
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	785a      	ldrb	r2, [r3, #1]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	701a      	strb	r2, [r3, #0]
	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d3f3      	bcc.n	8001548 <_ZN8fifoUart11readElementEv+0x16>
	}

	*this->finalElement = 0;											// Rellena el último valor con 0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]

	if (this->finalElement != this->elements){							// Si el último elemento no es el primero
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	330c      	adds	r3, #12
 8001570:	429a      	cmp	r2, r3
 8001572:	d00d      	beq.n	8001590 <_ZN8fifoUart11readElementEv+0x5e>
		this->finalElement	= this->finalElement - 1;					//  Resta una posición al elemento final
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
		this->emptyFifo	= 0;											// Indica que fifo no esta vacia
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	711a      	strb	r2, [r3, #4]
		this->large--;													// Quita 1 al largo
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	e002      	b.n	8001596 <_ZN8fifoUart11readElementEv+0x64>
	}
	else{																// Si no
		this->emptyFifo	= 1;											// Indica que fifo esta vacia
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	711a      	strb	r2, [r3, #4]
	}

	return elementy;													// Retorna elementos a leer
 8001596:	7afb      	ldrb	r3, [r7, #11]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_ZN8fifoUart9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoUart::available(){
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	if (this->finalElement == &this->elements[0]){		// Si el puntero está apuntando
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	330c      	adds	r3, #12
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d103      	bne.n	80015c0 <_ZN8fifoUart9availableEv+0x1c>
														// al primer elemento de la fifo
		this->emptyFifo	= 1;							// Indica que la fifo esta vacia
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	711a      	strb	r2, [r3, #4]
 80015be:	e002      	b.n	80015c6 <_ZN8fifoUart9availableEv+0x22>
	}
	else{												// Sino
		this->emptyFifo	= 0;							// Indica que la fifo contiene elementos
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	711a      	strb	r2, [r3, #4]
	}
	return !(this->emptyFifo);							// 1: Elementos disponibles
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	791b      	ldrb	r3, [r3, #4]
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
}														// 0: Sin elementos
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_ZN8gpsInputC1Ev>:

///////////////////////////
// CONSTRUCTOR GPS INPUT //
///////////////////////////

gpsInput::gpsInput(){
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
};
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_ZN8gpsInput8getValidEv>:

///////////////////////
// GET VALID MESSAGE //
///////////////////////

bool gpsInput::getValid(){
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	bool flag	= 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]

	if (this->flagValid == 'A'){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7c1b      	ldrb	r3, [r3, #16]
 8001602:	2b41      	cmp	r3, #65	@ 0x41
 8001604:	d102      	bne.n	800160c <_ZN8gpsInput8getValidEv+0x1a>
		flag = 1;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e001      	b.n	8001610 <_ZN8gpsInput8getValidEv+0x1e>
	}
	else{
		flag = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
	}

	return flag;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_ZN8gpsInput13getNewMessageEv>:

//////////////////////////
// GET NEW MESSAGE FLAG //
//////////////////////////

bool gpsInput::getNewMessage(){
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
	return	this->flagNew;	// Guarda el valor de flagNew
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7c9b      	ldrb	r3, [r3, #18]

}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
	hwBoton();
 800163a:	f000 fa4d 	bl	8001ad8 <_Z7hwBotonv>
	hwSht31();
 800163e:	f000 f8f3 	bl	8001828 <_Z7hwSht31v>
	hwAds1115();
 8001642:	f000 f821 	bl	8001688 <_Z9hwAds1115v>
	hwAnalog();
 8001646:	f000 fabf 	bl	8001bc8 <_Z8hwAnalogv>
	hwEEPROM();
 800164a:	f000 fb1d 	bl	8001c88 <_Z8hwEEPROMv>
	hwGpsIn();
 800164e:	f000 faa5 	bl	8001b9c <_Z7hwGpsInv>
	hwLoraIn();
 8001652:	f000 f803 	bl	800165c <_Z8hwLoraInv>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <_Z8hwLoraInv>:
 * Traspaso de de loraBus a loraInput
 *
 * loraInput detecta respuesta dentro de bytes entrantes
 */

void hwLoraIn(){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	if ( loraIn.available() ){					// Si hay elementos disponibles en FIFO desde DMA
 8001660:	4807      	ldr	r0, [pc, #28]	@ (8001680 <_Z8hwLoraInv+0x24>)
 8001662:	f7ff ff9f 	bl	80015a4 <_ZN8fifoUart9availableEv>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <_Z8hwLoraInv+0x1e>
		loraBus	= loraIn.readElement();			// Guarda el valor
 800166c:	4804      	ldr	r0, [pc, #16]	@ (8001680 <_Z8hwLoraInv+0x24>)
 800166e:	f7ff ff60 	bl	8001532 <_ZN8fifoUart11readElementEv>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <_Z8hwLoraInv+0x28>)
 8001678:	701a      	strb	r2, [r3, #0]
		//loraInput.insertElement( loraBus );		// Inserta en Lora Input
	}
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000bfc 	.word	0x20000bfc
 8001684:	200005d4 	.word	0x200005d4

08001688 <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 800168c:	4b57      	ldr	r3, [pc, #348]	@ (80017ec <_Z9hwAds1115v+0x164>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b05      	cmp	r3, #5
 8001692:	f200 80a8 	bhi.w	80017e6 <_Z9hwAds1115v+0x15e>
 8001696:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <_Z9hwAds1115v+0x14>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016b5 	.word	0x080016b5
 80016a0:	080016e9 	.word	0x080016e9
 80016a4:	0800171f 	.word	0x0800171f
 80016a8:	08001751 	.word	0x08001751
 80016ac:	08001777 	.word	0x08001777
 80016b0:	080017cb 	.word	0x080017cb
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 80016b4:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <_Z9hwAds1115v+0x168>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a4d      	ldr	r2, [pc, #308]	@ (80017f0 <_Z9hwAds1115v+0x168>)
 80016bc:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 80016be:	4b4c      	ldr	r3, [pc, #304]	@ (80017f0 <_Z9hwAds1115v+0x168>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b4c      	ldr	r3, [pc, #304]	@ (80017f4 <_Z9hwAds1115v+0x16c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	db0a      	blt.n	80016e0 <_Z9hwAds1115v+0x58>
 80016ca:	4b4b      	ldr	r3, [pc, #300]	@ (80017f8 <_Z9hwAds1115v+0x170>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 80016d2:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <_Z9hwAds1115v+0x170>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 80016d8:	4b44      	ldr	r3, [pc, #272]	@ (80017ec <_Z9hwAds1115v+0x164>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 80016de:	e083      	b.n	80017e8 <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 80016e0:	4b42      	ldr	r3, [pc, #264]	@ (80017ec <_Z9hwAds1115v+0x164>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
		break;
 80016e6:	e07f      	b.n	80017e8 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 80016e8:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <_Z9hwAds1115v+0x168>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 80016ee:	4b43      	ldr	r3, [pc, #268]	@ (80017fc <_Z9hwAds1115v+0x174>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 80016f6:	2303      	movs	r3, #3
 80016f8:	4a41      	ldr	r2, [pc, #260]	@ (8001800 <_Z9hwAds1115v+0x178>)
 80016fa:	2190      	movs	r1, #144	@ 0x90
 80016fc:	4841      	ldr	r0, [pc, #260]	@ (8001804 <_Z9hwAds1115v+0x17c>)
 80016fe:	f006 f897 	bl	8007830 <HAL_I2C_Master_Transmit_DMA>
 8001702:	e005      	b.n	8001710 <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 8001704:	2303      	movs	r3, #3
 8001706:	4a40      	ldr	r2, [pc, #256]	@ (8001808 <_Z9hwAds1115v+0x180>)
 8001708:	2190      	movs	r1, #144	@ 0x90
 800170a:	483e      	ldr	r0, [pc, #248]	@ (8001804 <_Z9hwAds1115v+0x17c>)
 800170c:	f006 f890 	bl	8007830 <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 8001710:	4b3e      	ldr	r3, [pc, #248]	@ (800180c <_Z9hwAds1115v+0x184>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <_Z9hwAds1115v+0x164>)
 8001718:	2202      	movs	r2, #2
 800171a:	701a      	strb	r2, [r3, #0]

		break;
 800171c:	e064      	b.n	80017e8 <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 800171e:	2301      	movs	r3, #1
 8001720:	4a3b      	ldr	r2, [pc, #236]	@ (8001810 <_Z9hwAds1115v+0x188>)
 8001722:	2190      	movs	r1, #144	@ 0x90
 8001724:	4837      	ldr	r0, [pc, #220]	@ (8001804 <_Z9hwAds1115v+0x17c>)
 8001726:	f006 f883 	bl	8007830 <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <_Z9hwAds1115v+0x184>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	f083 0301 	eor.w	r3, r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <_Z9hwAds1115v+0x18c>)
 8001736:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 8001738:	4b34      	ldr	r3, [pc, #208]	@ (800180c <_Z9hwAds1115v+0x184>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <_Z9hwAds1115v+0x164>)
 8001742:	2203      	movs	r2, #3
 8001744:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 8001746:	e04f      	b.n	80017e8 <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 8001748:	4b28      	ldr	r3, [pc, #160]	@ (80017ec <_Z9hwAds1115v+0x164>)
 800174a:	2205      	movs	r2, #5
 800174c:	701a      	strb	r2, [r3, #0]
		break;
 800174e:	e04b      	b.n	80017e8 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 8001750:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <_Z9hwAds1115v+0x168>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	4a26      	ldr	r2, [pc, #152]	@ (80017f0 <_Z9hwAds1115v+0x168>)
 8001758:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 800175a:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <_Z9hwAds1115v+0x168>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <_Z9hwAds1115v+0x190>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	db03      	blt.n	800176e <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <_Z9hwAds1115v+0x164>)
 8001768:	2204      	movs	r2, #4
 800176a:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 800176c:	e03c      	b.n	80017e8 <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 800176e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <_Z9hwAds1115v+0x164>)
 8001770:	2203      	movs	r2, #3
 8001772:	701a      	strb	r2, [r3, #0]
		break;
 8001774:	e038      	b.n	80017e8 <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 8001776:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <_Z9hwAds1115v+0x168>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 800177c:	2302      	movs	r3, #2
 800177e:	4a27      	ldr	r2, [pc, #156]	@ (800181c <_Z9hwAds1115v+0x194>)
 8001780:	2190      	movs	r1, #144	@ 0x90
 8001782:	4820      	ldr	r0, [pc, #128]	@ (8001804 <_Z9hwAds1115v+0x17c>)
 8001784:	f006 f968 	bl	8007a58 <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <_Z9hwAds1115v+0x174>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00c      	beq.n	80017aa <_Z9hwAds1115v+0x122>
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <_Z9hwAds1115v+0x194>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b21a      	sxth	r2, r3
 8001798:	4b20      	ldr	r3, [pc, #128]	@ (800181c <_Z9hwAds1115v+0x194>)
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	b21b      	sxth	r3, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <_Z9hwAds1115v+0x198>)
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	e00b      	b.n	80017c2 <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 80017aa:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <_Z9hwAds1115v+0x194>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <_Z9hwAds1115v+0x194>)
 80017b4:	785b      	ldrb	r3, [r3, #1]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <_Z9hwAds1115v+0x19c>)
 80017c0:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <_Z9hwAds1115v+0x164>)
 80017c4:	2205      	movs	r2, #5
 80017c6:	701a      	strb	r2, [r3, #0]
		break;
 80017c8:	e00e      	b.n	80017e8 <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <_Z9hwAds1115v+0x174>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	f083 0301 	eor.w	r3, r3, #1
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <_Z9hwAds1115v+0x174>)
 80017d6:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 80017d8:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <_Z9hwAds1115v+0x170>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 80017de:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <_Z9hwAds1115v+0x164>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		break;
 80017e4:	e000      	b.n	80017e8 <_Z9hwAds1115v+0x160>

	default:
		break;
 80017e6:	bf00      	nop
	}
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000534 	.word	0x20000534
 80017f0:	20000538 	.word	0x20000538
 80017f4:	2000053c 	.word	0x2000053c
 80017f8:	2000000b 	.word	0x2000000b
 80017fc:	2000054e 	.word	0x2000054e
 8001800:	2000000c 	.word	0x2000000c
 8001804:	200007dc 	.word	0x200007dc
 8001808:	20000010 	.word	0x20000010
 800180c:	200011ab 	.word	0x200011ab
 8001810:	20000544 	.word	0x20000544
 8001814:	200005e0 	.word	0x200005e0
 8001818:	20000540 	.word	0x20000540
 800181c:	20000548 	.word	0x20000548
 8001820:	2000054a 	.word	0x2000054a
 8001824:	2000054c 	.word	0x2000054c

08001828 <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 800182c:	4b98      	ldr	r3, [pc, #608]	@ (8001a90 <_Z7hwSht31v+0x268>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b06      	cmp	r3, #6
 8001832:	f200 8126 	bhi.w	8001a82 <_Z7hwSht31v+0x25a>
 8001836:	a201      	add	r2, pc, #4	@ (adr r2, 800183c <_Z7hwSht31v+0x14>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	08001859 	.word	0x08001859
 8001840:	0800188d 	.word	0x0800188d
 8001844:	080018cb 	.word	0x080018cb
 8001848:	0800190f 	.word	0x0800190f
 800184c:	08001935 	.word	0x08001935
 8001850:	08001955 	.word	0x08001955
 8001854:	08001a51 	.word	0x08001a51
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 8001858:	4b8e      	ldr	r3, [pc, #568]	@ (8001a94 <_Z7hwSht31v+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a8d      	ldr	r2, [pc, #564]	@ (8001a94 <_Z7hwSht31v+0x26c>)
 8001860:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 8001862:	4b8c      	ldr	r3, [pc, #560]	@ (8001a94 <_Z7hwSht31v+0x26c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b8c      	ldr	r3, [pc, #560]	@ (8001a98 <_Z7hwSht31v+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	db0a      	blt.n	8001884 <_Z7hwSht31v+0x5c>
 800186e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a9c <_Z7hwSht31v+0x274>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d006      	beq.n	8001884 <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 8001876:	4b89      	ldr	r3, [pc, #548]	@ (8001a9c <_Z7hwSht31v+0x274>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 800187c:	4b84      	ldr	r3, [pc, #528]	@ (8001a90 <_Z7hwSht31v+0x268>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 8001882:	e102      	b.n	8001a8a <_Z7hwSht31v+0x262>
			stateSht31	= 0;					// Espera
 8001884:	4b82      	ldr	r3, [pc, #520]	@ (8001a90 <_Z7hwSht31v+0x268>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
		break;
 800188a:	e0fe      	b.n	8001a8a <_Z7hwSht31v+0x262>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 800188c:	4b81      	ldr	r3, [pc, #516]	@ (8001a94 <_Z7hwSht31v+0x26c>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 8001892:	4b83      	ldr	r3, [pc, #524]	@ (8001aa0 <_Z7hwSht31v+0x278>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	b29b      	uxth	r3, r3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b81      	ldr	r3, [pc, #516]	@ (8001aa4 <_Z7hwSht31v+0x27c>)
 800189e:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 80018a0:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa0 <_Z7hwSht31v+0x278>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa4 <_Z7hwSht31v+0x27c>)
 80018a8:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 80018aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa8 <_Z7hwSht31v+0x280>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 80018b0:	4b7e      	ldr	r3, [pc, #504]	@ (8001aac <_Z7hwSht31v+0x284>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b299      	uxth	r1, r3
 80018b8:	2302      	movs	r3, #2
 80018ba:	4a7a      	ldr	r2, [pc, #488]	@ (8001aa4 <_Z7hwSht31v+0x27c>)
 80018bc:	487c      	ldr	r0, [pc, #496]	@ (8001ab0 <_Z7hwSht31v+0x288>)
 80018be:	f005 ffb7 	bl	8007830 <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 80018c2:	4b73      	ldr	r3, [pc, #460]	@ (8001a90 <_Z7hwSht31v+0x268>)
 80018c4:	2202      	movs	r2, #2
 80018c6:	701a      	strb	r2, [r3, #0]
		break;
 80018c8:	e0df      	b.n	8001a8a <_Z7hwSht31v+0x262>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 80018ca:	4b7a      	ldr	r3, [pc, #488]	@ (8001ab4 <_Z7hwSht31v+0x28c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f083 0301 	eor.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <_Z7hwSht31v+0xc0>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 80018d8:	4b73      	ldr	r3, [pc, #460]	@ (8001aa8 <_Z7hwSht31v+0x280>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f083 0301 	eor.w	r3, r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b75      	ldr	r3, [pc, #468]	@ (8001ab8 <_Z7hwSht31v+0x290>)
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	e006      	b.n	80018f6 <_Z7hwSht31v+0xce>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 80018e8:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa8 <_Z7hwSht31v+0x280>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f083 0301 	eor.w	r3, r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b71      	ldr	r3, [pc, #452]	@ (8001ab8 <_Z7hwSht31v+0x290>)
 80018f4:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 80018f6:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa8 <_Z7hwSht31v+0x280>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <_Z7hwSht31v+0xde>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 80018fe:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <_Z7hwSht31v+0x268>)
 8001900:	2203      	movs	r2, #3
 8001902:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 8001904:	e0c1      	b.n	8001a8a <_Z7hwSht31v+0x262>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 8001906:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <_Z7hwSht31v+0x268>)
 8001908:	2206      	movs	r2, #6
 800190a:	701a      	strb	r2, [r3, #0]
		break;
 800190c:	e0bd      	b.n	8001a8a <_Z7hwSht31v+0x262>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 800190e:	4b61      	ldr	r3, [pc, #388]	@ (8001a94 <_Z7hwSht31v+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	4a5f      	ldr	r2, [pc, #380]	@ (8001a94 <_Z7hwSht31v+0x26c>)
 8001916:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 8001918:	4b5e      	ldr	r3, [pc, #376]	@ (8001a94 <_Z7hwSht31v+0x26c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b67      	ldr	r3, [pc, #412]	@ (8001abc <_Z7hwSht31v+0x294>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	db03      	blt.n	800192c <_Z7hwSht31v+0x104>
			stateSht31	= 4;					// Pasa a S4
 8001924:	4b5a      	ldr	r3, [pc, #360]	@ (8001a90 <_Z7hwSht31v+0x268>)
 8001926:	2204      	movs	r2, #4
 8001928:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 800192a:	e0ae      	b.n	8001a8a <_Z7hwSht31v+0x262>
			stateSht31	= 3;					// Espera en S3
 800192c:	4b58      	ldr	r3, [pc, #352]	@ (8001a90 <_Z7hwSht31v+0x268>)
 800192e:	2203      	movs	r2, #3
 8001930:	701a      	strb	r2, [r3, #0]
		break;
 8001932:	e0aa      	b.n	8001a8a <_Z7hwSht31v+0x262>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 8001934:	4b57      	ldr	r3, [pc, #348]	@ (8001a94 <_Z7hwSht31v+0x26c>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 800193a:	4b5c      	ldr	r3, [pc, #368]	@ (8001aac <_Z7hwSht31v+0x284>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	b299      	uxth	r1, r3
 8001942:	2306      	movs	r3, #6
 8001944:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 8001946:	485a      	ldr	r0, [pc, #360]	@ (8001ab0 <_Z7hwSht31v+0x288>)
 8001948:	f006 f886 	bl	8007a58 <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 800194c:	4b50      	ldr	r3, [pc, #320]	@ (8001a90 <_Z7hwSht31v+0x268>)
 800194e:	2205      	movs	r2, #5
 8001950:	701a      	strb	r2, [r3, #0]
		break;
 8001952:	e09a      	b.n	8001a8a <_Z7hwSht31v+0x262>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 8001954:	4b57      	ldr	r3, [pc, #348]	@ (8001ab4 <_Z7hwSht31v+0x28c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	f083 0301 	eor.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d039      	beq.n	80019d6 <_Z7hwSht31v+0x1ae>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8001962:	4b57      	ldr	r3, [pc, #348]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b29b      	uxth	r3, r3
 800196a:	4a55      	ldr	r2, [pc, #340]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 800196c:	7852      	ldrb	r2, [r2, #1]
 800196e:	4413      	add	r3, r2
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b54      	ldr	r3, [pc, #336]	@ (8001ac4 <_Z7hwSht31v+0x29c>)
 8001974:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 8001976:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <_Z7hwSht31v+0x29c>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	4a50      	ldr	r2, [pc, #320]	@ (8001ac8 <_Z7hwSht31v+0x2a0>)
 8001986:	fb82 1203 	smull	r1, r2, r2, r3
 800198a:	441a      	add	r2, r3
 800198c:	13d2      	asrs	r2, r2, #15
 800198e:	17db      	asrs	r3, r3, #31
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <_Z7hwSht31v+0x29c>)
 800199c:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 800199e:	4b48      	ldr	r3, [pc, #288]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 80019a0:	78db      	ldrb	r3, [r3, #3]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4a46      	ldr	r2, [pc, #280]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 80019a8:	7912      	ldrb	r2, [r2, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b47      	ldr	r3, [pc, #284]	@ (8001acc <_Z7hwSht31v+0x2a4>)
 80019b0:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 80019b2:	4b46      	ldr	r3, [pc, #280]	@ (8001acc <_Z7hwSht31v+0x2a4>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	4a41      	ldr	r2, [pc, #260]	@ (8001ac8 <_Z7hwSht31v+0x2a0>)
 80019c2:	fb82 1203 	smull	r1, r2, r2, r3
 80019c6:	441a      	add	r2, r3
 80019c8:	13d2      	asrs	r2, r2, #15
 80019ca:	17db      	asrs	r3, r3, #31
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b3e      	ldr	r3, [pc, #248]	@ (8001acc <_Z7hwSht31v+0x2a4>)
 80019d2:	801a      	strh	r2, [r3, #0]
 80019d4:	e038      	b.n	8001a48 <_Z7hwSht31v+0x220>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 80019d6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4a38      	ldr	r2, [pc, #224]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 80019e0:	7852      	ldrb	r2, [r2, #1]
 80019e2:	4413      	add	r3, r2
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <_Z7hwSht31v+0x2a8>)
 80019e8:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 80019ea:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <_Z7hwSht31v+0x2a8>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	4a33      	ldr	r2, [pc, #204]	@ (8001ac8 <_Z7hwSht31v+0x2a0>)
 80019fa:	fb82 1203 	smull	r1, r2, r2, r3
 80019fe:	441a      	add	r2, r3
 8001a00:	13d2      	asrs	r2, r2, #15
 8001a02:	17db      	asrs	r3, r3, #31
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b30      	ldr	r3, [pc, #192]	@ (8001ad0 <_Z7hwSht31v+0x2a8>)
 8001a10:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 8001a12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 8001a14:	78db      	ldrb	r3, [r3, #3]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4a29      	ldr	r2, [pc, #164]	@ (8001ac0 <_Z7hwSht31v+0x298>)
 8001a1c:	7912      	ldrb	r2, [r2, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad4 <_Z7hwSht31v+0x2ac>)
 8001a24:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 8001a26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <_Z7hwSht31v+0x2ac>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <_Z7hwSht31v+0x2a0>)
 8001a36:	fb82 1203 	smull	r1, r2, r2, r3
 8001a3a:	441a      	add	r2, r3
 8001a3c:	13d2      	asrs	r2, r2, #15
 8001a3e:	17db      	asrs	r3, r3, #31
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <_Z7hwSht31v+0x2ac>)
 8001a46:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <_Z7hwSht31v+0x268>)
 8001a4a:	2206      	movs	r2, #6
 8001a4c:	701a      	strb	r2, [r3, #0]
		break;
 8001a4e:	e01c      	b.n	8001a8a <_Z7hwSht31v+0x262>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <_Z7hwSht31v+0x274>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <_Z7hwSht31v+0x28c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	f083 0301 	eor.w	r3, r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <_Z7hwSht31v+0x28c>)
 8001a62:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 8001a64:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <_Z7hwSht31v+0x28c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <_Z7hwSht31v+0x24c>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <_Z7hwSht31v+0x284>)
 8001a6e:	2244      	movs	r2, #68	@ 0x44
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	e002      	b.n	8001a7a <_Z7hwSht31v+0x252>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 8001a74:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <_Z7hwSht31v+0x284>)
 8001a76:	2245      	movs	r2, #69	@ 0x45
 8001a78:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <_Z7hwSht31v+0x268>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
		break;
 8001a80:	e003      	b.n	8001a8a <_Z7hwSht31v+0x262>

	default:
		stateSht31	= 0;
 8001a82:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <_Z7hwSht31v+0x268>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
		break;
 8001a88:	bf00      	nop
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000515 	.word	0x20000515
 8001a94:	20000518 	.word	0x20000518
 8001a98:	2000051c 	.word	0x2000051c
 8001a9c:	2000000b 	.word	0x2000000b
 8001aa0:	20000006 	.word	0x20000006
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	200011ab 	.word	0x200011ab
 8001aac:	2000000a 	.word	0x2000000a
 8001ab0:	200007dc 	.word	0x200007dc
 8001ab4:	2000052a 	.word	0x2000052a
 8001ab8:	200005e0 	.word	0x200005e0
 8001abc:	20000520 	.word	0x20000520
 8001ac0:	20000524 	.word	0x20000524
 8001ac4:	2000052c 	.word	0x2000052c
 8001ac8:	80008001 	.word	0x80008001
 8001acc:	2000052e 	.word	0x2000052e
 8001ad0:	20000530 	.word	0x20000530
 8001ad4:	20000532 	.word	0x20000532

08001ad8 <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 8001adc:	2108      	movs	r1, #8
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae2:	f005 fdd9 	bl	8007698 <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <_Z7hwBotonv+0xb0>)
 8001af4:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 8001af6:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <_Z7hwBotonv+0xb4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d03a      	beq.n	8001b74 <_Z7hwBotonv+0x9c>
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	dc3f      	bgt.n	8001b82 <_Z7hwBotonv+0xaa>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <_Z7hwBotonv+0x34>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d012      	beq.n	8001b30 <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 8001b0a:	e03a      	b.n	8001b82 <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <_Z7hwBotonv+0xb8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <_Z7hwBotonv+0xbc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <_Z7hwBotonv+0xb0>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <_Z7hwBotonv+0xb4>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
		break;
 8001b26:	e02d      	b.n	8001b84 <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 8001b28:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <_Z7hwBotonv+0xb4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
		break;
 8001b2e:	e029      	b.n	8001b84 <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <_Z7hwBotonv+0xb8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a16      	ldr	r2, [pc, #88]	@ (8001b90 <_Z7hwBotonv+0xb8>)
 8001b38:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <_Z7hwBotonv+0xb0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <_Z7hwBotonv+0x7e>
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <_Z7hwBotonv+0xb8>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <_Z7hwBotonv+0xc0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	db03      	blt.n	8001b56 <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <_Z7hwBotonv+0xb4>)
 8001b50:	2202      	movs	r2, #2
 8001b52:	701a      	strb	r2, [r3, #0]
		break;
 8001b54:	e016      	b.n	8001b84 <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <_Z7hwBotonv+0xb0>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	f083 0301 	eor.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <_Z7hwBotonv+0xb4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
		break;
 8001b6a:	e00b      	b.n	8001b84 <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 8001b6c:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <_Z7hwBotonv+0xb4>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
		break;
 8001b72:	e007      	b.n	8001b84 <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 8001b74:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <_Z7hwBotonv+0xbc>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <_Z7hwBotonv+0xb4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
		break;
 8001b80:	e000      	b.n	8001b84 <_Z7hwBotonv+0xac>
		break;
 8001b82:	bf00      	nop
	}
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000050a 	.word	0x2000050a
 8001b8c:	20000514 	.word	0x20000514
 8001b90:	2000050c 	.word	0x2000050c
 8001b94:	20000b4c 	.word	0x20000b4c
 8001b98:	20000510 	.word	0x20000510

08001b9c <_Z7hwGpsInv>:
 *
 *	INPUT	:	gpsIn.available()
 *	OUTPUT	:	gpsInput.inserValue()
 */

void hwGpsIn(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	if ( gpsIn.available() ){			// Si hay un elemento en fifo
 8001ba0:	4807      	ldr	r0, [pc, #28]	@ (8001bc0 <_Z7hwGpsInv+0x24>)
 8001ba2:	f7ff fcff 	bl	80015a4 <_ZN8fifoUart9availableEv>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <_Z7hwGpsInv+0x1e>
		gpsBus = gpsIn.readElement();	// Lee valor en fifo
 8001bac:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <_Z7hwGpsInv+0x24>)
 8001bae:	f7ff fcc0 	bl	8001532 <_ZN8fifoUart11readElementEv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <_Z7hwGpsInv+0x28>)
 8001bb8:	701a      	strb	r2, [r3, #0]
		//gpsInput.insertValue( gpsBus );	// Pasa el simbolo al otro metodo
	}
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000ba8 	.word	0x20000ba8
 8001bc4:	200005d3 	.word	0x200005d3

08001bc8 <_Z8hwAnalogv>:
 *
 *	INPUT	:	analog[0],	analog[1], flagAnalog
 *	OUTPUT	:	battery, alphaAnalog_A, alphaAnalog_B
 */

void hwAnalog(){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	switch ( stateAnalog ){
 8001bcc:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <_Z8hwAnalogv+0x9c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d025      	beq.n	8001c20 <_Z8hwAnalogv+0x58>
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	dc42      	bgt.n	8001c5e <_Z8hwAnalogv+0x96>
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <_Z8hwAnalogv+0x1a>
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d013      	beq.n	8001c08 <_Z8hwAnalogv+0x40>
		else{												// Si no ha guardado
			stateAnalog		= 2;							// Espera en S2
		}
		break;
	}
}
 8001be0:	e03d      	b.n	8001c5e <_Z8hwAnalogv+0x96>
		countAnalog++;						// Suma 1 al contador
 8001be2:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <_Z8hwAnalogv+0xa0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <_Z8hwAnalogv+0xa0>)
 8001bea:	6013      	str	r3, [r2, #0]
		if ( countAnalog >= sampleAnalog ){	// Si cumple el tiempo de muestreo
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <_Z8hwAnalogv+0xa0>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <_Z8hwAnalogv+0xa4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	db03      	blt.n	8001c00 <_Z8hwAnalogv+0x38>
			stateAnalog	= 1;				// Pasa a S1
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <_Z8hwAnalogv+0x9c>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
		break;
 8001bfe:	e02e      	b.n	8001c5e <_Z8hwAnalogv+0x96>
			stateAnalog	= 0;				// Espera en S0
 8001c00:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <_Z8hwAnalogv+0x9c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
		break;
 8001c06:	e02a      	b.n	8001c5e <_Z8hwAnalogv+0x96>
		countAnalog	= 0;									// Reinicia contador
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <_Z8hwAnalogv+0xa0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);	// Inicia muestreo
 8001c0e:	2203      	movs	r2, #3
 8001c10:	4917      	ldr	r1, [pc, #92]	@ (8001c70 <_Z8hwAnalogv+0xa8>)
 8001c12:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <_Z8hwAnalogv+0xac>)
 8001c14:	f003 fd40 	bl	8005698 <HAL_ADC_Start_DMA>
		stateAnalog	= 2;									// Pasa a S2
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <_Z8hwAnalogv+0x9c>)
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	701a      	strb	r2, [r3, #0]
		break;
 8001c1e:	e01e      	b.n	8001c5e <_Z8hwAnalogv+0x96>
		if ( flagAnalog ){									// Si guardo correctamente
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <_Z8hwAnalogv+0xb0>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d016      	beq.n	8001c56 <_Z8hwAnalogv+0x8e>
			battery			= (analog[0] & 0xFFFF);			// Guarda valor bateria
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <_Z8hwAnalogv+0xa8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <_Z8hwAnalogv+0xb4>)
 8001c30:	801a      	strh	r2, [r3, #0]
			alphaAnalog_A	= (analog[0] >> 16 & 0xFFFF);	// Guarda valor Alpha A
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <_Z8hwAnalogv+0xa8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0c1b      	lsrs	r3, r3, #16
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <_Z8hwAnalogv+0xb8>)
 8001c3c:	801a      	strh	r2, [r3, #0]
			alphaAnalog_B	= (analog[1] & 0xFFFF);			// Guarda valor Alpha B
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <_Z8hwAnalogv+0xa8>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <_Z8hwAnalogv+0xbc>)
 8001c46:	801a      	strh	r2, [r3, #0]
			flagAnalog		= 0;							// Reinicia flag de medicion analogica
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <_Z8hwAnalogv+0xb0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
			stateAnalog		= 0;							// Vuelve a S0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <_Z8hwAnalogv+0x9c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
		break;
 8001c54:	e002      	b.n	8001c5c <_Z8hwAnalogv+0x94>
			stateAnalog		= 2;							// Espera en S2
 8001c56:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <_Z8hwAnalogv+0x9c>)
 8001c58:	2202      	movs	r2, #2
 8001c5a:	701a      	strb	r2, [r3, #0]
		break;
 8001c5c:	bf00      	nop
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000560 	.word	0x20000560
 8001c68:	20000558 	.word	0x20000558
 8001c6c:	2000055c 	.word	0x2000055c
 8001c70:	20001244 	.word	0x20001244
 8001c74:	2000072c 	.word	0x2000072c
 8001c78:	20001250 	.word	0x20001250
 8001c7c:	20000550 	.word	0x20000550
 8001c80:	20000552 	.word	0x20000552
 8001c84:	20000554 	.word	0x20000554

08001c88 <_Z8hwEEPROMv>:
 * 1. Indicar cada uno de los pasos de calibracion
 * 2. Guardas datos de forma periodica en EEPROM
 * 3.
 */

void hwEEPROM(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0

	switch ( stateEEPROM ){
 8001c8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001e0c <_Z8hwEEPROMv+0x184>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	f200 80b0 	bhi.w	8001df8 <_Z8hwEEPROMv+0x170>
 8001c98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca0 <_Z8hwEEPROMv+0x18>)
 8001c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9e:	bf00      	nop
 8001ca0:	08001cb5 	.word	0x08001cb5
 8001ca4:	08001d1d 	.word	0x08001d1d
 8001ca8:	08001d85 	.word	0x08001d85
 8001cac:	08001d8d 	.word	0x08001d8d
 8001cb0:	08001e01 	.word	0x08001e01
	// S0 - READ PAGE 0 //
	//////////////////////

	case 0:

		EEPROM_Read(0, 0,  nameSensor_0,	sizeof(nameSensor_0));		// Name of sensor
 8001cb4:	2314      	movs	r3, #20
 8001cb6:	4a56      	ldr	r2, [pc, #344]	@ (8001e10 <_Z8hwEEPROMv+0x188>)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7fe feea 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 20, idSensor_0,		sizeof(idSensor_0));		// ID of sensor
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	4a54      	ldr	r2, [pc, #336]	@ (8001e14 <_Z8hwEEPROMv+0x18c>)
 8001cc4:	2114      	movs	r1, #20
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7fe fee4 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 24, rangeSensor_0,	sizeof(rangeSensor_0));		// Range of sensor
 8001ccc:	2304      	movs	r3, #4
 8001cce:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <_Z8hwEEPROMv+0x190>)
 8001cd0:	2118      	movs	r1, #24
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7fe fede 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 28, amplifier_10,	sizeof(amplifier_10));		// Amplifier 1 of sensor
 8001cd8:	2304      	movs	r3, #4
 8001cda:	4a50      	ldr	r2, [pc, #320]	@ (8001e1c <_Z8hwEEPROMv+0x194>)
 8001cdc:	211c      	movs	r1, #28
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7fe fed8 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 32, amplifier_20,	sizeof(amplifier_20));		// Amplifier 2 of sensor
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8001e20 <_Z8hwEEPROMv+0x198>)
 8001ce8:	2120      	movs	r1, #32
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7fe fed2 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 36, groundSensor_0,	sizeof(groundSensor_0));	// N of curve
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8001e24 <_Z8hwEEPROMv+0x19c>)
 8001cf4:	2124      	movs	r1, #36	@ 0x24
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7fe fecc 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 40, curveSensor_0,	sizeof(curveSensor_0));		// M of curve
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8001e28 <_Z8hwEEPROMv+0x1a0>)
 8001d00:	2128      	movs	r1, #40	@ 0x28
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7fe fec6 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 44, dateCalib_0,		sizeof(dateCalib_0));		// Date of calibration
 8001d08:	230a      	movs	r3, #10
 8001d0a:	4a48      	ldr	r2, [pc, #288]	@ (8001e2c <_Z8hwEEPROMv+0x1a4>)
 8001d0c:	212c      	movs	r1, #44	@ 0x2c
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7fe fec0 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 1;												// S1 to read page 1
 8001d14:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <_Z8hwEEPROMv+0x184>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
		break;
 8001d1a:	e072      	b.n	8001e02 <_Z8hwEEPROMv+0x17a>
	//////////////////////
	// S1 - READ PAGE 1 //
	//////////////////////

	case 1:
		EEPROM_Read(1, 0,  nameSensor_1,	sizeof(nameSensor_1));		// Name of sensor
 8001d1c:	2314      	movs	r3, #20
 8001d1e:	4a44      	ldr	r2, [pc, #272]	@ (8001e30 <_Z8hwEEPROMv+0x1a8>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7fe feb6 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 20, idSensor_1,		sizeof(idSensor_1));		// ID of sensor
 8001d28:	2304      	movs	r3, #4
 8001d2a:	4a42      	ldr	r2, [pc, #264]	@ (8001e34 <_Z8hwEEPROMv+0x1ac>)
 8001d2c:	2114      	movs	r1, #20
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7fe feb0 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 24, rangeSensor_1,	sizeof(rangeSensor_1));		// Range of sensor
 8001d34:	2304      	movs	r3, #4
 8001d36:	4a40      	ldr	r2, [pc, #256]	@ (8001e38 <_Z8hwEEPROMv+0x1b0>)
 8001d38:	2118      	movs	r1, #24
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7fe feaa 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 28, amplifier_11,	sizeof(amplifier_11));		// Amplifier 1 of sensor
 8001d40:	2304      	movs	r3, #4
 8001d42:	4a3e      	ldr	r2, [pc, #248]	@ (8001e3c <_Z8hwEEPROMv+0x1b4>)
 8001d44:	211c      	movs	r1, #28
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7fe fea4 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 32, amplifier_21,	sizeof(amplifier_21));		// Amplifier 2 of sensor
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e40 <_Z8hwEEPROMv+0x1b8>)
 8001d50:	2120      	movs	r1, #32
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7fe fe9e 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 36, groundSensor_1,	sizeof(groundSensor_1));	// N of curve
 8001d58:	2304      	movs	r3, #4
 8001d5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e44 <_Z8hwEEPROMv+0x1bc>)
 8001d5c:	2124      	movs	r1, #36	@ 0x24
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7fe fe98 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 40, curveSensor_1,	sizeof(curveSensor_1));		// M of curve
 8001d64:	2304      	movs	r3, #4
 8001d66:	4a38      	ldr	r2, [pc, #224]	@ (8001e48 <_Z8hwEEPROMv+0x1c0>)
 8001d68:	2128      	movs	r1, #40	@ 0x28
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f7fe fe92 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 44, dateCalib_1,		sizeof(dateCalib_1));		// Date of calibration
 8001d70:	230a      	movs	r3, #10
 8001d72:	4a36      	ldr	r2, [pc, #216]	@ (8001e4c <_Z8hwEEPROMv+0x1c4>)
 8001d74:	212c      	movs	r1, #44	@ 0x2c
 8001d76:	2001      	movs	r0, #1
 8001d78:	f7fe fe8c 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 2;												// S2 to stop of read
 8001d7c:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <_Z8hwEEPROMv+0x184>)
 8001d7e:	2202      	movs	r2, #2
 8001d80:	701a      	strb	r2, [r3, #0]
		break;
 8001d82:	e03e      	b.n	8001e02 <_Z8hwEEPROMv+0x17a>
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
		*/
		stateEEPROM	= 3;								// Pasa a S3
 8001d84:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <_Z8hwEEPROMv+0x184>)
 8001d86:	2203      	movs	r2, #3
 8001d88:	701a      	strb	r2, [r3, #0]
		break;
 8001d8a:	e03a      	b.n	8001e02 <_Z8hwEEPROMv+0x17a>
	// S3 - STOP READING //
	///////////////////////

	case 3:
		uint8_t i;										// Inicia contador
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	e012      	b.n	8001db8 <_Z8hwEEPROMv+0x130>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	@ (8001e50 <_Z8hwEEPROMv+0x1c8>)
 8001d96:	5cd2      	ldrb	r2, [r2, r3]
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	491d      	ldr	r1, [pc, #116]	@ (8001e10 <_Z8hwEEPROMv+0x188>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d103      	bne.n	8001daa <_Z8hwEEPROMv+0x122>
				errorHardware[4]	= 0;				// Si son iguales  no hay error
 8001da2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e54 <_Z8hwEEPROMv+0x1cc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	711a      	strb	r2, [r3, #4]
 8001da8:	e003      	b.n	8001db2 <_Z8hwEEPROMv+0x12a>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8001daa:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <_Z8hwEEPROMv+0x1cc>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8001db0:	e005      	b.n	8001dbe <_Z8hwEEPROMv+0x136>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	3301      	adds	r3, #1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b11      	cmp	r3, #17
 8001dbc:	d9e9      	bls.n	8001d92 <_Z8hwEEPROMv+0x10a>
			}
		}

		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	e012      	b.n	8001dea <_Z8hwEEPROMv+0x162>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <_Z8hwEEPROMv+0x1c8>)
 8001dc8:	5cd2      	ldrb	r2, [r2, r3]
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4910      	ldr	r1, [pc, #64]	@ (8001e10 <_Z8hwEEPROMv+0x188>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d103      	bne.n	8001ddc <_Z8hwEEPROMv+0x154>
				errorHardware[4]	= 0;				// Si son iguales no idnica error
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <_Z8hwEEPROMv+0x1cc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	711a      	strb	r2, [r3, #4]
 8001dda:	e003      	b.n	8001de4 <_Z8hwEEPROMv+0x15c>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <_Z8hwEEPROMv+0x1cc>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8001de2:	e005      	b.n	8001df0 <_Z8hwEEPROMv+0x168>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	3301      	adds	r3, #1
 8001de8:	71fb      	strb	r3, [r7, #7]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b11      	cmp	r3, #17
 8001dee:	d9e9      	bls.n	8001dc4 <_Z8hwEEPROMv+0x13c>
			}
		}
		stateEEPROM	= 4;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <_Z8hwEEPROMv+0x184>)
 8001df2:	2204      	movs	r2, #4
 8001df4:	701a      	strb	r2, [r3, #0]
		break;
 8001df6:	e004      	b.n	8001e02 <_Z8hwEEPROMv+0x17a>

	case 4:
		break;
	default:
		stateEEPROM	= 0;
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <_Z8hwEEPROMv+0x184>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
		break;
 8001dfe:	e000      	b.n	8001e02 <_Z8hwEEPROMv+0x17a>
		break;
 8001e00:	bf00      	nop
	}
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200005d2 	.word	0x200005d2
 8001e10:	20000564 	.word	0x20000564
 8001e14:	20000578 	.word	0x20000578
 8001e18:	2000057c 	.word	0x2000057c
 8001e1c:	20000580 	.word	0x20000580
 8001e20:	20000584 	.word	0x20000584
 8001e24:	20000588 	.word	0x20000588
 8001e28:	2000058c 	.word	0x2000058c
 8001e2c:	20000590 	.word	0x20000590
 8001e30:	2000059c 	.word	0x2000059c
 8001e34:	200005b0 	.word	0x200005b0
 8001e38:	200005b4 	.word	0x200005b4
 8001e3c:	200005b8 	.word	0x200005b8
 8001e40:	200005bc 	.word	0x200005bc
 8001e44:	200005c0 	.word	0x200005c0
 8001e48:	200005c4 	.word	0x200005c4
 8001e4c:	200005c8 	.word	0x200005c8
 8001e50:	20000014 	.word	0x20000014
 8001e54:	200005e0 	.word	0x200005e0

08001e58 <_Z41__static_initialization_and_destruction_0ii>:
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d137      	bne.n	8001ed8 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d132      	bne.n	8001ed8 <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e80:	4a19      	ldr	r2, [pc, #100]	@ (8001ee8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001e82:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 8001e84:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001e94:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2332      	movs	r3, #50	@ 0x32
 8001e9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ea2:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001ea4:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2364      	movs	r3, #100	@ 0x64
 8001eae:	fb93 f3f2 	sdiv	r3, r3, r2
 8001eb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ef4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001eb4:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2314      	movs	r3, #20
 8001ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001ec6:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2332      	movs	r3, #50	@ 0x32
 8001ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ed4:	4a09      	ldr	r2, [pc, #36]	@ (8001efc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20000433 	.word	0x20000433
 8001ee8:	20000510 	.word	0x20000510
 8001eec:	2000051c 	.word	0x2000051c
 8001ef0:	20000520 	.word	0x20000520
 8001ef4:	2000053c 	.word	0x2000053c
 8001ef8:	20000540 	.word	0x20000540
 8001efc:	2000055c 	.word	0x2000055c

08001f00 <_GLOBAL__sub_I_boton>:
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff ffa5 	bl	8001e58 <_Z41__static_initialization_and_destruction_0ii>
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_Z8hwOutputv>:

extern uint8_t dateCalib1[10];		// Fecha de calibración

/***** OUTPUT	*****/

void hwOutput(){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	//hwDisplay();
	//hwAlarms();
	hwLoraOut();
 8001f14:	f000 facc 	bl	80024b0 <_Z9hwLoraOutv>
	hwGpsOut();
 8001f18:	f000 f968 	bl	80021ec <_Z8hwGpsOutv>
	hwLedOut();
 8001f1c:	f000 f8a8 	bl	8002070 <_Z8hwLedOutv>
	hwEEPROMOut();
 8001f20:	f000 f802 	bl	8001f28 <_Z11hwEEPROMOutv>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_Z11hwEEPROMOutv>:

////////////
// EEPROM //
////////////

void hwEEPROMOut(){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	switch( stateEepromOut ){
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <_Z11hwEEPROMOutv+0x100>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <_Z11hwEEPROMOutv+0x12>
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d00c      	beq.n	8001f52 <_Z11hwEEPROMOutv+0x2a>
 8001f38:	e06f      	b.n	800201a <_Z11hwEEPROMOutv+0xf2>
	case 0:
		if (flagSaveEeprom){
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800202c <_Z11hwEEPROMOutv+0x104>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <_Z11hwEEPROMOutv+0x22>
			stateEepromOut	= 1;
 8001f42:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <_Z11hwEEPROMOutv+0x100>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateEepromOut	= 0;
		}
		break;
 8001f48:	e06b      	b.n	8002022 <_Z11hwEEPROMOutv+0xfa>
			stateEepromOut	= 0;
 8001f4a:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <_Z11hwEEPROMOutv+0x100>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
		break;
 8001f50:	e067      	b.n	8002022 <_Z11hwEEPROMOutv+0xfa>

	case 1:
		EEPROM_Write(0, 0, nameSensor0, sizeof(nameSensor0));
 8001f52:	2314      	movs	r3, #20
 8001f54:	4a36      	ldr	r2, [pc, #216]	@ (8002030 <_Z11hwEEPROMOutv+0x108>)
 8001f56:	2100      	movs	r1, #0
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7fe fd35 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 20, idSensor0, sizeof(idSensor0));
 8001f5e:	2304      	movs	r3, #4
 8001f60:	4a34      	ldr	r2, [pc, #208]	@ (8002034 <_Z11hwEEPROMOutv+0x10c>)
 8001f62:	2114      	movs	r1, #20
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7fe fd2f 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 24, rangeSensor0, sizeof(rangeSensor0));
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	4a32      	ldr	r2, [pc, #200]	@ (8002038 <_Z11hwEEPROMOutv+0x110>)
 8001f6e:	2118      	movs	r1, #24
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7fe fd29 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 28, amplifier1_0, sizeof(amplifier1_0));
 8001f76:	2304      	movs	r3, #4
 8001f78:	4a30      	ldr	r2, [pc, #192]	@ (800203c <_Z11hwEEPROMOutv+0x114>)
 8001f7a:	211c      	movs	r1, #28
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7fe fd23 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 32, amplifier2_0, sizeof(amplifier2_0));
 8001f82:	2304      	movs	r3, #4
 8001f84:	4a2e      	ldr	r2, [pc, #184]	@ (8002040 <_Z11hwEEPROMOutv+0x118>)
 8001f86:	2120      	movs	r1, #32
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7fe fd1d 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 36, groundSensor0, sizeof(groundSensor0));
 8001f8e:	2304      	movs	r3, #4
 8001f90:	4a2c      	ldr	r2, [pc, #176]	@ (8002044 <_Z11hwEEPROMOutv+0x11c>)
 8001f92:	2124      	movs	r1, #36	@ 0x24
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7fe fd17 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 40, curveSensor0, sizeof(curveSensor0));
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002048 <_Z11hwEEPROMOutv+0x120>)
 8001f9e:	2128      	movs	r1, #40	@ 0x28
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7fe fd11 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 44, dateCalib0, sizeof(dateCalib0));
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	4a28      	ldr	r2, [pc, #160]	@ (800204c <_Z11hwEEPROMOutv+0x124>)
 8001faa:	212c      	movs	r1, #44	@ 0x2c
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7fe fd0b 	bl	80009c8 <_Z12EEPROM_WritettPht>

		EEPROM_Write(1, 0, nameSensor1, sizeof(nameSensor0));
 8001fb2:	2314      	movs	r3, #20
 8001fb4:	4a26      	ldr	r2, [pc, #152]	@ (8002050 <_Z11hwEEPROMOutv+0x128>)
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7fe fd05 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 20, idSensor1, sizeof(idSensor1));
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	4a24      	ldr	r2, [pc, #144]	@ (8002054 <_Z11hwEEPROMOutv+0x12c>)
 8001fc2:	2114      	movs	r1, #20
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7fe fcff 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 24, rangeSensor1, sizeof(rangeSensor0));
 8001fca:	2304      	movs	r3, #4
 8001fcc:	4a22      	ldr	r2, [pc, #136]	@ (8002058 <_Z11hwEEPROMOutv+0x130>)
 8001fce:	2118      	movs	r1, #24
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7fe fcf9 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 28, amplifier1_1, sizeof(amplifier1_0));
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	4a20      	ldr	r2, [pc, #128]	@ (800205c <_Z11hwEEPROMOutv+0x134>)
 8001fda:	211c      	movs	r1, #28
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7fe fcf3 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8002060 <_Z11hwEEPROMOutv+0x138>)
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7fe fced 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
 8001fee:	2304      	movs	r3, #4
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <_Z11hwEEPROMOutv+0x13c>)
 8001ff2:	2124      	movs	r1, #36	@ 0x24
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7fe fce7 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8002068 <_Z11hwEEPROMOutv+0x140>)
 8001ffe:	2128      	movs	r1, #40	@ 0x28
 8002000:	2001      	movs	r0, #1
 8002002:	f7fe fce1 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
 8002006:	230a      	movs	r3, #10
 8002008:	4a18      	ldr	r2, [pc, #96]	@ (800206c <_Z11hwEEPROMOutv+0x144>)
 800200a:	212c      	movs	r1, #44	@ 0x2c
 800200c:	2001      	movs	r0, #1
 800200e:	f7fe fcdb 	bl	80009c8 <_Z12EEPROM_WritettPht>

		stateEepromOut	= 0;
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <_Z11hwEEPROMOutv+0x100>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
		break;
 8002018:	e003      	b.n	8002022 <_Z11hwEEPROMOutv+0xfa>

	default:
		stateEepromOut	= 0;
 800201a:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <_Z11hwEEPROMOutv+0x100>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
		break;
 8002020:	bf00      	nop
	}
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000608 	.word	0x20000608
 800202c:	20000607 	.word	0x20000607
 8002030:	20000394 	.word	0x20000394
 8002034:	200003a8 	.word	0x200003a8
 8002038:	200003b0 	.word	0x200003b0
 800203c:	200003b8 	.word	0x200003b8
 8002040:	200003c0 	.word	0x200003c0
 8002044:	200003c8 	.word	0x200003c8
 8002048:	200003d0 	.word	0x200003d0
 800204c:	200003d8 	.word	0x200003d8
 8002050:	200003e4 	.word	0x200003e4
 8002054:	200003f8 	.word	0x200003f8
 8002058:	20000400 	.word	0x20000400
 800205c:	20000408 	.word	0x20000408
 8002060:	20000410 	.word	0x20000410
 8002064:	20000418 	.word	0x20000418
 8002068:	20000420 	.word	0x20000420
 800206c:	20000428 	.word	0x20000428

08002070 <_Z8hwLedOutv>:

/////////
// LED //
/////////

void hwLedOut(){
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

	switch(stateLed){
 8002074:	4b57      	ldr	r3, [pc, #348]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b03      	cmp	r3, #3
 800207a:	f200 80a5 	bhi.w	80021c8 <_Z8hwLedOutv+0x158>
 800207e:	a201      	add	r2, pc, #4	@ (adr r2, 8002084 <_Z8hwLedOutv+0x14>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	08002095 	.word	0x08002095
 8002088:	080020c9 	.word	0x080020c9
 800208c:	080020fd 	.word	0x080020fd
 8002090:	08002163 	.word	0x08002163
	//////////////////
	// S0 - LED OFF //
	//////////////////

	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2110      	movs	r1, #16
 8002098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209c:	f005 fb14 	bl	80076c8 <HAL_GPIO_WritePin>

		if ( flagLedOn ){			//
 80020a0:	4b4d      	ldr	r3, [pc, #308]	@ (80021d8 <_Z8hwLedOutv+0x168>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <_Z8hwLedOutv+0x40>
			stateLed	= 1;		//
 80020a8:	4b4a      	ldr	r3, [pc, #296]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
			stateLed	= 2;		//
		}
		else{						//
			stateLed	= 0;		//
		}
		break;
 80020ae:	e08f      	b.n	80021d0 <_Z8hwLedOutv+0x160>
		else if ( flagLedFreq ){	//
 80020b0:	4b4a      	ldr	r3, [pc, #296]	@ (80021dc <_Z8hwLedOutv+0x16c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <_Z8hwLedOutv+0x50>
			stateLed	= 2;		//
 80020b8:	4b46      	ldr	r3, [pc, #280]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80020ba:	2202      	movs	r2, #2
 80020bc:	701a      	strb	r2, [r3, #0]
		break;
 80020be:	e087      	b.n	80021d0 <_Z8hwLedOutv+0x160>
			stateLed	= 0;		//
 80020c0:	4b44      	ldr	r3, [pc, #272]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
		break;
 80020c6:	e083      	b.n	80021d0 <_Z8hwLedOutv+0x160>
	/////////////////
	// S1 - LED ON //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2110      	movs	r1, #16
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d0:	f005 fafa 	bl	80076c8 <HAL_GPIO_WritePin>

		if ( flagLedOff ){			//
 80020d4:	4b42      	ldr	r3, [pc, #264]	@ (80021e0 <_Z8hwLedOutv+0x170>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <_Z8hwLedOutv+0x74>
			stateLed	= 0;		//
 80020dc:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
			stateLed	= 2;		//
		}
		else{						//
			stateLed	= 1;		//
		}
		break;
 80020e2:	e075      	b.n	80021d0 <_Z8hwLedOutv+0x160>
		else if ( flagLedFreq ){	//
 80020e4:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <_Z8hwLedOutv+0x16c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <_Z8hwLedOutv+0x84>
			stateLed	= 2;		//
 80020ec:	4b39      	ldr	r3, [pc, #228]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80020ee:	2202      	movs	r2, #2
 80020f0:	701a      	strb	r2, [r3, #0]
		break;
 80020f2:	e06d      	b.n	80021d0 <_Z8hwLedOutv+0x160>
			stateLed	= 1;		//
 80020f4:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
		break;
 80020fa:	e069      	b.n	80021d0 <_Z8hwLedOutv+0x160>
	///////////////////
	// S2 - LED FREQ //
	///////////////////

	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	2110      	movs	r1, #16
 8002100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002104:	f005 fae0 	bl	80076c8 <HAL_GPIO_WritePin>

		countLedOut++;							//
 8002108:	4b36      	ldr	r3, [pc, #216]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b34      	ldr	r3, [pc, #208]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 8002112:	801a      	strh	r2, [r3, #0]

		if ( flagLedOn ){						//
 8002114:	4b30      	ldr	r3, [pc, #192]	@ (80021d8 <_Z8hwLedOutv+0x168>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <_Z8hwLedOutv+0xba>
			countLedOut	= 0;					//
 800211c:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 800211e:	2200      	movs	r2, #0
 8002120:	801a      	strh	r2, [r3, #0]
			stateLed	= 1;					//
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
			stateLed	= 3;					//
		}
		else{									//
			stateLed	= 2;					//
		}
		break;
 8002128:	e052      	b.n	80021d0 <_Z8hwLedOutv+0x160>
		else if ( flagLedOff ){					//
 800212a:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <_Z8hwLedOutv+0x170>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <_Z8hwLedOutv+0xd0>
			countLedOut	= 0;					//
 8002132:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 8002134:	2200      	movs	r2, #0
 8002136:	801a      	strh	r2, [r3, #0]
			stateLed	= 0;					//
 8002138:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
		break;
 800213e:	e047      	b.n	80021d0 <_Z8hwLedOutv+0x160>
		else if ( countLedOut >= limitLed ){	//
 8002140:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	4b28      	ldr	r3, [pc, #160]	@ (80021e8 <_Z8hwLedOutv+0x178>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d306      	bcc.n	800215a <_Z8hwLedOutv+0xea>
			countLedOut	= 0;					//
 800214c:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 800214e:	2200      	movs	r2, #0
 8002150:	801a      	strh	r2, [r3, #0]
			stateLed	= 3;					//
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 8002154:	2203      	movs	r2, #3
 8002156:	701a      	strb	r2, [r3, #0]
		break;
 8002158:	e03a      	b.n	80021d0 <_Z8hwLedOutv+0x160>
			stateLed	= 2;					//
 800215a:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 800215c:	2202      	movs	r2, #2
 800215e:	701a      	strb	r2, [r3, #0]
		break;
 8002160:	e036      	b.n	80021d0 <_Z8hwLedOutv+0x160>
	///////////////////
	// S3 - LED FREQ //
	///////////////////

	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	2110      	movs	r1, #16
 8002166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216a:	f005 faad 	bl	80076c8 <HAL_GPIO_WritePin>

		countLedOut++;							//
 800216e:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 8002178:	801a      	strh	r2, [r3, #0]

		if ( flagLedOn ){						//
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <_Z8hwLedOutv+0x168>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <_Z8hwLedOutv+0x120>
			countLedOut	= 0;					//
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 8002184:	2200      	movs	r2, #0
 8002186:	801a      	strh	r2, [r3, #0]
			stateLed	= 1;					//
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
			stateLed	= 3;					//
		}
		else{									//
			stateLed	= 2;					//
		}
		break;
 800218e:	e01f      	b.n	80021d0 <_Z8hwLedOutv+0x160>
		else if ( flagLedOff ){					//
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <_Z8hwLedOutv+0x170>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <_Z8hwLedOutv+0x136>
			countLedOut	= 0;					//
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 800219a:	2200      	movs	r2, #0
 800219c:	801a      	strh	r2, [r3, #0]
			stateLed	= 0;					//
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
		break;
 80021a4:	e014      	b.n	80021d0 <_Z8hwLedOutv+0x160>
		else if ( countLedOut >= limitLed ){	//
 80021a6:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 80021a8:	881a      	ldrh	r2, [r3, #0]
 80021aa:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <_Z8hwLedOutv+0x178>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d306      	bcc.n	80021c0 <_Z8hwLedOutv+0x150>
			countLedOut	= 0;					//
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <_Z8hwLedOutv+0x174>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	801a      	strh	r2, [r3, #0]
			stateLed	= 3;					//
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80021ba:	2203      	movs	r2, #3
 80021bc:	701a      	strb	r2, [r3, #0]
		break;
 80021be:	e007      	b.n	80021d0 <_Z8hwLedOutv+0x160>
			stateLed	= 2;					//
 80021c0:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80021c2:	2202      	movs	r2, #2
 80021c4:	701a      	strb	r2, [r3, #0]
		break;
 80021c6:	e003      	b.n	80021d0 <_Z8hwLedOutv+0x160>

	default:
		stateLed	= 0;
 80021c8:	4b02      	ldr	r3, [pc, #8]	@ (80021d4 <_Z8hwLedOutv+0x164>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
		break;
 80021ce:	bf00      	nop
	}
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	200005fe 	.word	0x200005fe
 80021d8:	20000604 	.word	0x20000604
 80021dc:	20000606 	.word	0x20000606
 80021e0:	20000605 	.word	0x20000605
 80021e4:	20000600 	.word	0x20000600
 80021e8:	20000602 	.word	0x20000602

080021ec <_Z8hwGpsOutv>:

/////////
// GPS //
/////////

void hwGpsOut(){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0

	////////////
	// ENABLE //
	////////////

	switch ( stateUartGps ){
 80021f0:	4b9d      	ldr	r3, [pc, #628]	@ (8002468 <_Z8hwGpsOutv+0x27c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d03d      	beq.n	8002274 <_Z8hwGpsOutv+0x88>
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	dc4a      	bgt.n	8002292 <_Z8hwGpsOutv+0xa6>
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <_Z8hwGpsOutv+0x1a>
 8002200:	2b01      	cmp	r3, #1
 8002202:	d011      	beq.n	8002228 <_Z8hwGpsOutv+0x3c>
 8002204:	e045      	b.n	8002292 <_Z8hwGpsOutv+0xa6>
	/////////////////////////
	// S0 - WAIT AVAILABLE //
	/////////////////////////

	case 0:
		if ( availableGps ){										// Si
 8002206:	4b99      	ldr	r3, [pc, #612]	@ (800246c <_Z8hwGpsOutv+0x280>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <_Z8hwGpsOutv+0x34>
			HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));	//
 800220e:	2202      	movs	r2, #2
 8002210:	4997      	ldr	r1, [pc, #604]	@ (8002470 <_Z8hwGpsOutv+0x284>)
 8002212:	4898      	ldr	r0, [pc, #608]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 8002214:	f009 fee6 	bl	800bfe4 <HAL_UART_Receive_DMA>
			stateUartGps	= 1;									//
 8002218:	4b93      	ldr	r3, [pc, #588]	@ (8002468 <_Z8hwGpsOutv+0x27c>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
		}
		else{														//
			stateUartGps	= 0;									//
		}
		break;
 800221e:	e03c      	b.n	800229a <_Z8hwGpsOutv+0xae>
			stateUartGps	= 0;									//
 8002220:	4b91      	ldr	r3, [pc, #580]	@ (8002468 <_Z8hwGpsOutv+0x27c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
		break;
 8002226:	e038      	b.n	800229a <_Z8hwGpsOutv+0xae>

	case 1:
		countUartGps++;
 8002228:	4b93      	ldr	r3, [pc, #588]	@ (8002478 <_Z8hwGpsOutv+0x28c>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	4b91      	ldr	r3, [pc, #580]	@ (8002478 <_Z8hwGpsOutv+0x28c>)
 8002232:	801a      	strh	r2, [r3, #0]

		if ( !availableGps ){
 8002234:	4b8d      	ldr	r3, [pc, #564]	@ (800246c <_Z8hwGpsOutv+0x280>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <_Z8hwGpsOutv+0x64>
			countUartGps	= 0;
 8002242:	4b8d      	ldr	r3, [pc, #564]	@ (8002478 <_Z8hwGpsOutv+0x28c>)
 8002244:	2200      	movs	r2, #0
 8002246:	801a      	strh	r2, [r3, #0]
			stateUartGps	= 0;
 8002248:	4b87      	ldr	r3, [pc, #540]	@ (8002468 <_Z8hwGpsOutv+0x27c>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
			stateUartGps	= 2;
		}
		else{
			stateUartGps	= 1;
		}
		break;
 800224e:	e024      	b.n	800229a <_Z8hwGpsOutv+0xae>
		else if ( (countUartGps >= limitUartGps || flagUartGps)){
 8002250:	4b89      	ldr	r3, [pc, #548]	@ (8002478 <_Z8hwGpsOutv+0x28c>)
 8002252:	881a      	ldrh	r2, [r3, #0]
 8002254:	4b89      	ldr	r3, [pc, #548]	@ (800247c <_Z8hwGpsOutv+0x290>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d203      	bcs.n	8002264 <_Z8hwGpsOutv+0x78>
 800225c:	4b88      	ldr	r3, [pc, #544]	@ (8002480 <_Z8hwGpsOutv+0x294>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <_Z8hwGpsOutv+0x80>
			stateUartGps	= 2;
 8002264:	4b80      	ldr	r3, [pc, #512]	@ (8002468 <_Z8hwGpsOutv+0x27c>)
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
		break;
 800226a:	e016      	b.n	800229a <_Z8hwGpsOutv+0xae>
			stateUartGps	= 1;
 800226c:	4b7e      	ldr	r3, [pc, #504]	@ (8002468 <_Z8hwGpsOutv+0x27c>)
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
		break;
 8002272:	e012      	b.n	800229a <_Z8hwGpsOutv+0xae>

	case 2:
		flagUartGps		= 0;
 8002274:	4b82      	ldr	r3, [pc, #520]	@ (8002480 <_Z8hwGpsOutv+0x294>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
		countUartGps	= 0;
 800227a:	4b7f      	ldr	r3, [pc, #508]	@ (8002478 <_Z8hwGpsOutv+0x28c>)
 800227c:	2200      	movs	r2, #0
 800227e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
 8002280:	2202      	movs	r2, #2
 8002282:	497b      	ldr	r1, [pc, #492]	@ (8002470 <_Z8hwGpsOutv+0x284>)
 8002284:	487b      	ldr	r0, [pc, #492]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 8002286:	f009 fead 	bl	800bfe4 <HAL_UART_Receive_DMA>
		stateUartGps	= 1;
 800228a:	4b77      	ldr	r3, [pc, #476]	@ (8002468 <_Z8hwGpsOutv+0x27c>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
		break;
 8002290:	e003      	b.n	800229a <_Z8hwGpsOutv+0xae>

	default:
		stateUartGps	= 0;
 8002292:	4b75      	ldr	r3, [pc, #468]	@ (8002468 <_Z8hwGpsOutv+0x27c>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
		break;
 8002298:	bf00      	nop

	/////////////
	// MESSAGE //
	/////////////

	switch ( stateHwGpsEnable ){
 800229a:	4b7a      	ldr	r3, [pc, #488]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d869      	bhi.n	8002376 <_Z8hwGpsOutv+0x18a>
 80022a2:	a201      	add	r2, pc, #4	@ (adr r2, 80022a8 <_Z8hwGpsOutv+0xbc>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022b9 	.word	0x080022b9
 80022ac:	080022e7 	.word	0x080022e7
 80022b0:	0800231b 	.word	0x0800231b
 80022b4:	08002359 	.word	0x08002359

		case 0:
			availableGps	= 0;
 80022b8:	4b6c      	ldr	r3, [pc, #432]	@ (800246c <_Z8hwGpsOutv+0x280>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	2101      	movs	r1, #1
 80022c2:	4871      	ldr	r0, [pc, #452]	@ (8002488 <_Z8hwGpsOutv+0x29c>)
 80022c4:	f005 fa00 	bl	80076c8 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
			if ( enableGps ){
 80022c8:	4b70      	ldr	r3, [pc, #448]	@ (800248c <_Z8hwGpsOutv+0x2a0>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <_Z8hwGpsOutv+0xf2>
				HAL_UART_Init(&huart5);
 80022d0:	4868      	ldr	r0, [pc, #416]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 80022d2:	f009 fd7f 	bl	800bdd4 <HAL_UART_Init>
				stateHwGpsEnable	= 1;
 80022d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 0;
			}
			break;
 80022dc:	e04f      	b.n	800237e <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 0;
 80022de:	4b69      	ldr	r3, [pc, #420]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
			break;
 80022e4:	e04b      	b.n	800237e <_Z8hwGpsOutv+0x192>

		case 1:
			availableGps	= 0;
 80022e6:	4b61      	ldr	r3, [pc, #388]	@ (800246c <_Z8hwGpsOutv+0x280>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
			countGpsAvailable++;
 80022ec:	4b68      	ldr	r3, [pc, #416]	@ (8002490 <_Z8hwGpsOutv+0x2a4>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4b66      	ldr	r3, [pc, #408]	@ (8002490 <_Z8hwGpsOutv+0x2a4>)
 80022f6:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 80022f8:	4b65      	ldr	r3, [pc, #404]	@ (8002490 <_Z8hwGpsOutv+0x2a4>)
 80022fa:	881a      	ldrh	r2, [r3, #0]
 80022fc:	4b65      	ldr	r3, [pc, #404]	@ (8002494 <_Z8hwGpsOutv+0x2a8>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d306      	bcc.n	8002312 <_Z8hwGpsOutv+0x126>
				countGpsAvailable	= 0;
 8002304:	4b62      	ldr	r3, [pc, #392]	@ (8002490 <_Z8hwGpsOutv+0x2a4>)
 8002306:	2200      	movs	r2, #0
 8002308:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 2;
 800230a:	4b5e      	ldr	r3, [pc, #376]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 1;
			}
			break;
 8002310:	e035      	b.n	800237e <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 1;
 8002312:	4b5c      	ldr	r3, [pc, #368]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
			break;
 8002318:	e031      	b.n	800237e <_Z8hwGpsOutv+0x192>

		case 2:
			availableGps	= 1;
 800231a:	4b54      	ldr	r3, [pc, #336]	@ (800246c <_Z8hwGpsOutv+0x280>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	2101      	movs	r1, #1
 8002324:	4858      	ldr	r0, [pc, #352]	@ (8002488 <_Z8hwGpsOutv+0x29c>)
 8002326:	f005 f9cf 	bl	80076c8 <HAL_GPIO_WritePin>
			countGpsAvailable++;
 800232a:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <_Z8hwGpsOutv+0x2a4>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b57      	ldr	r3, [pc, #348]	@ (8002490 <_Z8hwGpsOutv+0x2a4>)
 8002334:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 8002336:	4b56      	ldr	r3, [pc, #344]	@ (8002490 <_Z8hwGpsOutv+0x2a4>)
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	4b56      	ldr	r3, [pc, #344]	@ (8002494 <_Z8hwGpsOutv+0x2a8>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d306      	bcc.n	8002350 <_Z8hwGpsOutv+0x164>
				countGpsAvailable	= 0;
 8002342:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <_Z8hwGpsOutv+0x2a4>)
 8002344:	2200      	movs	r2, #0
 8002346:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 3;
 8002348:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 800234a:	2203      	movs	r2, #3
 800234c:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 2;
			}
			break;
 800234e:	e016      	b.n	800237e <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 2;
 8002350:	4b4c      	ldr	r3, [pc, #304]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
			break;
 8002356:	e012      	b.n	800237e <_Z8hwGpsOutv+0x192>

		case 3:
			if ( enableGps ){
 8002358:	4b4c      	ldr	r3, [pc, #304]	@ (800248c <_Z8hwGpsOutv+0x2a0>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <_Z8hwGpsOutv+0x17c>
				stateHwGpsEnable	= 3;
 8002360:	4b48      	ldr	r3, [pc, #288]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 8002362:	2203      	movs	r2, #3
 8002364:	701a      	strb	r2, [r3, #0]
			else{

				HAL_UART_DeInit(&huart5);
				stateHwGpsEnable	= 0;
			}
			break;
 8002366:	e00a      	b.n	800237e <_Z8hwGpsOutv+0x192>
				HAL_UART_DeInit(&huart5);
 8002368:	4842      	ldr	r0, [pc, #264]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 800236a:	f009 fd81 	bl	800be70 <HAL_UART_DeInit>
				stateHwGpsEnable	= 0;
 800236e:	4b45      	ldr	r3, [pc, #276]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
			break;
 8002374:	e003      	b.n	800237e <_Z8hwGpsOutv+0x192>
		default:
			stateHwGpsEnable	= 0;
 8002376:	4b43      	ldr	r3, [pc, #268]	@ (8002484 <_Z8hwGpsOutv+0x298>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
			break;
 800237c:	bf00      	nop
		}

	switch( stateConfigGps ){
 800237e:	4b46      	ldr	r3, [pc, #280]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b0a      	cmp	r3, #10
 8002384:	d86d      	bhi.n	8002462 <_Z8hwGpsOutv+0x276>
 8002386:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <_Z8hwGpsOutv+0x1a0>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	080023b9 	.word	0x080023b9
 8002390:	080023d1 	.word	0x080023d1
 8002394:	080023e3 	.word	0x080023e3
 8002398:	080023eb 	.word	0x080023eb
 800239c:	080023fd 	.word	0x080023fd
 80023a0:	08002405 	.word	0x08002405
 80023a4:	08002417 	.word	0x08002417
 80023a8:	0800241f 	.word	0x0800241f
 80023ac:	08002431 	.word	0x08002431
 80023b0:	08002439 	.word	0x08002439
 80023b4:	0800244b 	.word	0x0800244b
	case 0:
		if ( availableGps ){
 80023b8:	4b2c      	ldr	r3, [pc, #176]	@ (800246c <_Z8hwGpsOutv+0x280>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <_Z8hwGpsOutv+0x1dc>
			//HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
			stateConfigGps	= 1;
 80023c0:	4b35      	ldr	r3, [pc, #212]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 80023c6:	e04c      	b.n	8002462 <_Z8hwGpsOutv+0x276>
			stateConfigGps	= 0;
 80023c8:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
		break;
 80023ce:	e048      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 1:
		HAL_UART_Transmit_DMA(&huart5, commandUart, sizeof(commandUart) - 1);
 80023d0:	2219      	movs	r2, #25
 80023d2:	4932      	ldr	r1, [pc, #200]	@ (800249c <_Z8hwGpsOutv+0x2b0>)
 80023d4:	4827      	ldr	r0, [pc, #156]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 80023d6:	f009 fd89 	bl	800beec <HAL_UART_Transmit_DMA>
		stateConfigGps	= 2;
 80023da:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]
		break;
 80023e0:	e03f      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 2:

		stateConfigGps	= 3;
 80023e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 80023e4:	2203      	movs	r2, #3
 80023e6:	701a      	strb	r2, [r3, #0]
		break;
 80023e8:	e03b      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 3:
		HAL_UART_Transmit_DMA(&huart5, commandUart3, sizeof(commandUart2) - 1);
 80023ea:	2219      	movs	r2, #25
 80023ec:	492c      	ldr	r1, [pc, #176]	@ (80024a0 <_Z8hwGpsOutv+0x2b4>)
 80023ee:	4821      	ldr	r0, [pc, #132]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 80023f0:	f009 fd7c 	bl	800beec <HAL_UART_Transmit_DMA>
		stateConfigGps	= 4;
 80023f4:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 80023f6:	2204      	movs	r2, #4
 80023f8:	701a      	strb	r2, [r3, #0]
		break;
 80023fa:	e032      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 4:
		//HAL_UART_Transmit_DMA(&huart5, commandUart4, sizeof(commandUart4) - 1);
		stateConfigGps	= 5;
 80023fc:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 80023fe:	2205      	movs	r2, #5
 8002400:	701a      	strb	r2, [r3, #0]
		break;
 8002402:	e02e      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 5:
		HAL_UART_Transmit_DMA(&huart5, commandUart2, sizeof(commandUart3) - 1);
 8002404:	2219      	movs	r2, #25
 8002406:	4927      	ldr	r1, [pc, #156]	@ (80024a4 <_Z8hwGpsOutv+0x2b8>)
 8002408:	481a      	ldr	r0, [pc, #104]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 800240a:	f009 fd6f 	bl	800beec <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart5, sizeof(commandUart5) - 1);
		stateConfigGps	= 6;
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 8002410:	2206      	movs	r2, #6
 8002412:	701a      	strb	r2, [r3, #0]
		break;
 8002414:	e025      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 6:
		//HAL_UART_Transmit_DMA(&huart5, commandUart6, sizeof(commandUart6) - 1);
		stateConfigGps	= 7;
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 8002418:	2207      	movs	r2, #7
 800241a:	701a      	strb	r2, [r3, #0]
		break;
 800241c:	e021      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 7:
		HAL_UART_Transmit_DMA(&huart5, commandUart8, sizeof(commandUart8) - 1);
 800241e:	2211      	movs	r2, #17
 8002420:	4921      	ldr	r1, [pc, #132]	@ (80024a8 <_Z8hwGpsOutv+0x2bc>)
 8002422:	4814      	ldr	r0, [pc, #80]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 8002424:	f009 fd62 	bl	800beec <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart7, sizeof(commandUart7) - 1);
		stateConfigGps	= 8;
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 800242a:	2208      	movs	r2, #8
 800242c:	701a      	strb	r2, [r3, #0]
		break;
 800242e:	e018      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 8:

		stateConfigGps	= 9;
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 8002432:	2209      	movs	r2, #9
 8002434:	701a      	strb	r2, [r3, #0]
		break;
 8002436:	e014      	b.n	8002462 <_Z8hwGpsOutv+0x276>

	case 9:
		HAL_UART_Transmit_DMA(&huart5, commandUart9, sizeof(commandUart9) - 1);
 8002438:	220d      	movs	r2, #13
 800243a:	491c      	ldr	r1, [pc, #112]	@ (80024ac <_Z8hwGpsOutv+0x2c0>)
 800243c:	480d      	ldr	r0, [pc, #52]	@ (8002474 <_Z8hwGpsOutv+0x288>)
 800243e:	f009 fd55 	bl	800beec <HAL_UART_Transmit_DMA>
		stateConfigGps	= 10;
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 8002444:	220a      	movs	r2, #10
 8002446:	701a      	strb	r2, [r3, #0]
		break;
 8002448:	e00b      	b.n	8002462 <_Z8hwGpsOutv+0x276>
	case 10:
		if ( enableGps ){
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <_Z8hwGpsOutv+0x2a0>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <_Z8hwGpsOutv+0x26e>
			stateConfigGps	= 10;
 8002452:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 8002454:	220a      	movs	r2, #10
 8002456:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 8002458:	e002      	b.n	8002460 <_Z8hwGpsOutv+0x274>
			stateConfigGps	= 0;
 800245a:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <_Z8hwGpsOutv+0x2ac>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
		break;
 8002460:	bf00      	nop
	}
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200005f9 	.word	0x200005f9
 800246c:	200005e8 	.word	0x200005e8
 8002470:	20000be8 	.word	0x20000be8
 8002474:	20000948 	.word	0x20000948
 8002478:	200005fa 	.word	0x200005fa
 800247c:	200005fc 	.word	0x200005fc
 8002480:	200005f0 	.word	0x200005f0
 8002484:	200005ee 	.word	0x200005ee
 8002488:	48000c00 	.word	0x48000c00
 800248c:	20000390 	.word	0x20000390
 8002490:	200005ea 	.word	0x200005ea
 8002494:	200005ec 	.word	0x200005ec
 8002498:	200005ef 	.word	0x200005ef
 800249c:	20000028 	.word	0x20000028
 80024a0:	20000060 	.word	0x20000060
 80024a4:	20000044 	.word	0x20000044
 80024a8:	2000007c 	.word	0x2000007c
 80024ac:	20000090 	.word	0x20000090

080024b0 <_Z9hwLoraOutv>:

//////////
// LORA //
//////////

void hwLoraOut(){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	 *
	 * Transmite un comando por hardware
	 *
	 */

	if ( flagTxLora ){													// Si hay una señal de transmision
 80024b4:	4b33      	ldr	r3, [pc, #204]	@ (8002584 <_Z9hwLoraOutv+0xd4>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <_Z9hwLoraOutv+0x32>
		flagTxLora	= 0;												// Reinicia señal
 80024bc:	4b31      	ldr	r3, [pc, #196]	@ (8002584 <_Z9hwLoraOutv+0xd4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, loraTxCommand0, sizeTxCommand0);	// Transmite por DMA para no estancar procesamiento
 80024c2:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <_Z9hwLoraOutv+0xd8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a31      	ldr	r2, [pc, #196]	@ (800258c <_Z9hwLoraOutv+0xdc>)
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	4830      	ldr	r0, [pc, #192]	@ (8002590 <_Z9hwLoraOutv+0xe0>)
 80024ce:	f009 fd0d 	bl	800beec <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));			// Inicia recepcion por DMA
 80024d2:	2201      	movs	r2, #1
 80024d4:	492f      	ldr	r1, [pc, #188]	@ (8002594 <_Z9hwLoraOutv+0xe4>)
 80024d6:	482e      	ldr	r0, [pc, #184]	@ (8002590 <_Z9hwLoraOutv+0xe0>)
 80024d8:	f009 fd84 	bl	800bfe4 <HAL_UART_Receive_DMA>
		flagUartGps	= 1;
 80024dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <_Z9hwLoraOutv+0xe8>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
	 * S0: Espera 500ms, indica que esta deshabilitado
	 * S1: Indica que esta deshabiltiado, espera señal de RESET
	 *
	 */

	switch ( stateResetHwLora ){
 80024e2:	4b2e      	ldr	r3, [pc, #184]	@ (800259c <_Z9hwLoraOutv+0xec>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <_Z9hwLoraOutv+0x40>
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d020      	beq.n	8002530 <_Z9hwLoraOutv+0x80>
 80024ee:	e042      	b.n	8002576 <_Z9hwLoraOutv+0xc6>
	// S0 - DISABLE //
	//////////////////

	case 0:

		countResetHwLora++;										// Suma 1 al contador
 80024f0:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <_Z9hwLoraOutv+0xf0>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <_Z9hwLoraOutv+0xf0>)
 80024fa:	801a      	strh	r2, [r3, #0]
		flagEnableHwLora	= 0;								// Indica que el chip esta deshabilitado
 80024fc:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <_Z9hwLoraOutv+0xf4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	// Pin en RESET
 8002502:	2200      	movs	r2, #0
 8002504:	2104      	movs	r1, #4
 8002506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800250a:	f005 f8dd 	bl	80076c8 <HAL_GPIO_WritePin>

		if ( countResetHwLora >= resetHwLora ){					// Si pasa el limite de reset
 800250e:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <_Z9hwLoraOutv+0xf0>)
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <_Z9hwLoraOutv+0xf8>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d306      	bcc.n	8002528 <_Z9hwLoraOutv+0x78>
			countResetHwLora	= 0;							// Reinicia contador
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <_Z9hwLoraOutv+0xf0>)
 800251c:	2200      	movs	r2, #0
 800251e:	801a      	strh	r2, [r3, #0]
			stateResetHwLora	= 1;							// Pasa a S1
 8002520:	4b1e      	ldr	r3, [pc, #120]	@ (800259c <_Z9hwLoraOutv+0xec>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateResetHwLora	= 0;							// Espera en S0
		}
		break;
 8002526:	e02a      	b.n	800257e <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 0;							// Espera en S0
 8002528:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <_Z9hwLoraOutv+0xec>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
		break;
 800252e:	e026      	b.n	800257e <_Z9hwLoraOutv+0xce>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);	// Pin en SET
 8002530:	2201      	movs	r2, #1
 8002532:	2104      	movs	r1, #4
 8002534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002538:	f005 f8c6 	bl	80076c8 <HAL_GPIO_WritePin>
		flagEnableHwLora	= 1;							// Indica que el chip esta habilitado
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <_Z9hwLoraOutv+0xf4>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]

		if ( flagResetHwLora ){								// Si se da la señal de reinicio
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <_Z9hwLoraOutv+0xfc>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d011      	beq.n	800256e <_Z9hwLoraOutv+0xbe>
			flagResetHwLora		= 0;						// Apaga señal
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <_Z9hwLoraOutv+0xfc>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 8002550:	2201      	movs	r2, #1
 8002552:	4910      	ldr	r1, [pc, #64]	@ (8002594 <_Z9hwLoraOutv+0xe4>)
 8002554:	480e      	ldr	r0, [pc, #56]	@ (8002590 <_Z9hwLoraOutv+0xe0>)
 8002556:	f009 fd45 	bl	800bfe4 <HAL_UART_Receive_DMA>
			countResetHwLora2++;
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <_Z9hwLoraOutv+0x100>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <_Z9hwLoraOutv+0x100>)
 8002564:	701a      	strb	r2, [r3, #0]
			stateResetHwLora	= 0;						// Pasa  S0
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <_Z9hwLoraOutv+0xec>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateResetHwLora	= 1;						// Espera en S1
		}
		break;
 800256c:	e007      	b.n	800257e <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 1;						// Espera en S1
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <_Z9hwLoraOutv+0xec>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
		break;
 8002574:	e003      	b.n	800257e <_Z9hwLoraOutv+0xce>

	default:
		stateResetHwLora	= 0;
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <_Z9hwLoraOutv+0xec>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
		break;
 800257c:	bf00      	nop

	}
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200005f1 	.word	0x200005f1
 8002588:	20001278 	.word	0x20001278
 800258c:	2000127c 	.word	0x2000127c
 8002590:	200008c0 	.word	0x200008c0
 8002594:	20000bf8 	.word	0x20000bf8
 8002598:	200005f0 	.word	0x200005f0
 800259c:	200005f2 	.word	0x200005f2
 80025a0:	200005f4 	.word	0x200005f4
 80025a4:	200005f3 	.word	0x200005f3
 80025a8:	200005f6 	.word	0x200005f6
 80025ac:	20000645 	.word	0x20000645
 80025b0:	200005f8 	.word	0x200005f8

080025b4 <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d12c      	bne.n	800261e <_Z41__static_initialization_and_destruction_0ii+0x6a>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d127      	bne.n	800261e <_Z41__static_initialization_and_destruction_0ii+0x6a>
uint16_t limitGpsAvailable	= 5000/superloop;
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80025d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80025e0:	801a      	strh	r2, [r3, #0]
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80025ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80025f4:	801a      	strh	r2, [r3, #0]
uint16_t limitUartGps	= 20000/superloop;	//
 80025f6:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002600:	fb93 f3f2 	sdiv	r3, r3, r2
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002608:	801a      	strh	r2, [r3, #0]
uint16_t limitLed	= 500/superloop;	//
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002614:	fb93 f3f2 	sdiv	r3, r3, r2
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b08      	ldr	r3, [pc, #32]	@ (800263c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800261c:	801a      	strh	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000433 	.word	0x20000433
 8002630:	200005ec 	.word	0x200005ec
 8002634:	200005f6 	.word	0x200005f6
 8002638:	200005fc 	.word	0x200005fc
 800263c:	20000602 	.word	0x20000602

08002640 <_GLOBAL__sub_I_availableGps>:
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
 8002644:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002648:	2001      	movs	r0, #1
 800264a:	f7ff ffb3 	bl	80025b4 <_Z41__static_initialization_and_destruction_0ii>
 800264e:	bd80      	pop	{r7, pc}

08002650 <_Z9linkInputv>:
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
uint16_t countBat;						// Contador bateria

/***** INPUT *****/

void linkInput(){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	linkInGps();
 8002654:	f000 f94c 	bl	80028f0 <_Z9linkInGpsv>
	linkInLora();
 8002658:	f000 f8cc 	bl	80027f4 <_Z10linkInLorav>
	linkBoton();
 800265c:	f000 fb6a 	bl	8002d34 <_Z9linkBotonv>
	linkAnalog();
 8002660:	f000 fbce 	bl	8002e00 <_Z10linkAnalogv>
	linkBattery();
 8002664:	f000 f802 	bl	800266c <_Z11linkBatteryv>
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <_Z11linkBatteryv>:
 * Output:
 * 		errorHardware[6]
 *
 */

void linkBattery(){
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

	batScaled = battery *510/10000;		// Escalamiento de bateria
 8002670:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <_Z11linkBatteryv+0x168>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4613      	mov	r3, r2
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4a56      	ldr	r2, [pc, #344]	@ (80027d8 <_Z11linkBatteryv+0x16c>)
 8002680:	fb82 1203 	smull	r1, r2, r2, r3
 8002684:	1312      	asrs	r2, r2, #12
 8002686:	17db      	asrs	r3, r3, #31
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	4a54      	ldr	r2, [pc, #336]	@ (80027dc <_Z11linkBatteryv+0x170>)
 800268c:	6013      	str	r3, [r2, #0]

	switch ( stateBattery ){
 800268e:	4b54      	ldr	r3, [pc, #336]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b04      	cmp	r3, #4
 8002694:	f200 8095 	bhi.w	80027c2 <_Z11linkBatteryv+0x156>
 8002698:	a201      	add	r2, pc, #4	@ (adr r2, 80026a0 <_Z11linkBatteryv+0x34>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026b5 	.word	0x080026b5
 80026a4:	080026e3 	.word	0x080026e3
 80026a8:	08002705 	.word	0x08002705
 80026ac:	08002753 	.word	0x08002753
 80026b0:	08002775 	.word	0x08002775
	//////////////////////////
	// S0 -  WAIT STABILITY //
	//////////////////////////

	case 0:
		countBat++;						// Suma 1 al contador
 80026b4:	4b4b      	ldr	r3, [pc, #300]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b49      	ldr	r3, [pc, #292]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 80026be:	801a      	strh	r2, [r3, #0]

		if ( countBat >= limitBat ){	// Si pasa limite
 80026c0:	4b48      	ldr	r3, [pc, #288]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 80026c2:	881a      	ldrh	r2, [r3, #0]
 80026c4:	4b48      	ldr	r3, [pc, #288]	@ (80027e8 <_Z11linkBatteryv+0x17c>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d306      	bcc.n	80026da <_Z11linkBatteryv+0x6e>
			countBat		= 0;		// Reinicia contador
 80026cc:	4b45      	ldr	r3, [pc, #276]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;		// Pasa a S1
 80026d2:	4b43      	ldr	r3, [pc, #268]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateBattery	= 0;		// Queda en S0
		}
		break;
 80026d8:	e077      	b.n	80027ca <_Z11linkBatteryv+0x15e>
			stateBattery	= 0;		// Queda en S0
 80026da:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
		break;
 80026e0:	e073      	b.n	80027ca <_Z11linkBatteryv+0x15e>
	////////////////////////
	// S1 - CHECK BATTERY //
	////////////////////////

	case 1:
		errorHardware[6]	= 0;			// Sin error
 80026e2:	4b42      	ldr	r3, [pc, #264]	@ (80027ec <_Z11linkBatteryv+0x180>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria baja del limite
 80026e8:	4b3c      	ldr	r3, [pc, #240]	@ (80027dc <_Z11linkBatteryv+0x170>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b40      	ldr	r3, [pc, #256]	@ (80027f0 <_Z11linkBatteryv+0x184>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	da03      	bge.n	80026fc <_Z11linkBatteryv+0x90>
			stateBattery	= 2;			// Pasa a S2
 80026f4:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 1;			// Queda en S1
		}
		break;
 80026fa:	e066      	b.n	80027ca <_Z11linkBatteryv+0x15e>
			stateBattery	= 1;			// Queda en S1
 80026fc:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
		break;
 8002702:	e062      	b.n	80027ca <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S2 - CHECK STABILITY //
	//////////////////////////

	case 2:
		errorHardware[6]	= 0;			// Sin error
 8002704:	4b39      	ldr	r3, [pc, #228]	@ (80027ec <_Z11linkBatteryv+0x180>)
 8002706:	2200      	movs	r2, #0
 8002708:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 800270a:	4b36      	ldr	r3, [pc, #216]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 8002714:	801a      	strh	r2, [r3, #0]

		if ( batScaled > thresholdBat ){	// Si la bateria esta Ok
 8002716:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <_Z11linkBatteryv+0x170>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b35      	ldr	r3, [pc, #212]	@ (80027f0 <_Z11linkBatteryv+0x184>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	dd06      	ble.n	8002730 <_Z11linkBatteryv+0xc4>
			countBat		= 0;			// Reinicia contador
 8002722:	4b30      	ldr	r3, [pc, #192]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 8002724:	2200      	movs	r2, #0
 8002726:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Vuelve a S1
 8002728:	4b2d      	ldr	r3, [pc, #180]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 2;			// Queda en S2
		}
		break;
 800272e:	e04c      	b.n	80027ca <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si el contador pasa limite
 8002730:	4b2c      	ldr	r3, [pc, #176]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 8002732:	881a      	ldrh	r2, [r3, #0]
 8002734:	4b2c      	ldr	r3, [pc, #176]	@ (80027e8 <_Z11linkBatteryv+0x17c>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d306      	bcc.n	800274a <_Z11linkBatteryv+0xde>
			countBat		= 0;			// Reinicia contador
 800273c:	4b29      	ldr	r3, [pc, #164]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 800273e:	2200      	movs	r2, #0
 8002740:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
 8002742:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 8002744:	2203      	movs	r2, #3
 8002746:	701a      	strb	r2, [r3, #0]
		break;
 8002748:	e03f      	b.n	80027ca <_Z11linkBatteryv+0x15e>
			stateBattery	= 2;			// Queda en S2
 800274a:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]
		break;
 8002750:	e03b      	b.n	80027ca <_Z11linkBatteryv+0x15e>
	///////////////////////////////////
	// S3 - CHECK BATTERY WITH ERROR //
	///////////////////////////////////

	case 3:
		errorHardware[6]	= 1;			// Indica error
 8002752:	4b26      	ldr	r3, [pc, #152]	@ (80027ec <_Z11linkBatteryv+0x180>)
 8002754:	2201      	movs	r2, #1
 8002756:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria esta baja
 8002758:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <_Z11linkBatteryv+0x170>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <_Z11linkBatteryv+0x184>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	da03      	bge.n	800276c <_Z11linkBatteryv+0x100>
			stateBattery	= 3;			// Sigue en S3
 8002764:	4b1e      	ldr	r3, [pc, #120]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 8002766:	2203      	movs	r2, #3
 8002768:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 4;			// Pasa a S4
		}
		break;
 800276a:	e02e      	b.n	80027ca <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Pasa a S4
 800276c:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 800276e:	2204      	movs	r2, #4
 8002770:	701a      	strb	r2, [r3, #0]
		break;
 8002772:	e02a      	b.n	80027ca <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S4 - CHECK STABILITY //
	//////////////////////////

	case 4:
		errorHardware[6]	= 1;			// Indica error
 8002774:	4b1d      	ldr	r3, [pc, #116]	@ (80027ec <_Z11linkBatteryv+0x180>)
 8002776:	2201      	movs	r2, #1
 8002778:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 8002784:	801a      	strh	r2, [r3, #0]

		if ( batScaled < thresholdBat ){	// Si la bateria sigue baja
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <_Z11linkBatteryv+0x170>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <_Z11linkBatteryv+0x184>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	da06      	bge.n	80027a0 <_Z11linkBatteryv+0x134>
			countBat		= 0;			// Reinicia contador
 8002792:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 8002794:	2200      	movs	r2, #0
 8002796:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Vuelve a S3
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 800279a:	2203      	movs	r2, #3
 800279c:	701a      	strb	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 4;			// Queda en S4
		}
		break;
 800279e:	e014      	b.n	80027ca <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si contador pasa limite
 80027a0:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 80027a2:	881a      	ldrh	r2, [r3, #0]
 80027a4:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <_Z11linkBatteryv+0x17c>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d306      	bcc.n	80027ba <_Z11linkBatteryv+0x14e>
			countBat		= 0;			// Reinicia contador
 80027ac:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <_Z11linkBatteryv+0x178>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
		break;
 80027b8:	e007      	b.n	80027ca <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Queda en S4
 80027ba:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 80027bc:	2204      	movs	r2, #4
 80027be:	701a      	strb	r2, [r3, #0]
		break;
 80027c0:	e003      	b.n	80027ca <_Z11linkBatteryv+0x15e>

	default:
		stateBattery	= 0;
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <_Z11linkBatteryv+0x174>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
		break;
 80027c8:	bf00      	nop
	}
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	20000550 	.word	0x20000550
 80027d8:	68db8bad 	.word	0x68db8bad
 80027dc:	2000063c 	.word	0x2000063c
 80027e0:	2000063a 	.word	0x2000063a
 80027e4:	20000642 	.word	0x20000642
 80027e8:	20000640 	.word	0x20000640
 80027ec:	200005e0 	.word	0x200005e0
 80027f0:	200000a0 	.word	0x200000a0

080027f4 <_Z10linkInLorav>:
 *				INPUT	:	flagEnableHwLora
 *
 *				OUTPUT	:	flagWdLora
 */

void linkInLora(){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( loraInput.newResponse() ){						// Si hay nueva respuesta desde el modulo lora
 80027f8:	4833      	ldr	r0, [pc, #204]	@ (80028c8 <_Z10linkInLorav+0xd4>)
 80027fa:	f000 fece 	bl	800359a <_ZN9loraInput11newResponseEv>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <_Z10linkInLorav+0x52>
		responseLora	 = loraInput.response();		// Guarda la respuesta
 8002804:	4830      	ldr	r0, [pc, #192]	@ (80028c8 <_Z10linkInLorav+0xd4>)
 8002806:	f000 fedb 	bl	80035c0 <_ZN9loraInput8responseEv>
 800280a:	4603      	mov	r3, r0
 800280c:	4a2f      	ldr	r2, [pc, #188]	@ (80028cc <_Z10linkInLorav+0xd8>)
 800280e:	6013      	str	r3, [r2, #0]
		responseLoraSize = loraInput.responseSize();	// Guarda tamaño de la respuesta
 8002810:	482d      	ldr	r0, [pc, #180]	@ (80028c8 <_Z10linkInLorav+0xd4>)
 8002812:	f000 fee1 	bl	80035d8 <_ZN9loraInput12responseSizeEv>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <_Z10linkInLorav+0xdc>)
 800281c:	701a      	strb	r2, [r3, #0]

		loraCheck.newResponse(responseLora, responseLoraSize);	// Inserta respuesta en modulo de checkeo de respuesta
 800281e:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <_Z10linkInLorav+0xd8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <_Z10linkInLorav+0xdc>)
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	482a      	ldr	r0, [pc, #168]	@ (80028d4 <_Z10linkInLorav+0xe0>)
 800282a:	f000 fe0c 	bl	8003446 <_ZN9loraCheck11newResponseEPhh>
		loraTimeWd.setInput();									// Indica al watchdog que llego mensaje
 800282e:	482a      	ldr	r0, [pc, #168]	@ (80028d8 <_Z10linkInLorav+0xe4>)
 8002830:	f000 fdc2 	bl	80033b8 <_ZN9wdTimeout8setInputEv>
		qttyMessagesInputs++;									// Contador de respuestas recibidas
 8002834:	4b29      	ldr	r3, [pc, #164]	@ (80028dc <_Z10linkInLorav+0xe8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b27      	ldr	r3, [pc, #156]	@ (80028dc <_Z10linkInLorav+0xe8>)
 800283e:	701a      	strb	r2, [r3, #0]
		flagUartGps	= 1;
 8002840:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <_Z10linkInLorav+0xec>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]

	//////////////
	// WATCHDOG //
	//////////////

	switch ( stateWdLora ){
 8002846:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <_Z10linkInLorav+0xf0>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d031      	beq.n	80028b2 <_Z10linkInLorav+0xbe>
 800284e:	2b02      	cmp	r3, #2
 8002850:	dc36      	bgt.n	80028c0 <_Z10linkInLorav+0xcc>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <_Z10linkInLorav+0x68>
 8002856:	2b01      	cmp	r3, #1
 8002858:	d012      	beq.n	8002880 <_Z10linkInLorav+0x8c>
		flagWdLora	= 1;			// Reinicia chip por hw
		stateWdLora	= 0;			// Vuelve a S0
		break;

	default:
		break;
 800285a:	e031      	b.n	80028c0 <_Z10linkInLorav+0xcc>
		flagWdLora	= 0;			// Reinicia indicador de reset
 800285c:	4b22      	ldr	r3, [pc, #136]	@ (80028e8 <_Z10linkInLorav+0xf4>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		if ( flagEnableHwLora ){	// Si el chip esta habilitado
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <_Z10linkInLorav+0xf8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <_Z10linkInLorav+0x84>
			loraTimeWd.setOutput();	// Indica que salio un mensaje
 800286a:	481b      	ldr	r0, [pc, #108]	@ (80028d8 <_Z10linkInLorav+0xe4>)
 800286c:	f000 fd74 	bl	8003358 <_ZN9wdTimeout9setOutputEv>
			stateWdLora = 1;		// Pasa a S1
 8002870:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <_Z10linkInLorav+0xf0>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
		break;
 8002876:	e024      	b.n	80028c2 <_Z10linkInLorav+0xce>
			stateWdLora = 0;		// Espera en S0
 8002878:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <_Z10linkInLorav+0xf0>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
		break;
 800287e:	e020      	b.n	80028c2 <_Z10linkInLorav+0xce>
		loraTimeWd.addOne();			// Suma 1 al wd
 8002880:	4815      	ldr	r0, [pc, #84]	@ (80028d8 <_Z10linkInLorav+0xe4>)
 8002882:	f000 fd79 	bl	8003378 <_ZN9wdTimeout6addOneEv>
		if ( loraTimeWd.timeOut() ){	// Si se cumple timeout
 8002886:	4814      	ldr	r0, [pc, #80]	@ (80028d8 <_Z10linkInLorav+0xe4>)
 8002888:	f000 fdaa 	bl	80033e0 <_ZN9wdTimeout7timeOutEv>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <_Z10linkInLorav+0xa6>
			stateWdLora = 2;			// Pasa a S2
 8002892:	4b14      	ldr	r3, [pc, #80]	@ (80028e4 <_Z10linkInLorav+0xf0>)
 8002894:	2202      	movs	r2, #2
 8002896:	701a      	strb	r2, [r3, #0]
		break;
 8002898:	e013      	b.n	80028c2 <_Z10linkInLorav+0xce>
		else if ( flagEnableHwLora ){	// Si sigue habilitado por hw
 800289a:	4b14      	ldr	r3, [pc, #80]	@ (80028ec <_Z10linkInLorav+0xf8>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <_Z10linkInLorav+0xb6>
			stateWdLora = 1;			// Espera en S1
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <_Z10linkInLorav+0xf0>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
		break;
 80028a8:	e00b      	b.n	80028c2 <_Z10linkInLorav+0xce>
			stateWdLora	= 0;			// Pasa a S0
 80028aa:	4b0e      	ldr	r3, [pc, #56]	@ (80028e4 <_Z10linkInLorav+0xf0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
		break;
 80028b0:	e007      	b.n	80028c2 <_Z10linkInLorav+0xce>
		flagWdLora	= 1;			// Reinicia chip por hw
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <_Z10linkInLorav+0xf4>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
		stateWdLora	= 0;			// Vuelve a S0
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <_Z10linkInLorav+0xf0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
		break;
 80028be:	e000      	b.n	80028c2 <_Z10linkInLorav+0xce>
		break;
 80028c0:	bf00      	nop
	}
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000c3c 	.word	0x20000c3c
 80028cc:	20000618 	.word	0x20000618
 80028d0:	2000061c 	.word	0x2000061c
 80028d4:	20000c7c 	.word	0x20000c7c
 80028d8:	20001190 	.word	0x20001190
 80028dc:	2000061d 	.word	0x2000061d
 80028e0:	200005f0 	.word	0x200005f0
 80028e4:	2000061e 	.word	0x2000061e
 80028e8:	20000644 	.word	0x20000644
 80028ec:	200005f3 	.word	0x200005f3

080028f0 <_Z9linkInGpsv>:
 *				stopGps		|	Indicador detener GPS
 *				warning[]	|	Indica que no hay gps validos
 *
 */

void linkInGps(){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0

	switch ( stateGpsLink ){
 80028f4:	4b45      	ldr	r3, [pc, #276]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	f200 8204 	bhi.w	8002d06 <_Z9linkInGpsv+0x416>
 80028fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002904 <_Z9linkInGpsv+0x14>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	0800291d 	.word	0x0800291d
 8002908:	0800293b 	.word	0x0800293b
 800290c:	0800299f 	.word	0x0800299f
 8002910:	080029c5 	.word	0x080029c5
 8002914:	080029e9 	.word	0x080029e9
 8002918:	08002a39 	.word	0x08002a39
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		if ( startGps ){			// Si se inicia GPS
 800291c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a10 <_Z9linkInGpsv+0x120>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <_Z9linkInGpsv+0x42>
			startGps		= 0;	// Reinicia indicador
 8002924:	4b3a      	ldr	r3, [pc, #232]	@ (8002a10 <_Z9linkInGpsv+0x120>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 1;	// Pasa a S1
 800292a:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateGpsLink	= 0;	// Espera en S0
		}
		break;
 8002930:	e1e9      	b.n	8002d06 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 0;	// Espera en S0
 8002932:	4b36      	ldr	r3, [pc, #216]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
		break;
 8002938:	e1e5      	b.n	8002d06 <_Z9linkInGpsv+0x416>
	///////////////////////////
	// S1 - WAIT FOR MESSAGE //
	///////////////////////////

	case 1:
		countGpsLink++;								// Suma 1 al contador
 800293a:	4b36      	ldr	r3, [pc, #216]	@ (8002a14 <_Z9linkInGpsv+0x124>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3301      	adds	r3, #1
 8002940:	4a34      	ldr	r2, [pc, #208]	@ (8002a14 <_Z9linkInGpsv+0x124>)
 8002942:	6013      	str	r3, [r2, #0]
		gpsNewMessage	= 0;						// Reinicia flag nuevo mensaje
 8002944:	4b34      	ldr	r3, [pc, #208]	@ (8002a18 <_Z9linkInGpsv+0x128>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]

		if ( gpsInput.getNewMessage() ){			// Si llega nuevo mensaje
 800294a:	4834      	ldr	r0, [pc, #208]	@ (8002a1c <_Z9linkInGpsv+0x12c>)
 800294c:	f7fe fe67 	bl	800161e <_ZN8gpsInput13getNewMessageEv>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <_Z9linkInGpsv+0x7a>
			gpsNewMessage	= 1;					// Marca flag de nuevo mensaje
 8002956:	4b30      	ldr	r3, [pc, #192]	@ (8002a18 <_Z9linkInGpsv+0x128>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
			gpsValid		= gpsInput.getValid();	// Copia mensaje valido
 800295c:	482f      	ldr	r0, [pc, #188]	@ (8002a1c <_Z9linkInGpsv+0x12c>)
 800295e:	f7fe fe48 	bl	80015f2 <_ZN8gpsInput8getValidEv>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <_Z9linkInGpsv+0x130>)
 8002968:	701a      	strb	r2, [r3, #0]
		}

		if ( countGpsLink >= limitGpsLink ){		// Si pasa limite de 5 min
 800296a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <_Z9linkInGpsv+0x124>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <_Z9linkInGpsv+0x134>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	db03      	blt.n	800297e <_Z9linkInGpsv+0x8e>
			stateGpsLink	= 2;					// Cierra en S2
 8002976:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 8002978:	2202      	movs	r2, #2
 800297a:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 4;					// Pasa a S4
		}*/
		else{										// Si no
			stateGpsLink	= 1;					// Espera
		}
		break;
 800297c:	e1c3      	b.n	8002d06 <_Z9linkInGpsv+0x416>
		else if ( gpsNewMessage && gpsValid ){		// Si llega mensaje valido
 800297e:	4b26      	ldr	r3, [pc, #152]	@ (8002a18 <_Z9linkInGpsv+0x128>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <_Z9linkInGpsv+0xa6>
 8002986:	4b26      	ldr	r3, [pc, #152]	@ (8002a20 <_Z9linkInGpsv+0x130>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <_Z9linkInGpsv+0xa6>
			stateGpsLink	= 3;					// Pasa a S3
 800298e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 8002990:	2203      	movs	r2, #3
 8002992:	701a      	strb	r2, [r3, #0]
		break;
 8002994:	e1b7      	b.n	8002d06 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;					// Espera
 8002996:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
		break;
 800299c:	e1b3      	b.n	8002d06 <_Z9linkInGpsv+0x416>
	///////////////////////
	// S2 - STOP MEASURE //
	///////////////////////

	case 2:
		savedGps			= 0;	//  Reinicia indicador coordenadas guardadas
 800299e:	4b22      	ldr	r3, [pc, #136]	@ (8002a28 <_Z9linkInGpsv+0x138>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
		countValidMsgGps	= 0;	//	Reinicia contador mensajes validos
 80029a4:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <_Z9linkInGpsv+0x13c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
		countInvalidMsgGps	= 0;	//	Reinicia contador mensajes invalidos
 80029aa:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <_Z9linkInGpsv+0x140>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
		countGpsLink		= 0;	//	Reinicia contador de espera mensajes gps
 80029b0:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <_Z9linkInGpsv+0x124>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
		stopGps				= 1;	//	Fija apagado de GPS
 80029b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a34 <_Z9linkInGpsv+0x144>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
		stateGpsLink		= 0;	//	Vuelve a S0
 80029bc:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
		break;
 80029c2:	e1a0      	b.n	8002d06 <_Z9linkInGpsv+0x416>
	////////////////////////////
	// S3 - NEW VALID MESSAGE //
	////////////////////////////

	case 3:
		countValidMsgGps++;				// Suma 1 a mensaje valids nuevos
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <_Z9linkInGpsv+0x13c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <_Z9linkInGpsv+0x13c>)
 80029ce:	701a      	strb	r2, [r3, #0]

		if ( countValidMsgGps >= 4 ){	// Si es mayor a 10 mensajes
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <_Z9linkInGpsv+0x13c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d903      	bls.n	80029e0 <_Z9linkInGpsv+0xf0>
			stateGpsLink	= 5;		// Pasa a S5
 80029d8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 80029da:	2205      	movs	r2, #5
 80029dc:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateGpsLink	= 1;		// Vuelve a S5
		}
		break;
 80029de:	e192      	b.n	8002d06 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;		// Vuelve a S5
 80029e0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
		break;
 80029e6:	e18e      	b.n	8002d06 <_Z9linkInGpsv+0x416>
	//////////////////////////////
	// S4 - NEW INVALID MESSAGE //
	//////////////////////////////

	case 4:
		countInvalidMsgGps++;				// Suma 1 a mensaje invalido nuevos
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <_Z9linkInGpsv+0x140>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	3301      	adds	r3, #1
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <_Z9linkInGpsv+0x140>)
 80029f2:	701a      	strb	r2, [r3, #0]

		if ( countInvalidMsgGps >= 30 ){	// Si es mayor a 10 mensajes
 80029f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <_Z9linkInGpsv+0x140>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b1d      	cmp	r3, #29
 80029fa:	d903      	bls.n	8002a04 <_Z9linkInGpsv+0x114>
			stateGpsLink	= 2;			// Pasa a S2
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 80029fe:	2202      	movs	r2, #2
 8002a00:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateGpsLink	= 1;			// Pasa a S1
		}
		break;
 8002a02:	e180      	b.n	8002d06 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;			// Pasa a S1
 8002a04:	4b01      	ldr	r3, [pc, #4]	@ (8002a0c <_Z9linkInGpsv+0x11c>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
		break;
 8002a0a:	e17c      	b.n	8002d06 <_Z9linkInGpsv+0x416>
 8002a0c:	20000609 	.word	0x20000609
 8002a10:	2000038f 	.word	0x2000038f
 8002a14:	2000060c 	.word	0x2000060c
 8002a18:	2000060a 	.word	0x2000060a
 8002a1c:	20000b50 	.word	0x20000b50
 8002a20:	20000bf4 	.word	0x20000bf4
 8002a24:	20000610 	.word	0x20000610
 8002a28:	20000bf6 	.word	0x20000bf6
 8002a2c:	20000614 	.word	0x20000614
 8002a30:	20000615 	.word	0x20000615
 8002a34:	20000bf5 	.word	0x20000bf5
	////////////////////////////////
	// S5 - SAVE LATITUD/LONGITUD //
	////////////////////////////////

	case 5:
		savedGps	= 1;										// Indica que se guardó valor correctamente
 8002a38:	4bb4      	ldr	r3, [pc, #720]	@ (8002d0c <_Z9linkInGpsv+0x41c>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]

		latitud =	(gpsInput.latitud[0] - '0')*1000;			// Guarda unidad de mil latitud
 8002a3e:	4bb4      	ldr	r3, [pc, #720]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a44:	3b30      	subs	r3, #48	@ 0x30
 8002a46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a56:	4baf      	ldr	r3, [pc, #700]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002a58:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[1] - '0')*100;			// Guarda centena de latitud
 8002a5c:	4bac      	ldr	r3, [pc, #688]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002a5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a62:	3b30      	subs	r3, #48	@ 0x30
 8002a64:	2264      	movs	r2, #100	@ 0x64
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a72:	4ba8      	ldr	r3, [pc, #672]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7c:	4ba5      	ldr	r3, [pc, #660]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002a7e:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[2] - '0')*10;				// Guarda decena de latitud
 8002a82:	4ba3      	ldr	r3, [pc, #652]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002a84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a88:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a9c:	4b9d      	ldr	r3, [pc, #628]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa6:	4b9b      	ldr	r3, [pc, #620]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002aa8:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[3] - '0')*1;				// Guarda unidad de latitud
 8002aac:	4b98      	ldr	r3, [pc, #608]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002aae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ab2:	3b30      	subs	r3, #48	@ 0x30
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002abc:	4b95      	ldr	r3, [pc, #596]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac6:	4b93      	ldr	r3, [pc, #588]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002ac8:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[5]) - '0')/10;		// Guarda decima de latitud
 8002acc:	4b90      	ldr	r3, [pc, #576]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002ace:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8002d18 <_Z9linkInGpsv+0x428>
 8002ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ae2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ae6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002aea:	4b8a      	ldr	r3, [pc, #552]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af4:	4b87      	ldr	r3, [pc, #540]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002af6:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[6]) - '0')/100;	// Guarda centecina de latitud
 8002afa:	4b85      	ldr	r3, [pc, #532]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002afc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b08:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002d18 <_Z9linkInGpsv+0x428>
 8002b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b10:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8002d1c <_Z9linkInGpsv+0x42c>
 8002b14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b18:	4b7e      	ldr	r3, [pc, #504]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b22:	4b7c      	ldr	r3, [pc, #496]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002b24:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[7]) - '0')/1000;	// Guarda milecima de latitud
 8002b28:	4b79      	ldr	r3, [pc, #484]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002b2a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b36:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002d18 <_Z9linkInGpsv+0x428>
 8002b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b3e:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002d20 <_Z9linkInGpsv+0x430>
 8002b42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b46:	4b73      	ldr	r3, [pc, #460]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	4b70      	ldr	r3, [pc, #448]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002b52:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[8]) - '0')/10000;	// Guarda decima de milecima de latitud
 8002b56:	4b6e      	ldr	r3, [pc, #440]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002b58:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b64:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002d18 <_Z9linkInGpsv+0x428>
 8002b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b6c:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002d24 <_Z9linkInGpsv+0x434>
 8002b70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b74:	4b67      	ldr	r3, [pc, #412]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7e:	4b65      	ldr	r3, [pc, #404]	@ (8002d14 <_Z9linkInGpsv+0x424>)
 8002b80:	edc3 7a00 	vstr	s15, [r3]

		longitud =	(gpsInput.longitud[0] - '0')*10000;			// Guarda decena de mil longitud
 8002b84:	4b62      	ldr	r3, [pc, #392]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002b86:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002b8a:	3b30      	subs	r3, #48	@ 0x30
 8002b8c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002b90:	fb02 f303 	mul.w	r3, r2, r3
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9c:	4b62      	ldr	r3, [pc, #392]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[1] - '0')*1000;			// Guarda unidad de mil longitud
 8002ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002ba4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002ba8:	3b30      	subs	r3, #48	@ 0x30
 8002baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bba:	4b5b      	ldr	r3, [pc, #364]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc4:	4b58      	ldr	r3, [pc, #352]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[2] - '0')*100;			// Guarda centecima de longitud
 8002bca:	4b51      	ldr	r3, [pc, #324]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002bcc:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002bd0:	3b30      	subs	r3, #48	@ 0x30
 8002bd2:	2264      	movs	r2, #100	@ 0x64
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be0:	4b51      	ldr	r3, [pc, #324]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bea:	4b4f      	ldr	r3, [pc, #316]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002bec:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[3] - '0')*10;			// Guarda decena de longitud
 8002bf0:	4b47      	ldr	r3, [pc, #284]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002bf2:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8002bf6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	4b44      	ldr	r3, [pc, #272]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002c16:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[4] - '0')*1;				// Guarda unidad de longitud
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c20:	3b30      	subs	r3, #48	@ 0x30
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c34:	4b3c      	ldr	r3, [pc, #240]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002c36:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[6]) - '0')/10;	// Guarda decima de longitud
 8002c3a:	4b35      	ldr	r3, [pc, #212]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002c3c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c48:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002d18 <_Z9linkInGpsv+0x428>
 8002c4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c50:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c58:	4b33      	ldr	r3, [pc, #204]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c62:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002c64:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[7]) - '0')/100;	// Guarda centecima de longitud
 8002c68:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002c6a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c76:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002d18 <_Z9linkInGpsv+0x428>
 8002c7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c7e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002d1c <_Z9linkInGpsv+0x42c>
 8002c82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c86:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002c92:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[8]) - '0')/1000;	// Guarda milesima de longitud
 8002c96:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002c98:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c9c:	ee07 3a90 	vmov	s15, r3
 8002ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002d18 <_Z9linkInGpsv+0x428>
 8002ca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cac:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002d20 <_Z9linkInGpsv+0x430>
 8002cb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002cc0:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[9]) - '0')/10000;	// Guarda decima de milesima de longitud
 8002cc4:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <_Z9linkInGpsv+0x420>)
 8002cc6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002d18 <_Z9linkInGpsv+0x428>
 8002cd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cda:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d24 <_Z9linkInGpsv+0x434>
 8002cde:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cec:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <_Z9linkInGpsv+0x438>)
 8002cee:	edc3 7a00 	vstr	s15, [r3]

		countSavedGps++;										// Contador de veces que se guardó un valor correctamente
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <_Z9linkInGpsv+0x43c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <_Z9linkInGpsv+0x43c>)
 8002cfc:	701a      	strb	r2, [r3, #0]
		stateGpsLink	= 2;									// Pasa a S2
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <_Z9linkInGpsv+0x440>)
 8002d00:	2202      	movs	r2, #2
 8002d02:	701a      	strb	r2, [r3, #0]
		break;
 8002d04:	bf00      	nop
	}

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000bf6 	.word	0x20000bf6
 8002d10:	20000b50 	.word	0x20000b50
 8002d14:	20000bec 	.word	0x20000bec
 8002d18:	42400000 	.word	0x42400000
 8002d1c:	42c80000 	.word	0x42c80000
 8002d20:	447a0000 	.word	0x447a0000
 8002d24:	461c4000 	.word	0x461c4000
 8002d28:	20000bf0 	.word	0x20000bf0
 8002d2c:	20000616 	.word	0x20000616
 8002d30:	20000609 	.word	0x20000609

08002d34 <_Z9linkBotonv>:
 *	INPUT	:	flagBoton
 *	OUTPUT	:	displayPhy.enable
 */


void linkBoton(){
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

	switch ( stateEnableDisplay ){
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <_Z9linkBotonv+0x74>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <_Z9linkBotonv+0x12>
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d013      	beq.n	8002d6c <_Z9linkBotonv+0x38>
 8002d44:	e029      	b.n	8002d9a <_Z9linkBotonv+0x66>
	//////////////////////
	// S0 - WAIT BUTTON //
	//////////////////////

	case 0:
		displayPhy.enable(0);			//	Inhabilita display
 8002d46:	2100      	movs	r1, #0
 8002d48:	4818      	ldr	r0, [pc, #96]	@ (8002dac <_Z9linkBotonv+0x78>)
 8002d4a:	f7fd fe0b 	bl	8000964 <_ZN15displayPhysical6enableEb>
		countEnableDisplay	= 0;		//	Reinicia contador
 8002d4e:	4b18      	ldr	r3, [pc, #96]	@ (8002db0 <_Z9linkBotonv+0x7c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

		if ( flagBoton ){				//	Si se presiona el boton
 8002d54:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <_Z9linkBotonv+0x80>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <_Z9linkBotonv+0x30>
			stateEnableDisplay	= 1;	//	Pasa a S1
 8002d5c:	4b12      	ldr	r3, [pc, #72]	@ (8002da8 <_Z9linkBotonv+0x74>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
		}
		else{							//	Si no
			stateEnableDisplay	= 0;	//	Espera en S0
		}
		break;
 8002d62:	e01e      	b.n	8002da2 <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 0;	//	Espera en S0
 8002d64:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <_Z9linkBotonv+0x74>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
		break;
 8002d6a:	e01a      	b.n	8002da2 <_Z9linkBotonv+0x6e>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		displayPhy.enable(1);							// Habilita display
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	480f      	ldr	r0, [pc, #60]	@ (8002dac <_Z9linkBotonv+0x78>)
 8002d70:	f7fd fdf8 	bl	8000964 <_ZN15displayPhysical6enableEb>

		countEnableDisplay++;							// Suma 1 al contador
 8002d74:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <_Z9linkBotonv+0x7c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <_Z9linkBotonv+0x7c>)
 8002d7c:	6013      	str	r3, [r2, #0]

		if ( countEnableDisplay > limitEnableDisplay ){	// Si llega al limite
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <_Z9linkBotonv+0x7c>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <_Z9linkBotonv+0x84>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	dd03      	ble.n	8002d92 <_Z9linkBotonv+0x5e>
			stateEnableDisplay	= 0;					// Vuelve a S0
 8002d8a:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <_Z9linkBotonv+0x74>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateEnableDisplay	= 1;					// Espera en S1
		}
		break;
 8002d90:	e007      	b.n	8002da2 <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 1;					// Espera en S1
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <_Z9linkBotonv+0x74>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
		break;
 8002d98:	e003      	b.n	8002da2 <_Z9linkBotonv+0x6e>

	default:
		stateEnableDisplay	= 0;
 8002d9a:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <_Z9linkBotonv+0x74>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
		break;
 8002da0:	bf00      	nop

	}
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000628 	.word	0x20000628
 8002dac:	2000119c 	.word	0x2000119c
 8002db0:	20000620 	.word	0x20000620
 8002db4:	20000b4c 	.word	0x20000b4c
 8002db8:	20000624 	.word	0x20000624

08002dbc <_Z7adc2PPMth>:
 *	MODE 2	:	ADC interno A1
 *	MODE 3	:	ADC externo B1
 *	MODE 4	:	ADC interno B1
 */

uint8_t adc2PPM( uint16_t signal, uint8_t mode){
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	80fb      	strh	r3, [r7, #6]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	717b      	strb	r3, [r7, #5]
	uint8_t result;

	result	= 1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]

	switch ( mode ){
 8002dd0:	797b      	ldrb	r3, [r7, #5]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d80b      	bhi.n	8002df0 <_Z7adc2PPMth+0x34>
 8002dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002de0 <_Z7adc2PPMth+0x24>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002df1 	.word	0x08002df1
 8002de8:	08002df1 	.word	0x08002df1
 8002dec:	08002df1 	.word	0x08002df1

	case 4:
		break;
	}

	return result;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop

08002e00 <_Z10linkAnalogv>:
 *				flagAlarm_PPM,
 *				flagAlarm_TEMP
 *				flagAlarm_HUM
 */

void linkAnalog(){
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0

	/////////////////
	// CALIBRATION //
	/////////////////

	switch ( stateCalibration ){
 8002e04:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb0 <_Z10linkAnalogv+0x1b0>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <_Z10linkAnalogv+0x12>
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d01d      	beq.n	8002e4c <_Z10linkAnalogv+0x4c>
 8002e10:	e018      	b.n	8002e44 <_Z10linkAnalogv+0x44>
	///////////////////////////////
	// S0 - WAIT FOR CALIBRATION //
	///////////////////////////////

	case 0:
		countCalibration++;								// Suma 1 al contador
 8002e12:	4b68      	ldr	r3, [pc, #416]	@ (8002fb4 <_Z10linkAnalogv+0x1b4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	4a66      	ldr	r2, [pc, #408]	@ (8002fb4 <_Z10linkAnalogv+0x1b4>)
 8002e1a:	6013      	str	r3, [r2, #0]
		enableSensors	= 0;							// Deshabilita sensores
 8002e1c:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <_Z10linkAnalogv+0x1b8>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]

		if ( countCalibration >= limitCalibration ){	// Si se cumple el tiempo de calibracion
 8002e22:	4b64      	ldr	r3, [pc, #400]	@ (8002fb4 <_Z10linkAnalogv+0x1b4>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b65      	ldr	r3, [pc, #404]	@ (8002fbc <_Z10linkAnalogv+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	db06      	blt.n	8002e3c <_Z10linkAnalogv+0x3c>
			enableSensors		= 1;					// Habilita sensores
 8002e2e:	4b62      	ldr	r3, [pc, #392]	@ (8002fb8 <_Z10linkAnalogv+0x1b8>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]
			stateCalibration	= 1;					// Pasa a S1
 8002e34:	4b5e      	ldr	r3, [pc, #376]	@ (8002fb0 <_Z10linkAnalogv+0x1b0>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateCalibration	= 0;					// Espera en S0
		}
		break;
 8002e3a:	e008      	b.n	8002e4e <_Z10linkAnalogv+0x4e>
			stateCalibration	= 0;					// Espera en S0
 8002e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb0 <_Z10linkAnalogv+0x1b0>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
		break;
 8002e42:	e004      	b.n	8002e4e <_Z10linkAnalogv+0x4e>
	////////////////////
	case 1:
		break;

	default:
		stateCalibration	= 0;
 8002e44:	4b5a      	ldr	r3, [pc, #360]	@ (8002fb0 <_Z10linkAnalogv+0x1b0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
		break;
 8002e4a:	e000      	b.n	8002e4e <_Z10linkAnalogv+0x4e>
		break;
 8002e4c:	bf00      	nop

	////////////
	// A1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habilitado el ADC
 8002e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc0 <_Z10linkAnalogv+0x1c0>)
 8002e50:	795b      	ldrb	r3, [r3, #5]
 8002e52:	f083 0301 	eor.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00f      	beq.n	8002e7c <_Z10linkAnalogv+0x7c>
		alpha_A1_PPM = adc2PPM(alphaA, 1) * enableSensors;			// Convierte en PPM
 8002e5c:	4b59      	ldr	r3, [pc, #356]	@ (8002fc4 <_Z10linkAnalogv+0x1c4>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ffaa 	bl	8002dbc <_Z7adc2PPMth>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <_Z10linkAnalogv+0x1b8>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	fb12 f303 	smulbb	r3, r2, r3
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b54      	ldr	r3, [pc, #336]	@ (8002fc8 <_Z10linkAnalogv+0x1c8>)
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e00e      	b.n	8002e9a <_Z10linkAnalogv+0x9a>
	}
	else{															// Si no esta habiltiado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 2) * enableSensors;	// Convierte en PPM
 8002e7c:	4b53      	ldr	r3, [pc, #332]	@ (8002fcc <_Z10linkAnalogv+0x1cc>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	2102      	movs	r1, #2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff9a 	bl	8002dbc <_Z7adc2PPMth>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb8 <_Z10linkAnalogv+0x1b8>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	fb12 f303 	smulbb	r3, r2, r3
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc8 <_Z10linkAnalogv+0x1c8>)
 8002e98:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors){		// Si pasa de 5 ppm
 8002e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc8 <_Z10linkAnalogv+0x1c8>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b32      	cmp	r3, #50	@ 0x32
 8002ea0:	d907      	bls.n	8002eb2 <_Z10linkAnalogv+0xb2>
 8002ea2:	4b45      	ldr	r3, [pc, #276]	@ (8002fb8 <_Z10linkAnalogv+0x1b8>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <_Z10linkAnalogv+0xb2>
		flagAlarm_PPM	= 1;						// Indica alarma
 8002eaa:	4b49      	ldr	r3, [pc, #292]	@ (8002fd0 <_Z10linkAnalogv+0x1d0>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e002      	b.n	8002eb8 <_Z10linkAnalogv+0xb8>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8002eb2:	4b47      	ldr	r3, [pc, #284]	@ (8002fd0 <_Z10linkAnalogv+0x1d0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]

	////////////
	// B1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habitado el ADC
 8002eb8:	4b41      	ldr	r3, [pc, #260]	@ (8002fc0 <_Z10linkAnalogv+0x1c0>)
 8002eba:	795b      	ldrb	r3, [r3, #5]
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00f      	beq.n	8002ee6 <_Z10linkAnalogv+0xe6>
		alpha_A1_PPM = adc2PPM(alphaA, 3) * enableSensors;			// Convierte en PPM
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc4 <_Z10linkAnalogv+0x1c4>)
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	2103      	movs	r1, #3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff75 	bl	8002dbc <_Z7adc2PPMth>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b38      	ldr	r3, [pc, #224]	@ (8002fb8 <_Z10linkAnalogv+0x1b8>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	fb12 f303 	smulbb	r3, r2, r3
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	4b39      	ldr	r3, [pc, #228]	@ (8002fc8 <_Z10linkAnalogv+0x1c8>)
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e00e      	b.n	8002f04 <_Z10linkAnalogv+0x104>
	}
	else{															// Si no esta habilitado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 4) * enableSensors;	// Convierte en PPM
 8002ee6:	4b39      	ldr	r3, [pc, #228]	@ (8002fcc <_Z10linkAnalogv+0x1cc>)
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	2104      	movs	r1, #4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff65 	bl	8002dbc <_Z7adc2PPMth>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b30      	ldr	r3, [pc, #192]	@ (8002fb8 <_Z10linkAnalogv+0x1b8>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	fb12 f303 	smulbb	r3, r2, r3
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	4b31      	ldr	r3, [pc, #196]	@ (8002fc8 <_Z10linkAnalogv+0x1c8>)
 8002f02:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors ){		// Si pasa de 5 ppm
 8002f04:	4b30      	ldr	r3, [pc, #192]	@ (8002fc8 <_Z10linkAnalogv+0x1c8>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b32      	cmp	r3, #50	@ 0x32
 8002f0a:	d907      	bls.n	8002f1c <_Z10linkAnalogv+0x11c>
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb8 <_Z10linkAnalogv+0x1b8>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <_Z10linkAnalogv+0x11c>
		flagAlarm_PPM	= 1;						// Indica alarma
 8002f14:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd0 <_Z10linkAnalogv+0x1d0>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e002      	b.n	8002f22 <_Z10linkAnalogv+0x122>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd0 <_Z10linkAnalogv+0x1d0>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]

	//////////////
	// TEMP HUM //
	///////////////

	if ( !errorHardware[1] ){			// Si hay sensor externo
 8002f22:	4b27      	ldr	r3, [pc, #156]	@ (8002fc0 <_Z10linkAnalogv+0x1c0>)
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	f083 0301 	eor.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <_Z10linkAnalogv+0x142>
		tempApp	= tempExtern;			// Copia temperatura
 8002f30:	4b28      	ldr	r3, [pc, #160]	@ (8002fd4 <_Z10linkAnalogv+0x1d4>)
 8002f32:	881a      	ldrh	r2, [r3, #0]
 8002f34:	4b28      	ldr	r3, [pc, #160]	@ (8002fd8 <_Z10linkAnalogv+0x1d8>)
 8002f36:	801a      	strh	r2, [r3, #0]
		humApp	= humExtern;			// Copia humedad
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <_Z10linkAnalogv+0x1dc>)
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <_Z10linkAnalogv+0x1e0>)
 8002f3e:	801a      	strh	r2, [r3, #0]
 8002f40:	e015      	b.n	8002f6e <_Z10linkAnalogv+0x16e>
	}
	else if ( !errorHardware[0] ){	// Si hay sensor interno
 8002f42:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <_Z10linkAnalogv+0x1c0>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	f083 0301 	eor.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <_Z10linkAnalogv+0x162>
		tempApp	= tempIntern;			// Copia temperatura
 8002f50:	4b24      	ldr	r3, [pc, #144]	@ (8002fe4 <_Z10linkAnalogv+0x1e4>)
 8002f52:	881a      	ldrh	r2, [r3, #0]
 8002f54:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <_Z10linkAnalogv+0x1d8>)
 8002f56:	801a      	strh	r2, [r3, #0]
		humApp	= humIntern;			// Copia humedad
 8002f58:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <_Z10linkAnalogv+0x1e8>)
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <_Z10linkAnalogv+0x1e0>)
 8002f5e:	801a      	strh	r2, [r3, #0]
 8002f60:	e005      	b.n	8002f6e <_Z10linkAnalogv+0x16e>
	}
	else{								// Si no hay ninguno de ambos sensores
		tempApp	= 0;					// Copia 0
 8002f62:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <_Z10linkAnalogv+0x1d8>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	801a      	strh	r2, [r3, #0]
		humApp	= 0;					// Copia 0
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <_Z10linkAnalogv+0x1e0>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	801a      	strh	r2, [r3, #0]

	////////////
	// ALARMS //
	////////////

	if ( tempApp > 60 || tempApp < 5 ){	// Si pasa limite de sensores
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <_Z10linkAnalogv+0x1d8>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f74:	d803      	bhi.n	8002f7e <_Z10linkAnalogv+0x17e>
 8002f76:	4b18      	ldr	r3, [pc, #96]	@ (8002fd8 <_Z10linkAnalogv+0x1d8>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d803      	bhi.n	8002f86 <_Z10linkAnalogv+0x186>
		warningHardware[0]	= 1;			// Indica alarma
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <_Z10linkAnalogv+0x1ec>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e002      	b.n	8002f8c <_Z10linkAnalogv+0x18c>
	}
	else{								// Si no
		warningHardware[0]	= 0;			// No hay alarma
 8002f86:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <_Z10linkAnalogv+0x1ec>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
	}

	if ( humApp < 5 || humApp > 90){	// Si pasa limite de sensores
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <_Z10linkAnalogv+0x1e0>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d903      	bls.n	8002f9c <_Z10linkAnalogv+0x19c>
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <_Z10linkAnalogv+0x1e0>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	2b5a      	cmp	r3, #90	@ 0x5a
 8002f9a:	d903      	bls.n	8002fa4 <_Z10linkAnalogv+0x1a4>
		warningHardware[1]	= 1;			// Indica alarma
 8002f9c:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <_Z10linkAnalogv+0x1ec>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	705a      	strb	r2, [r3, #1]
 8002fa2:	e003      	b.n	8002fac <_Z10linkAnalogv+0x1ac>
	}
	else{								// Si no
		warningHardware[1]	= 0;			// No hay alarma
 8002fa4:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <_Z10linkAnalogv+0x1ec>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	705a      	strb	r2, [r3, #1]
	}
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	2000062e 	.word	0x2000062e
 8002fb4:	20000630 	.word	0x20000630
 8002fb8:	20000638 	.word	0x20000638
 8002fbc:	20000634 	.word	0x20000634
 8002fc0:	200005e0 	.word	0x200005e0
 8002fc4:	2000054a 	.word	0x2000054a
 8002fc8:	20000629 	.word	0x20000629
 8002fcc:	20000552 	.word	0x20000552
 8002fd0:	20000639 	.word	0x20000639
 8002fd4:	20000530 	.word	0x20000530
 8002fd8:	2000062a 	.word	0x2000062a
 8002fdc:	20000532 	.word	0x20000532
 8002fe0:	2000062c 	.word	0x2000062c
 8002fe4:	2000052c 	.word	0x2000052c
 8002fe8:	2000052e 	.word	0x2000052e
 8002fec:	200005d8 	.word	0x200005d8

08002ff0 <_Z41__static_initialization_and_destruction_0ii>:
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d127      	bne.n	8003050 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003006:	4293      	cmp	r3, r2
 8003008:	d122      	bne.n	8003050 <_Z41__static_initialization_and_destruction_0ii+0x60>
long int limitGpsLink	= 240000/superloop;	// Limite de tiempo esperando mensajes validos
 800300a:	4b14      	ldr	r3, [pc, #80]	@ (800305c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003012:	fb93 f3f2 	sdiv	r3, r3, r2
 8003016:	4a13      	ldr	r2, [pc, #76]	@ (8003064 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003018:	6013      	str	r3, [r2, #0]
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003024:	fb93 f3f2 	sdiv	r3, r3, r2
 8003028:	4a0f      	ldr	r2, [pc, #60]	@ (8003068 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800302a:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003034:	fb93 f3f2 	sdiv	r3, r3, r2
 8003038:	4a0d      	ldr	r2, [pc, #52]	@ (8003070 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800303a:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 800303c:	4b07      	ldr	r3, [pc, #28]	@ (800305c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003046:	fb93 f3f2 	sdiv	r3, r3, r2
 800304a:	b29a      	uxth	r2, r3
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800304e:	801a      	strh	r2, [r3, #0]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	20000433 	.word	0x20000433
 8003060:	0003a980 	.word	0x0003a980
 8003064:	20000610 	.word	0x20000610
 8003068:	20000624 	.word	0x20000624
 800306c:	000dbba0 	.word	0x000dbba0
 8003070:	20000634 	.word	0x20000634
 8003074:	20000640 	.word	0x20000640

08003078 <_GLOBAL__sub_I_stateGpsLink>:
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
 800307c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003080:	2001      	movs	r0, #1
 8003082:	f7ff ffb5 	bl	8002ff0 <_Z41__static_initialization_and_destruction_0ii>
 8003086:	bd80      	pop	{r7, pc}

08003088 <_Z10linkOutputv>:
extern wdTimeout loraTimeWd;	// Watchdog de Lorawan
extern bool flagTxLora;			// Indica que se envía un mensaje

/***** OUTPUT *****/

void linkOutput(){
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	linkOutLora();
 800308c:	f000 f804 	bl	8003098 <_Z11linkOutLorav>
	linkOutGps();
 8003090:	f000 f81c 	bl	80030cc <_Z10linkOutGpsv>
	//linkOutDisplay();
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}

08003098 <_Z11linkOutLorav>:
/************************
 *****	LORA OUTPUT *****
 ************************
 *
 */
void linkOutLora(){
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( flagTxLora ){				// Si sale un comando
 800309c:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <_Z11linkOutLorav+0x24>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <_Z11linkOutLorav+0x12>
		loraTimeWd.setOutput();		// Se indica a wd
 80030a4:	4806      	ldr	r0, [pc, #24]	@ (80030c0 <_Z11linkOutLorav+0x28>)
 80030a6:	f000 f957 	bl	8003358 <_ZN9wdTimeout9setOutputEv>

	//////////////
	// HARDWARE //
	//////////////

	if ( flagWdLora ){			// Si vence wd
 80030aa:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <_Z11linkOutLorav+0x2c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <_Z11linkOutLorav+0x20>
		flagResetHwLora	= 1;	// Reinicia chip
 80030b2:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <_Z11linkOutLorav+0x30>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
	}
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	200005f1 	.word	0x200005f1
 80030c0:	20001190 	.word	0x20001190
 80030c4:	20000644 	.word	0x20000644
 80030c8:	20000645 	.word	0x20000645

080030cc <_Z10linkOutGpsv>:

/**********************
 ***** GPS OUTPUT *****
 **********************
 */
void linkOutGps(){
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

	if ( startGps ){		// Si se inicia Gps
 80030d0:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <_Z10linkOutGpsv+0x30>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <_Z10linkOutGpsv+0x12>
		enableGps	= 1;	// Habilita gps
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <_Z10linkOutGpsv+0x34>)
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
	}

	if ( stopGps ){			// Si se detiene gps
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <_Z10linkOutGpsv+0x38>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <_Z10linkOutGpsv+0x26>
		stopGps		= 0;	// Reinicia Flag
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <_Z10linkOutGpsv+0x38>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
		enableGps	= 0;	// Deshabilita gps
 80030ec:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <_Z10linkOutGpsv+0x34>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
	}
}
 80030f2:	bf00      	nop
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	2000038f 	.word	0x2000038f
 8003100:	20000390 	.word	0x20000390
 8003104:	20000bf5 	.word	0x20000bf5

08003108 <_Z12setupLoraAppv>:

rn2903Command macSetCh8;
rn2903Command macSetCh9;
rn2903Command macSetCh10;

void setupLoraApp(){
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
	///////////////
	// SYS RESET //
	///////////////

	sysReset.command		= sysReset_RN2903;
 800310c:	4b57      	ldr	r3, [pc, #348]	@ (800326c <_Z12setupLoraAppv+0x164>)
 800310e:	4a58      	ldr	r2, [pc, #352]	@ (8003270 <_Z12setupLoraAppv+0x168>)
 8003110:	605a      	str	r2, [r3, #4]
	sysReset.size			= sizeof( sysReset_RN2903 );
 8003112:	4b56      	ldr	r3, [pc, #344]	@ (800326c <_Z12setupLoraAppv+0x164>)
 8003114:	220c      	movs	r2, #12
 8003116:	701a      	strb	r2, [r3, #0]
	sysReset.responseSize	= 1;
 8003118:	4b54      	ldr	r3, [pc, #336]	@ (800326c <_Z12setupLoraAppv+0x164>)
 800311a:	2201      	movs	r2, #1
 800311c:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET MOD //
	///////////////////

	radioSetMod.command		= radioSetMod_RN2903;
 800311e:	4b55      	ldr	r3, [pc, #340]	@ (8003274 <_Z12setupLoraAppv+0x16c>)
 8003120:	4a55      	ldr	r2, [pc, #340]	@ (8003278 <_Z12setupLoraAppv+0x170>)
 8003122:	605a      	str	r2, [r3, #4]
	radioSetMod.size		= sizeof( radioSetMod_RN2903 ) - 1;
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <_Z12setupLoraAppv+0x16c>)
 8003126:	2214      	movs	r2, #20
 8003128:	701a      	strb	r2, [r3, #0]
	radioSetMod.responseSize= 3;
 800312a:	4b52      	ldr	r3, [pc, #328]	@ (8003274 <_Z12setupLoraAppv+0x16c>)
 800312c:	2203      	movs	r2, #3
 800312e:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET SF //
	//////////////////

	radioSetSf.command		= radioSetSf_RN2903;
 8003130:	4b52      	ldr	r3, [pc, #328]	@ (800327c <_Z12setupLoraAppv+0x174>)
 8003132:	4a53      	ldr	r2, [pc, #332]	@ (8003280 <_Z12setupLoraAppv+0x178>)
 8003134:	605a      	str	r2, [r3, #4]
	radioSetSf.size			= sizeof( radioSetSf_RN2903 ) - 1;
 8003136:	4b51      	ldr	r3, [pc, #324]	@ (800327c <_Z12setupLoraAppv+0x174>)
 8003138:	2213      	movs	r2, #19
 800313a:	701a      	strb	r2, [r3, #0]
	radioSetSf.responseSize	= 3;
 800313c:	4b4f      	ldr	r3, [pc, #316]	@ (800327c <_Z12setupLoraAppv+0x174>)
 800313e:	2203      	movs	r2, #3
 8003140:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET BW //
	//////////////////

	radioSetBw.command		= radioSetBw_RN2903;
 8003142:	4b50      	ldr	r3, [pc, #320]	@ (8003284 <_Z12setupLoraAppv+0x17c>)
 8003144:	4a50      	ldr	r2, [pc, #320]	@ (8003288 <_Z12setupLoraAppv+0x180>)
 8003146:	605a      	str	r2, [r3, #4]
	radioSetBw.size			= sizeof( radioSetBw_RN2903 ) - 1;
 8003148:	4b4e      	ldr	r3, [pc, #312]	@ (8003284 <_Z12setupLoraAppv+0x17c>)
 800314a:	2212      	movs	r2, #18
 800314c:	701a      	strb	r2, [r3, #0]
	radioSetBw.responseSize = 3;
 800314e:	4b4d      	ldr	r3, [pc, #308]	@ (8003284 <_Z12setupLoraAppv+0x17c>)
 8003150:	2203      	movs	r2, #3
 8003152:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET PWR //
	///////////////////

	radioSetPwr.command		= radioSetPwr_RN2903;
 8003154:	4b4d      	ldr	r3, [pc, #308]	@ (800328c <_Z12setupLoraAppv+0x184>)
 8003156:	4a4e      	ldr	r2, [pc, #312]	@ (8003290 <_Z12setupLoraAppv+0x188>)
 8003158:	605a      	str	r2, [r3, #4]
	radioSetPwr.size		= sizeof( radioSetPwr_RN2903 ) - 1;
 800315a:	4b4c      	ldr	r3, [pc, #304]	@ (800328c <_Z12setupLoraAppv+0x184>)
 800315c:	2212      	movs	r2, #18
 800315e:	701a      	strb	r2, [r3, #0]
	radioSetPwr.responseSize= 3;
 8003160:	4b4a      	ldr	r3, [pc, #296]	@ (800328c <_Z12setupLoraAppv+0x184>)
 8003162:	2203      	movs	r2, #3
 8003164:	721a      	strb	r2, [r3, #8]

	////////////////////
	// MAC SET DEVEUI //
	////////////////////

	macSetDeveui.command	= macSetDevEui_RN2903;
 8003166:	4b4b      	ldr	r3, [pc, #300]	@ (8003294 <_Z12setupLoraAppv+0x18c>)
 8003168:	4a4b      	ldr	r2, [pc, #300]	@ (8003298 <_Z12setupLoraAppv+0x190>)
 800316a:	605a      	str	r2, [r3, #4]
	macSetDeveui.size		= sizeof( macSetDevEui_RN2903 ) - 1;
 800316c:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <_Z12setupLoraAppv+0x18c>)
 800316e:	2220      	movs	r2, #32
 8003170:	701a      	strb	r2, [r3, #0]
	macSetDeveui.responseSize	= 3;
 8003172:	4b48      	ldr	r3, [pc, #288]	@ (8003294 <_Z12setupLoraAppv+0x18c>)
 8003174:	2203      	movs	r2, #3
 8003176:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET NETWORK KEY //
	/////////////////////////

	macSetNwkskey.command	= macSetNwkskey_RN2903;
 8003178:	4b48      	ldr	r3, [pc, #288]	@ (800329c <_Z12setupLoraAppv+0x194>)
 800317a:	4a49      	ldr	r2, [pc, #292]	@ (80032a0 <_Z12setupLoraAppv+0x198>)
 800317c:	605a      	str	r2, [r3, #4]
	macSetNwkskey.size		= sizeof( macSetNwkskey_RN2903 ) - 1;
 800317e:	4b47      	ldr	r3, [pc, #284]	@ (800329c <_Z12setupLoraAppv+0x194>)
 8003180:	2232      	movs	r2, #50	@ 0x32
 8003182:	701a      	strb	r2, [r3, #0]
	macSetNwkskey.responseSize	= 3;
 8003184:	4b45      	ldr	r3, [pc, #276]	@ (800329c <_Z12setupLoraAppv+0x194>)
 8003186:	2203      	movs	r2, #3
 8003188:	721a      	strb	r2, [r3, #8]

	//////////////////////
	// MAC SET APPS KEY //
	//////////////////////

	macSetAppskey.command	= macSetAppskey_RN2903;
 800318a:	4b46      	ldr	r3, [pc, #280]	@ (80032a4 <_Z12setupLoraAppv+0x19c>)
 800318c:	4a46      	ldr	r2, [pc, #280]	@ (80032a8 <_Z12setupLoraAppv+0x1a0>)
 800318e:	605a      	str	r2, [r3, #4]
	macSetAppskey.size		= sizeof( macSetAppskey_RN2903 ) - 1;
 8003190:	4b44      	ldr	r3, [pc, #272]	@ (80032a4 <_Z12setupLoraAppv+0x19c>)
 8003192:	2232      	movs	r2, #50	@ 0x32
 8003194:	701a      	strb	r2, [r3, #0]
	macSetAppskey.responseSize	= 3;
 8003196:	4b43      	ldr	r3, [pc, #268]	@ (80032a4 <_Z12setupLoraAppv+0x19c>)
 8003198:	2203      	movs	r2, #3
 800319a:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET DEV ADDRESS //
	/////////////////////////

	macSetDevAddr.command		= macSetDevAddr_RN2903;
 800319c:	4b43      	ldr	r3, [pc, #268]	@ (80032ac <_Z12setupLoraAppv+0x1a4>)
 800319e:	4a44      	ldr	r2, [pc, #272]	@ (80032b0 <_Z12setupLoraAppv+0x1a8>)
 80031a0:	605a      	str	r2, [r3, #4]
	macSetDevAddr.size			= sizeof ( macSetDevAddr_RN2903 ) - 1;
 80031a2:	4b42      	ldr	r3, [pc, #264]	@ (80032ac <_Z12setupLoraAppv+0x1a4>)
 80031a4:	221a      	movs	r2, #26
 80031a6:	701a      	strb	r2, [r3, #0]
	macSetDevAddr.responseSize	= 2;
 80031a8:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <_Z12setupLoraAppv+0x1a4>)
 80031aa:	2202      	movs	r2, #2
 80031ac:	721a      	strb	r2, [r3, #8]

	///////////////////
	// MAC JOIN OTAA //
	///////////////////

	macJoinOtaa.command			= macJoinOtaa_RN2903;
 80031ae:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <_Z12setupLoraAppv+0x1ac>)
 80031b0:	4a41      	ldr	r2, [pc, #260]	@ (80032b8 <_Z12setupLoraAppv+0x1b0>)
 80031b2:	605a      	str	r2, [r3, #4]
	macJoinOtaa.size			= sizeof ( macJoinOtaa_RN2903 ) - 1;
 80031b4:	4b3f      	ldr	r3, [pc, #252]	@ (80032b4 <_Z12setupLoraAppv+0x1ac>)
 80031b6:	220f      	movs	r2, #15
 80031b8:	701a      	strb	r2, [r3, #0]
	macJoinOtaa.responseSize	= 7;
 80031ba:	4b3e      	ldr	r3, [pc, #248]	@ (80032b4 <_Z12setupLoraAppv+0x1ac>)
 80031bc:	2207      	movs	r2, #7
 80031be:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC JOIN ABP //
	//////////////////

	macJoinAbp.command		= macJoinAbp_RN2903;
 80031c0:	4b3e      	ldr	r3, [pc, #248]	@ (80032bc <_Z12setupLoraAppv+0x1b4>)
 80031c2:	4a3f      	ldr	r2, [pc, #252]	@ (80032c0 <_Z12setupLoraAppv+0x1b8>)
 80031c4:	605a      	str	r2, [r3, #4]
	macJoinAbp.size			= sizeof( macJoinAbp_RN2903 ) - 1;
 80031c6:	4b3d      	ldr	r3, [pc, #244]	@ (80032bc <_Z12setupLoraAppv+0x1b4>)
 80031c8:	220e      	movs	r2, #14
 80031ca:	701a      	strb	r2, [r3, #0]
	macJoinAbp.responseSize	= 2;
 80031cc:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <_Z12setupLoraAppv+0x1b4>)
 80031ce:	2202      	movs	r2, #2
 80031d0:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC SET SYNC //
	//////////////////

	macSetSync.command		= macSetSync_RN2903;
 80031d2:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <_Z12setupLoraAppv+0x1bc>)
 80031d4:	4a3c      	ldr	r2, [pc, #240]	@ (80032c8 <_Z12setupLoraAppv+0x1c0>)
 80031d6:	605a      	str	r2, [r3, #4]
	macSetSync.size			= sizeof( macSetSync_RN2903 ) - 1;
 80031d8:	4b3a      	ldr	r3, [pc, #232]	@ (80032c4 <_Z12setupLoraAppv+0x1bc>)
 80031da:	2211      	movs	r2, #17
 80031dc:	701a      	strb	r2, [r3, #0]
	macSetSync.responseSize	= 3;
 80031de:	4b39      	ldr	r3, [pc, #228]	@ (80032c4 <_Z12setupLoraAppv+0x1bc>)
 80031e0:	2203      	movs	r2, #3
 80031e2:	721a      	strb	r2, [r3, #8]

	//////////////
	// MAC SAVE //
	//////////////

	macSave.command			= macSave_RN2903;
 80031e4:	4b39      	ldr	r3, [pc, #228]	@ (80032cc <_Z12setupLoraAppv+0x1c4>)
 80031e6:	4a3a      	ldr	r2, [pc, #232]	@ (80032d0 <_Z12setupLoraAppv+0x1c8>)
 80031e8:	605a      	str	r2, [r3, #4]
	macSave.size			= sizeof( macSave_RN2903 ) - 1;
 80031ea:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <_Z12setupLoraAppv+0x1c4>)
 80031ec:	220a      	movs	r2, #10
 80031ee:	701a      	strb	r2, [r3, #0]
	macSave.responseSize	= 3;
 80031f0:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <_Z12setupLoraAppv+0x1c4>)
 80031f2:	2203      	movs	r2, #3
 80031f4:	721a      	strb	r2, [r3, #8]

	/////////////////
	// MAC TX DATA //
	/////////////////

	 macTxData.command		= macTxData_RN2903;
 80031f6:	4b37      	ldr	r3, [pc, #220]	@ (80032d4 <_Z12setupLoraAppv+0x1cc>)
 80031f8:	4a37      	ldr	r2, [pc, #220]	@ (80032d8 <_Z12setupLoraAppv+0x1d0>)
 80031fa:	605a      	str	r2, [r3, #4]
	 macTxData.size			= sizeof( macTxData_RN2903 ) - 1;
 80031fc:	4b35      	ldr	r3, [pc, #212]	@ (80032d4 <_Z12setupLoraAppv+0x1cc>)
 80031fe:	2219      	movs	r2, #25
 8003200:	701a      	strb	r2, [r3, #0]
	 macTxData.responseSize	= 14;
 8003202:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <_Z12setupLoraAppv+0x1cc>)
 8003204:	220e      	movs	r2, #14
 8003206:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	 macTxGps.command		= macTxGps_RN2903;
 8003208:	4b34      	ldr	r3, [pc, #208]	@ (80032dc <_Z12setupLoraAppv+0x1d4>)
 800320a:	4a35      	ldr	r2, [pc, #212]	@ (80032e0 <_Z12setupLoraAppv+0x1d8>)
 800320c:	605a      	str	r2, [r3, #4]
	 macTxGps.size			= sizeof( macTxGps_RN2903 ) - 1;
 800320e:	4b33      	ldr	r3, [pc, #204]	@ (80032dc <_Z12setupLoraAppv+0x1d4>)
 8003210:	2219      	movs	r2, #25
 8003212:	701a      	strb	r2, [r3, #0]
	 macTxGps.responseSize	= 14;
 8003214:	4b31      	ldr	r3, [pc, #196]	@ (80032dc <_Z12setupLoraAppv+0x1d4>)
 8003216:	220e      	movs	r2, #14
 8003218:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	  macTxSys.command		= macTxSys_RN2903;
 800321a:	4b32      	ldr	r3, [pc, #200]	@ (80032e4 <_Z12setupLoraAppv+0x1dc>)
 800321c:	4a32      	ldr	r2, [pc, #200]	@ (80032e8 <_Z12setupLoraAppv+0x1e0>)
 800321e:	605a      	str	r2, [r3, #4]
	  macTxSys.size			= sizeof( macTxSys_RN2903 ) - 1;
 8003220:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <_Z12setupLoraAppv+0x1dc>)
 8003222:	2215      	movs	r2, #21
 8003224:	701a      	strb	r2, [r3, #0]
	  macTxSys.responseSize	= 14;
 8003226:	4b2f      	ldr	r3, [pc, #188]	@ (80032e4 <_Z12setupLoraAppv+0x1dc>)
 8003228:	220e      	movs	r2, #14
 800322a:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 8 //
	  //////////////////

	  macSetCh8.command		= macSetCh8_RN2903;
 800322c:	4b2f      	ldr	r3, [pc, #188]	@ (80032ec <_Z12setupLoraAppv+0x1e4>)
 800322e:	4a30      	ldr	r2, [pc, #192]	@ (80032f0 <_Z12setupLoraAppv+0x1e8>)
 8003230:	605a      	str	r2, [r3, #4]
	  macSetCh8.size		= sizeof( macSetCh8_RN2903 ) - 1;
 8003232:	4b2e      	ldr	r3, [pc, #184]	@ (80032ec <_Z12setupLoraAppv+0x1e4>)
 8003234:	2219      	movs	r2, #25
 8003236:	701a      	strb	r2, [r3, #0]
	  macSetCh8.responseSize	= 9;
 8003238:	4b2c      	ldr	r3, [pc, #176]	@ (80032ec <_Z12setupLoraAppv+0x1e4>)
 800323a:	2209      	movs	r2, #9
 800323c:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 9 //
	  //////////////////

	  macSetCh9.command		= macSetCh9_RN2903;
 800323e:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <_Z12setupLoraAppv+0x1ec>)
 8003240:	4a2d      	ldr	r2, [pc, #180]	@ (80032f8 <_Z12setupLoraAppv+0x1f0>)
 8003242:	605a      	str	r2, [r3, #4]
	  macSetCh9.size		= sizeof( macSetCh9_RN2903 ) - 1;
 8003244:	4b2b      	ldr	r3, [pc, #172]	@ (80032f4 <_Z12setupLoraAppv+0x1ec>)
 8003246:	2219      	movs	r2, #25
 8003248:	701a      	strb	r2, [r3, #0]
	  macSetCh9.responseSize	= 9;
 800324a:	4b2a      	ldr	r3, [pc, #168]	@ (80032f4 <_Z12setupLoraAppv+0x1ec>)
 800324c:	2209      	movs	r2, #9
 800324e:	721a      	strb	r2, [r3, #8]

	  ///////////////////
	  // MAC SET CH 10 //
	  ///////////////////
	  macSetCh10.command		= macSetCh10_RN2903;
 8003250:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <_Z12setupLoraAppv+0x1f4>)
 8003252:	4a2b      	ldr	r2, [pc, #172]	@ (8003300 <_Z12setupLoraAppv+0x1f8>)
 8003254:	605a      	str	r2, [r3, #4]
	  macSetCh10.size			= sizeof( macSetCh10_RN2903 ) - 1;
 8003256:	4b29      	ldr	r3, [pc, #164]	@ (80032fc <_Z12setupLoraAppv+0x1f4>)
 8003258:	221a      	movs	r2, #26
 800325a:	701a      	strb	r2, [r3, #0]
	  macSetCh10.responseSize	= 9;
 800325c:	4b27      	ldr	r3, [pc, #156]	@ (80032fc <_Z12setupLoraAppv+0x1f4>)
 800325e:	2209      	movs	r2, #9
 8003260:	721a      	strb	r2, [r3, #8]

}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	20000648 	.word	0x20000648
 8003270:	200001a4 	.word	0x200001a4
 8003274:	20000654 	.word	0x20000654
 8003278:	200001b0 	.word	0x200001b0
 800327c:	20000660 	.word	0x20000660
 8003280:	200001c8 	.word	0x200001c8
 8003284:	2000066c 	.word	0x2000066c
 8003288:	200001dc 	.word	0x200001dc
 800328c:	20000678 	.word	0x20000678
 8003290:	200001f0 	.word	0x200001f0
 8003294:	20000684 	.word	0x20000684
 8003298:	20000204 	.word	0x20000204
 800329c:	2000069c 	.word	0x2000069c
 80032a0:	20000244 	.word	0x20000244
 80032a4:	200006a8 	.word	0x200006a8
 80032a8:	20000278 	.word	0x20000278
 80032ac:	20000690 	.word	0x20000690
 80032b0:	20000228 	.word	0x20000228
 80032b4:	200006b4 	.word	0x200006b4
 80032b8:	200002ac 	.word	0x200002ac
 80032bc:	200006c0 	.word	0x200006c0
 80032c0:	200002bc 	.word	0x200002bc
 80032c4:	200006cc 	.word	0x200006cc
 80032c8:	200002cc 	.word	0x200002cc
 80032cc:	200006d8 	.word	0x200006d8
 80032d0:	200002e0 	.word	0x200002e0
 80032d4:	200006e4 	.word	0x200006e4
 80032d8:	200002ec 	.word	0x200002ec
 80032dc:	200006f0 	.word	0x200006f0
 80032e0:	20000308 	.word	0x20000308
 80032e4:	200006fc 	.word	0x200006fc
 80032e8:	20000324 	.word	0x20000324
 80032ec:	20000708 	.word	0x20000708
 80032f0:	2000033c 	.word	0x2000033c
 80032f4:	20000714 	.word	0x20000714
 80032f8:	20000358 	.word	0x20000358
 80032fc:	20000720 	.word	0x20000720
 8003300:	20000374 	.word	0x20000374

08003304 <_ZN10loraRutine10addCommandEP13rn2903Command>:

/////////////////
// ADD COMMAND //
/////////////////

void loraRutine::addCommand ( rn2903Command *command ){
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	this->listCommands[ this->sizeList ]	= command;	// AÑADE PUNTERO A LISTA
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8003314:	4619      	mov	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	this->sizeList++;									// Suma 1 al largo de lista
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <_ZN9wdTimeoutC1El>:
 *		5.- newMessage:	Indica si se recibió un mensaje
 *		6.- timeout:	Indica si hubo un timeout
 *
 */

wdTimeout::wdTimeout( long limit ){	// Constructor
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
	this->limit	= limit;			// Se debe fijar el limite de timeout
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	609a      	str	r2, [r3, #8]
}
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_ZN9wdTimeout9setOutputEv>:

////////////////
// SET OUTPUT //
////////////////

void wdTimeout::setOutput(){	//
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	this->flagOutput	= 1;	// Indica que salió un comando
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;	// Reinicia contador
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	605a      	str	r2, [r3, #4]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_ZN9wdTimeout6addOneEv>:

/////////////
// ADD ONE //
/////////////

void wdTimeout::addOne(){
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	if ( this->flagOutput ){			// Si salió un comando
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <_ZN9wdTimeout6addOneEv+0x1a>
		this->counter++;				// Suma uno al contador
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	605a      	str	r2, [r3, #4]
	}

	if (this->counter >= this->limit ){	// Si pasa el límite
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	db03      	blt.n	80033a6 <_ZN9wdTimeout6addOneEv+0x2e>
		this->flagTimeout	= 1;		// Se considera timeout
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	709a      	strb	r2, [r3, #2]
	}
	else{								// Si no
		this->flagTimeout	= 0;		// No indica timeout
	}
}
 80033a4:	e002      	b.n	80033ac <_ZN9wdTimeout6addOneEv+0x34>
		this->flagTimeout	= 0;		// No indica timeout
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	709a      	strb	r2, [r3, #2]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <_ZN9wdTimeout8setInputEv>:

///////////////
// SET INPUT //
///////////////

void wdTimeout::setInput(){
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	this->flagInput		= this->flagOutput;		// Copia indicador salida de comando )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	785a      	ldrb	r2, [r3, #1]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	701a      	strb	r2, [r3, #0]
												// Si hay multiples respuestas toma sentido
	this->flagOutput	= 0;					// Reinicia indicador de salida comando
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;					// Reinicia contador
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	605a      	str	r2, [r3, #4]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <_ZN9wdTimeout7timeOutEv>:

/////////////
// TIMEOUT //
/////////////

bool wdTimeout::timeOut(){
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	bool flag			= this->flagTimeout;	// Copia indicador timeout
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	789b      	ldrb	r3, [r3, #2]
 80033ec:	73fb      	strb	r3, [r7, #15]
	this->flagTimeout	= 0;					// Reinicia indicador timeout
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	709a      	strb	r2, [r3, #2]
	return flag;								// Retorna valor guardado
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_ZN9loraCheck18setResponsePointerEPPhh>:

//////////////////////////
// SET RESPONSE POINTER //
//////////////////////////

void loraCheck::setResponsePointer( uint8_t *pointer[], uint8_t sizeIdealResponses ){
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	4613      	mov	r3, r2
 800340e:	71fb      	strb	r3, [r7, #7]
	this->idealResponses		= &pointer[0];
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	609a      	str	r2, [r3, #8]
	this->sizeIdealResponses	= sizeIdealResponses;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	79fa      	ldrb	r2, [r7, #7]
 800341a:	731a      	strb	r2, [r3, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_ZN9loraCheck17setIdealResponsesEh>:

////////////////////////
// SET IDEAL RESPONSE //
////////////////////////

void loraCheck::setIdealResponses( uint8_t qtty ){
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
	this->qtty				= qtty;				// Copia el largo del arreglo
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	705a      	strb	r2, [r3, #1]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <_ZN9loraCheck11newResponseEPhh>:

//////////////////
// NEW RESPONSE //
//////////////////

void loraCheck::newResponse( uint8_t *response, uint8_t sizeResponse ){
 8003446:	b480      	push	{r7}
 8003448:	b087      	sub	sp, #28
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	4613      	mov	r3, r2
 8003452:	71fb      	strb	r3, [r7, #7]
	this->realResponse	= response;			// Copia la respuesta entregada por el modulo
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	611a      	str	r2, [r3, #16]
	this->sizeResponse	= sizeResponse;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	79fa      	ldrb	r2, [r7, #7]
 800345e:	701a      	strb	r2, [r3, #0]

	uint8_t i;	// Crea variable auxiliar
	uint8_t j;

	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 8003460:	2300      	movs	r3, #0
 8003462:	75fb      	strb	r3, [r7, #23]
 8003464:	e029      	b.n	80034ba <_ZN9loraCheck11newResponseEPhh+0x74>
		for ( j = 0; j < this->sizeResponse; j++ ){
 8003466:	2300      	movs	r3, #0
 8003468:	75bb      	strb	r3, [r7, #22]
 800346a:	e01a      	b.n	80034a2 <_ZN9loraCheck11newResponseEPhh+0x5c>
			if ( *(this->idealResponses[i] + j) == this->realResponse[j]){
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	7dbb      	ldrb	r3, [r7, #22]
 800347a:	4413      	add	r3, r2
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6919      	ldr	r1, [r3, #16]
 8003482:	7dbb      	ldrb	r3, [r7, #22]
 8003484:	440b      	add	r3, r1
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d103      	bne.n	8003494 <_ZN9loraCheck11newResponseEPhh+0x4e>
				this->flagCorrect	= 1;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	70da      	strb	r2, [r3, #3]
 8003492:	e003      	b.n	800349c <_ZN9loraCheck11newResponseEPhh+0x56>
			}
			else{
				this->flagCorrect	= 0;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	70da      	strb	r2, [r3, #3]
				break;
 800349a:	e007      	b.n	80034ac <_ZN9loraCheck11newResponseEPhh+0x66>
		for ( j = 0; j < this->sizeResponse; j++ ){
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	3301      	adds	r3, #1
 80034a0:	75bb      	strb	r3, [r7, #22]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	7dba      	ldrb	r2, [r7, #22]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3df      	bcc.n	800346c <_ZN9loraCheck11newResponseEPhh+0x26>
			}
		}
		if (this->flagCorrect){
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	78db      	ldrb	r3, [r3, #3]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d108      	bne.n	80034c6 <_ZN9loraCheck11newResponseEPhh+0x80>
	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	3301      	adds	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	7dfa      	ldrb	r2, [r7, #23]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3d0      	bcc.n	8003466 <_ZN9loraCheck11newResponseEPhh+0x20>
 80034c4:	e000      	b.n	80034c8 <_ZN9loraCheck11newResponseEPhh+0x82>
			break;
 80034c6:	bf00      	nop
		}
	}

	this->position	= i;											// Copia posicion final
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	7dfa      	ldrb	r2, [r7, #23]
 80034cc:	709a      	strb	r2, [r3, #2]
	this->flagCheck	= 1;											// Indica que hay nuevo resultado
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	711a      	strb	r2, [r3, #4]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <_ZN9loraCheck5checkEv>:

////////////////////
// CHECK RESPONSE //
////////////////////

bool loraCheck::check(){
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	bool flag;							// Crea variable auxiliar
	flag			= this->flagCheck;	// Copia resultado de flag
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	791b      	ldrb	r3, [r3, #4]
 80034ec:	73fb      	strb	r3, [r7, #15]
	this->flagCheck	= 0;				// Reinicia el indicador de nuevo resultado
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	711a      	strb	r2, [r3, #4]

	return 	flag;						// Entrega resultado
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_ZN9loraCheck8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t loraCheck::response(){
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	uint8_t	finalResult;				// Crea variable auxiliar
	uint8_t i;

	if (this->flagCorrect){				// Si hubo respuesta correcta
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	78db      	ldrb	r3, [r3, #3]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <_ZN9loraCheck8responseEv+0x18>
		finalResult	= this->position;	// Copia posición
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	789b      	ldrb	r3, [r3, #2]
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e001      	b.n	800351e <_ZN9loraCheck8responseEv+0x1c>
	}
	else{								// Si no
		finalResult	= 99;				// Entrega 99
 800351a:	2363      	movs	r3, #99	@ 0x63
 800351c:	73fb      	strb	r3, [r7, #15]
	}
	finalResult = this->position;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	789b      	ldrb	r3, [r3, #2]
 8003522:	73fb      	strb	r3, [r7, #15]

	if ( this->sizeResponse > 30 ){
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b1e      	cmp	r3, #30
 800352a:	d91c      	bls.n	8003566 <_ZN9loraCheck8responseEv+0x64>
		for (i = 0; i < this->sizeResponse-1; i++){
 800352c:	2300      	movs	r3, #0
 800352e:	73bb      	strb	r3, [r7, #14]
 8003530:	e013      	b.n	800355a <_ZN9loraCheck8responseEv+0x58>
			if ( this->realResponse[i] == 'R' && this->realResponse[i+1] == 'N'){
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	7bbb      	ldrb	r3, [r7, #14]
 8003538:	4413      	add	r3, r2
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b52      	cmp	r3, #82	@ 0x52
 800353e:	d109      	bne.n	8003554 <_ZN9loraCheck8responseEv+0x52>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	7bbb      	ldrb	r3, [r7, #14]
 8003546:	3301      	adds	r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b4e      	cmp	r3, #78	@ 0x4e
 800354e:	d101      	bne.n	8003554 <_ZN9loraCheck8responseEv+0x52>
				finalResult	= 98;
 8003550:	2362      	movs	r3, #98	@ 0x62
 8003552:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < this->sizeResponse-1; i++){
 8003554:	7bbb      	ldrb	r3, [r7, #14]
 8003556:	3301      	adds	r3, #1
 8003558:	73bb      	strb	r3, [r7, #14]
 800355a:	7bba      	ldrb	r2, [r7, #14]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	429a      	cmp	r2, r3
 8003564:	dbe5      	blt.n	8003532 <_ZN9loraCheck8responseEv+0x30>
			}
		}
	}

	return finalResult;					// Retorna decisión
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_ZN9loraInput12insertBufferEPhh>:

///////////////////
// INSERT BUFFER //
///////////////////

void loraInput::insertBuffer(uint8_t *buffer, uint8_t sizeBuffer){
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	71fb      	strb	r3, [r7, #7]
	this->buffer		= buffer;		// Guarda puntero inicial del buffer
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	605a      	str	r2, [r3, #4]
	this->sizeBuffer	= sizeBuffer;	// Guarda tamaño del buffer
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	79fa      	ldrb	r2, [r7, #7]
 800358c:	721a      	strb	r2, [r3, #8]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_ZN9loraInput11newResponseEv>:

//////////////////
// NEW RESPONSE //
//////////////////

bool loraInput::newResponse(){						// Se reinicia cuando es consultado
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
	bool flag				= this->flagNewResponse;	// Copia flag de nuevo mensaje
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a8:	73fb      	strb	r3, [r7, #15]
	this->flagNewResponse	= 0;						// Reinicia flag
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return flag;										// Retorna respuesta guardada
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_ZN9loraInput8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t* loraInput::response(){	//
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	return this->buffer;		// Entrega la respuesta final
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_ZN9loraInput12responseSizeEv>:

uint8_t loraInput::responseSize(){
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	return this->sizeResponse;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <_ZN10loraSelect10newCommandEv>:

/////////////////
// NEW COMMAND //
/////////////////

bool loraSelect::newCommand(){
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
	bool flag = this->flagNew;								// Crea variable
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	79db      	ldrb	r3, [r3, #7]
 80035fe:	73fb      	strb	r3, [r7, #15]
	this->flagNew	= 0;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	71da      	strb	r2, [r3, #7]

	return flag;							// Retorna salida
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_ZN10loraSelect10getCommandEv>:

/////////////////
// GET COMMAND //
/////////////////

uint8_t	*loraSelect::getCommand(){
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	return this->command;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_ZN10loraSelect14getCommandSizeEv>:

///////////////////
// GET RESPONSES //
///////////////////

uint8_t loraSelect::getCommandSize(){
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	return this->commandSize;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	791b      	ldrb	r3, [r3, #4]
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <_ZN10loraSelect13qttyResponsesEv>:

////////////////////////
// QUANTITY RESPONSES //
////////////////////////

uint8_t loraSelect::qttyResponses(){
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	return this->qtty;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	795b      	ldrb	r3, [r3, #5]
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <_ZN12loraDecision10setRetriesEh>:

//////////////////
// SET RETRIES  //
//////////////////

void loraDecision::setRetries( uint8_t retries ){
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
	this->retries	= retries;					//
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	701a      	strb	r2, [r3, #0]
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <_ZN12loraDecision8responseEh>:
//////////////
// RESPONSE //
//////////////


void loraDecision::response ( uint8_t position ){
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	70fb      	strb	r3, [r7, #3]
	this->position	= position;					//	Copia posicion
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	705a      	strb	r2, [r3, #1]

	if ( position == 0 || position == 12 ){						//	Si no hay error
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <_ZN12loraDecision8responseEh+0x1e>
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	2b0c      	cmp	r3, #12
 8003696:	d10f      	bne.n	80036b8 <_ZN12loraDecision8responseEh+0x3e>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	709a      	strb	r2, [r3, #2]
		else{									//	Si no pasa  limite
			this->flagBurn		= 0;			//	No esta quemado
			this->flagRepeat	= 1;			//	Solicita repetir
		}
	}
}
 80036b6:	e054      	b.n	8003762 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 10 ){
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	2b0a      	cmp	r3, #10
 80036bc:	d10f      	bne.n	80036de <_ZN12loraDecision8responseEh+0x64>
		this->flagCorrect	= 0;				//	Indica que la respuesta es correcta
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 1;				//	Reinicia flag quemado
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	709a      	strb	r2, [r3, #2]
}
 80036dc:	e041      	b.n	8003762 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position < 98 ){
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	2b61      	cmp	r3, #97	@ 0x61
 80036e2:	d80f      	bhi.n	8003704 <_ZN12loraDecision8responseEh+0x8a>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	709a      	strb	r2, [r3, #2]
}
 8003702:	e02e      	b.n	8003762 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 98 ){
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	2b62      	cmp	r3, #98	@ 0x62
 8003708:	d10f      	bne.n	800372a <_ZN12loraDecision8responseEh+0xb0>
		this->flagCorrect	= 0;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	70da      	strb	r2, [r3, #3]
		this->flagBurn		= 0;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	715a      	strb	r2, [r3, #5]
		this->count			= 0;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	709a      	strb	r2, [r3, #2]
		this->flagEnable	= 1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	719a      	strb	r2, [r3, #6]
}
 8003728:	e01b      	b.n	8003762 <_ZN12loraDecision8responseEh+0xe8>
		this->flagCorrect	= 0;				//	Reinicia flag correcto
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	70da      	strb	r2, [r3, #3]
		this->count++;							//	Suma uno al contador
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	789b      	ldrb	r3, [r3, #2]
 8003734:	3301      	adds	r3, #1
 8003736:	b2da      	uxtb	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	709a      	strb	r2, [r3, #2]
		if ( this->count >= this->retries ){	//	Si pasa limite de reintentos
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	789a      	ldrb	r2, [r3, #2]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d306      	bcc.n	8003756 <_ZN12loraDecision8responseEh+0xdc>
			this->flagBurn		= 1;			//	Indica que esta quemado
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 0;			//	No hay que repetir
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	715a      	strb	r2, [r3, #5]
}
 8003754:	e005      	b.n	8003762 <_ZN12loraDecision8responseEh+0xe8>
			this->flagBurn		= 0;			//	No esta quemado
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 1;			//	Solicita repetir
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	715a      	strb	r2, [r3, #5]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <_ZN12loraDecision5resetEv>:

///////////
// RESET //
///////////

void loraDecision::reset(){
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
	this->flagCorrect	= 0;	//	Reinicia indicador de msj correcto
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	70da      	strb	r2, [r3, #3]
	this->flagBurn		= 0;	//	Reinicia indicador de msj quemado
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	711a      	strb	r2, [r3, #4]
	this->flagRepeat	= 0;	//	Reinicia indicador de repetir mensaje
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	715a      	strb	r2, [r3, #5]
	this->count			= 0;	//	Reinicia contador
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	709a      	strb	r2, [r3, #2]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_ZN12loraDecision7disableEv>:

void loraDecision::disable(){
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
	this->flagEnable	= 0;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	719a      	strb	r2, [r3, #6]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <_ZN12fifoCommandsC1Ev>:
////////////////////////
// FIFO COMMAND CLASS //
////////////////////////


class fifoCommands{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f103 0239 	add.w	r2, r3, #57	@ 0x39
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f103 0243 	add.w	r2, r3, #67	@ 0x43
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f103 024d 	add.w	r2, r3, #77	@ 0x4d
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	611a      	str	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f103 0257 	add.w	r2, r3, #87	@ 0x57
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	615a      	str	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f103 0261 	add.w	r2, r3, #97	@ 0x61
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f103 026b 	add.w	r2, r3, #107	@ 0x6b
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	61da      	str	r2, [r3, #28]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f103 0275 	add.w	r2, r3, #117	@ 0x75
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	621a      	str	r2, [r3, #32]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f103 027f 	add.w	r2, r3, #127	@ 0x7f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	625a      	str	r2, [r3, #36]	@ 0x24
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f103 0289 	add.w	r2, r3, #137	@ 0x89
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003834:	f001 fb19 	bl	8004e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003838:	f000 f8dc 	bl	80039f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800383c:	f000 fb56 	bl	8003eec <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003840:	f000 fafa 	bl	8003e38 <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8003844:	f000 fa90 	bl	8003d68 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8003848:	f000 fac2 	bl	8003dd0 <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 800384c:	f000 f9fe 	bl	8003c4c <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 8003850:	f000 fa4a 	bl	8003ce8 <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 8003854:	f000 f94a 	bl	8003aec <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 8003858:	f000 f924 	bl	8003aa4 <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 800385c:	4845      	ldr	r0, [pc, #276]	@ (8003974 <main+0x144>)
 800385e:	f007 ffdf 	bl	800b820 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA	(&huart4,	rxLora, sizeof(rxLora));
 8003862:	2201      	movs	r2, #1
 8003864:	4944      	ldr	r1, [pc, #272]	@ (8003978 <main+0x148>)
 8003866:	4845      	ldr	r0, [pc, #276]	@ (800397c <main+0x14c>)
 8003868:	f008 fbbc 	bl	800bfe4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA	(&huart5,	rxGps, sizeof(rxGps));
 800386c:	2202      	movs	r2, #2
 800386e:	4944      	ldr	r1, [pc, #272]	@ (8003980 <main+0x150>)
 8003870:	4844      	ldr	r0, [pc, #272]	@ (8003984 <main+0x154>)
 8003872:	f008 fbb7 	bl	800bfe4 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 8003876:	2203      	movs	r2, #3
 8003878:	4943      	ldr	r1, [pc, #268]	@ (8003988 <main+0x158>)
 800387a:	4844      	ldr	r0, [pc, #272]	@ (800398c <main+0x15c>)
 800387c:	f001 ff0c 	bl	8005698 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupLoraApp();
 8003880:	f7ff fc42 	bl	8003108 <_Z12setupLoraAppv>

  chSetRN2903.addCommand( &macSetCh8 );
 8003884:	4942      	ldr	r1, [pc, #264]	@ (8003990 <main+0x160>)
 8003886:	4843      	ldr	r0, [pc, #268]	@ (8003994 <main+0x164>)
 8003888:	f7ff fd3c 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh9 );
 800388c:	4942      	ldr	r1, [pc, #264]	@ (8003998 <main+0x168>)
 800388e:	4841      	ldr	r0, [pc, #260]	@ (8003994 <main+0x164>)
 8003890:	f7ff fd38 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh10 );
 8003894:	4941      	ldr	r1, [pc, #260]	@ (800399c <main+0x16c>)
 8003896:	483f      	ldr	r0, [pc, #252]	@ (8003994 <main+0x164>)
 8003898:	f7ff fd34 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &radioSetMod	);
 800389c:	4940      	ldr	r1, [pc, #256]	@ (80039a0 <main+0x170>)
 800389e:	4841      	ldr	r0, [pc, #260]	@ (80039a4 <main+0x174>)
 80038a0:	f7ff fd30 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetSf 	);
 80038a4:	4940      	ldr	r1, [pc, #256]	@ (80039a8 <main+0x178>)
 80038a6:	483f      	ldr	r0, [pc, #252]	@ (80039a4 <main+0x174>)
 80038a8:	f7ff fd2c 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetBw 	);
 80038ac:	493f      	ldr	r1, [pc, #252]	@ (80039ac <main+0x17c>)
 80038ae:	483d      	ldr	r0, [pc, #244]	@ (80039a4 <main+0x174>)
 80038b0:	f7ff fd28 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetPwr 	);
 80038b4:	493e      	ldr	r1, [pc, #248]	@ (80039b0 <main+0x180>)
 80038b6:	483b      	ldr	r0, [pc, #236]	@ (80039a4 <main+0x174>)
 80038b8:	f7ff fd24 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &macSetDeveui );
 80038bc:	493d      	ldr	r1, [pc, #244]	@ (80039b4 <main+0x184>)
 80038be:	4839      	ldr	r0, [pc, #228]	@ (80039a4 <main+0x174>)
 80038c0:	f7ff fd20 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetDevAddr );
 80038c4:	493c      	ldr	r1, [pc, #240]	@ (80039b8 <main+0x188>)
 80038c6:	4837      	ldr	r0, [pc, #220]	@ (80039a4 <main+0x174>)
 80038c8:	f7ff fd1c 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetNwkskey );
 80038cc:	493b      	ldr	r1, [pc, #236]	@ (80039bc <main+0x18c>)
 80038ce:	4835      	ldr	r0, [pc, #212]	@ (80039a4 <main+0x174>)
 80038d0:	f7ff fd18 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetAppskey );
 80038d4:	493a      	ldr	r1, [pc, #232]	@ (80039c0 <main+0x190>)
 80038d6:	4833      	ldr	r0, [pc, #204]	@ (80039a4 <main+0x174>)
 80038d8:	f7ff fd14 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macJoinAbp );
 80038dc:	4939      	ldr	r1, [pc, #228]	@ (80039c4 <main+0x194>)
 80038de:	4831      	ldr	r0, [pc, #196]	@ (80039a4 <main+0x174>)
 80038e0:	f7ff fd10 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetSync );
 80038e4:	4938      	ldr	r1, [pc, #224]	@ (80039c8 <main+0x198>)
 80038e6:	482f      	ldr	r0, [pc, #188]	@ (80039a4 <main+0x174>)
 80038e8:	f7ff fd0c 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSave );
 80038ec:	4937      	ldr	r1, [pc, #220]	@ (80039cc <main+0x19c>)
 80038ee:	482d      	ldr	r0, [pc, #180]	@ (80039a4 <main+0x174>)
 80038f0:	f7ff fd08 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loopRN2903.addCommand( &macTxData );
 80038f4:	4936      	ldr	r1, [pc, #216]	@ (80039d0 <main+0x1a0>)
 80038f6:	4837      	ldr	r0, [pc, #220]	@ (80039d4 <main+0x1a4>)
 80038f8:	f7ff fd04 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>
  loopRN2903.addCommand( &macTxData );
 80038fc:	4934      	ldr	r1, [pc, #208]	@ (80039d0 <main+0x1a0>)
 80038fe:	4835      	ldr	r0, [pc, #212]	@ (80039d4 <main+0x1a4>)
 8003900:	f7ff fd00 	bl	8003304 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loraCheck.setResponsePointer( rxCommand, 13);
 8003904:	220d      	movs	r2, #13
 8003906:	4934      	ldr	r1, [pc, #208]	@ (80039d8 <main+0x1a8>)
 8003908:	4834      	ldr	r0, [pc, #208]	@ (80039dc <main+0x1ac>)
 800390a:	f7ff fd7a 	bl	8003402 <_ZN9loraCheck18setResponsePointerEPPhh>
  loraDecision.setRetries(3);
 800390e:	2103      	movs	r1, #3
 8003910:	4833      	ldr	r0, [pc, #204]	@ (80039e0 <main+0x1b0>)
 8003912:	f7ff fea3 	bl	800365c <_ZN12loraDecision10setRetriesEh>

  loraInput.insertBuffer( bufferLoraIn, sizeof(bufferLoraIn));
 8003916:	2232      	movs	r2, #50	@ 0x32
 8003918:	4932      	ldr	r1, [pc, #200]	@ (80039e4 <main+0x1b4>)
 800391a:	4833      	ldr	r0, [pc, #204]	@ (80039e8 <main+0x1b8>)
 800391c:	f7ff fe2a 	bl	8003574 <_ZN9loraInput12insertBufferEPhh>
  //displayLink.inputDisplay(8888, 3);
  //
  HAL_IWDG_Init(&hiwdg);
 8003920:	4832      	ldr	r0, [pc, #200]	@ (80039ec <main+0x1bc>)
 8003922:	f006 fae6 	bl	8009ef2 <HAL_IWDG_Init>
  while (1)
  {

	  hwInput();
 8003926:	f7fd fe86 	bl	8001636 <_Z7hwInputv>
	  linkInput();
 800392a:	f7fe fe91 	bl	8002650 <_Z9linkInputv>
	  tcpInput();
 800392e:	f001 f89d 	bl	8004a6c <_Z8tcpInputv>
	  app();
 8003932:	f7fd f911 	bl	8000b58 <_Z3appv>
	  tcpOutput();
 8003936:	f001 f9d5 	bl	8004ce4 <_Z9tcpOutputv>
	  linkOutput();
 800393a:	f7ff fba5 	bl	8003088 <_Z10linkOutputv>
	  hwOutput();
 800393e:	f7fe fae7 	bl	8001f10 <_Z8hwOutputv>
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */


	  HAL_SuspendTick();
 8003942:	f001 fb2b 	bl	8004f9c <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003946:	2101      	movs	r1, #1
 8003948:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800394c:	f006 fb28 	bl	8009fa0 <HAL_PWR_EnterSLEEPMode>

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 8003950:	bf00      	nop
 8003952:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <main+0x1c0>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	f083 0301 	eor.w	r3, r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f8      	bne.n	8003952 <main+0x122>
	  }							// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 8003960:	4b23      	ldr	r3, [pc, #140]	@ (80039f0 <main+0x1c0>)
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]

	  HAL_ResumeTick();
 8003966:	f001 fb29 	bl	8004fbc <HAL_ResumeTick>
	  HAL_IWDG_Refresh(&hiwdg);
 800396a:	4820      	ldr	r0, [pc, #128]	@ (80039ec <main+0x1bc>)
 800396c:	f006 fb07 	bl	8009f7e <HAL_IWDG_Refresh>
	  hwInput();
 8003970:	e7d9      	b.n	8003926 <main+0xf6>
 8003972:	bf00      	nop
 8003974:	20000af0 	.word	0x20000af0
 8003978:	20000bf8 	.word	0x20000bf8
 800397c:	200008c0 	.word	0x200008c0
 8003980:	20000be8 	.word	0x20000be8
 8003984:	20000948 	.word	0x20000948
 8003988:	20001244 	.word	0x20001244
 800398c:	2000072c 	.word	0x2000072c
 8003990:	20000708 	.word	0x20000708
 8003994:	20000e34 	.word	0x20000e34
 8003998:	20000714 	.word	0x20000714
 800399c:	20000720 	.word	0x20000720
 80039a0:	20000654 	.word	0x20000654
 80039a4:	20000ca0 	.word	0x20000ca0
 80039a8:	20000660 	.word	0x20000660
 80039ac:	2000066c 	.word	0x2000066c
 80039b0:	20000678 	.word	0x20000678
 80039b4:	20000684 	.word	0x20000684
 80039b8:	20000690 	.word	0x20000690
 80039bc:	2000069c 	.word	0x2000069c
 80039c0:	200006a8 	.word	0x200006a8
 80039c4:	200006c0 	.word	0x200006c0
 80039c8:	200006cc 	.word	0x200006cc
 80039cc:	200006d8 	.word	0x200006d8
 80039d0:	200006e4 	.word	0x200006e4
 80039d4:	20000fc8 	.word	0x20000fc8
 80039d8:	2000016c 	.word	0x2000016c
 80039dc:	20000c7c 	.word	0x20000c7c
 80039e0:	20000c90 	.word	0x20000c90
 80039e4:	2000115c 	.word	0x2000115c
 80039e8:	20000c3c 	.word	0x20000c3c
 80039ec:	20000b3c 	.word	0x20000b3c
 80039f0:	20001240 	.word	0x20001240

080039f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b096      	sub	sp, #88	@ 0x58
 80039f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039fa:	f107 0314 	add.w	r3, r7, #20
 80039fe:	2244      	movs	r2, #68	@ 0x44
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f009 fd85 	bl	800d512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a08:	463b      	mov	r3, r7
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	60da      	str	r2, [r3, #12]
 8003a14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003a16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003a1a:	f006 fb03 	bl	800a024 <HAL_PWREx_ControlVoltageScaling>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf14      	ite	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	2300      	moveq	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003a2e:	f000 fb8d 	bl	800414c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003a32:	2303      	movs	r3, #3
 8003a34:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a42:	2340      	movs	r3, #64	@ 0x40
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a4a:	f107 0314 	add.w	r3, r7, #20
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f006 fb86 	bl	800a160 <HAL_RCC_OscConfig>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8003a64:	f000 fb72 	bl	800414c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a68:	230f      	movs	r3, #15
 8003a6a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f006 ff87 	bl	800a994 <HAL_RCC_ClockConfig>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8003a96:	f000 fb59 	bl	800414c <Error_Handler>
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3758      	adds	r7, #88	@ 0x58
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* Initialize the IWDG peripheral */
  hiwdg.Instance = IWDG;
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <_ZL12MX_IWDG_Initv+0x40>)
 8003aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae8 <_ZL12MX_IWDG_Initv+0x44>)
 8003aac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003aae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae4 <_ZL12MX_IWDG_Initv+0x40>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 399;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <_ZL12MX_IWDG_Initv+0x40>)
 8003ab6:	f240 128f 	movw	r2, #399	@ 0x18f
 8003aba:	609a      	str	r2, [r3, #8]
  hiwdg.Init.Window	= 390;
 8003abc:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <_ZL12MX_IWDG_Initv+0x40>)
 8003abe:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8003ac2:	60da      	str	r2, [r3, #12]

  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003ac4:	4807      	ldr	r0, [pc, #28]	@ (8003ae4 <_ZL12MX_IWDG_Initv+0x40>)
 8003ac6:	f006 fa14 	bl	8009ef2 <HAL_IWDG_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <_ZL12MX_IWDG_Initv+0x3a>
  {
    Error_Handler();
 8003ada:	f000 fb37 	bl	800414c <Error_Handler>
  }

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000b3c 	.word	0x20000b3c
 8003ae8:	40003000 	.word	0x40003000

08003aec <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	@ 0x28
 8003af0:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
 8003b0c:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b10:	4a4a      	ldr	r2, [pc, #296]	@ (8003c3c <_ZL12MX_ADC1_Initv+0x150>)
 8003b12:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b14:	4b48      	ldr	r3, [pc, #288]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b1a:	4b47      	ldr	r3, [pc, #284]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b20:	4b45      	ldr	r3, [pc, #276]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003b26:	4b44      	ldr	r3, [pc, #272]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b2c:	4b42      	ldr	r3, [pc, #264]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b2e:	2204      	movs	r2, #4
 8003b30:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003b32:	4b41      	ldr	r3, [pc, #260]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8003b38:	4b3f      	ldr	r3, [pc, #252]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b40:	2203      	movs	r2, #3
 8003b42:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b44:	4b3c      	ldr	r3, [pc, #240]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b52:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b58:	4b37      	ldr	r3, [pc, #220]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003b60:	4b35      	ldr	r3, [pc, #212]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8003b66:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b6e:	4832      	ldr	r0, [pc, #200]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b70:	f001 fc3e 	bl	80053f0 <HAL_ADC_Init>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 8003b84:	f000 fae2 	bl	800414c <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	4619      	mov	r1, r3
 8003b92:	4829      	ldr	r0, [pc, #164]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003b94:	f002 fdf2 	bl	800677c <HAL_ADCEx_MultiModeConfigChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 8003ba8:	f000 fad0 	bl	800414c <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8003bac:	4b24      	ldr	r3, [pc, #144]	@ (8003c40 <_ZL12MX_ADC1_Initv+0x154>)
 8003bae:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003bb0:	2306      	movs	r3, #6
 8003bb2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003bb8:	237f      	movs	r3, #127	@ 0x7f
 8003bba:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	481b      	ldr	r0, [pc, #108]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003bca:	f002 f859 	bl	8005c80 <HAL_ADC_ConfigChannel>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf14      	ite	ne
 8003bd4:	2301      	movne	r3, #1
 8003bd6:	2300      	moveq	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 8003bde:	f000 fab5 	bl	800414c <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8003be2:	4b18      	ldr	r3, [pc, #96]	@ (8003c44 <_ZL12MX_ADC1_Initv+0x158>)
 8003be4:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003be6:	230c      	movs	r3, #12
 8003be8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4812      	ldr	r0, [pc, #72]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003bf0:	f002 f846 	bl	8005c80 <HAL_ADC_ConfigChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 8003c04:	f000 faa2 	bl	800414c <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <_ZL12MX_ADC1_Initv+0x15c>)
 8003c0a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003c0c:	2312      	movs	r3, #18
 8003c0e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4808      	ldr	r0, [pc, #32]	@ (8003c38 <_ZL12MX_ADC1_Initv+0x14c>)
 8003c16:	f002 f833 	bl	8005c80 <HAL_ADC_ConfigChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 8003c2a:	f000 fa8f 	bl	800414c <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 8003c2e:	bf00      	nop
 8003c30:	3728      	adds	r7, #40	@ 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	2000072c 	.word	0x2000072c
 8003c3c:	50040000 	.word	0x50040000
 8003c40:	04300002 	.word	0x04300002
 8003c44:	08600004 	.word	0x08600004
 8003c48:	0c900008 	.word	0x0c900008

08003c4c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c50:	4b22      	ldr	r3, [pc, #136]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c52:	4a23      	ldr	r2, [pc, #140]	@ (8003ce0 <_ZL12MX_I2C1_Initv+0x94>)
 8003c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003c56:	4b21      	ldr	r3, [pc, #132]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c58:	4a22      	ldr	r2, [pc, #136]	@ (8003ce4 <_ZL12MX_I2C1_Initv+0x98>)
 8003c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c62:	4b1e      	ldr	r3, [pc, #120]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c68:	4b1c      	ldr	r3, [pc, #112]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c74:	4b19      	ldr	r3, [pc, #100]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c7a:	4b18      	ldr	r3, [pc, #96]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c80:	4b16      	ldr	r3, [pc, #88]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c86:	4815      	ldr	r0, [pc, #84]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003c88:	f003 fd36 	bl	80076f8 <HAL_I2C_Init>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8003c9c:	f000 fa56 	bl	800414c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	480e      	ldr	r0, [pc, #56]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003ca4:	f006 f88e 	bl	8009dc4 <HAL_I2CEx_ConfigAnalogFilter>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8003cb8:	f000 fa48 	bl	800414c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4807      	ldr	r0, [pc, #28]	@ (8003cdc <_ZL12MX_I2C1_Initv+0x90>)
 8003cc0:	f006 f8cb 	bl	8009e5a <HAL_I2CEx_ConfigDigitalFilter>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8003cd4:	f000 fa3a 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	200007dc 	.word	0x200007dc
 8003ce0:	40005400 	.word	0x40005400
 8003ce4:	2000090e 	.word	0x2000090e

08003ce8 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cee:	1d3b      	adds	r3, r7, #4
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 8003cf8:	4b19      	ldr	r3, [pc, #100]	@ (8003d60 <_ZL12MX_TIM6_Initv+0x78>)
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8003d64 <_ZL12MX_TIM6_Initv+0x7c>)
 8003cfc:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 8003cfe:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <_ZL12MX_TIM6_Initv+0x78>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d04:	4b16      	ldr	r3, [pc, #88]	@ (8003d60 <_ZL12MX_TIM6_Initv+0x78>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <_ZL12MX_TIM6_Initv+0x78>)
 8003d0c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003d10:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d12:	4b13      	ldr	r3, [pc, #76]	@ (8003d60 <_ZL12MX_TIM6_Initv+0x78>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d18:	4811      	ldr	r0, [pc, #68]	@ (8003d60 <_ZL12MX_TIM6_Initv+0x78>)
 8003d1a:	f007 fd29 	bl	800b770 <HAL_TIM_Base_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 8003d2e:	f000 fa0d 	bl	800414c <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4808      	ldr	r0, [pc, #32]	@ (8003d60 <_ZL12MX_TIM6_Initv+0x78>)
 8003d40:	f007 ffa2 	bl	800bc88 <HAL_TIMEx_MasterConfigSynchronization>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 8003d54:	f000 f9fa 	bl	800414c <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000af0 	.word	0x20000af0
 8003d64:	40001000 	.word	0x40001000

08003d68 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d6c:	4b16      	ldr	r3, [pc, #88]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003d6e:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <_ZL13MX_UART4_Initv+0x64>)
 8003d70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8003d72:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003d74:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8003d78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d7a:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003d80:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003d8e:	220c      	movs	r2, #12
 8003d90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003da4:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003daa:	4807      	ldr	r0, [pc, #28]	@ (8003dc8 <_ZL13MX_UART4_Initv+0x60>)
 8003dac:	f008 f812 	bl	800bdd4 <HAL_UART_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bf14      	ite	ne
 8003db6:	2301      	movne	r3, #1
 8003db8:	2300      	moveq	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8003dc0:	f000 f9c4 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200008c0 	.word	0x200008c0
 8003dcc:	40004c00 	.word	0x40004c00

08003dd0 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003dd4:	4b16      	ldr	r3, [pc, #88]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003dd6:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <_ZL13MX_UART5_Initv+0x64>)
 8003dd8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003ddc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003de0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003de2:	4b13      	ldr	r3, [pc, #76]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003de8:	4b11      	ldr	r3, [pc, #68]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 8003dee:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003df4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003df6:	220c      	movs	r2, #12
 8003df8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e06:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e0c:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003e12:	4807      	ldr	r0, [pc, #28]	@ (8003e30 <_ZL13MX_UART5_Initv+0x60>)
 8003e14:	f007 ffde 	bl	800bdd4 <HAL_UART_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8003e28:	f000 f990 	bl	800414c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003e2c:	bf00      	nop
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000948 	.word	0x20000948
 8003e34:	40005000 	.word	0x40005000

08003e38 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee8 <_ZL11MX_DMA_Initv+0xb0>)
 8003e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e42:	4a29      	ldr	r2, [pc, #164]	@ (8003ee8 <_ZL11MX_DMA_Initv+0xb0>)
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	6493      	str	r3, [r2, #72]	@ 0x48
 8003e4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ee8 <_ZL11MX_DMA_Initv+0xb0>)
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e56:	4b24      	ldr	r3, [pc, #144]	@ (8003ee8 <_ZL11MX_DMA_Initv+0xb0>)
 8003e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5a:	4a23      	ldr	r2, [pc, #140]	@ (8003ee8 <_ZL11MX_DMA_Initv+0xb0>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6493      	str	r3, [r2, #72]	@ 0x48
 8003e62:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <_ZL11MX_DMA_Initv+0xb0>)
 8003e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2100      	movs	r1, #0
 8003e72:	200b      	movs	r0, #11
 8003e74:	f002 fe31 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e78:	200b      	movs	r0, #11
 8003e7a:	f002 fe4a 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	2010      	movs	r0, #16
 8003e84:	f002 fe29 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003e88:	2010      	movs	r0, #16
 8003e8a:	f002 fe42 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	2011      	movs	r0, #17
 8003e94:	f002 fe21 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003e98:	2011      	movs	r0, #17
 8003e9a:	f002 fe3a 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	2038      	movs	r0, #56	@ 0x38
 8003ea4:	f002 fe19 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003ea8:	2038      	movs	r0, #56	@ 0x38
 8003eaa:	f002 fe32 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	2039      	movs	r0, #57	@ 0x39
 8003eb4:	f002 fe11 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8003eb8:	2039      	movs	r0, #57	@ 0x39
 8003eba:	f002 fe2a 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	203a      	movs	r0, #58	@ 0x3a
 8003ec4:	f002 fe09 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003ec8:	203a      	movs	r0, #58	@ 0x3a
 8003eca:	f002 fe22 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	203c      	movs	r0, #60	@ 0x3c
 8003ed4:	f002 fe01 	bl	8006ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003ed8:	203c      	movs	r0, #60	@ 0x3c
 8003eda:	f002 fe1a 	bl	8006b12 <HAL_NVIC_EnableIRQ>

}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000

08003eec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	@ 0x30
 8003ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef2:	f107 031c 	add.w	r3, r7, #28
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f02:	4b4b      	ldr	r3, [pc, #300]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f06:	4a4a      	ldr	r2, [pc, #296]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f08:	f043 0310 	orr.w	r3, r3, #16
 8003f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f0e:	4b48      	ldr	r3, [pc, #288]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f1a:	4b45      	ldr	r3, [pc, #276]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1e:	4a44      	ldr	r2, [pc, #272]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f20:	f043 0304 	orr.w	r3, r3, #4
 8003f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f26:	4b42      	ldr	r3, [pc, #264]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f32:	4b3f      	ldr	r3, [pc, #252]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f36:	4a3e      	ldr	r2, [pc, #248]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4a:	4b39      	ldr	r3, [pc, #228]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4e:	4a38      	ldr	r2, [pc, #224]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f56:	4b36      	ldr	r3, [pc, #216]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f62:	4b33      	ldr	r3, [pc, #204]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	4a32      	ldr	r2, [pc, #200]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f6e:	4b30      	ldr	r3, [pc, #192]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f86:	4b2a      	ldr	r3, [pc, #168]	@ (8004030 <_ZL12MX_GPIO_Initv+0x144>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003f92:	2200      	movs	r2, #0
 8003f94:	210f      	movs	r1, #15
 8003f96:	4827      	ldr	r0, [pc, #156]	@ (8004034 <_ZL12MX_GPIO_Initv+0x148>)
 8003f98:	f003 fb96 	bl	80076c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2174      	movs	r1, #116	@ 0x74
 8003fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fa4:	f003 fb90 	bl	80076c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f64f 7105 	movw	r1, #65285	@ 0xff05
 8003fae:	4822      	ldr	r0, [pc, #136]	@ (8004038 <_ZL12MX_GPIO_Initv+0x14c>)
 8003fb0:	f003 fb8a 	bl	80076c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fc4:	f107 031c 	add.w	r3, r7, #28
 8003fc8:	4619      	mov	r1, r3
 8003fca:	481a      	ldr	r0, [pc, #104]	@ (8004034 <_ZL12MX_GPIO_Initv+0x148>)
 8003fcc:	f003 f8e0 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003fd0:	2374      	movs	r3, #116	@ 0x74
 8003fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe0:	f107 031c 	add.w	r3, r7, #28
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fea:	f003 f8d1 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fee:	2308      	movs	r3, #8
 8003ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffa:	f107 031c 	add.w	r3, r7, #28
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004004:	f003 f8c4 	bl	8007190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004008:	f64f 7301 	movw	r3, #65281	@ 0xff01
 800400c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400e:	2301      	movs	r3, #1
 8004010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004012:	2300      	movs	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004016:	2300      	movs	r3, #0
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800401a:	f107 031c 	add.w	r3, r7, #28
 800401e:	4619      	mov	r1, r3
 8004020:	4805      	ldr	r0, [pc, #20]	@ (8004038 <_ZL12MX_GPIO_Initv+0x14c>)
 8004022:	f003 f8b5 	bl	8007190 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004026:	bf00      	nop
 8004028:	3730      	adds	r7, #48	@ 0x30
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	48001000 	.word	0x48001000
 8004038:	48000c00 	.word	0x48000c00

0800403c <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a05      	ldr	r2, [pc, #20]	@ (8004060 <HAL_ADC_ConvCpltCallback+0x24>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d102      	bne.n	8004054 <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 800404e:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_ADC_ConvCpltCallback+0x28>)
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	50040000 	.word	0x50040000
 8004064:	20001250 	.word	0x20001250

08004068 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a15      	ldr	r2, [pc, #84]	@ (80040cc <HAL_UART_RxCpltCallback+0x64>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10a      	bne.n	8004090 <HAL_UART_RxCpltCallback+0x28>
		loraIn.insertElement(rxLora[0]);
 800407a:	4b15      	ldr	r3, [pc, #84]	@ (80040d0 <HAL_UART_RxCpltCallback+0x68>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	4619      	mov	r1, r3
 8004080:	4814      	ldr	r0, [pc, #80]	@ (80040d4 <HAL_UART_RxCpltCallback+0x6c>)
 8004082:	f7fd fa23 	bl	80014cc <_ZN8fifoUart13insertElementEh>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 8004086:	2201      	movs	r2, #1
 8004088:	4911      	ldr	r1, [pc, #68]	@ (80040d0 <HAL_UART_RxCpltCallback+0x68>)
 800408a:	4813      	ldr	r0, [pc, #76]	@ (80040d8 <HAL_UART_RxCpltCallback+0x70>)
 800408c:	f007 ffaa 	bl	800bfe4 <HAL_UART_Receive_DMA>
	}

	if(huart->Instance == UART5){
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a11      	ldr	r2, [pc, #68]	@ (80040dc <HAL_UART_RxCpltCallback+0x74>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d114      	bne.n	80040c4 <HAL_UART_RxCpltCallback+0x5c>
		gpsIn.insertElement(rxGps[0]);
 800409a:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <HAL_UART_RxCpltCallback+0x78>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	4619      	mov	r1, r3
 80040a0:	4810      	ldr	r0, [pc, #64]	@ (80040e4 <HAL_UART_RxCpltCallback+0x7c>)
 80040a2:	f7fd fa13 	bl	80014cc <_ZN8fifoUart13insertElementEh>
		gpsIn.insertElement(rxGps[1]);
 80040a6:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <HAL_UART_RxCpltCallback+0x78>)
 80040a8:	785b      	ldrb	r3, [r3, #1]
 80040aa:	4619      	mov	r1, r3
 80040ac:	480d      	ldr	r0, [pc, #52]	@ (80040e4 <HAL_UART_RxCpltCallback+0x7c>)
 80040ae:	f7fd fa0d 	bl	80014cc <_ZN8fifoUart13insertElementEh>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxGps, sizeof(rxGps));
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart5, rxGps, sizeof(rxGps));
 80040b2:	2202      	movs	r2, #2
 80040b4:	490a      	ldr	r1, [pc, #40]	@ (80040e0 <HAL_UART_RxCpltCallback+0x78>)
 80040b6:	480c      	ldr	r0, [pc, #48]	@ (80040e8 <HAL_UART_RxCpltCallback+0x80>)
 80040b8:	f007 ff94 	bl	800bfe4 <HAL_UART_Receive_DMA>
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80040bc:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <HAL_UART_RxCpltCallback+0x80>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2210      	movs	r2, #16
 80040c2:	621a      	str	r2, [r3, #32]
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
	}
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40004c00 	.word	0x40004c00
 80040d0:	20000bf8 	.word	0x20000bf8
 80040d4:	20000bfc 	.word	0x20000bfc
 80040d8:	200008c0 	.word	0x200008c0
 80040dc:	40005000 	.word	0x40005000
 80040e0:	20000be8 	.word	0x20000be8
 80040e4:	20000ba8 	.word	0x20000ba8
 80040e8:	20000948 	.word	0x20000948

080040ec <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a05      	ldr	r2, [pc, #20]	@ (8004110 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d102      	bne.n	8004104 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
	}
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40001000 	.word	0x40001000
 8004114:	20001240 	.word	0x20001240

08004118 <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 8004120:	4b04      	ldr	r3, [pc, #16]	@ (8004134 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	200011ab 	.word	0x200011ab

08004138 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004150:	b672      	cpsid	i
}
 8004152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <Error_Handler+0x8>

08004158 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d115      	bne.n	8004194 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800416e:	4293      	cmp	r3, r2
 8004170:	d110      	bne.n	8004194 <_Z41__static_initialization_and_destruction_0ii+0x3c>
gpsInput gpsInput;		// Instancia de gpsInput
 8004172:	480a      	ldr	r0, [pc, #40]	@ (800419c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004174:	f7fd fa32 	bl	80015dc <_ZN8gpsInputC1Ev>
fifoUart	gpsIn;		//
 8004178:	4809      	ldr	r0, [pc, #36]	@ (80041a0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800417a:	f7fd f997 	bl	80014ac <_ZN8fifoUartC1Ev>
fifoUart loraIn;			// FIFO que recibe los datos
 800417e:	4809      	ldr	r0, [pc, #36]	@ (80041a4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004180:	f7fd f994 	bl	80014ac <_ZN8fifoUartC1Ev>
wdTimeout loraTimeWd(4000);
 8004184:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8004188:	4807      	ldr	r0, [pc, #28]	@ (80041a8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800418a:	f7ff f8d6 	bl	800333a <_ZN9wdTimeoutC1El>
fifoCommands fifoContent;
 800418e:	4807      	ldr	r0, [pc, #28]	@ (80041ac <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004190:	f7ff fb10 	bl	80037b4 <_ZN12fifoCommandsC1Ev>
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000b50 	.word	0x20000b50
 80041a0:	20000ba8 	.word	0x20000ba8
 80041a4:	20000bfc 	.word	0x20000bfc
 80041a8:	20001190 	.word	0x20001190
 80041ac:	200011ac 	.word	0x200011ac

080041b0 <_GLOBAL__sub_I_hadc1>:
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80041b8:	2001      	movs	r0, #1
 80041ba:	f7ff ffcd 	bl	8004158 <_Z41__static_initialization_and_destruction_0ii>
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004204 <HAL_MspInit+0x44>)
 80041c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004204 <HAL_MspInit+0x44>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80041d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <HAL_MspInit+0x44>)
 80041d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_MspInit+0x44>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e2:	4a08      	ldr	r2, [pc, #32]	@ (8004204 <HAL_MspInit+0x44>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ea:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <HAL_MspInit+0x44>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000

08004208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b0ac      	sub	sp, #176	@ 0xb0
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004220:	f107 0310 	add.w	r3, r7, #16
 8004224:	228c      	movs	r2, #140	@ 0x8c
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f009 f972 	bl	800d512 <memset>
  if(hadc->Instance==ADC1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a40      	ldr	r2, [pc, #256]	@ (8004334 <HAL_ADC_MspInit+0x12c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d179      	bne.n	800432c <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004238:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800423c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800423e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8004246:	2303      	movs	r3, #3
 8004248:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800424e:	2308      	movs	r3, #8
 8004250:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004252:	2302      	movs	r3, #2
 8004254:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004256:	2302      	movs	r3, #2
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800425a:	2302      	movs	r3, #2
 800425c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800425e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004264:	f107 0310 	add.w	r3, r7, #16
 8004268:	4618      	mov	r0, r3
 800426a:	f006 fdb7 	bl	800addc <HAL_RCCEx_PeriphCLKConfig>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8004274:	f7ff ff6a 	bl	800414c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004278:	4b2f      	ldr	r3, [pc, #188]	@ (8004338 <HAL_ADC_MspInit+0x130>)
 800427a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427c:	4a2e      	ldr	r2, [pc, #184]	@ (8004338 <HAL_ADC_MspInit+0x130>)
 800427e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004284:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <HAL_ADC_MspInit+0x130>)
 8004286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004290:	4b29      	ldr	r3, [pc, #164]	@ (8004338 <HAL_ADC_MspInit+0x130>)
 8004292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004294:	4a28      	ldr	r2, [pc, #160]	@ (8004338 <HAL_ADC_MspInit+0x130>)
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800429c:	4b26      	ldr	r3, [pc, #152]	@ (8004338 <HAL_ADC_MspInit+0x130>)
 800429e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80042a8:	2307      	movs	r3, #7
 80042aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042ae:	2303      	movs	r3, #3
 80042b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80042be:	4619      	mov	r1, r3
 80042c0:	481e      	ldr	r0, [pc, #120]	@ (800433c <HAL_ADC_MspInit+0x134>)
 80042c2:	f002 ff65 	bl	8007190 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80042c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004344 <HAL_ADC_MspInit+0x13c>)
 80042ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80042cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80042d8:	4b19      	ldr	r3, [pc, #100]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80042de:	4b18      	ldr	r3, [pc, #96]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042e0:	2280      	movs	r2, #128	@ 0x80
 80042e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042e4:	4b16      	ldr	r3, [pc, #88]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042ec:	4b14      	ldr	r3, [pc, #80]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80042f4:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042f6:	2220      	movs	r2, #32
 80042f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80042fa:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004300:	480f      	ldr	r0, [pc, #60]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 8004302:	f002 fc2f 	bl	8006b64 <HAL_DMA_Init>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800430c:	f7ff ff1e 	bl	800414c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0b      	ldr	r2, [pc, #44]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 8004314:	651a      	str	r2, [r3, #80]	@ 0x50
 8004316:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <HAL_ADC_MspInit+0x138>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800431c:	2200      	movs	r2, #0
 800431e:	2100      	movs	r1, #0
 8004320:	2012      	movs	r0, #18
 8004322:	f002 fbda 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004326:	2012      	movs	r0, #18
 8004328:	f002 fbf3 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800432c:	bf00      	nop
 800432e:	37b0      	adds	r7, #176	@ 0xb0
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	50040000 	.word	0x50040000
 8004338:	40021000 	.word	0x40021000
 800433c:	48000800 	.word	0x48000800
 8004340:	20000794 	.word	0x20000794
 8004344:	40020008 	.word	0x40020008

08004348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b0ac      	sub	sp, #176	@ 0xb0
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004360:	f107 0310 	add.w	r3, r7, #16
 8004364:	228c      	movs	r2, #140	@ 0x8c
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f009 f8d2 	bl	800d512 <memset>
  if(hi2c->Instance==I2C1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a52      	ldr	r2, [pc, #328]	@ (80044bc <HAL_I2C_MspInit+0x174>)
 8004374:	4293      	cmp	r3, r2
 8004376:	f040 809d 	bne.w	80044b4 <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800437a:	2340      	movs	r3, #64	@ 0x40
 800437c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800437e:	2300      	movs	r3, #0
 8004380:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004382:	f107 0310 	add.w	r3, r7, #16
 8004386:	4618      	mov	r0, r3
 8004388:	f006 fd28 	bl	800addc <HAL_RCCEx_PeriphCLKConfig>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004392:	f7ff fedb 	bl	800414c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004396:	4b4a      	ldr	r3, [pc, #296]	@ (80044c0 <HAL_I2C_MspInit+0x178>)
 8004398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439a:	4a49      	ldr	r2, [pc, #292]	@ (80044c0 <HAL_I2C_MspInit+0x178>)
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043a2:	4b47      	ldr	r3, [pc, #284]	@ (80044c0 <HAL_I2C_MspInit+0x178>)
 80043a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043ae:	23c0      	movs	r3, #192	@ 0xc0
 80043b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043b4:	2312      	movs	r3, #18
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c0:	2303      	movs	r3, #3
 80043c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043c6:	2304      	movs	r3, #4
 80043c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80043d0:	4619      	mov	r1, r3
 80043d2:	483c      	ldr	r0, [pc, #240]	@ (80044c4 <HAL_I2C_MspInit+0x17c>)
 80043d4:	f002 fedc 	bl	8007190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043d8:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_I2C_MspInit+0x178>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043dc:	4a38      	ldr	r2, [pc, #224]	@ (80044c0 <HAL_I2C_MspInit+0x178>)
 80043de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e4:	4b36      	ldr	r3, [pc, #216]	@ (80044c0 <HAL_I2C_MspInit+0x178>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80043f0:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 80043f2:	4a36      	ldr	r2, [pc, #216]	@ (80044cc <HAL_I2C_MspInit+0x184>)
 80043f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80043f6:	4b34      	ldr	r3, [pc, #208]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 80043f8:	2203      	movs	r2, #3
 80043fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043fc:	4b32      	ldr	r3, [pc, #200]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 8004404:	2200      	movs	r2, #0
 8004406:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004408:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 800440a:	2280      	movs	r2, #128	@ 0x80
 800440c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800440e:	4b2e      	ldr	r3, [pc, #184]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 8004410:	2200      	movs	r2, #0
 8004412:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004414:	4b2c      	ldr	r3, [pc, #176]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 8004416:	2200      	movs	r2, #0
 8004418:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800441a:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 800441c:	2200      	movs	r2, #0
 800441e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004420:	4b29      	ldr	r3, [pc, #164]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 8004422:	2200      	movs	r2, #0
 8004424:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004426:	4828      	ldr	r0, [pc, #160]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 8004428:	f002 fb9c 	bl	8006b64 <HAL_DMA_Init>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8004432:	f7ff fe8b 	bl	800414c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a23      	ldr	r2, [pc, #140]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 800443a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800443c:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <HAL_I2C_MspInit+0x180>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8004442:	4b23      	ldr	r3, [pc, #140]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 8004444:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <HAL_I2C_MspInit+0x18c>)
 8004446:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8004448:	4b21      	ldr	r3, [pc, #132]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 800444a:	2203      	movs	r2, #3
 800444c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800444e:	4b20      	ldr	r3, [pc, #128]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 8004450:	2210      	movs	r2, #16
 8004452:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004454:	4b1e      	ldr	r3, [pc, #120]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 8004456:	2200      	movs	r2, #0
 8004458:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800445a:	4b1d      	ldr	r3, [pc, #116]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 800445c:	2280      	movs	r2, #128	@ 0x80
 800445e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004460:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 8004462:	2200      	movs	r2, #0
 8004464:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004466:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800446c:	4b18      	ldr	r3, [pc, #96]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 800446e:	2200      	movs	r2, #0
 8004470:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004472:	4b17      	ldr	r3, [pc, #92]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 8004474:	2200      	movs	r2, #0
 8004476:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004478:	4815      	ldr	r0, [pc, #84]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 800447a:	f002 fb73 	bl	8006b64 <HAL_DMA_Init>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 8004484:	f7ff fe62 	bl	800414c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a11      	ldr	r2, [pc, #68]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 800448c:	639a      	str	r2, [r3, #56]	@ 0x38
 800448e:	4a10      	ldr	r2, [pc, #64]	@ (80044d0 <HAL_I2C_MspInit+0x188>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004494:	2200      	movs	r2, #0
 8004496:	2100      	movs	r1, #0
 8004498:	201f      	movs	r0, #31
 800449a:	f002 fb1e 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800449e:	201f      	movs	r0, #31
 80044a0:	f002 fb37 	bl	8006b12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80044a4:	2200      	movs	r2, #0
 80044a6:	2100      	movs	r1, #0
 80044a8:	2020      	movs	r0, #32
 80044aa:	f002 fb16 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80044ae:	2020      	movs	r0, #32
 80044b0:	f002 fb2f 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80044b4:	bf00      	nop
 80044b6:	37b0      	adds	r7, #176	@ 0xb0
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40005400 	.word	0x40005400
 80044c0:	40021000 	.word	0x40021000
 80044c4:	48000400 	.word	0x48000400
 80044c8:	20000830 	.word	0x20000830
 80044cc:	40020080 	.word	0x40020080
 80044d0:	20000878 	.word	0x20000878
 80044d4:	4002006c 	.word	0x4002006c

080044d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <HAL_TIM_Base_MspInit+0x44>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d113      	bne.n	8004512 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <HAL_TIM_Base_MspInit+0x48>)
 80044ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004520 <HAL_TIM_Base_MspInit+0x48>)
 80044f0:	f043 0310 	orr.w	r3, r3, #16
 80044f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004520 <HAL_TIM_Base_MspInit+0x48>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004502:	2200      	movs	r2, #0
 8004504:	2100      	movs	r1, #0
 8004506:	2036      	movs	r0, #54	@ 0x36
 8004508:	f002 fae7 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800450c:	2036      	movs	r0, #54	@ 0x36
 800450e:	f002 fb00 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40001000 	.word	0x40001000
 8004520:	40021000 	.word	0x40021000

08004524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b0b0      	sub	sp, #192	@ 0xc0
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800453c:	f107 0320 	add.w	r3, r7, #32
 8004540:	228c      	movs	r2, #140	@ 0x8c
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f008 ffe4 	bl	800d512 <memset>
  if(huart->Instance==UART4)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a4d      	ldr	r2, [pc, #308]	@ (8004684 <HAL_UART_MspInit+0x160>)
 8004550:	4293      	cmp	r3, r2
 8004552:	f040 80a3 	bne.w	800469c <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004556:	2308      	movs	r3, #8
 8004558:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800455a:	2300      	movs	r3, #0
 800455c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800455e:	f107 0320 	add.w	r3, r7, #32
 8004562:	4618      	mov	r0, r3
 8004564:	f006 fc3a 	bl	800addc <HAL_RCCEx_PeriphCLKConfig>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800456e:	f7ff fded 	bl	800414c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004572:	4b45      	ldr	r3, [pc, #276]	@ (8004688 <HAL_UART_MspInit+0x164>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	4a44      	ldr	r2, [pc, #272]	@ (8004688 <HAL_UART_MspInit+0x164>)
 8004578:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800457c:	6593      	str	r3, [r2, #88]	@ 0x58
 800457e:	4b42      	ldr	r3, [pc, #264]	@ (8004688 <HAL_UART_MspInit+0x164>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458a:	4b3f      	ldr	r3, [pc, #252]	@ (8004688 <HAL_UART_MspInit+0x164>)
 800458c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458e:	4a3e      	ldr	r2, [pc, #248]	@ (8004688 <HAL_UART_MspInit+0x164>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004596:	4b3c      	ldr	r3, [pc, #240]	@ (8004688 <HAL_UART_MspInit+0x164>)
 8004598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045a2:	2303      	movs	r3, #3
 80045a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a8:	2302      	movs	r3, #2
 80045aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b4:	2303      	movs	r3, #3
 80045b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80045ba:	2308      	movs	r3, #8
 80045bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80045c4:	4619      	mov	r1, r3
 80045c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045ca:	f002 fde1 	bl	8007190 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80045ce:	4b2f      	ldr	r3, [pc, #188]	@ (800468c <HAL_UART_MspInit+0x168>)
 80045d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004690 <HAL_UART_MspInit+0x16c>)
 80045d2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80045d4:	4b2d      	ldr	r3, [pc, #180]	@ (800468c <HAL_UART_MspInit+0x168>)
 80045d6:	2202      	movs	r2, #2
 80045d8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045da:	4b2c      	ldr	r3, [pc, #176]	@ (800468c <HAL_UART_MspInit+0x168>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045e0:	4b2a      	ldr	r3, [pc, #168]	@ (800468c <HAL_UART_MspInit+0x168>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045e6:	4b29      	ldr	r3, [pc, #164]	@ (800468c <HAL_UART_MspInit+0x168>)
 80045e8:	2280      	movs	r2, #128	@ 0x80
 80045ea:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045ec:	4b27      	ldr	r3, [pc, #156]	@ (800468c <HAL_UART_MspInit+0x168>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045f2:	4b26      	ldr	r3, [pc, #152]	@ (800468c <HAL_UART_MspInit+0x168>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80045f8:	4b24      	ldr	r3, [pc, #144]	@ (800468c <HAL_UART_MspInit+0x168>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045fe:	4b23      	ldr	r3, [pc, #140]	@ (800468c <HAL_UART_MspInit+0x168>)
 8004600:	2200      	movs	r2, #0
 8004602:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004604:	4821      	ldr	r0, [pc, #132]	@ (800468c <HAL_UART_MspInit+0x168>)
 8004606:	f002 faad 	bl	8006b64 <HAL_DMA_Init>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8004610:	f7ff fd9c 	bl	800414c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a1d      	ldr	r2, [pc, #116]	@ (800468c <HAL_UART_MspInit+0x168>)
 8004618:	675a      	str	r2, [r3, #116]	@ 0x74
 800461a:	4a1c      	ldr	r2, [pc, #112]	@ (800468c <HAL_UART_MspInit+0x168>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8004620:	4b1c      	ldr	r3, [pc, #112]	@ (8004694 <HAL_UART_MspInit+0x170>)
 8004622:	4a1d      	ldr	r2, [pc, #116]	@ (8004698 <HAL_UART_MspInit+0x174>)
 8004624:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8004626:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <HAL_UART_MspInit+0x170>)
 8004628:	2202      	movs	r2, #2
 800462a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800462c:	4b19      	ldr	r3, [pc, #100]	@ (8004694 <HAL_UART_MspInit+0x170>)
 800462e:	2210      	movs	r2, #16
 8004630:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004632:	4b18      	ldr	r3, [pc, #96]	@ (8004694 <HAL_UART_MspInit+0x170>)
 8004634:	2200      	movs	r2, #0
 8004636:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004638:	4b16      	ldr	r3, [pc, #88]	@ (8004694 <HAL_UART_MspInit+0x170>)
 800463a:	2280      	movs	r2, #128	@ 0x80
 800463c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800463e:	4b15      	ldr	r3, [pc, #84]	@ (8004694 <HAL_UART_MspInit+0x170>)
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004644:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <HAL_UART_MspInit+0x170>)
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800464a:	4b12      	ldr	r3, [pc, #72]	@ (8004694 <HAL_UART_MspInit+0x170>)
 800464c:	2200      	movs	r2, #0
 800464e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004650:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <HAL_UART_MspInit+0x170>)
 8004652:	2200      	movs	r2, #0
 8004654:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004656:	480f      	ldr	r0, [pc, #60]	@ (8004694 <HAL_UART_MspInit+0x170>)
 8004658:	f002 fa84 	bl	8006b64 <HAL_DMA_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8004662:	f7ff fd73 	bl	800414c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a0a      	ldr	r2, [pc, #40]	@ (8004694 <HAL_UART_MspInit+0x170>)
 800466a:	671a      	str	r2, [r3, #112]	@ 0x70
 800466c:	4a09      	ldr	r2, [pc, #36]	@ (8004694 <HAL_UART_MspInit+0x170>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004672:	2200      	movs	r2, #0
 8004674:	2100      	movs	r1, #0
 8004676:	2034      	movs	r0, #52	@ 0x34
 8004678:	f002 fa2f 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800467c:	2034      	movs	r0, #52	@ 0x34
 800467e:	f002 fa48 	bl	8006b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8004682:	e0c9      	b.n	8004818 <HAL_UART_MspInit+0x2f4>
 8004684:	40004c00 	.word	0x40004c00
 8004688:	40021000 	.word	0x40021000
 800468c:	200009d0 	.word	0x200009d0
 8004690:	40020458 	.word	0x40020458
 8004694:	20000a18 	.word	0x20000a18
 8004698:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a5f      	ldr	r2, [pc, #380]	@ (8004820 <HAL_UART_MspInit+0x2fc>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	f040 80b8 	bne.w	8004818 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80046a8:	2310      	movs	r3, #16
 80046aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 80046ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046b2:	f107 0320 	add.w	r3, r7, #32
 80046b6:	4618      	mov	r0, r3
 80046b8:	f006 fb90 	bl	800addc <HAL_RCCEx_PeriphCLKConfig>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 80046c2:	f7ff fd43 	bl	800414c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80046c6:	4b57      	ldr	r3, [pc, #348]	@ (8004824 <HAL_UART_MspInit+0x300>)
 80046c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ca:	4a56      	ldr	r2, [pc, #344]	@ (8004824 <HAL_UART_MspInit+0x300>)
 80046cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d2:	4b54      	ldr	r3, [pc, #336]	@ (8004824 <HAL_UART_MspInit+0x300>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046de:	4b51      	ldr	r3, [pc, #324]	@ (8004824 <HAL_UART_MspInit+0x300>)
 80046e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e2:	4a50      	ldr	r2, [pc, #320]	@ (8004824 <HAL_UART_MspInit+0x300>)
 80046e4:	f043 0304 	orr.w	r3, r3, #4
 80046e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004824 <HAL_UART_MspInit+0x300>)
 80046ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004824 <HAL_UART_MspInit+0x300>)
 80046f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004824 <HAL_UART_MspInit+0x300>)
 80046fc:	f043 0308 	orr.w	r3, r3, #8
 8004700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004702:	4b48      	ldr	r3, [pc, #288]	@ (8004824 <HAL_UART_MspInit+0x300>)
 8004704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800470e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004716:	2302      	movs	r3, #2
 8004718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004722:	2303      	movs	r3, #3
 8004724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004728:	2308      	movs	r3, #8
 800472a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800472e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004732:	4619      	mov	r1, r3
 8004734:	483c      	ldr	r0, [pc, #240]	@ (8004828 <HAL_UART_MspInit+0x304>)
 8004736:	f002 fd2b 	bl	8007190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800473a:	2304      	movs	r3, #4
 800473c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004746:	2300      	movs	r3, #0
 8004748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474c:	2303      	movs	r3, #3
 800474e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004752:	2308      	movs	r3, #8
 8004754:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004758:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800475c:	4619      	mov	r1, r3
 800475e:	4833      	ldr	r0, [pc, #204]	@ (800482c <HAL_UART_MspInit+0x308>)
 8004760:	f002 fd16 	bl	8007190 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8004764:	4b32      	ldr	r3, [pc, #200]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 8004766:	4a33      	ldr	r2, [pc, #204]	@ (8004834 <HAL_UART_MspInit+0x310>)
 8004768:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 800476a:	4b31      	ldr	r3, [pc, #196]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 800476c:	2202      	movs	r2, #2
 800476e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004770:	4b2f      	ldr	r3, [pc, #188]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 8004772:	2200      	movs	r2, #0
 8004774:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004776:	4b2e      	ldr	r3, [pc, #184]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 8004778:	2200      	movs	r2, #0
 800477a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800477c:	4b2c      	ldr	r3, [pc, #176]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 800477e:	2280      	movs	r2, #128	@ 0x80
 8004780:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004782:	4b2b      	ldr	r3, [pc, #172]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 8004784:	2200      	movs	r2, #0
 8004786:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004788:	4b29      	ldr	r3, [pc, #164]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 800478a:	2200      	movs	r2, #0
 800478c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800478e:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 8004790:	2200      	movs	r2, #0
 8004792:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004794:	4b26      	ldr	r3, [pc, #152]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 8004796:	2200      	movs	r2, #0
 8004798:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800479a:	4825      	ldr	r0, [pc, #148]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 800479c:	f002 f9e2 	bl	8006b64 <HAL_DMA_Init>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_UART_MspInit+0x286>
      Error_Handler();
 80047a6:	f7ff fcd1 	bl	800414c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a20      	ldr	r2, [pc, #128]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 80047ae:	675a      	str	r2, [r3, #116]	@ 0x74
 80047b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004830 <HAL_UART_MspInit+0x30c>)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 80047b6:	4b20      	ldr	r3, [pc, #128]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047b8:	4a20      	ldr	r2, [pc, #128]	@ (800483c <HAL_UART_MspInit+0x318>)
 80047ba:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 80047bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047be:	2202      	movs	r2, #2
 80047c0:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047c4:	2210      	movs	r2, #16
 80047c6:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047d0:	2280      	movs	r2, #128	@ 0x80
 80047d2:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047d4:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047da:	4b17      	ldr	r3, [pc, #92]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047dc:	2200      	movs	r2, #0
 80047de:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80047e0:	4b15      	ldr	r3, [pc, #84]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047e6:	4b14      	ldr	r3, [pc, #80]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80047ec:	4812      	ldr	r0, [pc, #72]	@ (8004838 <HAL_UART_MspInit+0x314>)
 80047ee:	f002 f9b9 	bl	8006b64 <HAL_DMA_Init>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 80047f8:	f7ff fca8 	bl	800414c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004838 <HAL_UART_MspInit+0x314>)
 8004800:	671a      	str	r2, [r3, #112]	@ 0x70
 8004802:	4a0d      	ldr	r2, [pc, #52]	@ (8004838 <HAL_UART_MspInit+0x314>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004808:	2200      	movs	r2, #0
 800480a:	2100      	movs	r1, #0
 800480c:	2035      	movs	r0, #53	@ 0x35
 800480e:	f002 f964 	bl	8006ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004812:	2035      	movs	r0, #53	@ 0x35
 8004814:	f002 f97d 	bl	8006b12 <HAL_NVIC_EnableIRQ>
}
 8004818:	bf00      	nop
 800481a:	37c0      	adds	r7, #192	@ 0xc0
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40005000 	.word	0x40005000
 8004824:	40021000 	.word	0x40021000
 8004828:	48000800 	.word	0x48000800
 800482c:	48000c00 	.word	0x48000c00
 8004830:	20000a60 	.word	0x20000a60
 8004834:	4002041c 	.word	0x4002041c
 8004838:	20000aa8 	.word	0x20000aa8
 800483c:	40020408 	.word	0x40020408

08004840 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a20      	ldr	r2, [pc, #128]	@ (80048d0 <HAL_UART_MspDeInit+0x90>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d118      	bne.n	8004884 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004852:	4b20      	ldr	r3, [pc, #128]	@ (80048d4 <HAL_UART_MspDeInit+0x94>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004856:	4a1f      	ldr	r2, [pc, #124]	@ (80048d4 <HAL_UART_MspDeInit+0x94>)
 8004858:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800485c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800485e:	2103      	movs	r1, #3
 8004860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004864:	f002 fe26 	bl	80074b4 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486c:	4618      	mov	r0, r3
 800486e:	f002 fa31 	bl	8006cd4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004876:	4618      	mov	r0, r3
 8004878:	f002 fa2c 	bl	8006cd4 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800487c:	2034      	movs	r0, #52	@ 0x34
 800487e:	f002 f956 	bl	8006b2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }

}
 8004882:	e020      	b.n	80048c6 <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==UART5)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <HAL_UART_MspDeInit+0x98>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d11b      	bne.n	80048c6 <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_UART5_CLK_DISABLE();
 800488e:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <HAL_UART_MspDeInit+0x94>)
 8004890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004892:	4a10      	ldr	r2, [pc, #64]	@ (80048d4 <HAL_UART_MspDeInit+0x94>)
 8004894:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004898:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800489a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800489e:	480f      	ldr	r0, [pc, #60]	@ (80048dc <HAL_UART_MspDeInit+0x9c>)
 80048a0:	f002 fe08 	bl	80074b4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80048a4:	2104      	movs	r1, #4
 80048a6:	480e      	ldr	r0, [pc, #56]	@ (80048e0 <HAL_UART_MspDeInit+0xa0>)
 80048a8:	f002 fe04 	bl	80074b4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b0:	4618      	mov	r0, r3
 80048b2:	f002 fa0f 	bl	8006cd4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 fa0a 	bl	8006cd4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80048c0:	2035      	movs	r0, #53	@ 0x35
 80048c2:	f002 f934 	bl	8006b2e <HAL_NVIC_DisableIRQ>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40004c00 	.word	0x40004c00
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40005000 	.word	0x40005000
 80048dc:	48000800 	.word	0x48000800
 80048e0:	48000c00 	.word	0x48000c00

080048e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <NMI_Handler+0x4>

080048ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048f0:	bf00      	nop
 80048f2:	e7fd      	b.n	80048f0 <HardFault_Handler+0x4>

080048f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048f8:	bf00      	nop
 80048fa:	e7fd      	b.n	80048f8 <MemManage_Handler+0x4>

080048fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004900:	bf00      	nop
 8004902:	e7fd      	b.n	8004900 <BusFault_Handler+0x4>

08004904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <UsageFault_Handler+0x4>

0800490c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800491a:	b480      	push	{r7}
 800491c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800492c:	bf00      	nop
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800493a:	f000 faeb 	bl	8004f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004948:	4802      	ldr	r0, [pc, #8]	@ (8004954 <DMA1_Channel1_IRQHandler+0x10>)
 800494a:	f002 fb34 	bl	8006fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000794 	.word	0x20000794

08004958 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800495c:	4802      	ldr	r0, [pc, #8]	@ (8004968 <DMA1_Channel6_IRQHandler+0x10>)
 800495e:	f002 fb2a 	bl	8006fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000878 	.word	0x20000878

0800496c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004970:	4802      	ldr	r0, [pc, #8]	@ (800497c <DMA1_Channel7_IRQHandler+0x10>)
 8004972:	f002 fb20 	bl	8006fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000830 	.word	0x20000830

08004980 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004984:	4802      	ldr	r0, [pc, #8]	@ (8004990 <ADC1_2_IRQHandler+0x10>)
 8004986:	f000 ff43 	bl	8005810 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	2000072c 	.word	0x2000072c

08004994 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004998:	4802      	ldr	r0, [pc, #8]	@ (80049a4 <I2C1_EV_IRQHandler+0x10>)
 800499a:	f003 fb7b 	bl	8008094 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	200007dc 	.word	0x200007dc

080049a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80049ac:	4802      	ldr	r0, [pc, #8]	@ (80049b8 <I2C1_ER_IRQHandler+0x10>)
 80049ae:	f003 fb8b 	bl	80080c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200007dc 	.word	0x200007dc

080049bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80049c0:	4802      	ldr	r0, [pc, #8]	@ (80049cc <UART4_IRQHandler+0x10>)
 80049c2:	f007 fb5b 	bl	800c07c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200008c0 	.word	0x200008c0

080049d0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80049d4:	4802      	ldr	r0, [pc, #8]	@ (80049e0 <UART5_IRQHandler+0x10>)
 80049d6:	f007 fb51 	bl	800c07c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000948 	.word	0x20000948

080049e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80049e8:	4802      	ldr	r0, [pc, #8]	@ (80049f4 <TIM6_DAC_IRQHandler+0x10>)
 80049ea:	f006 ff89 	bl	800b900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000af0 	.word	0x20000af0

080049f8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80049fc:	4802      	ldr	r0, [pc, #8]	@ (8004a08 <DMA2_Channel1_IRQHandler+0x10>)
 80049fe:	f002 fada 	bl	8006fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000aa8 	.word	0x20000aa8

08004a0c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004a10:	4802      	ldr	r0, [pc, #8]	@ (8004a1c <DMA2_Channel2_IRQHandler+0x10>)
 8004a12:	f002 fad0 	bl	8006fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000a60 	.word	0x20000a60

08004a20 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004a24:	4802      	ldr	r0, [pc, #8]	@ (8004a30 <DMA2_Channel3_IRQHandler+0x10>)
 8004a26:	f002 fac6 	bl	8006fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000a18 	.word	0x20000a18

08004a34 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004a38:	4802      	ldr	r0, [pc, #8]	@ (8004a44 <DMA2_Channel5_IRQHandler+0x10>)
 8004a3a:	f002 fabc 	bl	8006fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200009d0 	.word	0x200009d0

08004a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004a4c:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <SystemInit+0x20>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a52:	4a05      	ldr	r2, [pc, #20]	@ (8004a68 <SystemInit+0x20>)
 8004a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <_Z8tcpInputv>:
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
bool flagSetSys;							// Indica que se debe enviar system

/*****	INPUT	*****/

void tcpInput(){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
	tcpData();
 8004a70:	f000 f840 	bl	8004af4 <_Z7tcpDatav>
	tcpSystem();
 8004a74:	f000 f806 	bl	8004a84 <_Z9tcpSystemv>
	tcpGps();
 8004a78:	f000 f89a 	bl	8004bb0 <_Z6tcpGpsv>
	tcpInLora();
 8004a7c:	f000 f872 	bl	8004b64 <_Z9tcpInLorav>
}
 8004a80:	bf00      	nop
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <_Z9tcpSystemv>:
 *
 *	OUTPUT	:	flagSetSys | Indica que se debe enviar un paquete con datos del sistema
 *
 */

void tcpSystem(){
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
	switch( stateTcpSys ){
 8004a88:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <_Z9tcpSystemv+0x60>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <_Z9tcpSystemv+0x12>
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d013      	beq.n	8004abc <_Z9tcpSystemv+0x38>
 8004a94:	e01c      	b.n	8004ad0 <_Z9tcpSystemv+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpSys++;						// Suma 1 al contador
 8004a96:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <_Z9tcpSystemv+0x64>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	4a12      	ldr	r2, [pc, #72]	@ (8004ae8 <_Z9tcpSystemv+0x64>)
 8004a9e:	6013      	str	r3, [r2, #0]

		if ( countTcpSys >= limitTcpSys ){	// Si pasa el limite
 8004aa0:	4b11      	ldr	r3, [pc, #68]	@ (8004ae8 <_Z9tcpSystemv+0x64>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b11      	ldr	r3, [pc, #68]	@ (8004aec <_Z9tcpSystemv+0x68>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d303      	bcc.n	8004ab4 <_Z9tcpSystemv+0x30>
			stateTcpSys	= 1;				// Pasa a S1
 8004aac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <_Z9tcpSystemv+0x60>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateTcpSys	= 0;				// Espera en S0
		}
		break;
 8004ab2:	e011      	b.n	8004ad8 <_Z9tcpSystemv+0x54>
			stateTcpSys	= 0;				// Espera en S0
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <_Z9tcpSystemv+0x60>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
		break;
 8004aba:	e00d      	b.n	8004ad8 <_Z9tcpSystemv+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetSys	= 1;	// Indica que se debe enviar datos
 8004abc:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <_Z9tcpSystemv+0x6c>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
		countTcpSys	= 0;	// Reinicia contador
 8004ac2:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <_Z9tcpSystemv+0x64>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
		stateTcpSys	= 0;	// Vuelve a S0
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <_Z9tcpSystemv+0x60>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
		break;
 8004ace:	e003      	b.n	8004ad8 <_Z9tcpSystemv+0x54>

	default:
		stateTcpSys	= 0;
 8004ad0:	4b04      	ldr	r3, [pc, #16]	@ (8004ae4 <_Z9tcpSystemv+0x60>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
		break;
 8004ad6:	bf00      	nop
	}
}
 8004ad8:	bf00      	nop
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20001269 	.word	0x20001269
 8004ae8:	2000126c 	.word	0x2000126c
 8004aec:	20001270 	.word	0x20001270
 8004af0:	20001274 	.word	0x20001274

08004af4 <_Z7tcpDatav>:
 *
 *	OUTPUT	:	flagSetData | Indica que se debe enviar
 *
 */

void tcpData(){
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
	switch( stateTcpData ){
 8004af8:	4b16      	ldr	r3, [pc, #88]	@ (8004b54 <_Z7tcpDatav+0x60>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <_Z7tcpDatav+0x12>
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d013      	beq.n	8004b2c <_Z7tcpDatav+0x38>
 8004b04:	e01c      	b.n	8004b40 <_Z7tcpDatav+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpData++;							// Suma 1 al contador
 8004b06:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <_Z7tcpDatav+0x64>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	4a12      	ldr	r2, [pc, #72]	@ (8004b58 <_Z7tcpDatav+0x64>)
 8004b0e:	6013      	str	r3, [r2, #0]

		if ( countTcpData >= limitTcpData ){	// Si pasa el limite
 8004b10:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <_Z7tcpDatav+0x64>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b11      	ldr	r3, [pc, #68]	@ (8004b5c <_Z7tcpDatav+0x68>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d303      	bcc.n	8004b24 <_Z7tcpDatav+0x30>
			stateTcpData	= 1;				// Pasa a S1
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <_Z7tcpDatav+0x60>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateTcpData	= 0;				// Espera en S0
		}
		break;
 8004b22:	e011      	b.n	8004b48 <_Z7tcpDatav+0x54>
			stateTcpData	= 0;				// Espera en S0
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <_Z7tcpDatav+0x60>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
		break;
 8004b2a:	e00d      	b.n	8004b48 <_Z7tcpDatav+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetData		= 1;	// Indica que se debe enviar datos
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b60 <_Z7tcpDatav+0x6c>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
		countTcpData	= 0;	// Reinicia contador
 8004b32:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <_Z7tcpDatav+0x64>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

		stateTcpData	= 0;	// Vuelve a S0
 8004b38:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <_Z7tcpDatav+0x60>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
		break;
 8004b3e:	e003      	b.n	8004b48 <_Z7tcpDatav+0x54>

	default:
		stateTcpData	= 0;
 8004b40:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <_Z7tcpDatav+0x60>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
		break;
 8004b46:	bf00      	nop
	}
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	2000125d 	.word	0x2000125d
 8004b58:	20001260 	.word	0x20001260
 8004b5c:	20001264 	.word	0x20001264
 8004b60:	20001268 	.word	0x20001268

08004b64 <_Z9tcpInLorav>:
 *
 *	OUTPUT	:	loraDecision.response()
 *				loraDecision.disable()
 */

void tcpInLora(){
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
	if ( loraCheck.check() ){					// Si hay respuesta nueva
 8004b68:	480d      	ldr	r0, [pc, #52]	@ (8004ba0 <_Z9tcpInLorav+0x3c>)
 8004b6a:	f7fe fcb9 	bl	80034e0 <_ZN9loraCheck5checkEv>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00c      	beq.n	8004b8e <_Z9tcpInLorav+0x2a>
		busTcpLora	= loraCheck.response();		// Copia el codigo de respuesta
 8004b74:	480a      	ldr	r0, [pc, #40]	@ (8004ba0 <_Z9tcpInLorav+0x3c>)
 8004b76:	f7fe fcc4 	bl	8003502 <_ZN9loraCheck8responseEv>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ba4 <_Z9tcpInLorav+0x40>)
 8004b80:	701a      	strb	r2, [r3, #0]
		loraDecision.response( busTcpLora );	// Inserta en lora Decision
 8004b82:	4b08      	ldr	r3, [pc, #32]	@ (8004ba4 <_Z9tcpInLorav+0x40>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	4619      	mov	r1, r3
 8004b88:	4807      	ldr	r0, [pc, #28]	@ (8004ba8 <_Z9tcpInLorav+0x44>)
 8004b8a:	f7fe fd76 	bl	800367a <_ZN12loraDecision8responseEh>
			busTcpLora	= 6;
		}*/

	}

	if ( flagWdLora ){			// Si hay WD
 8004b8e:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <_Z9tcpInLorav+0x48>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <_Z9tcpInLorav+0x38>
		loraDecision.disable();	// Deshabilita tcp y app
 8004b96:	4804      	ldr	r0, [pc, #16]	@ (8004ba8 <_Z9tcpInLorav+0x44>)
 8004b98:	f7fe fdff 	bl	800379a <_ZN12loraDecision7disableEv>
	}
}
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000c7c 	.word	0x20000c7c
 8004ba4:	2000125c 	.word	0x2000125c
 8004ba8:	20000c90 	.word	0x20000c90
 8004bac:	20000644 	.word	0x20000644

08004bb0 <_Z6tcpGpsv>:
 *
 *	OUTPUT	:	flagGpsSaved
 *				startGps
 */

void tcpGps(){
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	switch ( stateGpsTcp ){
 8004bb4:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <_Z6tcpGpsv+0x90>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d021      	beq.n	8004c00 <_Z6tcpGpsv+0x50>
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	dc38      	bgt.n	8004c32 <_Z6tcpGpsv+0x82>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <_Z6tcpGpsv+0x1a>
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d014      	beq.n	8004bf2 <_Z6tcpGpsv+0x42>
			stateGpsTcp	= 2;				// Se queda en S2
		}
		break;

	default:
		break;
 8004bc8:	e033      	b.n	8004c32 <_Z6tcpGpsv+0x82>
		if ( savedGps ){		// Si se guardó un valor de GPS
 8004bca:	4b1e      	ldr	r3, [pc, #120]	@ (8004c44 <_Z6tcpGpsv+0x94>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <_Z6tcpGpsv+0x2a>
			stateGpsTcp	= 1;	// Pasa a S1
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <_Z6tcpGpsv+0x90>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
		break;
 8004bd8:	e02c      	b.n	8004c34 <_Z6tcpGpsv+0x84>
		else if( stopGps ){		// Si se paró la recepcion de datos
 8004bda:	4b1b      	ldr	r3, [pc, #108]	@ (8004c48 <_Z6tcpGpsv+0x98>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <_Z6tcpGpsv+0x3a>
			stateGpsTcp	= 2;	// Pasa a S2
 8004be2:	4b17      	ldr	r3, [pc, #92]	@ (8004c40 <_Z6tcpGpsv+0x90>)
 8004be4:	2202      	movs	r2, #2
 8004be6:	701a      	strb	r2, [r3, #0]
		break;
 8004be8:	e024      	b.n	8004c34 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 0;	// Espera en S0
 8004bea:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <_Z6tcpGpsv+0x90>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
		break;
 8004bf0:	e020      	b.n	8004c34 <_Z6tcpGpsv+0x84>
		flagGpsSaved	= 1;	// Indica que se guardó un mensaje
 8004bf2:	4b16      	ldr	r3, [pc, #88]	@ (8004c4c <_Z6tcpGpsv+0x9c>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
		stateGpsTcp		= 2;	// Pasa a S3
 8004bf8:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <_Z6tcpGpsv+0x90>)
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	701a      	strb	r2, [r3, #0]
		break;
 8004bfe:	e019      	b.n	8004c34 <_Z6tcpGpsv+0x84>
		countGpsTcp++;						// Suma 1 al contador
 8004c00:	4b13      	ldr	r3, [pc, #76]	@ (8004c50 <_Z6tcpGpsv+0xa0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	4a12      	ldr	r2, [pc, #72]	@ (8004c50 <_Z6tcpGpsv+0xa0>)
 8004c08:	6013      	str	r3, [r2, #0]
		if ( countGpsTcp >= limitGpsTcp ){	// Si pasa el limite
 8004c0a:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <_Z6tcpGpsv+0xa0>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <_Z6tcpGpsv+0xa4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d309      	bcc.n	8004c2a <_Z6tcpGpsv+0x7a>
			startGps	= 1;				// Indica inicio de medicion gps
 8004c16:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <_Z6tcpGpsv+0xa8>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]
			countGpsTcp	= 0;				// Reinicia contador
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <_Z6tcpGpsv+0xa0>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
			stateGpsTcp	= 0;				// Vuelve a S0
 8004c22:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <_Z6tcpGpsv+0x90>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
		break;
 8004c28:	e004      	b.n	8004c34 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 2;				// Se queda en S2
 8004c2a:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <_Z6tcpGpsv+0x90>)
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	701a      	strb	r2, [r3, #0]
		break;
 8004c30:	e000      	b.n	8004c34 <_Z6tcpGpsv+0x84>
		break;
 8004c32:	bf00      	nop
	}
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20001251 	.word	0x20001251
 8004c44:	20000bf6 	.word	0x20000bf6
 8004c48:	20000bf5 	.word	0x20000bf5
 8004c4c:	20001252 	.word	0x20001252
 8004c50:	20001254 	.word	0x20001254
 8004c54:	20001258 	.word	0x20001258
 8004c58:	2000038f 	.word	0x2000038f

08004c5c <_Z41__static_initialization_and_destruction_0ii>:
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d11f      	bne.n	8004cac <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d11a      	bne.n	8004cac <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t limitGpsTcp = 43200000/superloop;// Tiempo que esta apagado GPS
 8004c76:	4b10      	ldr	r3, [pc, #64]	@ (8004cb8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cbc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c82:	461a      	mov	r2, r3
 8004c84:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004c86:	601a      	str	r2, [r3, #0]
uint32_t limitTcpData	= 120000/superloop;	// Limite para fijar datos
 8004c88:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004c98:	601a      	str	r2, [r3, #0]
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
 8004c9a:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004caa:	601a      	str	r2, [r3, #0]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	20000433 	.word	0x20000433
 8004cbc:	02932e00 	.word	0x02932e00
 8004cc0:	20001258 	.word	0x20001258
 8004cc4:	0001d4c0 	.word	0x0001d4c0
 8004cc8:	20001264 	.word	0x20001264
 8004ccc:	01499700 	.word	0x01499700
 8004cd0:	20001270 	.word	0x20001270

08004cd4 <_GLOBAL__sub_I_stateGpsTcp>:
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f7ff ffbd 	bl	8004c5c <_Z41__static_initialization_and_destruction_0ii>
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_Z9tcpOutputv>:
uint16_t countTcpLoraOut;							// Contador para esperar
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando

/*****	OUTPUT	*****/

void tcpOutput(){
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
	tcpOutLora();
 8004ce8:	f000 f802 	bl	8004cf0 <_Z10tcpOutLorav>
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <_Z10tcpOutLorav>:

void tcpOutLora(){
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
	switch( stateTpcLoraOut ){
 8004cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8004da0 <_Z10tcpOutLorav+0xb0>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d028      	beq.n	8004d4e <_Z10tcpOutLorav+0x5e>
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	dc48      	bgt.n	8004d92 <_Z10tcpOutLorav+0xa2>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <_Z10tcpOutLorav+0x1a>
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d00e      	beq.n	8004d26 <_Z10tcpOutLorav+0x36>
 8004d08:	e043      	b.n	8004d92 <_Z10tcpOutLorav+0xa2>
	///////////////////////
	// S0 - WAIT COMMAND //
	///////////////////////

	case 0:
		if ( loraSelect.newCommand() ){	// Si hay nuevo comando
 8004d0a:	4826      	ldr	r0, [pc, #152]	@ (8004da4 <_Z10tcpOutLorav+0xb4>)
 8004d0c:	f7fe fc71 	bl	80035f2 <_ZN10loraSelect10newCommandEv>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <_Z10tcpOutLorav+0x2e>
 			stateTpcLoraOut	= 1;		// Pasa a S1
 8004d16:	4b22      	ldr	r3, [pc, #136]	@ (8004da0 <_Z10tcpOutLorav+0xb0>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateTpcLoraOut	= 0;		// Queda en S0
		}
		break;
 8004d1c:	e03d      	b.n	8004d9a <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 0;		// Queda en S0
 8004d1e:	4b20      	ldr	r3, [pc, #128]	@ (8004da0 <_Z10tcpOutLorav+0xb0>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
		break;
 8004d24:	e039      	b.n	8004d9a <_Z10tcpOutLorav+0xaa>
	////////////////////////
	// S1 - WAIT FOR SEND //
	////////////////////////

	case 1:
		countTcpLoraOut++;							// Suma 1 al contador
 8004d26:	4b20      	ldr	r3, [pc, #128]	@ (8004da8 <_Z10tcpOutLorav+0xb8>)
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004da8 <_Z10tcpOutLorav+0xb8>)
 8004d30:	801a      	strh	r2, [r3, #0]

		if ( countTcpLoraOut >= limitTcpLoraOut ){	// Si llega al limite
 8004d32:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <_Z10tcpOutLorav+0xb8>)
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	4b1d      	ldr	r3, [pc, #116]	@ (8004dac <_Z10tcpOutLorav+0xbc>)
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d303      	bcc.n	8004d46 <_Z10tcpOutLorav+0x56>
			stateTpcLoraOut	= 2;					// Pasa a S2
 8004d3e:	4b18      	ldr	r3, [pc, #96]	@ (8004da0 <_Z10tcpOutLorav+0xb0>)
 8004d40:	2202      	movs	r2, #2
 8004d42:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateTpcLoraOut	= 1;					// Queda en S1
		}
		break;
 8004d44:	e029      	b.n	8004d9a <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 1;					// Queda en S1
 8004d46:	4b16      	ldr	r3, [pc, #88]	@ (8004da0 <_Z10tcpOutLorav+0xb0>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
		break;
 8004d4c:	e025      	b.n	8004d9a <_Z10tcpOutLorav+0xaa>
	/////////////////////////////
	// S2 - CONFIG BY TRANSMIT //
	/////////////////////////////

	case 2:
		countTcpLoraOut	= 0;										// Reinicia contador
 8004d4e:	4b16      	ldr	r3, [pc, #88]	@ (8004da8 <_Z10tcpOutLorav+0xb8>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	801a      	strh	r2, [r3, #0]

		loraTxCommand0 	= loraSelect.getCommand();					// Guarda comando
 8004d54:	4813      	ldr	r0, [pc, #76]	@ (8004da4 <_Z10tcpOutLorav+0xb4>)
 8004d56:	f7fe fc5d 	bl	8003614 <_ZN10loraSelect10getCommandEv>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4a14      	ldr	r2, [pc, #80]	@ (8004db0 <_Z10tcpOutLorav+0xc0>)
 8004d5e:	6013      	str	r3, [r2, #0]
		sizeTxCommand0	= loraSelect.getCommandSize();				// Guarda tamaño de comando
 8004d60:	4810      	ldr	r0, [pc, #64]	@ (8004da4 <_Z10tcpOutLorav+0xb4>)
 8004d62:	f7fe fc63 	bl	800362c <_ZN10loraSelect14getCommandSizeEv>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4b12      	ldr	r3, [pc, #72]	@ (8004db4 <_Z10tcpOutLorav+0xc4>)
 8004d6c:	701a      	strb	r2, [r3, #0]

		loraCheck.setIdealResponses( loraSelect.qttyResponses() );	// Guarda largo de lista de respuestas
 8004d6e:	480d      	ldr	r0, [pc, #52]	@ (8004da4 <_Z10tcpOutLorav+0xb4>)
 8004d70:	f7fe fc68 	bl	8003644 <_ZN10loraSelect13qttyResponsesEv>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4619      	mov	r1, r3
 8004d78:	480f      	ldr	r0, [pc, #60]	@ (8004db8 <_Z10tcpOutLorav+0xc8>)
 8004d7a:	f7fe fb55 	bl	8003428 <_ZN9loraCheck17setIdealResponsesEh>
		loraDecision.reset();										// Reinicia TCP
 8004d7e:	480f      	ldr	r0, [pc, #60]	@ (8004dbc <_Z10tcpOutLorav+0xcc>)
 8004d80:	f7fe fcf5 	bl	800376e <_ZN12loraDecision5resetEv>
		flagTxLora	= 1;											// Transmite
 8004d84:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc0 <_Z10tcpOutLorav+0xd0>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
		stateTpcLoraOut	= 0;										// Vuelve a S0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <_Z10tcpOutLorav+0xb0>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
		break;
 8004d90:	e003      	b.n	8004d9a <_Z10tcpOutLorav+0xaa>

	default:
		stateTpcLoraOut	= 0;
 8004d92:	4b03      	ldr	r3, [pc, #12]	@ (8004da0 <_Z10tcpOutLorav+0xb0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
		break;
 8004d98:	bf00      	nop
	}

}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000127d 	.word	0x2000127d
 8004da4:	20000c98 	.word	0x20000c98
 8004da8:	2000127e 	.word	0x2000127e
 8004dac:	20001280 	.word	0x20001280
 8004db0:	20001278 	.word	0x20001278
 8004db4:	2000127c 	.word	0x2000127c
 8004db8:	20000c7c 	.word	0x20000c7c
 8004dbc:	20000c90 	.word	0x20000c90
 8004dc0:	200005f1 	.word	0x200005f1

08004dc4 <_Z41__static_initialization_and_destruction_0ii>:
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d10e      	bne.n	8004df2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d109      	bne.n	8004df2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando
 8004dde:	4b08      	ldr	r3, [pc, #32]	@ (8004e00 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004de8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004df0:	801a      	strh	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000433 	.word	0x20000433
 8004e04:	20001280 	.word	0x20001280

08004e08 <_GLOBAL__sub_I_loraTxCommand0>:
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004e10:	2001      	movs	r0, #1
 8004e12:	f7ff ffd7 	bl	8004dc4 <_Z41__static_initialization_and_destruction_0ii>
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e1c:	f7ff fe14 	bl	8004a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e20:	480c      	ldr	r0, [pc, #48]	@ (8004e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e22:	490d      	ldr	r1, [pc, #52]	@ (8004e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e24:	4a0d      	ldr	r2, [pc, #52]	@ (8004e5c <LoopForever+0xe>)
  movs r3, #0
 8004e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e28:	e002      	b.n	8004e30 <LoopCopyDataInit>

08004e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e2e:	3304      	adds	r3, #4

08004e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e34:	d3f9      	bcc.n	8004e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e36:	4a0a      	ldr	r2, [pc, #40]	@ (8004e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e38:	4c0a      	ldr	r4, [pc, #40]	@ (8004e64 <LoopForever+0x16>)
  movs r3, #0
 8004e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e3c:	e001      	b.n	8004e42 <LoopFillZerobss>

08004e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e40:	3204      	adds	r2, #4

08004e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e44:	d3fb      	bcc.n	8004e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e46:	f008 fb6d 	bl	800d524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e4a:	f7fe fcf1 	bl	8003830 <main>

08004e4e <LoopForever>:

LoopForever:
    b LoopForever
 8004e4e:	e7fe      	b.n	8004e4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004e50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e58:	20000440 	.word	0x20000440
  ldr r2, =_sidata
 8004e5c:	0800d630 	.word	0x0800d630
  ldr r2, =_sbss
 8004e60:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8004e64:	20001288 	.word	0x20001288

08004e68 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e68:	e7fe      	b.n	8004e68 <ADC3_IRQHandler>

08004e6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e74:	2003      	movs	r0, #3
 8004e76:	f001 fe25 	bl	8006ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e7a:	200f      	movs	r0, #15
 8004e7c:	f000 f80e 	bl	8004e9c <HAL_InitTick>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	71fb      	strb	r3, [r7, #7]
 8004e8a:	e001      	b.n	8004e90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e8c:	f7ff f998 	bl	80041c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e90:	79fb      	ldrb	r3, [r7, #7]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004ea8:	4b17      	ldr	r3, [pc, #92]	@ (8004f08 <HAL_InitTick+0x6c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d023      	beq.n	8004ef8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004eb0:	4b16      	ldr	r3, [pc, #88]	@ (8004f0c <HAL_InitTick+0x70>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <HAL_InitTick+0x6c>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 fe3f 	bl	8006b4a <HAL_SYSTICK_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b0f      	cmp	r3, #15
 8004ed6:	d809      	bhi.n	8004eec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	f001 fdfb 	bl	8006ada <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8004f10 <HAL_InitTick+0x74>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e007      	b.n	8004efc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
 8004ef0:	e004      	b.n	8004efc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e001      	b.n	8004efc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	2000043c 	.word	0x2000043c
 8004f0c:	20000434 	.word	0x20000434
 8004f10:	20000438 	.word	0x20000438

08004f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f18:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <HAL_IncTick+0x20>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <HAL_IncTick+0x24>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4413      	add	r3, r2
 8004f24:	4a04      	ldr	r2, [pc, #16]	@ (8004f38 <HAL_IncTick+0x24>)
 8004f26:	6013      	str	r3, [r2, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000043c 	.word	0x2000043c
 8004f38:	20001284 	.word	0x20001284

08004f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f40:	4b03      	ldr	r3, [pc, #12]	@ (8004f50 <HAL_GetTick+0x14>)
 8004f42:	681b      	ldr	r3, [r3, #0]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	20001284 	.word	0x20001284

08004f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f5c:	f7ff ffee 	bl	8004f3c <HAL_GetTick>
 8004f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d005      	beq.n	8004f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <HAL_Delay+0x44>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f7a:	bf00      	nop
 8004f7c:	f7ff ffde 	bl	8004f3c <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d8f7      	bhi.n	8004f7c <HAL_Delay+0x28>
  {
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	2000043c 	.word	0x2000043c

08004f9c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_SuspendTick+0x1c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a04      	ldr	r2, [pc, #16]	@ (8004fb8 <HAL_SuspendTick+0x1c>)
 8004fa6:	f023 0302 	bic.w	r3, r3, #2
 8004faa:	6013      	str	r3, [r2, #0]
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	e000e010 	.word	0xe000e010

08004fbc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <HAL_ResumeTick+0x1c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	@ (8004fd8 <HAL_ResumeTick+0x1c>)
 8004fc6:	f043 0302 	orr.w	r3, r3, #2
 8004fca:	6013      	str	r3, [r2, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	e000e010 	.word	0xe000e010

08004fdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	609a      	str	r2, [r3, #8]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	609a      	str	r2, [r3, #8]
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3360      	adds	r3, #96	@ 0x60
 8005056:	461a      	mov	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4b08      	ldr	r3, [pc, #32]	@ (8005088 <LL_ADC_SetOffset+0x44>)
 8005066:	4013      	ands	r3, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	4313      	orrs	r3, r2
 8005074:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	03fff000 	.word	0x03fff000

0800508c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3360      	adds	r3, #96	@ 0x60
 800509a:	461a      	mov	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3360      	adds	r3, #96	@ 0x60
 80050c8:	461a      	mov	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	431a      	orrs	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	615a      	str	r2, [r3, #20]
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800513a:	b480      	push	{r7}
 800513c:	b087      	sub	sp, #28
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3330      	adds	r3, #48	@ 0x30
 800514a:	461a      	mov	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	4413      	add	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	211f      	movs	r1, #31
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	401a      	ands	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0e9b      	lsrs	r3, r3, #26
 8005172:	f003 011f 	and.w	r1, r3, #31
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	431a      	orrs	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3314      	adds	r3, #20
 80051c8:	461a      	mov	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	0e5b      	lsrs	r3, r3, #25
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	4413      	add	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	0d1b      	lsrs	r3, r3, #20
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2107      	movs	r1, #7
 80051e6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	401a      	ands	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	0d1b      	lsrs	r3, r3, #20
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	431a      	orrs	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005228:	43db      	mvns	r3, r3
 800522a:	401a      	ands	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0318 	and.w	r3, r3, #24
 8005232:	4908      	ldr	r1, [pc, #32]	@ (8005254 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005234:	40d9      	lsrs	r1, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	400b      	ands	r3, r1
 800523a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800523e:	431a      	orrs	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	0007ffff 	.word	0x0007ffff

08005258 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 031f 	and.w	r3, r3, #31
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80052a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6093      	str	r3, [r2, #8]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052c8:	d101      	bne.n	80052ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80052ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80052f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005318:	d101      	bne.n	800531e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800533c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005340:	f043 0201 	orr.w	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <LL_ADC_IsEnabled+0x18>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <LL_ADC_IsEnabled+0x1a>
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800538a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800538e:	f043 0204 	orr.w	r2, r3, #4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d101      	bne.n	80053ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d101      	bne.n	80053e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b089      	sub	sp, #36	@ 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e133      	b.n	8005672 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fe fef5 	bl	8004208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff3f 	bl	80052b4 <LL_ADC_IsDeepPowerDownEnabled>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ff25 	bl	8005290 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff ff5a 	bl	8005304 <LL_ADC_IsInternalRegulatorEnabled>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d115      	bne.n	8005482 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff ff3e 	bl	80052dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005460:	4b86      	ldr	r3, [pc, #536]	@ (800567c <HAL_ADC_Init+0x28c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	099b      	lsrs	r3, r3, #6
 8005466:	4a86      	ldr	r2, [pc, #536]	@ (8005680 <HAL_ADC_Init+0x290>)
 8005468:	fba2 2303 	umull	r2, r3, r2, r3
 800546c:	099b      	lsrs	r3, r3, #6
 800546e:	3301      	adds	r3, #1
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005474:	e002      	b.n	800547c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3b01      	subs	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f9      	bne.n	8005476 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff ff3c 	bl	8005304 <LL_ADC_IsInternalRegulatorEnabled>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10d      	bne.n	80054ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	f043 0210 	orr.w	r2, r3, #16
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a2:	f043 0201 	orr.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ff75 	bl	80053a2 <LL_ADC_REG_IsConversionOngoing>
 80054b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f040 80cc 	bne.w	8005660 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f040 80c8 	bne.w	8005660 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80054d8:	f043 0202 	orr.w	r2, r3, #2
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ff35 	bl	8005354 <LL_ADC_IsEnabled>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d115      	bne.n	800551c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054f0:	4864      	ldr	r0, [pc, #400]	@ (8005684 <HAL_ADC_Init+0x294>)
 80054f2:	f7ff ff2f 	bl	8005354 <LL_ADC_IsEnabled>
 80054f6:	4604      	mov	r4, r0
 80054f8:	4863      	ldr	r0, [pc, #396]	@ (8005688 <HAL_ADC_Init+0x298>)
 80054fa:	f7ff ff2b 	bl	8005354 <LL_ADC_IsEnabled>
 80054fe:	4603      	mov	r3, r0
 8005500:	431c      	orrs	r4, r3
 8005502:	4862      	ldr	r0, [pc, #392]	@ (800568c <HAL_ADC_Init+0x29c>)
 8005504:	f7ff ff26 	bl	8005354 <LL_ADC_IsEnabled>
 8005508:	4603      	mov	r3, r0
 800550a:	4323      	orrs	r3, r4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4619      	mov	r1, r3
 8005516:	485e      	ldr	r0, [pc, #376]	@ (8005690 <HAL_ADC_Init+0x2a0>)
 8005518:	f7ff fd60 	bl	8004fdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7e5b      	ldrb	r3, [r3, #25]
 8005520:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005526:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800552c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005532:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800553a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d106      	bne.n	8005558 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	3b01      	subs	r3, #1
 8005550:	045b      	lsls	r3, r3, #17
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4313      	orrs	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4313      	orrs	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	4b46      	ldr	r3, [pc, #280]	@ (8005694 <HAL_ADC_Init+0x2a4>)
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	69b9      	ldr	r1, [r7, #24]
 8005584:	430b      	orrs	r3, r1
 8005586:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ff1b 	bl	80053c8 <LL_ADC_INJ_IsConversionOngoing>
 8005592:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d140      	bne.n	800561c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d13d      	bne.n	800561c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7e1b      	ldrb	r3, [r3, #24]
 80055a8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80055aa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055c2:	f023 0306 	bic.w	r3, r3, #6
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	430b      	orrs	r3, r1
 80055ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d118      	bne.n	800560c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80055e4:	f023 0304 	bic.w	r3, r3, #4
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055f0:	4311      	orrs	r1, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80055f6:	4311      	orrs	r1, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055fc:	430a      	orrs	r2, r1
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0201 	orr.w	r2, r2, #1
 8005608:	611a      	str	r2, [r3, #16]
 800560a:	e007      	b.n	800561c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10c      	bne.n	800563e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	f023 010f 	bic.w	r1, r3, #15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	1e5a      	subs	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	631a      	str	r2, [r3, #48]	@ 0x30
 800563c:	e007      	b.n	800564e <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 020f 	bic.w	r2, r2, #15
 800564c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	f043 0201 	orr.w	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	659a      	str	r2, [r3, #88]	@ 0x58
 800565e:	e007      	b.n	8005670 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005664:	f043 0210 	orr.w	r2, r3, #16
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005670:	7ffb      	ldrb	r3, [r7, #31]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3724      	adds	r7, #36	@ 0x24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd90      	pop	{r4, r7, pc}
 800567a:	bf00      	nop
 800567c:	20000434 	.word	0x20000434
 8005680:	053e2d63 	.word	0x053e2d63
 8005684:	50040000 	.word	0x50040000
 8005688:	50040100 	.word	0x50040100
 800568c:	50040200 	.word	0x50040200
 8005690:	50040300 	.word	0x50040300
 8005694:	fff0c007 	.word	0xfff0c007

08005698 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056a4:	4853      	ldr	r0, [pc, #332]	@ (80057f4 <HAL_ADC_Start_DMA+0x15c>)
 80056a6:	f7ff fdd7 	bl	8005258 <LL_ADC_GetMultimode>
 80056aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fe76 	bl	80053a2 <LL_ADC_REG_IsConversionOngoing>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f040 8093 	bne.w	80057e4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_ADC_Start_DMA+0x34>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e08e      	b.n	80057ea <HAL_ADC_Start_DMA+0x152>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a47      	ldr	r2, [pc, #284]	@ (80057f8 <HAL_ADC_Start_DMA+0x160>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d008      	beq.n	80056f0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	d002      	beq.n	80056f0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b09      	cmp	r3, #9
 80056ee:	d172      	bne.n	80057d6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fed1 	bl	8006498 <ADC_Enable>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d165      	bne.n	80057cc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005704:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a38      	ldr	r2, [pc, #224]	@ (80057fc <HAL_ADC_Start_DMA+0x164>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d002      	beq.n	8005724 <HAL_ADC_Start_DMA+0x8c>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	e000      	b.n	8005726 <HAL_ADC_Start_DMA+0x8e>
 8005724:	4b36      	ldr	r3, [pc, #216]	@ (8005800 <HAL_ADC_Start_DMA+0x168>)
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	4293      	cmp	r3, r2
 800572c:	d002      	beq.n	8005734 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005738:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	f023 0206 	bic.w	r2, r3, #6
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005758:	e002      	b.n	8005760 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005764:	4a27      	ldr	r2, [pc, #156]	@ (8005804 <HAL_ADC_Start_DMA+0x16c>)
 8005766:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800576c:	4a26      	ldr	r2, [pc, #152]	@ (8005808 <HAL_ADC_Start_DMA+0x170>)
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	4a25      	ldr	r2, [pc, #148]	@ (800580c <HAL_ADC_Start_DMA+0x174>)
 8005776:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	221c      	movs	r2, #28
 800577e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0210 	orr.w	r2, r2, #16
 8005796:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3340      	adds	r3, #64	@ 0x40
 80057b2:	4619      	mov	r1, r3
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f001 fb1e 	bl	8006df8 <HAL_DMA_Start_IT>
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff fdd8 	bl	800537a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80057ca:	e00d      	b.n	80057e8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80057d4:	e008      	b.n	80057e8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80057e2:	e001      	b.n	80057e8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
 80057e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	50040300 	.word	0x50040300
 80057f8:	50040200 	.word	0x50040200
 80057fc:	50040100 	.word	0x50040100
 8005800:	50040000 	.word	0x50040000
 8005804:	080065a5 	.word	0x080065a5
 8005808:	0800667d 	.word	0x0800667d
 800580c:	08006699 	.word	0x08006699

08005810 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	@ 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800582c:	4882      	ldr	r0, [pc, #520]	@ (8005a38 <HAL_ADC_IRQHandler+0x228>)
 800582e:	f7ff fd13 	bl	8005258 <LL_ADC_GetMultimode>
 8005832:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d017      	beq.n	800586e <HAL_ADC_IRQHandler+0x5e>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d012      	beq.n	800586e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 ff81 	bl	8006768 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2202      	movs	r2, #2
 800586c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <HAL_ADC_IRQHandler+0x72>
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8083 	beq.w	8005994 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d07d      	beq.n	8005994 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fc2d 	bl	8005114 <LL_ADC_REG_IsTriggerSourceSWStart>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d062      	beq.n	8005986 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a5d      	ldr	r2, [pc, #372]	@ (8005a3c <HAL_ADC_IRQHandler+0x22c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d002      	beq.n	80058d0 <HAL_ADC_IRQHandler+0xc0>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	e000      	b.n	80058d2 <HAL_ADC_IRQHandler+0xc2>
 80058d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005a40 <HAL_ADC_IRQHandler+0x230>)
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d008      	beq.n	80058ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d002      	beq.n	80058ec <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b09      	cmp	r3, #9
 80058ea:	d104      	bne.n	80058f6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	623b      	str	r3, [r7, #32]
 80058f4:	e00c      	b.n	8005910 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a50      	ldr	r2, [pc, #320]	@ (8005a3c <HAL_ADC_IRQHandler+0x22c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d002      	beq.n	8005906 <HAL_ADC_IRQHandler+0xf6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	e000      	b.n	8005908 <HAL_ADC_IRQHandler+0xf8>
 8005906:	4b4e      	ldr	r3, [pc, #312]	@ (8005a40 <HAL_ADC_IRQHandler+0x230>)
 8005908:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d135      	bne.n	8005986 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b08      	cmp	r3, #8
 8005926:	d12e      	bne.n	8005986 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fd38 	bl	80053a2 <LL_ADC_REG_IsConversionOngoing>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11a      	bne.n	800596e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 020c 	bic.w	r2, r2, #12
 8005946:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005958:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d112      	bne.n	8005986 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005964:	f043 0201 	orr.w	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	659a      	str	r2, [r3, #88]	@ 0x58
 800596c:	e00b      	b.n	8005986 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005972:	f043 0210 	orr.w	r2, r3, #16
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597e:	f043 0201 	orr.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fe fb58 	bl	800403c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	220c      	movs	r2, #12
 8005992:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <HAL_ADC_IRQHandler+0x198>
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 809f 	beq.w	8005af2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8099 	beq.w	8005af2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fbd8 	bl	8005192 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80059e2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fb93 	bl	8005114 <LL_ADC_REG_IsTriggerSourceSWStart>
 80059ee:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a11      	ldr	r2, [pc, #68]	@ (8005a3c <HAL_ADC_IRQHandler+0x22c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d002      	beq.n	8005a00 <HAL_ADC_IRQHandler+0x1f0>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	e000      	b.n	8005a02 <HAL_ADC_IRQHandler+0x1f2>
 8005a00:	4b0f      	ldr	r3, [pc, #60]	@ (8005a40 <HAL_ADC_IRQHandler+0x230>)
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d008      	beq.n	8005a1c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b06      	cmp	r3, #6
 8005a14:	d002      	beq.n	8005a1c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b07      	cmp	r3, #7
 8005a1a:	d104      	bne.n	8005a26 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	e013      	b.n	8005a4e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a04      	ldr	r2, [pc, #16]	@ (8005a3c <HAL_ADC_IRQHandler+0x22c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_ADC_IRQHandler+0x234>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	e007      	b.n	8005a46 <HAL_ADC_IRQHandler+0x236>
 8005a36:	bf00      	nop
 8005a38:	50040300 	.word	0x50040300
 8005a3c:	50040100 	.word	0x50040100
 8005a40:	50040000 	.word	0x50040000
 8005a44:	4b7d      	ldr	r3, [pc, #500]	@ (8005c3c <HAL_ADC_IRQHandler+0x42c>)
 8005a46:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d047      	beq.n	8005ae4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <HAL_ADC_IRQHandler+0x25e>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d03f      	beq.n	8005ae4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d13a      	bne.n	8005ae4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a78:	2b40      	cmp	r3, #64	@ 0x40
 8005a7a:	d133      	bne.n	8005ae4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d12e      	bne.n	8005ae4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff fc9c 	bl	80053c8 <LL_ADC_INJ_IsConversionOngoing>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d11a      	bne.n	8005acc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005aa4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d112      	bne.n	8005ae4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac2:	f043 0201 	orr.w	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005aca:	e00b      	b.n	8005ae4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad0:	f043 0210 	orr.w	r2, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005adc:	f043 0201 	orr.w	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fe17 	bl	8006718 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2260      	movs	r2, #96	@ 0x60
 8005af0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d011      	beq.n	8005b20 <HAL_ADC_IRQHandler+0x310>
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00c      	beq.n	8005b20 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f8a0 	bl	8005c58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2280      	movs	r2, #128	@ 0x80
 8005b1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d012      	beq.n	8005b50 <HAL_ADC_IRQHandler+0x340>
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b38:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fdfd 	bl	8006740 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d012      	beq.n	8005b80 <HAL_ADC_IRQHandler+0x370>
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fdef 	bl	8006754 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d036      	beq.n	8005bf8 <HAL_ADC_IRQHandler+0x3e8>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d031      	beq.n	8005bf8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba0:	e014      	b.n	8005bcc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005ba8:	4825      	ldr	r0, [pc, #148]	@ (8005c40 <HAL_ADC_IRQHandler+0x430>)
 8005baa:	f7ff fb63 	bl	8005274 <LL_ADC_GetMultiDMATransfer>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb8:	e008      	b.n	8005bcc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be2:	f043 0202 	orr.w	r2, r3, #2
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f83e 	bl	8005c6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d018      	beq.n	8005c34 <HAL_ADC_IRQHandler+0x424>
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c10:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1c:	f043 0208 	orr.w	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c2c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fd7c 	bl	800672c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005c34:	bf00      	nop
 8005c36:	3728      	adds	r7, #40	@ 0x28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	50040000 	.word	0x50040000
 8005c40:	50040300 	.word	0x50040300

08005c44 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b0b6      	sub	sp, #216	@ 0xd8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_ADC_ConfigChannel+0x22>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e3e3      	b.n	800646a <HAL_ADC_ConfigChannel+0x7ea>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fb77 	bl	80053a2 <LL_ADC_REG_IsConversionOngoing>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 83c4 	bne.w	8006444 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d824      	bhi.n	8005d16 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	3b02      	subs	r3, #2
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d81b      	bhi.n	8005d0e <HAL_ADC_ConfigChannel+0x8e>
 8005cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cdc <HAL_ADC_ConfigChannel+0x5c>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005ced 	.word	0x08005ced
 8005ce0:	08005cf5 	.word	0x08005cf5
 8005ce4:	08005cfd 	.word	0x08005cfd
 8005ce8:	08005d05 	.word	0x08005d05
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005cec:	230c      	movs	r3, #12
 8005cee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005cf2:	e010      	b.n	8005d16 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005cf4:	2312      	movs	r3, #18
 8005cf6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005cfa:	e00c      	b.n	8005d16 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005cfc:	2318      	movs	r3, #24
 8005cfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005d02:	e008      	b.n	8005d16 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005d04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005d0c:	e003      	b.n	8005d16 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005d0e:	2306      	movs	r3, #6
 8005d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005d14:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005d24:	f7ff fa09 	bl	800513a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fb38 	bl	80053a2 <LL_ADC_REG_IsConversionOngoing>
 8005d32:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fb44 	bl	80053c8 <LL_ADC_INJ_IsConversionOngoing>
 8005d40:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f040 81bf 	bne.w	80060cc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 81ba 	bne.w	80060cc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d60:	d10f      	bne.n	8005d82 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f7ff fa23 	bl	80051b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff f9b7 	bl	80050ee <LL_ADC_SetSamplingTimeCommonConfig>
 8005d80:	e00e      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6819      	ldr	r1, [r3, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f7ff fa12 	bl	80051b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff f9a7 	bl	80050ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	08db      	lsrs	r3, r3, #3
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d00a      	beq.n	8005dd8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6919      	ldr	r1, [r3, #16]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dd2:	f7ff f937 	bl	8005044 <LL_ADC_SetOffset>
 8005dd6:	e179      	b.n	80060cc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff f954 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0x184>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2100      	movs	r1, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff f949 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	0e9b      	lsrs	r3, r3, #26
 8005dfe:	f003 021f 	and.w	r2, r3, #31
 8005e02:	e01e      	b.n	8005e42 <HAL_ADC_ConfigChannel+0x1c2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff f93e 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e1a:	fa93 f3a3 	rbit	r3, r3
 8005e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005e2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8005e32:	2320      	movs	r3, #32
 8005e34:	e004      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8005e36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005e3a:	fab3 f383 	clz	r3, r3
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <HAL_ADC_ConfigChannel+0x1da>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	0e9b      	lsrs	r3, r3, #26
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	e018      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x20c>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e66:	fa93 f3a3 	rbit	r3, r3
 8005e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005e76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8005e7e:	2320      	movs	r3, #32
 8005e80:	e004      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8005e82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e86:	fab3 f383 	clz	r3, r3
 8005e8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d106      	bne.n	8005e9e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2200      	movs	r2, #0
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff f90d 	bl	80050b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff f8f1 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x24a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff f8e6 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	0e9b      	lsrs	r3, r3, #26
 8005ec4:	f003 021f 	and.w	r2, r3, #31
 8005ec8:	e01e      	b.n	8005f08 <HAL_ADC_ConfigChannel+0x288>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2101      	movs	r1, #1
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff f8db 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ee0:	fa93 f3a3 	rbit	r3, r3
 8005ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005ef0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8005ef8:	2320      	movs	r3, #32
 8005efa:	e004      	b.n	8005f06 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8005efc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f00:	fab3 f383 	clz	r3, r3
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_ADC_ConfigChannel+0x2a0>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	0e9b      	lsrs	r3, r3, #26
 8005f1a:	f003 031f 	and.w	r3, r3, #31
 8005f1e:	e018      	b.n	8005f52 <HAL_ADC_ConfigChannel+0x2d2>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005f2c:	fa93 f3a3 	rbit	r3, r3
 8005f30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8005f44:	2320      	movs	r3, #32
 8005f46:	e004      	b.n	8005f52 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8005f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f4c:	fab3 f383 	clz	r3, r3
 8005f50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d106      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff f8aa 	bl	80050b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2102      	movs	r1, #2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff f88e 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x310>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff f883 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005f86:	4603      	mov	r3, r0
 8005f88:	0e9b      	lsrs	r3, r3, #26
 8005f8a:	f003 021f 	and.w	r2, r3, #31
 8005f8e:	e01e      	b.n	8005fce <HAL_ADC_ConfigChannel+0x34e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2102      	movs	r1, #2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff f878 	bl	800508c <LL_ADC_GetOffsetChannel>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fa6:	fa93 f3a3 	rbit	r3, r3
 8005faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8005fbe:	2320      	movs	r3, #32
 8005fc0:	e004      	b.n	8005fcc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8005fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fc6:	fab3 f383 	clz	r3, r3
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <HAL_ADC_ConfigChannel+0x366>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	0e9b      	lsrs	r3, r3, #26
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	e014      	b.n	8006010 <HAL_ADC_ConfigChannel+0x390>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fee:	fa93 f3a3 	rbit	r3, r3
 8005ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ff6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8006002:	2320      	movs	r3, #32
 8006004:	e004      	b.n	8006010 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8006006:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800600a:	fab3 f383 	clz	r3, r3
 800600e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006010:	429a      	cmp	r2, r3
 8006012:	d106      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2200      	movs	r2, #0
 800601a:	2102      	movs	r1, #2
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f84b 	bl	80050b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2103      	movs	r1, #3
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff f82f 	bl	800508c <LL_ADC_GetOffsetChannel>
 800602e:	4603      	mov	r3, r0
 8006030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <HAL_ADC_ConfigChannel+0x3ce>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2103      	movs	r1, #3
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff f824 	bl	800508c <LL_ADC_GetOffsetChannel>
 8006044:	4603      	mov	r3, r0
 8006046:	0e9b      	lsrs	r3, r3, #26
 8006048:	f003 021f 	and.w	r2, r3, #31
 800604c:	e017      	b.n	800607e <HAL_ADC_ConfigChannel+0x3fe>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2103      	movs	r1, #3
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff f819 	bl	800508c <LL_ADC_GetOffsetChannel>
 800605a:	4603      	mov	r3, r0
 800605c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006060:	fa93 f3a3 	rbit	r3, r3
 8006064:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006068:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800606a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006070:	2320      	movs	r3, #32
 8006072:	e003      	b.n	800607c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006076:	fab3 f383 	clz	r3, r3
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <HAL_ADC_ConfigChannel+0x416>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	0e9b      	lsrs	r3, r3, #26
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	e011      	b.n	80060ba <HAL_ADC_ConfigChannel+0x43a>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800609e:	fa93 f3a3 	rbit	r3, r3
 80060a2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80060a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80060a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80060ae:	2320      	movs	r3, #32
 80060b0:	e003      	b.n	80060ba <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80060b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060b4:	fab3 f383 	clz	r3, r3
 80060b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d106      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	2103      	movs	r1, #3
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fff6 	bl	80050b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff f93f 	bl	8005354 <LL_ADC_IsEnabled>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 813f 	bne.w	800635c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6819      	ldr	r1, [r3, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f7ff f890 	bl	8005210 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a8e      	ldr	r2, [pc, #568]	@ (8006330 <HAL_ADC_ConfigChannel+0x6b0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	f040 8130 	bne.w	800635c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x4a4>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	0e9b      	lsrs	r3, r3, #26
 8006112:	3301      	adds	r3, #1
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2b09      	cmp	r3, #9
 800611a:	bf94      	ite	ls
 800611c:	2301      	movls	r3, #1
 800611e:	2300      	movhi	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	e019      	b.n	8006158 <HAL_ADC_ConfigChannel+0x4d8>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800612c:	fa93 f3a3 	rbit	r3, r3
 8006130:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006134:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800613c:	2320      	movs	r3, #32
 800613e:	e003      	b.n	8006148 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8006140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006142:	fab3 f383 	clz	r3, r3
 8006146:	b2db      	uxtb	r3, r3
 8006148:	3301      	adds	r3, #1
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	2b09      	cmp	r3, #9
 8006150:	bf94      	ite	ls
 8006152:	2301      	movls	r3, #1
 8006154:	2300      	movhi	r3, #0
 8006156:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006158:	2b00      	cmp	r3, #0
 800615a:	d079      	beq.n	8006250 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006164:	2b00      	cmp	r3, #0
 8006166:	d107      	bne.n	8006178 <HAL_ADC_ConfigChannel+0x4f8>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	0e9b      	lsrs	r3, r3, #26
 800616e:	3301      	adds	r3, #1
 8006170:	069b      	lsls	r3, r3, #26
 8006172:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006176:	e015      	b.n	80061a4 <HAL_ADC_ConfigChannel+0x524>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006180:	fa93 f3a3 	rbit	r3, r3
 8006184:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006188:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800618a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8006190:	2320      	movs	r3, #32
 8006192:	e003      	b.n	800619c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8006194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006196:	fab3 f383 	clz	r3, r3
 800619a:	b2db      	uxtb	r3, r3
 800619c:	3301      	adds	r3, #1
 800619e:	069b      	lsls	r3, r3, #26
 80061a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <HAL_ADC_ConfigChannel+0x544>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	0e9b      	lsrs	r3, r3, #26
 80061b6:	3301      	adds	r3, #1
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2101      	movs	r1, #1
 80061be:	fa01 f303 	lsl.w	r3, r1, r3
 80061c2:	e017      	b.n	80061f4 <HAL_ADC_ConfigChannel+0x574>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80061d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80061d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80061dc:	2320      	movs	r3, #32
 80061de:	e003      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80061e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	3301      	adds	r3, #1
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	2101      	movs	r1, #1
 80061f0:	fa01 f303 	lsl.w	r3, r1, r3
 80061f4:	ea42 0103 	orr.w	r1, r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <HAL_ADC_ConfigChannel+0x59a>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	0e9b      	lsrs	r3, r3, #26
 800620a:	3301      	adds	r3, #1
 800620c:	f003 021f 	and.w	r2, r3, #31
 8006210:	4613      	mov	r3, r2
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	4413      	add	r3, r2
 8006216:	051b      	lsls	r3, r3, #20
 8006218:	e018      	b.n	800624c <HAL_ADC_ConfigChannel+0x5cc>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006222:	fa93 f3a3 	rbit	r3, r3
 8006226:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800622c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8006232:	2320      	movs	r3, #32
 8006234:	e003      	b.n	800623e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	fab3 f383 	clz	r3, r3
 800623c:	b2db      	uxtb	r3, r3
 800623e:	3301      	adds	r3, #1
 8006240:	f003 021f 	and.w	r2, r3, #31
 8006244:	4613      	mov	r3, r2
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	4413      	add	r3, r2
 800624a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800624c:	430b      	orrs	r3, r1
 800624e:	e080      	b.n	8006352 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006258:	2b00      	cmp	r3, #0
 800625a:	d107      	bne.n	800626c <HAL_ADC_ConfigChannel+0x5ec>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	0e9b      	lsrs	r3, r3, #26
 8006262:	3301      	adds	r3, #1
 8006264:	069b      	lsls	r3, r3, #26
 8006266:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800626a:	e015      	b.n	8006298 <HAL_ADC_ConfigChannel+0x618>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	fa93 f3a3 	rbit	r3, r3
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800627e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8006284:	2320      	movs	r3, #32
 8006286:	e003      	b.n	8006290 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8006288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628a:	fab3 f383 	clz	r3, r3
 800628e:	b2db      	uxtb	r3, r3
 8006290:	3301      	adds	r3, #1
 8006292:	069b      	lsls	r3, r3, #26
 8006294:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x638>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	0e9b      	lsrs	r3, r3, #26
 80062aa:	3301      	adds	r3, #1
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	2101      	movs	r1, #1
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	e017      	b.n	80062e8 <HAL_ADC_ConfigChannel+0x668>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	fa93 f3a3 	rbit	r3, r3
 80062c4:	61bb      	str	r3, [r7, #24]
  return result;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80062d0:	2320      	movs	r3, #32
 80062d2:	e003      	b.n	80062dc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	fab3 f383 	clz	r3, r3
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	3301      	adds	r3, #1
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2101      	movs	r1, #1
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	ea42 0103 	orr.w	r1, r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10d      	bne.n	8006314 <HAL_ADC_ConfigChannel+0x694>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	0e9b      	lsrs	r3, r3, #26
 80062fe:	3301      	adds	r3, #1
 8006300:	f003 021f 	and.w	r2, r3, #31
 8006304:	4613      	mov	r3, r2
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	4413      	add	r3, r2
 800630a:	3b1e      	subs	r3, #30
 800630c:	051b      	lsls	r3, r3, #20
 800630e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006312:	e01d      	b.n	8006350 <HAL_ADC_ConfigChannel+0x6d0>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	fa93 f3a3 	rbit	r3, r3
 8006320:	60fb      	str	r3, [r7, #12]
  return result;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800632c:	2320      	movs	r3, #32
 800632e:	e005      	b.n	800633c <HAL_ADC_ConfigChannel+0x6bc>
 8006330:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	fab3 f383 	clz	r3, r3
 800633a:	b2db      	uxtb	r3, r3
 800633c:	3301      	adds	r3, #1
 800633e:	f003 021f 	and.w	r2, r3, #31
 8006342:	4613      	mov	r3, r2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	4413      	add	r3, r2
 8006348:	3b1e      	subs	r3, #30
 800634a:	051b      	lsls	r3, r3, #20
 800634c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006350:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006356:	4619      	mov	r1, r3
 8006358:	f7fe ff2e 	bl	80051b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4b44      	ldr	r3, [pc, #272]	@ (8006474 <HAL_ADC_ConfigChannel+0x7f4>)
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d07a      	beq.n	800645e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006368:	4843      	ldr	r0, [pc, #268]	@ (8006478 <HAL_ADC_ConfigChannel+0x7f8>)
 800636a:	f7fe fe5d 	bl	8005028 <LL_ADC_GetCommonPathInternalCh>
 800636e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a41      	ldr	r2, [pc, #260]	@ (800647c <HAL_ADC_ConfigChannel+0x7fc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d12c      	bne.n	80063d6 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800637c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d126      	bne.n	80063d6 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a3c      	ldr	r2, [pc, #240]	@ (8006480 <HAL_ADC_ConfigChannel+0x800>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_ADC_ConfigChannel+0x71c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a3b      	ldr	r2, [pc, #236]	@ (8006484 <HAL_ADC_ConfigChannel+0x804>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d15d      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800639c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063a4:	4619      	mov	r1, r3
 80063a6:	4834      	ldr	r0, [pc, #208]	@ (8006478 <HAL_ADC_ConfigChannel+0x7f8>)
 80063a8:	f7fe fe2b 	bl	8005002 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063ac:	4b36      	ldr	r3, [pc, #216]	@ (8006488 <HAL_ADC_ConfigChannel+0x808>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	099b      	lsrs	r3, r3, #6
 80063b2:	4a36      	ldr	r2, [pc, #216]	@ (800648c <HAL_ADC_ConfigChannel+0x80c>)
 80063b4:	fba2 2303 	umull	r2, r3, r2, r3
 80063b8:	099b      	lsrs	r3, r3, #6
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	4613      	mov	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80063c6:	e002      	b.n	80063ce <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1f9      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063d4:	e040      	b.n	8006458 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a2d      	ldr	r2, [pc, #180]	@ (8006490 <HAL_ADC_ConfigChannel+0x810>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d118      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d112      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a23      	ldr	r2, [pc, #140]	@ (8006480 <HAL_ADC_ConfigChannel+0x800>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_ADC_ConfigChannel+0x780>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a22      	ldr	r2, [pc, #136]	@ (8006484 <HAL_ADC_ConfigChannel+0x804>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d12d      	bne.n	800645c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006404:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006408:	4619      	mov	r1, r3
 800640a:	481b      	ldr	r0, [pc, #108]	@ (8006478 <HAL_ADC_ConfigChannel+0x7f8>)
 800640c:	f7fe fdf9 	bl	8005002 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006410:	e024      	b.n	800645c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1f      	ldr	r2, [pc, #124]	@ (8006494 <HAL_ADC_ConfigChannel+0x814>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d120      	bne.n	800645e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800641c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006420:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11a      	bne.n	800645e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a14      	ldr	r2, [pc, #80]	@ (8006480 <HAL_ADC_ConfigChannel+0x800>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d115      	bne.n	800645e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006436:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800643a:	4619      	mov	r1, r3
 800643c:	480e      	ldr	r0, [pc, #56]	@ (8006478 <HAL_ADC_ConfigChannel+0x7f8>)
 800643e:	f7fe fde0 	bl	8005002 <LL_ADC_SetCommonPathInternalCh>
 8006442:	e00c      	b.n	800645e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006448:	f043 0220 	orr.w	r2, r3, #32
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006456:	e002      	b.n	800645e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006458:	bf00      	nop
 800645a:	e000      	b.n	800645e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800645c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006466:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800646a:	4618      	mov	r0, r3
 800646c:	37d8      	adds	r7, #216	@ 0xd8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	80080000 	.word	0x80080000
 8006478:	50040300 	.word	0x50040300
 800647c:	c7520000 	.word	0xc7520000
 8006480:	50040000 	.word	0x50040000
 8006484:	50040200 	.word	0x50040200
 8006488:	20000434 	.word	0x20000434
 800648c:	053e2d63 	.word	0x053e2d63
 8006490:	cb840000 	.word	0xcb840000
 8006494:	80000001 	.word	0x80000001

08006498 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe ff53 	bl	8005354 <LL_ADC_IsEnabled>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d169      	bne.n	8006588 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	4b36      	ldr	r3, [pc, #216]	@ (8006594 <ADC_Enable+0xfc>)
 80064bc:	4013      	ands	r3, r2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	f043 0210 	orr.w	r2, r3, #16
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d2:	f043 0201 	orr.w	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e055      	b.n	800658a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe ff22 	bl	800532c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80064e8:	482b      	ldr	r0, [pc, #172]	@ (8006598 <ADC_Enable+0x100>)
 80064ea:	f7fe fd9d 	bl	8005028 <LL_ADC_GetCommonPathInternalCh>
 80064ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80064f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d013      	beq.n	8006520 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064f8:	4b28      	ldr	r3, [pc, #160]	@ (800659c <ADC_Enable+0x104>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	099b      	lsrs	r3, r3, #6
 80064fe:	4a28      	ldr	r2, [pc, #160]	@ (80065a0 <ADC_Enable+0x108>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	099b      	lsrs	r3, r3, #6
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	4613      	mov	r3, r2
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006512:	e002      	b.n	800651a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	3b01      	subs	r3, #1
 8006518:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f9      	bne.n	8006514 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006520:	f7fe fd0c 	bl	8004f3c <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006526:	e028      	b.n	800657a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe ff11 	bl	8005354 <LL_ADC_IsEnabled>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f7fe fef5 	bl	800532c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006542:	f7fe fcfb 	bl	8004f3c <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d914      	bls.n	800657a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b01      	cmp	r3, #1
 800655c:	d00d      	beq.n	800657a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006562:	f043 0210 	orr.w	r2, r3, #16
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656e:	f043 0201 	orr.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e007      	b.n	800658a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d1cf      	bne.n	8006528 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	8000003f 	.word	0x8000003f
 8006598:	50040300 	.word	0x50040300
 800659c:	20000434 	.word	0x20000434
 80065a0:	053e2d63 	.word	0x053e2d63

080065a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d14b      	bne.n	8006656 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d021      	beq.n	800661c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe fd99 	bl	8005114 <LL_ADC_REG_IsTriggerSourceSWStart>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d032      	beq.n	800664e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d12b      	bne.n	800664e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d11f      	bne.n	800664e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006612:	f043 0201 	orr.w	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	659a      	str	r2, [r3, #88]	@ 0x58
 800661a:	e018      	b.n	800664e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d111      	bne.n	800664e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d105      	bne.n	800664e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006646:	f043 0201 	orr.w	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7fd fcf4 	bl	800403c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006654:	e00e      	b.n	8006674 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fb02 	bl	8005c6c <HAL_ADC_ErrorCallback>
}
 8006668:	e004      	b.n	8006674 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
}
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff fada 	bl	8005c44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006690:	bf00      	nop
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b6:	f043 0204 	orr.w	r2, r3, #4
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f7ff fad4 	bl	8005c6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066c4:	bf00      	nop
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <LL_ADC_IsEnabled>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <LL_ADC_IsEnabled+0x18>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <LL_ADC_IsEnabled+0x1a>
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b04      	cmp	r3, #4
 8006704:	d101      	bne.n	800670a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b0a1      	sub	sp, #132	@ 0x84
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006796:	2302      	movs	r3, #2
 8006798:	e093      	b.n	80068c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80067a2:	2300      	movs	r3, #0
 80067a4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80067a6:	2300      	movs	r3, #0
 80067a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a47      	ldr	r2, [pc, #284]	@ (80068cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d102      	bne.n	80067ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80067b4:	4b46      	ldr	r3, [pc, #280]	@ (80068d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e001      	b.n	80067be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e072      	b.n	80068c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff ff87 	bl	80066f2 <LL_ADC_REG_IsConversionOngoing>
 80067e4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff ff81 	bl	80066f2 <LL_ADC_REG_IsConversionOngoing>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d154      	bne.n	80068a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80067f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d151      	bne.n	80068a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067fc:	4b35      	ldr	r3, [pc, #212]	@ (80068d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80067fe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02c      	beq.n	8006862 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6859      	ldr	r1, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800681a:	035b      	lsls	r3, r3, #13
 800681c:	430b      	orrs	r3, r1
 800681e:	431a      	orrs	r2, r3
 8006820:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006822:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006824:	4829      	ldr	r0, [pc, #164]	@ (80068cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006826:	f7ff ff51 	bl	80066cc <LL_ADC_IsEnabled>
 800682a:	4604      	mov	r4, r0
 800682c:	4828      	ldr	r0, [pc, #160]	@ (80068d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800682e:	f7ff ff4d 	bl	80066cc <LL_ADC_IsEnabled>
 8006832:	4603      	mov	r3, r0
 8006834:	431c      	orrs	r4, r3
 8006836:	4828      	ldr	r0, [pc, #160]	@ (80068d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006838:	f7ff ff48 	bl	80066cc <LL_ADC_IsEnabled>
 800683c:	4603      	mov	r3, r0
 800683e:	4323      	orrs	r3, r4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d137      	bne.n	80068b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006844:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800684c:	f023 030f 	bic.w	r3, r3, #15
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	6811      	ldr	r1, [r2, #0]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	6892      	ldr	r2, [r2, #8]
 8006858:	430a      	orrs	r2, r1
 800685a:	431a      	orrs	r2, r3
 800685c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800685e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006860:	e028      	b.n	80068b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800686a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800686c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800686e:	4817      	ldr	r0, [pc, #92]	@ (80068cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006870:	f7ff ff2c 	bl	80066cc <LL_ADC_IsEnabled>
 8006874:	4604      	mov	r4, r0
 8006876:	4816      	ldr	r0, [pc, #88]	@ (80068d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006878:	f7ff ff28 	bl	80066cc <LL_ADC_IsEnabled>
 800687c:	4603      	mov	r3, r0
 800687e:	431c      	orrs	r4, r3
 8006880:	4815      	ldr	r0, [pc, #84]	@ (80068d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006882:	f7ff ff23 	bl	80066cc <LL_ADC_IsEnabled>
 8006886:	4603      	mov	r3, r0
 8006888:	4323      	orrs	r3, r4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d112      	bne.n	80068b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800688e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006896:	f023 030f 	bic.w	r3, r3, #15
 800689a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800689c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800689e:	e009      	b.n	80068b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80068b2:	e000      	b.n	80068b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80068b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80068be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3784      	adds	r7, #132	@ 0x84
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd90      	pop	{r4, r7, pc}
 80068ca:	bf00      	nop
 80068cc:	50040000 	.word	0x50040000
 80068d0:	50040100 	.word	0x50040100
 80068d4:	50040300 	.word	0x50040300
 80068d8:	50040200 	.word	0x50040200

080068dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006920 <__NVIC_SetPriorityGrouping+0x44>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80068f8:	4013      	ands	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800690c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800690e:	4a04      	ldr	r2, [pc, #16]	@ (8006920 <__NVIC_SetPriorityGrouping+0x44>)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	60d3      	str	r3, [r2, #12]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	e000ed00 	.word	0xe000ed00

08006924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006928:	4b04      	ldr	r3, [pc, #16]	@ (800693c <__NVIC_GetPriorityGrouping+0x18>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	f003 0307 	and.w	r3, r3, #7
}
 8006932:	4618      	mov	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	e000ed00 	.word	0xe000ed00

08006940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800694a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694e:	2b00      	cmp	r3, #0
 8006950:	db0b      	blt.n	800696a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	f003 021f 	and.w	r2, r3, #31
 8006958:	4907      	ldr	r1, [pc, #28]	@ (8006978 <__NVIC_EnableIRQ+0x38>)
 800695a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	2001      	movs	r0, #1
 8006962:	fa00 f202 	lsl.w	r2, r0, r2
 8006966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	e000e100 	.word	0xe000e100

0800697c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698a:	2b00      	cmp	r3, #0
 800698c:	db12      	blt.n	80069b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	f003 021f 	and.w	r2, r3, #31
 8006994:	490a      	ldr	r1, [pc, #40]	@ (80069c0 <__NVIC_DisableIRQ+0x44>)
 8006996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2001      	movs	r0, #1
 800699e:	fa00 f202 	lsl.w	r2, r0, r2
 80069a2:	3320      	adds	r3, #32
 80069a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80069a8:	f3bf 8f4f 	dsb	sy
}
 80069ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80069ae:	f3bf 8f6f 	isb	sy
}
 80069b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	e000e100 	.word	0xe000e100

080069c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	6039      	str	r1, [r7, #0]
 80069ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	db0a      	blt.n	80069ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	490c      	ldr	r1, [pc, #48]	@ (8006a10 <__NVIC_SetPriority+0x4c>)
 80069de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e2:	0112      	lsls	r2, r2, #4
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	440b      	add	r3, r1
 80069e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069ec:	e00a      	b.n	8006a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	4908      	ldr	r1, [pc, #32]	@ (8006a14 <__NVIC_SetPriority+0x50>)
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	3b04      	subs	r3, #4
 80069fc:	0112      	lsls	r2, r2, #4
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	440b      	add	r3, r1
 8006a02:	761a      	strb	r2, [r3, #24]
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	e000e100 	.word	0xe000e100
 8006a14:	e000ed00 	.word	0xe000ed00

08006a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b089      	sub	sp, #36	@ 0x24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f1c3 0307 	rsb	r3, r3, #7
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	bf28      	it	cs
 8006a36:	2304      	movcs	r3, #4
 8006a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	2b06      	cmp	r3, #6
 8006a40:	d902      	bls.n	8006a48 <NVIC_EncodePriority+0x30>
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	3b03      	subs	r3, #3
 8006a46:	e000      	b.n	8006a4a <NVIC_EncodePriority+0x32>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43da      	mvns	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a60:	f04f 31ff 	mov.w	r1, #4294967295
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6a:	43d9      	mvns	r1, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a70:	4313      	orrs	r3, r2
         );
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3724      	adds	r7, #36	@ 0x24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a90:	d301      	bcc.n	8006a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a92:	2301      	movs	r3, #1
 8006a94:	e00f      	b.n	8006ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a96:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac0 <SysTick_Config+0x40>)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a9e:	210f      	movs	r1, #15
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	f7ff ff8e 	bl	80069c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006aa8:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <SysTick_Config+0x40>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aae:	4b04      	ldr	r3, [pc, #16]	@ (8006ac0 <SysTick_Config+0x40>)
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	e000e010 	.word	0xe000e010

08006ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff ff05 	bl	80068dc <__NVIC_SetPriorityGrouping>
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006aec:	f7ff ff1a 	bl	8006924 <__NVIC_GetPriorityGrouping>
 8006af0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	6978      	ldr	r0, [r7, #20]
 8006af8:	f7ff ff8e 	bl	8006a18 <NVIC_EncodePriority>
 8006afc:	4602      	mov	r2, r0
 8006afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b02:	4611      	mov	r1, r2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff ff5d 	bl	80069c4 <__NVIC_SetPriority>
}
 8006b0a:	bf00      	nop
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	4603      	mov	r3, r0
 8006b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff ff0d 	bl	8006940 <__NVIC_EnableIRQ>
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	4603      	mov	r3, r0
 8006b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff ff1d 	bl	800697c <__NVIC_DisableIRQ>
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff ff94 	bl	8006a80 <SysTick_Config>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e098      	b.n	8006ca8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8006cb4 <HAL_DMA_Init+0x150>)
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d80f      	bhi.n	8006ba2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb8 <HAL_DMA_Init+0x154>)
 8006b8a:	4413      	add	r3, r2
 8006b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8006cbc <HAL_DMA_Init+0x158>)
 8006b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	009a      	lsls	r2, r3, #2
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a48      	ldr	r2, [pc, #288]	@ (8006cc0 <HAL_DMA_Init+0x15c>)
 8006b9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ba0:	e00e      	b.n	8006bc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	4b46      	ldr	r3, [pc, #280]	@ (8006cc4 <HAL_DMA_Init+0x160>)
 8006baa:	4413      	add	r3, r2
 8006bac:	4a43      	ldr	r2, [pc, #268]	@ (8006cbc <HAL_DMA_Init+0x158>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	091b      	lsrs	r3, r3, #4
 8006bb4:	009a      	lsls	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a42      	ldr	r2, [pc, #264]	@ (8006cc8 <HAL_DMA_Init+0x164>)
 8006bbe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c1a:	d039      	beq.n	8006c90 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c20:	4a27      	ldr	r2, [pc, #156]	@ (8006cc0 <HAL_DMA_Init+0x15c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d11a      	bne.n	8006c5c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c26:	4b29      	ldr	r3, [pc, #164]	@ (8006ccc <HAL_DMA_Init+0x168>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2e:	f003 031c 	and.w	r3, r3, #28
 8006c32:	210f      	movs	r1, #15
 8006c34:	fa01 f303 	lsl.w	r3, r1, r3
 8006c38:	43db      	mvns	r3, r3
 8006c3a:	4924      	ldr	r1, [pc, #144]	@ (8006ccc <HAL_DMA_Init+0x168>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c40:	4b22      	ldr	r3, [pc, #136]	@ (8006ccc <HAL_DMA_Init+0x168>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4c:	f003 031c 	and.w	r3, r3, #28
 8006c50:	fa01 f303 	lsl.w	r3, r1, r3
 8006c54:	491d      	ldr	r1, [pc, #116]	@ (8006ccc <HAL_DMA_Init+0x168>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	600b      	str	r3, [r1, #0]
 8006c5a:	e019      	b.n	8006c90 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd0 <HAL_DMA_Init+0x16c>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c64:	f003 031c 	and.w	r3, r3, #28
 8006c68:	210f      	movs	r1, #15
 8006c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	4917      	ldr	r1, [pc, #92]	@ (8006cd0 <HAL_DMA_Init+0x16c>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006c76:	4b16      	ldr	r3, [pc, #88]	@ (8006cd0 <HAL_DMA_Init+0x16c>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6859      	ldr	r1, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c82:	f003 031c 	and.w	r3, r3, #28
 8006c86:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8a:	4911      	ldr	r1, [pc, #68]	@ (8006cd0 <HAL_DMA_Init+0x16c>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	40020407 	.word	0x40020407
 8006cb8:	bffdfff8 	.word	0xbffdfff8
 8006cbc:	cccccccd 	.word	0xcccccccd
 8006cc0:	40020000 	.word	0x40020000
 8006cc4:	bffdfbf8 	.word	0xbffdfbf8
 8006cc8:	40020400 	.word	0x40020400
 8006ccc:	400200a8 	.word	0x400200a8
 8006cd0:	400204a8 	.word	0x400204a8

08006cd4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e072      	b.n	8006dcc <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0201 	bic.w	r2, r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4b36      	ldr	r3, [pc, #216]	@ (8006dd8 <HAL_DMA_DeInit+0x104>)
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d80f      	bhi.n	8006d22 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	4b34      	ldr	r3, [pc, #208]	@ (8006ddc <HAL_DMA_DeInit+0x108>)
 8006d0a:	4413      	add	r3, r2
 8006d0c:	4a34      	ldr	r2, [pc, #208]	@ (8006de0 <HAL_DMA_DeInit+0x10c>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	091b      	lsrs	r3, r3, #4
 8006d14:	009a      	lsls	r2, r3, #2
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a31      	ldr	r2, [pc, #196]	@ (8006de4 <HAL_DMA_DeInit+0x110>)
 8006d1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006d20:	e00e      	b.n	8006d40 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	4b2f      	ldr	r3, [pc, #188]	@ (8006de8 <HAL_DMA_DeInit+0x114>)
 8006d2a:	4413      	add	r3, r2
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006de0 <HAL_DMA_DeInit+0x10c>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	091b      	lsrs	r3, r3, #4
 8006d34:	009a      	lsls	r2, r3, #2
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006dec <HAL_DMA_DeInit+0x118>)
 8006d3e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4c:	f003 021c 	and.w	r2, r3, #28
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d54:	2101      	movs	r1, #1
 8006d56:	fa01 f202 	lsl.w	r2, r1, r2
 8006d5a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	4a20      	ldr	r2, [pc, #128]	@ (8006de4 <HAL_DMA_DeInit+0x110>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d10d      	bne.n	8006d82 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006d66:	4b22      	ldr	r3, [pc, #136]	@ (8006df0 <HAL_DMA_DeInit+0x11c>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6e:	f003 031c 	and.w	r3, r3, #28
 8006d72:	210f      	movs	r1, #15
 8006d74:	fa01 f303 	lsl.w	r3, r1, r3
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	491d      	ldr	r1, [pc, #116]	@ (8006df0 <HAL_DMA_DeInit+0x11c>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	600b      	str	r3, [r1, #0]
 8006d80:	e00c      	b.n	8006d9c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006d82:	4b1c      	ldr	r3, [pc, #112]	@ (8006df4 <HAL_DMA_DeInit+0x120>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8a:	f003 031c 	and.w	r3, r3, #28
 8006d8e:	210f      	movs	r1, #15
 8006d90:	fa01 f303 	lsl.w	r3, r1, r3
 8006d94:	43db      	mvns	r3, r3
 8006d96:	4917      	ldr	r1, [pc, #92]	@ (8006df4 <HAL_DMA_DeInit+0x120>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	40020407 	.word	0x40020407
 8006ddc:	bffdfff8 	.word	0xbffdfff8
 8006de0:	cccccccd 	.word	0xcccccccd
 8006de4:	40020000 	.word	0x40020000
 8006de8:	bffdfbf8 	.word	0xbffdfbf8
 8006dec:	40020400 	.word	0x40020400
 8006df0:	400200a8 	.word	0x400200a8
 8006df4:	400204a8 	.word	0x400204a8

08006df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_DMA_Start_IT+0x20>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e04b      	b.n	8006eb0 <HAL_DMA_Start_IT+0xb8>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d13a      	bne.n	8006ea2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f96d 	bl	8007130 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 020e 	orr.w	r2, r2, #14
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e00f      	b.n	8006e90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0204 	bic.w	r2, r2, #4
 8006e7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 020a 	orr.w	r2, r2, #10
 8006e8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e005      	b.n	8006eae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006eaa:	2302      	movs	r3, #2
 8006eac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d008      	beq.n	8006ee2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e022      	b.n	8006f28 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 020e 	bic.w	r2, r2, #14
 8006ef0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f06:	f003 021c 	and.w	r2, r3, #28
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	2101      	movs	r1, #1
 8006f10:	fa01 f202 	lsl.w	r2, r1, r2
 8006f14:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d005      	beq.n	8006f58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]
 8006f56:	e029      	b.n	8006fac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 020e 	bic.w	r2, r2, #14
 8006f66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7c:	f003 021c 	and.w	r2, r3, #28
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f84:	2101      	movs	r1, #1
 8006f86:	fa01 f202 	lsl.w	r2, r1, r2
 8006f8a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
    }
  }
  return status;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd2:	f003 031c 	and.w	r3, r3, #28
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d026      	beq.n	8007030 <HAL_DMA_IRQHandler+0x7a>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d021      	beq.n	8007030 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d107      	bne.n	800700a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0204 	bic.w	r2, r2, #4
 8007008:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700e:	f003 021c 	and.w	r2, r3, #28
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007016:	2104      	movs	r1, #4
 8007018:	fa01 f202 	lsl.w	r2, r1, r2
 800701c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007022:	2b00      	cmp	r3, #0
 8007024:	d071      	beq.n	800710a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800702e:	e06c      	b.n	800710a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007034:	f003 031c 	and.w	r3, r3, #28
 8007038:	2202      	movs	r2, #2
 800703a:	409a      	lsls	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d02e      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xec>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d029      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 020a 	bic.w	r2, r2, #10
 800706a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007078:	f003 021c 	and.w	r2, r3, #28
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007080:	2102      	movs	r1, #2
 8007082:	fa01 f202 	lsl.w	r2, r1, r2
 8007086:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d038      	beq.n	800710a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80070a0:	e033      	b.n	800710a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a6:	f003 031c 	and.w	r3, r3, #28
 80070aa:	2208      	movs	r2, #8
 80070ac:	409a      	lsls	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4013      	ands	r3, r2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d02a      	beq.n	800710c <HAL_DMA_IRQHandler+0x156>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f003 0308 	and.w	r3, r3, #8
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d025      	beq.n	800710c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 020e 	bic.w	r2, r2, #14
 80070ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d4:	f003 021c 	and.w	r2, r3, #28
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070dc:	2101      	movs	r1, #1
 80070de:	fa01 f202 	lsl.w	r2, r1, r2
 80070e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800710a:	bf00      	nop
 800710c:	bf00      	nop
}
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007122:	b2db      	uxtb	r3, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	f003 021c 	and.w	r2, r3, #28
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	2101      	movs	r1, #1
 800714c:	fa01 f202 	lsl.w	r2, r1, r2
 8007150:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b10      	cmp	r3, #16
 8007160:	d108      	bne.n	8007174 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007172:	e007      	b.n	8007184 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	60da      	str	r2, [r3, #12]
}
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800719e:	e166      	b.n	800746e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	2101      	movs	r1, #1
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ac:	4013      	ands	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8158 	beq.w	8007468 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d005      	beq.n	80071d0 <HAL_GPIO_Init+0x40>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d130      	bne.n	8007232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	2203      	movs	r2, #3
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4013      	ands	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007206:	2201      	movs	r2, #1
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	fa02 f303 	lsl.w	r3, r2, r3
 800720e:	43db      	mvns	r3, r3
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4013      	ands	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	091b      	lsrs	r3, r3, #4
 800721c:	f003 0201 	and.w	r2, r3, #1
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	2b03      	cmp	r3, #3
 800723c:	d017      	beq.n	800726e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	2203      	movs	r2, #3
 800724a:	fa02 f303 	lsl.w	r3, r2, r3
 800724e:	43db      	mvns	r3, r3
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4013      	ands	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d123      	bne.n	80072c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	08da      	lsrs	r2, r3, #3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3208      	adds	r2, #8
 8007282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	220f      	movs	r2, #15
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4013      	ands	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	08da      	lsrs	r2, r3, #3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3208      	adds	r2, #8
 80072bc:	6939      	ldr	r1, [r7, #16]
 80072be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	2203      	movs	r2, #3
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	43db      	mvns	r3, r3
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4013      	ands	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f003 0203 	and.w	r2, r3, #3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80b2 	beq.w	8007468 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007304:	4b61      	ldr	r3, [pc, #388]	@ (800748c <HAL_GPIO_Init+0x2fc>)
 8007306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007308:	4a60      	ldr	r2, [pc, #384]	@ (800748c <HAL_GPIO_Init+0x2fc>)
 800730a:	f043 0301 	orr.w	r3, r3, #1
 800730e:	6613      	str	r3, [r2, #96]	@ 0x60
 8007310:	4b5e      	ldr	r3, [pc, #376]	@ (800748c <HAL_GPIO_Init+0x2fc>)
 8007312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800731c:	4a5c      	ldr	r2, [pc, #368]	@ (8007490 <HAL_GPIO_Init+0x300>)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	089b      	lsrs	r3, r3, #2
 8007322:	3302      	adds	r3, #2
 8007324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	220f      	movs	r2, #15
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	43db      	mvns	r3, r3
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4013      	ands	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007346:	d02b      	beq.n	80073a0 <HAL_GPIO_Init+0x210>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a52      	ldr	r2, [pc, #328]	@ (8007494 <HAL_GPIO_Init+0x304>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d025      	beq.n	800739c <HAL_GPIO_Init+0x20c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a51      	ldr	r2, [pc, #324]	@ (8007498 <HAL_GPIO_Init+0x308>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d01f      	beq.n	8007398 <HAL_GPIO_Init+0x208>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a50      	ldr	r2, [pc, #320]	@ (800749c <HAL_GPIO_Init+0x30c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d019      	beq.n	8007394 <HAL_GPIO_Init+0x204>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a4f      	ldr	r2, [pc, #316]	@ (80074a0 <HAL_GPIO_Init+0x310>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d013      	beq.n	8007390 <HAL_GPIO_Init+0x200>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a4e      	ldr	r2, [pc, #312]	@ (80074a4 <HAL_GPIO_Init+0x314>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00d      	beq.n	800738c <HAL_GPIO_Init+0x1fc>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a4d      	ldr	r2, [pc, #308]	@ (80074a8 <HAL_GPIO_Init+0x318>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d007      	beq.n	8007388 <HAL_GPIO_Init+0x1f8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a4c      	ldr	r2, [pc, #304]	@ (80074ac <HAL_GPIO_Init+0x31c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d101      	bne.n	8007384 <HAL_GPIO_Init+0x1f4>
 8007380:	2307      	movs	r3, #7
 8007382:	e00e      	b.n	80073a2 <HAL_GPIO_Init+0x212>
 8007384:	2308      	movs	r3, #8
 8007386:	e00c      	b.n	80073a2 <HAL_GPIO_Init+0x212>
 8007388:	2306      	movs	r3, #6
 800738a:	e00a      	b.n	80073a2 <HAL_GPIO_Init+0x212>
 800738c:	2305      	movs	r3, #5
 800738e:	e008      	b.n	80073a2 <HAL_GPIO_Init+0x212>
 8007390:	2304      	movs	r3, #4
 8007392:	e006      	b.n	80073a2 <HAL_GPIO_Init+0x212>
 8007394:	2303      	movs	r3, #3
 8007396:	e004      	b.n	80073a2 <HAL_GPIO_Init+0x212>
 8007398:	2302      	movs	r3, #2
 800739a:	e002      	b.n	80073a2 <HAL_GPIO_Init+0x212>
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <HAL_GPIO_Init+0x212>
 80073a0:	2300      	movs	r3, #0
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	f002 0203 	and.w	r2, r2, #3
 80073a8:	0092      	lsls	r2, r2, #2
 80073aa:	4093      	lsls	r3, r2
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80073b2:	4937      	ldr	r1, [pc, #220]	@ (8007490 <HAL_GPIO_Init+0x300>)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	089b      	lsrs	r3, r3, #2
 80073b8:	3302      	adds	r3, #2
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80073c0:	4b3b      	ldr	r3, [pc, #236]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	43db      	mvns	r3, r3
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4013      	ands	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80073e4:	4a32      	ldr	r2, [pc, #200]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80073ea:	4b31      	ldr	r3, [pc, #196]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	43db      	mvns	r3, r3
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4013      	ands	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800740e:	4a28      	ldr	r2, [pc, #160]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007414:	4b26      	ldr	r3, [pc, #152]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	43db      	mvns	r3, r3
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4013      	ands	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4313      	orrs	r3, r2
 8007436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007438:	4a1d      	ldr	r2, [pc, #116]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800743e:	4b1c      	ldr	r3, [pc, #112]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	43db      	mvns	r3, r3
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4013      	ands	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007462:	4a13      	ldr	r2, [pc, #76]	@ (80074b0 <HAL_GPIO_Init+0x320>)
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	3301      	adds	r3, #1
 800746c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	f47f ae91 	bne.w	80071a0 <HAL_GPIO_Init+0x10>
  }
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	40021000 	.word	0x40021000
 8007490:	40010000 	.word	0x40010000
 8007494:	48000400 	.word	0x48000400
 8007498:	48000800 	.word	0x48000800
 800749c:	48000c00 	.word	0x48000c00
 80074a0:	48001000 	.word	0x48001000
 80074a4:	48001400 	.word	0x48001400
 80074a8:	48001800 	.word	0x48001800
 80074ac:	48001c00 	.word	0x48001c00
 80074b0:	40010400 	.word	0x40010400

080074b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80074c2:	e0c9      	b.n	8007658 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80074c4:	2201      	movs	r2, #1
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	4013      	ands	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 80bc 	beq.w	8007652 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80074da:	4a66      	ldr	r2, [pc, #408]	@ (8007674 <HAL_GPIO_DeInit+0x1c0>)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	089b      	lsrs	r3, r3, #2
 80074e0:	3302      	adds	r3, #2
 80074e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	220f      	movs	r2, #15
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4013      	ands	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007502:	d02b      	beq.n	800755c <HAL_GPIO_DeInit+0xa8>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a5c      	ldr	r2, [pc, #368]	@ (8007678 <HAL_GPIO_DeInit+0x1c4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d025      	beq.n	8007558 <HAL_GPIO_DeInit+0xa4>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a5b      	ldr	r2, [pc, #364]	@ (800767c <HAL_GPIO_DeInit+0x1c8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d01f      	beq.n	8007554 <HAL_GPIO_DeInit+0xa0>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a5a      	ldr	r2, [pc, #360]	@ (8007680 <HAL_GPIO_DeInit+0x1cc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d019      	beq.n	8007550 <HAL_GPIO_DeInit+0x9c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a59      	ldr	r2, [pc, #356]	@ (8007684 <HAL_GPIO_DeInit+0x1d0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <HAL_GPIO_DeInit+0x98>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a58      	ldr	r2, [pc, #352]	@ (8007688 <HAL_GPIO_DeInit+0x1d4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00d      	beq.n	8007548 <HAL_GPIO_DeInit+0x94>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a57      	ldr	r2, [pc, #348]	@ (800768c <HAL_GPIO_DeInit+0x1d8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d007      	beq.n	8007544 <HAL_GPIO_DeInit+0x90>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a56      	ldr	r2, [pc, #344]	@ (8007690 <HAL_GPIO_DeInit+0x1dc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d101      	bne.n	8007540 <HAL_GPIO_DeInit+0x8c>
 800753c:	2307      	movs	r3, #7
 800753e:	e00e      	b.n	800755e <HAL_GPIO_DeInit+0xaa>
 8007540:	2308      	movs	r3, #8
 8007542:	e00c      	b.n	800755e <HAL_GPIO_DeInit+0xaa>
 8007544:	2306      	movs	r3, #6
 8007546:	e00a      	b.n	800755e <HAL_GPIO_DeInit+0xaa>
 8007548:	2305      	movs	r3, #5
 800754a:	e008      	b.n	800755e <HAL_GPIO_DeInit+0xaa>
 800754c:	2304      	movs	r3, #4
 800754e:	e006      	b.n	800755e <HAL_GPIO_DeInit+0xaa>
 8007550:	2303      	movs	r3, #3
 8007552:	e004      	b.n	800755e <HAL_GPIO_DeInit+0xaa>
 8007554:	2302      	movs	r3, #2
 8007556:	e002      	b.n	800755e <HAL_GPIO_DeInit+0xaa>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <HAL_GPIO_DeInit+0xaa>
 800755c:	2300      	movs	r3, #0
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	f002 0203 	and.w	r2, r2, #3
 8007564:	0092      	lsls	r2, r2, #2
 8007566:	4093      	lsls	r3, r2
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	429a      	cmp	r2, r3
 800756c:	d132      	bne.n	80075d4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800756e:	4b49      	ldr	r3, [pc, #292]	@ (8007694 <HAL_GPIO_DeInit+0x1e0>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	43db      	mvns	r3, r3
 8007576:	4947      	ldr	r1, [pc, #284]	@ (8007694 <HAL_GPIO_DeInit+0x1e0>)
 8007578:	4013      	ands	r3, r2
 800757a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800757c:	4b45      	ldr	r3, [pc, #276]	@ (8007694 <HAL_GPIO_DeInit+0x1e0>)
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	43db      	mvns	r3, r3
 8007584:	4943      	ldr	r1, [pc, #268]	@ (8007694 <HAL_GPIO_DeInit+0x1e0>)
 8007586:	4013      	ands	r3, r2
 8007588:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800758a:	4b42      	ldr	r3, [pc, #264]	@ (8007694 <HAL_GPIO_DeInit+0x1e0>)
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	43db      	mvns	r3, r3
 8007592:	4940      	ldr	r1, [pc, #256]	@ (8007694 <HAL_GPIO_DeInit+0x1e0>)
 8007594:	4013      	ands	r3, r2
 8007596:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007598:	4b3e      	ldr	r3, [pc, #248]	@ (8007694 <HAL_GPIO_DeInit+0x1e0>)
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	43db      	mvns	r3, r3
 80075a0:	493c      	ldr	r1, [pc, #240]	@ (8007694 <HAL_GPIO_DeInit+0x1e0>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f003 0303 	and.w	r3, r3, #3
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	220f      	movs	r2, #15
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80075b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007674 <HAL_GPIO_DeInit+0x1c0>)
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	089b      	lsrs	r3, r3, #2
 80075bc:	3302      	adds	r3, #2
 80075be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	43da      	mvns	r2, r3
 80075c6:	482b      	ldr	r0, [pc, #172]	@ (8007674 <HAL_GPIO_DeInit+0x1c0>)
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	089b      	lsrs	r3, r3, #2
 80075cc:	400a      	ands	r2, r1
 80075ce:	3302      	adds	r3, #2
 80075d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	2103      	movs	r1, #3
 80075de:	fa01 f303 	lsl.w	r3, r1, r3
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	08da      	lsrs	r2, r3, #3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3208      	adds	r2, #8
 80075f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	220f      	movs	r2, #15
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	43db      	mvns	r3, r3
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	08d2      	lsrs	r2, r2, #3
 8007608:	4019      	ands	r1, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3208      	adds	r2, #8
 800760e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	2103      	movs	r1, #3
 800761c:	fa01 f303 	lsl.w	r3, r1, r3
 8007620:	43db      	mvns	r3, r3
 8007622:	401a      	ands	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	2101      	movs	r1, #1
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	fa01 f303 	lsl.w	r3, r1, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	401a      	ands	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	2103      	movs	r1, #3
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	43db      	mvns	r3, r3
 800764c:	401a      	ands	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	3301      	adds	r3, #1
 8007656:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	f47f af2f 	bne.w	80074c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	40010000 	.word	0x40010000
 8007678:	48000400 	.word	0x48000400
 800767c:	48000800 	.word	0x48000800
 8007680:	48000c00 	.word	0x48000c00
 8007684:	48001000 	.word	0x48001000
 8007688:	48001400 	.word	0x48001400
 800768c:	48001800 	.word	0x48001800
 8007690:	48001c00 	.word	0x48001c00
 8007694:	40010400 	.word	0x40010400

08007698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	887b      	ldrh	r3, [r7, #2]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
 80076b4:	e001      	b.n	80076ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]
 80076d4:	4613      	mov	r3, r2
 80076d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076d8:	787b      	ldrb	r3, [r7, #1]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80076de:	887a      	ldrh	r2, [r7, #2]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80076e4:	e002      	b.n	80076ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80076e6:	887a      	ldrh	r2, [r7, #2]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e08d      	b.n	8007826 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fc fe12 	bl	8004348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2224      	movs	r2, #36	@ 0x24
 8007728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d107      	bne.n	8007772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800776e:	609a      	str	r2, [r3, #8]
 8007770:	e006      	b.n	8007780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800777e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d108      	bne.n	800779a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007796:	605a      	str	r2, [r3, #4]
 8007798:	e007      	b.n	80077aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80077b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69d9      	ldr	r1, [r3, #28]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	@ 0x28
 8007834:	af02      	add	r7, sp, #8
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	461a      	mov	r2, r3
 800783c:	460b      	mov	r3, r1
 800783e:	817b      	strh	r3, [r7, #10]
 8007840:	4613      	mov	r3, r2
 8007842:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b20      	cmp	r3, #32
 8007852:	f040 80ef 	bne.w	8007a34 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007864:	d101      	bne.n	800786a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007866:	2302      	movs	r3, #2
 8007868:	e0e5      	b.n	8007a36 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007874:	2302      	movs	r3, #2
 8007876:	e0de      	b.n	8007a36 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2221      	movs	r2, #33	@ 0x21
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2210      	movs	r2, #16
 800788c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	893a      	ldrh	r2, [r7, #8]
 80078a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4a66      	ldr	r2, [pc, #408]	@ (8007a40 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80078a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a66      	ldr	r2, [pc, #408]	@ (8007a44 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80078ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2bff      	cmp	r3, #255	@ 0xff
 80078b6:	d906      	bls.n	80078c6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	22ff      	movs	r2, #255	@ 0xff
 80078bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80078be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	e007      	b.n	80078d6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80078d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078d4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01a      	beq.n	8007914 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007918:	2b00      	cmp	r3, #0
 800791a:	d074      	beq.n	8007a06 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007920:	2b00      	cmp	r3, #0
 8007922:	d022      	beq.n	800796a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007928:	4a47      	ldr	r2, [pc, #284]	@ (8007a48 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800792a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007930:	4a46      	ldr	r2, [pc, #280]	@ (8007a4c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007932:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007938:	2200      	movs	r2, #0
 800793a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007940:	2200      	movs	r2, #0
 8007942:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007954:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800795a:	f7ff fa4d 	bl	8006df8 <HAL_DMA_Start_IT>
 800795e:	4603      	mov	r3, r0
 8007960:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d13a      	bne.n	80079de <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007968:	e013      	b.n	8007992 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e051      	b.n	8007a36 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007996:	b2db      	uxtb	r3, r3
 8007998:	3301      	adds	r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	8979      	ldrh	r1, [r7, #10]
 800799e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a50 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f002 f8f9 	bl	8009b9c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80079c4:	2110      	movs	r1, #16
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f002 f91a 	bl	8009c00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e028      	b.n	8007a30 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f2:	f043 0210 	orr.w	r2, r3, #16
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e017      	b.n	8007a36 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4a12      	ldr	r2, [pc, #72]	@ (8007a54 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007a0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	8979      	ldrh	r1, [r7, #10]
 8007a12:	4b0f      	ldr	r3, [pc, #60]	@ (8007a50 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f002 f8be 	bl	8009b9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007a28:	2101      	movs	r1, #1
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f002 f8e8 	bl	8009c00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e000      	b.n	8007a36 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007a34:	2302      	movs	r3, #2
  }
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	ffff0000 	.word	0xffff0000
 8007a44:	08008665 	.word	0x08008665
 8007a48:	08009693 	.word	0x08009693
 8007a4c:	080097bf 	.word	0x080097bf
 8007a50:	80002000 	.word	0x80002000
 8007a54:	08008227 	.word	0x08008227

08007a58 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	461a      	mov	r2, r3
 8007a64:	460b      	mov	r3, r1
 8007a66:	817b      	strh	r3, [r7, #10]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	f040 80cd 	bne.w	8007c14 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a88:	d101      	bne.n	8007a8e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e0c3      	b.n	8007c16 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_I2C_Master_Receive_DMA+0x44>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e0bc      	b.n	8007c16 <HAL_I2C_Master_Receive_DMA+0x1be>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2222      	movs	r2, #34	@ 0x22
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2210      	movs	r2, #16
 8007ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	893a      	ldrh	r2, [r7, #8]
 8007ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4a55      	ldr	r2, [pc, #340]	@ (8007c20 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8007aca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a55      	ldr	r2, [pc, #340]	@ (8007c24 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8007ad0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2bff      	cmp	r3, #255	@ 0xff
 8007ada:	d906      	bls.n	8007aea <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	22ff      	movs	r2, #255	@ 0xff
 8007ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007ae2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e007      	b.n	8007afa <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007af4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007af8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d070      	beq.n	8007be4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d020      	beq.n	8007b4c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b0e:	4a46      	ldr	r2, [pc, #280]	@ (8007c28 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8007b10:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b16:	4a45      	ldr	r2, [pc, #276]	@ (8007c2c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8007b18:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1e:	2200      	movs	r2, #0
 8007b20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b26:	2200      	movs	r2, #0
 8007b28:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3324      	adds	r3, #36	@ 0x24
 8007b34:	4619      	mov	r1, r3
 8007b36:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007b3c:	f7ff f95c 	bl	8006df8 <HAL_DMA_Start_IT>
 8007b40:	4603      	mov	r3, r0
 8007b42:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007b44:	7cfb      	ldrb	r3, [r7, #19]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d138      	bne.n	8007bbc <HAL_I2C_Master_Receive_DMA+0x164>
 8007b4a:	e013      	b.n	8007b74 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e050      	b.n	8007c16 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	8979      	ldrh	r1, [r7, #10]
 8007b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8007c30 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f002 f80a 	bl	8009b9c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007ba2:	2110      	movs	r1, #16
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f002 f82b 	bl	8009c00 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e029      	b.n	8007c10 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd0:	f043 0210 	orr.w	r2, r3, #16
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e018      	b.n	8007c16 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4a13      	ldr	r2, [pc, #76]	@ (8007c34 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8007be8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	8979      	ldrh	r1, [r7, #10]
 8007bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8007c30 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f001 ffce 	bl	8009b9c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007c08:	2102      	movs	r1, #2
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f001 fff8 	bl	8009c00 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	e000      	b.n	8007c16 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8007c14:	2302      	movs	r3, #2
  }
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	ffff0000 	.word	0xffff0000
 8007c24:	08008665 	.word	0x08008665
 8007c28:	08009729 	.word	0x08009729
 8007c2c:	080097bf 	.word	0x080097bf
 8007c30:	80002400 	.word	0x80002400
 8007c34:	08008227 	.word	0x08008227

08007c38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	461a      	mov	r2, r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	817b      	strh	r3, [r7, #10]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	813b      	strh	r3, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	f040 80f9 	bne.w	8007e52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_I2C_Mem_Write+0x34>
 8007c66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d105      	bne.n	8007c78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c72:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e0ed      	b.n	8007e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_I2C_Mem_Write+0x4e>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e0e6      	b.n	8007e54 <HAL_I2C_Mem_Write+0x21c>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c8e:	f7fd f955 	bl	8004f3c <HAL_GetTick>
 8007c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2319      	movs	r3, #25
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f001 fdc1 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e0d1      	b.n	8007e54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2221      	movs	r2, #33	@ 0x21
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2240      	movs	r2, #64	@ 0x40
 8007cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a3a      	ldr	r2, [r7, #32]
 8007cca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cd8:	88f8      	ldrh	r0, [r7, #6]
 8007cda:	893a      	ldrh	r2, [r7, #8]
 8007cdc:	8979      	ldrh	r1, [r7, #10]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 ffa3 	bl	8008c34 <I2C_RequestMemoryWrite>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0a9      	b.n	8007e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2bff      	cmp	r3, #255	@ 0xff
 8007d08:	d90e      	bls.n	8007d28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	22ff      	movs	r2, #255	@ 0xff
 8007d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	8979      	ldrh	r1, [r7, #10]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 ff3b 	bl	8009b9c <I2C_TransferConfig>
 8007d26:	e00f      	b.n	8007d48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	8979      	ldrh	r1, [r7, #10]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f001 ff2a 	bl	8009b9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f001 fdba 	bl	80098c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e07b      	b.n	8007e54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d034      	beq.n	8007e00 <HAL_I2C_Mem_Write+0x1c8>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d130      	bne.n	8007e00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da4:	2200      	movs	r2, #0
 8007da6:	2180      	movs	r1, #128	@ 0x80
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f001 fd3d 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e04d      	b.n	8007e54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2bff      	cmp	r3, #255	@ 0xff
 8007dc0:	d90e      	bls.n	8007de0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	22ff      	movs	r2, #255	@ 0xff
 8007dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	8979      	ldrh	r1, [r7, #10]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f001 fedf 	bl	8009b9c <I2C_TransferConfig>
 8007dde:	e00f      	b.n	8007e00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	8979      	ldrh	r1, [r7, #10]
 8007df2:	2300      	movs	r3, #0
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 fece 	bl	8009b9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d19e      	bne.n	8007d48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f001 fda0 	bl	8009954 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e01a      	b.n	8007e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2220      	movs	r2, #32
 8007e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6859      	ldr	r1, [r3, #4]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	4b0a      	ldr	r3, [pc, #40]	@ (8007e5c <HAL_I2C_Mem_Write+0x224>)
 8007e32:	400b      	ands	r3, r1
 8007e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e000      	b.n	8007e54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007e52:	2302      	movs	r3, #2
  }
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	fe00e800 	.word	0xfe00e800

08007e60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	817b      	strh	r3, [r7, #10]
 8007e72:	460b      	mov	r3, r1
 8007e74:	813b      	strh	r3, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	f040 80fd 	bne.w	8008082 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <HAL_I2C_Mem_Read+0x34>
 8007e8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d105      	bne.n	8007ea0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0f1      	b.n	8008084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_I2C_Mem_Read+0x4e>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e0ea      	b.n	8008084 <HAL_I2C_Mem_Read+0x224>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007eb6:	f7fd f841 	bl	8004f3c <HAL_GetTick>
 8007eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	2319      	movs	r3, #25
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f001 fcad 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e0d5      	b.n	8008084 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2222      	movs	r2, #34	@ 0x22
 8007edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2240      	movs	r2, #64	@ 0x40
 8007ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a3a      	ldr	r2, [r7, #32]
 8007ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f00:	88f8      	ldrh	r0, [r7, #6]
 8007f02:	893a      	ldrh	r2, [r7, #8]
 8007f04:	8979      	ldrh	r1, [r7, #10]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	4603      	mov	r3, r0
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fee3 	bl	8008cdc <I2C_RequestMemoryRead>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e0ad      	b.n	8008084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2bff      	cmp	r3, #255	@ 0xff
 8007f30:	d90e      	bls.n	8007f50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	22ff      	movs	r2, #255	@ 0xff
 8007f36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	8979      	ldrh	r1, [r7, #10]
 8007f40:	4b52      	ldr	r3, [pc, #328]	@ (800808c <HAL_I2C_Mem_Read+0x22c>)
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f001 fe27 	bl	8009b9c <I2C_TransferConfig>
 8007f4e:	e00f      	b.n	8007f70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	8979      	ldrh	r1, [r7, #10]
 8007f62:	4b4a      	ldr	r3, [pc, #296]	@ (800808c <HAL_I2C_Mem_Read+0x22c>)
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f001 fe16 	bl	8009b9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f76:	2200      	movs	r2, #0
 8007f78:	2104      	movs	r1, #4
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f001 fc54 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e07c      	b.n	8008084 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d034      	beq.n	8008030 <HAL_I2C_Mem_Read+0x1d0>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d130      	bne.n	8008030 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2180      	movs	r1, #128	@ 0x80
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f001 fc25 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e04d      	b.n	8008084 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	2bff      	cmp	r3, #255	@ 0xff
 8007ff0:	d90e      	bls.n	8008010 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	22ff      	movs	r2, #255	@ 0xff
 8007ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	8979      	ldrh	r1, [r7, #10]
 8008000:	2300      	movs	r3, #0
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f001 fdc7 	bl	8009b9c <I2C_TransferConfig>
 800800e:	e00f      	b.n	8008030 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008014:	b29a      	uxth	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801e:	b2da      	uxtb	r2, r3
 8008020:	8979      	ldrh	r1, [r7, #10]
 8008022:	2300      	movs	r3, #0
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f001 fdb6 	bl	8009b9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d19a      	bne.n	8007f70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f001 fc88 	bl	8009954 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e01a      	b.n	8008084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2220      	movs	r2, #32
 8008054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6859      	ldr	r1, [r3, #4]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	4b0b      	ldr	r3, [pc, #44]	@ (8008090 <HAL_I2C_Mem_Read+0x230>)
 8008062:	400b      	ands	r3, r1
 8008064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	e000      	b.n	8008084 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008082:	2302      	movs	r3, #2
  }
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	80002400 	.word	0x80002400
 8008090:	fe00e800 	.word	0xfe00e800

08008094 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
  }
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00f      	beq.n	800810a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f8:	f043 0201 	orr.w	r2, r3, #1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008108:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00f      	beq.n	8008134 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008122:	f043 0208 	orr.w	r2, r3, #8
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008132:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00a      	beq.n	800815e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800814c:	f043 0202 	orr.w	r2, r3, #2
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800815c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008162:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 030b 	and.w	r3, r3, #11
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 f953 	bl	800941c <I2C_ITError>
  }
}
 8008176:	bf00      	nop
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
 80081b2:	4613      	mov	r3, r2
 80081b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b088      	sub	sp, #32
 800822a:	af02      	add	r7, sp, #8
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <I2C_Master_ISR_IT+0x1e>
 8008240:	2302      	movs	r3, #2
 8008242:	e113      	b.n	800846c <I2C_Master_ISR_IT+0x246>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b00      	cmp	r3, #0
 8008254:	d012      	beq.n	800827c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00d      	beq.n	800827c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2210      	movs	r2, #16
 8008266:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800826c:	f043 0204 	orr.w	r2, r3, #4
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f001 f9e8 	bl	800964a <I2C_Flush_TXDR>
 800827a:	e0e4      	b.n	8008446 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d022      	beq.n	80082cc <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800828c:	2b00      	cmp	r3, #0
 800828e:	d01d      	beq.n	80082cc <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f023 0304 	bic.w	r3, r3, #4
 8008296:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80082ca:	e0bc      	b.n	8008446 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d128      	bne.n	8008328 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d023      	beq.n	8008328 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01e      	beq.n	8008328 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80a8 	beq.w	8008446 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8008326:	e08e      	b.n	8008446 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d05c      	beq.n	80083ec <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008338:	2b00      	cmp	r3, #0
 800833a:	d057      	beq.n	80083ec <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d040      	beq.n	80083c8 <I2C_Master_ISR_IT+0x1a2>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	d13c      	bne.n	80083c8 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	b29b      	uxth	r3, r3
 8008356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800835a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008360:	b29b      	uxth	r3, r3
 8008362:	2bff      	cmp	r3, #255	@ 0xff
 8008364:	d90e      	bls.n	8008384 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	22ff      	movs	r2, #255	@ 0xff
 800836a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008370:	b2da      	uxtb	r2, r3
 8008372:	8a79      	ldrh	r1, [r7, #18]
 8008374:	2300      	movs	r3, #0
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f001 fc0d 	bl	8009b9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008382:	e032      	b.n	80083ea <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008388:	b29a      	uxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008392:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008396:	d00b      	beq.n	80083b0 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800839c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80083a2:	8a79      	ldrh	r1, [r7, #18]
 80083a4:	2000      	movs	r0, #0
 80083a6:	9000      	str	r0, [sp, #0]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f001 fbf7 	bl	8009b9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083ae:	e01c      	b.n	80083ea <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	8a79      	ldrh	r1, [r7, #18]
 80083b8:	2300      	movs	r3, #0
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f001 fbeb 	bl	8009b9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083c6:	e010      	b.n	80083ea <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083d6:	d003      	beq.n	80083e0 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fd57 	bl	8008e8c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083de:	e032      	b.n	8008446 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80083e0:	2140      	movs	r1, #64	@ 0x40
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f001 f81a 	bl	800941c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083e8:	e02d      	b.n	8008446 <I2C_Master_ISR_IT+0x220>
 80083ea:	e02c      	b.n	8008446 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d027      	beq.n	8008446 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d022      	beq.n	8008446 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d119      	bne.n	800843e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008414:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008418:	d015      	beq.n	8008446 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008422:	d108      	bne.n	8008436 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008432:	605a      	str	r2, [r3, #4]
 8008434:	e007      	b.n	8008446 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fd28 	bl	8008e8c <I2C_ITMasterSeqCplt>
 800843c:	e003      	b.n	8008446 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800843e:	2140      	movs	r1, #64	@ 0x40
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 ffeb 	bl	800941c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800845a:	6979      	ldr	r1, [r7, #20]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fdaf 	bl	8008fc0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008490:	2b01      	cmp	r3, #1
 8008492:	d101      	bne.n	8008498 <I2C_Slave_ISR_IT+0x24>
 8008494:	2302      	movs	r3, #2
 8008496:	e0e1      	b.n	800865c <I2C_Slave_ISR_IT+0x1e8>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f003 0320 	and.w	r3, r3, #32
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d008      	beq.n	80084bc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80084b4:	6939      	ldr	r1, [r7, #16]
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 fe4a 	bl	8009150 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f003 0310 	and.w	r3, r3, #16
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d04b      	beq.n	800855e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d046      	beq.n	800855e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d128      	bne.n	800852c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b28      	cmp	r3, #40	@ 0x28
 80084e4:	d108      	bne.n	80084f8 <I2C_Slave_ISR_IT+0x84>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084ec:	d104      	bne.n	80084f8 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80084ee:	6939      	ldr	r1, [r7, #16]
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 ff3f 	bl	8009374 <I2C_ITListenCplt>
 80084f6:	e031      	b.n	800855c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b29      	cmp	r3, #41	@ 0x29
 8008502:	d10e      	bne.n	8008522 <I2C_Slave_ISR_IT+0xae>
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800850a:	d00a      	beq.n	8008522 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2210      	movs	r2, #16
 8008512:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f001 f898 	bl	800964a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 fcf3 	bl	8008f06 <I2C_ITSlaveSeqCplt>
 8008520:	e01c      	b.n	800855c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2210      	movs	r2, #16
 8008528:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800852a:	e08f      	b.n	800864c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2210      	movs	r2, #16
 8008532:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008538:	f043 0204 	orr.w	r2, r3, #4
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <I2C_Slave_ISR_IT+0xda>
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800854c:	d17e      	bne.n	800864c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008552:	4619      	mov	r1, r3
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 ff61 	bl	800941c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800855a:	e077      	b.n	800864c <I2C_Slave_ISR_IT+0x1d8>
 800855c:	e076      	b.n	800864c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d02f      	beq.n	80085c8 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800856e:	2b00      	cmp	r3, #0
 8008570:	d02a      	beq.n	80085c8 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008576:	b29b      	uxth	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d018      	beq.n	80085ae <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008598:	3b01      	subs	r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d14b      	bne.n	8008650 <I2C_Slave_ISR_IT+0x1dc>
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085be:	d047      	beq.n	8008650 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fca0 	bl	8008f06 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80085c6:	e043      	b.n	8008650 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80085dc:	6939      	ldr	r1, [r7, #16]
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 fbd0 	bl	8008d84 <I2C_ITAddrCplt>
 80085e4:	e035      	b.n	8008652 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d030      	beq.n	8008652 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d02b      	beq.n	8008652 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085fe:	b29b      	uxth	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d018      	beq.n	8008636 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008634:	e00d      	b.n	8008652 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800863c:	d002      	beq.n	8008644 <I2C_Slave_ISR_IT+0x1d0>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 fc5e 	bl	8008f06 <I2C_ITSlaveSeqCplt>
 800864a:	e002      	b.n	8008652 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800864c:	bf00      	nop
 800864e:	e000      	b.n	8008652 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8008650:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af02      	add	r7, sp, #8
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <I2C_Master_ISR_DMA+0x1a>
 800867a:	2302      	movs	r3, #2
 800867c:	e0d9      	b.n	8008832 <I2C_Master_ISR_DMA+0x1ce>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b00      	cmp	r3, #0
 800868e:	d016      	beq.n	80086be <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008696:	2b00      	cmp	r3, #0
 8008698:	d011      	beq.n	80086be <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2210      	movs	r2, #16
 80086a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a6:	f043 0204 	orr.w	r2, r3, #4
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80086ae:	2120      	movs	r1, #32
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f001 faa5 	bl	8009c00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 ffc7 	bl	800964a <I2C_Flush_TXDR>
 80086bc:	e0b4      	b.n	8008828 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d071      	beq.n	80087ac <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d06c      	beq.n	80087ac <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086e0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d04e      	beq.n	800878a <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086f8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2bff      	cmp	r3, #255	@ 0xff
 8008702:	d906      	bls.n	8008712 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	22ff      	movs	r2, #255	@ 0xff
 8008708:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800870a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	e010      	b.n	8008734 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008720:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008724:	d003      	beq.n	800872e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e002      	b.n	8008734 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800872e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008732:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008738:	b2da      	uxtb	r2, r3
 800873a:	8a79      	ldrh	r1, [r7, #18]
 800873c:	2300      	movs	r3, #0
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f001 fa2a 	bl	8009b9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800874c:	b29a      	uxth	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	b29a      	uxth	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b22      	cmp	r3, #34	@ 0x22
 8008764:	d108      	bne.n	8008778 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008774:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008776:	e057      	b.n	8008828 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008786:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008788:	e04e      	b.n	8008828 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008798:	d003      	beq.n	80087a2 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 fb76 	bl	8008e8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80087a0:	e042      	b.n	8008828 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80087a2:	2140      	movs	r1, #64	@ 0x40
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fe39 	bl	800941c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80087aa:	e03d      	b.n	8008828 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d028      	beq.n	8008808 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d023      	beq.n	8008808 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d119      	bne.n	80087fe <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087d8:	d025      	beq.n	8008826 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087e2:	d108      	bne.n	80087f6 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087f2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80087f4:	e017      	b.n	8008826 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 fb48 	bl	8008e8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80087fc:	e013      	b.n	8008826 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80087fe:	2140      	movs	r1, #64	@ 0x40
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 fe0b 	bl	800941c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008806:	e00e      	b.n	8008826 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008818:	2b00      	cmp	r3, #0
 800881a:	d005      	beq.n	8008828 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 fbce 	bl	8008fc0 <I2C_ITMasterCplt>
 8008824:	e000      	b.n	8008828 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8008826:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008848:	4b8d      	ldr	r3, [pc, #564]	@ (8008a80 <I2C_Mem_ISR_DMA+0x244>)
 800884a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <I2C_Mem_ISR_DMA+0x1e>
 8008856:	2302      	movs	r3, #2
 8008858:	e10e      	b.n	8008a78 <I2C_Mem_ISR_DMA+0x23c>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	d016      	beq.n	800889a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008872:	2b00      	cmp	r3, #0
 8008874:	d011      	beq.n	800889a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2210      	movs	r2, #16
 800887c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008882:	f043 0204 	orr.w	r2, r3, #4
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800888a:	2120      	movs	r1, #32
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f001 f9b7 	bl	8009c00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 fed9 	bl	800964a <I2C_Flush_TXDR>
 8008898:	e0e9      	b.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80088b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f04f 32ff 	mov.w	r2, #4294967295
 80088be:	651a      	str	r2, [r3, #80]	@ 0x50
 80088c0:	e0d5      	b.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d05f      	beq.n	800898c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d05a      	beq.n	800898c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80088d6:	2101      	movs	r1, #1
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f001 fa15 	bl	8009d08 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80088de:	2110      	movs	r1, #16
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f001 f98d 	bl	8009c00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d048      	beq.n	8008982 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	2bff      	cmp	r3, #255	@ 0xff
 80088f8:	d910      	bls.n	800891c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	22ff      	movs	r2, #255	@ 0xff
 80088fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008904:	b299      	uxth	r1, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800890a:	b2da      	uxtb	r2, r3
 800890c:	2300      	movs	r3, #0
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f001 f941 	bl	8009b9c <I2C_TransferConfig>
 800891a:	e011      	b.n	8008940 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800892a:	b299      	uxth	r1, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008930:	b2da      	uxtb	r2, r3
 8008932:	2300      	movs	r3, #0
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f001 f92e 	bl	8009b9c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b22      	cmp	r3, #34	@ 0x22
 800895c:	d108      	bne.n	8008970 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800896c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800896e:	e07e      	b.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800897e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008980:	e075      	b.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008982:	2140      	movs	r1, #64	@ 0x40
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fd49 	bl	800941c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800898a:	e070      	b.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d05d      	beq.n	8008a52 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800899c:	2b00      	cmp	r3, #0
 800899e:	d058      	beq.n	8008a52 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80089a0:	2101      	movs	r1, #1
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f001 f9b0 	bl	8009d08 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80089a8:	2110      	movs	r1, #16
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f001 f928 	bl	8009c00 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b22      	cmp	r3, #34	@ 0x22
 80089ba:	d101      	bne.n	80089c0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80089bc:	4b31      	ldr	r3, [pc, #196]	@ (8008a84 <I2C_Mem_ISR_DMA+0x248>)
 80089be:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2bff      	cmp	r3, #255	@ 0xff
 80089c8:	d910      	bls.n	80089ec <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	22ff      	movs	r2, #255	@ 0xff
 80089ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089d4:	b299      	uxth	r1, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f001 f8d9 	bl	8009b9c <I2C_TransferConfig>
 80089ea:	e011      	b.n	8008a10 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089fa:	b299      	uxth	r1, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f001 f8c6 	bl	8009b9c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b22      	cmp	r3, #34	@ 0x22
 8008a2c:	d108      	bne.n	8008a40 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a3c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a3e:	e016      	b.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a4e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a50:	e00d      	b.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d008      	beq.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 faa9 	bl	8008fc0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	80002000 	.word	0x80002000
 8008a84:	80002400 	.word	0x80002400

08008a88 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d101      	bne.n	8008aac <I2C_Slave_ISR_DMA+0x24>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e0bf      	b.n	8008c2c <I2C_Slave_ISR_DMA+0x1a4>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d008      	beq.n	8008ad0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fb40 	bl	8009150 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f003 0310 	and.w	r3, r3, #16
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 8095 	beq.w	8008c06 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 808f 	beq.w	8008c06 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d07d      	beq.n	8008bf8 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00c      	beq.n	8008b1e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d007      	beq.n	8008b1e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00c      	beq.n	8008b40 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d128      	bne.n	8008b98 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b28      	cmp	r3, #40	@ 0x28
 8008b50:	d108      	bne.n	8008b64 <I2C_Slave_ISR_DMA+0xdc>
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b58:	d104      	bne.n	8008b64 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fc09 	bl	8009374 <I2C_ITListenCplt>
 8008b62:	e048      	b.n	8008bf6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b29      	cmp	r3, #41	@ 0x29
 8008b6e:	d10e      	bne.n	8008b8e <I2C_Slave_ISR_DMA+0x106>
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b76:	d00a      	beq.n	8008b8e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2210      	movs	r2, #16
 8008b7e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fd62 	bl	800964a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 f9bd 	bl	8008f06 <I2C_ITSlaveSeqCplt>
 8008b8c:	e033      	b.n	8008bf6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2210      	movs	r2, #16
 8008b94:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008b96:	e034      	b.n	8008c02 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2210      	movs	r2, #16
 8008b9e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba4:	f043 0204 	orr.w	r2, r3, #4
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bb2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <I2C_Slave_ISR_DMA+0x13a>
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bc0:	d11f      	bne.n	8008c02 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	2b21      	cmp	r3, #33	@ 0x21
 8008bc6:	d002      	beq.n	8008bce <I2C_Slave_ISR_DMA+0x146>
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	2b29      	cmp	r3, #41	@ 0x29
 8008bcc:	d103      	bne.n	8008bd6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2221      	movs	r2, #33	@ 0x21
 8008bd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bd4:	e008      	b.n	8008be8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	2b22      	cmp	r3, #34	@ 0x22
 8008bda:	d002      	beq.n	8008be2 <I2C_Slave_ISR_DMA+0x15a>
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8008be0:	d102      	bne.n	8008be8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2222      	movs	r2, #34	@ 0x22
 8008be6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bec:	4619      	mov	r1, r3
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 fc14 	bl	800941c <I2C_ITError>
      if (treatdmanack == 1U)
 8008bf4:	e005      	b.n	8008c02 <I2C_Slave_ISR_DMA+0x17a>
 8008bf6:	e004      	b.n	8008c02 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2210      	movs	r2, #16
 8008bfe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c00:	e00f      	b.n	8008c22 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8008c02:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c04:	e00d      	b.n	8008c22 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d008      	beq.n	8008c22 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008c1a:	68b9      	ldr	r1, [r7, #8]
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 f8b1 	bl	8008d84 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3720      	adds	r7, #32
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	4611      	mov	r1, r2
 8008c40:	461a      	mov	r2, r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	817b      	strh	r3, [r7, #10]
 8008c46:	460b      	mov	r3, r1
 8008c48:	813b      	strh	r3, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	8979      	ldrh	r1, [r7, #10]
 8008c54:	4b20      	ldr	r3, [pc, #128]	@ (8008cd8 <I2C_RequestMemoryWrite+0xa4>)
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 ff9d 	bl	8009b9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	69b9      	ldr	r1, [r7, #24]
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 fe2d 	bl	80098c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e02c      	b.n	8008cd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c76:	88fb      	ldrh	r3, [r7, #6]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d105      	bne.n	8008c88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c7c:	893b      	ldrh	r3, [r7, #8]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c86:	e015      	b.n	8008cb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c88:	893b      	ldrh	r3, [r7, #8]
 8008c8a:	0a1b      	lsrs	r3, r3, #8
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	69b9      	ldr	r1, [r7, #24]
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fe13 	bl	80098c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e012      	b.n	8008cd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008caa:	893b      	ldrh	r3, [r7, #8]
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2180      	movs	r1, #128	@ 0x80
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fdb2 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	80002000 	.word	0x80002000

08008cdc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af02      	add	r7, sp, #8
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4603      	mov	r3, r0
 8008cec:	817b      	strh	r3, [r7, #10]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	813b      	strh	r3, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008cf6:	88fb      	ldrh	r3, [r7, #6]
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	8979      	ldrh	r1, [r7, #10]
 8008cfc:	4b20      	ldr	r3, [pc, #128]	@ (8008d80 <I2C_RequestMemoryRead+0xa4>)
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	2300      	movs	r3, #0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 ff4a 	bl	8009b9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	69b9      	ldr	r1, [r7, #24]
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 fdda 	bl	80098c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e02c      	b.n	8008d76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d1c:	88fb      	ldrh	r3, [r7, #6]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d105      	bne.n	8008d2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d22:	893b      	ldrh	r3, [r7, #8]
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d2c:	e015      	b.n	8008d5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d2e:	893b      	ldrh	r3, [r7, #8]
 8008d30:	0a1b      	lsrs	r3, r3, #8
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	69b9      	ldr	r1, [r7, #24]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 fdc0 	bl	80098c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e012      	b.n	8008d76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d50:	893b      	ldrh	r3, [r7, #8]
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	2200      	movs	r2, #0
 8008d62:	2140      	movs	r1, #64	@ 0x40
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fd5f 	bl	8009828 <I2C_WaitOnFlagUntilTimeout>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	80002000 	.word	0x80002000

08008d84 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008d9a:	2b28      	cmp	r3, #40	@ 0x28
 8008d9c:	d16a      	bne.n	8008e74 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	0c1b      	lsrs	r3, r3, #16
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	0c1b      	lsrs	r3, r3, #16
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008dbc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008dd8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d138      	bne.n	8008e54 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008de2:	897b      	ldrh	r3, [r7, #10]
 8008de4:	09db      	lsrs	r3, r3, #7
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	89bb      	ldrh	r3, [r7, #12]
 8008dea:	4053      	eors	r3, r2
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f003 0306 	and.w	r3, r3, #6
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d11c      	bne.n	8008e30 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008df6:	897b      	ldrh	r3, [r7, #10]
 8008df8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d13b      	bne.n	8008e84 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2208      	movs	r2, #8
 8008e18:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e22:	89ba      	ldrh	r2, [r7, #12]
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff f9bc 	bl	80081a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008e2e:	e029      	b.n	8008e84 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008e30:	893b      	ldrh	r3, [r7, #8]
 8008e32:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008e34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 ff65 	bl	8009d08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e46:	89ba      	ldrh	r2, [r7, #12]
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff f9aa 	bl	80081a6 <HAL_I2C_AddrCallback>
}
 8008e52:	e017      	b.n	8008e84 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 ff55 	bl	8009d08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e66:	89ba      	ldrh	r2, [r7, #12]
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff f99a 	bl	80081a6 <HAL_I2C_AddrCallback>
}
 8008e72:	e007      	b.n	8008e84 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2208      	movs	r2, #8
 8008e7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b21      	cmp	r3, #33	@ 0x21
 8008ea6:	d115      	bne.n	8008ed4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2211      	movs	r2, #17
 8008eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 ff22 	bl	8009d08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fb f923 	bl	8004118 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ed2:	e014      	b.n	8008efe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2212      	movs	r2, #18
 8008ee0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008ee8:	2102      	movs	r1, #2
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 ff0c 	bl	8009d08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7fb f91d 	bl	8004138 <HAL_I2C_MasterRxCpltCallback>
}
 8008efe:	bf00      	nop
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d008      	beq.n	8008f3a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	e00c      	b.n	8008f54 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d007      	beq.n	8008f54 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f52:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b29      	cmp	r3, #41	@ 0x29
 8008f5e:	d112      	bne.n	8008f86 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2228      	movs	r2, #40	@ 0x28
 8008f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2221      	movs	r2, #33	@ 0x21
 8008f6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f6e:	2101      	movs	r1, #1
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fec9 	bl	8009d08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff f8fd 	bl	800817e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f84:	e017      	b.n	8008fb6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f90:	d111      	bne.n	8008fb6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2228      	movs	r2, #40	@ 0x28
 8008f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2222      	movs	r2, #34	@ 0x22
 8008f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008fa0:	2102      	movs	r1, #2
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 feb0 	bl	8009d08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff f8ee 	bl	8008192 <HAL_I2C_SlaveRxCpltCallback>
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b21      	cmp	r3, #33	@ 0x21
 8008fe0:	d107      	bne.n	8008ff2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fe8f 	bl	8009d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2211      	movs	r2, #17
 8008fee:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ff0:	e00c      	b.n	800900c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b22      	cmp	r3, #34	@ 0x22
 8008ffc:	d106      	bne.n	800900c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008ffe:	2102      	movs	r1, #2
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fe81 	bl	8009d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2212      	movs	r2, #18
 800900a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6859      	ldr	r1, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	4b4c      	ldr	r3, [pc, #304]	@ (8009148 <I2C_ITMasterCplt+0x188>)
 8009018:	400b      	ands	r3, r1
 800901a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a49      	ldr	r2, [pc, #292]	@ (800914c <I2C_ITMasterCplt+0x18c>)
 8009026:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b00      	cmp	r3, #0
 8009030:	d009      	beq.n	8009046 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2210      	movs	r2, #16
 8009038:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903e:	f043 0204 	orr.w	r2, r3, #4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b60      	cmp	r3, #96	@ 0x60
 8009050:	d10a      	bne.n	8009068 <I2C_ITMasterCplt+0xa8>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009062:	b2db      	uxtb	r3, r3
 8009064:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009066:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 faee 	bl	800964a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009072:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b60      	cmp	r3, #96	@ 0x60
 800907e:	d002      	beq.n	8009086 <I2C_ITMasterCplt+0xc6>
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d006      	beq.n	8009094 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f9c5 	bl	800941c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009092:	e054      	b.n	800913e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b21      	cmp	r3, #33	@ 0x21
 800909e:	d124      	bne.n	80090ea <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b40      	cmp	r3, #64	@ 0x40
 80090b8:	d10b      	bne.n	80090d2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff f883 	bl	80081d6 <HAL_I2C_MemTxCpltCallback>
}
 80090d0:	e035      	b.n	800913e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7fb f818 	bl	8004118 <HAL_I2C_MasterTxCpltCallback>
}
 80090e8:	e029      	b.n	800913e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b22      	cmp	r3, #34	@ 0x22
 80090f4:	d123      	bne.n	800913e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b40      	cmp	r3, #64	@ 0x40
 800910e:	d10b      	bne.n	8009128 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff f862 	bl	80081ea <HAL_I2C_MemRxCpltCallback>
}
 8009126:	e00a      	b.n	800913e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7fa fffd 	bl	8004138 <HAL_I2C_MasterRxCpltCallback>
}
 800913e:	bf00      	nop
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	fe00e800 	.word	0xfe00e800
 800914c:	ffff0000 	.word	0xffff0000

08009150 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800916c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2220      	movs	r2, #32
 8009174:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	2b21      	cmp	r3, #33	@ 0x21
 800917a:	d002      	beq.n	8009182 <I2C_ITSlaveCplt+0x32>
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	2b29      	cmp	r3, #41	@ 0x29
 8009180:	d108      	bne.n	8009194 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009182:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fdbe 	bl	8009d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2221      	movs	r2, #33	@ 0x21
 8009190:	631a      	str	r2, [r3, #48]	@ 0x30
 8009192:	e019      	b.n	80091c8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	2b22      	cmp	r3, #34	@ 0x22
 8009198:	d002      	beq.n	80091a0 <I2C_ITSlaveCplt+0x50>
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	2b2a      	cmp	r3, #42	@ 0x2a
 800919e:	d108      	bne.n	80091b2 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80091a0:	f248 0102 	movw	r1, #32770	@ 0x8002
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fdaf 	bl	8009d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2222      	movs	r2, #34	@ 0x22
 80091ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80091b0:	e00a      	b.n	80091c8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	2b28      	cmp	r3, #40	@ 0x28
 80091b6:	d107      	bne.n	80091c8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80091b8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fda3 	bl	8009d08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6859      	ldr	r1, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4b62      	ldr	r3, [pc, #392]	@ (800936c <I2C_ITSlaveCplt+0x21c>)
 80091e4:	400b      	ands	r3, r1
 80091e6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fa2e 	bl	800964a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d013      	beq.n	8009220 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009206:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01f      	beq.n	8009250 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	b29a      	uxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800921e:	e017      	b.n	8009250 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d012      	beq.n	8009250 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009238:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d006      	beq.n	8009250 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	b29a      	uxth	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d020      	beq.n	800929c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f023 0304 	bic.w	r3, r3, #4
 8009260:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926c:	b2d2      	uxtb	r2, r2
 800926e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00c      	beq.n	800929c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009292:	b29b      	uxth	r3, r3
 8009294:	3b01      	subs	r3, #1
 8009296:	b29a      	uxth	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092aa:	f043 0204 	orr.w	r2, r3, #4
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d010      	beq.n	80092ea <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f8a4 	bl	800941c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b28      	cmp	r3, #40	@ 0x28
 80092de:	d141      	bne.n	8009364 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80092e0:	6979      	ldr	r1, [r7, #20]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f846 	bl	8009374 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092e8:	e03c      	b.n	8009364 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80092f2:	d014      	beq.n	800931e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff fe06 	bl	8008f06 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009370 <I2C_ITSlaveCplt+0x220>)
 80092fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7fe ff53 	bl	80081c2 <HAL_I2C_ListenCpltCallback>
}
 800931c:	e022      	b.n	8009364 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b22      	cmp	r3, #34	@ 0x22
 8009328:	d10e      	bne.n	8009348 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7fe ff26 	bl	8008192 <HAL_I2C_SlaveRxCpltCallback>
}
 8009346:	e00d      	b.n	8009364 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2220      	movs	r2, #32
 800934c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fe ff0d 	bl	800817e <HAL_I2C_SlaveTxCpltCallback>
}
 8009364:	bf00      	nop
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	fe00e800 	.word	0xfe00e800
 8009370:	ffff0000 	.word	0xffff0000

08009374 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a25      	ldr	r2, [pc, #148]	@ (8009418 <I2C_ITListenCplt+0xa4>)
 8009382:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	f003 0304 	and.w	r3, r3, #4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d022      	beq.n	80093f0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b4:	b2d2      	uxtb	r2, r2
 80093b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d012      	beq.n	80093f0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093da:	b29b      	uxth	r3, r3
 80093dc:	3b01      	subs	r3, #1
 80093de:	b29a      	uxth	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e8:	f043 0204 	orr.w	r2, r3, #4
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80093f0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fc87 	bl	8009d08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2210      	movs	r2, #16
 8009400:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fe fed9 	bl	80081c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	ffff0000 	.word	0xffff0000

0800941c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800942c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a6d      	ldr	r2, [pc, #436]	@ (80095f0 <I2C_ITError+0x1d4>)
 800943a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	2b28      	cmp	r3, #40	@ 0x28
 8009452:	d005      	beq.n	8009460 <I2C_ITError+0x44>
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	2b29      	cmp	r3, #41	@ 0x29
 8009458:	d002      	beq.n	8009460 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	2b2a      	cmp	r3, #42	@ 0x2a
 800945e:	d10b      	bne.n	8009478 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009460:	2103      	movs	r1, #3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fc50 	bl	8009d08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2228      	movs	r2, #40	@ 0x28
 800946c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a60      	ldr	r2, [pc, #384]	@ (80095f4 <I2C_ITError+0x1d8>)
 8009474:	635a      	str	r2, [r3, #52]	@ 0x34
 8009476:	e030      	b.n	80094da <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009478:	f248 0103 	movw	r1, #32771	@ 0x8003
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fc43 	bl	8009d08 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f8e1 	bl	800964a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b60      	cmp	r3, #96	@ 0x60
 8009492:	d01f      	beq.n	80094d4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d114      	bne.n	80094d4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	f003 0310 	and.w	r3, r3, #16
 80094b4:	2b10      	cmp	r3, #16
 80094b6:	d109      	bne.n	80094cc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2210      	movs	r2, #16
 80094be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c4:	f043 0204 	orr.w	r2, r3, #4
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2220      	movs	r2, #32
 80094d2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094de:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d039      	beq.n	800955c <I2C_ITError+0x140>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2b11      	cmp	r3, #17
 80094ec:	d002      	beq.n	80094f4 <I2C_ITError+0xd8>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b21      	cmp	r3, #33	@ 0x21
 80094f2:	d133      	bne.n	800955c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009502:	d107      	bne.n	8009514 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009512:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009518:	4618      	mov	r0, r3
 800951a:	f7fd fdfb 	bl	8007114 <HAL_DMA_GetState>
 800951e:	4603      	mov	r3, r0
 8009520:	2b01      	cmp	r3, #1
 8009522:	d017      	beq.n	8009554 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009528:	4a33      	ldr	r2, [pc, #204]	@ (80095f8 <I2C_ITError+0x1dc>)
 800952a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	4618      	mov	r0, r3
 800953a:	f7fd fcfb 	bl	8006f34 <HAL_DMA_Abort_IT>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d04d      	beq.n	80095e0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800954e:	4610      	mov	r0, r2
 8009550:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009552:	e045      	b.n	80095e0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f851 	bl	80095fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800955a:	e041      	b.n	80095e0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d039      	beq.n	80095d8 <I2C_ITError+0x1bc>
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2b12      	cmp	r3, #18
 8009568:	d002      	beq.n	8009570 <I2C_ITError+0x154>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b22      	cmp	r3, #34	@ 0x22
 800956e:	d133      	bne.n	80095d8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800957a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800957e:	d107      	bne.n	8009590 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800958e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009594:	4618      	mov	r0, r3
 8009596:	f7fd fdbd 	bl	8007114 <HAL_DMA_GetState>
 800959a:	4603      	mov	r3, r0
 800959c:	2b01      	cmp	r3, #1
 800959e:	d017      	beq.n	80095d0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a4:	4a14      	ldr	r2, [pc, #80]	@ (80095f8 <I2C_ITError+0x1dc>)
 80095a6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fd fcbd 	bl	8006f34 <HAL_DMA_Abort_IT>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d011      	beq.n	80095e4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80095ca:	4610      	mov	r0, r2
 80095cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80095ce:	e009      	b.n	80095e4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f813 	bl	80095fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80095d6:	e005      	b.n	80095e4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f80f 	bl	80095fc <I2C_TreatErrorCallback>
  }
}
 80095de:	e002      	b.n	80095e6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095e0:	bf00      	nop
 80095e2:	e000      	b.n	80095e6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80095e4:	bf00      	nop
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	ffff0000 	.word	0xffff0000
 80095f4:	08008475 	.word	0x08008475
 80095f8:	080097ed 	.word	0x080097ed

080095fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b60      	cmp	r3, #96	@ 0x60
 800960e:	d10e      	bne.n	800962e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fe fdf3 	bl	8008212 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800962c:	e009      	b.n	8009642 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7fe fdde 	bl	80081fe <HAL_I2C_ErrorCallback>
}
 8009642:	bf00      	nop
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	f003 0302 	and.w	r3, r3, #2
 800965c:	2b02      	cmp	r3, #2
 800965e:	d103      	bne.n	8009668 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2200      	movs	r2, #0
 8009666:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b01      	cmp	r3, #1
 8009674:	d007      	beq.n	8009686 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699a      	ldr	r2, [r3, #24]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f042 0201 	orr.w	r2, r2, #1
 8009684:	619a      	str	r2, [r3, #24]
  }
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80096ae:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d104      	bne.n	80096c4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80096ba:	2120      	movs	r1, #32
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 fa9f 	bl	8009c00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80096c2:	e02d      	b.n	8009720 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80096cc:	441a      	add	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	2bff      	cmp	r3, #255	@ 0xff
 80096da:	d903      	bls.n	80096e4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	22ff      	movs	r2, #255	@ 0xff
 80096e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80096e2:	e004      	b.n	80096ee <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f6:	4619      	mov	r1, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3328      	adds	r3, #40	@ 0x28
 80096fe:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009704:	f7fd fb78 	bl	8006df8 <HAL_DMA_Start_IT>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d004      	beq.n	8009718 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800970e:	2110      	movs	r1, #16
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff fe83 	bl	800941c <I2C_ITError>
}
 8009716:	e003      	b.n	8009720 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009718:	2140      	movs	r1, #64	@ 0x40
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 fa70 	bl	8009c00 <I2C_Enable_IRQ>
}
 8009720:	bf00      	nop
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009734:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009744:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800974a:	b29b      	uxth	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009750:	2120      	movs	r1, #32
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 fa54 	bl	8009c00 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009758:	e02d      	b.n	80097b6 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009762:	441a      	add	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800976c:	b29b      	uxth	r3, r3
 800976e:	2bff      	cmp	r3, #255	@ 0xff
 8009770:	d903      	bls.n	800977a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	22ff      	movs	r2, #255	@ 0xff
 8009776:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009778:	e004      	b.n	8009784 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800977e:	b29a      	uxth	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3324      	adds	r3, #36	@ 0x24
 800978e:	4619      	mov	r1, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009794:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800979a:	f7fd fb2d 	bl	8006df8 <HAL_DMA_Start_IT>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d004      	beq.n	80097ae <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80097a4:	2110      	movs	r1, #16
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7ff fe38 	bl	800941c <I2C_ITError>
}
 80097ac:	e003      	b.n	80097b6 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80097ae:	2140      	movs	r1, #64	@ 0x40
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fa25 	bl	8009c00 <I2C_Enable_IRQ>
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097da:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80097dc:	2110      	movs	r1, #16
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7ff fe1c 	bl	800941c <I2C_ITError>
}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009806:	2200      	movs	r2, #0
 8009808:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009816:	2200      	movs	r2, #0
 8009818:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff feee 	bl	80095fc <I2C_TreatErrorCallback>
}
 8009820:	bf00      	nop
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	4613      	mov	r3, r2
 8009836:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009838:	e031      	b.n	800989e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009840:	d02d      	beq.n	800989e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009842:	f7fb fb7b 	bl	8004f3c <HAL_GetTick>
 8009846:	4602      	mov	r2, r0
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d302      	bcc.n	8009858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d122      	bne.n	800989e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	699a      	ldr	r2, [r3, #24]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	4013      	ands	r3, r2
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	429a      	cmp	r2, r3
 8009866:	bf0c      	ite	eq
 8009868:	2301      	moveq	r3, #1
 800986a:	2300      	movne	r3, #0
 800986c:	b2db      	uxtb	r3, r3
 800986e:	461a      	mov	r2, r3
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	429a      	cmp	r2, r3
 8009874:	d113      	bne.n	800989e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800987a:	f043 0220 	orr.w	r2, r3, #32
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2220      	movs	r2, #32
 8009886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e00f      	b.n	80098be <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	699a      	ldr	r2, [r3, #24]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	4013      	ands	r3, r2
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	bf0c      	ite	eq
 80098ae:	2301      	moveq	r3, #1
 80098b0:	2300      	movne	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d0be      	beq.n	800983a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098d2:	e033      	b.n	800993c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 f87f 	bl	80099dc <I2C_IsErrorOccurred>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e031      	b.n	800994c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ee:	d025      	beq.n	800993c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098f0:	f7fb fb24 	bl	8004f3c <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d302      	bcc.n	8009906 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d11a      	bne.n	800993c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b02      	cmp	r3, #2
 8009912:	d013      	beq.n	800993c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009918:	f043 0220 	orr.w	r2, r3, #32
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e007      	b.n	800994c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b02      	cmp	r3, #2
 8009948:	d1c4      	bne.n	80098d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009960:	e02f      	b.n	80099c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 f838 	bl	80099dc <I2C_IsErrorOccurred>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e02d      	b.n	80099d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009976:	f7fb fae1 	bl	8004f3c <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	429a      	cmp	r2, r3
 8009984:	d302      	bcc.n	800998c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d11a      	bne.n	80099c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b20      	cmp	r3, #32
 8009998:	d013      	beq.n	80099c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800999e:	f043 0220 	orr.w	r2, r3, #32
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2220      	movs	r2, #32
 80099aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e007      	b.n	80099d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d1c8      	bne.n	8009962 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b08a      	sub	sp, #40	@ 0x28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d068      	beq.n	8009ada <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2210      	movs	r2, #16
 8009a0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a10:	e049      	b.n	8009aa6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a18:	d045      	beq.n	8009aa6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a1a:	f7fb fa8f 	bl	8004f3c <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d302      	bcc.n	8009a30 <I2C_IsErrorOccurred+0x54>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d13a      	bne.n	8009aa6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a52:	d121      	bne.n	8009a98 <I2C_IsErrorOccurred+0xbc>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a5a:	d01d      	beq.n	8009a98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009a5c:	7cfb      	ldrb	r3, [r7, #19]
 8009a5e:	2b20      	cmp	r3, #32
 8009a60:	d01a      	beq.n	8009a98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a72:	f7fb fa63 	bl	8004f3c <HAL_GetTick>
 8009a76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a78:	e00e      	b.n	8009a98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a7a:	f7fb fa5f 	bl	8004f3c <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b19      	cmp	r3, #25
 8009a86:	d907      	bls.n	8009a98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	f043 0320 	orr.w	r3, r3, #32
 8009a8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009a96:	e006      	b.n	8009aa6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	2b20      	cmp	r3, #32
 8009aa4:	d1e9      	bne.n	8009a7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	f003 0320 	and.w	r3, r3, #32
 8009ab0:	2b20      	cmp	r3, #32
 8009ab2:	d003      	beq.n	8009abc <I2C_IsErrorOccurred+0xe0>
 8009ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0aa      	beq.n	8009a12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	f043 0304 	orr.w	r3, r3, #4
 8009ad2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009afc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00b      	beq.n	8009b26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	f043 0308 	orr.w	r3, r3, #8
 8009b14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00b      	beq.n	8009b48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	f043 0302 	orr.w	r3, r3, #2
 8009b36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01c      	beq.n	8009b8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f7ff fd7a 	bl	800964a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6859      	ldr	r1, [r3, #4]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	4b0d      	ldr	r3, [pc, #52]	@ (8009b98 <I2C_IsErrorOccurred+0x1bc>)
 8009b62:	400b      	ands	r3, r1
 8009b64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	431a      	orrs	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3728      	adds	r7, #40	@ 0x28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	fe00e800 	.word	0xfe00e800

08009b9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	607b      	str	r3, [r7, #4]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	817b      	strh	r3, [r7, #10]
 8009baa:	4613      	mov	r3, r2
 8009bac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bae:	897b      	ldrh	r3, [r7, #10]
 8009bb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bb4:	7a7b      	ldrb	r3, [r7, #9]
 8009bb6:	041b      	lsls	r3, r3, #16
 8009bb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	0d5b      	lsrs	r3, r3, #21
 8009bd6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009bda:	4b08      	ldr	r3, [pc, #32]	@ (8009bfc <I2C_TransferConfig+0x60>)
 8009bdc:	430b      	orrs	r3, r1
 8009bde:	43db      	mvns	r3, r3
 8009be0:	ea02 0103 	and.w	r1, r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009bee:	bf00      	nop
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	03ff63ff 	.word	0x03ff63ff

08009c00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c14:	4a39      	ldr	r2, [pc, #228]	@ (8009cfc <I2C_Enable_IRQ+0xfc>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d032      	beq.n	8009c80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009c1e:	4a38      	ldr	r2, [pc, #224]	@ (8009d00 <I2C_Enable_IRQ+0x100>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d02d      	beq.n	8009c80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009c28:	4a36      	ldr	r2, [pc, #216]	@ (8009d04 <I2C_Enable_IRQ+0x104>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d028      	beq.n	8009c80 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da03      	bge.n	8009c3e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009c3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c3e:	887b      	ldrh	r3, [r7, #2]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009c4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c50:	887b      	ldrh	r3, [r7, #2]
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009c60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009c62:	887b      	ldrh	r3, [r7, #2]
 8009c64:	2b10      	cmp	r3, #16
 8009c66:	d103      	bne.n	8009c70 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009c6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009c70:	887b      	ldrh	r3, [r7, #2]
 8009c72:	2b20      	cmp	r3, #32
 8009c74:	d133      	bne.n	8009cde <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f043 0320 	orr.w	r3, r3, #32
 8009c7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009c7e:	e02e      	b.n	8009cde <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	da03      	bge.n	8009c90 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009c8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c90:	887b      	ldrh	r3, [r7, #2]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009ca0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009ca2:	887b      	ldrh	r3, [r7, #2]
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009cb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009cb4:	887b      	ldrh	r3, [r7, #2]
 8009cb6:	2b10      	cmp	r3, #16
 8009cb8:	d103      	bne.n	8009cc2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009cc0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009cc2:	887b      	ldrh	r3, [r7, #2]
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d103      	bne.n	8009cd0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009cce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009cd0:	887b      	ldrh	r3, [r7, #2]
 8009cd2:	2b40      	cmp	r3, #64	@ 0x40
 8009cd4:	d103      	bne.n	8009cde <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cdc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6819      	ldr	r1, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	601a      	str	r2, [r3, #0]
}
 8009cee:	bf00      	nop
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	08008665 	.word	0x08008665
 8009d00:	08008a89 	.word	0x08008a89
 8009d04:	0800883d 	.word	0x0800883d

08009d08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009d14:	2300      	movs	r3, #0
 8009d16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d18:	887b      	ldrh	r3, [r7, #2]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00f      	beq.n	8009d42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009d28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d36:	2b28      	cmp	r3, #40	@ 0x28
 8009d38:	d003      	beq.n	8009d42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009d40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d42:	887b      	ldrh	r3, [r7, #2]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00f      	beq.n	8009d6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009d52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d60:	2b28      	cmp	r3, #40	@ 0x28
 8009d62:	d003      	beq.n	8009d6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009d6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009d6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	da03      	bge.n	8009d7c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009d7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009d7c:	887b      	ldrh	r3, [r7, #2]
 8009d7e:	2b10      	cmp	r3, #16
 8009d80:	d103      	bne.n	8009d8a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009d88:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009d8a:	887b      	ldrh	r3, [r7, #2]
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d103      	bne.n	8009d98 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f043 0320 	orr.w	r3, r3, #32
 8009d96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009d98:	887b      	ldrh	r3, [r7, #2]
 8009d9a:	2b40      	cmp	r3, #64	@ 0x40
 8009d9c:	d103      	bne.n	8009da6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009da4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	6819      	ldr	r1, [r3, #0]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	43da      	mvns	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	400a      	ands	r2, r1
 8009db6:	601a      	str	r2, [r3, #0]
}
 8009db8:	bf00      	nop
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d138      	bne.n	8009e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e032      	b.n	8009e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2224      	movs	r2, #36	@ 0x24
 8009df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f022 0201 	bic.w	r2, r2, #1
 8009e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6819      	ldr	r1, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0201 	orr.w	r2, r2, #1
 8009e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e000      	b.n	8009e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e4c:	2302      	movs	r3, #2
  }
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	d139      	bne.n	8009ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d101      	bne.n	8009e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	e033      	b.n	8009ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2224      	movs	r2, #36	@ 0x24
 8009e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0201 	bic.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	021b      	lsls	r3, r3, #8
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e000      	b.n	8009ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ee4:	2302      	movs	r3, #2
  }
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e038      	b.n	8009f76 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8009f0c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f245 5255 	movw	r2, #21845	@ 0x5555
 8009f16:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6852      	ldr	r2, [r2, #4]
 8009f20:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6892      	ldr	r2, [r2, #8]
 8009f2a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009f2c:	f7fb f806 	bl	8004f3c <HAL_GetTick>
 8009f30:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8009f32:	e008      	b.n	8009f46 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009f34:	f7fb f802 	bl	8004f3c <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b30      	cmp	r3, #48	@ 0x30
 8009f40:	d901      	bls.n	8009f46 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e017      	b.n	8009f76 <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1f1      	bne.n	8009f34 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	691a      	ldr	r2, [r3, #16]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d005      	beq.n	8009f6a <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	68d2      	ldr	r2, [r2, #12]
 8009f66:	611a      	str	r2, [r3, #16]
 8009f68:	e004      	b.n	8009f74 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8009f8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
	...

08009fa0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10c      	bne.n	8009fcc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8009fb2:	4b13      	ldr	r3, [pc, #76]	@ (800a000 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fbe:	d10e      	bne.n	8009fde <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8009fc0:	f000 f896 	bl	800a0f0 <HAL_PWREx_DisableLowPowerRunMode>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d009      	beq.n	8009fde <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8009fca:	e016      	b.n	8009ffa <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8009fcc:	4b0c      	ldr	r3, [pc, #48]	@ (800a000 <HAL_PWR_EnterSLEEPMode+0x60>)
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd8:	d001      	beq.n	8009fde <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8009fda:	f000 f879 	bl	800a0d0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009fde:	4b09      	ldr	r3, [pc, #36]	@ (800a004 <HAL_PWR_EnterSLEEPMode+0x64>)
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	4a08      	ldr	r2, [pc, #32]	@ (800a004 <HAL_PWR_EnterSLEEPMode+0x64>)
 8009fe4:	f023 0304 	bic.w	r3, r3, #4
 8009fe8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d101      	bne.n	8009ff4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009ff0:	bf30      	wfi
 8009ff2:	e002      	b.n	8009ffa <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009ff4:	bf40      	sev
    __WFE();
 8009ff6:	bf20      	wfe
    __WFE();
 8009ff8:	bf20      	wfe
  }

}
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	40007000 	.word	0x40007000
 800a004:	e000ed00 	.word	0xe000ed00

0800a008 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a008:	b480      	push	{r7}
 800a00a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a00c:	4b04      	ldr	r3, [pc, #16]	@ (800a020 <HAL_PWREx_GetVoltageRange+0x18>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800a014:	4618      	mov	r0, r3
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	40007000 	.word	0x40007000

0800a024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a032:	d130      	bne.n	800a096 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a034:	4b23      	ldr	r3, [pc, #140]	@ (800a0c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a03c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a040:	d038      	beq.n	800a0b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a042:	4b20      	ldr	r3, [pc, #128]	@ (800a0c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a04a:	4a1e      	ldr	r2, [pc, #120]	@ (800a0c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a04c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a050:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a052:	4b1d      	ldr	r3, [pc, #116]	@ (800a0c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2232      	movs	r2, #50	@ 0x32
 800a058:	fb02 f303 	mul.w	r3, r2, r3
 800a05c:	4a1b      	ldr	r2, [pc, #108]	@ (800a0cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a05e:	fba2 2303 	umull	r2, r3, r2, r3
 800a062:	0c9b      	lsrs	r3, r3, #18
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a068:	e002      	b.n	800a070 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a070:	4b14      	ldr	r3, [pc, #80]	@ (800a0c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a07c:	d102      	bne.n	800a084 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1f2      	bne.n	800a06a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a084:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a08c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a090:	d110      	bne.n	800a0b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e00f      	b.n	800a0b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a096:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a09e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0a2:	d007      	beq.n	800a0b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a0a4:	4b07      	ldr	r3, [pc, #28]	@ (800a0c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a0ac:	4a05      	ldr	r2, [pc, #20]	@ (800a0c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a0b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	40007000 	.word	0x40007000
 800a0c8:	20000434 	.word	0x20000434
 800a0cc:	431bde83 	.word	0x431bde83

0800a0d0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a0d4:	4b05      	ldr	r3, [pc, #20]	@ (800a0ec <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a04      	ldr	r2, [pc, #16]	@ (800a0ec <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a0da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a0de:	6013      	str	r3, [r2, #0]
}
 800a0e0:	bf00      	nop
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	40007000 	.word	0x40007000

0800a0f0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a0f6:	4b17      	ldr	r3, [pc, #92]	@ (800a154 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a16      	ldr	r2, [pc, #88]	@ (800a154 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a0fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a100:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a102:	4b15      	ldr	r3, [pc, #84]	@ (800a158 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2232      	movs	r2, #50	@ 0x32
 800a108:	fb02 f303 	mul.w	r3, r2, r3
 800a10c:	4a13      	ldr	r2, [pc, #76]	@ (800a15c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a10e:	fba2 2303 	umull	r2, r3, r2, r3
 800a112:	0c9b      	lsrs	r3, r3, #18
 800a114:	3301      	adds	r3, #1
 800a116:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a118:	e002      	b.n	800a120 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a120:	4b0c      	ldr	r3, [pc, #48]	@ (800a154 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a12c:	d102      	bne.n	800a134 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1f2      	bne.n	800a11a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a134:	4b07      	ldr	r3, [pc, #28]	@ (800a154 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a13c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a140:	d101      	bne.n	800a146 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e000      	b.n	800a148 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	40007000 	.word	0x40007000
 800a158:	20000434 	.word	0x20000434
 800a15c:	431bde83 	.word	0x431bde83

0800a160 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	f000 bc08 	b.w	800a984 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a174:	4b96      	ldr	r3, [pc, #600]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f003 030c 	and.w	r3, r3, #12
 800a17c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a17e:	4b94      	ldr	r3, [pc, #592]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f003 0303 	and.w	r3, r3, #3
 800a186:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0310 	and.w	r3, r3, #16
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 80e4 	beq.w	800a35e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d007      	beq.n	800a1ac <HAL_RCC_OscConfig+0x4c>
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	2b0c      	cmp	r3, #12
 800a1a0:	f040 808b 	bne.w	800a2ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	f040 8087 	bne.w	800a2ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a1ac:	4b88      	ldr	r3, [pc, #544]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0302 	and.w	r3, r3, #2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <HAL_RCC_OscConfig+0x64>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e3df      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1a      	ldr	r2, [r3, #32]
 800a1c8:	4b81      	ldr	r3, [pc, #516]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <HAL_RCC_OscConfig+0x7e>
 800a1d4:	4b7e      	ldr	r3, [pc, #504]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1dc:	e005      	b.n	800a1ea <HAL_RCC_OscConfig+0x8a>
 800a1de:	4b7c      	ldr	r3, [pc, #496]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a1e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1e4:	091b      	lsrs	r3, r3, #4
 800a1e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d223      	bcs.n	800a236 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fd92 	bl	800ad1c <RCC_SetFlashLatencyFromMSIRange>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e3c0      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a202:	4b73      	ldr	r3, [pc, #460]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a72      	ldr	r2, [pc, #456]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a208:	f043 0308 	orr.w	r3, r3, #8
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	4b70      	ldr	r3, [pc, #448]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	496d      	ldr	r1, [pc, #436]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a220:	4b6b      	ldr	r3, [pc, #428]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	021b      	lsls	r3, r3, #8
 800a22e:	4968      	ldr	r1, [pc, #416]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a230:	4313      	orrs	r3, r2
 800a232:	604b      	str	r3, [r1, #4]
 800a234:	e025      	b.n	800a282 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a236:	4b66      	ldr	r3, [pc, #408]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a65      	ldr	r2, [pc, #404]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a23c:	f043 0308 	orr.w	r3, r3, #8
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	4b63      	ldr	r3, [pc, #396]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	4960      	ldr	r1, [pc, #384]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a250:	4313      	orrs	r3, r2
 800a252:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a254:	4b5e      	ldr	r3, [pc, #376]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	69db      	ldr	r3, [r3, #28]
 800a260:	021b      	lsls	r3, r3, #8
 800a262:	495b      	ldr	r1, [pc, #364]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a264:	4313      	orrs	r3, r2
 800a266:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fd52 	bl	800ad1c <RCC_SetFlashLatencyFromMSIRange>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e380      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a282:	f000 fc87 	bl	800ab94 <HAL_RCC_GetSysClockFreq>
 800a286:	4602      	mov	r2, r0
 800a288:	4b51      	ldr	r3, [pc, #324]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	091b      	lsrs	r3, r3, #4
 800a28e:	f003 030f 	and.w	r3, r3, #15
 800a292:	4950      	ldr	r1, [pc, #320]	@ (800a3d4 <HAL_RCC_OscConfig+0x274>)
 800a294:	5ccb      	ldrb	r3, [r1, r3]
 800a296:	f003 031f 	and.w	r3, r3, #31
 800a29a:	fa22 f303 	lsr.w	r3, r2, r3
 800a29e:	4a4e      	ldr	r2, [pc, #312]	@ (800a3d8 <HAL_RCC_OscConfig+0x278>)
 800a2a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a2a2:	4b4e      	ldr	r3, [pc, #312]	@ (800a3dc <HAL_RCC_OscConfig+0x27c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fa fdf8 	bl	8004e9c <HAL_InitTick>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d052      	beq.n	800a35c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	e364      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d032      	beq.n	800a328 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a2c2:	4b43      	ldr	r3, [pc, #268]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a42      	ldr	r2, [pc, #264]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a2c8:	f043 0301 	orr.w	r3, r3, #1
 800a2cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a2ce:	f7fa fe35 	bl	8004f3c <HAL_GetTick>
 800a2d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2d4:	e008      	b.n	800a2e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a2d6:	f7fa fe31 	bl	8004f3c <HAL_GetTick>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d901      	bls.n	800a2e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e34d      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2e8:	4b39      	ldr	r3, [pc, #228]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0f0      	beq.n	800a2d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a2f4:	4b36      	ldr	r3, [pc, #216]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a35      	ldr	r2, [pc, #212]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a2fa:	f043 0308 	orr.w	r3, r3, #8
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	4b33      	ldr	r3, [pc, #204]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	4930      	ldr	r1, [pc, #192]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a312:	4b2f      	ldr	r3, [pc, #188]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	021b      	lsls	r3, r3, #8
 800a320:	492b      	ldr	r1, [pc, #172]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a322:	4313      	orrs	r3, r2
 800a324:	604b      	str	r3, [r1, #4]
 800a326:	e01a      	b.n	800a35e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a328:	4b29      	ldr	r3, [pc, #164]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a28      	ldr	r2, [pc, #160]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a32e:	f023 0301 	bic.w	r3, r3, #1
 800a332:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a334:	f7fa fe02 	bl	8004f3c <HAL_GetTick>
 800a338:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a33a:	e008      	b.n	800a34e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a33c:	f7fa fdfe 	bl	8004f3c <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	2b02      	cmp	r3, #2
 800a348:	d901      	bls.n	800a34e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e31a      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a34e:	4b20      	ldr	r3, [pc, #128]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1f0      	bne.n	800a33c <HAL_RCC_OscConfig+0x1dc>
 800a35a:	e000      	b.n	800a35e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a35c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d073      	beq.n	800a452 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d005      	beq.n	800a37c <HAL_RCC_OscConfig+0x21c>
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	2b0c      	cmp	r3, #12
 800a374:	d10e      	bne.n	800a394 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2b03      	cmp	r3, #3
 800a37a:	d10b      	bne.n	800a394 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a37c:	4b14      	ldr	r3, [pc, #80]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d063      	beq.n	800a450 <HAL_RCC_OscConfig+0x2f0>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d15f      	bne.n	800a450 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e2f7      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a39c:	d106      	bne.n	800a3ac <HAL_RCC_OscConfig+0x24c>
 800a39e:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a0b      	ldr	r2, [pc, #44]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a3a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	e025      	b.n	800a3f8 <HAL_RCC_OscConfig+0x298>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3b4:	d114      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x280>
 800a3b6:	4b06      	ldr	r3, [pc, #24]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a05      	ldr	r2, [pc, #20]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a3bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	4b03      	ldr	r3, [pc, #12]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a02      	ldr	r2, [pc, #8]	@ (800a3d0 <HAL_RCC_OscConfig+0x270>)
 800a3c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	e013      	b.n	800a3f8 <HAL_RCC_OscConfig+0x298>
 800a3d0:	40021000 	.word	0x40021000
 800a3d4:	0800d5bc 	.word	0x0800d5bc
 800a3d8:	20000434 	.word	0x20000434
 800a3dc:	20000438 	.word	0x20000438
 800a3e0:	4ba0      	ldr	r3, [pc, #640]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a9f      	ldr	r2, [pc, #636]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a3e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	4b9d      	ldr	r3, [pc, #628]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a9c      	ldr	r2, [pc, #624]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a3f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d013      	beq.n	800a428 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a400:	f7fa fd9c 	bl	8004f3c <HAL_GetTick>
 800a404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a406:	e008      	b.n	800a41a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a408:	f7fa fd98 	bl	8004f3c <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	2b64      	cmp	r3, #100	@ 0x64
 800a414:	d901      	bls.n	800a41a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e2b4      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a41a:	4b92      	ldr	r3, [pc, #584]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0f0      	beq.n	800a408 <HAL_RCC_OscConfig+0x2a8>
 800a426:	e014      	b.n	800a452 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a428:	f7fa fd88 	bl	8004f3c <HAL_GetTick>
 800a42c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a430:	f7fa fd84 	bl	8004f3c <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b64      	cmp	r3, #100	@ 0x64
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e2a0      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a442:	4b88      	ldr	r3, [pc, #544]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f0      	bne.n	800a430 <HAL_RCC_OscConfig+0x2d0>
 800a44e:	e000      	b.n	800a452 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 0302 	and.w	r3, r3, #2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d060      	beq.n	800a520 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	2b04      	cmp	r3, #4
 800a462:	d005      	beq.n	800a470 <HAL_RCC_OscConfig+0x310>
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	2b0c      	cmp	r3, #12
 800a468:	d119      	bne.n	800a49e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d116      	bne.n	800a49e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a470:	4b7c      	ldr	r3, [pc, #496]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <HAL_RCC_OscConfig+0x328>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e27d      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a488:	4b76      	ldr	r3, [pc, #472]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	061b      	lsls	r3, r3, #24
 800a496:	4973      	ldr	r1, [pc, #460]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a49c:	e040      	b.n	800a520 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d023      	beq.n	800a4ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4a6:	4b6f      	ldr	r3, [pc, #444]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a6e      	ldr	r2, [pc, #440]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a4ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b2:	f7fa fd43 	bl	8004f3c <HAL_GetTick>
 800a4b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4b8:	e008      	b.n	800a4cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4ba:	f7fa fd3f 	bl	8004f3c <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d901      	bls.n	800a4cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e25b      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4cc:	4b65      	ldr	r3, [pc, #404]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d0f0      	beq.n	800a4ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4d8:	4b62      	ldr	r3, [pc, #392]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	061b      	lsls	r3, r3, #24
 800a4e6:	495f      	ldr	r1, [pc, #380]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	604b      	str	r3, [r1, #4]
 800a4ec:	e018      	b.n	800a520 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4ee:	4b5d      	ldr	r3, [pc, #372]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a5c      	ldr	r2, [pc, #368]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a4f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4fa:	f7fa fd1f 	bl	8004f3c <HAL_GetTick>
 800a4fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a500:	e008      	b.n	800a514 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a502:	f7fa fd1b 	bl	8004f3c <HAL_GetTick>
 800a506:	4602      	mov	r2, r0
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d901      	bls.n	800a514 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e237      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a514:	4b53      	ldr	r3, [pc, #332]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1f0      	bne.n	800a502 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0308 	and.w	r3, r3, #8
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d03c      	beq.n	800a5a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01c      	beq.n	800a56e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a534:	4b4b      	ldr	r3, [pc, #300]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a53a:	4a4a      	ldr	r2, [pc, #296]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a53c:	f043 0301 	orr.w	r3, r3, #1
 800a540:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a544:	f7fa fcfa 	bl	8004f3c <HAL_GetTick>
 800a548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a54a:	e008      	b.n	800a55e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a54c:	f7fa fcf6 	bl	8004f3c <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	2b02      	cmp	r3, #2
 800a558:	d901      	bls.n	800a55e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e212      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a55e:	4b41      	ldr	r3, [pc, #260]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0ef      	beq.n	800a54c <HAL_RCC_OscConfig+0x3ec>
 800a56c:	e01b      	b.n	800a5a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a56e:	4b3d      	ldr	r3, [pc, #244]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a574:	4a3b      	ldr	r2, [pc, #236]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a576:	f023 0301 	bic.w	r3, r3, #1
 800a57a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a57e:	f7fa fcdd 	bl	8004f3c <HAL_GetTick>
 800a582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a584:	e008      	b.n	800a598 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a586:	f7fa fcd9 	bl	8004f3c <HAL_GetTick>
 800a58a:	4602      	mov	r2, r0
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	2b02      	cmp	r3, #2
 800a592:	d901      	bls.n	800a598 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e1f5      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a598:	4b32      	ldr	r3, [pc, #200]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a59a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1ef      	bne.n	800a586 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f000 80a6 	beq.w	800a700 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a5b8:	4b2a      	ldr	r3, [pc, #168]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a5ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10d      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5c4:	4b27      	ldr	r3, [pc, #156]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a5c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5c8:	4a26      	ldr	r2, [pc, #152]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a5ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5d0:	4b24      	ldr	r3, [pc, #144]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a5d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5d8:	60bb      	str	r3, [r7, #8]
 800a5da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5e0:	4b21      	ldr	r3, [pc, #132]	@ (800a668 <HAL_RCC_OscConfig+0x508>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d118      	bne.n	800a61e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5ec:	4b1e      	ldr	r3, [pc, #120]	@ (800a668 <HAL_RCC_OscConfig+0x508>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a668 <HAL_RCC_OscConfig+0x508>)
 800a5f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5f8:	f7fa fca0 	bl	8004f3c <HAL_GetTick>
 800a5fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5fe:	e008      	b.n	800a612 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a600:	f7fa fc9c 	bl	8004f3c <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d901      	bls.n	800a612 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e1b8      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a612:	4b15      	ldr	r3, [pc, #84]	@ (800a668 <HAL_RCC_OscConfig+0x508>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0f0      	beq.n	800a600 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d108      	bne.n	800a638 <HAL_RCC_OscConfig+0x4d8>
 800a626:	4b0f      	ldr	r3, [pc, #60]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a62c:	4a0d      	ldr	r2, [pc, #52]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a62e:	f043 0301 	orr.w	r3, r3, #1
 800a632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a636:	e029      	b.n	800a68c <HAL_RCC_OscConfig+0x52c>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	2b05      	cmp	r3, #5
 800a63e:	d115      	bne.n	800a66c <HAL_RCC_OscConfig+0x50c>
 800a640:	4b08      	ldr	r3, [pc, #32]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a646:	4a07      	ldr	r2, [pc, #28]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a648:	f043 0304 	orr.w	r3, r3, #4
 800a64c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a650:	4b04      	ldr	r3, [pc, #16]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a656:	4a03      	ldr	r2, [pc, #12]	@ (800a664 <HAL_RCC_OscConfig+0x504>)
 800a658:	f043 0301 	orr.w	r3, r3, #1
 800a65c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a660:	e014      	b.n	800a68c <HAL_RCC_OscConfig+0x52c>
 800a662:	bf00      	nop
 800a664:	40021000 	.word	0x40021000
 800a668:	40007000 	.word	0x40007000
 800a66c:	4b9d      	ldr	r3, [pc, #628]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a672:	4a9c      	ldr	r2, [pc, #624]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a674:	f023 0301 	bic.w	r3, r3, #1
 800a678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a67c:	4b99      	ldr	r3, [pc, #612]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a682:	4a98      	ldr	r2, [pc, #608]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a684:	f023 0304 	bic.w	r3, r3, #4
 800a688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d016      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a694:	f7fa fc52 	bl	8004f3c <HAL_GetTick>
 800a698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a69a:	e00a      	b.n	800a6b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a69c:	f7fa fc4e 	bl	8004f3c <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d901      	bls.n	800a6b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e168      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6b2:	4b8c      	ldr	r3, [pc, #560]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0ed      	beq.n	800a69c <HAL_RCC_OscConfig+0x53c>
 800a6c0:	e015      	b.n	800a6ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6c2:	f7fa fc3b 	bl	8004f3c <HAL_GetTick>
 800a6c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6c8:	e00a      	b.n	800a6e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ca:	f7fa fc37 	bl	8004f3c <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e151      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6e0:	4b80      	ldr	r3, [pc, #512]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a6e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1ed      	bne.n	800a6ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a6ee:	7ffb      	ldrb	r3, [r7, #31]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d105      	bne.n	800a700 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6f4:	4b7b      	ldr	r3, [pc, #492]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a6f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6f8:	4a7a      	ldr	r2, [pc, #488]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a6fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0320 	and.w	r3, r3, #32
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d03c      	beq.n	800a786 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d01c      	beq.n	800a74e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a714:	4b73      	ldr	r3, [pc, #460]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a71a:	4a72      	ldr	r2, [pc, #456]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a71c:	f043 0301 	orr.w	r3, r3, #1
 800a720:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a724:	f7fa fc0a 	bl	8004f3c <HAL_GetTick>
 800a728:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a72a:	e008      	b.n	800a73e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a72c:	f7fa fc06 	bl	8004f3c <HAL_GetTick>
 800a730:	4602      	mov	r2, r0
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	2b02      	cmp	r3, #2
 800a738:	d901      	bls.n	800a73e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e122      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a73e:	4b69      	ldr	r3, [pc, #420]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a740:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d0ef      	beq.n	800a72c <HAL_RCC_OscConfig+0x5cc>
 800a74c:	e01b      	b.n	800a786 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a74e:	4b65      	ldr	r3, [pc, #404]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a750:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a754:	4a63      	ldr	r2, [pc, #396]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a75e:	f7fa fbed 	bl	8004f3c <HAL_GetTick>
 800a762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a764:	e008      	b.n	800a778 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a766:	f7fa fbe9 	bl	8004f3c <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	2b02      	cmp	r3, #2
 800a772:	d901      	bls.n	800a778 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e105      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a778:	4b5a      	ldr	r3, [pc, #360]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a77a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1ef      	bne.n	800a766 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 80f9 	beq.w	800a982 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a794:	2b02      	cmp	r3, #2
 800a796:	f040 80cf 	bne.w	800a938 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a79a:	4b52      	ldr	r3, [pc, #328]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f003 0203 	and.w	r2, r3, #3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d12c      	bne.n	800a808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d123      	bne.n	800a808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d11b      	bne.n	800a808 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d113      	bne.n	800a808 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d109      	bne.n	800a808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fe:	085b      	lsrs	r3, r3, #1
 800a800:	3b01      	subs	r3, #1
 800a802:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a804:	429a      	cmp	r2, r3
 800a806:	d071      	beq.n	800a8ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	2b0c      	cmp	r3, #12
 800a80c:	d068      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a80e:	4b35      	ldr	r3, [pc, #212]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d105      	bne.n	800a826 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a81a:	4b32      	ldr	r3, [pc, #200]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e0ac      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a82a:	4b2e      	ldr	r3, [pc, #184]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a2d      	ldr	r2, [pc, #180]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a834:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a836:	f7fa fb81 	bl	8004f3c <HAL_GetTick>
 800a83a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a83c:	e008      	b.n	800a850 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a83e:	f7fa fb7d 	bl	8004f3c <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d901      	bls.n	800a850 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e099      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a850:	4b24      	ldr	r3, [pc, #144]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1f0      	bne.n	800a83e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a85c:	4b21      	ldr	r3, [pc, #132]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	4b21      	ldr	r3, [pc, #132]	@ (800a8e8 <HAL_RCC_OscConfig+0x788>)
 800a862:	4013      	ands	r3, r2
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a86c:	3a01      	subs	r2, #1
 800a86e:	0112      	lsls	r2, r2, #4
 800a870:	4311      	orrs	r1, r2
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a876:	0212      	lsls	r2, r2, #8
 800a878:	4311      	orrs	r1, r2
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a87e:	0852      	lsrs	r2, r2, #1
 800a880:	3a01      	subs	r2, #1
 800a882:	0552      	lsls	r2, r2, #21
 800a884:	4311      	orrs	r1, r2
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a88a:	0852      	lsrs	r2, r2, #1
 800a88c:	3a01      	subs	r2, #1
 800a88e:	0652      	lsls	r2, r2, #25
 800a890:	4311      	orrs	r1, r2
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a896:	06d2      	lsls	r2, r2, #27
 800a898:	430a      	orrs	r2, r1
 800a89a:	4912      	ldr	r1, [pc, #72]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a8a0:	4b10      	ldr	r3, [pc, #64]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a0f      	ldr	r2, [pc, #60]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a8a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a8aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	4a0c      	ldr	r2, [pc, #48]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a8b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a8b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a8b8:	f7fa fb40 	bl	8004f3c <HAL_GetTick>
 800a8bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8be:	e008      	b.n	800a8d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8c0:	f7fa fb3c 	bl	8004f3c <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d901      	bls.n	800a8d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e058      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8d2:	4b04      	ldr	r3, [pc, #16]	@ (800a8e4 <HAL_RCC_OscConfig+0x784>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0f0      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a8de:	e050      	b.n	800a982 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e04f      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
 800a8e4:	40021000 	.word	0x40021000
 800a8e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8ec:	4b27      	ldr	r3, [pc, #156]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d144      	bne.n	800a982 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a8f8:	4b24      	ldr	r3, [pc, #144]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a23      	ldr	r2, [pc, #140]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a8fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a902:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a904:	4b21      	ldr	r3, [pc, #132]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	4a20      	ldr	r2, [pc, #128]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a90a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a90e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a910:	f7fa fb14 	bl	8004f3c <HAL_GetTick>
 800a914:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a916:	e008      	b.n	800a92a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a918:	f7fa fb10 	bl	8004f3c <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b02      	cmp	r3, #2
 800a924:	d901      	bls.n	800a92a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e02c      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a92a:	4b18      	ldr	r3, [pc, #96]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f0      	beq.n	800a918 <HAL_RCC_OscConfig+0x7b8>
 800a936:	e024      	b.n	800a982 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	2b0c      	cmp	r3, #12
 800a93c:	d01f      	beq.n	800a97e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a93e:	4b13      	ldr	r3, [pc, #76]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a12      	ldr	r2, [pc, #72]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a94a:	f7fa faf7 	bl	8004f3c <HAL_GetTick>
 800a94e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a950:	e008      	b.n	800a964 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a952:	f7fa faf3 	bl	8004f3c <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d901      	bls.n	800a964 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800a960:	2303      	movs	r3, #3
 800a962:	e00f      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a964:	4b09      	ldr	r3, [pc, #36]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1f0      	bne.n	800a952 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a970:	4b06      	ldr	r3, [pc, #24]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a972:	68da      	ldr	r2, [r3, #12]
 800a974:	4905      	ldr	r1, [pc, #20]	@ (800a98c <HAL_RCC_OscConfig+0x82c>)
 800a976:	4b06      	ldr	r3, [pc, #24]	@ (800a990 <HAL_RCC_OscConfig+0x830>)
 800a978:	4013      	ands	r3, r2
 800a97a:	60cb      	str	r3, [r1, #12]
 800a97c:	e001      	b.n	800a982 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e000      	b.n	800a984 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	40021000 	.word	0x40021000
 800a990:	feeefffc 	.word	0xfeeefffc

0800a994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e0e7      	b.n	800ab78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a9a8:	4b75      	ldr	r3, [pc, #468]	@ (800ab80 <HAL_RCC_ClockConfig+0x1ec>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d910      	bls.n	800a9d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9b6:	4b72      	ldr	r3, [pc, #456]	@ (800ab80 <HAL_RCC_ClockConfig+0x1ec>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f023 0207 	bic.w	r2, r3, #7
 800a9be:	4970      	ldr	r1, [pc, #448]	@ (800ab80 <HAL_RCC_ClockConfig+0x1ec>)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9c6:	4b6e      	ldr	r3, [pc, #440]	@ (800ab80 <HAL_RCC_ClockConfig+0x1ec>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d001      	beq.n	800a9d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e0cf      	b.n	800ab78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d010      	beq.n	800aa06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	4b66      	ldr	r3, [pc, #408]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d908      	bls.n	800aa06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9f4:	4b63      	ldr	r3, [pc, #396]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	4960      	ldr	r1, [pc, #384]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d04c      	beq.n	800aaac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d107      	bne.n	800aa2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa1a:	4b5a      	ldr	r3, [pc, #360]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d121      	bne.n	800aa6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e0a6      	b.n	800ab78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d107      	bne.n	800aa42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa32:	4b54      	ldr	r3, [pc, #336]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d115      	bne.n	800aa6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e09a      	b.n	800ab78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d107      	bne.n	800aa5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aa4a:	4b4e      	ldr	r3, [pc, #312]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0302 	and.w	r3, r3, #2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d109      	bne.n	800aa6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e08e      	b.n	800ab78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa5a:	4b4a      	ldr	r3, [pc, #296]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e086      	b.n	800ab78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa6a:	4b46      	ldr	r3, [pc, #280]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f023 0203 	bic.w	r2, r3, #3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	4943      	ldr	r1, [pc, #268]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa7c:	f7fa fa5e 	bl	8004f3c <HAL_GetTick>
 800aa80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa82:	e00a      	b.n	800aa9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa84:	f7fa fa5a 	bl	8004f3c <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d901      	bls.n	800aa9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800aa96:	2303      	movs	r3, #3
 800aa98:	e06e      	b.n	800ab78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa9a:	4b3a      	ldr	r3, [pc, #232]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f003 020c 	and.w	r2, r3, #12
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d1eb      	bne.n	800aa84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d010      	beq.n	800aada <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689a      	ldr	r2, [r3, #8]
 800aabc:	4b31      	ldr	r3, [pc, #196]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d208      	bcs.n	800aada <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aac8:	4b2e      	ldr	r3, [pc, #184]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	492b      	ldr	r1, [pc, #172]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aada:	4b29      	ldr	r3, [pc, #164]	@ (800ab80 <HAL_RCC_ClockConfig+0x1ec>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0307 	and.w	r3, r3, #7
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d210      	bcs.n	800ab0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aae8:	4b25      	ldr	r3, [pc, #148]	@ (800ab80 <HAL_RCC_ClockConfig+0x1ec>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f023 0207 	bic.w	r2, r3, #7
 800aaf0:	4923      	ldr	r1, [pc, #140]	@ (800ab80 <HAL_RCC_ClockConfig+0x1ec>)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaf8:	4b21      	ldr	r3, [pc, #132]	@ (800ab80 <HAL_RCC_ClockConfig+0x1ec>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 0307 	and.w	r3, r3, #7
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d001      	beq.n	800ab0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e036      	b.n	800ab78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d008      	beq.n	800ab28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab16:	4b1b      	ldr	r3, [pc, #108]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	4918      	ldr	r1, [pc, #96]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0308 	and.w	r3, r3, #8
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d009      	beq.n	800ab48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab34:	4b13      	ldr	r3, [pc, #76]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	00db      	lsls	r3, r3, #3
 800ab42:	4910      	ldr	r1, [pc, #64]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ab48:	f000 f824 	bl	800ab94 <HAL_RCC_GetSysClockFreq>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab84 <HAL_RCC_ClockConfig+0x1f0>)
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	091b      	lsrs	r3, r3, #4
 800ab54:	f003 030f 	and.w	r3, r3, #15
 800ab58:	490b      	ldr	r1, [pc, #44]	@ (800ab88 <HAL_RCC_ClockConfig+0x1f4>)
 800ab5a:	5ccb      	ldrb	r3, [r1, r3]
 800ab5c:	f003 031f 	and.w	r3, r3, #31
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
 800ab64:	4a09      	ldr	r2, [pc, #36]	@ (800ab8c <HAL_RCC_ClockConfig+0x1f8>)
 800ab66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ab68:	4b09      	ldr	r3, [pc, #36]	@ (800ab90 <HAL_RCC_ClockConfig+0x1fc>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fa f995 	bl	8004e9c <HAL_InitTick>
 800ab72:	4603      	mov	r3, r0
 800ab74:	72fb      	strb	r3, [r7, #11]

  return status;
 800ab76:	7afb      	ldrb	r3, [r7, #11]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	40022000 	.word	0x40022000
 800ab84:	40021000 	.word	0x40021000
 800ab88:	0800d5bc 	.word	0x0800d5bc
 800ab8c:	20000434 	.word	0x20000434
 800ab90:	20000438 	.word	0x20000438

0800ab94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b089      	sub	sp, #36	@ 0x24
 800ab98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	61fb      	str	r3, [r7, #28]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aba2:	4b3e      	ldr	r3, [pc, #248]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f003 030c 	and.w	r3, r3, #12
 800abaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abac:	4b3b      	ldr	r3, [pc, #236]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f003 0303 	and.w	r3, r3, #3
 800abb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d005      	beq.n	800abc8 <HAL_RCC_GetSysClockFreq+0x34>
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2b0c      	cmp	r3, #12
 800abc0:	d121      	bne.n	800ac06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d11e      	bne.n	800ac06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800abc8:	4b34      	ldr	r3, [pc, #208]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d107      	bne.n	800abe4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800abd4:	4b31      	ldr	r3, [pc, #196]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800abd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abda:	0a1b      	lsrs	r3, r3, #8
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	61fb      	str	r3, [r7, #28]
 800abe2:	e005      	b.n	800abf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800abe4:	4b2d      	ldr	r3, [pc, #180]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	091b      	lsrs	r3, r3, #4
 800abea:	f003 030f 	and.w	r3, r3, #15
 800abee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800abf0:	4a2b      	ldr	r2, [pc, #172]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10d      	bne.n	800ac1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ac04:	e00a      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d102      	bne.n	800ac12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ac0c:	4b25      	ldr	r3, [pc, #148]	@ (800aca4 <HAL_RCC_GetSysClockFreq+0x110>)
 800ac0e:	61bb      	str	r3, [r7, #24]
 800ac10:	e004      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	d101      	bne.n	800ac1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ac18:	4b23      	ldr	r3, [pc, #140]	@ (800aca8 <HAL_RCC_GetSysClockFreq+0x114>)
 800ac1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b0c      	cmp	r3, #12
 800ac20:	d134      	bne.n	800ac8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac22:	4b1e      	ldr	r3, [pc, #120]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f003 0303 	and.w	r3, r3, #3
 800ac2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d003      	beq.n	800ac3a <HAL_RCC_GetSysClockFreq+0xa6>
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d003      	beq.n	800ac40 <HAL_RCC_GetSysClockFreq+0xac>
 800ac38:	e005      	b.n	800ac46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ac3a:	4b1a      	ldr	r3, [pc, #104]	@ (800aca4 <HAL_RCC_GetSysClockFreq+0x110>)
 800ac3c:	617b      	str	r3, [r7, #20]
      break;
 800ac3e:	e005      	b.n	800ac4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ac40:	4b19      	ldr	r3, [pc, #100]	@ (800aca8 <HAL_RCC_GetSysClockFreq+0x114>)
 800ac42:	617b      	str	r3, [r7, #20]
      break;
 800ac44:	e002      	b.n	800ac4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	617b      	str	r3, [r7, #20]
      break;
 800ac4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac4c:	4b13      	ldr	r3, [pc, #76]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	091b      	lsrs	r3, r3, #4
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	3301      	adds	r3, #1
 800ac58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ac5a:	4b10      	ldr	r3, [pc, #64]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	0a1b      	lsrs	r3, r3, #8
 800ac60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	fb03 f202 	mul.w	r2, r3, r2
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ac72:	4b0a      	ldr	r3, [pc, #40]	@ (800ac9c <HAL_RCC_GetSysClockFreq+0x108>)
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	0e5b      	lsrs	r3, r3, #25
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3724      	adds	r7, #36	@ 0x24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	40021000 	.word	0x40021000
 800aca0:	0800d5d4 	.word	0x0800d5d4
 800aca4:	00f42400 	.word	0x00f42400
 800aca8:	007a1200 	.word	0x007a1200

0800acac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acac:	b480      	push	{r7}
 800acae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800acb0:	4b03      	ldr	r3, [pc, #12]	@ (800acc0 <HAL_RCC_GetHCLKFreq+0x14>)
 800acb2:	681b      	ldr	r3, [r3, #0]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	20000434 	.word	0x20000434

0800acc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800acc8:	f7ff fff0 	bl	800acac <HAL_RCC_GetHCLKFreq>
 800accc:	4602      	mov	r2, r0
 800acce:	4b06      	ldr	r3, [pc, #24]	@ (800ace8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	f003 0307 	and.w	r3, r3, #7
 800acd8:	4904      	ldr	r1, [pc, #16]	@ (800acec <HAL_RCC_GetPCLK1Freq+0x28>)
 800acda:	5ccb      	ldrb	r3, [r1, r3]
 800acdc:	f003 031f 	and.w	r3, r3, #31
 800ace0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	40021000 	.word	0x40021000
 800acec:	0800d5cc 	.word	0x0800d5cc

0800acf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800acf4:	f7ff ffda 	bl	800acac <HAL_RCC_GetHCLKFreq>
 800acf8:	4602      	mov	r2, r0
 800acfa:	4b06      	ldr	r3, [pc, #24]	@ (800ad14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	0adb      	lsrs	r3, r3, #11
 800ad00:	f003 0307 	and.w	r3, r3, #7
 800ad04:	4904      	ldr	r1, [pc, #16]	@ (800ad18 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad06:	5ccb      	ldrb	r3, [r1, r3]
 800ad08:	f003 031f 	and.w	r3, r3, #31
 800ad0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	40021000 	.word	0x40021000
 800ad18:	0800d5cc 	.word	0x0800d5cc

0800ad1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ad24:	2300      	movs	r3, #0
 800ad26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ad28:	4b2a      	ldr	r3, [pc, #168]	@ (800add4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d003      	beq.n	800ad3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ad34:	f7ff f968 	bl	800a008 <HAL_PWREx_GetVoltageRange>
 800ad38:	6178      	str	r0, [r7, #20]
 800ad3a:	e014      	b.n	800ad66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad3c:	4b25      	ldr	r3, [pc, #148]	@ (800add4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad40:	4a24      	ldr	r2, [pc, #144]	@ (800add4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad46:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad48:	4b22      	ldr	r3, [pc, #136]	@ (800add4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ad54:	f7ff f958 	bl	800a008 <HAL_PWREx_GetVoltageRange>
 800ad58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ad5a:	4b1e      	ldr	r3, [pc, #120]	@ (800add4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad5e:	4a1d      	ldr	r2, [pc, #116]	@ (800add4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad6c:	d10b      	bne.n	800ad86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b80      	cmp	r3, #128	@ 0x80
 800ad72:	d919      	bls.n	800ada8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2ba0      	cmp	r3, #160	@ 0xa0
 800ad78:	d902      	bls.n	800ad80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	613b      	str	r3, [r7, #16]
 800ad7e:	e013      	b.n	800ada8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad80:	2301      	movs	r3, #1
 800ad82:	613b      	str	r3, [r7, #16]
 800ad84:	e010      	b.n	800ada8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b80      	cmp	r3, #128	@ 0x80
 800ad8a:	d902      	bls.n	800ad92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	613b      	str	r3, [r7, #16]
 800ad90:	e00a      	b.n	800ada8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b80      	cmp	r3, #128	@ 0x80
 800ad96:	d102      	bne.n	800ad9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad98:	2302      	movs	r3, #2
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	e004      	b.n	800ada8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b70      	cmp	r3, #112	@ 0x70
 800ada2:	d101      	bne.n	800ada8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ada4:	2301      	movs	r3, #1
 800ada6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ada8:	4b0b      	ldr	r3, [pc, #44]	@ (800add8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f023 0207 	bic.w	r2, r3, #7
 800adb0:	4909      	ldr	r1, [pc, #36]	@ (800add8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800adb8:	4b07      	ldr	r3, [pc, #28]	@ (800add8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d001      	beq.n	800adca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	40021000 	.word	0x40021000
 800add8:	40022000 	.word	0x40022000

0800addc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ade4:	2300      	movs	r3, #0
 800ade6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ade8:	2300      	movs	r3, #0
 800adea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d041      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adfc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae00:	d02a      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ae02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae06:	d824      	bhi.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae0c:	d008      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ae0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae12:	d81e      	bhi.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00a      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ae18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae1c:	d010      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae1e:	e018      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ae20:	4b86      	ldr	r3, [pc, #536]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	4a85      	ldr	r2, [pc, #532]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae2c:	e015      	b.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3304      	adds	r3, #4
 800ae32:	2100      	movs	r1, #0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 facd 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae3e:	e00c      	b.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3320      	adds	r3, #32
 800ae44:	2100      	movs	r1, #0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fbb6 	bl	800b5b8 <RCCEx_PLLSAI2_Config>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae50:	e003      	b.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	74fb      	strb	r3, [r7, #19]
      break;
 800ae56:	e000      	b.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ae58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae5a:	7cfb      	ldrb	r3, [r7, #19]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10b      	bne.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae60:	4b76      	ldr	r3, [pc, #472]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae6e:	4973      	ldr	r1, [pc, #460]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ae70:	4313      	orrs	r3, r2
 800ae72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800ae76:	e001      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae78:	7cfb      	ldrb	r3, [r7, #19]
 800ae7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d041      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae90:	d02a      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800ae92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae96:	d824      	bhi.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ae98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae9c:	d008      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ae9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aea2:	d81e      	bhi.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00a      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800aea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aeac:	d010      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800aeae:	e018      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aeb0:	4b62      	ldr	r3, [pc, #392]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	4a61      	ldr	r2, [pc, #388]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aeb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aeba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aebc:	e015      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3304      	adds	r3, #4
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fa85 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aece:	e00c      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3320      	adds	r3, #32
 800aed4:	2100      	movs	r1, #0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 fb6e 	bl	800b5b8 <RCCEx_PLLSAI2_Config>
 800aedc:	4603      	mov	r3, r0
 800aede:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aee0:	e003      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	74fb      	strb	r3, [r7, #19]
      break;
 800aee6:	e000      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800aee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeea:	7cfb      	ldrb	r3, [r7, #19]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10b      	bne.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aef0:	4b52      	ldr	r3, [pc, #328]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aef6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aefe:	494f      	ldr	r1, [pc, #316]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af00:	4313      	orrs	r3, r2
 800af02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800af06:	e001      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af08:	7cfb      	ldrb	r3, [r7, #19]
 800af0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 80a0 	beq.w	800b05a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af1a:	2300      	movs	r3, #0
 800af1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800af1e:	4b47      	ldr	r3, [pc, #284]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e000      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800af2e:	2300      	movs	r3, #0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00d      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af34:	4b41      	ldr	r3, [pc, #260]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af38:	4a40      	ldr	r2, [pc, #256]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af3e:	6593      	str	r3, [r2, #88]	@ 0x58
 800af40:	4b3e      	ldr	r3, [pc, #248]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af48:	60bb      	str	r3, [r7, #8]
 800af4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af4c:	2301      	movs	r3, #1
 800af4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af50:	4b3b      	ldr	r3, [pc, #236]	@ (800b040 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a3a      	ldr	r2, [pc, #232]	@ (800b040 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800af56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af5c:	f7f9 ffee 	bl	8004f3c <HAL_GetTick>
 800af60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800af62:	e009      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af64:	f7f9 ffea 	bl	8004f3c <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d902      	bls.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	74fb      	strb	r3, [r7, #19]
        break;
 800af76:	e005      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800af78:	4b31      	ldr	r3, [pc, #196]	@ (800b040 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0ef      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800af84:	7cfb      	ldrb	r3, [r7, #19]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d15c      	bne.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800af8a:	4b2c      	ldr	r3, [pc, #176]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d01f      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d019      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800afa8:	4b24      	ldr	r3, [pc, #144]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800afb4:	4b21      	ldr	r3, [pc, #132]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afba:	4a20      	ldr	r2, [pc, #128]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800afc4:	4b1d      	ldr	r3, [pc, #116]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afca:	4a1c      	ldr	r2, [pc, #112]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800afd4:	4a19      	ldr	r2, [pc, #100]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d016      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe6:	f7f9 ffa9 	bl	8004f3c <HAL_GetTick>
 800afea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afec:	e00b      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afee:	f7f9 ffa5 	bl	8004f3c <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800affc:	4293      	cmp	r3, r2
 800affe:	d902      	bls.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	74fb      	strb	r3, [r7, #19]
            break;
 800b004:	e006      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b006:	4b0d      	ldr	r3, [pc, #52]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b00c:	f003 0302 	and.w	r3, r3, #2
 800b010:	2b00      	cmp	r3, #0
 800b012:	d0ec      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b014:	7cfb      	ldrb	r3, [r7, #19]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10c      	bne.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b01a:	4b08      	ldr	r3, [pc, #32]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b02a:	4904      	ldr	r1, [pc, #16]	@ (800b03c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b032:	e009      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b034:	7cfb      	ldrb	r3, [r7, #19]
 800b036:	74bb      	strb	r3, [r7, #18]
 800b038:	e006      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b03a:	bf00      	nop
 800b03c:	40021000 	.word	0x40021000
 800b040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b044:	7cfb      	ldrb	r3, [r7, #19]
 800b046:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b048:	7c7b      	ldrb	r3, [r7, #17]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d105      	bne.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b04e:	4ba6      	ldr	r3, [pc, #664]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b052:	4aa5      	ldr	r2, [pc, #660]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b058:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b066:	4ba0      	ldr	r3, [pc, #640]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b06c:	f023 0203 	bic.w	r2, r3, #3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b074:	499c      	ldr	r1, [pc, #624]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b076:	4313      	orrs	r3, r2
 800b078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b088:	4b97      	ldr	r3, [pc, #604]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b08e:	f023 020c 	bic.w	r2, r3, #12
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b096:	4994      	ldr	r1, [pc, #592]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b098:	4313      	orrs	r3, r2
 800b09a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0304 	and.w	r3, r3, #4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b0aa:	4b8f      	ldr	r3, [pc, #572]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b8:	498b      	ldr	r1, [pc, #556]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 0308 	and.w	r3, r3, #8
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00a      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b0cc:	4b86      	ldr	r3, [pc, #536]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0da:	4983      	ldr	r1, [pc, #524]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0310 	and.w	r3, r3, #16
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00a      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b0ee:	4b7e      	ldr	r3, [pc, #504]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0fc:	497a      	ldr	r1, [pc, #488]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00a      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b110:	4b75      	ldr	r3, [pc, #468]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b116:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b11e:	4972      	ldr	r1, [pc, #456]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b120:	4313      	orrs	r3, r2
 800b122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00a      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b132:	4b6d      	ldr	r3, [pc, #436]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b138:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b140:	4969      	ldr	r1, [pc, #420]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b142:	4313      	orrs	r3, r2
 800b144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00a      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b154:	4b64      	ldr	r3, [pc, #400]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b15a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b162:	4961      	ldr	r1, [pc, #388]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b164:	4313      	orrs	r3, r2
 800b166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00a      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b176:	4b5c      	ldr	r3, [pc, #368]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b17c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b184:	4958      	ldr	r1, [pc, #352]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b186:	4313      	orrs	r3, r2
 800b188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00a      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b198:	4b53      	ldr	r3, [pc, #332]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b19e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1a6:	4950      	ldr	r1, [pc, #320]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b1ba:	4b4b      	ldr	r3, [pc, #300]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1c8:	4947      	ldr	r1, [pc, #284]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00a      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b1dc:	4b42      	ldr	r3, [pc, #264]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1e2:	f023 0203 	bic.w	r2, r3, #3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1ea:	493f      	ldr	r1, [pc, #252]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d028      	beq.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1fe:	4b3a      	ldr	r3, [pc, #232]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b204:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b20c:	4936      	ldr	r1, [pc, #216]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b21c:	d106      	bne.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b21e:	4b32      	ldr	r3, [pc, #200]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	4a31      	ldr	r2, [pc, #196]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b224:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b228:	60d3      	str	r3, [r2, #12]
 800b22a:	e011      	b.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b230:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b234:	d10c      	bne.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3304      	adds	r3, #4
 800b23a:	2101      	movs	r1, #1
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 f8c9 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800b242:	4603      	mov	r3, r0
 800b244:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b246:	7cfb      	ldrb	r3, [r7, #19]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800b24c:	7cfb      	ldrb	r3, [r7, #19]
 800b24e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d028      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b25c:	4b22      	ldr	r3, [pc, #136]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b26a:	491f      	ldr	r1, [pc, #124]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b26c:	4313      	orrs	r3, r2
 800b26e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b27a:	d106      	bne.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b27c:	4b1a      	ldr	r3, [pc, #104]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	4a19      	ldr	r2, [pc, #100]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b286:	60d3      	str	r3, [r2, #12]
 800b288:	e011      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b28e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b292:	d10c      	bne.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3304      	adds	r3, #4
 800b298:	2101      	movs	r1, #1
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 f89a 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b2a4:	7cfb      	ldrb	r3, [r7, #19]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800b2aa:	7cfb      	ldrb	r3, [r7, #19]
 800b2ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d02a      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2c8:	4907      	ldr	r1, [pc, #28]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2d8:	d108      	bne.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2da:	4b03      	ldr	r3, [pc, #12]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	4a02      	ldr	r2, [pc, #8]	@ (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2e4:	60d3      	str	r3, [r2, #12]
 800b2e6:	e013      	b.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800b2e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2f4:	d10c      	bne.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 f869 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800b302:	4603      	mov	r3, r0
 800b304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b306:	7cfb      	ldrb	r3, [r7, #19]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800b30c:	7cfb      	ldrb	r3, [r7, #19]
 800b30e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d02f      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b31c:	4b2c      	ldr	r3, [pc, #176]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b322:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b32a:	4929      	ldr	r1, [pc, #164]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b33a:	d10d      	bne.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3304      	adds	r3, #4
 800b340:	2102      	movs	r1, #2
 800b342:	4618      	mov	r0, r3
 800b344:	f000 f846 	bl	800b3d4 <RCCEx_PLLSAI1_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b34c:	7cfb      	ldrb	r3, [r7, #19]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d014      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b352:	7cfb      	ldrb	r3, [r7, #19]
 800b354:	74bb      	strb	r3, [r7, #18]
 800b356:	e011      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b35c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b360:	d10c      	bne.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3320      	adds	r3, #32
 800b366:	2102      	movs	r1, #2
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 f925 	bl	800b5b8 <RCCEx_PLLSAI2_Config>
 800b36e:	4603      	mov	r3, r0
 800b370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b372:	7cfb      	ldrb	r3, [r7, #19]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b378:	7cfb      	ldrb	r3, [r7, #19]
 800b37a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00b      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b388:	4b11      	ldr	r3, [pc, #68]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b38e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b398:	490d      	ldr	r1, [pc, #52]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3ac:	4b08      	ldr	r3, [pc, #32]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3bc:	4904      	ldr	r1, [pc, #16]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b3c4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	40021000 	.word	0x40021000

0800b3d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b3e2:	4b74      	ldr	r3, [pc, #464]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	f003 0303 	and.w	r3, r3, #3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d018      	beq.n	800b420 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b3ee:	4b71      	ldr	r3, [pc, #452]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f003 0203 	and.w	r2, r3, #3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d10d      	bne.n	800b41a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
       ||
 800b402:	2b00      	cmp	r3, #0
 800b404:	d009      	beq.n	800b41a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b406:	4b6b      	ldr	r3, [pc, #428]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	091b      	lsrs	r3, r3, #4
 800b40c:	f003 0307 	and.w	r3, r3, #7
 800b410:	1c5a      	adds	r2, r3, #1
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
       ||
 800b416:	429a      	cmp	r2, r3
 800b418:	d047      	beq.n	800b4aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	73fb      	strb	r3, [r7, #15]
 800b41e:	e044      	b.n	800b4aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b03      	cmp	r3, #3
 800b426:	d018      	beq.n	800b45a <RCCEx_PLLSAI1_Config+0x86>
 800b428:	2b03      	cmp	r3, #3
 800b42a:	d825      	bhi.n	800b478 <RCCEx_PLLSAI1_Config+0xa4>
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d002      	beq.n	800b436 <RCCEx_PLLSAI1_Config+0x62>
 800b430:	2b02      	cmp	r3, #2
 800b432:	d009      	beq.n	800b448 <RCCEx_PLLSAI1_Config+0x74>
 800b434:	e020      	b.n	800b478 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b436:	4b5f      	ldr	r3, [pc, #380]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d11d      	bne.n	800b47e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b446:	e01a      	b.n	800b47e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b448:	4b5a      	ldr	r3, [pc, #360]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b450:	2b00      	cmp	r3, #0
 800b452:	d116      	bne.n	800b482 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b458:	e013      	b.n	800b482 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b45a:	4b56      	ldr	r3, [pc, #344]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10f      	bne.n	800b486 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b466:	4b53      	ldr	r3, [pc, #332]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d109      	bne.n	800b486 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b476:	e006      	b.n	800b486 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	73fb      	strb	r3, [r7, #15]
      break;
 800b47c:	e004      	b.n	800b488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b47e:	bf00      	nop
 800b480:	e002      	b.n	800b488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b482:	bf00      	nop
 800b484:	e000      	b.n	800b488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b486:	bf00      	nop
    }

    if(status == HAL_OK)
 800b488:	7bfb      	ldrb	r3, [r7, #15]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10d      	bne.n	800b4aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b48e:	4b49      	ldr	r3, [pc, #292]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6819      	ldr	r1, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	4943      	ldr	r1, [pc, #268]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d17c      	bne.n	800b5aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b4b0:	4b40      	ldr	r3, [pc, #256]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a3f      	ldr	r2, [pc, #252]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b4ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4bc:	f7f9 fd3e 	bl	8004f3c <HAL_GetTick>
 800b4c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b4c2:	e009      	b.n	800b4d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b4c4:	f7f9 fd3a 	bl	8004f3c <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d902      	bls.n	800b4d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	73fb      	strb	r3, [r7, #15]
        break;
 800b4d6:	e005      	b.n	800b4e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b4d8:	4b36      	ldr	r3, [pc, #216]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1ef      	bne.n	800b4c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d15f      	bne.n	800b5aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d110      	bne.n	800b512 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b4f0:	4b30      	ldr	r3, [pc, #192]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b4f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	6892      	ldr	r2, [r2, #8]
 800b500:	0211      	lsls	r1, r2, #8
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	68d2      	ldr	r2, [r2, #12]
 800b506:	06d2      	lsls	r2, r2, #27
 800b508:	430a      	orrs	r2, r1
 800b50a:	492a      	ldr	r1, [pc, #168]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b50c:	4313      	orrs	r3, r2
 800b50e:	610b      	str	r3, [r1, #16]
 800b510:	e027      	b.n	800b562 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d112      	bne.n	800b53e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b518:	4b26      	ldr	r3, [pc, #152]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b520:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	6892      	ldr	r2, [r2, #8]
 800b528:	0211      	lsls	r1, r2, #8
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	6912      	ldr	r2, [r2, #16]
 800b52e:	0852      	lsrs	r2, r2, #1
 800b530:	3a01      	subs	r2, #1
 800b532:	0552      	lsls	r2, r2, #21
 800b534:	430a      	orrs	r2, r1
 800b536:	491f      	ldr	r1, [pc, #124]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	610b      	str	r3, [r1, #16]
 800b53c:	e011      	b.n	800b562 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b53e:	4b1d      	ldr	r3, [pc, #116]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b546:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	6892      	ldr	r2, [r2, #8]
 800b54e:	0211      	lsls	r1, r2, #8
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	6952      	ldr	r2, [r2, #20]
 800b554:	0852      	lsrs	r2, r2, #1
 800b556:	3a01      	subs	r2, #1
 800b558:	0652      	lsls	r2, r2, #25
 800b55a:	430a      	orrs	r2, r1
 800b55c:	4915      	ldr	r1, [pc, #84]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b562:	4b14      	ldr	r3, [pc, #80]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a13      	ldr	r2, [pc, #76]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b568:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b56c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b56e:	f7f9 fce5 	bl	8004f3c <HAL_GetTick>
 800b572:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b574:	e009      	b.n	800b58a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b576:	f7f9 fce1 	bl	8004f3c <HAL_GetTick>
 800b57a:	4602      	mov	r2, r0
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	2b02      	cmp	r3, #2
 800b582:	d902      	bls.n	800b58a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	73fb      	strb	r3, [r7, #15]
          break;
 800b588:	e005      	b.n	800b596 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b58a:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b592:	2b00      	cmp	r3, #0
 800b594:	d0ef      	beq.n	800b576 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b596:	7bfb      	ldrb	r3, [r7, #15]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d106      	bne.n	800b5aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b59c:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b59e:	691a      	ldr	r2, [r3, #16]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	4903      	ldr	r1, [pc, #12]	@ (800b5b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	40021000 	.word	0x40021000

0800b5b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b5c6:	4b69      	ldr	r3, [pc, #420]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	f003 0303 	and.w	r3, r3, #3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d018      	beq.n	800b604 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b5d2:	4b66      	ldr	r3, [pc, #408]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	f003 0203 	and.w	r2, r3, #3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d10d      	bne.n	800b5fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
       ||
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b5ea:	4b60      	ldr	r3, [pc, #384]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	091b      	lsrs	r3, r3, #4
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
       ||
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d047      	beq.n	800b68e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	73fb      	strb	r3, [r7, #15]
 800b602:	e044      	b.n	800b68e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b03      	cmp	r3, #3
 800b60a:	d018      	beq.n	800b63e <RCCEx_PLLSAI2_Config+0x86>
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d825      	bhi.n	800b65c <RCCEx_PLLSAI2_Config+0xa4>
 800b610:	2b01      	cmp	r3, #1
 800b612:	d002      	beq.n	800b61a <RCCEx_PLLSAI2_Config+0x62>
 800b614:	2b02      	cmp	r3, #2
 800b616:	d009      	beq.n	800b62c <RCCEx_PLLSAI2_Config+0x74>
 800b618:	e020      	b.n	800b65c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b61a:	4b54      	ldr	r3, [pc, #336]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d11d      	bne.n	800b662 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b62a:	e01a      	b.n	800b662 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b62c:	4b4f      	ldr	r3, [pc, #316]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b634:	2b00      	cmp	r3, #0
 800b636:	d116      	bne.n	800b666 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b63c:	e013      	b.n	800b666 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b63e:	4b4b      	ldr	r3, [pc, #300]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10f      	bne.n	800b66a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b64a:	4b48      	ldr	r3, [pc, #288]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b652:	2b00      	cmp	r3, #0
 800b654:	d109      	bne.n	800b66a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b65a:	e006      	b.n	800b66a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	73fb      	strb	r3, [r7, #15]
      break;
 800b660:	e004      	b.n	800b66c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b662:	bf00      	nop
 800b664:	e002      	b.n	800b66c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b666:	bf00      	nop
 800b668:	e000      	b.n	800b66c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b66a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10d      	bne.n	800b68e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b672:	4b3e      	ldr	r3, [pc, #248]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6819      	ldr	r1, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	3b01      	subs	r3, #1
 800b684:	011b      	lsls	r3, r3, #4
 800b686:	430b      	orrs	r3, r1
 800b688:	4938      	ldr	r1, [pc, #224]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d166      	bne.n	800b762 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b694:	4b35      	ldr	r3, [pc, #212]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a34      	ldr	r2, [pc, #208]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b69a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b69e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6a0:	f7f9 fc4c 	bl	8004f3c <HAL_GetTick>
 800b6a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b6a6:	e009      	b.n	800b6bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b6a8:	f7f9 fc48 	bl	8004f3c <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d902      	bls.n	800b6bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	73fb      	strb	r3, [r7, #15]
        break;
 800b6ba:	e005      	b.n	800b6c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b6bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1ef      	bne.n	800b6a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d149      	bne.n	800b762 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d110      	bne.n	800b6f6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b6d4:	4b25      	ldr	r3, [pc, #148]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b6dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	6892      	ldr	r2, [r2, #8]
 800b6e4:	0211      	lsls	r1, r2, #8
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	68d2      	ldr	r2, [r2, #12]
 800b6ea:	06d2      	lsls	r2, r2, #27
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	491f      	ldr	r1, [pc, #124]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	614b      	str	r3, [r1, #20]
 800b6f4:	e011      	b.n	800b71a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b6f6:	4b1d      	ldr	r3, [pc, #116]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b6fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	6892      	ldr	r2, [r2, #8]
 800b706:	0211      	lsls	r1, r2, #8
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	6912      	ldr	r2, [r2, #16]
 800b70c:	0852      	lsrs	r2, r2, #1
 800b70e:	3a01      	subs	r2, #1
 800b710:	0652      	lsls	r2, r2, #25
 800b712:	430a      	orrs	r2, r1
 800b714:	4915      	ldr	r1, [pc, #84]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b716:	4313      	orrs	r3, r2
 800b718:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b71a:	4b14      	ldr	r3, [pc, #80]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a13      	ldr	r2, [pc, #76]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b724:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b726:	f7f9 fc09 	bl	8004f3c <HAL_GetTick>
 800b72a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b72c:	e009      	b.n	800b742 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b72e:	f7f9 fc05 	bl	8004f3c <HAL_GetTick>
 800b732:	4602      	mov	r2, r0
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d902      	bls.n	800b742 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	73fb      	strb	r3, [r7, #15]
          break;
 800b740:	e005      	b.n	800b74e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b742:	4b0a      	ldr	r3, [pc, #40]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0ef      	beq.n	800b72e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d106      	bne.n	800b762 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b754:	4b05      	ldr	r3, [pc, #20]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b756:	695a      	ldr	r2, [r3, #20]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	695b      	ldr	r3, [r3, #20]
 800b75c:	4903      	ldr	r1, [pc, #12]	@ (800b76c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b75e:	4313      	orrs	r3, r2
 800b760:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b762:	7bfb      	ldrb	r3, [r7, #15]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	40021000 	.word	0x40021000

0800b770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e049      	b.n	800b816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d106      	bne.n	800b79c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7f8 fe9e 	bl	80044d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	f000 f9d0 	bl	800bb54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b01      	cmp	r3, #1
 800b832:	d001      	beq.n	800b838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	e04f      	b.n	800b8d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2202      	movs	r2, #2
 800b83c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68da      	ldr	r2, [r3, #12]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f042 0201 	orr.w	r2, r2, #1
 800b84e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a23      	ldr	r2, [pc, #140]	@ (800b8e4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d01d      	beq.n	800b896 <HAL_TIM_Base_Start_IT+0x76>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b862:	d018      	beq.n	800b896 <HAL_TIM_Base_Start_IT+0x76>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a1f      	ldr	r2, [pc, #124]	@ (800b8e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d013      	beq.n	800b896 <HAL_TIM_Base_Start_IT+0x76>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a1e      	ldr	r2, [pc, #120]	@ (800b8ec <HAL_TIM_Base_Start_IT+0xcc>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d00e      	beq.n	800b896 <HAL_TIM_Base_Start_IT+0x76>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a1c      	ldr	r2, [pc, #112]	@ (800b8f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d009      	beq.n	800b896 <HAL_TIM_Base_Start_IT+0x76>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a1b      	ldr	r2, [pc, #108]	@ (800b8f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d004      	beq.n	800b896 <HAL_TIM_Base_Start_IT+0x76>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a19      	ldr	r2, [pc, #100]	@ (800b8f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d115      	bne.n	800b8c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	689a      	ldr	r2, [r3, #8]
 800b89c:	4b17      	ldr	r3, [pc, #92]	@ (800b8fc <HAL_TIM_Base_Start_IT+0xdc>)
 800b89e:	4013      	ands	r3, r2
 800b8a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2b06      	cmp	r3, #6
 800b8a6:	d015      	beq.n	800b8d4 <HAL_TIM_Base_Start_IT+0xb4>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8ae:	d011      	beq.n	800b8d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f042 0201 	orr.w	r2, r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8c0:	e008      	b.n	800b8d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f042 0201 	orr.w	r2, r2, #1
 800b8d0:	601a      	str	r2, [r3, #0]
 800b8d2:	e000      	b.n	800b8d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	40012c00 	.word	0x40012c00
 800b8e8:	40000400 	.word	0x40000400
 800b8ec:	40000800 	.word	0x40000800
 800b8f0:	40000c00 	.word	0x40000c00
 800b8f4:	40013400 	.word	0x40013400
 800b8f8:	40014000 	.word	0x40014000
 800b8fc:	00010007 	.word	0x00010007

0800b900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d020      	beq.n	800b964 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d01b      	beq.n	800b964 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f06f 0202 	mvn.w	r2, #2
 800b934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f8e4 	bl	800bb18 <HAL_TIM_IC_CaptureCallback>
 800b950:	e005      	b.n	800b95e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f8d6 	bl	800bb04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 f8e7 	bl	800bb2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d020      	beq.n	800b9b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01b      	beq.n	800b9b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f06f 0204 	mvn.w	r2, #4
 800b980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2202      	movs	r2, #2
 800b986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f8be 	bl	800bb18 <HAL_TIM_IC_CaptureCallback>
 800b99c:	e005      	b.n	800b9aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f8b0 	bl	800bb04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f8c1 	bl	800bb2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	f003 0308 	and.w	r3, r3, #8
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d020      	beq.n	800b9fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f003 0308 	and.w	r3, r3, #8
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01b      	beq.n	800b9fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f06f 0208 	mvn.w	r2, #8
 800b9cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2204      	movs	r2, #4
 800b9d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	69db      	ldr	r3, [r3, #28]
 800b9da:	f003 0303 	and.w	r3, r3, #3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f898 	bl	800bb18 <HAL_TIM_IC_CaptureCallback>
 800b9e8:	e005      	b.n	800b9f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f88a 	bl	800bb04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f89b 	bl	800bb2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	f003 0310 	and.w	r3, r3, #16
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d020      	beq.n	800ba48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f003 0310 	and.w	r3, r3, #16
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d01b      	beq.n	800ba48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f06f 0210 	mvn.w	r2, #16
 800ba18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2208      	movs	r2, #8
 800ba1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f872 	bl	800bb18 <HAL_TIM_IC_CaptureCallback>
 800ba34:	e005      	b.n	800ba42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f864 	bl	800bb04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f875 	bl	800bb2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00c      	beq.n	800ba6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f06f 0201 	mvn.w	r2, #1
 800ba64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7f8 fb40 	bl	80040ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00c      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d007      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ba88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f98e 	bl	800bdac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00c      	beq.n	800bab4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d007      	beq.n	800bab4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800baac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f986 	bl	800bdc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00c      	beq.n	800bad8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d007      	beq.n	800bad8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f834 	bl	800bb40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f003 0320 	and.w	r3, r3, #32
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00c      	beq.n	800bafc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f003 0320 	and.w	r3, r3, #32
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d007      	beq.n	800bafc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f06f 0220 	mvn.w	r2, #32
 800baf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f94e 	bl	800bd98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bafc:	bf00      	nop
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a40      	ldr	r2, [pc, #256]	@ (800bc68 <TIM_Base_SetConfig+0x114>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d013      	beq.n	800bb94 <TIM_Base_SetConfig+0x40>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb72:	d00f      	beq.n	800bb94 <TIM_Base_SetConfig+0x40>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a3d      	ldr	r2, [pc, #244]	@ (800bc6c <TIM_Base_SetConfig+0x118>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d00b      	beq.n	800bb94 <TIM_Base_SetConfig+0x40>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a3c      	ldr	r2, [pc, #240]	@ (800bc70 <TIM_Base_SetConfig+0x11c>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d007      	beq.n	800bb94 <TIM_Base_SetConfig+0x40>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a3b      	ldr	r2, [pc, #236]	@ (800bc74 <TIM_Base_SetConfig+0x120>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d003      	beq.n	800bb94 <TIM_Base_SetConfig+0x40>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a3a      	ldr	r2, [pc, #232]	@ (800bc78 <TIM_Base_SetConfig+0x124>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d108      	bne.n	800bba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a2f      	ldr	r2, [pc, #188]	@ (800bc68 <TIM_Base_SetConfig+0x114>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d01f      	beq.n	800bbee <TIM_Base_SetConfig+0x9a>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbb4:	d01b      	beq.n	800bbee <TIM_Base_SetConfig+0x9a>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a2c      	ldr	r2, [pc, #176]	@ (800bc6c <TIM_Base_SetConfig+0x118>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d017      	beq.n	800bbee <TIM_Base_SetConfig+0x9a>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a2b      	ldr	r2, [pc, #172]	@ (800bc70 <TIM_Base_SetConfig+0x11c>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d013      	beq.n	800bbee <TIM_Base_SetConfig+0x9a>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a2a      	ldr	r2, [pc, #168]	@ (800bc74 <TIM_Base_SetConfig+0x120>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d00f      	beq.n	800bbee <TIM_Base_SetConfig+0x9a>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a29      	ldr	r2, [pc, #164]	@ (800bc78 <TIM_Base_SetConfig+0x124>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d00b      	beq.n	800bbee <TIM_Base_SetConfig+0x9a>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a28      	ldr	r2, [pc, #160]	@ (800bc7c <TIM_Base_SetConfig+0x128>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d007      	beq.n	800bbee <TIM_Base_SetConfig+0x9a>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a27      	ldr	r2, [pc, #156]	@ (800bc80 <TIM_Base_SetConfig+0x12c>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d003      	beq.n	800bbee <TIM_Base_SetConfig+0x9a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a26      	ldr	r2, [pc, #152]	@ (800bc84 <TIM_Base_SetConfig+0x130>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d108      	bne.n	800bc00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a10      	ldr	r2, [pc, #64]	@ (800bc68 <TIM_Base_SetConfig+0x114>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d00f      	beq.n	800bc4c <TIM_Base_SetConfig+0xf8>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a12      	ldr	r2, [pc, #72]	@ (800bc78 <TIM_Base_SetConfig+0x124>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d00b      	beq.n	800bc4c <TIM_Base_SetConfig+0xf8>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a11      	ldr	r2, [pc, #68]	@ (800bc7c <TIM_Base_SetConfig+0x128>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d007      	beq.n	800bc4c <TIM_Base_SetConfig+0xf8>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a10      	ldr	r2, [pc, #64]	@ (800bc80 <TIM_Base_SetConfig+0x12c>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d003      	beq.n	800bc4c <TIM_Base_SetConfig+0xf8>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a0f      	ldr	r2, [pc, #60]	@ (800bc84 <TIM_Base_SetConfig+0x130>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d103      	bne.n	800bc54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	691a      	ldr	r2, [r3, #16]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	615a      	str	r2, [r3, #20]
}
 800bc5a:	bf00      	nop
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	40012c00 	.word	0x40012c00
 800bc6c:	40000400 	.word	0x40000400
 800bc70:	40000800 	.word	0x40000800
 800bc74:	40000c00 	.word	0x40000c00
 800bc78:	40013400 	.word	0x40013400
 800bc7c:	40014000 	.word	0x40014000
 800bc80:	40014400 	.word	0x40014400
 800bc84:	40014800 	.word	0x40014800

0800bc88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d101      	bne.n	800bca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	e068      	b.n	800bd72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a2e      	ldr	r2, [pc, #184]	@ (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d004      	beq.n	800bcd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a2d      	ldr	r2, [pc, #180]	@ (800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d108      	bne.n	800bce6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bcda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a1e      	ldr	r2, [pc, #120]	@ (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d01d      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd12:	d018      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a1b      	ldr	r2, [pc, #108]	@ (800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d013      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a1a      	ldr	r2, [pc, #104]	@ (800bd8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d00e      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a18      	ldr	r2, [pc, #96]	@ (800bd90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d009      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a13      	ldr	r2, [pc, #76]	@ (800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d004      	beq.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a14      	ldr	r2, [pc, #80]	@ (800bd94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d10c      	bne.n	800bd60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	40012c00 	.word	0x40012c00
 800bd84:	40013400 	.word	0x40013400
 800bd88:	40000400 	.word	0x40000400
 800bd8c:	40000800 	.word	0x40000800
 800bd90:	40000c00 	.word	0x40000c00
 800bd94:	40014000 	.word	0x40014000

0800bd98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e040      	b.n	800be68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d106      	bne.n	800bdfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7f8 fb94 	bl	8004524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2224      	movs	r2, #36	@ 0x24
 800be00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f022 0201 	bic.w	r2, r2, #1
 800be10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be16:	2b00      	cmp	r3, #0
 800be18:	d002      	beq.n	800be20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 ff04 	bl	800cc28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fc49 	bl	800c6b8 <UART_SetConfig>
 800be26:	4603      	mov	r3, r0
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d101      	bne.n	800be30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e01b      	b.n	800be68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	689a      	ldr	r2, [r3, #8]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f042 0201 	orr.w	r2, r2, #1
 800be5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 ff83 	bl	800cd6c <UART_CheckIdleState>
 800be66:	4603      	mov	r3, r0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e02f      	b.n	800bee2 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2224      	movs	r2, #36	@ 0x24
 800be86:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f022 0201 	bic.w	r2, r2, #1
 800be96:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2200      	movs	r2, #0
 800be9e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2200      	movs	r2, #0
 800bea6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2200      	movs	r2, #0
 800beae:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7f8 fcc5 	bl	8004840 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08a      	sub	sp, #40	@ 0x28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	4613      	mov	r3, r2
 800bef8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800befe:	2b20      	cmp	r3, #32
 800bf00:	d165      	bne.n	800bfce <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <HAL_UART_Transmit_DMA+0x22>
 800bf08:	88fb      	ldrh	r3, [r7, #6]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e05e      	b.n	800bfd0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	88fa      	ldrh	r2, [r7, #6]
 800bf1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	88fa      	ldrh	r2, [r7, #6]
 800bf24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2221      	movs	r2, #33	@ 0x21
 800bf34:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d027      	beq.n	800bf8e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf42:	4a25      	ldr	r2, [pc, #148]	@ (800bfd8 <HAL_UART_Transmit_DMA+0xec>)
 800bf44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf4a:	4a24      	ldr	r2, [pc, #144]	@ (800bfdc <HAL_UART_Transmit_DMA+0xf0>)
 800bf4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf52:	4a23      	ldr	r2, [pc, #140]	@ (800bfe0 <HAL_UART_Transmit_DMA+0xf4>)
 800bf54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf66:	4619      	mov	r1, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3328      	adds	r3, #40	@ 0x28
 800bf6e:	461a      	mov	r2, r3
 800bf70:	88fb      	ldrh	r3, [r7, #6]
 800bf72:	f7fa ff41 	bl	8006df8 <HAL_DMA_Start_IT>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d008      	beq.n	800bf8e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2210      	movs	r2, #16
 800bf80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2220      	movs	r2, #32
 800bf88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e020      	b.n	800bfd0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2240      	movs	r2, #64	@ 0x40
 800bf94:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	e853 3f00 	ldrex	r3, [r3]
 800bfa4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfac:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3308      	adds	r3, #8
 800bfb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfb6:	623a      	str	r2, [r7, #32]
 800bfb8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfba:	69f9      	ldr	r1, [r7, #28]
 800bfbc:	6a3a      	ldr	r2, [r7, #32]
 800bfbe:	e841 2300 	strex	r3, r2, [r1]
 800bfc2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1e5      	bne.n	800bf96 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	e000      	b.n	800bfd0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800bfce:	2302      	movs	r3, #2
  }
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3728      	adds	r7, #40	@ 0x28
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	0800d1e1 	.word	0x0800d1e1
 800bfdc:	0800d27b 	.word	0x0800d27b
 800bfe0:	0800d401 	.word	0x0800d401

0800bfe4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08a      	sub	sp, #40	@ 0x28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	4613      	mov	r3, r2
 800bff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bff8:	2b20      	cmp	r3, #32
 800bffa:	d137      	bne.n	800c06c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <HAL_UART_Receive_DMA+0x24>
 800c002:	88fb      	ldrh	r3, [r7, #6]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	e030      	b.n	800c06e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a18      	ldr	r2, [pc, #96]	@ (800c078 <HAL_UART_Receive_DMA+0x94>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d01f      	beq.n	800c05c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c026:	2b00      	cmp	r3, #0
 800c028:	d018      	beq.n	800c05c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	e853 3f00 	ldrex	r3, [r3]
 800c036:	613b      	str	r3, [r7, #16]
   return(result);
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c03e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	461a      	mov	r2, r3
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	623b      	str	r3, [r7, #32]
 800c04a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04c:	69f9      	ldr	r1, [r7, #28]
 800c04e:	6a3a      	ldr	r2, [r7, #32]
 800c050:	e841 2300 	strex	r3, r2, [r1]
 800c054:	61bb      	str	r3, [r7, #24]
   return(result);
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e6      	bne.n	800c02a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c05c:	88fb      	ldrh	r3, [r7, #6]
 800c05e:	461a      	mov	r2, r3
 800c060:	68b9      	ldr	r1, [r7, #8]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f000 ff92 	bl	800cf8c <UART_Start_Receive_DMA>
 800c068:	4603      	mov	r3, r0
 800c06a:	e000      	b.n	800c06e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c06c:	2302      	movs	r3, #2
  }
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3728      	adds	r7, #40	@ 0x28
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	40008000 	.word	0x40008000

0800c07c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b0ba      	sub	sp, #232	@ 0xe8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c0a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c0a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c0b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d115      	bne.n	800c0e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0bc:	f003 0320 	and.w	r3, r3, #32
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00f      	beq.n	800c0e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0c8:	f003 0320 	and.w	r3, r3, #32
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d009      	beq.n	800c0e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 82ae 	beq.w	800c636 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
      }
      return;
 800c0e2:	e2a8      	b.n	800c636 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c0e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 8117 	beq.w	800c31c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c0ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c0fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c0fe:	4b85      	ldr	r3, [pc, #532]	@ (800c314 <HAL_UART_IRQHandler+0x298>)
 800c100:	4013      	ands	r3, r2
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 810a 	beq.w	800c31c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	2b00      	cmp	r3, #0
 800c112:	d011      	beq.n	800c138 <HAL_UART_IRQHandler+0xbc>
 800c114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00b      	beq.n	800c138 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2201      	movs	r2, #1
 800c126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c12e:	f043 0201 	orr.w	r2, r3, #1
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c13c:	f003 0302 	and.w	r3, r3, #2
 800c140:	2b00      	cmp	r3, #0
 800c142:	d011      	beq.n	800c168 <HAL_UART_IRQHandler+0xec>
 800c144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00b      	beq.n	800c168 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2202      	movs	r2, #2
 800c156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c15e:	f043 0204 	orr.w	r2, r3, #4
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c16c:	f003 0304 	and.w	r3, r3, #4
 800c170:	2b00      	cmp	r3, #0
 800c172:	d011      	beq.n	800c198 <HAL_UART_IRQHandler+0x11c>
 800c174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00b      	beq.n	800c198 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2204      	movs	r2, #4
 800c186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c18e:	f043 0202 	orr.w	r2, r3, #2
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c19c:	f003 0308 	and.w	r3, r3, #8
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d017      	beq.n	800c1d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1a8:	f003 0320 	and.w	r3, r3, #32
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d105      	bne.n	800c1bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c1b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00b      	beq.n	800c1d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2208      	movs	r2, #8
 800c1c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1ca:	f043 0208 	orr.w	r2, r3, #8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d012      	beq.n	800c206 <HAL_UART_IRQHandler+0x18a>
 800c1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00c      	beq.n	800c206 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1fc:	f043 0220 	orr.w	r2, r3, #32
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 8214 	beq.w	800c63a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00d      	beq.n	800c23a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c222:	f003 0320 	and.w	r3, r3, #32
 800c226:	2b00      	cmp	r3, #0
 800c228:	d007      	beq.n	800c23a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c240:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c24e:	2b40      	cmp	r3, #64	@ 0x40
 800c250:	d005      	beq.n	800c25e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c256:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d04f      	beq.n	800c2fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 ff5a 	bl	800d118 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c26e:	2b40      	cmp	r3, #64	@ 0x40
 800c270:	d141      	bne.n	800c2f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3308      	adds	r3, #8
 800c278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c280:	e853 3f00 	ldrex	r3, [r3]
 800c284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c28c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3308      	adds	r3, #8
 800c29a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c29e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c2a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c2aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c2ae:	e841 2300 	strex	r3, r2, [r1]
 800c2b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c2b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1d9      	bne.n	800c272 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d013      	beq.n	800c2ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2ca:	4a13      	ldr	r2, [pc, #76]	@ (800c318 <HAL_UART_IRQHandler+0x29c>)
 800c2cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fa fe2e 	bl	8006f34 <HAL_DMA_Abort_IT>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d017      	beq.n	800c30e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ec:	e00f      	b.n	800c30e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f9cc 	bl	800c68c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f4:	e00b      	b.n	800c30e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f9c8 	bl	800c68c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2fc:	e007      	b.n	800c30e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f9c4 	bl	800c68c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c30c:	e195      	b.n	800c63a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c30e:	bf00      	nop
    return;
 800c310:	e193      	b.n	800c63a <HAL_UART_IRQHandler+0x5be>
 800c312:	bf00      	nop
 800c314:	04000120 	.word	0x04000120
 800c318:	0800d47f 	.word	0x0800d47f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c320:	2b01      	cmp	r3, #1
 800c322:	f040 814e 	bne.w	800c5c2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c32a:	f003 0310 	and.w	r3, r3, #16
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 8147 	beq.w	800c5c2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c338:	f003 0310 	and.w	r3, r3, #16
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 8140 	beq.w	800c5c2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2210      	movs	r2, #16
 800c348:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c354:	2b40      	cmp	r3, #64	@ 0x40
 800c356:	f040 80b8 	bne.w	800c4ca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c366:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 8167 	beq.w	800c63e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c37a:	429a      	cmp	r2, r3
 800c37c:	f080 815f 	bcs.w	800c63e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c386:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	2b00      	cmp	r3, #0
 800c398:	f040 8086 	bne.w	800c4a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c3a8:	e853 3f00 	ldrex	r3, [r3]
 800c3ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c3b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c3b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c3c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c3ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c3d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c3d6:	e841 2300 	strex	r3, r2, [r1]
 800c3da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c3de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1da      	bne.n	800c39c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3f0:	e853 3f00 	ldrex	r3, [r3]
 800c3f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c3f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3f8:	f023 0301 	bic.w	r3, r3, #1
 800c3fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3308      	adds	r3, #8
 800c406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c40a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c40e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c410:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c412:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c416:	e841 2300 	strex	r3, r2, [r1]
 800c41a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c41c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1e1      	bne.n	800c3e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3308      	adds	r3, #8
 800c428:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c42c:	e853 3f00 	ldrex	r3, [r3]
 800c430:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3308      	adds	r3, #8
 800c442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c446:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c448:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c44c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e3      	bne.n	800c422 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2220      	movs	r2, #32
 800c45e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c470:	e853 3f00 	ldrex	r3, [r3]
 800c474:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c478:	f023 0310 	bic.w	r3, r3, #16
 800c47c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	461a      	mov	r2, r3
 800c486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c48a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c48c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c490:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c492:	e841 2300 	strex	r3, r2, [r1]
 800c496:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1e4      	bne.n	800c468 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fa fd08 	bl	8006eb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f8ec 	bl	800c6a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c4c8:	e0b9      	b.n	800c63e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 80ab 	beq.w	800c642 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800c4ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f000 80a6 	beq.w	800c642 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fe:	e853 3f00 	ldrex	r3, [r3]
 800c502:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c506:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c50a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c518:	647b      	str	r3, [r7, #68]	@ 0x44
 800c51a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c51e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c520:	e841 2300 	strex	r3, r2, [r1]
 800c524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e4      	bne.n	800c4f6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3308      	adds	r3, #8
 800c532:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c536:	e853 3f00 	ldrex	r3, [r3]
 800c53a:	623b      	str	r3, [r7, #32]
   return(result);
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	f023 0301 	bic.w	r3, r3, #1
 800c542:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3308      	adds	r3, #8
 800c54c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c550:	633a      	str	r2, [r7, #48]	@ 0x30
 800c552:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c554:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c558:	e841 2300 	strex	r3, r2, [r1]
 800c55c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1e3      	bne.n	800c52c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2220      	movs	r2, #32
 800c568:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	60fb      	str	r3, [r7, #12]
   return(result);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f023 0310 	bic.w	r3, r3, #16
 800c58c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	461a      	mov	r2, r3
 800c596:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c59a:	61fb      	str	r3, [r7, #28]
 800c59c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	69b9      	ldr	r1, [r7, #24]
 800c5a0:	69fa      	ldr	r2, [r7, #28]
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	617b      	str	r3, [r7, #20]
   return(result);
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e4      	bne.n	800c578 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f870 	bl	800c6a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5c0:	e03f      	b.n	800c642 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00e      	beq.n	800c5ec <HAL_UART_IRQHandler+0x570>
 800c5ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d008      	beq.n	800c5ec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c5e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 ff8a 	bl	800d4fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5ea:	e02d      	b.n	800c648 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00e      	beq.n	800c616 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c600:	2b00      	cmp	r3, #0
 800c602:	d008      	beq.n	800c616 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01c      	beq.n	800c646 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	4798      	blx	r3
    }
    return;
 800c614:	e017      	b.n	800c646 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d012      	beq.n	800c648 <HAL_UART_IRQHandler+0x5cc>
 800c622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00c      	beq.n	800c648 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 ff3b 	bl	800d4aa <UART_EndTransmit_IT>
    return;
 800c634:	e008      	b.n	800c648 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c636:	bf00      	nop
 800c638:	e006      	b.n	800c648 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c63a:	bf00      	nop
 800c63c:	e004      	b.n	800c648 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c63e:	bf00      	nop
 800c640:	e002      	b.n	800c648 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c642:	bf00      	nop
 800c644:	e000      	b.n	800c648 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c646:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c648:	37e8      	adds	r7, #232	@ 0xe8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop

0800c650 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6ac:	bf00      	nop
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6bc:	b08a      	sub	sp, #40	@ 0x28
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	431a      	orrs	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	69db      	ldr	r3, [r3, #28]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	4ba4      	ldr	r3, [pc, #656]	@ (800c978 <UART_SetConfig+0x2c0>)
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	6812      	ldr	r2, [r2, #0]
 800c6ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6f0:	430b      	orrs	r3, r1
 800c6f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	68da      	ldr	r2, [r3, #12]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	430a      	orrs	r2, r1
 800c708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a99      	ldr	r2, [pc, #612]	@ (800c97c <UART_SetConfig+0x2c4>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d004      	beq.n	800c724 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c720:	4313      	orrs	r3, r2
 800c722:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c734:	430a      	orrs	r2, r1
 800c736:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a90      	ldr	r2, [pc, #576]	@ (800c980 <UART_SetConfig+0x2c8>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d126      	bne.n	800c790 <UART_SetConfig+0xd8>
 800c742:	4b90      	ldr	r3, [pc, #576]	@ (800c984 <UART_SetConfig+0x2cc>)
 800c744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c748:	f003 0303 	and.w	r3, r3, #3
 800c74c:	2b03      	cmp	r3, #3
 800c74e:	d81b      	bhi.n	800c788 <UART_SetConfig+0xd0>
 800c750:	a201      	add	r2, pc, #4	@ (adr r2, 800c758 <UART_SetConfig+0xa0>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c769 	.word	0x0800c769
 800c75c:	0800c779 	.word	0x0800c779
 800c760:	0800c771 	.word	0x0800c771
 800c764:	0800c781 	.word	0x0800c781
 800c768:	2301      	movs	r3, #1
 800c76a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c76e:	e116      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c770:	2302      	movs	r3, #2
 800c772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c776:	e112      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c778:	2304      	movs	r3, #4
 800c77a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c77e:	e10e      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c780:	2308      	movs	r3, #8
 800c782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c786:	e10a      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c788:	2310      	movs	r3, #16
 800c78a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c78e:	e106      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a7c      	ldr	r2, [pc, #496]	@ (800c988 <UART_SetConfig+0x2d0>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d138      	bne.n	800c80c <UART_SetConfig+0x154>
 800c79a:	4b7a      	ldr	r3, [pc, #488]	@ (800c984 <UART_SetConfig+0x2cc>)
 800c79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7a0:	f003 030c 	and.w	r3, r3, #12
 800c7a4:	2b0c      	cmp	r3, #12
 800c7a6:	d82d      	bhi.n	800c804 <UART_SetConfig+0x14c>
 800c7a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b0 <UART_SetConfig+0xf8>)
 800c7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ae:	bf00      	nop
 800c7b0:	0800c7e5 	.word	0x0800c7e5
 800c7b4:	0800c805 	.word	0x0800c805
 800c7b8:	0800c805 	.word	0x0800c805
 800c7bc:	0800c805 	.word	0x0800c805
 800c7c0:	0800c7f5 	.word	0x0800c7f5
 800c7c4:	0800c805 	.word	0x0800c805
 800c7c8:	0800c805 	.word	0x0800c805
 800c7cc:	0800c805 	.word	0x0800c805
 800c7d0:	0800c7ed 	.word	0x0800c7ed
 800c7d4:	0800c805 	.word	0x0800c805
 800c7d8:	0800c805 	.word	0x0800c805
 800c7dc:	0800c805 	.word	0x0800c805
 800c7e0:	0800c7fd 	.word	0x0800c7fd
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c7ea:	e0d8      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c7f2:	e0d4      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c7f4:	2304      	movs	r3, #4
 800c7f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c7fa:	e0d0      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c7fc:	2308      	movs	r3, #8
 800c7fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c802:	e0cc      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c804:	2310      	movs	r3, #16
 800c806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c80a:	e0c8      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a5e      	ldr	r2, [pc, #376]	@ (800c98c <UART_SetConfig+0x2d4>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d125      	bne.n	800c862 <UART_SetConfig+0x1aa>
 800c816:	4b5b      	ldr	r3, [pc, #364]	@ (800c984 <UART_SetConfig+0x2cc>)
 800c818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c81c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c820:	2b30      	cmp	r3, #48	@ 0x30
 800c822:	d016      	beq.n	800c852 <UART_SetConfig+0x19a>
 800c824:	2b30      	cmp	r3, #48	@ 0x30
 800c826:	d818      	bhi.n	800c85a <UART_SetConfig+0x1a2>
 800c828:	2b20      	cmp	r3, #32
 800c82a:	d00a      	beq.n	800c842 <UART_SetConfig+0x18a>
 800c82c:	2b20      	cmp	r3, #32
 800c82e:	d814      	bhi.n	800c85a <UART_SetConfig+0x1a2>
 800c830:	2b00      	cmp	r3, #0
 800c832:	d002      	beq.n	800c83a <UART_SetConfig+0x182>
 800c834:	2b10      	cmp	r3, #16
 800c836:	d008      	beq.n	800c84a <UART_SetConfig+0x192>
 800c838:	e00f      	b.n	800c85a <UART_SetConfig+0x1a2>
 800c83a:	2300      	movs	r3, #0
 800c83c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c840:	e0ad      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c842:	2302      	movs	r3, #2
 800c844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c848:	e0a9      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c84a:	2304      	movs	r3, #4
 800c84c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c850:	e0a5      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c852:	2308      	movs	r3, #8
 800c854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c858:	e0a1      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c85a:	2310      	movs	r3, #16
 800c85c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c860:	e09d      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a4a      	ldr	r2, [pc, #296]	@ (800c990 <UART_SetConfig+0x2d8>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d125      	bne.n	800c8b8 <UART_SetConfig+0x200>
 800c86c:	4b45      	ldr	r3, [pc, #276]	@ (800c984 <UART_SetConfig+0x2cc>)
 800c86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c872:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c876:	2bc0      	cmp	r3, #192	@ 0xc0
 800c878:	d016      	beq.n	800c8a8 <UART_SetConfig+0x1f0>
 800c87a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c87c:	d818      	bhi.n	800c8b0 <UART_SetConfig+0x1f8>
 800c87e:	2b80      	cmp	r3, #128	@ 0x80
 800c880:	d00a      	beq.n	800c898 <UART_SetConfig+0x1e0>
 800c882:	2b80      	cmp	r3, #128	@ 0x80
 800c884:	d814      	bhi.n	800c8b0 <UART_SetConfig+0x1f8>
 800c886:	2b00      	cmp	r3, #0
 800c888:	d002      	beq.n	800c890 <UART_SetConfig+0x1d8>
 800c88a:	2b40      	cmp	r3, #64	@ 0x40
 800c88c:	d008      	beq.n	800c8a0 <UART_SetConfig+0x1e8>
 800c88e:	e00f      	b.n	800c8b0 <UART_SetConfig+0x1f8>
 800c890:	2300      	movs	r3, #0
 800c892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c896:	e082      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c898:	2302      	movs	r3, #2
 800c89a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c89e:	e07e      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c8a0:	2304      	movs	r3, #4
 800c8a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8a6:	e07a      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c8a8:	2308      	movs	r3, #8
 800c8aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8ae:	e076      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c8b0:	2310      	movs	r3, #16
 800c8b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8b6:	e072      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a35      	ldr	r2, [pc, #212]	@ (800c994 <UART_SetConfig+0x2dc>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d12a      	bne.n	800c918 <UART_SetConfig+0x260>
 800c8c2:	4b30      	ldr	r3, [pc, #192]	@ (800c984 <UART_SetConfig+0x2cc>)
 800c8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8d0:	d01a      	beq.n	800c908 <UART_SetConfig+0x250>
 800c8d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8d6:	d81b      	bhi.n	800c910 <UART_SetConfig+0x258>
 800c8d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8dc:	d00c      	beq.n	800c8f8 <UART_SetConfig+0x240>
 800c8de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8e2:	d815      	bhi.n	800c910 <UART_SetConfig+0x258>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d003      	beq.n	800c8f0 <UART_SetConfig+0x238>
 800c8e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8ec:	d008      	beq.n	800c900 <UART_SetConfig+0x248>
 800c8ee:	e00f      	b.n	800c910 <UART_SetConfig+0x258>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8f6:	e052      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8fe:	e04e      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c900:	2304      	movs	r3, #4
 800c902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c906:	e04a      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c908:	2308      	movs	r3, #8
 800c90a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c90e:	e046      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c910:	2310      	movs	r3, #16
 800c912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c916:	e042      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a17      	ldr	r2, [pc, #92]	@ (800c97c <UART_SetConfig+0x2c4>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d13a      	bne.n	800c998 <UART_SetConfig+0x2e0>
 800c922:	4b18      	ldr	r3, [pc, #96]	@ (800c984 <UART_SetConfig+0x2cc>)
 800c924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c928:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c92c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c930:	d01a      	beq.n	800c968 <UART_SetConfig+0x2b0>
 800c932:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c936:	d81b      	bhi.n	800c970 <UART_SetConfig+0x2b8>
 800c938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c93c:	d00c      	beq.n	800c958 <UART_SetConfig+0x2a0>
 800c93e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c942:	d815      	bhi.n	800c970 <UART_SetConfig+0x2b8>
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <UART_SetConfig+0x298>
 800c948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c94c:	d008      	beq.n	800c960 <UART_SetConfig+0x2a8>
 800c94e:	e00f      	b.n	800c970 <UART_SetConfig+0x2b8>
 800c950:	2300      	movs	r3, #0
 800c952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c956:	e022      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c958:	2302      	movs	r3, #2
 800c95a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c95e:	e01e      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c960:	2304      	movs	r3, #4
 800c962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c966:	e01a      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c968:	2308      	movs	r3, #8
 800c96a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c96e:	e016      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c970:	2310      	movs	r3, #16
 800c972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c976:	e012      	b.n	800c99e <UART_SetConfig+0x2e6>
 800c978:	efff69f3 	.word	0xefff69f3
 800c97c:	40008000 	.word	0x40008000
 800c980:	40013800 	.word	0x40013800
 800c984:	40021000 	.word	0x40021000
 800c988:	40004400 	.word	0x40004400
 800c98c:	40004800 	.word	0x40004800
 800c990:	40004c00 	.word	0x40004c00
 800c994:	40005000 	.word	0x40005000
 800c998:	2310      	movs	r3, #16
 800c99a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a9f      	ldr	r2, [pc, #636]	@ (800cc20 <UART_SetConfig+0x568>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d17a      	bne.n	800ca9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c9a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c9ac:	2b08      	cmp	r3, #8
 800c9ae:	d824      	bhi.n	800c9fa <UART_SetConfig+0x342>
 800c9b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b8 <UART_SetConfig+0x300>)
 800c9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b6:	bf00      	nop
 800c9b8:	0800c9dd 	.word	0x0800c9dd
 800c9bc:	0800c9fb 	.word	0x0800c9fb
 800c9c0:	0800c9e5 	.word	0x0800c9e5
 800c9c4:	0800c9fb 	.word	0x0800c9fb
 800c9c8:	0800c9eb 	.word	0x0800c9eb
 800c9cc:	0800c9fb 	.word	0x0800c9fb
 800c9d0:	0800c9fb 	.word	0x0800c9fb
 800c9d4:	0800c9fb 	.word	0x0800c9fb
 800c9d8:	0800c9f3 	.word	0x0800c9f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9dc:	f7fe f972 	bl	800acc4 <HAL_RCC_GetPCLK1Freq>
 800c9e0:	61f8      	str	r0, [r7, #28]
        break;
 800c9e2:	e010      	b.n	800ca06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9e4:	4b8f      	ldr	r3, [pc, #572]	@ (800cc24 <UART_SetConfig+0x56c>)
 800c9e6:	61fb      	str	r3, [r7, #28]
        break;
 800c9e8:	e00d      	b.n	800ca06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9ea:	f7fe f8d3 	bl	800ab94 <HAL_RCC_GetSysClockFreq>
 800c9ee:	61f8      	str	r0, [r7, #28]
        break;
 800c9f0:	e009      	b.n	800ca06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9f6:	61fb      	str	r3, [r7, #28]
        break;
 800c9f8:	e005      	b.n	800ca06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ca04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 80fb 	beq.w	800cc04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	685a      	ldr	r2, [r3, #4]
 800ca12:	4613      	mov	r3, r2
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	4413      	add	r3, r2
 800ca18:	69fa      	ldr	r2, [r7, #28]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d305      	bcc.n	800ca2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ca24:	69fa      	ldr	r2, [r7, #28]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d903      	bls.n	800ca32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ca30:	e0e8      	b.n	800cc04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	2200      	movs	r2, #0
 800ca36:	461c      	mov	r4, r3
 800ca38:	4615      	mov	r5, r2
 800ca3a:	f04f 0200 	mov.w	r2, #0
 800ca3e:	f04f 0300 	mov.w	r3, #0
 800ca42:	022b      	lsls	r3, r5, #8
 800ca44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ca48:	0222      	lsls	r2, r4, #8
 800ca4a:	68f9      	ldr	r1, [r7, #12]
 800ca4c:	6849      	ldr	r1, [r1, #4]
 800ca4e:	0849      	lsrs	r1, r1, #1
 800ca50:	2000      	movs	r0, #0
 800ca52:	4688      	mov	r8, r1
 800ca54:	4681      	mov	r9, r0
 800ca56:	eb12 0a08 	adds.w	sl, r2, r8
 800ca5a:	eb43 0b09 	adc.w	fp, r3, r9
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	603b      	str	r3, [r7, #0]
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca6c:	4650      	mov	r0, sl
 800ca6e:	4659      	mov	r1, fp
 800ca70:	f7f3 fe00 	bl	8000674 <__aeabi_uldivmod>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4613      	mov	r3, r2
 800ca7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca82:	d308      	bcc.n	800ca96 <UART_SetConfig+0x3de>
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca8a:	d204      	bcs.n	800ca96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	69ba      	ldr	r2, [r7, #24]
 800ca92:	60da      	str	r2, [r3, #12]
 800ca94:	e0b6      	b.n	800cc04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ca9c:	e0b2      	b.n	800cc04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	69db      	ldr	r3, [r3, #28]
 800caa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800caa6:	d15e      	bne.n	800cb66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800caa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800caac:	2b08      	cmp	r3, #8
 800caae:	d828      	bhi.n	800cb02 <UART_SetConfig+0x44a>
 800cab0:	a201      	add	r2, pc, #4	@ (adr r2, 800cab8 <UART_SetConfig+0x400>)
 800cab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab6:	bf00      	nop
 800cab8:	0800cadd 	.word	0x0800cadd
 800cabc:	0800cae5 	.word	0x0800cae5
 800cac0:	0800caed 	.word	0x0800caed
 800cac4:	0800cb03 	.word	0x0800cb03
 800cac8:	0800caf3 	.word	0x0800caf3
 800cacc:	0800cb03 	.word	0x0800cb03
 800cad0:	0800cb03 	.word	0x0800cb03
 800cad4:	0800cb03 	.word	0x0800cb03
 800cad8:	0800cafb 	.word	0x0800cafb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cadc:	f7fe f8f2 	bl	800acc4 <HAL_RCC_GetPCLK1Freq>
 800cae0:	61f8      	str	r0, [r7, #28]
        break;
 800cae2:	e014      	b.n	800cb0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cae4:	f7fe f904 	bl	800acf0 <HAL_RCC_GetPCLK2Freq>
 800cae8:	61f8      	str	r0, [r7, #28]
        break;
 800caea:	e010      	b.n	800cb0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800caec:	4b4d      	ldr	r3, [pc, #308]	@ (800cc24 <UART_SetConfig+0x56c>)
 800caee:	61fb      	str	r3, [r7, #28]
        break;
 800caf0:	e00d      	b.n	800cb0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800caf2:	f7fe f84f 	bl	800ab94 <HAL_RCC_GetSysClockFreq>
 800caf6:	61f8      	str	r0, [r7, #28]
        break;
 800caf8:	e009      	b.n	800cb0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cafa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cafe:	61fb      	str	r3, [r7, #28]
        break;
 800cb00:	e005      	b.n	800cb0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800cb02:	2300      	movs	r3, #0
 800cb04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cb06:	2301      	movs	r3, #1
 800cb08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cb0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d077      	beq.n	800cc04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	005a      	lsls	r2, r3, #1
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	085b      	lsrs	r3, r3, #1
 800cb1e:	441a      	add	r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	2b0f      	cmp	r3, #15
 800cb2e:	d916      	bls.n	800cb5e <UART_SetConfig+0x4a6>
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb36:	d212      	bcs.n	800cb5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	f023 030f 	bic.w	r3, r3, #15
 800cb40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	085b      	lsrs	r3, r3, #1
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f003 0307 	and.w	r3, r3, #7
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	8afb      	ldrh	r3, [r7, #22]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	8afa      	ldrh	r2, [r7, #22]
 800cb5a:	60da      	str	r2, [r3, #12]
 800cb5c:	e052      	b.n	800cc04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cb64:	e04e      	b.n	800cc04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cb6a:	2b08      	cmp	r3, #8
 800cb6c:	d827      	bhi.n	800cbbe <UART_SetConfig+0x506>
 800cb6e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb74 <UART_SetConfig+0x4bc>)
 800cb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb74:	0800cb99 	.word	0x0800cb99
 800cb78:	0800cba1 	.word	0x0800cba1
 800cb7c:	0800cba9 	.word	0x0800cba9
 800cb80:	0800cbbf 	.word	0x0800cbbf
 800cb84:	0800cbaf 	.word	0x0800cbaf
 800cb88:	0800cbbf 	.word	0x0800cbbf
 800cb8c:	0800cbbf 	.word	0x0800cbbf
 800cb90:	0800cbbf 	.word	0x0800cbbf
 800cb94:	0800cbb7 	.word	0x0800cbb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb98:	f7fe f894 	bl	800acc4 <HAL_RCC_GetPCLK1Freq>
 800cb9c:	61f8      	str	r0, [r7, #28]
        break;
 800cb9e:	e014      	b.n	800cbca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cba0:	f7fe f8a6 	bl	800acf0 <HAL_RCC_GetPCLK2Freq>
 800cba4:	61f8      	str	r0, [r7, #28]
        break;
 800cba6:	e010      	b.n	800cbca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cba8:	4b1e      	ldr	r3, [pc, #120]	@ (800cc24 <UART_SetConfig+0x56c>)
 800cbaa:	61fb      	str	r3, [r7, #28]
        break;
 800cbac:	e00d      	b.n	800cbca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbae:	f7fd fff1 	bl	800ab94 <HAL_RCC_GetSysClockFreq>
 800cbb2:	61f8      	str	r0, [r7, #28]
        break;
 800cbb4:	e009      	b.n	800cbca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbba:	61fb      	str	r3, [r7, #28]
        break;
 800cbbc:	e005      	b.n	800cbca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cbc8:	bf00      	nop
    }

    if (pclk != 0U)
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d019      	beq.n	800cc04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	085a      	lsrs	r2, r3, #1
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	441a      	add	r2, r3
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	2b0f      	cmp	r3, #15
 800cbe8:	d909      	bls.n	800cbfe <UART_SetConfig+0x546>
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbf0:	d205      	bcs.n	800cbfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	60da      	str	r2, [r3, #12]
 800cbfc:	e002      	b.n	800cc04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cc10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3728      	adds	r7, #40	@ 0x28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc1e:	bf00      	nop
 800cc20:	40008000 	.word	0x40008000
 800cc24:	00f42400 	.word	0x00f42400

0800cc28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc34:	f003 0308 	and.w	r3, r3, #8
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00a      	beq.n	800cc52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	430a      	orrs	r2, r1
 800cc50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00a      	beq.n	800cc74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	430a      	orrs	r2, r1
 800cc72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc78:	f003 0302 	and.w	r3, r3, #2
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00a      	beq.n	800cc96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	430a      	orrs	r2, r1
 800cc94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9a:	f003 0304 	and.w	r3, r3, #4
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00a      	beq.n	800ccb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	430a      	orrs	r2, r1
 800ccb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccbc:	f003 0310 	and.w	r3, r3, #16
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00a      	beq.n	800ccda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	430a      	orrs	r2, r1
 800ccd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccde:	f003 0320 	and.w	r3, r3, #32
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00a      	beq.n	800ccfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d01a      	beq.n	800cd3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	430a      	orrs	r2, r1
 800cd1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd26:	d10a      	bne.n	800cd3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	430a      	orrs	r2, r1
 800cd3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00a      	beq.n	800cd60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	430a      	orrs	r2, r1
 800cd5e:	605a      	str	r2, [r3, #4]
  }
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b098      	sub	sp, #96	@ 0x60
 800cd70:	af02      	add	r7, sp, #8
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd7c:	f7f8 f8de 	bl	8004f3c <HAL_GetTick>
 800cd80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f003 0308 	and.w	r3, r3, #8
 800cd8c:	2b08      	cmp	r3, #8
 800cd8e:	d12e      	bne.n	800cdee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd94:	9300      	str	r3, [sp, #0]
 800cd96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f88c 	bl	800cebc <UART_WaitOnFlagUntilTimeout>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d021      	beq.n	800cdee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb2:	e853 3f00 	ldrex	r3, [r3]
 800cdb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdbe:	653b      	str	r3, [r7, #80]	@ 0x50
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdd0:	e841 2300 	strex	r3, r2, [r1]
 800cdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1e6      	bne.n	800cdaa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2220      	movs	r2, #32
 800cde0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdea:	2303      	movs	r3, #3
 800cdec:	e062      	b.n	800ceb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 0304 	and.w	r3, r3, #4
 800cdf8:	2b04      	cmp	r3, #4
 800cdfa:	d149      	bne.n	800ce90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce04:	2200      	movs	r2, #0
 800ce06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f856 	bl	800cebc <UART_WaitOnFlagUntilTimeout>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d03c      	beq.n	800ce90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1e:	e853 3f00 	ldrex	r3, [r3]
 800ce22:	623b      	str	r3, [r7, #32]
   return(result);
 800ce24:	6a3b      	ldr	r3, [r7, #32]
 800ce26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	461a      	mov	r2, r3
 800ce32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce34:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce3c:	e841 2300 	strex	r3, r2, [r1]
 800ce40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1e6      	bne.n	800ce16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	3308      	adds	r3, #8
 800ce4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	e853 3f00 	ldrex	r3, [r3]
 800ce56:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f023 0301 	bic.w	r3, r3, #1
 800ce5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	3308      	adds	r3, #8
 800ce66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce68:	61fa      	str	r2, [r7, #28]
 800ce6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6c:	69b9      	ldr	r1, [r7, #24]
 800ce6e:	69fa      	ldr	r2, [r7, #28]
 800ce70:	e841 2300 	strex	r3, r2, [r1]
 800ce74:	617b      	str	r3, [r7, #20]
   return(result);
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1e5      	bne.n	800ce48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2220      	movs	r2, #32
 800ce80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e011      	b.n	800ceb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2220      	movs	r2, #32
 800ce94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3758      	adds	r7, #88	@ 0x58
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	603b      	str	r3, [r7, #0]
 800cec8:	4613      	mov	r3, r2
 800ceca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cecc:	e049      	b.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced4:	d045      	beq.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ced6:	f7f8 f831 	bl	8004f3c <HAL_GetTick>
 800ceda:	4602      	mov	r2, r0
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	69ba      	ldr	r2, [r7, #24]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d302      	bcc.n	800ceec <UART_WaitOnFlagUntilTimeout+0x30>
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e048      	b.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 0304 	and.w	r3, r3, #4
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d031      	beq.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	69db      	ldr	r3, [r3, #28]
 800cf04:	f003 0308 	and.w	r3, r3, #8
 800cf08:	2b08      	cmp	r3, #8
 800cf0a:	d110      	bne.n	800cf2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2208      	movs	r2, #8
 800cf12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f000 f8ff 	bl	800d118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e029      	b.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	69db      	ldr	r3, [r3, #28]
 800cf34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf3c:	d111      	bne.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 f8e5 	bl	800d118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2220      	movs	r2, #32
 800cf52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e00f      	b.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69da      	ldr	r2, [r3, #28]
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	bf0c      	ite	eq
 800cf72:	2301      	moveq	r3, #1
 800cf74:	2300      	movne	r3, #0
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	461a      	mov	r2, r3
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d0a6      	beq.n	800cece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
	...

0800cf8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b096      	sub	sp, #88	@ 0x58
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	4613      	mov	r3, r2
 800cf98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	88fa      	ldrh	r2, [r7, #6]
 800cfa4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2222      	movs	r2, #34	@ 0x22
 800cfb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d028      	beq.n	800d012 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfc4:	4a3e      	ldr	r2, [pc, #248]	@ (800d0c0 <UART_Start_Receive_DMA+0x134>)
 800cfc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfcc:	4a3d      	ldr	r2, [pc, #244]	@ (800d0c4 <UART_Start_Receive_DMA+0x138>)
 800cfce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfd4:	4a3c      	ldr	r2, [pc, #240]	@ (800d0c8 <UART_Start_Receive_DMA+0x13c>)
 800cfd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfdc:	2200      	movs	r2, #0
 800cfde:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	3324      	adds	r3, #36	@ 0x24
 800cfea:	4619      	mov	r1, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cff0:	461a      	mov	r2, r3
 800cff2:	88fb      	ldrh	r3, [r7, #6]
 800cff4:	f7f9 ff00 	bl	8006df8 <HAL_DMA_Start_IT>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d009      	beq.n	800d012 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2210      	movs	r2, #16
 800d002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2220      	movs	r2, #32
 800d00a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	e051      	b.n	800d0b6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d018      	beq.n	800d04c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d022:	e853 3f00 	ldrex	r3, [r3]
 800d026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d02e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	461a      	mov	r2, r3
 800d036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d03a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d03e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d040:	e841 2300 	strex	r3, r2, [r1]
 800d044:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1e6      	bne.n	800d01a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	3308      	adds	r3, #8
 800d052:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d056:	e853 3f00 	ldrex	r3, [r3]
 800d05a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05e:	f043 0301 	orr.w	r3, r3, #1
 800d062:	653b      	str	r3, [r7, #80]	@ 0x50
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3308      	adds	r3, #8
 800d06a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d06c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d06e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d070:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d072:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d074:	e841 2300 	strex	r3, r2, [r1]
 800d078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1e5      	bne.n	800d04c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3308      	adds	r3, #8
 800d086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	e853 3f00 	ldrex	r3, [r3]
 800d08e:	613b      	str	r3, [r7, #16]
   return(result);
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3308      	adds	r3, #8
 800d09e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0a0:	623a      	str	r2, [r7, #32]
 800d0a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a4:	69f9      	ldr	r1, [r7, #28]
 800d0a6:	6a3a      	ldr	r2, [r7, #32]
 800d0a8:	e841 2300 	strex	r3, r2, [r1]
 800d0ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1e5      	bne.n	800d080 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3758      	adds	r7, #88	@ 0x58
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	0800d297 	.word	0x0800d297
 800d0c4:	0800d3c3 	.word	0x0800d3c3
 800d0c8:	0800d401 	.word	0x0800d401

0800d0cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b089      	sub	sp, #36	@ 0x24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	e853 3f00 	ldrex	r3, [r3]
 800d0e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d0e8:	61fb      	str	r3, [r7, #28]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	61bb      	str	r3, [r7, #24]
 800d0f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f6:	6979      	ldr	r1, [r7, #20]
 800d0f8:	69ba      	ldr	r2, [r7, #24]
 800d0fa:	e841 2300 	strex	r3, r2, [r1]
 800d0fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1e6      	bne.n	800d0d4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2220      	movs	r2, #32
 800d10a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d10c:	bf00      	nop
 800d10e:	3724      	adds	r7, #36	@ 0x24
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d118:	b480      	push	{r7}
 800d11a:	b095      	sub	sp, #84	@ 0x54
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d128:	e853 3f00 	ldrex	r3, [r3]
 800d12c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d134:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	461a      	mov	r2, r3
 800d13c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d13e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d140:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d142:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d144:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d146:	e841 2300 	strex	r3, r2, [r1]
 800d14a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1e6      	bne.n	800d120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	3308      	adds	r3, #8
 800d158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	e853 3f00 	ldrex	r3, [r3]
 800d160:	61fb      	str	r3, [r7, #28]
   return(result);
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	f023 0301 	bic.w	r3, r3, #1
 800d168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	3308      	adds	r3, #8
 800d170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d174:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d17a:	e841 2300 	strex	r3, r2, [r1]
 800d17e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1e5      	bne.n	800d152 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d118      	bne.n	800d1c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	e853 3f00 	ldrex	r3, [r3]
 800d19a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	f023 0310 	bic.w	r3, r3, #16
 800d1a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b0:	6979      	ldr	r1, [r7, #20]
 800d1b2:	69ba      	ldr	r2, [r7, #24]
 800d1b4:	e841 2300 	strex	r3, r2, [r1]
 800d1b8:	613b      	str	r3, [r7, #16]
   return(result);
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1e6      	bne.n	800d18e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2220      	movs	r2, #32
 800d1c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d1d4:	bf00      	nop
 800d1d6:	3754      	adds	r7, #84	@ 0x54
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b090      	sub	sp, #64	@ 0x40
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f003 0320 	and.w	r3, r3, #32
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d137      	bne.n	800d26c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d1fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1fe:	2200      	movs	r2, #0
 800d200:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	3308      	adds	r3, #8
 800d20a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20e:	e853 3f00 	ldrex	r3, [r3]
 800d212:	623b      	str	r3, [r7, #32]
   return(result);
 800d214:	6a3b      	ldr	r3, [r7, #32]
 800d216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d21a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3308      	adds	r3, #8
 800d222:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d224:	633a      	str	r2, [r7, #48]	@ 0x30
 800d226:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d228:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d22c:	e841 2300 	strex	r3, r2, [r1]
 800d230:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1e5      	bne.n	800d204 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	e853 3f00 	ldrex	r3, [r3]
 800d244:	60fb      	str	r3, [r7, #12]
   return(result);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d24c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d256:	61fb      	str	r3, [r7, #28]
 800d258:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25a:	69b9      	ldr	r1, [r7, #24]
 800d25c:	69fa      	ldr	r2, [r7, #28]
 800d25e:	e841 2300 	strex	r3, r2, [r1]
 800d262:	617b      	str	r3, [r7, #20]
   return(result);
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1e6      	bne.n	800d238 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d26a:	e002      	b.n	800d272 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d26c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d26e:	f7ff f9ef 	bl	800c650 <HAL_UART_TxCpltCallback>
}
 800d272:	bf00      	nop
 800d274:	3740      	adds	r7, #64	@ 0x40
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b084      	sub	sp, #16
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d286:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f7ff f9eb 	bl	800c664 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d28e:	bf00      	nop
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b09c      	sub	sp, #112	@ 0x70
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 0320 	and.w	r3, r3, #32
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d171      	bne.n	800d396 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d2b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2c2:	e853 3f00 	ldrex	r3, [r3]
 800d2c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d2c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d2de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2e0:	e841 2300 	strex	r3, r2, [r1]
 800d2e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d1e6      	bne.n	800d2ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	3308      	adds	r3, #8
 800d2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f6:	e853 3f00 	ldrex	r3, [r3]
 800d2fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2fe:	f023 0301 	bic.w	r3, r3, #1
 800d302:	667b      	str	r3, [r7, #100]	@ 0x64
 800d304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3308      	adds	r3, #8
 800d30a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d30c:	647a      	str	r2, [r7, #68]	@ 0x44
 800d30e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d314:	e841 2300 	strex	r3, r2, [r1]
 800d318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1e5      	bne.n	800d2ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3308      	adds	r3, #8
 800d326:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32a:	e853 3f00 	ldrex	r3, [r3]
 800d32e:	623b      	str	r3, [r7, #32]
   return(result);
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d336:	663b      	str	r3, [r7, #96]	@ 0x60
 800d338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3308      	adds	r3, #8
 800d33e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d340:	633a      	str	r2, [r7, #48]	@ 0x30
 800d342:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d344:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d348:	e841 2300 	strex	r3, r2, [r1]
 800d34c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1e5      	bne.n	800d320 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d356:	2220      	movs	r2, #32
 800d358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d35c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d35e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d360:	2b01      	cmp	r3, #1
 800d362:	d118      	bne.n	800d396 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	e853 3f00 	ldrex	r3, [r3]
 800d370:	60fb      	str	r3, [r7, #12]
   return(result);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f023 0310 	bic.w	r3, r3, #16
 800d378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d37a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	461a      	mov	r2, r3
 800d380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d382:	61fb      	str	r3, [r7, #28]
 800d384:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	69b9      	ldr	r1, [r7, #24]
 800d388:	69fa      	ldr	r2, [r7, #28]
 800d38a:	e841 2300 	strex	r3, r2, [r1]
 800d38e:	617b      	str	r3, [r7, #20]
   return(result);
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1e6      	bne.n	800d364 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d398:	2200      	movs	r2, #0
 800d39a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d39c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d39e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d107      	bne.n	800d3b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d3ae:	f7ff f977 	bl	800c6a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d3b2:	e002      	b.n	800d3ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d3b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d3b6:	f7f6 fe57 	bl	8004068 <HAL_UART_RxCpltCallback>
}
 800d3ba:	bf00      	nop
 800d3bc:	3770      	adds	r7, #112	@ 0x70
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d109      	bne.n	800d3f2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d3e4:	085b      	lsrs	r3, r3, #1
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	f7ff f958 	bl	800c6a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d3f0:	e002      	b.n	800d3f8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f7ff f940 	bl	800c678 <HAL_UART_RxHalfCpltCallback>
}
 800d3f8:	bf00      	nop
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d40c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d412:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d41a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d426:	2b80      	cmp	r3, #128	@ 0x80
 800d428:	d109      	bne.n	800d43e <UART_DMAError+0x3e>
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	2b21      	cmp	r3, #33	@ 0x21
 800d42e:	d106      	bne.n	800d43e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	2200      	movs	r2, #0
 800d434:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d438:	6978      	ldr	r0, [r7, #20]
 800d43a:	f7ff fe47 	bl	800d0cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d448:	2b40      	cmp	r3, #64	@ 0x40
 800d44a:	d109      	bne.n	800d460 <UART_DMAError+0x60>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b22      	cmp	r3, #34	@ 0x22
 800d450:	d106      	bne.n	800d460 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2200      	movs	r2, #0
 800d456:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d45a:	6978      	ldr	r0, [r7, #20]
 800d45c:	f7ff fe5c 	bl	800d118 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d466:	f043 0210 	orr.w	r2, r3, #16
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d470:	6978      	ldr	r0, [r7, #20]
 800d472:	f7ff f90b 	bl	800c68c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d476:	bf00      	nop
 800d478:	3718      	adds	r7, #24
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d48a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f7ff f8f5 	bl	800c68c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4a2:	bf00      	nop
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b088      	sub	sp, #32
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	e853 3f00 	ldrex	r3, [r3]
 800d4be:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4c6:	61fb      	str	r3, [r7, #28]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	61bb      	str	r3, [r7, #24]
 800d4d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d4:	6979      	ldr	r1, [r7, #20]
 800d4d6:	69ba      	ldr	r2, [r7, #24]
 800d4d8:	e841 2300 	strex	r3, r2, [r1]
 800d4dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1e6      	bne.n	800d4b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2220      	movs	r2, #32
 800d4e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff f8ad 	bl	800c650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4f6:	bf00      	nop
 800d4f8:	3720      	adds	r7, #32
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b083      	sub	sp, #12
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d506:	bf00      	nop
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <memset>:
 800d512:	4402      	add	r2, r0
 800d514:	4603      	mov	r3, r0
 800d516:	4293      	cmp	r3, r2
 800d518:	d100      	bne.n	800d51c <memset+0xa>
 800d51a:	4770      	bx	lr
 800d51c:	f803 1b01 	strb.w	r1, [r3], #1
 800d520:	e7f9      	b.n	800d516 <memset+0x4>
	...

0800d524 <__libc_init_array>:
 800d524:	b570      	push	{r4, r5, r6, lr}
 800d526:	4d0d      	ldr	r5, [pc, #52]	@ (800d55c <__libc_init_array+0x38>)
 800d528:	4c0d      	ldr	r4, [pc, #52]	@ (800d560 <__libc_init_array+0x3c>)
 800d52a:	1b64      	subs	r4, r4, r5
 800d52c:	10a4      	asrs	r4, r4, #2
 800d52e:	2600      	movs	r6, #0
 800d530:	42a6      	cmp	r6, r4
 800d532:	d109      	bne.n	800d548 <__libc_init_array+0x24>
 800d534:	4d0b      	ldr	r5, [pc, #44]	@ (800d564 <__libc_init_array+0x40>)
 800d536:	4c0c      	ldr	r4, [pc, #48]	@ (800d568 <__libc_init_array+0x44>)
 800d538:	f000 f818 	bl	800d56c <_init>
 800d53c:	1b64      	subs	r4, r4, r5
 800d53e:	10a4      	asrs	r4, r4, #2
 800d540:	2600      	movs	r6, #0
 800d542:	42a6      	cmp	r6, r4
 800d544:	d105      	bne.n	800d552 <__libc_init_array+0x2e>
 800d546:	bd70      	pop	{r4, r5, r6, pc}
 800d548:	f855 3b04 	ldr.w	r3, [r5], #4
 800d54c:	4798      	blx	r3
 800d54e:	3601      	adds	r6, #1
 800d550:	e7ee      	b.n	800d530 <__libc_init_array+0xc>
 800d552:	f855 3b04 	ldr.w	r3, [r5], #4
 800d556:	4798      	blx	r3
 800d558:	3601      	adds	r6, #1
 800d55a:	e7f2      	b.n	800d542 <__libc_init_array+0x1e>
 800d55c:	0800d60c 	.word	0x0800d60c
 800d560:	0800d60c 	.word	0x0800d60c
 800d564:	0800d60c 	.word	0x0800d60c
 800d568:	0800d62c 	.word	0x0800d62c

0800d56c <_init>:
 800d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56e:	bf00      	nop
 800d570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d572:	bc08      	pop	{r3}
 800d574:	469e      	mov	lr, r3
 800d576:	4770      	bx	lr

0800d578 <_fini>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	bf00      	nop
 800d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d57e:	bc08      	pop	{r3}
 800d580:	469e      	mov	lr, r3
 800d582:	4770      	bx	lr
