
Calibracion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d46c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800d618  0800d618  0000e618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d698  0800d698  0000f440  2**0
                  CONTENTS
  4 .ARM          00000008  0800d698  0800d698  0000e698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6a0  0800d6a0  0000f440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800d6a0  0800d6a0  0000e6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6c0  0800d6c0  0000e6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  0800d6c4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  20000440  0800db04  0000f440  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001284  0800db04  00010284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f440  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053b2c  00000000  00000000  0000f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007de5  00000000  00000000  00062f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  0006ad88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170c  00000000  00000000  0006cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033c18  00000000  00000000  0006e254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002df43  00000000  00000000  000a1e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124931  00000000  00000000  000cfdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f46e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dfc  00000000  00000000  001f4724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001fc520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000440 	.word	0x20000440
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800d600 	.word	0x0800d600

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000444 	.word	0x20000444
 80001e8:	0800d600 	.word	0x0800d600

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__gedf2>:
 8000564:	f04f 3cff 	mov.w	ip, #4294967295
 8000568:	e006      	b.n	8000578 <__cmpdf2+0x4>
 800056a:	bf00      	nop

0800056c <__ledf2>:
 800056c:	f04f 0c01 	mov.w	ip, #1
 8000570:	e002      	b.n	8000578 <__cmpdf2+0x4>
 8000572:	bf00      	nop

08000574 <__cmpdf2>:
 8000574:	f04f 0c01 	mov.w	ip, #1
 8000578:	f84d cd04 	str.w	ip, [sp, #-4]!
 800057c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000588:	bf18      	it	ne
 800058a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800058e:	d01b      	beq.n	80005c8 <__cmpdf2+0x54>
 8000590:	b001      	add	sp, #4
 8000592:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000596:	bf0c      	ite	eq
 8000598:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800059c:	ea91 0f03 	teqne	r1, r3
 80005a0:	bf02      	ittt	eq
 80005a2:	ea90 0f02 	teqeq	r0, r2
 80005a6:	2000      	moveq	r0, #0
 80005a8:	4770      	bxeq	lr
 80005aa:	f110 0f00 	cmn.w	r0, #0
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf58      	it	pl
 80005b4:	4299      	cmppl	r1, r3
 80005b6:	bf08      	it	eq
 80005b8:	4290      	cmpeq	r0, r2
 80005ba:	bf2c      	ite	cs
 80005bc:	17d8      	asrcs	r0, r3, #31
 80005be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005c2:	f040 0001 	orr.w	r0, r0, #1
 80005c6:	4770      	bx	lr
 80005c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005d0:	d102      	bne.n	80005d8 <__cmpdf2+0x64>
 80005d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005d6:	d107      	bne.n	80005e8 <__cmpdf2+0x74>
 80005d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e0:	d1d6      	bne.n	8000590 <__cmpdf2+0x1c>
 80005e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005e6:	d0d3      	beq.n	8000590 <__cmpdf2+0x1c>
 80005e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_cdrcmple>:
 80005f0:	4684      	mov	ip, r0
 80005f2:	4610      	mov	r0, r2
 80005f4:	4662      	mov	r2, ip
 80005f6:	468c      	mov	ip, r1
 80005f8:	4619      	mov	r1, r3
 80005fa:	4663      	mov	r3, ip
 80005fc:	e000      	b.n	8000600 <__aeabi_cdcmpeq>
 80005fe:	bf00      	nop

08000600 <__aeabi_cdcmpeq>:
 8000600:	b501      	push	{r0, lr}
 8000602:	f7ff ffb7 	bl	8000574 <__cmpdf2>
 8000606:	2800      	cmp	r0, #0
 8000608:	bf48      	it	mi
 800060a:	f110 0f00 	cmnmi.w	r0, #0
 800060e:	bd01      	pop	{r0, pc}

08000610 <__aeabi_dcmpeq>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff fff4 	bl	8000600 <__aeabi_cdcmpeq>
 8000618:	bf0c      	ite	eq
 800061a:	2001      	moveq	r0, #1
 800061c:	2000      	movne	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmplt>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffea 	bl	8000600 <__aeabi_cdcmpeq>
 800062c:	bf34      	ite	cc
 800062e:	2001      	movcc	r0, #1
 8000630:	2000      	movcs	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmple>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffe0 	bl	8000600 <__aeabi_cdcmpeq>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpge>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffce 	bl	80005f0 <__aeabi_cdrcmple>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpgt>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffc4 	bl	80005f0 <__aeabi_cdrcmple>
 8000668:	bf34      	ite	cc
 800066a:	2001      	movcc	r0, #1
 800066c:	2000      	movcs	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_uldivmod>:
 8000674:	b953      	cbnz	r3, 800068c <__aeabi_uldivmod+0x18>
 8000676:	b94a      	cbnz	r2, 800068c <__aeabi_uldivmod+0x18>
 8000678:	2900      	cmp	r1, #0
 800067a:	bf08      	it	eq
 800067c:	2800      	cmpeq	r0, #0
 800067e:	bf1c      	itt	ne
 8000680:	f04f 31ff 	movne.w	r1, #4294967295
 8000684:	f04f 30ff 	movne.w	r0, #4294967295
 8000688:	f000 b96a 	b.w	8000960 <__aeabi_idiv0>
 800068c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000690:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000694:	f000 f806 	bl	80006a4 <__udivmoddi4>
 8000698:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a0:	b004      	add	sp, #16
 80006a2:	4770      	bx	lr

080006a4 <__udivmoddi4>:
 80006a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a8:	9d08      	ldr	r5, [sp, #32]
 80006aa:	460c      	mov	r4, r1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d14e      	bne.n	800074e <__udivmoddi4+0xaa>
 80006b0:	4694      	mov	ip, r2
 80006b2:	458c      	cmp	ip, r1
 80006b4:	4686      	mov	lr, r0
 80006b6:	fab2 f282 	clz	r2, r2
 80006ba:	d962      	bls.n	8000782 <__udivmoddi4+0xde>
 80006bc:	b14a      	cbz	r2, 80006d2 <__udivmoddi4+0x2e>
 80006be:	f1c2 0320 	rsb	r3, r2, #32
 80006c2:	4091      	lsls	r1, r2
 80006c4:	fa20 f303 	lsr.w	r3, r0, r3
 80006c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80006cc:	4319      	orrs	r1, r3
 80006ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80006d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006d6:	fa1f f68c 	uxth.w	r6, ip
 80006da:	fbb1 f4f7 	udiv	r4, r1, r7
 80006de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006e2:	fb07 1114 	mls	r1, r7, r4, r1
 80006e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ea:	fb04 f106 	mul.w	r1, r4, r6
 80006ee:	4299      	cmp	r1, r3
 80006f0:	d90a      	bls.n	8000708 <__udivmoddi4+0x64>
 80006f2:	eb1c 0303 	adds.w	r3, ip, r3
 80006f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80006fa:	f080 8112 	bcs.w	8000922 <__udivmoddi4+0x27e>
 80006fe:	4299      	cmp	r1, r3
 8000700:	f240 810f 	bls.w	8000922 <__udivmoddi4+0x27e>
 8000704:	3c02      	subs	r4, #2
 8000706:	4463      	add	r3, ip
 8000708:	1a59      	subs	r1, r3, r1
 800070a:	fa1f f38e 	uxth.w	r3, lr
 800070e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000712:	fb07 1110 	mls	r1, r7, r0, r1
 8000716:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071a:	fb00 f606 	mul.w	r6, r0, r6
 800071e:	429e      	cmp	r6, r3
 8000720:	d90a      	bls.n	8000738 <__udivmoddi4+0x94>
 8000722:	eb1c 0303 	adds.w	r3, ip, r3
 8000726:	f100 31ff 	add.w	r1, r0, #4294967295
 800072a:	f080 80fc 	bcs.w	8000926 <__udivmoddi4+0x282>
 800072e:	429e      	cmp	r6, r3
 8000730:	f240 80f9 	bls.w	8000926 <__udivmoddi4+0x282>
 8000734:	4463      	add	r3, ip
 8000736:	3802      	subs	r0, #2
 8000738:	1b9b      	subs	r3, r3, r6
 800073a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800073e:	2100      	movs	r1, #0
 8000740:	b11d      	cbz	r5, 800074a <__udivmoddi4+0xa6>
 8000742:	40d3      	lsrs	r3, r2
 8000744:	2200      	movs	r2, #0
 8000746:	e9c5 3200 	strd	r3, r2, [r5]
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	428b      	cmp	r3, r1
 8000750:	d905      	bls.n	800075e <__udivmoddi4+0xba>
 8000752:	b10d      	cbz	r5, 8000758 <__udivmoddi4+0xb4>
 8000754:	e9c5 0100 	strd	r0, r1, [r5]
 8000758:	2100      	movs	r1, #0
 800075a:	4608      	mov	r0, r1
 800075c:	e7f5      	b.n	800074a <__udivmoddi4+0xa6>
 800075e:	fab3 f183 	clz	r1, r3
 8000762:	2900      	cmp	r1, #0
 8000764:	d146      	bne.n	80007f4 <__udivmoddi4+0x150>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d302      	bcc.n	8000770 <__udivmoddi4+0xcc>
 800076a:	4290      	cmp	r0, r2
 800076c:	f0c0 80f0 	bcc.w	8000950 <__udivmoddi4+0x2ac>
 8000770:	1a86      	subs	r6, r0, r2
 8000772:	eb64 0303 	sbc.w	r3, r4, r3
 8000776:	2001      	movs	r0, #1
 8000778:	2d00      	cmp	r5, #0
 800077a:	d0e6      	beq.n	800074a <__udivmoddi4+0xa6>
 800077c:	e9c5 6300 	strd	r6, r3, [r5]
 8000780:	e7e3      	b.n	800074a <__udivmoddi4+0xa6>
 8000782:	2a00      	cmp	r2, #0
 8000784:	f040 8090 	bne.w	80008a8 <__udivmoddi4+0x204>
 8000788:	eba1 040c 	sub.w	r4, r1, ip
 800078c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000790:	fa1f f78c 	uxth.w	r7, ip
 8000794:	2101      	movs	r1, #1
 8000796:	fbb4 f6f8 	udiv	r6, r4, r8
 800079a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800079e:	fb08 4416 	mls	r4, r8, r6, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb07 f006 	mul.w	r0, r7, r6
 80007aa:	4298      	cmp	r0, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x11c>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x11a>
 80007b8:	4298      	cmp	r0, r3
 80007ba:	f200 80cd 	bhi.w	8000958 <__udivmoddi4+0x2b4>
 80007be:	4626      	mov	r6, r4
 80007c0:	1a1c      	subs	r4, r3, r0
 80007c2:	fa1f f38e 	uxth.w	r3, lr
 80007c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ca:	fb08 4410 	mls	r4, r8, r0, r4
 80007ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007d2:	fb00 f707 	mul.w	r7, r0, r7
 80007d6:	429f      	cmp	r7, r3
 80007d8:	d908      	bls.n	80007ec <__udivmoddi4+0x148>
 80007da:	eb1c 0303 	adds.w	r3, ip, r3
 80007de:	f100 34ff 	add.w	r4, r0, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0x146>
 80007e4:	429f      	cmp	r7, r3
 80007e6:	f200 80b0 	bhi.w	800094a <__udivmoddi4+0x2a6>
 80007ea:	4620      	mov	r0, r4
 80007ec:	1bdb      	subs	r3, r3, r7
 80007ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007f2:	e7a5      	b.n	8000740 <__udivmoddi4+0x9c>
 80007f4:	f1c1 0620 	rsb	r6, r1, #32
 80007f8:	408b      	lsls	r3, r1
 80007fa:	fa22 f706 	lsr.w	r7, r2, r6
 80007fe:	431f      	orrs	r7, r3
 8000800:	fa20 fc06 	lsr.w	ip, r0, r6
 8000804:	fa04 f301 	lsl.w	r3, r4, r1
 8000808:	ea43 030c 	orr.w	r3, r3, ip
 800080c:	40f4      	lsrs	r4, r6
 800080e:	fa00 f801 	lsl.w	r8, r0, r1
 8000812:	0c38      	lsrs	r0, r7, #16
 8000814:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000818:	fbb4 fef0 	udiv	lr, r4, r0
 800081c:	fa1f fc87 	uxth.w	ip, r7
 8000820:	fb00 441e 	mls	r4, r0, lr, r4
 8000824:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000828:	fb0e f90c 	mul.w	r9, lr, ip
 800082c:	45a1      	cmp	r9, r4
 800082e:	fa02 f201 	lsl.w	r2, r2, r1
 8000832:	d90a      	bls.n	800084a <__udivmoddi4+0x1a6>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f10e 3aff 	add.w	sl, lr, #4294967295
 800083a:	f080 8084 	bcs.w	8000946 <__udivmoddi4+0x2a2>
 800083e:	45a1      	cmp	r9, r4
 8000840:	f240 8081 	bls.w	8000946 <__udivmoddi4+0x2a2>
 8000844:	f1ae 0e02 	sub.w	lr, lr, #2
 8000848:	443c      	add	r4, r7
 800084a:	eba4 0409 	sub.w	r4, r4, r9
 800084e:	fa1f f983 	uxth.w	r9, r3
 8000852:	fbb4 f3f0 	udiv	r3, r4, r0
 8000856:	fb00 4413 	mls	r4, r0, r3, r4
 800085a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800085e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000862:	45a4      	cmp	ip, r4
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x1d2>
 8000866:	193c      	adds	r4, r7, r4
 8000868:	f103 30ff 	add.w	r0, r3, #4294967295
 800086c:	d267      	bcs.n	800093e <__udivmoddi4+0x29a>
 800086e:	45a4      	cmp	ip, r4
 8000870:	d965      	bls.n	800093e <__udivmoddi4+0x29a>
 8000872:	3b02      	subs	r3, #2
 8000874:	443c      	add	r4, r7
 8000876:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800087a:	fba0 9302 	umull	r9, r3, r0, r2
 800087e:	eba4 040c 	sub.w	r4, r4, ip
 8000882:	429c      	cmp	r4, r3
 8000884:	46ce      	mov	lr, r9
 8000886:	469c      	mov	ip, r3
 8000888:	d351      	bcc.n	800092e <__udivmoddi4+0x28a>
 800088a:	d04e      	beq.n	800092a <__udivmoddi4+0x286>
 800088c:	b155      	cbz	r5, 80008a4 <__udivmoddi4+0x200>
 800088e:	ebb8 030e 	subs.w	r3, r8, lr
 8000892:	eb64 040c 	sbc.w	r4, r4, ip
 8000896:	fa04 f606 	lsl.w	r6, r4, r6
 800089a:	40cb      	lsrs	r3, r1
 800089c:	431e      	orrs	r6, r3
 800089e:	40cc      	lsrs	r4, r1
 80008a0:	e9c5 6400 	strd	r6, r4, [r5]
 80008a4:	2100      	movs	r1, #0
 80008a6:	e750      	b.n	800074a <__udivmoddi4+0xa6>
 80008a8:	f1c2 0320 	rsb	r3, r2, #32
 80008ac:	fa20 f103 	lsr.w	r1, r0, r3
 80008b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b4:	fa24 f303 	lsr.w	r3, r4, r3
 80008b8:	4094      	lsls	r4, r2
 80008ba:	430c      	orrs	r4, r1
 80008bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3110 	mls	r1, r8, r0, r3
 80008d0:	0c23      	lsrs	r3, r4, #16
 80008d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008d6:	fb00 f107 	mul.w	r1, r0, r7
 80008da:	4299      	cmp	r1, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x24c>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80008e6:	d22c      	bcs.n	8000942 <__udivmoddi4+0x29e>
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d92a      	bls.n	8000942 <__udivmoddi4+0x29e>
 80008ec:	3802      	subs	r0, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1a5b      	subs	r3, r3, r1
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80008f8:	fb08 3311 	mls	r3, r8, r1, r3
 80008fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000900:	fb01 f307 	mul.w	r3, r1, r7
 8000904:	42a3      	cmp	r3, r4
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x276>
 8000908:	eb1c 0404 	adds.w	r4, ip, r4
 800090c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000910:	d213      	bcs.n	800093a <__udivmoddi4+0x296>
 8000912:	42a3      	cmp	r3, r4
 8000914:	d911      	bls.n	800093a <__udivmoddi4+0x296>
 8000916:	3902      	subs	r1, #2
 8000918:	4464      	add	r4, ip
 800091a:	1ae4      	subs	r4, r4, r3
 800091c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000920:	e739      	b.n	8000796 <__udivmoddi4+0xf2>
 8000922:	4604      	mov	r4, r0
 8000924:	e6f0      	b.n	8000708 <__udivmoddi4+0x64>
 8000926:	4608      	mov	r0, r1
 8000928:	e706      	b.n	8000738 <__udivmoddi4+0x94>
 800092a:	45c8      	cmp	r8, r9
 800092c:	d2ae      	bcs.n	800088c <__udivmoddi4+0x1e8>
 800092e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000932:	eb63 0c07 	sbc.w	ip, r3, r7
 8000936:	3801      	subs	r0, #1
 8000938:	e7a8      	b.n	800088c <__udivmoddi4+0x1e8>
 800093a:	4631      	mov	r1, r6
 800093c:	e7ed      	b.n	800091a <__udivmoddi4+0x276>
 800093e:	4603      	mov	r3, r0
 8000940:	e799      	b.n	8000876 <__udivmoddi4+0x1d2>
 8000942:	4630      	mov	r0, r6
 8000944:	e7d4      	b.n	80008f0 <__udivmoddi4+0x24c>
 8000946:	46d6      	mov	lr, sl
 8000948:	e77f      	b.n	800084a <__udivmoddi4+0x1a6>
 800094a:	4463      	add	r3, ip
 800094c:	3802      	subs	r0, #2
 800094e:	e74d      	b.n	80007ec <__udivmoddi4+0x148>
 8000950:	4606      	mov	r6, r0
 8000952:	4623      	mov	r3, r4
 8000954:	4608      	mov	r0, r1
 8000956:	e70f      	b.n	8000778 <__udivmoddi4+0xd4>
 8000958:	3e02      	subs	r6, #2
 800095a:	4463      	add	r3, ip
 800095c:	e730      	b.n	80007c0 <__udivmoddi4+0x11c>
 800095e:	bf00      	nop

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <_ZN15displayPhysical6enableEb>:

////////////
// ENABLE //
////////////

void displayPhysical::enable( bool onOff ){
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	if ( !onOff ){					//	Si esta apagado
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d003      	beq.n	8000984 <_ZN15displayPhysical6enableEb+0x20>
		this->flagEnable	= 0;	//	Deshabilita
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
	}
	else{							//	Si esta prendido
		this->flagEnable	= 1;	//	Habilita
	}
}
 8000982:	e002      	b.n	800098a <_ZN15displayPhysical6enableEb+0x26>
		this->flagEnable	= 1;	//	Habilita
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80009a6:	88fa      	ldrh	r2, [r7, #6]
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ae:	dc01      	bgt.n	80009b4 <_Z12bytestowritett+0x1e>
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	e003      	b.n	80009bc <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80009ba:	b29b      	uxth	r3, r3
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_Z12EEPROM_WritettPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af04      	add	r7, sp, #16
 80009ce:	60ba      	str	r2, [r7, #8]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	81fb      	strh	r3, [r7, #14]
 80009d6:	460b      	mov	r3, r1
 80009d8:	81bb      	strh	r3, [r7, #12]
 80009da:	4613      	mov	r3, r2
 80009dc:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80009de:	2306      	movs	r3, #6
 80009e0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80009e6:	88fa      	ldrh	r2, [r7, #6]
 80009e8:	89bb      	ldrh	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da00      	bge.n	80009f2 <_Z12EEPROM_WritettPht+0x2a>
 80009f0:	333f      	adds	r3, #63	@ 0x3f
 80009f2:	119b      	asrs	r3, r3, #6
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	4413      	add	r3, r2
 80009fa:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80009fc:	8b7a      	ldrh	r2, [r7, #26]
 80009fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	3301      	adds	r3, #1
 8000a06:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	e034      	b.n	8000a7c <_Z12EEPROM_WritettPht+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000a12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000a26:	89ba      	ldrh	r2, [r7, #12]
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffb2 	bl	8000996 <_Z12bytestowritett>
 8000a32:	4603      	mov	r3, r0
 8000a34:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	8af9      	ldrh	r1, [r7, #22]
 8000a3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a42:	9202      	str	r2, [sp, #8]
 8000a44:	8aba      	ldrh	r2, [r7, #20]
 8000a46:	9201      	str	r2, [sp, #4]
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	21a0      	movs	r1, #160	@ 0xa0
 8000a50:	480f      	ldr	r0, [pc, #60]	@ (8000a90 <_Z12EEPROM_WritettPht+0xc8>)
 8000a52:	f007 f93b 	bl	8007ccc <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a58:	3301      	adds	r3, #1
 8000a5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	8abb      	ldrh	r3, [r7, #20]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000a68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000a6a:	8abb      	ldrh	r3, [r7, #20]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	84bb      	strh	r3, [r7, #36]	@ 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000a70:	2005      	movs	r0, #5
 8000a72:	f004 fab9 	bl	8004fe8 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	8b3b      	ldrh	r3, [r7, #24]
 8000a7e:	6a3a      	ldr	r2, [r7, #32]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbc6      	blt.n	8000a12 <_Z12EEPROM_WritettPht+0x4a>
	}
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200007d8 	.word	0x200007d8

08000a94 <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af04      	add	r7, sp, #16
 8000a9a:	60ba      	str	r2, [r7, #8]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	81fb      	strh	r3, [r7, #14]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	81bb      	strh	r3, [r7, #12]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000aaa:	2306      	movs	r3, #6
 8000aac:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	89bb      	ldrh	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	da00      	bge.n	8000abe <_Z11EEPROM_ReadttPht+0x2a>
 8000abc:	333f      	adds	r3, #63	@ 0x3f
 8000abe:	119b      	asrs	r3, r3, #6
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000ac8:	8b7a      	ldrh	r2, [r7, #26]
 8000aca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	e031      	b.n	8000b42 <_Z11EEPROM_ReadttPht+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000ade:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000af2:	89ba      	ldrh	r2, [r7, #12]
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff4c 	bl	8000996 <_Z12bytestowritett>
 8000afe:	4603      	mov	r3, r0
 8000b00:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	4413      	add	r3, r2
 8000b08:	8af9      	ldrh	r1, [r7, #22]
 8000b0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b0e:	9202      	str	r2, [sp, #8]
 8000b10:	8aba      	ldrh	r2, [r7, #20]
 8000b12:	9201      	str	r2, [sp, #4]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2302      	movs	r3, #2
 8000b18:	460a      	mov	r2, r1
 8000b1a:	21a0      	movs	r1, #160	@ 0xa0
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <_Z11EEPROM_ReadttPht+0xc0>)
 8000b1e:	f007 f9e9 	bl	8007ef4 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000b22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b24:	3301      	adds	r3, #1
 8000b26:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000b2c:	88fa      	ldrh	r2, [r7, #6]
 8000b2e:	8abb      	ldrh	r3, [r7, #20]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000b34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000b36:	8abb      	ldrh	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	8b3b      	ldrh	r3, [r7, #24]
 8000b44:	6a3a      	ldr	r2, [r7, #32]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbc9      	blt.n	8000ade <_Z11EEPROM_ReadttPht+0x4a>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200007d8 	.word	0x200007d8

08000b58 <_Z3appv>:

/////////
// APP //
/////////

void app(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	warming();
 8000b5c:	f000 fb3c 	bl	80011d8 <_Z7warmingv>
	stability();
 8000b60:	f000 f8de 	bl	8000d20 <_Z9stabilityv>
	process();
 8000b64:	f000 f9e4 	bl	8000f30 <_Z7processv>
	displayCalib();
 8000b68:	f000 f802 	bl	8000b70 <_Z12displayCalibv>
	//appContent();
	//appLora();
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_Z12displayCalibv>:

void displayCalib(){
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	switch(stateProcess){
 8000b74:	4b65      	ldr	r3, [pc, #404]	@ (8000d0c <_Z12displayCalibv+0x19c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	f200 80c0 	bhi.w	8000cfe <_Z12displayCalibv+0x18e>
 8000b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b84 <_Z12displayCalibv+0x14>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000ba9 	.word	0x08000ba9
 8000b88:	08000bbd 	.word	0x08000bbd
 8000b8c:	08000be9 	.word	0x08000be9
 8000b90:	08000bfd 	.word	0x08000bfd
 8000b94:	08000c11 	.word	0x08000c11
 8000b98:	08000c3d 	.word	0x08000c3d
 8000b9c:	08000c69 	.word	0x08000c69
 8000ba0:	08000ca7 	.word	0x08000ca7
 8000ba4:	08000cd3 	.word	0x08000cd3
	case 0:
		flagLedOn	= 0;
 8000ba8:	4b59      	ldr	r3, [pc, #356]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 1;
 8000bae:	4b59      	ldr	r3, [pc, #356]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000bb4:	4b58      	ldr	r3, [pc, #352]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
		break;
 8000bba:	e0a1      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 1:
		flagLedOn	= 0;
 8000bbc:	4b54      	ldr	r3, [pc, #336]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000bc2:	4b54      	ldr	r3, [pc, #336]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000bc8:	4b53      	ldr	r3, [pc, #332]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'H';
 8000bce:	4b53      	ldr	r3, [pc, #332]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000bd0:	2248      	movs	r2, #72	@ 0x48
 8000bd2:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'E';
 8000bd4:	4b51      	ldr	r3, [pc, #324]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000bd6:	2245      	movs	r2, #69	@ 0x45
 8000bd8:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'A';
 8000bda:	4b50      	ldr	r3, [pc, #320]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000bdc:	2241      	movs	r2, #65	@ 0x41
 8000bde:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'T';
 8000be0:	4b4e      	ldr	r3, [pc, #312]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000be2:	2254      	movs	r2, #84	@ 0x54
 8000be4:	70da      	strb	r2, [r3, #3]
		break;
 8000be6:	e08b      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 2:
		flagLedOn	= 0;
 8000be8:	4b49      	ldr	r3, [pc, #292]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000bee:	4b49      	ldr	r3, [pc, #292]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000bf4:	4b48      	ldr	r3, [pc, #288]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
		break;
 8000bfa:	e081      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 3:
		flagLedOn	= 0;
 8000bfc:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c02:	4b44      	ldr	r3, [pc, #272]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c08:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
		break;
 8000c0e:	e077      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 4:
		flagLedOn	= 1;
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c16:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'E';
 8000c22:	4b3e      	ldr	r3, [pc, #248]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c24:	2245      	movs	r2, #69	@ 0x45
 8000c26:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'R';
 8000c28:	4b3c      	ldr	r3, [pc, #240]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c2a:	2252      	movs	r2, #82	@ 0x52
 8000c2c:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'R';
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c30:	2252      	movs	r2, #82	@ 0x52
 8000c32:	709a      	strb	r2, [r3, #2]
		calibContent[3] = ' ';
 8000c34:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c36:	2220      	movs	r2, #32
 8000c38:	70da      	strb	r2, [r3, #3]
		break;
 8000c3a:	e061      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 5:
		flagLedOn	= 0;
 8000c3c:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 1;
 8000c42:	4b34      	ldr	r3, [pc, #208]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000c48:	4b33      	ldr	r3, [pc, #204]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'S';
 8000c4e:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c50:	2253      	movs	r2, #83	@ 0x53
 8000c52:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'T';
 8000c54:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c56:	2254      	movs	r2, #84	@ 0x54
 8000c58:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'A';
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c5c:	2241      	movs	r2, #65	@ 0x41
 8000c5e:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'R';
 8000c60:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c62:	2252      	movs	r2, #82	@ 0x52
 8000c64:	70da      	strb	r2, [r3, #3]
		break;
 8000c66:	e04b      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 6:
		flagLedOn	= 0;
 8000c68:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c74:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]

		flagLedOn	= 0;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c80:	4b24      	ldr	r3, [pc, #144]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c86:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'C';
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c8e:	2243      	movs	r2, #67	@ 0x43
 8000c90:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'A';
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c94:	2241      	movs	r2, #65	@ 0x41
 8000c96:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'L';
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000c9a:	224c      	movs	r2, #76	@ 0x4c
 8000c9c:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'I';
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000ca0:	2249      	movs	r2, #73	@ 0x49
 8000ca2:	70da      	strb	r2, [r3, #3]
		break;
 8000ca4:	e02c      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 7:
		flagLedOn	= 0;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'C';
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cba:	2243      	movs	r2, #67	@ 0x43
 8000cbc:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'A';
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cc0:	2241      	movs	r2, #65	@ 0x41
 8000cc2:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'L';
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cc6:	224c      	movs	r2, #76	@ 0x4c
 8000cc8:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'I';
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000ccc:	2249      	movs	r2, #73	@ 0x49
 8000cce:	70da      	strb	r2, [r3, #3]
		break;
 8000cd0:	e016      	b.n	8000d00 <_Z12displayCalibv+0x190>

	case 8:
		flagLedOn	= 1;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <_Z12displayCalibv+0x1a0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <_Z12displayCalibv+0x1a4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'O';
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000ce6:	224f      	movs	r2, #79	@ 0x4f
 8000ce8:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'K';
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cec:	224b      	movs	r2, #75	@ 0x4b
 8000cee:	705a      	strb	r2, [r3, #1]
		calibContent[2] = ' ';
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	709a      	strb	r2, [r3, #2]
		calibContent[3] = ' ';
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	70da      	strb	r2, [r3, #3]
		break;
 8000cfc:	e000      	b.n	8000d00 <_Z12displayCalibv+0x190>

	default:
		break;
 8000cfe:	bf00      	nop
	}
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2000046a 	.word	0x2000046a
 8000d10:	20000600 	.word	0x20000600
 8000d14:	20000601 	.word	0x20000601
 8000d18:	20000602 	.word	0x20000602
 8000d1c:	200004d0 	.word	0x200004d0

08000d20 <_Z9stabilityv>:

///////////////
// STABILITY //
///////////////

void stability(){
 8000d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	if ( stateAdc == 5 ){				// Si se toma una muestra
 8000d24:	4b74      	ldr	r3, [pc, #464]	@ (8000ef8 <_Z9stabilityv+0x1d8>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b05      	cmp	r3, #5
 8000d2a:	d113      	bne.n	8000d54 <_Z9stabilityv+0x34>
		alphaA_LP	= iir(alphaA);		// Inserta en filtro pasabajos
 8000d2c:	4b73      	ldr	r3, [pc, #460]	@ (8000efc <_Z9stabilityv+0x1dc>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fa9c 	bl	8001270 <_Z3iirs>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b70      	ldr	r3, [pc, #448]	@ (8000f00 <_Z9stabilityv+0x1e0>)
 8000d3e:	801a      	strh	r2, [r3, #0]
		alphaA_BP	= iir3(alphaA);		// Inserta en filtro pasabanda
 8000d40:	4b6e      	ldr	r3, [pc, #440]	@ (8000efc <_Z9stabilityv+0x1dc>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fb14 	bl	8001374 <_Z4iir3s>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b6c      	ldr	r3, [pc, #432]	@ (8000f04 <_Z9stabilityv+0x1e4>)
 8000d52:	601a      	str	r2, [r3, #0]
	}

	switch( stateStability ){
 8000d54:	4b6c      	ldr	r3, [pc, #432]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	f200 80ca 	bhi.w	8000ef2 <_Z9stabilityv+0x1d2>
 8000d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d64 <_Z9stabilityv+0x44>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000da1 	.word	0x08000da1
 8000d6c:	08000dcd 	.word	0x08000dcd
 8000d70:	08000e13 	.word	0x08000e13
 8000d74:	08000ecb 	.word	0x08000ecb
 8000d78:	08000edf 	.word	0x08000edf
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		flagFinishStab	= 0;
 8000d7c:	4b63      	ldr	r3, [pc, #396]	@ (8000f0c <_Z9stabilityv+0x1ec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
		flagStability	= 0;
 8000d82:	4b63      	ldr	r3, [pc, #396]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
		if ( flagStartStability ){	// Si se indica inciar
 8000d88:	4b62      	ldr	r3, [pc, #392]	@ (8000f14 <_Z9stabilityv+0x1f4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <_Z9stabilityv+0x78>
			stateStability	= 1;	// Para a S1
 8000d90:	4b5d      	ldr	r3, [pc, #372]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateStability	= 0;	// Queda en S0
		}
		break;
 8000d96:	e0ad      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
			stateStability	= 0;	// Queda en S0
 8000d98:	4b5b      	ldr	r3, [pc, #364]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
		break;
 8000d9e:	e0a9      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
	//////////////////////
	// S1 - WAIT A TIME //
	//////////////////////

	case 1:
		countStability++;						//
 8000da0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f18 <_Z9stabilityv+0x1f8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a5c      	ldr	r2, [pc, #368]	@ (8000f18 <_Z9stabilityv+0x1f8>)
 8000da8:	6013      	str	r3, [r2, #0]

		if (countStability >= limitStability ){	//
 8000daa:	4b5b      	ldr	r3, [pc, #364]	@ (8000f18 <_Z9stabilityv+0x1f8>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b5b      	ldr	r3, [pc, #364]	@ (8000f1c <_Z9stabilityv+0x1fc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d306      	bcc.n	8000dc4 <_Z9stabilityv+0xa4>
			countStability	= 0;				//
 8000db6:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <_Z9stabilityv+0x1f8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
			stateStability	= 2;				//
 8000dbc:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	701a      	strb	r2, [r3, #0]
		}
		else{									//
			stateStability	= 1;				//
		}
		break;
 8000dc2:	e097      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
			stateStability	= 1;				//
 8000dc4:	4b50      	ldr	r3, [pc, #320]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
		break;
 8000dca:	e093      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	////////////////////
	// S2 - SAVE DATA //
	////////////////////
	case 2:
		if ( stateAdc == 5 ){							// Si llega un dato
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef8 <_Z9stabilityv+0x1d8>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b05      	cmp	r3, #5
 8000dd2:	d10d      	bne.n	8000df0 <_Z9stabilityv+0xd0>
			bufferStabA[ countStability2 ]	= alphaA;	// Guarda valor bruto
 8000dd4:	4b52      	ldr	r3, [pc, #328]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b48      	ldr	r3, [pc, #288]	@ (8000efc <_Z9stabilityv+0x1dc>)
 8000ddc:	8819      	ldrh	r1, [r3, #0]
 8000dde:	4b51      	ldr	r3, [pc, #324]	@ (8000f24 <_Z9stabilityv+0x204>)
 8000de0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			countStability2++;							// Suma 1
 8000de4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000dee:	701a      	strb	r2, [r3, #0]
		}

		if ( countStability2 >= sizeBufStab ){			// Si pasa limite del buffer
 8000df0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f28 <_Z9stabilityv+0x208>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d306      	bcc.n	8000e0a <_Z9stabilityv+0xea>
			countStability2	= 0;						// Reinicia contador
 8000dfc:	4b48      	ldr	r3, [pc, #288]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
			stateStability	= 3;						// Pasa a S3
 8000e02:	4b41      	ldr	r3, [pc, #260]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateStability	= 2;						// Queda en S2
		}

		break;
 8000e08:	e074      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
			stateStability	= 2;						// Queda en S2
 8000e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	701a      	strb	r2, [r3, #0]
		break;
 8000e10:	e070      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	case 3:
		for ( countStability2 = 0; countStability2 < sizeBufStab; countStability2++ ){	// Recorre el buffer
 8000e12:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e031      	b.n	8000e7e <_Z9stabilityv+0x15e>
			if ( fabs(bufferStabA[ countStability2 ] - alphaA_LP) < limitStability){	// Si la diferencia entre la muestra y valor Mean es menor al limite de stabilidad
 8000e1a:	4b41      	ldr	r3, [pc, #260]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b40      	ldr	r3, [pc, #256]	@ (8000f24 <_Z9stabilityv+0x204>)
 8000e22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <_Z9stabilityv+0x1e0>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb1a 	bl	8001468 <_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e34:	ec55 4b10 	vmov	r4, r5, d0
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <_Z9stabilityv+0x1fc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb17 	bl	8000470 <__aeabi_ui2d>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	2101      	movs	r1, #1
 8000e48:	460e      	mov	r6, r1
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	f7ff fbe9 	bl	8000624 <__aeabi_dcmplt>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <_Z9stabilityv+0x13c>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	461e      	mov	r6, r3
 8000e5c:	b2f3      	uxtb	r3, r6
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <_Z9stabilityv+0x14a>
				flagStability	= 1;													// Marca que es estable
 8000e62:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e003      	b.n	8000e72 <_Z9stabilityv+0x152>
			}
			else{																		// Si no
				flagStability	= 0;													// Marcaque es inestable
 8000e6a:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
				break;																	// Sale del ciclo for
 8000e70:	e00b      	b.n	8000e8a <_Z9stabilityv+0x16a>
		for ( countStability2 = 0; countStability2 < sizeBufStab; countStability2++ ){	// Recorre el buffer
 8000e72:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	4b28      	ldr	r3, [pc, #160]	@ (8000f20 <_Z9stabilityv+0x200>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <_Z9stabilityv+0x208>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d3c7      	bcc.n	8000e1a <_Z9stabilityv+0xfa>
			}
		}

		countStability3++;								// Suma 1 al contador
 8000e8a:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b26      	ldr	r3, [pc, #152]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000e94:	701a      	strb	r2, [r3, #0]

		if (flagStability){								// Si es estable
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <_Z9stabilityv+0x18c>
			countStability3	= 0;						// Reinicia contador
 8000e9e:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
			stateStability	= 5;						// Pasa a S5
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	701a      	strb	r2, [r3, #0]
			stateStability	= 4;						// Pasa a S4
		}
		else{											// Si no
			stateStability	= 1;						// Vuelve a S1
		}
		break;
 8000eaa:	e023      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
		else if ( countStability3 >= limitRetStab ){	// Si lleva muchos reintentos
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d906      	bls.n	8000ec2 <_Z9stabilityv+0x1a2>
			countStability3	= 0;						// Reinicia contador
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <_Z9stabilityv+0x20c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
			stateStability	= 4;						// Pasa a S4
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	701a      	strb	r2, [r3, #0]
		break;
 8000ec0:	e018      	b.n	8000ef4 <_Z9stabilityv+0x1d4>
			stateStability	= 1;						// Vuelve a S1
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
		break;
 8000ec8:	e014      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	case 4:
		flagFinishStab	= 1;
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <_Z9stabilityv+0x1ec>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		flagStability	= 0;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
		stateStability	= 0;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
		break;
 8000edc:	e00a      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	case 5:
		flagFinishStab	= 1;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <_Z9stabilityv+0x1ec>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
		flagStability	= 1;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <_Z9stabilityv+0x1f0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
		stateStability	= 0;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <_Z9stabilityv+0x1e8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
		break;
 8000ef0:	e000      	b.n	8000ef4 <_Z9stabilityv+0x1d4>

	default:
		break;
 8000ef2:	bf00      	nop
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef8:	20000530 	.word	0x20000530
 8000efc:	20000546 	.word	0x20000546
 8000f00:	20000476 	.word	0x20000476
 8000f04:	20000478 	.word	0x20000478
 8000f08:	20000480 	.word	0x20000480
 8000f0c:	20000491 	.word	0x20000491
 8000f10:	20000474 	.word	0x20000474
 8000f14:	20000490 	.word	0x20000490
 8000f18:	20000484 	.word	0x20000484
 8000f1c:	2000048c 	.word	0x2000048c
 8000f20:	20000488 	.word	0x20000488
 8000f24:	20000494 	.word	0x20000494
 8000f28:	20000004 	.word	0x20000004
 8000f2c:	20000489 	.word	0x20000489

08000f30 <_Z7processv>:
 * S7:	SET FINAL POINT
 * S8:	SAVE IN EEPROM
 * S9:	WAIT FOR RESET PROCESS
 */

void process(){
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0


	switch ( stateProcess ){
 8000f34:	4b98      	ldr	r3, [pc, #608]	@ (8001198 <_Z7processv+0x268>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	f200 8124 	bhi.w	8001186 <_Z7processv+0x256>
 8000f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f44 <_Z7processv+0x14>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f69 	.word	0x08000f69
 8000f48:	08000f77 	.word	0x08000f77
 8000f4c:	08000f95 	.word	0x08000f95
 8000f50:	08000fcf 	.word	0x08000fcf
 8000f54:	0800101d 	.word	0x0800101d
 8000f58:	08001035 	.word	0x08001035
 8000f5c:	0800104d 	.word	0x0800104d
 8000f60:	080010a1 	.word	0x080010a1
 8000f64:	08001169 	.word	0x08001169
	////////////////////////
	// S0 - START PROCESS //
	////////////////////////

	case 0:
		flagResetWarming	= 1;	// Indica que empieza el calentaiento del sensor
 8000f68:	4b8c      	ldr	r3, [pc, #560]	@ (800119c <_Z7processv+0x26c>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
		stateProcess		= 1;	// Pasa a S1
 8000f6e:	4b8a      	ldr	r3, [pc, #552]	@ (8001198 <_Z7processv+0x268>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
		break;
 8000f74:	e10b      	b.n	800118e <_Z7processv+0x25e>
	///////////////////////////
	// S1 - WAIT FOR WARMING //
	///////////////////////////

	case 1:
		flagResetWarming	= 0;	// Reinicia indicador
 8000f76:	4b89      	ldr	r3, [pc, #548]	@ (800119c <_Z7processv+0x26c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]

		if ( flagWarmingOk ){		// Si indica que se calentó
 8000f7c:	4b88      	ldr	r3, [pc, #544]	@ (80011a0 <_Z7processv+0x270>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <_Z7processv+0x5c>
			stateProcess	= 2;	// Pasa a S2
 8000f84:	4b84      	ldr	r3, [pc, #528]	@ (8001198 <_Z7processv+0x268>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 1;	// Queda en S1
		}
		break;
 8000f8a:	e100      	b.n	800118e <_Z7processv+0x25e>
			stateProcess	= 1;	// Queda en S1
 8000f8c:	4b82      	ldr	r3, [pc, #520]	@ (8001198 <_Z7processv+0x268>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
		break;
 8000f92:	e0fc      	b.n	800118e <_Z7processv+0x25e>
	/////////////////////
	// S2 - SET GROUND //
	/////////////////////

	case 2:
		countProcess++;							// Suma 1 al contador
 8000f94:	4b83      	ldr	r3, [pc, #524]	@ (80011a4 <_Z7processv+0x274>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a82      	ldr	r2, [pc, #520]	@ (80011a4 <_Z7processv+0x274>)
 8000f9c:	6013      	str	r3, [r2, #0]

		if ( countProcess >= limitProcess){		// Si se llega al limite de tiempo
 8000f9e:	4b81      	ldr	r3, [pc, #516]	@ (80011a4 <_Z7processv+0x274>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b81      	ldr	r3, [pc, #516]	@ (80011a8 <_Z7processv+0x278>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d30d      	bcc.n	8000fc6 <_Z7processv+0x96>
			countProcess		= 0;			// Reinicia contador
 8000faa:	4b7e      	ldr	r3, [pc, #504]	@ (80011a4 <_Z7processv+0x274>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
			meanAlphaA			= alphaA_LP;	// Guarda valor en filtro
 8000fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80011ac <_Z7processv+0x27c>)
 8000fb2:	881a      	ldrh	r2, [r3, #0]
 8000fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80011b0 <_Z7processv+0x280>)
 8000fb6:	801a      	strh	r2, [r3, #0]
			flagStartStability	= 1;			//
 8000fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80011b4 <_Z7processv+0x284>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
			stateProcess		= 3;			// Pasa a S3
 8000fbe:	4b76      	ldr	r3, [pc, #472]	@ (8001198 <_Z7processv+0x268>)
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateProcess	= 2;				// Espera en S2
		}
		break;
 8000fc4:	e0e3      	b.n	800118e <_Z7processv+0x25e>
			stateProcess	= 2;				// Espera en S2
 8000fc6:	4b74      	ldr	r3, [pc, #464]	@ (8001198 <_Z7processv+0x268>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	701a      	strb	r2, [r3, #0]
		break;
 8000fcc:	e0df      	b.n	800118e <_Z7processv+0x25e>
	//////////////////////////
	// S3 - CHECK STABILITY //
	//////////////////////////

	case 3:
		flagStartStability	= 0;						//
 8000fce:	4b79      	ldr	r3, [pc, #484]	@ (80011b4 <_Z7processv+0x284>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]

		if ( flagFinishStab && flagStability){			// Si es estable
 8000fd4:	4b78      	ldr	r3, [pc, #480]	@ (80011b8 <_Z7processv+0x288>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <_Z7processv+0xc4>
 8000fdc:	4b77      	ldr	r3, [pc, #476]	@ (80011bc <_Z7processv+0x28c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <_Z7processv+0xc4>
			meanAlphaA		= alphaA_LP;				//
 8000fe4:	4b71      	ldr	r3, [pc, #452]	@ (80011ac <_Z7processv+0x27c>)
 8000fe6:	881a      	ldrh	r2, [r3, #0]
 8000fe8:	4b71      	ldr	r3, [pc, #452]	@ (80011b0 <_Z7processv+0x280>)
 8000fea:	801a      	strh	r2, [r3, #0]
			stateProcess	= 5;						// Pasa a S5
 8000fec:	4b6a      	ldr	r3, [pc, #424]	@ (8001198 <_Z7processv+0x268>)
 8000fee:	2205      	movs	r2, #5
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e012      	b.n	800101a <_Z7processv+0xea>
		}
		else if ( flagFinishStab && !flagStability){	// Si es inestable
 8000ff4:	4b70      	ldr	r3, [pc, #448]	@ (80011b8 <_Z7processv+0x288>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00a      	beq.n	8001012 <_Z7processv+0xe2>
 8000ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80011bc <_Z7processv+0x28c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f083 0301 	eor.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <_Z7processv+0xe2>
			stateProcess	= 4;						// Pasa  S4
 800100a:	4b63      	ldr	r3, [pc, #396]	@ (8001198 <_Z7processv+0x268>)
 800100c:	2204      	movs	r2, #4
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e003      	b.n	800101a <_Z7processv+0xea>
		}
		else{											// Si no marca
			stateProcess	= 3;						// Espera en S3
 8001012:	4b61      	ldr	r3, [pc, #388]	@ (8001198 <_Z7processv+0x268>)
 8001014:	2203      	movs	r2, #3
 8001016:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001018:	e0b9      	b.n	800118e <_Z7processv+0x25e>
 800101a:	e0b8      	b.n	800118e <_Z7processv+0x25e>
	////////////////////
	// S4 - SET ERROR //
	////////////////////

	case 4:
		if (flagBoton){				// Si se aprieta boton
 800101c:	4b68      	ldr	r3, [pc, #416]	@ (80011c0 <_Z7processv+0x290>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <_Z7processv+0xfc>
			stateProcess	= 0;	// Reinicia la maquina
 8001024:	4b5c      	ldr	r3, [pc, #368]	@ (8001198 <_Z7processv+0x268>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 4;	// Espera en S4
		}
		break;
 800102a:	e0b0      	b.n	800118e <_Z7processv+0x25e>
			stateProcess	= 4;	// Espera en S4
 800102c:	4b5a      	ldr	r3, [pc, #360]	@ (8001198 <_Z7processv+0x268>)
 800102e:	2204      	movs	r2, #4
 8001030:	701a      	strb	r2, [r3, #0]
		break;
 8001032:	e0ac      	b.n	800118e <_Z7processv+0x25e>
	///////////////////////////
	// S5 - WAIT INSTRUCTION //
	///////////////////////////

	case 5:
		if (flagBoton){				// Si se aprieta el boton
 8001034:	4b62      	ldr	r3, [pc, #392]	@ (80011c0 <_Z7processv+0x290>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <_Z7processv+0x114>
			stateProcess	= 6;	// Inicia proceso calibracion
 800103c:	4b56      	ldr	r3, [pc, #344]	@ (8001198 <_Z7processv+0x268>)
 800103e:	2206      	movs	r2, #6
 8001040:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 5;	// Espera en S5
		}
		break;
 8001042:	e0a4      	b.n	800118e <_Z7processv+0x25e>
			stateProcess	= 5;	// Espera en S5
 8001044:	4b54      	ldr	r3, [pc, #336]	@ (8001198 <_Z7processv+0x268>)
 8001046:	2205      	movs	r2, #5
 8001048:	701a      	strb	r2, [r3, #0]
		break;
 800104a:	e0a0      	b.n	800118e <_Z7processv+0x25e>
	/////////////////////////
	// S6 - DETECT INCEASE //
	/////////////////////////

	case 6:
		countProcess++;										// Suma 1 al contador
 800104c:	4b55      	ldr	r3, [pc, #340]	@ (80011a4 <_Z7processv+0x274>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	4a54      	ldr	r2, [pc, #336]	@ (80011a4 <_Z7processv+0x274>)
 8001054:	6013      	str	r3, [r2, #0]

		if (alphaA_LP - meanAlphaA >= limitGrowHcl ){ 	// Si se detecta increento
 8001056:	4b55      	ldr	r3, [pc, #340]	@ (80011ac <_Z7processv+0x27c>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b54      	ldr	r3, [pc, #336]	@ (80011b0 <_Z7processv+0x280>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001066:	db09      	blt.n	800107c <_Z7processv+0x14c>
			flagStartStability	= 1;
 8001068:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <_Z7processv+0x284>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
			countProcess	= 0;							// Reinicia contador
 800106e:	4b4d      	ldr	r3, [pc, #308]	@ (80011a4 <_Z7processv+0x274>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
			stateProcess	= 7;							// Pasa a S7
 8001074:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <_Z7processv+0x268>)
 8001076:	2207      	movs	r2, #7
 8001078:	701a      	strb	r2, [r3, #0]
			stateProcess		= 4;						// Pasa a S4 - ERROR
		}
		else{												// Si aun no se cumple el contador
			stateProcess	= 6;							// Queda en S4
		}
		break;
 800107a:	e088      	b.n	800118e <_Z7processv+0x25e>
		else if ( countProcess >= limitProcess*2 ){			// Si no se detecta crecimiento
 800107c:	4b4a      	ldr	r3, [pc, #296]	@ (80011a8 <_Z7processv+0x278>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	005a      	lsls	r2, r3, #1
 8001082:	4b48      	ldr	r3, [pc, #288]	@ (80011a4 <_Z7processv+0x274>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d806      	bhi.n	8001098 <_Z7processv+0x168>
			countProcess		= 0;						// Reinicia contador
 800108a:	4b46      	ldr	r3, [pc, #280]	@ (80011a4 <_Z7processv+0x274>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
			stateProcess		= 4;						// Pasa a S4 - ERROR
 8001090:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <_Z7processv+0x268>)
 8001092:	2204      	movs	r2, #4
 8001094:	701a      	strb	r2, [r3, #0]
		break;
 8001096:	e07a      	b.n	800118e <_Z7processv+0x25e>
			stateProcess	= 6;							// Queda en S4
 8001098:	4b3f      	ldr	r3, [pc, #252]	@ (8001198 <_Z7processv+0x268>)
 800109a:	2206      	movs	r2, #6
 800109c:	701a      	strb	r2, [r3, #0]
		break;
 800109e:	e076      	b.n	800118e <_Z7processv+0x25e>
	/////////////////////////////
	// S7 - WAIT FOR STABILITY //
	/////////////////////////////

	case 7:
		flagStartStability	= 0;							// Reinicia flag
 80010a0:	4b44      	ldr	r3, [pc, #272]	@ (80011b4 <_Z7processv+0x284>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
		countProcess++;										// Suma 1 al proceso
 80010a6:	4b3f      	ldr	r3, [pc, #252]	@ (80011a4 <_Z7processv+0x274>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a3d      	ldr	r2, [pc, #244]	@ (80011a4 <_Z7processv+0x274>)
 80010ae:	6013      	str	r3, [r2, #0]

		if ( flagFinishStab && flagStability){				// Si es estable
 80010b0:	4b41      	ldr	r3, [pc, #260]	@ (80011b8 <_Z7processv+0x288>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d040      	beq.n	800113a <_Z7processv+0x20a>
 80010b8:	4b40      	ldr	r3, [pc, #256]	@ (80011bc <_Z7processv+0x28c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d03c      	beq.n	800113a <_Z7processv+0x20a>
			meanAlphaA_2	= (alphaA_LP - meanAlphaA)/50;	//
 80010c0:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <_Z7processv+0x27c>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <_Z7processv+0x280>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	4a3d      	ldr	r2, [pc, #244]	@ (80011c4 <_Z7processv+0x294>)
 80010ce:	fb82 1203 	smull	r1, r2, r2, r3
 80010d2:	1112      	asrs	r2, r2, #4
 80010d4:	17db      	asrs	r3, r3, #31
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <_Z7processv+0x298>)
 80010dc:	801a      	strh	r2, [r3, #0]

			groundSensor0[0]	= meanAlphaA & 0xFF;		//
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <_Z7processv+0x280>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b39      	ldr	r3, [pc, #228]	@ (80011cc <_Z7processv+0x29c>)
 80010e6:	701a      	strb	r2, [r3, #0]
			groundSensor0[1]	= meanAlphaA >> 8;			//
 80010e8:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <_Z7processv+0x280>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <_Z7processv+0x29c>)
 80010f4:	705a      	strb	r2, [r3, #1]
			groundSensor0[2]	= 0;						//
 80010f6:	4b35      	ldr	r3, [pc, #212]	@ (80011cc <_Z7processv+0x29c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	709a      	strb	r2, [r3, #2]
			groundSensor0[3]	= 0;						//
 80010fc:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <_Z7processv+0x29c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	70da      	strb	r2, [r3, #3]

			curveSensor0[0]		=  meanAlphaA_2 & 0xFF;	//
 8001102:	4b31      	ldr	r3, [pc, #196]	@ (80011c8 <_Z7processv+0x298>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <_Z7processv+0x2a0>)
 800110a:	701a      	strb	r2, [r3, #0]
			curveSensor0[1]		=  meanAlphaA_2 >> 8;	//
 800110c:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <_Z7processv+0x298>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <_Z7processv+0x2a0>)
 8001118:	705a      	strb	r2, [r3, #1]
			curveSensor0[2]		= 0;					//
 800111a:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <_Z7processv+0x2a0>)
 800111c:	2200      	movs	r2, #0
 800111e:	709a      	strb	r2, [r3, #2]
			curveSensor0[3]		= 0;					//
 8001120:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <_Z7processv+0x2a0>)
 8001122:	2200      	movs	r2, #0
 8001124:	70da      	strb	r2, [r3, #3]

			flagSaveEeprom	= 1;						//
 8001126:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <_Z7processv+0x2a4>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
			countProcess	= 0;						//
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <_Z7processv+0x274>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			stateProcess	= 8;						// Pasa a S5
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <_Z7processv+0x268>)
 8001134:	2208      	movs	r2, #8
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e015      	b.n	8001166 <_Z7processv+0x236>
		}
		else if ( flagFinishStab && !flagStability){	// Si es inestable
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <_Z7processv+0x288>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00d      	beq.n	800115e <_Z7processv+0x22e>
 8001142:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <_Z7processv+0x28c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <_Z7processv+0x22e>
			countProcess	= 0;						//
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <_Z7processv+0x274>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
			stateProcess	= 4;						// Pasa  S4
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <_Z7processv+0x268>)
 8001158:	2204      	movs	r2, #4
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e003      	b.n	8001166 <_Z7processv+0x236>
		}
		else{											// Si no marca
			stateProcess	= 7;						// Espera en S3
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <_Z7processv+0x268>)
 8001160:	2207      	movs	r2, #7
 8001162:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001164:	e013      	b.n	800118e <_Z7processv+0x25e>
 8001166:	e012      	b.n	800118e <_Z7processv+0x25e>
	////////////////////////
	// S8 - FINISH PROCESS//
	////////////////////////

	case 8:
		flagSaveEeprom		= 0;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <_Z7processv+0x2a4>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
		if (flagBoton){				// Si se aprieta el boton
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <_Z7processv+0x290>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <_Z7processv+0x24e>
			stateProcess	= 0;	// Inicia proceso calibracion
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <_Z7processv+0x268>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 8;	// Espera en S5
		}
		break;
 800117c:	e007      	b.n	800118e <_Z7processv+0x25e>
			stateProcess	= 8;	// Espera en S5
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <_Z7processv+0x268>)
 8001180:	2208      	movs	r2, #8
 8001182:	701a      	strb	r2, [r3, #0]
		break;
 8001184:	e003      	b.n	800118e <_Z7processv+0x25e>

	default:
		stateProcess	= 0;
 8001186:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <_Z7processv+0x268>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
		break;
 800118c:	bf00      	nop
	}

}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	2000046a 	.word	0x2000046a
 800119c:	20000469 	.word	0x20000469
 80011a0:	20000468 	.word	0x20000468
 80011a4:	2000046c 	.word	0x2000046c
 80011a8:	20000470 	.word	0x20000470
 80011ac:	20000476 	.word	0x20000476
 80011b0:	2000047c 	.word	0x2000047c
 80011b4:	20000490 	.word	0x20000490
 80011b8:	20000491 	.word	0x20000491
 80011bc:	20000474 	.word	0x20000474
 80011c0:	20000b48 	.word	0x20000b48
 80011c4:	51eb851f 	.word	0x51eb851f
 80011c8:	2000047e 	.word	0x2000047e
 80011cc:	200003c8 	.word	0x200003c8
 80011d0:	200003d0 	.word	0x200003d0
 80011d4:	20000603 	.word	0x20000603

080011d8 <_Z7warmingv>:

/////////////
// WARMING //
/////////////

void warming(){
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	switch( stateWarming ){
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <_Z7warmingv+0x84>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d02e      	beq.n	8001242 <_Z7warmingv+0x6a>
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	dc33      	bgt.n	8001250 <_Z7warmingv+0x78>
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <_Z7warmingv+0x1a>
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d00f      	beq.n	8001210 <_Z7warmingv+0x38>
	case 2:
		flagWarmingOk	= 1;	//
		stateWarming	= 0;	//
		break;
	}
}
 80011f0:	e02e      	b.n	8001250 <_Z7warmingv+0x78>
		flagWarmingOk	= 0;		//
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <_Z7warmingv+0x88>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		if ( flagResetWarming ){	//
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <_Z7warmingv+0x8c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <_Z7warmingv+0x30>
			stateWarming	= 1;	//
 8001200:	4b16      	ldr	r3, [pc, #88]	@ (800125c <_Z7warmingv+0x84>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
		break;
 8001206:	e023      	b.n	8001250 <_Z7warmingv+0x78>
			stateWarming	= 0;	//
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <_Z7warmingv+0x84>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
		break;
 800120e:	e01f      	b.n	8001250 <_Z7warmingv+0x78>
		countWarming++;							//
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <_Z7warmingv+0x90>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <_Z7warmingv+0x90>)
 8001218:	6013      	str	r3, [r2, #0]
		flagWarmingOk	= 0;					//
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <_Z7warmingv+0x88>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
		if ( countWarming >= limitWarming ){	//
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <_Z7warmingv+0x90>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b11      	ldr	r3, [pc, #68]	@ (800126c <_Z7warmingv+0x94>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d306      	bcc.n	800123a <_Z7warmingv+0x62>
			countWarming	= 0;				//
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <_Z7warmingv+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
			stateWarming	= 2;				//
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <_Z7warmingv+0x84>)
 8001234:	2202      	movs	r2, #2
 8001236:	701a      	strb	r2, [r3, #0]
		break;
 8001238:	e00a      	b.n	8001250 <_Z7warmingv+0x78>
			stateWarming	= 1;				//
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <_Z7warmingv+0x84>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
		break;
 8001240:	e006      	b.n	8001250 <_Z7warmingv+0x78>
		flagWarmingOk	= 1;	//
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <_Z7warmingv+0x88>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
		stateWarming	= 0;	//
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <_Z7warmingv+0x84>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
		break;
 800124e:	bf00      	nop
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000460 	.word	0x20000460
 8001260:	20000468 	.word	0x20000468
 8001264:	20000469 	.word	0x20000469
 8001268:	20000464 	.word	0x20000464
 800126c:	20000000 	.word	0x20000000

08001270 <_Z3iirs>:
	}
	return  value;
}


__int16_t iir(__int16_t NewSample) {
 8001270:	b490      	push	{r4, r7}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
    __int16_t ACoef[NCoef+1] = {
 800127a:	4a3a      	ldr	r2, [pc, #232]	@ (8001364 <_Z3iirs+0xf4>)
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001284:	6018      	str	r0, [r3, #0]
 8001286:	3304      	adds	r3, #4
 8001288:	8019      	strh	r1, [r3, #0]
         8294,
        16588,
         8294
    };

    __int16_t BCoef[NCoef+1] = {
 800128a:	4a37      	ldr	r2, [pc, #220]	@ (8001368 <_Z3iirs+0xf8>)
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001294:	6018      	str	r0, [r3, #0]
 8001296:	3304      	adds	r3, #4
 8001298:	8019      	strh	r1, [r3, #0]

    static __int16_t x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 800129a:	2302      	movs	r3, #2
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e014      	b.n	80012ca <_Z3iirs+0x5a>
       x[n] = x[n-1];
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	4a31      	ldr	r2, [pc, #196]	@ (800136c <_Z3iirs+0xfc>)
 80012a6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80012aa:	4a30      	ldr	r2, [pc, #192]	@ (800136c <_Z3iirs+0xfc>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
       y[n] = y[n-1];
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001370 <_Z3iirs+0x100>)
 80012b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012bc:	492c      	ldr	r1, [pc, #176]	@ (8001370 <_Z3iirs+0x100>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(n=NCoef; n>0; n--) {
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dce7      	bgt.n	80012a0 <_Z3iirs+0x30>
    }

    //Calculate the new output
    x[0] = NewSample;
 80012d0:	4a26      	ldr	r2, [pc, #152]	@ (800136c <_Z3iirs+0xfc>)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	8013      	strh	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 80012d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b23      	ldr	r3, [pc, #140]	@ (800136c <_Z3iirs+0xfc>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	4a22      	ldr	r2, [pc, #136]	@ (8001370 <_Z3iirs+0x100>)
 80012e8:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef; n++)
 80012ea:	2301      	movs	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e022      	b.n	8001336 <_Z3iirs+0xc6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 80012f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001370 <_Z3iirs+0x100>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	3320      	adds	r3, #32
 80012fa:	443b      	add	r3, r7
 80012fc:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001300:	4618      	mov	r0, r3
 8001302:	491a      	ldr	r1, [pc, #104]	@ (800136c <_Z3iirs+0xfc>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800130a:	fb03 f100 	mul.w	r1, r3, r0
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	3320      	adds	r3, #32
 8001314:	443b      	add	r3, r7
 8001316:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800131a:	461c      	mov	r4, r3
 800131c:	4814      	ldr	r0, [pc, #80]	@ (8001370 <_Z3iirs+0x100>)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001324:	fb04 f303 	mul.w	r3, r4, r3
 8001328:	1acb      	subs	r3, r1, r3
 800132a:	4413      	add	r3, r2
 800132c:	4a10      	ldr	r2, [pc, #64]	@ (8001370 <_Z3iirs+0x100>)
 800132e:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef; n++)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	3301      	adds	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2b02      	cmp	r3, #2
 800133a:	ddd9      	ble.n	80012f0 <_Z3iirs+0x80>

    y[0] /= BCoef[0];
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <_Z3iirs+0x100>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001344:	fb93 f3f2 	sdiv	r3, r3, r2
 8001348:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <_Z3iirs+0x100>)
 800134a:	6013      	str	r3, [r2, #0]

    return y[0] / DCgain;
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <_Z3iirs+0x100>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da00      	bge.n	8001356 <_Z3iirs+0xe6>
 8001354:	3307      	adds	r3, #7
 8001356:	10db      	asrs	r3, r3, #3
 8001358:	b21b      	sxth	r3, r3
}
 800135a:	4618      	mov	r0, r3
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bc90      	pop	{r4, r7}
 8001362:	4770      	bx	lr
 8001364:	0800d618 	.word	0x0800d618
 8001368:	0800d620 	.word	0x0800d620
 800136c:	200004e0 	.word	0x200004e0
 8001370:	200004d4 	.word	0x200004d4

08001374 <_Z4iir3s>:

    return y2[0] / DCgain2;
}


__int16_t iir3(__int16_t NewSample) {
 8001374:	b490      	push	{r4, r7}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
    __int16_t ACoef3[NCoef2+1] = {
 800137e:	4a36      	ldr	r2, [pc, #216]	@ (8001458 <_Z4iir3s+0xe4>)
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	ca07      	ldmia	r2, {r0, r1, r2}
 8001386:	c303      	stmia	r3!, {r0, r1}
 8001388:	801a      	strh	r2, [r3, #0]
        -20476,
            0,
        10238
    };

    __int16_t BCoef3[NCoef2+1] = {
 800138a:	4a34      	ldr	r2, [pc, #208]	@ (800145c <_Z4iir3s+0xe8>)
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	ca07      	ldmia	r2, {r0, r1, r2}
 8001392:	c303      	stmia	r3!, {r0, r1}
 8001394:	801a      	strh	r2, [r3, #0]

    static __int16_t x3[NCoef2+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef2; n>0; n--) {
 8001396:	2304      	movs	r3, #4
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
 800139a:	e014      	b.n	80013c6 <_Z4iir3s+0x52>
       x3[n] = x3[n-1];
 800139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139e:	3b01      	subs	r3, #1
 80013a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001460 <_Z4iir3s+0xec>)
 80013a2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80013a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001460 <_Z4iir3s+0xec>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
       y3[n] = y3[n-1];
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001464 <_Z4iir3s+0xf0>)
 80013b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b8:	492a      	ldr	r1, [pc, #168]	@ (8001464 <_Z4iir3s+0xf0>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(n=NCoef2; n>0; n--) {
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	3b01      	subs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dce7      	bgt.n	800139c <_Z4iir3s+0x28>
    }

    //Calculate the new output
    x3[0] = NewSample;
 80013cc:	4a24      	ldr	r2, [pc, #144]	@ (8001460 <_Z4iir3s+0xec>)
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	8013      	strh	r3, [r2, #0]
    y3[0] = ACoef3[0] * x3[0];
 80013d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <_Z4iir3s+0xec>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4a20      	ldr	r2, [pc, #128]	@ (8001464 <_Z4iir3s+0xf0>)
 80013e4:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef2; n++)
 80013e6:	2301      	movs	r3, #1
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ea:	e022      	b.n	8001432 <_Z4iir3s+0xbe>
        y3[0] += ACoef3[n] * x3[n] - BCoef3[n] * y3[n];
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <_Z4iir3s+0xf0>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	3328      	adds	r3, #40	@ 0x28
 80013f6:	443b      	add	r3, r7
 80013f8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013fc:	4618      	mov	r0, r3
 80013fe:	4918      	ldr	r1, [pc, #96]	@ (8001460 <_Z4iir3s+0xec>)
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001406:	fb03 f100 	mul.w	r1, r3, r0
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3328      	adds	r3, #40	@ 0x28
 8001410:	443b      	add	r3, r7
 8001412:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8001416:	461c      	mov	r4, r3
 8001418:	4812      	ldr	r0, [pc, #72]	@ (8001464 <_Z4iir3s+0xf0>)
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001420:	fb04 f303 	mul.w	r3, r4, r3
 8001424:	1acb      	subs	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <_Z4iir3s+0xf0>)
 800142a:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef2; n++)
 800142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142e:	3301      	adds	r3, #1
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
 8001432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001434:	2b04      	cmp	r3, #4
 8001436:	ddd9      	ble.n	80013ec <_Z4iir3s+0x78>

    y3[0] /= BCoef3[0];
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <_Z4iir3s+0xf0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001440:	fb93 f3f2 	sdiv	r3, r3, r2
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <_Z4iir3s+0xf0>)
 8001446:	6013      	str	r3, [r2, #0]

    return y3[0] / DCgain2;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <_Z4iir3s+0xf0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b21b      	sxth	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	3728      	adds	r7, #40	@ 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bc90      	pop	{r4, r7}
 8001456:	4770      	bx	lr
 8001458:	0800d638 	.word	0x0800d638
 800145c:	0800d644 	.word	0x0800d644
 8001460:	200004fc 	.word	0x200004fc
 8001464:	200004e8 	.word	0x200004e8

08001468 <_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff f80d 	bl	8000490 <__aeabi_i2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4614      	mov	r4, r2
 800147c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001480:	ec45 4b17 	vmov	d7, r4, r5
 8001484:	eeb0 0a47 	vmov.f32	s0, s14
 8001488:	eef0 0a67 	vmov.f32	s1, s15
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001494 <_Z41__static_initialization_and_destruction_0ii>:
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d121      	bne.n	80014e8 <_Z41__static_initialization_and_destruction_0ii+0x54>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d11c      	bne.n	80014e8 <_Z41__static_initialization_and_destruction_0ii+0x54>
int limitLoraApp = 5000/superloop;		//
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80014bc:	4a0e      	ldr	r2, [pc, #56]	@ (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80014be:	6013      	str	r3, [r2, #0]
const uint32_t limitProcess	= 20000/superloop;	//
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80014ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80014d2:	601a      	str	r2, [r3, #0]
const uint32_t limitStability	= 20000/superloop;
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80014de:	fb93 f3f2 	sdiv	r3, r3, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000433 	.word	0x20000433
 80014f8:	2000045c 	.word	0x2000045c
 80014fc:	20000470 	.word	0x20000470
 8001500:	2000048c 	.word	0x2000048c

08001504 <_GLOBAL__sub_I_stateContent>:
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
 8001508:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff ffc1 	bl	8001494 <_Z41__static_initialization_and_destruction_0ii>
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZN8fifoUartC1Ev>:
}


/********************/

fifoUart::fifoUart(){
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	this->finalElement = this->elements;	// Cuando se construye la fifo
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f103 020c 	add.w	r2, r3, #12
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
											// El puntero de ultimo elemento
											// Apunta al primer elemento de la cadena
}
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_ZN8fifoUart13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

bool fifoUart::insertElement( uint8_t element ){
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]

	if (!(this->bussyFifo)){							// Si no está lleno
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	795b      	ldrb	r3, [r3, #5]
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00d      	beq.n	800156a <_ZN8fifoUart13insertElementEh+0x36>
		*this->finalElement	= element;					// Inserta elemento
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	701a      	strb	r2, [r3, #0]
		this->finalElement = this->finalElement + 1;	// Suma 1 al puntero
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	601a      	str	r2, [r3, #0]
		this->large++;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	609a      	str	r2, [r3, #8]
	}

	if ( this->finalElement == &this->elements[50] ){	// Si el puntero es el último del array
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	333e      	adds	r3, #62	@ 0x3e
 8001572:	429a      	cmp	r2, r3
 8001574:	d103      	bne.n	800157e <_ZN8fifoUart13insertElementEh+0x4a>
		this->bussyFifo	= 1;							// Indica que se lleno el buffer
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	715a      	strb	r2, [r3, #5]
 800157c:	e002      	b.n	8001584 <_ZN8fifoUart13insertElementEh+0x50>
	}
	else{												// Si no
		this->bussyFifo	= 0;							// Indica que no se ha llenado
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	715a      	strb	r2, [r3, #5]
	}

	return !(this->bussyFifo);							// 1: Se insertó correctamente
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	795b      	ldrb	r3, [r3, #5]
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
														// 0: No se inserto por Fifo llena
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_ZN8fifoUart11readElementEv>:

//////////////////
// READ ELEMENT //
//////////////////

uint8_t fifoUart::readElement(){
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

	uint8_t elementy	= this->elements[0];							// Copia primer valor en fifo
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7b1b      	ldrb	r3, [r3, #12]
 80015a6:	72fb      	strb	r3, [r7, #11]

	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	330c      	adds	r3, #12
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e006      	b.n	80015be <_ZN8fifoUart11readElementEv+0x24>
		*j	= *(j+1);													// Copia el elemento siguiente
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	785a      	ldrb	r2, [r3, #1]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	701a      	strb	r2, [r3, #0]
	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3301      	adds	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3f3      	bcc.n	80015b0 <_ZN8fifoUart11readElementEv+0x16>
	}

	*this->finalElement = 0;											// Rellena el último valor con 0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

	if (this->finalElement != this->elements){							// Si el último elemento no es el primero
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	330c      	adds	r3, #12
 80015d8:	429a      	cmp	r2, r3
 80015da:	d00d      	beq.n	80015f8 <_ZN8fifoUart11readElementEv+0x5e>
		this->finalElement	= this->finalElement - 1;					//  Resta una posición al elemento final
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	601a      	str	r2, [r3, #0]
		this->emptyFifo	= 0;											// Indica que fifo no esta vacia
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	711a      	strb	r2, [r3, #4]
		this->large--;													// Quita 1 al largo
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	e002      	b.n	80015fe <_ZN8fifoUart11readElementEv+0x64>
	}
	else{																// Si no
		this->emptyFifo	= 1;											// Indica que fifo esta vacia
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	711a      	strb	r2, [r3, #4]
	}

	return elementy;													// Retorna elementos a leer
 80015fe:	7afb      	ldrb	r3, [r7, #11]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_ZN8fifoUart9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoUart::available(){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	if (this->finalElement == &this->elements[0]){		// Si el puntero está apuntando
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	330c      	adds	r3, #12
 800161c:	429a      	cmp	r2, r3
 800161e:	d103      	bne.n	8001628 <_ZN8fifoUart9availableEv+0x1c>
														// al primer elemento de la fifo
		this->emptyFifo	= 1;							// Indica que la fifo esta vacia
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	711a      	strb	r2, [r3, #4]
 8001626:	e002      	b.n	800162e <_ZN8fifoUart9availableEv+0x22>
	}
	else{												// Sino
		this->emptyFifo	= 0;							// Indica que la fifo contiene elementos
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	711a      	strb	r2, [r3, #4]
	}
	return !(this->emptyFifo);							// 1: Elementos disponibles
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	791b      	ldrb	r3, [r3, #4]
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
}														// 0: Sin elementos
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_ZN8gpsInputC1Ev>:

///////////////////////////
// CONSTRUCTOR GPS INPUT //
///////////////////////////

gpsInput::gpsInput(){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
};
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_ZN8gpsInput8getValidEv>:

///////////////////////
// GET VALID MESSAGE //
///////////////////////

bool gpsInput::getValid(){
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
	bool flag	= 0;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]

	if (this->flagValid == 'A'){
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7c1b      	ldrb	r3, [r3, #16]
 800166a:	2b41      	cmp	r3, #65	@ 0x41
 800166c:	d102      	bne.n	8001674 <_ZN8gpsInput8getValidEv+0x1a>
		flag = 1;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e001      	b.n	8001678 <_ZN8gpsInput8getValidEv+0x1e>
	}
	else{
		flag = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
	}

	return flag;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_ZN8gpsInput13getNewMessageEv>:

//////////////////////////
// GET NEW MESSAGE FLAG //
//////////////////////////

bool gpsInput::getNewMessage(){
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	return	this->flagNew;	// Guarda el valor de flagNew
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7c9b      	ldrb	r3, [r3, #18]

}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
	hwBoton();
 80016a2:	f000 fa4d 	bl	8001b40 <_Z7hwBotonv>
	hwSht31();
 80016a6:	f000 f8f3 	bl	8001890 <_Z7hwSht31v>
	hwAds1115();
 80016aa:	f000 f821 	bl	80016f0 <_Z9hwAds1115v>
	hwAnalog();
 80016ae:	f000 fabf 	bl	8001c30 <_Z8hwAnalogv>
	hwEEPROM();
 80016b2:	f000 fb1d 	bl	8001cf0 <_Z8hwEEPROMv>
	hwGpsIn();
 80016b6:	f000 faa5 	bl	8001c04 <_Z7hwGpsInv>
	hwLoraIn();
 80016ba:	f000 f803 	bl	80016c4 <_Z8hwLoraInv>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <_Z8hwLoraInv>:
 * Traspaso de de loraBus a loraInput
 *
 * loraInput detecta respuesta dentro de bytes entrantes
 */

void hwLoraIn(){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	if ( loraIn.available() ){					// Si hay elementos disponibles en FIFO desde DMA
 80016c8:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <_Z8hwLoraInv+0x24>)
 80016ca:	f7ff ff9f 	bl	800160c <_ZN8fifoUart9availableEv>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <_Z8hwLoraInv+0x1e>
		loraBus	= loraIn.readElement();			// Guarda el valor
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <_Z8hwLoraInv+0x24>)
 80016d6:	f7ff ff60 	bl	800159a <_ZN8fifoUart11readElementEv>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <_Z8hwLoraInv+0x28>)
 80016e0:	701a      	strb	r2, [r3, #0]
		//loraInput.insertElement( loraBus );		// Inserta en Lora Input
	}
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000bf8 	.word	0x20000bf8
 80016ec:	200005d0 	.word	0x200005d0

080016f0 <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 80016f4:	4b57      	ldr	r3, [pc, #348]	@ (8001854 <_Z9hwAds1115v+0x164>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	f200 80a8 	bhi.w	800184e <_Z9hwAds1115v+0x15e>
 80016fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001704 <_Z9hwAds1115v+0x14>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	0800171d 	.word	0x0800171d
 8001708:	08001751 	.word	0x08001751
 800170c:	08001787 	.word	0x08001787
 8001710:	080017b9 	.word	0x080017b9
 8001714:	080017df 	.word	0x080017df
 8001718:	08001833 	.word	0x08001833
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 800171c:	4b4e      	ldr	r3, [pc, #312]	@ (8001858 <_Z9hwAds1115v+0x168>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	4a4d      	ldr	r2, [pc, #308]	@ (8001858 <_Z9hwAds1115v+0x168>)
 8001724:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 8001726:	4b4c      	ldr	r3, [pc, #304]	@ (8001858 <_Z9hwAds1115v+0x168>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b4c      	ldr	r3, [pc, #304]	@ (800185c <_Z9hwAds1115v+0x16c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	db0a      	blt.n	8001748 <_Z9hwAds1115v+0x58>
 8001732:	4b4b      	ldr	r3, [pc, #300]	@ (8001860 <_Z9hwAds1115v+0x170>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 800173a:	4b49      	ldr	r3, [pc, #292]	@ (8001860 <_Z9hwAds1115v+0x170>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 8001740:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <_Z9hwAds1115v+0x164>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 8001746:	e083      	b.n	8001850 <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 8001748:	4b42      	ldr	r3, [pc, #264]	@ (8001854 <_Z9hwAds1115v+0x164>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
		break;
 800174e:	e07f      	b.n	8001850 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 8001750:	4b41      	ldr	r3, [pc, #260]	@ (8001858 <_Z9hwAds1115v+0x168>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001756:	4b43      	ldr	r3, [pc, #268]	@ (8001864 <_Z9hwAds1115v+0x174>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 800175e:	2303      	movs	r3, #3
 8001760:	4a41      	ldr	r2, [pc, #260]	@ (8001868 <_Z9hwAds1115v+0x178>)
 8001762:	2190      	movs	r1, #144	@ 0x90
 8001764:	4841      	ldr	r0, [pc, #260]	@ (800186c <_Z9hwAds1115v+0x17c>)
 8001766:	f006 f8ad 	bl	80078c4 <HAL_I2C_Master_Transmit_DMA>
 800176a:	e005      	b.n	8001778 <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 800176c:	2303      	movs	r3, #3
 800176e:	4a40      	ldr	r2, [pc, #256]	@ (8001870 <_Z9hwAds1115v+0x180>)
 8001770:	2190      	movs	r1, #144	@ 0x90
 8001772:	483e      	ldr	r0, [pc, #248]	@ (800186c <_Z9hwAds1115v+0x17c>)
 8001774:	f006 f8a6 	bl	80078c4 <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 8001778:	4b3e      	ldr	r3, [pc, #248]	@ (8001874 <_Z9hwAds1115v+0x184>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <_Z9hwAds1115v+0x164>)
 8001780:	2202      	movs	r2, #2
 8001782:	701a      	strb	r2, [r3, #0]

		break;
 8001784:	e064      	b.n	8001850 <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 8001786:	2301      	movs	r3, #1
 8001788:	4a3b      	ldr	r2, [pc, #236]	@ (8001878 <_Z9hwAds1115v+0x188>)
 800178a:	2190      	movs	r1, #144	@ 0x90
 800178c:	4837      	ldr	r0, [pc, #220]	@ (800186c <_Z9hwAds1115v+0x17c>)
 800178e:	f006 f899 	bl	80078c4 <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 8001792:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <_Z9hwAds1115v+0x184>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b37      	ldr	r3, [pc, #220]	@ (800187c <_Z9hwAds1115v+0x18c>)
 800179e:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 80017a0:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <_Z9hwAds1115v+0x184>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 80017a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <_Z9hwAds1115v+0x164>)
 80017aa:	2203      	movs	r2, #3
 80017ac:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 80017ae:	e04f      	b.n	8001850 <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <_Z9hwAds1115v+0x164>)
 80017b2:	2205      	movs	r2, #5
 80017b4:	701a      	strb	r2, [r3, #0]
		break;
 80017b6:	e04b      	b.n	8001850 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <_Z9hwAds1115v+0x168>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <_Z9hwAds1115v+0x168>)
 80017c0:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 80017c2:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <_Z9hwAds1115v+0x168>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001880 <_Z9hwAds1115v+0x190>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	db03      	blt.n	80017d6 <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 80017ce:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <_Z9hwAds1115v+0x164>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 80017d4:	e03c      	b.n	8001850 <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 80017d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <_Z9hwAds1115v+0x164>)
 80017d8:	2203      	movs	r2, #3
 80017da:	701a      	strb	r2, [r3, #0]
		break;
 80017dc:	e038      	b.n	8001850 <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <_Z9hwAds1115v+0x168>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 80017e4:	2302      	movs	r3, #2
 80017e6:	4a27      	ldr	r2, [pc, #156]	@ (8001884 <_Z9hwAds1115v+0x194>)
 80017e8:	2190      	movs	r1, #144	@ 0x90
 80017ea:	4820      	ldr	r0, [pc, #128]	@ (800186c <_Z9hwAds1115v+0x17c>)
 80017ec:	f006 f97e 	bl	8007aec <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 80017f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <_Z9hwAds1115v+0x174>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00c      	beq.n	8001812 <_Z9hwAds1115v+0x122>
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 80017f8:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <_Z9hwAds1115v+0x194>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21a      	sxth	r2, r3
 8001800:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <_Z9hwAds1115v+0x194>)
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	b21b      	sxth	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b21b      	sxth	r3, r3
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b1e      	ldr	r3, [pc, #120]	@ (8001888 <_Z9hwAds1115v+0x198>)
 800180e:	801a      	strh	r2, [r3, #0]
 8001810:	e00b      	b.n	800182a <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <_Z9hwAds1115v+0x194>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <_Z9hwAds1115v+0x194>)
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	b21b      	sxth	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b21b      	sxth	r3, r3
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <_Z9hwAds1115v+0x19c>)
 8001828:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <_Z9hwAds1115v+0x164>)
 800182c:	2205      	movs	r2, #5
 800182e:	701a      	strb	r2, [r3, #0]
		break;
 8001830:	e00e      	b.n	8001850 <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 8001832:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <_Z9hwAds1115v+0x174>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <_Z9hwAds1115v+0x174>)
 800183e:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <_Z9hwAds1115v+0x170>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 8001846:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <_Z9hwAds1115v+0x164>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
		break;
 800184c:	e000      	b.n	8001850 <_Z9hwAds1115v+0x160>

	default:
		break;
 800184e:	bf00      	nop
	}
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000530 	.word	0x20000530
 8001858:	20000534 	.word	0x20000534
 800185c:	20000538 	.word	0x20000538
 8001860:	2000000b 	.word	0x2000000b
 8001864:	2000054a 	.word	0x2000054a
 8001868:	2000000c 	.word	0x2000000c
 800186c:	200007d8 	.word	0x200007d8
 8001870:	20000010 	.word	0x20000010
 8001874:	200011a7 	.word	0x200011a7
 8001878:	20000540 	.word	0x20000540
 800187c:	200005dc 	.word	0x200005dc
 8001880:	2000053c 	.word	0x2000053c
 8001884:	20000544 	.word	0x20000544
 8001888:	20000546 	.word	0x20000546
 800188c:	20000548 	.word	0x20000548

08001890 <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 8001894:	4b98      	ldr	r3, [pc, #608]	@ (8001af8 <_Z7hwSht31v+0x268>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b06      	cmp	r3, #6
 800189a:	f200 8126 	bhi.w	8001aea <_Z7hwSht31v+0x25a>
 800189e:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <_Z7hwSht31v+0x14>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	080018c1 	.word	0x080018c1
 80018a8:	080018f5 	.word	0x080018f5
 80018ac:	08001933 	.word	0x08001933
 80018b0:	08001977 	.word	0x08001977
 80018b4:	0800199d 	.word	0x0800199d
 80018b8:	080019bd 	.word	0x080019bd
 80018bc:	08001ab9 	.word	0x08001ab9
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 80018c0:	4b8e      	ldr	r3, [pc, #568]	@ (8001afc <_Z7hwSht31v+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a8d      	ldr	r2, [pc, #564]	@ (8001afc <_Z7hwSht31v+0x26c>)
 80018c8:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 80018ca:	4b8c      	ldr	r3, [pc, #560]	@ (8001afc <_Z7hwSht31v+0x26c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b8c      	ldr	r3, [pc, #560]	@ (8001b00 <_Z7hwSht31v+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	db0a      	blt.n	80018ec <_Z7hwSht31v+0x5c>
 80018d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001b04 <_Z7hwSht31v+0x274>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 80018de:	4b89      	ldr	r3, [pc, #548]	@ (8001b04 <_Z7hwSht31v+0x274>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 80018e4:	4b84      	ldr	r3, [pc, #528]	@ (8001af8 <_Z7hwSht31v+0x268>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 80018ea:	e102      	b.n	8001af2 <_Z7hwSht31v+0x262>
			stateSht31	= 0;					// Espera
 80018ec:	4b82      	ldr	r3, [pc, #520]	@ (8001af8 <_Z7hwSht31v+0x268>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
		break;
 80018f2:	e0fe      	b.n	8001af2 <_Z7hwSht31v+0x262>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 80018f4:	4b81      	ldr	r3, [pc, #516]	@ (8001afc <_Z7hwSht31v+0x26c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 80018fa:	4b83      	ldr	r3, [pc, #524]	@ (8001b08 <_Z7hwSht31v+0x278>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	b29b      	uxth	r3, r3
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b81      	ldr	r3, [pc, #516]	@ (8001b0c <_Z7hwSht31v+0x27c>)
 8001906:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 8001908:	4b7f      	ldr	r3, [pc, #508]	@ (8001b08 <_Z7hwSht31v+0x278>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b0c <_Z7hwSht31v+0x27c>)
 8001910:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 8001912:	4b7f      	ldr	r3, [pc, #508]	@ (8001b10 <_Z7hwSht31v+0x280>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 8001918:	4b7e      	ldr	r3, [pc, #504]	@ (8001b14 <_Z7hwSht31v+0x284>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	b299      	uxth	r1, r3
 8001920:	2302      	movs	r3, #2
 8001922:	4a7a      	ldr	r2, [pc, #488]	@ (8001b0c <_Z7hwSht31v+0x27c>)
 8001924:	487c      	ldr	r0, [pc, #496]	@ (8001b18 <_Z7hwSht31v+0x288>)
 8001926:	f005 ffcd 	bl	80078c4 <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 800192a:	4b73      	ldr	r3, [pc, #460]	@ (8001af8 <_Z7hwSht31v+0x268>)
 800192c:	2202      	movs	r2, #2
 800192e:	701a      	strb	r2, [r3, #0]
		break;
 8001930:	e0df      	b.n	8001af2 <_Z7hwSht31v+0x262>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 8001932:	4b7a      	ldr	r3, [pc, #488]	@ (8001b1c <_Z7hwSht31v+0x28c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f083 0301 	eor.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <_Z7hwSht31v+0xc0>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 8001940:	4b73      	ldr	r3, [pc, #460]	@ (8001b10 <_Z7hwSht31v+0x280>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f083 0301 	eor.w	r3, r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <_Z7hwSht31v+0x290>)
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e006      	b.n	800195e <_Z7hwSht31v+0xce>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 8001950:	4b6f      	ldr	r3, [pc, #444]	@ (8001b10 <_Z7hwSht31v+0x280>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	f083 0301 	eor.w	r3, r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b71      	ldr	r3, [pc, #452]	@ (8001b20 <_Z7hwSht31v+0x290>)
 800195c:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 800195e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b10 <_Z7hwSht31v+0x280>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <_Z7hwSht31v+0xde>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 8001966:	4b64      	ldr	r3, [pc, #400]	@ (8001af8 <_Z7hwSht31v+0x268>)
 8001968:	2203      	movs	r2, #3
 800196a:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 800196c:	e0c1      	b.n	8001af2 <_Z7hwSht31v+0x262>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 800196e:	4b62      	ldr	r3, [pc, #392]	@ (8001af8 <_Z7hwSht31v+0x268>)
 8001970:	2206      	movs	r2, #6
 8001972:	701a      	strb	r2, [r3, #0]
		break;
 8001974:	e0bd      	b.n	8001af2 <_Z7hwSht31v+0x262>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 8001976:	4b61      	ldr	r3, [pc, #388]	@ (8001afc <_Z7hwSht31v+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	4a5f      	ldr	r2, [pc, #380]	@ (8001afc <_Z7hwSht31v+0x26c>)
 800197e:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 8001980:	4b5e      	ldr	r3, [pc, #376]	@ (8001afc <_Z7hwSht31v+0x26c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b67      	ldr	r3, [pc, #412]	@ (8001b24 <_Z7hwSht31v+0x294>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	db03      	blt.n	8001994 <_Z7hwSht31v+0x104>
			stateSht31	= 4;					// Pasa a S4
 800198c:	4b5a      	ldr	r3, [pc, #360]	@ (8001af8 <_Z7hwSht31v+0x268>)
 800198e:	2204      	movs	r2, #4
 8001990:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 8001992:	e0ae      	b.n	8001af2 <_Z7hwSht31v+0x262>
			stateSht31	= 3;					// Espera en S3
 8001994:	4b58      	ldr	r3, [pc, #352]	@ (8001af8 <_Z7hwSht31v+0x268>)
 8001996:	2203      	movs	r2, #3
 8001998:	701a      	strb	r2, [r3, #0]
		break;
 800199a:	e0aa      	b.n	8001af2 <_Z7hwSht31v+0x262>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 800199c:	4b57      	ldr	r3, [pc, #348]	@ (8001afc <_Z7hwSht31v+0x26c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 80019a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b14 <_Z7hwSht31v+0x284>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	b299      	uxth	r1, r3
 80019aa:	2306      	movs	r3, #6
 80019ac:	4a5e      	ldr	r2, [pc, #376]	@ (8001b28 <_Z7hwSht31v+0x298>)
 80019ae:	485a      	ldr	r0, [pc, #360]	@ (8001b18 <_Z7hwSht31v+0x288>)
 80019b0:	f006 f89c 	bl	8007aec <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 80019b4:	4b50      	ldr	r3, [pc, #320]	@ (8001af8 <_Z7hwSht31v+0x268>)
 80019b6:	2205      	movs	r2, #5
 80019b8:	701a      	strb	r2, [r3, #0]
		break;
 80019ba:	e09a      	b.n	8001af2 <_Z7hwSht31v+0x262>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 80019bc:	4b57      	ldr	r3, [pc, #348]	@ (8001b1c <_Z7hwSht31v+0x28c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	f083 0301 	eor.w	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d039      	beq.n	8001a3e <_Z7hwSht31v+0x1ae>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 80019ca:	4b57      	ldr	r3, [pc, #348]	@ (8001b28 <_Z7hwSht31v+0x298>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4a55      	ldr	r2, [pc, #340]	@ (8001b28 <_Z7hwSht31v+0x298>)
 80019d4:	7852      	ldrb	r2, [r2, #1]
 80019d6:	4413      	add	r3, r2
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <_Z7hwSht31v+0x29c>)
 80019dc:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 80019de:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <_Z7hwSht31v+0x29c>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a50      	ldr	r2, [pc, #320]	@ (8001b30 <_Z7hwSht31v+0x2a0>)
 80019ee:	fb82 1203 	smull	r1, r2, r2, r3
 80019f2:	441a      	add	r2, r3
 80019f4:	13d2      	asrs	r2, r2, #15
 80019f6:	17db      	asrs	r3, r3, #31
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <_Z7hwSht31v+0x29c>)
 8001a04:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 8001a06:	4b48      	ldr	r3, [pc, #288]	@ (8001b28 <_Z7hwSht31v+0x298>)
 8001a08:	78db      	ldrb	r3, [r3, #3]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4a46      	ldr	r2, [pc, #280]	@ (8001b28 <_Z7hwSht31v+0x298>)
 8001a10:	7912      	ldrb	r2, [r2, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b47      	ldr	r3, [pc, #284]	@ (8001b34 <_Z7hwSht31v+0x2a4>)
 8001a18:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 8001a1a:	4b46      	ldr	r3, [pc, #280]	@ (8001b34 <_Z7hwSht31v+0x2a4>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	4a41      	ldr	r2, [pc, #260]	@ (8001b30 <_Z7hwSht31v+0x2a0>)
 8001a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2e:	441a      	add	r2, r3
 8001a30:	13d2      	asrs	r2, r2, #15
 8001a32:	17db      	asrs	r3, r3, #31
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <_Z7hwSht31v+0x2a4>)
 8001a3a:	801a      	strh	r2, [r3, #0]
 8001a3c:	e038      	b.n	8001ab0 <_Z7hwSht31v+0x220>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <_Z7hwSht31v+0x298>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4a38      	ldr	r2, [pc, #224]	@ (8001b28 <_Z7hwSht31v+0x298>)
 8001a48:	7852      	ldrb	r2, [r2, #1]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <_Z7hwSht31v+0x2a8>)
 8001a50:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 8001a52:	4b39      	ldr	r3, [pc, #228]	@ (8001b38 <_Z7hwSht31v+0x2a8>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	4a33      	ldr	r2, [pc, #204]	@ (8001b30 <_Z7hwSht31v+0x2a0>)
 8001a62:	fb82 1203 	smull	r1, r2, r2, r3
 8001a66:	441a      	add	r2, r3
 8001a68:	13d2      	asrs	r2, r2, #15
 8001a6a:	17db      	asrs	r3, r3, #31
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b30      	ldr	r3, [pc, #192]	@ (8001b38 <_Z7hwSht31v+0x2a8>)
 8001a78:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <_Z7hwSht31v+0x298>)
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4a29      	ldr	r2, [pc, #164]	@ (8001b28 <_Z7hwSht31v+0x298>)
 8001a84:	7912      	ldrb	r2, [r2, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <_Z7hwSht31v+0x2ac>)
 8001a8c:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b3c <_Z7hwSht31v+0x2ac>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	4a24      	ldr	r2, [pc, #144]	@ (8001b30 <_Z7hwSht31v+0x2a0>)
 8001a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa2:	441a      	add	r2, r3
 8001aa4:	13d2      	asrs	r2, r2, #15
 8001aa6:	17db      	asrs	r3, r3, #31
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <_Z7hwSht31v+0x2ac>)
 8001aae:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <_Z7hwSht31v+0x268>)
 8001ab2:	2206      	movs	r2, #6
 8001ab4:	701a      	strb	r2, [r3, #0]
		break;
 8001ab6:	e01c      	b.n	8001af2 <_Z7hwSht31v+0x262>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <_Z7hwSht31v+0x274>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <_Z7hwSht31v+0x28c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	f083 0301 	eor.w	r3, r3, #1
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <_Z7hwSht31v+0x28c>)
 8001aca:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 8001acc:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <_Z7hwSht31v+0x28c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <_Z7hwSht31v+0x24c>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <_Z7hwSht31v+0x284>)
 8001ad6:	2244      	movs	r2, #68	@ 0x44
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e002      	b.n	8001ae2 <_Z7hwSht31v+0x252>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 8001adc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <_Z7hwSht31v+0x284>)
 8001ade:	2245      	movs	r2, #69	@ 0x45
 8001ae0:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <_Z7hwSht31v+0x268>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
		break;
 8001ae8:	e003      	b.n	8001af2 <_Z7hwSht31v+0x262>

	default:
		stateSht31	= 0;
 8001aea:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <_Z7hwSht31v+0x268>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
		break;
 8001af0:	bf00      	nop
	}
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000511 	.word	0x20000511
 8001afc:	20000514 	.word	0x20000514
 8001b00:	20000518 	.word	0x20000518
 8001b04:	2000000b 	.word	0x2000000b
 8001b08:	20000006 	.word	0x20000006
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	200011a7 	.word	0x200011a7
 8001b14:	2000000a 	.word	0x2000000a
 8001b18:	200007d8 	.word	0x200007d8
 8001b1c:	20000526 	.word	0x20000526
 8001b20:	200005dc 	.word	0x200005dc
 8001b24:	2000051c 	.word	0x2000051c
 8001b28:	20000520 	.word	0x20000520
 8001b2c:	20000528 	.word	0x20000528
 8001b30:	80008001 	.word	0x80008001
 8001b34:	2000052a 	.word	0x2000052a
 8001b38:	2000052c 	.word	0x2000052c
 8001b3c:	2000052e 	.word	0x2000052e

08001b40 <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 8001b44:	2108      	movs	r1, #8
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4a:	f005 fdef 	bl	800772c <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <_Z7hwBotonv+0xb0>)
 8001b5c:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <_Z7hwBotonv+0xb4>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d03a      	beq.n	8001bdc <_Z7hwBotonv+0x9c>
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	dc3f      	bgt.n	8001bea <_Z7hwBotonv+0xaa>
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <_Z7hwBotonv+0x34>
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d012      	beq.n	8001b98 <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 8001b72:	e03a      	b.n	8001bea <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 8001b74:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <_Z7hwBotonv+0xb8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <_Z7hwBotonv+0xbc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 8001b80:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <_Z7hwBotonv+0xb0>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <_Z7hwBotonv+0xb4>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
		break;
 8001b8e:	e02d      	b.n	8001bec <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <_Z7hwBotonv+0xb4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
		break;
 8001b96:	e029      	b.n	8001bec <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <_Z7hwBotonv+0xb8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a16      	ldr	r2, [pc, #88]	@ (8001bf8 <_Z7hwBotonv+0xb8>)
 8001ba0:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <_Z7hwBotonv+0xb0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <_Z7hwBotonv+0x7e>
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <_Z7hwBotonv+0xb8>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <_Z7hwBotonv+0xc0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	db03      	blt.n	8001bbe <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <_Z7hwBotonv+0xb4>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]
		break;
 8001bbc:	e016      	b.n	8001bec <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <_Z7hwBotonv+0xb0>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	f083 0301 	eor.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <_Z7hwBotonv+0xb4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
		break;
 8001bd2:	e00b      	b.n	8001bec <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 8001bd4:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_Z7hwBotonv+0xb4>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
		break;
 8001bda:	e007      	b.n	8001bec <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 8001bdc:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <_Z7hwBotonv+0xbc>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <_Z7hwBotonv+0xb4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
		break;
 8001be8:	e000      	b.n	8001bec <_Z7hwBotonv+0xac>
		break;
 8001bea:	bf00      	nop
	}
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000506 	.word	0x20000506
 8001bf4:	20000510 	.word	0x20000510
 8001bf8:	20000508 	.word	0x20000508
 8001bfc:	20000b48 	.word	0x20000b48
 8001c00:	2000050c 	.word	0x2000050c

08001c04 <_Z7hwGpsInv>:
 *
 *	INPUT	:	gpsIn.available()
 *	OUTPUT	:	gpsInput.inserValue()
 */

void hwGpsIn(){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	if ( gpsIn.available() ){			// Si hay un elemento en fifo
 8001c08:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <_Z7hwGpsInv+0x24>)
 8001c0a:	f7ff fcff 	bl	800160c <_ZN8fifoUart9availableEv>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <_Z7hwGpsInv+0x1e>
		gpsBus = gpsIn.readElement();	// Lee valor en fifo
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <_Z7hwGpsInv+0x24>)
 8001c16:	f7ff fcc0 	bl	800159a <_ZN8fifoUart11readElementEv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <_Z7hwGpsInv+0x28>)
 8001c20:	701a      	strb	r2, [r3, #0]
		//gpsInput.insertValue( gpsBus );	// Pasa el simbolo al otro metodo
	}
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000ba4 	.word	0x20000ba4
 8001c2c:	200005cf 	.word	0x200005cf

08001c30 <_Z8hwAnalogv>:
 *
 *	INPUT	:	analog[0],	analog[1], flagAnalog
 *	OUTPUT	:	battery, alphaAnalog_A, alphaAnalog_B
 */

void hwAnalog(){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	switch ( stateAnalog ){
 8001c34:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <_Z8hwAnalogv+0x9c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d025      	beq.n	8001c88 <_Z8hwAnalogv+0x58>
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	dc42      	bgt.n	8001cc6 <_Z8hwAnalogv+0x96>
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <_Z8hwAnalogv+0x1a>
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d013      	beq.n	8001c70 <_Z8hwAnalogv+0x40>
		else{												// Si no ha guardado
			stateAnalog		= 2;							// Espera en S2
		}
		break;
	}
}
 8001c48:	e03d      	b.n	8001cc6 <_Z8hwAnalogv+0x96>
		countAnalog++;						// Suma 1 al contador
 8001c4a:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <_Z8hwAnalogv+0xa0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <_Z8hwAnalogv+0xa0>)
 8001c52:	6013      	str	r3, [r2, #0]
		if ( countAnalog >= sampleAnalog ){	// Si cumple el tiempo de muestreo
 8001c54:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <_Z8hwAnalogv+0xa0>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <_Z8hwAnalogv+0xa4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	db03      	blt.n	8001c68 <_Z8hwAnalogv+0x38>
			stateAnalog	= 1;				// Pasa a S1
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <_Z8hwAnalogv+0x9c>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
		break;
 8001c66:	e02e      	b.n	8001cc6 <_Z8hwAnalogv+0x96>
			stateAnalog	= 0;				// Espera en S0
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <_Z8hwAnalogv+0x9c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
		break;
 8001c6e:	e02a      	b.n	8001cc6 <_Z8hwAnalogv+0x96>
		countAnalog	= 0;									// Reinicia contador
 8001c70:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <_Z8hwAnalogv+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);	// Inicia muestreo
 8001c76:	2203      	movs	r2, #3
 8001c78:	4917      	ldr	r1, [pc, #92]	@ (8001cd8 <_Z8hwAnalogv+0xa8>)
 8001c7a:	4818      	ldr	r0, [pc, #96]	@ (8001cdc <_Z8hwAnalogv+0xac>)
 8001c7c:	f003 fd56 	bl	800572c <HAL_ADC_Start_DMA>
		stateAnalog	= 2;									// Pasa a S2
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <_Z8hwAnalogv+0x9c>)
 8001c82:	2202      	movs	r2, #2
 8001c84:	701a      	strb	r2, [r3, #0]
		break;
 8001c86:	e01e      	b.n	8001cc6 <_Z8hwAnalogv+0x96>
		if ( flagAnalog ){									// Si guardo correctamente
 8001c88:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <_Z8hwAnalogv+0xb0>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d016      	beq.n	8001cbe <_Z8hwAnalogv+0x8e>
			battery			= (analog[0] & 0xFFFF);			// Guarda valor bateria
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <_Z8hwAnalogv+0xa8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <_Z8hwAnalogv+0xb4>)
 8001c98:	801a      	strh	r2, [r3, #0]
			alphaAnalog_A	= (analog[0] >> 16 & 0xFFFF);	// Guarda valor Alpha A
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <_Z8hwAnalogv+0xa8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <_Z8hwAnalogv+0xb8>)
 8001ca4:	801a      	strh	r2, [r3, #0]
			alphaAnalog_B	= (analog[1] & 0xFFFF);			// Guarda valor Alpha B
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <_Z8hwAnalogv+0xa8>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <_Z8hwAnalogv+0xbc>)
 8001cae:	801a      	strh	r2, [r3, #0]
			flagAnalog		= 0;							// Reinicia flag de medicion analogica
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <_Z8hwAnalogv+0xb0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
			stateAnalog		= 0;							// Vuelve a S0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <_Z8hwAnalogv+0x9c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
		break;
 8001cbc:	e002      	b.n	8001cc4 <_Z8hwAnalogv+0x94>
			stateAnalog		= 2;							// Espera en S2
 8001cbe:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <_Z8hwAnalogv+0x9c>)
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	701a      	strb	r2, [r3, #0]
		break;
 8001cc4:	bf00      	nop
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000055c 	.word	0x2000055c
 8001cd0:	20000554 	.word	0x20000554
 8001cd4:	20000558 	.word	0x20000558
 8001cd8:	20001240 	.word	0x20001240
 8001cdc:	20000728 	.word	0x20000728
 8001ce0:	2000124c 	.word	0x2000124c
 8001ce4:	2000054c 	.word	0x2000054c
 8001ce8:	2000054e 	.word	0x2000054e
 8001cec:	20000550 	.word	0x20000550

08001cf0 <_Z8hwEEPROMv>:
 * 1. Indicar cada uno de los pasos de calibracion
 * 2. Guardas datos de forma periodica en EEPROM
 * 3.
 */

void hwEEPROM(){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0

	switch ( stateEEPROM ){
 8001cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e74 <_Z8hwEEPROMv+0x184>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	f200 80b0 	bhi.w	8001e60 <_Z8hwEEPROMv+0x170>
 8001d00:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <_Z8hwEEPROMv+0x18>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d1d 	.word	0x08001d1d
 8001d0c:	08001d85 	.word	0x08001d85
 8001d10:	08001ded 	.word	0x08001ded
 8001d14:	08001df5 	.word	0x08001df5
 8001d18:	08001e69 	.word	0x08001e69
	// S0 - READ PAGE 0 //
	//////////////////////

	case 0:

		EEPROM_Read(0, 0,  nameSensor_0,	sizeof(nameSensor_0));		// Name of sensor
 8001d1c:	2314      	movs	r3, #20
 8001d1e:	4a56      	ldr	r2, [pc, #344]	@ (8001e78 <_Z8hwEEPROMv+0x188>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7fe feb6 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 20, idSensor_0,		sizeof(idSensor_0));		// ID of sensor
 8001d28:	2304      	movs	r3, #4
 8001d2a:	4a54      	ldr	r2, [pc, #336]	@ (8001e7c <_Z8hwEEPROMv+0x18c>)
 8001d2c:	2114      	movs	r1, #20
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7fe feb0 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 24, rangeSensor_0,	sizeof(rangeSensor_0));		// Range of sensor
 8001d34:	2304      	movs	r3, #4
 8001d36:	4a52      	ldr	r2, [pc, #328]	@ (8001e80 <_Z8hwEEPROMv+0x190>)
 8001d38:	2118      	movs	r1, #24
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7fe feaa 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 28, amplifier_10,	sizeof(amplifier_10));		// Amplifier 1 of sensor
 8001d40:	2304      	movs	r3, #4
 8001d42:	4a50      	ldr	r2, [pc, #320]	@ (8001e84 <_Z8hwEEPROMv+0x194>)
 8001d44:	211c      	movs	r1, #28
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7fe fea4 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 32, amplifier_20,	sizeof(amplifier_20));		// Amplifier 2 of sensor
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e88 <_Z8hwEEPROMv+0x198>)
 8001d50:	2120      	movs	r1, #32
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7fe fe9e 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 36, groundSensor_0,	sizeof(groundSensor_0));	// N of curve
 8001d58:	2304      	movs	r3, #4
 8001d5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e8c <_Z8hwEEPROMv+0x19c>)
 8001d5c:	2124      	movs	r1, #36	@ 0x24
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7fe fe98 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 40, curveSensor_0,	sizeof(curveSensor_0));		// M of curve
 8001d64:	2304      	movs	r3, #4
 8001d66:	4a4a      	ldr	r2, [pc, #296]	@ (8001e90 <_Z8hwEEPROMv+0x1a0>)
 8001d68:	2128      	movs	r1, #40	@ 0x28
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7fe fe92 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 44, dateCalib_0,		sizeof(dateCalib_0));		// Date of calibration
 8001d70:	230a      	movs	r3, #10
 8001d72:	4a48      	ldr	r2, [pc, #288]	@ (8001e94 <_Z8hwEEPROMv+0x1a4>)
 8001d74:	212c      	movs	r1, #44	@ 0x2c
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7fe fe8c 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 1;												// S1 to read page 1
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <_Z8hwEEPROMv+0x184>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
		break;
 8001d82:	e072      	b.n	8001e6a <_Z8hwEEPROMv+0x17a>
	//////////////////////
	// S1 - READ PAGE 1 //
	//////////////////////

	case 1:
		EEPROM_Read(1, 0,  nameSensor_1,	sizeof(nameSensor_1));		// Name of sensor
 8001d84:	2314      	movs	r3, #20
 8001d86:	4a44      	ldr	r2, [pc, #272]	@ (8001e98 <_Z8hwEEPROMv+0x1a8>)
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7fe fe82 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 20, idSensor_1,		sizeof(idSensor_1));		// ID of sensor
 8001d90:	2304      	movs	r3, #4
 8001d92:	4a42      	ldr	r2, [pc, #264]	@ (8001e9c <_Z8hwEEPROMv+0x1ac>)
 8001d94:	2114      	movs	r1, #20
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7fe fe7c 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 24, rangeSensor_1,	sizeof(rangeSensor_1));		// Range of sensor
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	4a40      	ldr	r2, [pc, #256]	@ (8001ea0 <_Z8hwEEPROMv+0x1b0>)
 8001da0:	2118      	movs	r1, #24
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7fe fe76 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 28, amplifier_11,	sizeof(amplifier_11));		// Amplifier 1 of sensor
 8001da8:	2304      	movs	r3, #4
 8001daa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea4 <_Z8hwEEPROMv+0x1b4>)
 8001dac:	211c      	movs	r1, #28
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7fe fe70 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 32, amplifier_21,	sizeof(amplifier_21));		// Amplifier 2 of sensor
 8001db4:	2304      	movs	r3, #4
 8001db6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea8 <_Z8hwEEPROMv+0x1b8>)
 8001db8:	2120      	movs	r1, #32
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7fe fe6a 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 36, groundSensor_1,	sizeof(groundSensor_1));	// N of curve
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8001eac <_Z8hwEEPROMv+0x1bc>)
 8001dc4:	2124      	movs	r1, #36	@ 0x24
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7fe fe64 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 40, curveSensor_1,	sizeof(curveSensor_1));		// M of curve
 8001dcc:	2304      	movs	r3, #4
 8001dce:	4a38      	ldr	r2, [pc, #224]	@ (8001eb0 <_Z8hwEEPROMv+0x1c0>)
 8001dd0:	2128      	movs	r1, #40	@ 0x28
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7fe fe5e 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 44, dateCalib_1,		sizeof(dateCalib_1));		// Date of calibration
 8001dd8:	230a      	movs	r3, #10
 8001dda:	4a36      	ldr	r2, [pc, #216]	@ (8001eb4 <_Z8hwEEPROMv+0x1c4>)
 8001ddc:	212c      	movs	r1, #44	@ 0x2c
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7fe fe58 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 2;												// S2 to stop of read
 8001de4:	4b23      	ldr	r3, [pc, #140]	@ (8001e74 <_Z8hwEEPROMv+0x184>)
 8001de6:	2202      	movs	r2, #2
 8001de8:	701a      	strb	r2, [r3, #0]
		break;
 8001dea:	e03e      	b.n	8001e6a <_Z8hwEEPROMv+0x17a>
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
		*/
		stateEEPROM	= 3;								// Pasa a S3
 8001dec:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <_Z8hwEEPROMv+0x184>)
 8001dee:	2203      	movs	r2, #3
 8001df0:	701a      	strb	r2, [r3, #0]
		break;
 8001df2:	e03a      	b.n	8001e6a <_Z8hwEEPROMv+0x17a>
	// S3 - STOP READING //
	///////////////////////

	case 3:
		uint8_t i;										// Inicia contador
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8001df4:	2300      	movs	r3, #0
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	e012      	b.n	8001e20 <_Z8hwEEPROMv+0x130>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb8 <_Z8hwEEPROMv+0x1c8>)
 8001dfe:	5cd2      	ldrb	r2, [r2, r3]
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	491d      	ldr	r1, [pc, #116]	@ (8001e78 <_Z8hwEEPROMv+0x188>)
 8001e04:	5ccb      	ldrb	r3, [r1, r3]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d103      	bne.n	8001e12 <_Z8hwEEPROMv+0x122>
				errorHardware[4]	= 0;				// Si son iguales  no hay error
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ebc <_Z8hwEEPROMv+0x1cc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	711a      	strb	r2, [r3, #4]
 8001e10:	e003      	b.n	8001e1a <_Z8hwEEPROMv+0x12a>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8001e12:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <_Z8hwEEPROMv+0x1cc>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8001e18:	e005      	b.n	8001e26 <_Z8hwEEPROMv+0x136>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	2b11      	cmp	r3, #17
 8001e24:	d9e9      	bls.n	8001dfa <_Z8hwEEPROMv+0x10a>
			}
		}

		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8001e26:	2300      	movs	r3, #0
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	e012      	b.n	8001e52 <_Z8hwEEPROMv+0x162>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	4a22      	ldr	r2, [pc, #136]	@ (8001eb8 <_Z8hwEEPROMv+0x1c8>)
 8001e30:	5cd2      	ldrb	r2, [r2, r3]
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4910      	ldr	r1, [pc, #64]	@ (8001e78 <_Z8hwEEPROMv+0x188>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d103      	bne.n	8001e44 <_Z8hwEEPROMv+0x154>
				errorHardware[4]	= 0;				// Si son iguales no idnica error
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <_Z8hwEEPROMv+0x1cc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	711a      	strb	r2, [r3, #4]
 8001e42:	e003      	b.n	8001e4c <_Z8hwEEPROMv+0x15c>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8001e44:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <_Z8hwEEPROMv+0x1cc>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8001e4a:	e005      	b.n	8001e58 <_Z8hwEEPROMv+0x168>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d9e9      	bls.n	8001e2c <_Z8hwEEPROMv+0x13c>
			}
		}
		stateEEPROM	= 4;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <_Z8hwEEPROMv+0x184>)
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	701a      	strb	r2, [r3, #0]
		break;
 8001e5e:	e004      	b.n	8001e6a <_Z8hwEEPROMv+0x17a>

	case 4:
		break;
	default:
		stateEEPROM	= 0;
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <_Z8hwEEPROMv+0x184>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
		break;
 8001e66:	e000      	b.n	8001e6a <_Z8hwEEPROMv+0x17a>
		break;
 8001e68:	bf00      	nop
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200005ce 	.word	0x200005ce
 8001e78:	20000560 	.word	0x20000560
 8001e7c:	20000574 	.word	0x20000574
 8001e80:	20000578 	.word	0x20000578
 8001e84:	2000057c 	.word	0x2000057c
 8001e88:	20000580 	.word	0x20000580
 8001e8c:	20000584 	.word	0x20000584
 8001e90:	20000588 	.word	0x20000588
 8001e94:	2000058c 	.word	0x2000058c
 8001e98:	20000598 	.word	0x20000598
 8001e9c:	200005ac 	.word	0x200005ac
 8001ea0:	200005b0 	.word	0x200005b0
 8001ea4:	200005b4 	.word	0x200005b4
 8001ea8:	200005b8 	.word	0x200005b8
 8001eac:	200005bc 	.word	0x200005bc
 8001eb0:	200005c0 	.word	0x200005c0
 8001eb4:	200005c4 	.word	0x200005c4
 8001eb8:	20000014 	.word	0x20000014
 8001ebc:	200005dc 	.word	0x200005dc

08001ec0 <_Z41__static_initialization_and_destruction_0ii>:
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d137      	bne.n	8001f40 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d132      	bne.n	8001f40 <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ee8:	4a19      	ldr	r2, [pc, #100]	@ (8001f50 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001eea:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001ef6:	fb93 f3f2 	sdiv	r3, r3, r2
 8001efa:	4a16      	ldr	r2, [pc, #88]	@ (8001f54 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001efc:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	2332      	movs	r3, #50	@ 0x32
 8001f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f0a:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001f0c:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	2364      	movs	r3, #100	@ 0x64
 8001f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f1a:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001f1c:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	2314      	movs	r3, #20
 8001f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001f2e:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	2332      	movs	r3, #50	@ 0x32
 8001f38:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f3c:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	20000433 	.word	0x20000433
 8001f50:	2000050c 	.word	0x2000050c
 8001f54:	20000518 	.word	0x20000518
 8001f58:	2000051c 	.word	0x2000051c
 8001f5c:	20000538 	.word	0x20000538
 8001f60:	2000053c 	.word	0x2000053c
 8001f64:	20000558 	.word	0x20000558

08001f68 <_GLOBAL__sub_I_boton>:
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff ffa5 	bl	8001ec0 <_Z41__static_initialization_and_destruction_0ii>
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_Z8hwOutputv>:

extern uint8_t dateCalib1[10];		// Fecha de calibración

/***** OUTPUT	*****/

void hwOutput(){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	//hwDisplay();
	//hwAlarms();
	hwLoraOut();
 8001f7c:	f000 fae2 	bl	8002544 <_Z9hwLoraOutv>
	hwGpsOut();
 8001f80:	f000 f97e 	bl	8002280 <_Z8hwGpsOutv>
	hwLedOut();
 8001f84:	f000 f8be 	bl	8002104 <_Z8hwLedOutv>
	hwEEPROMOut();
 8001f88:	f000 f802 	bl	8001f90 <_Z11hwEEPROMOutv>
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_Z11hwEEPROMOutv>:

////////////
// EEPROM //
////////////

void hwEEPROMOut(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	switch( stateEepromOut ){
 8001f94:	4b49      	ldr	r3, [pc, #292]	@ (80020bc <_Z11hwEEPROMOutv+0x12c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	f200 8089 	bhi.w	80020b0 <_Z11hwEEPROMOutv+0x120>
 8001f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa4 <_Z11hwEEPROMOutv+0x14>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb9 	.word	0x08001fb9
 8001fa8:	08001fd1 	.word	0x08001fd1
 8001fac:	08002009 	.word	0x08002009
 8001fb0:	08002041 	.word	0x08002041
 8001fb4:	08002079 	.word	0x08002079
	case 0:
		if (flagSaveEeprom){
 8001fb8:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <_Z11hwEEPROMOutv+0x130>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <_Z11hwEEPROMOutv+0x38>
			stateEepromOut	= 1;
 8001fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <_Z11hwEEPROMOutv+0x12c>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateEepromOut	= 0;
		}
		break;
 8001fc6:	e077      	b.n	80020b8 <_Z11hwEEPROMOutv+0x128>
			stateEepromOut	= 0;
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <_Z11hwEEPROMOutv+0x12c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
		break;
 8001fce:	e073      	b.n	80020b8 <_Z11hwEEPROMOutv+0x128>

	case 1:
		EEPROM_Write(0, 0, nameSensor0, sizeof(nameSensor0));
 8001fd0:	2314      	movs	r3, #20
 8001fd2:	4a3c      	ldr	r2, [pc, #240]	@ (80020c4 <_Z11hwEEPROMOutv+0x134>)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7fe fcf6 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 20, idSensor0, sizeof(idSensor0));
 8001fdc:	2304      	movs	r3, #4
 8001fde:	4a3a      	ldr	r2, [pc, #232]	@ (80020c8 <_Z11hwEEPROMOutv+0x138>)
 8001fe0:	2114      	movs	r1, #20
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7fe fcf0 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 24, rangeSensor0, sizeof(rangeSensor0));
 8001fe8:	2304      	movs	r3, #4
 8001fea:	4a38      	ldr	r2, [pc, #224]	@ (80020cc <_Z11hwEEPROMOutv+0x13c>)
 8001fec:	2118      	movs	r1, #24
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7fe fcea 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 28, amplifier1_0, sizeof(amplifier1_0));
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	4a36      	ldr	r2, [pc, #216]	@ (80020d0 <_Z11hwEEPROMOutv+0x140>)
 8001ff8:	211c      	movs	r1, #28
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7fe fce4 	bl	80009c8 <_Z12EEPROM_WritettPht>
		stateEepromOut	= 2;
 8002000:	4b2e      	ldr	r3, [pc, #184]	@ (80020bc <_Z11hwEEPROMOutv+0x12c>)
 8002002:	2202      	movs	r2, #2
 8002004:	701a      	strb	r2, [r3, #0]

		break;
 8002006:	e057      	b.n	80020b8 <_Z11hwEEPROMOutv+0x128>

	case 2:
		EEPROM_Write(0, 32, amplifier2_0, sizeof(amplifier2_0));
 8002008:	2304      	movs	r3, #4
 800200a:	4a32      	ldr	r2, [pc, #200]	@ (80020d4 <_Z11hwEEPROMOutv+0x144>)
 800200c:	2120      	movs	r1, #32
 800200e:	2000      	movs	r0, #0
 8002010:	f7fe fcda 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 36, groundSensor0, sizeof(groundSensor0));
 8002014:	2304      	movs	r3, #4
 8002016:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <_Z11hwEEPROMOutv+0x148>)
 8002018:	2124      	movs	r1, #36	@ 0x24
 800201a:	2000      	movs	r0, #0
 800201c:	f7fe fcd4 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 40, curveSensor0, sizeof(curveSensor0));
 8002020:	2304      	movs	r3, #4
 8002022:	4a2e      	ldr	r2, [pc, #184]	@ (80020dc <_Z11hwEEPROMOutv+0x14c>)
 8002024:	2128      	movs	r1, #40	@ 0x28
 8002026:	2000      	movs	r0, #0
 8002028:	f7fe fcce 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 44, dateCalib0, sizeof(dateCalib0));
 800202c:	230a      	movs	r3, #10
 800202e:	4a2c      	ldr	r2, [pc, #176]	@ (80020e0 <_Z11hwEEPROMOutv+0x150>)
 8002030:	212c      	movs	r1, #44	@ 0x2c
 8002032:	2000      	movs	r0, #0
 8002034:	f7fe fcc8 	bl	80009c8 <_Z12EEPROM_WritettPht>
		stateEepromOut	= 3;
 8002038:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <_Z11hwEEPROMOutv+0x12c>)
 800203a:	2203      	movs	r2, #3
 800203c:	701a      	strb	r2, [r3, #0]
		break;
 800203e:	e03b      	b.n	80020b8 <_Z11hwEEPROMOutv+0x128>

	case 3:
		EEPROM_Write(1, 0, nameSensor1, sizeof(nameSensor0));
 8002040:	2314      	movs	r3, #20
 8002042:	4a28      	ldr	r2, [pc, #160]	@ (80020e4 <_Z11hwEEPROMOutv+0x154>)
 8002044:	2100      	movs	r1, #0
 8002046:	2001      	movs	r0, #1
 8002048:	f7fe fcbe 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 20, idSensor1, sizeof(idSensor1));
 800204c:	2304      	movs	r3, #4
 800204e:	4a26      	ldr	r2, [pc, #152]	@ (80020e8 <_Z11hwEEPROMOutv+0x158>)
 8002050:	2114      	movs	r1, #20
 8002052:	2001      	movs	r0, #1
 8002054:	f7fe fcb8 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 24, rangeSensor1, sizeof(rangeSensor0));
 8002058:	2304      	movs	r3, #4
 800205a:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <_Z11hwEEPROMOutv+0x15c>)
 800205c:	2118      	movs	r1, #24
 800205e:	2001      	movs	r0, #1
 8002060:	f7fe fcb2 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 28, amplifier1_1, sizeof(amplifier1_0));
 8002064:	2304      	movs	r3, #4
 8002066:	4a22      	ldr	r2, [pc, #136]	@ (80020f0 <_Z11hwEEPROMOutv+0x160>)
 8002068:	211c      	movs	r1, #28
 800206a:	2001      	movs	r0, #1
 800206c:	f7fe fcac 	bl	80009c8 <_Z12EEPROM_WritettPht>
		stateEepromOut	= 4;
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <_Z11hwEEPROMOutv+0x12c>)
 8002072:	2204      	movs	r2, #4
 8002074:	701a      	strb	r2, [r3, #0]
		break;
 8002076:	e01f      	b.n	80020b8 <_Z11hwEEPROMOutv+0x128>

	case 4:
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
 8002078:	2304      	movs	r3, #4
 800207a:	4a1e      	ldr	r2, [pc, #120]	@ (80020f4 <_Z11hwEEPROMOutv+0x164>)
 800207c:	2120      	movs	r1, #32
 800207e:	2001      	movs	r0, #1
 8002080:	f7fe fca2 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
 8002084:	2304      	movs	r3, #4
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <_Z11hwEEPROMOutv+0x168>)
 8002088:	2124      	movs	r1, #36	@ 0x24
 800208a:	2001      	movs	r0, #1
 800208c:	f7fe fc9c 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
 8002090:	2304      	movs	r3, #4
 8002092:	4a1a      	ldr	r2, [pc, #104]	@ (80020fc <_Z11hwEEPROMOutv+0x16c>)
 8002094:	2128      	movs	r1, #40	@ 0x28
 8002096:	2001      	movs	r0, #1
 8002098:	f7fe fc96 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
 800209c:	230a      	movs	r3, #10
 800209e:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <_Z11hwEEPROMOutv+0x170>)
 80020a0:	212c      	movs	r1, #44	@ 0x2c
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7fe fc90 	bl	80009c8 <_Z12EEPROM_WritettPht>
		stateEepromOut	= 0;
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <_Z11hwEEPROMOutv+0x12c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
		break;
 80020ae:	e003      	b.n	80020b8 <_Z11hwEEPROMOutv+0x128>

	default:
		stateEepromOut	= 0;
 80020b0:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <_Z11hwEEPROMOutv+0x12c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
		break;
 80020b6:	bf00      	nop
	}
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000604 	.word	0x20000604
 80020c0:	20000603 	.word	0x20000603
 80020c4:	20000394 	.word	0x20000394
 80020c8:	200003a8 	.word	0x200003a8
 80020cc:	200003b0 	.word	0x200003b0
 80020d0:	200003b8 	.word	0x200003b8
 80020d4:	200003c0 	.word	0x200003c0
 80020d8:	200003c8 	.word	0x200003c8
 80020dc:	200003d0 	.word	0x200003d0
 80020e0:	200003d8 	.word	0x200003d8
 80020e4:	200003e4 	.word	0x200003e4
 80020e8:	200003f8 	.word	0x200003f8
 80020ec:	20000400 	.word	0x20000400
 80020f0:	20000408 	.word	0x20000408
 80020f4:	20000410 	.word	0x20000410
 80020f8:	20000418 	.word	0x20000418
 80020fc:	20000420 	.word	0x20000420
 8002100:	20000428 	.word	0x20000428

08002104 <_Z8hwLedOutv>:

/////////
// LED //
/////////

void hwLedOut(){
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0

	switch(stateLed){
 8002108:	4b57      	ldr	r3, [pc, #348]	@ (8002268 <_Z8hwLedOutv+0x164>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b03      	cmp	r3, #3
 800210e:	f200 80a5 	bhi.w	800225c <_Z8hwLedOutv+0x158>
 8002112:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <_Z8hwLedOutv+0x14>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002129 	.word	0x08002129
 800211c:	0800215d 	.word	0x0800215d
 8002120:	08002191 	.word	0x08002191
 8002124:	080021f7 	.word	0x080021f7
	//////////////////
	// S0 - LED OFF //
	//////////////////

	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	2110      	movs	r1, #16
 800212c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002130:	f005 fb14 	bl	800775c <HAL_GPIO_WritePin>

		if ( flagLedOn ){			//
 8002134:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <_Z8hwLedOutv+0x168>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <_Z8hwLedOutv+0x40>
			stateLed	= 1;		//
 800213c:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <_Z8hwLedOutv+0x164>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
			stateLed	= 2;		//
		}
		else{						//
			stateLed	= 0;		//
		}
		break;
 8002142:	e08f      	b.n	8002264 <_Z8hwLedOutv+0x160>
		else if ( flagLedFreq ){	//
 8002144:	4b4a      	ldr	r3, [pc, #296]	@ (8002270 <_Z8hwLedOutv+0x16c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <_Z8hwLedOutv+0x50>
			stateLed	= 2;		//
 800214c:	4b46      	ldr	r3, [pc, #280]	@ (8002268 <_Z8hwLedOutv+0x164>)
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
		break;
 8002152:	e087      	b.n	8002264 <_Z8hwLedOutv+0x160>
			stateLed	= 0;		//
 8002154:	4b44      	ldr	r3, [pc, #272]	@ (8002268 <_Z8hwLedOutv+0x164>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		break;
 800215a:	e083      	b.n	8002264 <_Z8hwLedOutv+0x160>
	/////////////////
	// S1 - LED ON //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2110      	movs	r1, #16
 8002160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002164:	f005 fafa 	bl	800775c <HAL_GPIO_WritePin>

		if ( flagLedOff ){			//
 8002168:	4b42      	ldr	r3, [pc, #264]	@ (8002274 <_Z8hwLedOutv+0x170>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <_Z8hwLedOutv+0x74>
			stateLed	= 0;		//
 8002170:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <_Z8hwLedOutv+0x164>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
			stateLed	= 2;		//
		}
		else{						//
			stateLed	= 1;		//
		}
		break;
 8002176:	e075      	b.n	8002264 <_Z8hwLedOutv+0x160>
		else if ( flagLedFreq ){	//
 8002178:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <_Z8hwLedOutv+0x16c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <_Z8hwLedOutv+0x84>
			stateLed	= 2;		//
 8002180:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <_Z8hwLedOutv+0x164>)
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
		break;
 8002186:	e06d      	b.n	8002264 <_Z8hwLedOutv+0x160>
			stateLed	= 1;		//
 8002188:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <_Z8hwLedOutv+0x164>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
		break;
 800218e:	e069      	b.n	8002264 <_Z8hwLedOutv+0x160>
	///////////////////
	// S2 - LED FREQ //
	///////////////////

	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	2110      	movs	r1, #16
 8002194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002198:	f005 fae0 	bl	800775c <HAL_GPIO_WritePin>

		countLedOut++;							//
 800219c:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <_Z8hwLedOutv+0x174>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <_Z8hwLedOutv+0x174>)
 80021a6:	801a      	strh	r2, [r3, #0]

		if ( flagLedOn ){						//
 80021a8:	4b30      	ldr	r3, [pc, #192]	@ (800226c <_Z8hwLedOutv+0x168>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <_Z8hwLedOutv+0xba>
			countLedOut	= 0;					//
 80021b0:	4b31      	ldr	r3, [pc, #196]	@ (8002278 <_Z8hwLedOutv+0x174>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	801a      	strh	r2, [r3, #0]
			stateLed	= 1;					//
 80021b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <_Z8hwLedOutv+0x164>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
			stateLed	= 3;					//
		}
		else{									//
			stateLed	= 2;					//
		}
		break;
 80021bc:	e052      	b.n	8002264 <_Z8hwLedOutv+0x160>
		else if ( flagLedOff ){					//
 80021be:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <_Z8hwLedOutv+0x170>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <_Z8hwLedOutv+0xd0>
			countLedOut	= 0;					//
 80021c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <_Z8hwLedOutv+0x174>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	801a      	strh	r2, [r3, #0]
			stateLed	= 0;					//
 80021cc:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <_Z8hwLedOutv+0x164>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
		break;
 80021d2:	e047      	b.n	8002264 <_Z8hwLedOutv+0x160>
		else if ( countLedOut >= limitLed ){	//
 80021d4:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <_Z8hwLedOutv+0x174>)
 80021d6:	881a      	ldrh	r2, [r3, #0]
 80021d8:	4b28      	ldr	r3, [pc, #160]	@ (800227c <_Z8hwLedOutv+0x178>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d306      	bcc.n	80021ee <_Z8hwLedOutv+0xea>
			countLedOut	= 0;					//
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <_Z8hwLedOutv+0x174>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	801a      	strh	r2, [r3, #0]
			stateLed	= 3;					//
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <_Z8hwLedOutv+0x164>)
 80021e8:	2203      	movs	r2, #3
 80021ea:	701a      	strb	r2, [r3, #0]
		break;
 80021ec:	e03a      	b.n	8002264 <_Z8hwLedOutv+0x160>
			stateLed	= 2;					//
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <_Z8hwLedOutv+0x164>)
 80021f0:	2202      	movs	r2, #2
 80021f2:	701a      	strb	r2, [r3, #0]
		break;
 80021f4:	e036      	b.n	8002264 <_Z8hwLedOutv+0x160>
	///////////////////
	// S3 - LED FREQ //
	///////////////////

	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2110      	movs	r1, #16
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fe:	f005 faad 	bl	800775c <HAL_GPIO_WritePin>

		countLedOut++;							//
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <_Z8hwLedOutv+0x174>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <_Z8hwLedOutv+0x174>)
 800220c:	801a      	strh	r2, [r3, #0]

		if ( flagLedOn ){						//
 800220e:	4b17      	ldr	r3, [pc, #92]	@ (800226c <_Z8hwLedOutv+0x168>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <_Z8hwLedOutv+0x120>
			countLedOut	= 0;					//
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <_Z8hwLedOutv+0x174>)
 8002218:	2200      	movs	r2, #0
 800221a:	801a      	strh	r2, [r3, #0]
			stateLed	= 1;					//
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <_Z8hwLedOutv+0x164>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
			stateLed	= 3;					//
		}
		else{									//
			stateLed	= 2;					//
		}
		break;
 8002222:	e01f      	b.n	8002264 <_Z8hwLedOutv+0x160>
		else if ( flagLedOff ){					//
 8002224:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <_Z8hwLedOutv+0x170>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <_Z8hwLedOutv+0x136>
			countLedOut	= 0;					//
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <_Z8hwLedOutv+0x174>)
 800222e:	2200      	movs	r2, #0
 8002230:	801a      	strh	r2, [r3, #0]
			stateLed	= 0;					//
 8002232:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <_Z8hwLedOutv+0x164>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
		break;
 8002238:	e014      	b.n	8002264 <_Z8hwLedOutv+0x160>
		else if ( countLedOut >= limitLed ){	//
 800223a:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <_Z8hwLedOutv+0x174>)
 800223c:	881a      	ldrh	r2, [r3, #0]
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <_Z8hwLedOutv+0x178>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d306      	bcc.n	8002254 <_Z8hwLedOutv+0x150>
			countLedOut	= 0;					//
 8002246:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <_Z8hwLedOutv+0x174>)
 8002248:	2200      	movs	r2, #0
 800224a:	801a      	strh	r2, [r3, #0]
			stateLed	= 3;					//
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <_Z8hwLedOutv+0x164>)
 800224e:	2203      	movs	r2, #3
 8002250:	701a      	strb	r2, [r3, #0]
		break;
 8002252:	e007      	b.n	8002264 <_Z8hwLedOutv+0x160>
			stateLed	= 2;					//
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <_Z8hwLedOutv+0x164>)
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
		break;
 800225a:	e003      	b.n	8002264 <_Z8hwLedOutv+0x160>

	default:
		stateLed	= 0;
 800225c:	4b02      	ldr	r3, [pc, #8]	@ (8002268 <_Z8hwLedOutv+0x164>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
		break;
 8002262:	bf00      	nop
	}
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200005fa 	.word	0x200005fa
 800226c:	20000600 	.word	0x20000600
 8002270:	20000602 	.word	0x20000602
 8002274:	20000601 	.word	0x20000601
 8002278:	200005fc 	.word	0x200005fc
 800227c:	200005fe 	.word	0x200005fe

08002280 <_Z8hwGpsOutv>:

/////////
// GPS //
/////////

void hwGpsOut(){
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

	////////////
	// ENABLE //
	////////////

	switch ( stateUartGps ){
 8002284:	4b9d      	ldr	r3, [pc, #628]	@ (80024fc <_Z8hwGpsOutv+0x27c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d03d      	beq.n	8002308 <_Z8hwGpsOutv+0x88>
 800228c:	2b02      	cmp	r3, #2
 800228e:	dc4a      	bgt.n	8002326 <_Z8hwGpsOutv+0xa6>
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <_Z8hwGpsOutv+0x1a>
 8002294:	2b01      	cmp	r3, #1
 8002296:	d011      	beq.n	80022bc <_Z8hwGpsOutv+0x3c>
 8002298:	e045      	b.n	8002326 <_Z8hwGpsOutv+0xa6>
	/////////////////////////
	// S0 - WAIT AVAILABLE //
	/////////////////////////

	case 0:
		if ( availableGps ){										// Si
 800229a:	4b99      	ldr	r3, [pc, #612]	@ (8002500 <_Z8hwGpsOutv+0x280>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d008      	beq.n	80022b4 <_Z8hwGpsOutv+0x34>
			HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));	//
 80022a2:	2202      	movs	r2, #2
 80022a4:	4997      	ldr	r1, [pc, #604]	@ (8002504 <_Z8hwGpsOutv+0x284>)
 80022a6:	4898      	ldr	r0, [pc, #608]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 80022a8:	f009 fee6 	bl	800c078 <HAL_UART_Receive_DMA>
			stateUartGps	= 1;									//
 80022ac:	4b93      	ldr	r3, [pc, #588]	@ (80024fc <_Z8hwGpsOutv+0x27c>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
		}
		else{														//
			stateUartGps	= 0;									//
		}
		break;
 80022b2:	e03c      	b.n	800232e <_Z8hwGpsOutv+0xae>
			stateUartGps	= 0;									//
 80022b4:	4b91      	ldr	r3, [pc, #580]	@ (80024fc <_Z8hwGpsOutv+0x27c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
		break;
 80022ba:	e038      	b.n	800232e <_Z8hwGpsOutv+0xae>

	case 1:
		countUartGps++;
 80022bc:	4b93      	ldr	r3, [pc, #588]	@ (800250c <_Z8hwGpsOutv+0x28c>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b91      	ldr	r3, [pc, #580]	@ (800250c <_Z8hwGpsOutv+0x28c>)
 80022c6:	801a      	strh	r2, [r3, #0]

		if ( !availableGps ){
 80022c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002500 <_Z8hwGpsOutv+0x280>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f083 0301 	eor.w	r3, r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <_Z8hwGpsOutv+0x64>
			countUartGps	= 0;
 80022d6:	4b8d      	ldr	r3, [pc, #564]	@ (800250c <_Z8hwGpsOutv+0x28c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	801a      	strh	r2, [r3, #0]
			stateUartGps	= 0;
 80022dc:	4b87      	ldr	r3, [pc, #540]	@ (80024fc <_Z8hwGpsOutv+0x27c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
			stateUartGps	= 2;
		}
		else{
			stateUartGps	= 1;
		}
		break;
 80022e2:	e024      	b.n	800232e <_Z8hwGpsOutv+0xae>
		else if ( (countUartGps >= limitUartGps || flagUartGps)){
 80022e4:	4b89      	ldr	r3, [pc, #548]	@ (800250c <_Z8hwGpsOutv+0x28c>)
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	4b89      	ldr	r3, [pc, #548]	@ (8002510 <_Z8hwGpsOutv+0x290>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d203      	bcs.n	80022f8 <_Z8hwGpsOutv+0x78>
 80022f0:	4b88      	ldr	r3, [pc, #544]	@ (8002514 <_Z8hwGpsOutv+0x294>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <_Z8hwGpsOutv+0x80>
			stateUartGps	= 2;
 80022f8:	4b80      	ldr	r3, [pc, #512]	@ (80024fc <_Z8hwGpsOutv+0x27c>)
 80022fa:	2202      	movs	r2, #2
 80022fc:	701a      	strb	r2, [r3, #0]
		break;
 80022fe:	e016      	b.n	800232e <_Z8hwGpsOutv+0xae>
			stateUartGps	= 1;
 8002300:	4b7e      	ldr	r3, [pc, #504]	@ (80024fc <_Z8hwGpsOutv+0x27c>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
		break;
 8002306:	e012      	b.n	800232e <_Z8hwGpsOutv+0xae>

	case 2:
		flagUartGps		= 0;
 8002308:	4b82      	ldr	r3, [pc, #520]	@ (8002514 <_Z8hwGpsOutv+0x294>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
		countUartGps	= 0;
 800230e:	4b7f      	ldr	r3, [pc, #508]	@ (800250c <_Z8hwGpsOutv+0x28c>)
 8002310:	2200      	movs	r2, #0
 8002312:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
 8002314:	2202      	movs	r2, #2
 8002316:	497b      	ldr	r1, [pc, #492]	@ (8002504 <_Z8hwGpsOutv+0x284>)
 8002318:	487b      	ldr	r0, [pc, #492]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 800231a:	f009 fead 	bl	800c078 <HAL_UART_Receive_DMA>
		stateUartGps	= 1;
 800231e:	4b77      	ldr	r3, [pc, #476]	@ (80024fc <_Z8hwGpsOutv+0x27c>)
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
		break;
 8002324:	e003      	b.n	800232e <_Z8hwGpsOutv+0xae>

	default:
		stateUartGps	= 0;
 8002326:	4b75      	ldr	r3, [pc, #468]	@ (80024fc <_Z8hwGpsOutv+0x27c>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
		break;
 800232c:	bf00      	nop

	/////////////
	// MESSAGE //
	/////////////

	switch ( stateHwGpsEnable ){
 800232e:	4b7a      	ldr	r3, [pc, #488]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d869      	bhi.n	800240a <_Z8hwGpsOutv+0x18a>
 8002336:	a201      	add	r2, pc, #4	@ (adr r2, 800233c <_Z8hwGpsOutv+0xbc>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	0800234d 	.word	0x0800234d
 8002340:	0800237b 	.word	0x0800237b
 8002344:	080023af 	.word	0x080023af
 8002348:	080023ed 	.word	0x080023ed

		case 0:
			availableGps	= 0;
 800234c:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <_Z8hwGpsOutv+0x280>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2101      	movs	r1, #1
 8002356:	4871      	ldr	r0, [pc, #452]	@ (800251c <_Z8hwGpsOutv+0x29c>)
 8002358:	f005 fa00 	bl	800775c <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
			if ( enableGps ){
 800235c:	4b70      	ldr	r3, [pc, #448]	@ (8002520 <_Z8hwGpsOutv+0x2a0>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <_Z8hwGpsOutv+0xf2>
				HAL_UART_Init(&huart5);
 8002364:	4868      	ldr	r0, [pc, #416]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 8002366:	f009 fd7f 	bl	800be68 <HAL_UART_Init>
				stateHwGpsEnable	= 1;
 800236a:	4b6b      	ldr	r3, [pc, #428]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 0;
			}
			break;
 8002370:	e04f      	b.n	8002412 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 0;
 8002372:	4b69      	ldr	r3, [pc, #420]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
			break;
 8002378:	e04b      	b.n	8002412 <_Z8hwGpsOutv+0x192>

		case 1:
			availableGps	= 0;
 800237a:	4b61      	ldr	r3, [pc, #388]	@ (8002500 <_Z8hwGpsOutv+0x280>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
			countGpsAvailable++;
 8002380:	4b68      	ldr	r3, [pc, #416]	@ (8002524 <_Z8hwGpsOutv+0x2a4>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b66      	ldr	r3, [pc, #408]	@ (8002524 <_Z8hwGpsOutv+0x2a4>)
 800238a:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 800238c:	4b65      	ldr	r3, [pc, #404]	@ (8002524 <_Z8hwGpsOutv+0x2a4>)
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <_Z8hwGpsOutv+0x2a8>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d306      	bcc.n	80023a6 <_Z8hwGpsOutv+0x126>
				countGpsAvailable	= 0;
 8002398:	4b62      	ldr	r3, [pc, #392]	@ (8002524 <_Z8hwGpsOutv+0x2a4>)
 800239a:	2200      	movs	r2, #0
 800239c:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 2;
 800239e:	4b5e      	ldr	r3, [pc, #376]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 80023a0:	2202      	movs	r2, #2
 80023a2:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 1;
			}
			break;
 80023a4:	e035      	b.n	8002412 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 1;
 80023a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
			break;
 80023ac:	e031      	b.n	8002412 <_Z8hwGpsOutv+0x192>

		case 2:
			availableGps	= 1;
 80023ae:	4b54      	ldr	r3, [pc, #336]	@ (8002500 <_Z8hwGpsOutv+0x280>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80023b4:	2201      	movs	r2, #1
 80023b6:	2101      	movs	r1, #1
 80023b8:	4858      	ldr	r0, [pc, #352]	@ (800251c <_Z8hwGpsOutv+0x29c>)
 80023ba:	f005 f9cf 	bl	800775c <HAL_GPIO_WritePin>
			countGpsAvailable++;
 80023be:	4b59      	ldr	r3, [pc, #356]	@ (8002524 <_Z8hwGpsOutv+0x2a4>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	4b57      	ldr	r3, [pc, #348]	@ (8002524 <_Z8hwGpsOutv+0x2a4>)
 80023c8:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 80023ca:	4b56      	ldr	r3, [pc, #344]	@ (8002524 <_Z8hwGpsOutv+0x2a4>)
 80023cc:	881a      	ldrh	r2, [r3, #0]
 80023ce:	4b56      	ldr	r3, [pc, #344]	@ (8002528 <_Z8hwGpsOutv+0x2a8>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d306      	bcc.n	80023e4 <_Z8hwGpsOutv+0x164>
				countGpsAvailable	= 0;
 80023d6:	4b53      	ldr	r3, [pc, #332]	@ (8002524 <_Z8hwGpsOutv+0x2a4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 3;
 80023dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 80023de:	2203      	movs	r2, #3
 80023e0:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 2;
			}
			break;
 80023e2:	e016      	b.n	8002412 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 2;
 80023e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
			break;
 80023ea:	e012      	b.n	8002412 <_Z8hwGpsOutv+0x192>

		case 3:
			if ( enableGps ){
 80023ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002520 <_Z8hwGpsOutv+0x2a0>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <_Z8hwGpsOutv+0x17c>
				stateHwGpsEnable	= 3;
 80023f4:	4b48      	ldr	r3, [pc, #288]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 80023f6:	2203      	movs	r2, #3
 80023f8:	701a      	strb	r2, [r3, #0]
			else{

				HAL_UART_DeInit(&huart5);
				stateHwGpsEnable	= 0;
			}
			break;
 80023fa:	e00a      	b.n	8002412 <_Z8hwGpsOutv+0x192>
				HAL_UART_DeInit(&huart5);
 80023fc:	4842      	ldr	r0, [pc, #264]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 80023fe:	f009 fd81 	bl	800bf04 <HAL_UART_DeInit>
				stateHwGpsEnable	= 0;
 8002402:	4b45      	ldr	r3, [pc, #276]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
			break;
 8002408:	e003      	b.n	8002412 <_Z8hwGpsOutv+0x192>
		default:
			stateHwGpsEnable	= 0;
 800240a:	4b43      	ldr	r3, [pc, #268]	@ (8002518 <_Z8hwGpsOutv+0x298>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
			break;
 8002410:	bf00      	nop
		}

	switch( stateConfigGps ){
 8002412:	4b46      	ldr	r3, [pc, #280]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b0a      	cmp	r3, #10
 8002418:	d86d      	bhi.n	80024f6 <_Z8hwGpsOutv+0x276>
 800241a:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <_Z8hwGpsOutv+0x1a0>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	0800244d 	.word	0x0800244d
 8002424:	08002465 	.word	0x08002465
 8002428:	08002477 	.word	0x08002477
 800242c:	0800247f 	.word	0x0800247f
 8002430:	08002491 	.word	0x08002491
 8002434:	08002499 	.word	0x08002499
 8002438:	080024ab 	.word	0x080024ab
 800243c:	080024b3 	.word	0x080024b3
 8002440:	080024c5 	.word	0x080024c5
 8002444:	080024cd 	.word	0x080024cd
 8002448:	080024df 	.word	0x080024df
	case 0:
		if ( availableGps ){
 800244c:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <_Z8hwGpsOutv+0x280>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <_Z8hwGpsOutv+0x1dc>
			//HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
			stateConfigGps	= 1;
 8002454:	4b35      	ldr	r3, [pc, #212]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 800245a:	e04c      	b.n	80024f6 <_Z8hwGpsOutv+0x276>
			stateConfigGps	= 0;
 800245c:	4b33      	ldr	r3, [pc, #204]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
		break;
 8002462:	e048      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 1:
		HAL_UART_Transmit_DMA(&huart5, commandUart, sizeof(commandUart) - 1);
 8002464:	2219      	movs	r2, #25
 8002466:	4932      	ldr	r1, [pc, #200]	@ (8002530 <_Z8hwGpsOutv+0x2b0>)
 8002468:	4827      	ldr	r0, [pc, #156]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 800246a:	f009 fd89 	bl	800bf80 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 2;
 800246e:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
		break;
 8002474:	e03f      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 2:

		stateConfigGps	= 3;
 8002476:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 8002478:	2203      	movs	r2, #3
 800247a:	701a      	strb	r2, [r3, #0]
		break;
 800247c:	e03b      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 3:
		HAL_UART_Transmit_DMA(&huart5, commandUart3, sizeof(commandUart2) - 1);
 800247e:	2219      	movs	r2, #25
 8002480:	492c      	ldr	r1, [pc, #176]	@ (8002534 <_Z8hwGpsOutv+0x2b4>)
 8002482:	4821      	ldr	r0, [pc, #132]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 8002484:	f009 fd7c 	bl	800bf80 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 4;
 8002488:	4b28      	ldr	r3, [pc, #160]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 800248a:	2204      	movs	r2, #4
 800248c:	701a      	strb	r2, [r3, #0]
		break;
 800248e:	e032      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 4:
		//HAL_UART_Transmit_DMA(&huart5, commandUart4, sizeof(commandUart4) - 1);
		stateConfigGps	= 5;
 8002490:	4b26      	ldr	r3, [pc, #152]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 8002492:	2205      	movs	r2, #5
 8002494:	701a      	strb	r2, [r3, #0]
		break;
 8002496:	e02e      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 5:
		HAL_UART_Transmit_DMA(&huart5, commandUart2, sizeof(commandUart3) - 1);
 8002498:	2219      	movs	r2, #25
 800249a:	4927      	ldr	r1, [pc, #156]	@ (8002538 <_Z8hwGpsOutv+0x2b8>)
 800249c:	481a      	ldr	r0, [pc, #104]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 800249e:	f009 fd6f 	bl	800bf80 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart5, sizeof(commandUart5) - 1);
		stateConfigGps	= 6;
 80024a2:	4b22      	ldr	r3, [pc, #136]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 80024a4:	2206      	movs	r2, #6
 80024a6:	701a      	strb	r2, [r3, #0]
		break;
 80024a8:	e025      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 6:
		//HAL_UART_Transmit_DMA(&huart5, commandUart6, sizeof(commandUart6) - 1);
		stateConfigGps	= 7;
 80024aa:	4b20      	ldr	r3, [pc, #128]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	701a      	strb	r2, [r3, #0]
		break;
 80024b0:	e021      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 7:
		HAL_UART_Transmit_DMA(&huart5, commandUart8, sizeof(commandUart8) - 1);
 80024b2:	2211      	movs	r2, #17
 80024b4:	4921      	ldr	r1, [pc, #132]	@ (800253c <_Z8hwGpsOutv+0x2bc>)
 80024b6:	4814      	ldr	r0, [pc, #80]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 80024b8:	f009 fd62 	bl	800bf80 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart7, sizeof(commandUart7) - 1);
		stateConfigGps	= 8;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 80024be:	2208      	movs	r2, #8
 80024c0:	701a      	strb	r2, [r3, #0]
		break;
 80024c2:	e018      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 8:

		stateConfigGps	= 9;
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 80024c6:	2209      	movs	r2, #9
 80024c8:	701a      	strb	r2, [r3, #0]
		break;
 80024ca:	e014      	b.n	80024f6 <_Z8hwGpsOutv+0x276>

	case 9:
		HAL_UART_Transmit_DMA(&huart5, commandUart9, sizeof(commandUart9) - 1);
 80024cc:	220d      	movs	r2, #13
 80024ce:	491c      	ldr	r1, [pc, #112]	@ (8002540 <_Z8hwGpsOutv+0x2c0>)
 80024d0:	480d      	ldr	r0, [pc, #52]	@ (8002508 <_Z8hwGpsOutv+0x288>)
 80024d2:	f009 fd55 	bl	800bf80 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 10;
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 80024d8:	220a      	movs	r2, #10
 80024da:	701a      	strb	r2, [r3, #0]
		break;
 80024dc:	e00b      	b.n	80024f6 <_Z8hwGpsOutv+0x276>
	case 10:
		if ( enableGps ){
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <_Z8hwGpsOutv+0x2a0>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <_Z8hwGpsOutv+0x26e>
			stateConfigGps	= 10;
 80024e6:	4b11      	ldr	r3, [pc, #68]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 80024e8:	220a      	movs	r2, #10
 80024ea:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 80024ec:	e002      	b.n	80024f4 <_Z8hwGpsOutv+0x274>
			stateConfigGps	= 0;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <_Z8hwGpsOutv+0x2ac>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
		break;
 80024f4:	bf00      	nop
	}
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200005f5 	.word	0x200005f5
 8002500:	200005e4 	.word	0x200005e4
 8002504:	20000be4 	.word	0x20000be4
 8002508:	20000944 	.word	0x20000944
 800250c:	200005f6 	.word	0x200005f6
 8002510:	200005f8 	.word	0x200005f8
 8002514:	200005ec 	.word	0x200005ec
 8002518:	200005ea 	.word	0x200005ea
 800251c:	48000c00 	.word	0x48000c00
 8002520:	20000390 	.word	0x20000390
 8002524:	200005e6 	.word	0x200005e6
 8002528:	200005e8 	.word	0x200005e8
 800252c:	200005eb 	.word	0x200005eb
 8002530:	20000028 	.word	0x20000028
 8002534:	20000060 	.word	0x20000060
 8002538:	20000044 	.word	0x20000044
 800253c:	2000007c 	.word	0x2000007c
 8002540:	20000090 	.word	0x20000090

08002544 <_Z9hwLoraOutv>:

//////////
// LORA //
//////////

void hwLoraOut(){
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
	 *
	 * Transmite un comando por hardware
	 *
	 */

	if ( flagTxLora ){													// Si hay una señal de transmision
 8002548:	4b33      	ldr	r3, [pc, #204]	@ (8002618 <_Z9hwLoraOutv+0xd4>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d012      	beq.n	8002576 <_Z9hwLoraOutv+0x32>
		flagTxLora	= 0;												// Reinicia señal
 8002550:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <_Z9hwLoraOutv+0xd4>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, loraTxCommand0, sizeTxCommand0);	// Transmite por DMA para no estancar procesamiento
 8002556:	4b31      	ldr	r3, [pc, #196]	@ (800261c <_Z9hwLoraOutv+0xd8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <_Z9hwLoraOutv+0xdc>)
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	4830      	ldr	r0, [pc, #192]	@ (8002624 <_Z9hwLoraOutv+0xe0>)
 8002562:	f009 fd0d 	bl	800bf80 <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));			// Inicia recepcion por DMA
 8002566:	2201      	movs	r2, #1
 8002568:	492f      	ldr	r1, [pc, #188]	@ (8002628 <_Z9hwLoraOutv+0xe4>)
 800256a:	482e      	ldr	r0, [pc, #184]	@ (8002624 <_Z9hwLoraOutv+0xe0>)
 800256c:	f009 fd84 	bl	800c078 <HAL_UART_Receive_DMA>
		flagUartGps	= 1;
 8002570:	4b2e      	ldr	r3, [pc, #184]	@ (800262c <_Z9hwLoraOutv+0xe8>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
	 * S0: Espera 500ms, indica que esta deshabilitado
	 * S1: Indica que esta deshabiltiado, espera señal de RESET
	 *
	 */

	switch ( stateResetHwLora ){
 8002576:	4b2e      	ldr	r3, [pc, #184]	@ (8002630 <_Z9hwLoraOutv+0xec>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <_Z9hwLoraOutv+0x40>
 800257e:	2b01      	cmp	r3, #1
 8002580:	d020      	beq.n	80025c4 <_Z9hwLoraOutv+0x80>
 8002582:	e042      	b.n	800260a <_Z9hwLoraOutv+0xc6>
	// S0 - DISABLE //
	//////////////////

	case 0:

		countResetHwLora++;										// Suma 1 al contador
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <_Z9hwLoraOutv+0xf0>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b29      	ldr	r3, [pc, #164]	@ (8002634 <_Z9hwLoraOutv+0xf0>)
 800258e:	801a      	strh	r2, [r3, #0]
		flagEnableHwLora	= 0;								// Indica que el chip esta deshabilitado
 8002590:	4b29      	ldr	r3, [pc, #164]	@ (8002638 <_Z9hwLoraOutv+0xf4>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	// Pin en RESET
 8002596:	2200      	movs	r2, #0
 8002598:	2104      	movs	r1, #4
 800259a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800259e:	f005 f8dd 	bl	800775c <HAL_GPIO_WritePin>

		if ( countResetHwLora >= resetHwLora ){					// Si pasa el limite de reset
 80025a2:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <_Z9hwLoraOutv+0xf0>)
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	4b25      	ldr	r3, [pc, #148]	@ (800263c <_Z9hwLoraOutv+0xf8>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d306      	bcc.n	80025bc <_Z9hwLoraOutv+0x78>
			countResetHwLora	= 0;							// Reinicia contador
 80025ae:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <_Z9hwLoraOutv+0xf0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	801a      	strh	r2, [r3, #0]
			stateResetHwLora	= 1;							// Pasa a S1
 80025b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <_Z9hwLoraOutv+0xec>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateResetHwLora	= 0;							// Espera en S0
		}
		break;
 80025ba:	e02a      	b.n	8002612 <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 0;							// Espera en S0
 80025bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <_Z9hwLoraOutv+0xec>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
		break;
 80025c2:	e026      	b.n	8002612 <_Z9hwLoraOutv+0xce>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);	// Pin en SET
 80025c4:	2201      	movs	r2, #1
 80025c6:	2104      	movs	r1, #4
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025cc:	f005 f8c6 	bl	800775c <HAL_GPIO_WritePin>
		flagEnableHwLora	= 1;							// Indica que el chip esta habilitado
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <_Z9hwLoraOutv+0xf4>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]

		if ( flagResetHwLora ){								// Si se da la señal de reinicio
 80025d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <_Z9hwLoraOutv+0xfc>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d011      	beq.n	8002602 <_Z9hwLoraOutv+0xbe>
			flagResetHwLora		= 0;						// Apaga señal
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <_Z9hwLoraOutv+0xfc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 80025e4:	2201      	movs	r2, #1
 80025e6:	4910      	ldr	r1, [pc, #64]	@ (8002628 <_Z9hwLoraOutv+0xe4>)
 80025e8:	480e      	ldr	r0, [pc, #56]	@ (8002624 <_Z9hwLoraOutv+0xe0>)
 80025ea:	f009 fd45 	bl	800c078 <HAL_UART_Receive_DMA>
			countResetHwLora2++;
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <_Z9hwLoraOutv+0x100>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <_Z9hwLoraOutv+0x100>)
 80025f8:	701a      	strb	r2, [r3, #0]
			stateResetHwLora	= 0;						// Pasa  S0
 80025fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <_Z9hwLoraOutv+0xec>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateResetHwLora	= 1;						// Espera en S1
		}
		break;
 8002600:	e007      	b.n	8002612 <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 1;						// Espera en S1
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <_Z9hwLoraOutv+0xec>)
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
		break;
 8002608:	e003      	b.n	8002612 <_Z9hwLoraOutv+0xce>

	default:
		stateResetHwLora	= 0;
 800260a:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <_Z9hwLoraOutv+0xec>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
		break;
 8002610:	bf00      	nop

	}
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200005ed 	.word	0x200005ed
 800261c:	20001274 	.word	0x20001274
 8002620:	20001278 	.word	0x20001278
 8002624:	200008bc 	.word	0x200008bc
 8002628:	20000bf4 	.word	0x20000bf4
 800262c:	200005ec 	.word	0x200005ec
 8002630:	200005ee 	.word	0x200005ee
 8002634:	200005f0 	.word	0x200005f0
 8002638:	200005ef 	.word	0x200005ef
 800263c:	200005f2 	.word	0x200005f2
 8002640:	20000641 	.word	0x20000641
 8002644:	200005f4 	.word	0x200005f4

08002648 <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d12c      	bne.n	80026b2 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800265e:	4293      	cmp	r3, r2
 8002660:	d127      	bne.n	80026b2 <_Z41__static_initialization_and_destruction_0ii+0x6a>
uint16_t limitGpsAvailable	= 5000/superloop;
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	f241 3388 	movw	r3, #5000	@ 0x1388
 800266c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002674:	801a      	strh	r2, [r3, #0]
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002680:	fb93 f3f2 	sdiv	r3, r3, r2
 8002684:	b29a      	uxth	r2, r3
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002688:	801a      	strh	r2, [r3, #0]
uint16_t limitUartGps	= 20000/superloop;	//
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002694:	fb93 f3f2 	sdiv	r3, r3, r2
 8002698:	b29a      	uxth	r2, r3
 800269a:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800269c:	801a      	strh	r2, [r3, #0]
uint16_t limitLed	= 500/superloop;	//
 800269e:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80026b0:	801a      	strh	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000433 	.word	0x20000433
 80026c4:	200005e8 	.word	0x200005e8
 80026c8:	200005f2 	.word	0x200005f2
 80026cc:	200005f8 	.word	0x200005f8
 80026d0:	200005fe 	.word	0x200005fe

080026d4 <_GLOBAL__sub_I_availableGps>:
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026dc:	2001      	movs	r0, #1
 80026de:	f7ff ffb3 	bl	8002648 <_Z41__static_initialization_and_destruction_0ii>
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <_Z9linkInputv>:
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
uint16_t countBat;						// Contador bateria

/***** INPUT *****/

void linkInput(){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	linkInGps();
 80026e8:	f000 f94c 	bl	8002984 <_Z9linkInGpsv>
	linkInLora();
 80026ec:	f000 f8cc 	bl	8002888 <_Z10linkInLorav>
	linkBoton();
 80026f0:	f000 fb6a 	bl	8002dc8 <_Z9linkBotonv>
	linkAnalog();
 80026f4:	f000 fbce 	bl	8002e94 <_Z10linkAnalogv>
	linkBattery();
 80026f8:	f000 f802 	bl	8002700 <_Z11linkBatteryv>
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_Z11linkBatteryv>:
 * Output:
 * 		errorHardware[6]
 *
 */

void linkBattery(){
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

	batScaled = battery *510/10000;		// Escalamiento de bateria
 8002704:	4b58      	ldr	r3, [pc, #352]	@ (8002868 <_Z11linkBatteryv+0x168>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4613      	mov	r3, r2
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4a56      	ldr	r2, [pc, #344]	@ (800286c <_Z11linkBatteryv+0x16c>)
 8002714:	fb82 1203 	smull	r1, r2, r2, r3
 8002718:	1312      	asrs	r2, r2, #12
 800271a:	17db      	asrs	r3, r3, #31
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	4a54      	ldr	r2, [pc, #336]	@ (8002870 <_Z11linkBatteryv+0x170>)
 8002720:	6013      	str	r3, [r2, #0]

	switch ( stateBattery ){
 8002722:	4b54      	ldr	r3, [pc, #336]	@ (8002874 <_Z11linkBatteryv+0x174>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b04      	cmp	r3, #4
 8002728:	f200 8095 	bhi.w	8002856 <_Z11linkBatteryv+0x156>
 800272c:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <_Z11linkBatteryv+0x34>)
 800272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002732:	bf00      	nop
 8002734:	08002749 	.word	0x08002749
 8002738:	08002777 	.word	0x08002777
 800273c:	08002799 	.word	0x08002799
 8002740:	080027e7 	.word	0x080027e7
 8002744:	08002809 	.word	0x08002809
	//////////////////////////
	// S0 -  WAIT STABILITY //
	//////////////////////////

	case 0:
		countBat++;						// Suma 1 al contador
 8002748:	4b4b      	ldr	r3, [pc, #300]	@ (8002878 <_Z11linkBatteryv+0x178>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <_Z11linkBatteryv+0x178>)
 8002752:	801a      	strh	r2, [r3, #0]

		if ( countBat >= limitBat ){	// Si pasa limite
 8002754:	4b48      	ldr	r3, [pc, #288]	@ (8002878 <_Z11linkBatteryv+0x178>)
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	4b48      	ldr	r3, [pc, #288]	@ (800287c <_Z11linkBatteryv+0x17c>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d306      	bcc.n	800276e <_Z11linkBatteryv+0x6e>
			countBat		= 0;		// Reinicia contador
 8002760:	4b45      	ldr	r3, [pc, #276]	@ (8002878 <_Z11linkBatteryv+0x178>)
 8002762:	2200      	movs	r2, #0
 8002764:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;		// Pasa a S1
 8002766:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <_Z11linkBatteryv+0x174>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateBattery	= 0;		// Queda en S0
		}
		break;
 800276c:	e077      	b.n	800285e <_Z11linkBatteryv+0x15e>
			stateBattery	= 0;		// Queda en S0
 800276e:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <_Z11linkBatteryv+0x174>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
		break;
 8002774:	e073      	b.n	800285e <_Z11linkBatteryv+0x15e>
	////////////////////////
	// S1 - CHECK BATTERY //
	////////////////////////

	case 1:
		errorHardware[6]	= 0;			// Sin error
 8002776:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <_Z11linkBatteryv+0x180>)
 8002778:	2200      	movs	r2, #0
 800277a:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria baja del limite
 800277c:	4b3c      	ldr	r3, [pc, #240]	@ (8002870 <_Z11linkBatteryv+0x170>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b40      	ldr	r3, [pc, #256]	@ (8002884 <_Z11linkBatteryv+0x184>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	da03      	bge.n	8002790 <_Z11linkBatteryv+0x90>
			stateBattery	= 2;			// Pasa a S2
 8002788:	4b3a      	ldr	r3, [pc, #232]	@ (8002874 <_Z11linkBatteryv+0x174>)
 800278a:	2202      	movs	r2, #2
 800278c:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 1;			// Queda en S1
		}
		break;
 800278e:	e066      	b.n	800285e <_Z11linkBatteryv+0x15e>
			stateBattery	= 1;			// Queda en S1
 8002790:	4b38      	ldr	r3, [pc, #224]	@ (8002874 <_Z11linkBatteryv+0x174>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
		break;
 8002796:	e062      	b.n	800285e <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S2 - CHECK STABILITY //
	//////////////////////////

	case 2:
		errorHardware[6]	= 0;			// Sin error
 8002798:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <_Z11linkBatteryv+0x180>)
 800279a:	2200      	movs	r2, #0
 800279c:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 800279e:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <_Z11linkBatteryv+0x178>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <_Z11linkBatteryv+0x178>)
 80027a8:	801a      	strh	r2, [r3, #0]

		if ( batScaled > thresholdBat ){	// Si la bateria esta Ok
 80027aa:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <_Z11linkBatteryv+0x170>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b35      	ldr	r3, [pc, #212]	@ (8002884 <_Z11linkBatteryv+0x184>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	dd06      	ble.n	80027c4 <_Z11linkBatteryv+0xc4>
			countBat		= 0;			// Reinicia contador
 80027b6:	4b30      	ldr	r3, [pc, #192]	@ (8002878 <_Z11linkBatteryv+0x178>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Vuelve a S1
 80027bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <_Z11linkBatteryv+0x174>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 2;			// Queda en S2
		}
		break;
 80027c2:	e04c      	b.n	800285e <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si el contador pasa limite
 80027c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002878 <_Z11linkBatteryv+0x178>)
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	4b2c      	ldr	r3, [pc, #176]	@ (800287c <_Z11linkBatteryv+0x17c>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d306      	bcc.n	80027de <_Z11linkBatteryv+0xde>
			countBat		= 0;			// Reinicia contador
 80027d0:	4b29      	ldr	r3, [pc, #164]	@ (8002878 <_Z11linkBatteryv+0x178>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
 80027d6:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <_Z11linkBatteryv+0x174>)
 80027d8:	2203      	movs	r2, #3
 80027da:	701a      	strb	r2, [r3, #0]
		break;
 80027dc:	e03f      	b.n	800285e <_Z11linkBatteryv+0x15e>
			stateBattery	= 2;			// Queda en S2
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <_Z11linkBatteryv+0x174>)
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]
		break;
 80027e4:	e03b      	b.n	800285e <_Z11linkBatteryv+0x15e>
	///////////////////////////////////
	// S3 - CHECK BATTERY WITH ERROR //
	///////////////////////////////////

	case 3:
		errorHardware[6]	= 1;			// Indica error
 80027e6:	4b26      	ldr	r3, [pc, #152]	@ (8002880 <_Z11linkBatteryv+0x180>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria esta baja
 80027ec:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <_Z11linkBatteryv+0x170>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <_Z11linkBatteryv+0x184>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	da03      	bge.n	8002800 <_Z11linkBatteryv+0x100>
			stateBattery	= 3;			// Sigue en S3
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <_Z11linkBatteryv+0x174>)
 80027fa:	2203      	movs	r2, #3
 80027fc:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 4;			// Pasa a S4
		}
		break;
 80027fe:	e02e      	b.n	800285e <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Pasa a S4
 8002800:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <_Z11linkBatteryv+0x174>)
 8002802:	2204      	movs	r2, #4
 8002804:	701a      	strb	r2, [r3, #0]
		break;
 8002806:	e02a      	b.n	800285e <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S4 - CHECK STABILITY //
	//////////////////////////

	case 4:
		errorHardware[6]	= 1;			// Indica error
 8002808:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <_Z11linkBatteryv+0x180>)
 800280a:	2201      	movs	r2, #1
 800280c:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 800280e:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <_Z11linkBatteryv+0x178>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	3301      	adds	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <_Z11linkBatteryv+0x178>)
 8002818:	801a      	strh	r2, [r3, #0]

		if ( batScaled < thresholdBat ){	// Si la bateria sigue baja
 800281a:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <_Z11linkBatteryv+0x170>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <_Z11linkBatteryv+0x184>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	da06      	bge.n	8002834 <_Z11linkBatteryv+0x134>
			countBat		= 0;			// Reinicia contador
 8002826:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <_Z11linkBatteryv+0x178>)
 8002828:	2200      	movs	r2, #0
 800282a:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Vuelve a S3
 800282c:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <_Z11linkBatteryv+0x174>)
 800282e:	2203      	movs	r2, #3
 8002830:	701a      	strb	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 4;			// Queda en S4
		}
		break;
 8002832:	e014      	b.n	800285e <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si contador pasa limite
 8002834:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <_Z11linkBatteryv+0x178>)
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	4b10      	ldr	r3, [pc, #64]	@ (800287c <_Z11linkBatteryv+0x17c>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d306      	bcc.n	800284e <_Z11linkBatteryv+0x14e>
			countBat		= 0;			// Reinicia contador
 8002840:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <_Z11linkBatteryv+0x178>)
 8002842:	2200      	movs	r2, #0
 8002844:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
 8002846:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <_Z11linkBatteryv+0x174>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
		break;
 800284c:	e007      	b.n	800285e <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Queda en S4
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <_Z11linkBatteryv+0x174>)
 8002850:	2204      	movs	r2, #4
 8002852:	701a      	strb	r2, [r3, #0]
		break;
 8002854:	e003      	b.n	800285e <_Z11linkBatteryv+0x15e>

	default:
		stateBattery	= 0;
 8002856:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <_Z11linkBatteryv+0x174>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
		break;
 800285c:	bf00      	nop
	}
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	2000054c 	.word	0x2000054c
 800286c:	68db8bad 	.word	0x68db8bad
 8002870:	20000638 	.word	0x20000638
 8002874:	20000636 	.word	0x20000636
 8002878:	2000063e 	.word	0x2000063e
 800287c:	2000063c 	.word	0x2000063c
 8002880:	200005dc 	.word	0x200005dc
 8002884:	200000a0 	.word	0x200000a0

08002888 <_Z10linkInLorav>:
 *				INPUT	:	flagEnableHwLora
 *
 *				OUTPUT	:	flagWdLora
 */

void linkInLora(){
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( loraInput.newResponse() ){						// Si hay nueva respuesta desde el modulo lora
 800288c:	4833      	ldr	r0, [pc, #204]	@ (800295c <_Z10linkInLorav+0xd4>)
 800288e:	f000 fece 	bl	800362e <_ZN9loraInput11newResponseEv>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <_Z10linkInLorav+0x52>
		responseLora	 = loraInput.response();		// Guarda la respuesta
 8002898:	4830      	ldr	r0, [pc, #192]	@ (800295c <_Z10linkInLorav+0xd4>)
 800289a:	f000 fedb 	bl	8003654 <_ZN9loraInput8responseEv>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002960 <_Z10linkInLorav+0xd8>)
 80028a2:	6013      	str	r3, [r2, #0]
		responseLoraSize = loraInput.responseSize();	// Guarda tamaño de la respuesta
 80028a4:	482d      	ldr	r0, [pc, #180]	@ (800295c <_Z10linkInLorav+0xd4>)
 80028a6:	f000 fee1 	bl	800366c <_ZN9loraInput12responseSizeEv>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <_Z10linkInLorav+0xdc>)
 80028b0:	701a      	strb	r2, [r3, #0]

		loraCheck.newResponse(responseLora, responseLoraSize);	// Inserta respuesta en modulo de checkeo de respuesta
 80028b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <_Z10linkInLorav+0xd8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002964 <_Z10linkInLorav+0xdc>)
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	482a      	ldr	r0, [pc, #168]	@ (8002968 <_Z10linkInLorav+0xe0>)
 80028be:	f000 fe0c 	bl	80034da <_ZN9loraCheck11newResponseEPhh>
		loraTimeWd.setInput();									// Indica al watchdog que llego mensaje
 80028c2:	482a      	ldr	r0, [pc, #168]	@ (800296c <_Z10linkInLorav+0xe4>)
 80028c4:	f000 fdc2 	bl	800344c <_ZN9wdTimeout8setInputEv>
		qttyMessagesInputs++;									// Contador de respuestas recibidas
 80028c8:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <_Z10linkInLorav+0xe8>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <_Z10linkInLorav+0xe8>)
 80028d2:	701a      	strb	r2, [r3, #0]
		flagUartGps	= 1;
 80028d4:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <_Z10linkInLorav+0xec>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]

	//////////////
	// WATCHDOG //
	//////////////

	switch ( stateWdLora ){
 80028da:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <_Z10linkInLorav+0xf0>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d031      	beq.n	8002946 <_Z10linkInLorav+0xbe>
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	dc36      	bgt.n	8002954 <_Z10linkInLorav+0xcc>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <_Z10linkInLorav+0x68>
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d012      	beq.n	8002914 <_Z10linkInLorav+0x8c>
		flagWdLora	= 1;			// Reinicia chip por hw
		stateWdLora	= 0;			// Vuelve a S0
		break;

	default:
		break;
 80028ee:	e031      	b.n	8002954 <_Z10linkInLorav+0xcc>
		flagWdLora	= 0;			// Reinicia indicador de reset
 80028f0:	4b22      	ldr	r3, [pc, #136]	@ (800297c <_Z10linkInLorav+0xf4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
		if ( flagEnableHwLora ){	// Si el chip esta habilitado
 80028f6:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <_Z10linkInLorav+0xf8>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <_Z10linkInLorav+0x84>
			loraTimeWd.setOutput();	// Indica que salio un mensaje
 80028fe:	481b      	ldr	r0, [pc, #108]	@ (800296c <_Z10linkInLorav+0xe4>)
 8002900:	f000 fd74 	bl	80033ec <_ZN9wdTimeout9setOutputEv>
			stateWdLora = 1;		// Pasa a S1
 8002904:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <_Z10linkInLorav+0xf0>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
		break;
 800290a:	e024      	b.n	8002956 <_Z10linkInLorav+0xce>
			stateWdLora = 0;		// Espera en S0
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <_Z10linkInLorav+0xf0>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
		break;
 8002912:	e020      	b.n	8002956 <_Z10linkInLorav+0xce>
		loraTimeWd.addOne();			// Suma 1 al wd
 8002914:	4815      	ldr	r0, [pc, #84]	@ (800296c <_Z10linkInLorav+0xe4>)
 8002916:	f000 fd79 	bl	800340c <_ZN9wdTimeout6addOneEv>
		if ( loraTimeWd.timeOut() ){	// Si se cumple timeout
 800291a:	4814      	ldr	r0, [pc, #80]	@ (800296c <_Z10linkInLorav+0xe4>)
 800291c:	f000 fdaa 	bl	8003474 <_ZN9wdTimeout7timeOutEv>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <_Z10linkInLorav+0xa6>
			stateWdLora = 2;			// Pasa a S2
 8002926:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <_Z10linkInLorav+0xf0>)
 8002928:	2202      	movs	r2, #2
 800292a:	701a      	strb	r2, [r3, #0]
		break;
 800292c:	e013      	b.n	8002956 <_Z10linkInLorav+0xce>
		else if ( flagEnableHwLora ){	// Si sigue habilitado por hw
 800292e:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <_Z10linkInLorav+0xf8>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <_Z10linkInLorav+0xb6>
			stateWdLora = 1;			// Espera en S1
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <_Z10linkInLorav+0xf0>)
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
		break;
 800293c:	e00b      	b.n	8002956 <_Z10linkInLorav+0xce>
			stateWdLora	= 0;			// Pasa a S0
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <_Z10linkInLorav+0xf0>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
		break;
 8002944:	e007      	b.n	8002956 <_Z10linkInLorav+0xce>
		flagWdLora	= 1;			// Reinicia chip por hw
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <_Z10linkInLorav+0xf4>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
		stateWdLora	= 0;			// Vuelve a S0
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <_Z10linkInLorav+0xf0>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
		break;
 8002952:	e000      	b.n	8002956 <_Z10linkInLorav+0xce>
		break;
 8002954:	bf00      	nop
	}
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000c38 	.word	0x20000c38
 8002960:	20000614 	.word	0x20000614
 8002964:	20000618 	.word	0x20000618
 8002968:	20000c78 	.word	0x20000c78
 800296c:	2000118c 	.word	0x2000118c
 8002970:	20000619 	.word	0x20000619
 8002974:	200005ec 	.word	0x200005ec
 8002978:	2000061a 	.word	0x2000061a
 800297c:	20000640 	.word	0x20000640
 8002980:	200005ef 	.word	0x200005ef

08002984 <_Z9linkInGpsv>:
 *				stopGps		|	Indicador detener GPS
 *				warning[]	|	Indica que no hay gps validos
 *
 */

void linkInGps(){
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0

	switch ( stateGpsLink ){
 8002988:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b05      	cmp	r3, #5
 800298e:	f200 8204 	bhi.w	8002d9a <_Z9linkInGpsv+0x416>
 8002992:	a201      	add	r2, pc, #4	@ (adr r2, 8002998 <_Z9linkInGpsv+0x14>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	080029b1 	.word	0x080029b1
 800299c:	080029cf 	.word	0x080029cf
 80029a0:	08002a33 	.word	0x08002a33
 80029a4:	08002a59 	.word	0x08002a59
 80029a8:	08002a7d 	.word	0x08002a7d
 80029ac:	08002acd 	.word	0x08002acd
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		if ( startGps ){			// Si se inicia GPS
 80029b0:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa4 <_Z9linkInGpsv+0x120>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d006      	beq.n	80029c6 <_Z9linkInGpsv+0x42>
			startGps		= 0;	// Reinicia indicador
 80029b8:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa4 <_Z9linkInGpsv+0x120>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 1;	// Pasa a S1
 80029be:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateGpsLink	= 0;	// Espera en S0
		}
		break;
 80029c4:	e1e9      	b.n	8002d9a <_Z9linkInGpsv+0x416>
			stateGpsLink	= 0;	// Espera en S0
 80029c6:	4b36      	ldr	r3, [pc, #216]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
		break;
 80029cc:	e1e5      	b.n	8002d9a <_Z9linkInGpsv+0x416>
	///////////////////////////
	// S1 - WAIT FOR MESSAGE //
	///////////////////////////

	case 1:
		countGpsLink++;								// Suma 1 al contador
 80029ce:	4b36      	ldr	r3, [pc, #216]	@ (8002aa8 <_Z9linkInGpsv+0x124>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	4a34      	ldr	r2, [pc, #208]	@ (8002aa8 <_Z9linkInGpsv+0x124>)
 80029d6:	6013      	str	r3, [r2, #0]
		gpsNewMessage	= 0;						// Reinicia flag nuevo mensaje
 80029d8:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <_Z9linkInGpsv+0x128>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]

		if ( gpsInput.getNewMessage() ){			// Si llega nuevo mensaje
 80029de:	4834      	ldr	r0, [pc, #208]	@ (8002ab0 <_Z9linkInGpsv+0x12c>)
 80029e0:	f7fe fe51 	bl	8001686 <_ZN8gpsInput13getNewMessageEv>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <_Z9linkInGpsv+0x7a>
			gpsNewMessage	= 1;					// Marca flag de nuevo mensaje
 80029ea:	4b30      	ldr	r3, [pc, #192]	@ (8002aac <_Z9linkInGpsv+0x128>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
			gpsValid		= gpsInput.getValid();	// Copia mensaje valido
 80029f0:	482f      	ldr	r0, [pc, #188]	@ (8002ab0 <_Z9linkInGpsv+0x12c>)
 80029f2:	f7fe fe32 	bl	800165a <_ZN8gpsInput8getValidEv>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab4 <_Z9linkInGpsv+0x130>)
 80029fc:	701a      	strb	r2, [r3, #0]
		}

		if ( countGpsLink >= limitGpsLink ){		// Si pasa limite de 5 min
 80029fe:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <_Z9linkInGpsv+0x124>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <_Z9linkInGpsv+0x134>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	db03      	blt.n	8002a12 <_Z9linkInGpsv+0x8e>
			stateGpsLink	= 2;					// Cierra en S2
 8002a0a:	4b25      	ldr	r3, [pc, #148]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 4;					// Pasa a S4
		}*/
		else{										// Si no
			stateGpsLink	= 1;					// Espera
		}
		break;
 8002a10:	e1c3      	b.n	8002d9a <_Z9linkInGpsv+0x416>
		else if ( gpsNewMessage && gpsValid ){		// Si llega mensaje valido
 8002a12:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <_Z9linkInGpsv+0x128>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <_Z9linkInGpsv+0xa6>
 8002a1a:	4b26      	ldr	r3, [pc, #152]	@ (8002ab4 <_Z9linkInGpsv+0x130>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <_Z9linkInGpsv+0xa6>
			stateGpsLink	= 3;					// Pasa a S3
 8002a22:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 8002a24:	2203      	movs	r2, #3
 8002a26:	701a      	strb	r2, [r3, #0]
		break;
 8002a28:	e1b7      	b.n	8002d9a <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;					// Espera
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
		break;
 8002a30:	e1b3      	b.n	8002d9a <_Z9linkInGpsv+0x416>
	///////////////////////
	// S2 - STOP MEASURE //
	///////////////////////

	case 2:
		savedGps			= 0;	//  Reinicia indicador coordenadas guardadas
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <_Z9linkInGpsv+0x138>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
		countValidMsgGps	= 0;	//	Reinicia contador mensajes validos
 8002a38:	4b21      	ldr	r3, [pc, #132]	@ (8002ac0 <_Z9linkInGpsv+0x13c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
		countInvalidMsgGps	= 0;	//	Reinicia contador mensajes invalidos
 8002a3e:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <_Z9linkInGpsv+0x140>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
		countGpsLink		= 0;	//	Reinicia contador de espera mensajes gps
 8002a44:	4b18      	ldr	r3, [pc, #96]	@ (8002aa8 <_Z9linkInGpsv+0x124>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
		stopGps				= 1;	//	Fija apagado de GPS
 8002a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <_Z9linkInGpsv+0x144>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
		stateGpsLink		= 0;	//	Vuelve a S0
 8002a50:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
		break;
 8002a56:	e1a0      	b.n	8002d9a <_Z9linkInGpsv+0x416>
	////////////////////////////
	// S3 - NEW VALID MESSAGE //
	////////////////////////////

	case 3:
		countValidMsgGps++;				// Suma 1 a mensaje valids nuevos
 8002a58:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <_Z9linkInGpsv+0x13c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	4b17      	ldr	r3, [pc, #92]	@ (8002ac0 <_Z9linkInGpsv+0x13c>)
 8002a62:	701a      	strb	r2, [r3, #0]

		if ( countValidMsgGps >= 4 ){	// Si es mayor a 10 mensajes
 8002a64:	4b16      	ldr	r3, [pc, #88]	@ (8002ac0 <_Z9linkInGpsv+0x13c>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d903      	bls.n	8002a74 <_Z9linkInGpsv+0xf0>
			stateGpsLink	= 5;		// Pasa a S5
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 8002a6e:	2205      	movs	r2, #5
 8002a70:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateGpsLink	= 1;		// Vuelve a S5
		}
		break;
 8002a72:	e192      	b.n	8002d9a <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;		// Vuelve a S5
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
		break;
 8002a7a:	e18e      	b.n	8002d9a <_Z9linkInGpsv+0x416>
	//////////////////////////////
	// S4 - NEW INVALID MESSAGE //
	//////////////////////////////

	case 4:
		countInvalidMsgGps++;				// Suma 1 a mensaje invalido nuevos
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <_Z9linkInGpsv+0x140>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <_Z9linkInGpsv+0x140>)
 8002a86:	701a      	strb	r2, [r3, #0]

		if ( countInvalidMsgGps >= 30 ){	// Si es mayor a 10 mensajes
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <_Z9linkInGpsv+0x140>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b1d      	cmp	r3, #29
 8002a8e:	d903      	bls.n	8002a98 <_Z9linkInGpsv+0x114>
			stateGpsLink	= 2;			// Pasa a S2
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 8002a92:	2202      	movs	r2, #2
 8002a94:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateGpsLink	= 1;			// Pasa a S1
		}
		break;
 8002a96:	e180      	b.n	8002d9a <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;			// Pasa a S1
 8002a98:	4b01      	ldr	r3, [pc, #4]	@ (8002aa0 <_Z9linkInGpsv+0x11c>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
		break;
 8002a9e:	e17c      	b.n	8002d9a <_Z9linkInGpsv+0x416>
 8002aa0:	20000605 	.word	0x20000605
 8002aa4:	2000038f 	.word	0x2000038f
 8002aa8:	20000608 	.word	0x20000608
 8002aac:	20000606 	.word	0x20000606
 8002ab0:	20000b4c 	.word	0x20000b4c
 8002ab4:	20000bf0 	.word	0x20000bf0
 8002ab8:	2000060c 	.word	0x2000060c
 8002abc:	20000bf2 	.word	0x20000bf2
 8002ac0:	20000610 	.word	0x20000610
 8002ac4:	20000611 	.word	0x20000611
 8002ac8:	20000bf1 	.word	0x20000bf1
	////////////////////////////////
	// S5 - SAVE LATITUD/LONGITUD //
	////////////////////////////////

	case 5:
		savedGps	= 1;										// Indica que se guardó valor correctamente
 8002acc:	4bb4      	ldr	r3, [pc, #720]	@ (8002da0 <_Z9linkInGpsv+0x41c>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]

		latitud =	(gpsInput.latitud[0] - '0')*1000;			// Guarda unidad de mil latitud
 8002ad2:	4bb4      	ldr	r3, [pc, #720]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002ad4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ad8:	3b30      	subs	r3, #48	@ 0x30
 8002ada:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	4baf      	ldr	r3, [pc, #700]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002aec:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[1] - '0')*100;			// Guarda centena de latitud
 8002af0:	4bac      	ldr	r3, [pc, #688]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002af2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002af6:	3b30      	subs	r3, #48	@ 0x30
 8002af8:	2264      	movs	r2, #100	@ 0x64
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b06:	4ba8      	ldr	r3, [pc, #672]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b10:	4ba5      	ldr	r3, [pc, #660]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002b12:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[2] - '0')*10;				// Guarda decena de latitud
 8002b16:	4ba3      	ldr	r3, [pc, #652]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002b18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b1c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b30:	4b9d      	ldr	r3, [pc, #628]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002b3c:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[3] - '0')*1;				// Guarda unidad de latitud
 8002b40:	4b98      	ldr	r3, [pc, #608]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b46:	3b30      	subs	r3, #48	@ 0x30
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b50:	4b95      	ldr	r3, [pc, #596]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5a:	4b93      	ldr	r3, [pc, #588]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002b5c:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[5]) - '0')/10;		// Guarda decima de latitud
 8002b60:	4b90      	ldr	r3, [pc, #576]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002b62:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6e:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8002dac <_Z9linkInGpsv+0x428>
 8002b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b76:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b7e:	4b8a      	ldr	r3, [pc, #552]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b88:	4b87      	ldr	r3, [pc, #540]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002b8a:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[6]) - '0')/100;	// Guarda centecina de latitud
 8002b8e:	4b85      	ldr	r3, [pc, #532]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002b90:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9c:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002dac <_Z9linkInGpsv+0x428>
 8002ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ba4:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8002db0 <_Z9linkInGpsv+0x42c>
 8002ba8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bac:	4b7e      	ldr	r3, [pc, #504]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002bb8:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[7]) - '0')/1000;	// Guarda milecima de latitud
 8002bbc:	4b79      	ldr	r3, [pc, #484]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002bbe:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bca:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002dac <_Z9linkInGpsv+0x428>
 8002bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bd2:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002db4 <_Z9linkInGpsv+0x430>
 8002bd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bda:	4b73      	ldr	r3, [pc, #460]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be4:	4b70      	ldr	r3, [pc, #448]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002be6:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[8]) - '0')/10000;	// Guarda decima de milecima de latitud
 8002bea:	4b6e      	ldr	r3, [pc, #440]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002bec:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002bf0:	ee07 3a90 	vmov	s15, r3
 8002bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf8:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002dac <_Z9linkInGpsv+0x428>
 8002bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c00:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002db8 <_Z9linkInGpsv+0x434>
 8002c04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c08:	4b67      	ldr	r3, [pc, #412]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c12:	4b65      	ldr	r3, [pc, #404]	@ (8002da8 <_Z9linkInGpsv+0x424>)
 8002c14:	edc3 7a00 	vstr	s15, [r3]

		longitud =	(gpsInput.longitud[0] - '0')*10000;			// Guarda decena de mil longitud
 8002c18:	4b62      	ldr	r3, [pc, #392]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002c1a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002c1e:	3b30      	subs	r3, #48	@ 0x30
 8002c20:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c30:	4b62      	ldr	r3, [pc, #392]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002c32:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[1] - '0')*1000;			// Guarda unidad de mil longitud
 8002c36:	4b5b      	ldr	r3, [pc, #364]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002c38:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002c3c:	3b30      	subs	r3, #48	@ 0x30
 8002c3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c58:	4b58      	ldr	r3, [pc, #352]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002c5a:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[2] - '0')*100;			// Guarda centecima de longitud
 8002c5e:	4b51      	ldr	r3, [pc, #324]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002c60:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002c64:	3b30      	subs	r3, #48	@ 0x30
 8002c66:	2264      	movs	r2, #100	@ 0x64
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c74:	4b51      	ldr	r3, [pc, #324]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002c80:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[3] - '0')*10;			// Guarda decena de longitud
 8002c84:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002c86:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8002c8a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c9e:	4b47      	ldr	r3, [pc, #284]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	4b44      	ldr	r3, [pc, #272]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002caa:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[4] - '0')*1;				// Guarda unidad de longitud
 8002cae:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cb4:	3b30      	subs	r3, #48	@ 0x30
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002cca:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[6]) - '0')/10;	// Guarda decima de longitud
 8002cce:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002cd0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002dac <_Z9linkInGpsv+0x428>
 8002ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ce4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ce8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cec:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	4b31      	ldr	r3, [pc, #196]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002cf8:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[7]) - '0')/100;	// Guarda centecima de longitud
 8002cfc:	4b29      	ldr	r3, [pc, #164]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002cfe:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002dac <_Z9linkInGpsv+0x428>
 8002d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d12:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002db0 <_Z9linkInGpsv+0x42c>
 8002d16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d1a:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d24:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002d26:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[8]) - '0')/1000;	// Guarda milesima de longitud
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002d2c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d30:	ee07 3a90 	vmov	s15, r3
 8002d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d38:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002dac <_Z9linkInGpsv+0x428>
 8002d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d40:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002db4 <_Z9linkInGpsv+0x430>
 8002d44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d48:	4b1c      	ldr	r3, [pc, #112]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d52:	4b1a      	ldr	r3, [pc, #104]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002d54:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[9]) - '0')/10000;	// Guarda decima de milesima de longitud
 8002d58:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <_Z9linkInGpsv+0x420>)
 8002d5a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d66:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002dac <_Z9linkInGpsv+0x428>
 8002d6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d6e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002db8 <_Z9linkInGpsv+0x434>
 8002d72:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d76:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d80:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <_Z9linkInGpsv+0x438>)
 8002d82:	edc3 7a00 	vstr	s15, [r3]

		countSavedGps++;										// Contador de veces que se guardó un valor correctamente
 8002d86:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <_Z9linkInGpsv+0x43c>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <_Z9linkInGpsv+0x43c>)
 8002d90:	701a      	strb	r2, [r3, #0]
		stateGpsLink	= 2;									// Pasa a S2
 8002d92:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <_Z9linkInGpsv+0x440>)
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
		break;
 8002d98:	bf00      	nop
	}

}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000bf2 	.word	0x20000bf2
 8002da4:	20000b4c 	.word	0x20000b4c
 8002da8:	20000be8 	.word	0x20000be8
 8002dac:	42400000 	.word	0x42400000
 8002db0:	42c80000 	.word	0x42c80000
 8002db4:	447a0000 	.word	0x447a0000
 8002db8:	461c4000 	.word	0x461c4000
 8002dbc:	20000bec 	.word	0x20000bec
 8002dc0:	20000612 	.word	0x20000612
 8002dc4:	20000605 	.word	0x20000605

08002dc8 <_Z9linkBotonv>:
 *	INPUT	:	flagBoton
 *	OUTPUT	:	displayPhy.enable
 */


void linkBoton(){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0

	switch ( stateEnableDisplay ){
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <_Z9linkBotonv+0x74>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <_Z9linkBotonv+0x12>
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d013      	beq.n	8002e00 <_Z9linkBotonv+0x38>
 8002dd8:	e029      	b.n	8002e2e <_Z9linkBotonv+0x66>
	//////////////////////
	// S0 - WAIT BUTTON //
	//////////////////////

	case 0:
		displayPhy.enable(0);			//	Inhabilita display
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4818      	ldr	r0, [pc, #96]	@ (8002e40 <_Z9linkBotonv+0x78>)
 8002dde:	f7fd fdc1 	bl	8000964 <_ZN15displayPhysical6enableEb>
		countEnableDisplay	= 0;		//	Reinicia contador
 8002de2:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <_Z9linkBotonv+0x7c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

		if ( flagBoton ){				//	Si se presiona el boton
 8002de8:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <_Z9linkBotonv+0x80>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <_Z9linkBotonv+0x30>
			stateEnableDisplay	= 1;	//	Pasa a S1
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <_Z9linkBotonv+0x74>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
		}
		else{							//	Si no
			stateEnableDisplay	= 0;	//	Espera en S0
		}
		break;
 8002df6:	e01e      	b.n	8002e36 <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 0;	//	Espera en S0
 8002df8:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <_Z9linkBotonv+0x74>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
		break;
 8002dfe:	e01a      	b.n	8002e36 <_Z9linkBotonv+0x6e>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		displayPhy.enable(1);							// Habilita display
 8002e00:	2101      	movs	r1, #1
 8002e02:	480f      	ldr	r0, [pc, #60]	@ (8002e40 <_Z9linkBotonv+0x78>)
 8002e04:	f7fd fdae 	bl	8000964 <_ZN15displayPhysical6enableEb>

		countEnableDisplay++;							// Suma 1 al contador
 8002e08:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <_Z9linkBotonv+0x7c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <_Z9linkBotonv+0x7c>)
 8002e10:	6013      	str	r3, [r2, #0]

		if ( countEnableDisplay > limitEnableDisplay ){	// Si llega al limite
 8002e12:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <_Z9linkBotonv+0x7c>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <_Z9linkBotonv+0x84>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	dd03      	ble.n	8002e26 <_Z9linkBotonv+0x5e>
			stateEnableDisplay	= 0;					// Vuelve a S0
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <_Z9linkBotonv+0x74>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateEnableDisplay	= 1;					// Espera en S1
		}
		break;
 8002e24:	e007      	b.n	8002e36 <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 1;					// Espera en S1
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <_Z9linkBotonv+0x74>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
		break;
 8002e2c:	e003      	b.n	8002e36 <_Z9linkBotonv+0x6e>

	default:
		stateEnableDisplay	= 0;
 8002e2e:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <_Z9linkBotonv+0x74>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
		break;
 8002e34:	bf00      	nop

	}
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000624 	.word	0x20000624
 8002e40:	20001198 	.word	0x20001198
 8002e44:	2000061c 	.word	0x2000061c
 8002e48:	20000b48 	.word	0x20000b48
 8002e4c:	20000620 	.word	0x20000620

08002e50 <_Z7adc2PPMth>:
 *	MODE 2	:	ADC interno A1
 *	MODE 3	:	ADC externo B1
 *	MODE 4	:	ADC interno B1
 */

uint8_t adc2PPM( uint16_t signal, uint8_t mode){
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	460a      	mov	r2, r1
 8002e5a:	80fb      	strh	r3, [r7, #6]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	717b      	strb	r3, [r7, #5]
	uint8_t result;

	result	= 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]

	switch ( mode ){
 8002e64:	797b      	ldrb	r3, [r7, #5]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d80b      	bhi.n	8002e84 <_Z7adc2PPMth+0x34>
 8002e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e74 <_Z7adc2PPMth+0x24>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e85 	.word	0x08002e85
 8002e7c:	08002e85 	.word	0x08002e85
 8002e80:	08002e85 	.word	0x08002e85

	case 4:
		break;
	}

	return result;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop

08002e94 <_Z10linkAnalogv>:
 *				flagAlarm_PPM,
 *				flagAlarm_TEMP
 *				flagAlarm_HUM
 */

void linkAnalog(){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0

	/////////////////
	// CALIBRATION //
	/////////////////

	switch ( stateCalibration ){
 8002e98:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <_Z10linkAnalogv+0x1b0>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <_Z10linkAnalogv+0x12>
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d01d      	beq.n	8002ee0 <_Z10linkAnalogv+0x4c>
 8002ea4:	e018      	b.n	8002ed8 <_Z10linkAnalogv+0x44>
	///////////////////////////////
	// S0 - WAIT FOR CALIBRATION //
	///////////////////////////////

	case 0:
		countCalibration++;								// Suma 1 al contador
 8002ea6:	4b68      	ldr	r3, [pc, #416]	@ (8003048 <_Z10linkAnalogv+0x1b4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	4a66      	ldr	r2, [pc, #408]	@ (8003048 <_Z10linkAnalogv+0x1b4>)
 8002eae:	6013      	str	r3, [r2, #0]
		enableSensors	= 0;							// Deshabilita sensores
 8002eb0:	4b66      	ldr	r3, [pc, #408]	@ (800304c <_Z10linkAnalogv+0x1b8>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]

		if ( countCalibration >= limitCalibration ){	// Si se cumple el tiempo de calibracion
 8002eb6:	4b64      	ldr	r3, [pc, #400]	@ (8003048 <_Z10linkAnalogv+0x1b4>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b65      	ldr	r3, [pc, #404]	@ (8003050 <_Z10linkAnalogv+0x1bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	db06      	blt.n	8002ed0 <_Z10linkAnalogv+0x3c>
			enableSensors		= 1;					// Habilita sensores
 8002ec2:	4b62      	ldr	r3, [pc, #392]	@ (800304c <_Z10linkAnalogv+0x1b8>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
			stateCalibration	= 1;					// Pasa a S1
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8003044 <_Z10linkAnalogv+0x1b0>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateCalibration	= 0;					// Espera en S0
		}
		break;
 8002ece:	e008      	b.n	8002ee2 <_Z10linkAnalogv+0x4e>
			stateCalibration	= 0;					// Espera en S0
 8002ed0:	4b5c      	ldr	r3, [pc, #368]	@ (8003044 <_Z10linkAnalogv+0x1b0>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
		break;
 8002ed6:	e004      	b.n	8002ee2 <_Z10linkAnalogv+0x4e>
	////////////////////
	case 1:
		break;

	default:
		stateCalibration	= 0;
 8002ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8003044 <_Z10linkAnalogv+0x1b0>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
		break;
 8002ede:	e000      	b.n	8002ee2 <_Z10linkAnalogv+0x4e>
		break;
 8002ee0:	bf00      	nop

	////////////
	// A1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habilitado el ADC
 8002ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8003054 <_Z10linkAnalogv+0x1c0>)
 8002ee4:	795b      	ldrb	r3, [r3, #5]
 8002ee6:	f083 0301 	eor.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00f      	beq.n	8002f10 <_Z10linkAnalogv+0x7c>
		alpha_A1_PPM = adc2PPM(alphaA, 1) * enableSensors;			// Convierte en PPM
 8002ef0:	4b59      	ldr	r3, [pc, #356]	@ (8003058 <_Z10linkAnalogv+0x1c4>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ffaa 	bl	8002e50 <_Z7adc2PPMth>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b52      	ldr	r3, [pc, #328]	@ (800304c <_Z10linkAnalogv+0x1b8>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	fb12 f303 	smulbb	r3, r2, r3
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b54      	ldr	r3, [pc, #336]	@ (800305c <_Z10linkAnalogv+0x1c8>)
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e00e      	b.n	8002f2e <_Z10linkAnalogv+0x9a>
	}
	else{															// Si no esta habiltiado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 2) * enableSensors;	// Convierte en PPM
 8002f10:	4b53      	ldr	r3, [pc, #332]	@ (8003060 <_Z10linkAnalogv+0x1cc>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	2102      	movs	r1, #2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff9a 	bl	8002e50 <_Z7adc2PPMth>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <_Z10linkAnalogv+0x1b8>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	fb12 f303 	smulbb	r3, r2, r3
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800305c <_Z10linkAnalogv+0x1c8>)
 8002f2c:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors){		// Si pasa de 5 ppm
 8002f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800305c <_Z10linkAnalogv+0x1c8>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b32      	cmp	r3, #50	@ 0x32
 8002f34:	d907      	bls.n	8002f46 <_Z10linkAnalogv+0xb2>
 8002f36:	4b45      	ldr	r3, [pc, #276]	@ (800304c <_Z10linkAnalogv+0x1b8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <_Z10linkAnalogv+0xb2>
		flagAlarm_PPM	= 1;						// Indica alarma
 8002f3e:	4b49      	ldr	r3, [pc, #292]	@ (8003064 <_Z10linkAnalogv+0x1d0>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e002      	b.n	8002f4c <_Z10linkAnalogv+0xb8>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <_Z10linkAnalogv+0x1d0>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]

	////////////
	// B1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habitado el ADC
 8002f4c:	4b41      	ldr	r3, [pc, #260]	@ (8003054 <_Z10linkAnalogv+0x1c0>)
 8002f4e:	795b      	ldrb	r3, [r3, #5]
 8002f50:	f083 0301 	eor.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00f      	beq.n	8002f7a <_Z10linkAnalogv+0xe6>
		alpha_A1_PPM = adc2PPM(alphaA, 3) * enableSensors;			// Convierte en PPM
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003058 <_Z10linkAnalogv+0x1c4>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	2103      	movs	r1, #3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff75 	bl	8002e50 <_Z7adc2PPMth>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b38      	ldr	r3, [pc, #224]	@ (800304c <_Z10linkAnalogv+0x1b8>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	fb12 f303 	smulbb	r3, r2, r3
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b39      	ldr	r3, [pc, #228]	@ (800305c <_Z10linkAnalogv+0x1c8>)
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e00e      	b.n	8002f98 <_Z10linkAnalogv+0x104>
	}
	else{															// Si no esta habilitado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 4) * enableSensors;	// Convierte en PPM
 8002f7a:	4b39      	ldr	r3, [pc, #228]	@ (8003060 <_Z10linkAnalogv+0x1cc>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2104      	movs	r1, #4
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff65 	bl	8002e50 <_Z7adc2PPMth>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b30      	ldr	r3, [pc, #192]	@ (800304c <_Z10linkAnalogv+0x1b8>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	fb12 f303 	smulbb	r3, r2, r3
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b31      	ldr	r3, [pc, #196]	@ (800305c <_Z10linkAnalogv+0x1c8>)
 8002f96:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors ){		// Si pasa de 5 ppm
 8002f98:	4b30      	ldr	r3, [pc, #192]	@ (800305c <_Z10linkAnalogv+0x1c8>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b32      	cmp	r3, #50	@ 0x32
 8002f9e:	d907      	bls.n	8002fb0 <_Z10linkAnalogv+0x11c>
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800304c <_Z10linkAnalogv+0x1b8>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <_Z10linkAnalogv+0x11c>
		flagAlarm_PPM	= 1;						// Indica alarma
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003064 <_Z10linkAnalogv+0x1d0>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e002      	b.n	8002fb6 <_Z10linkAnalogv+0x122>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8003064 <_Z10linkAnalogv+0x1d0>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]

	//////////////
	// TEMP HUM //
	///////////////

	if ( !errorHardware[1] ){			// Si hay sensor externo
 8002fb6:	4b27      	ldr	r3, [pc, #156]	@ (8003054 <_Z10linkAnalogv+0x1c0>)
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <_Z10linkAnalogv+0x142>
		tempApp	= tempExtern;			// Copia temperatura
 8002fc4:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <_Z10linkAnalogv+0x1d4>)
 8002fc6:	881a      	ldrh	r2, [r3, #0]
 8002fc8:	4b28      	ldr	r3, [pc, #160]	@ (800306c <_Z10linkAnalogv+0x1d8>)
 8002fca:	801a      	strh	r2, [r3, #0]
		humApp	= humExtern;			// Copia humedad
 8002fcc:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <_Z10linkAnalogv+0x1dc>)
 8002fce:	881a      	ldrh	r2, [r3, #0]
 8002fd0:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <_Z10linkAnalogv+0x1e0>)
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	e015      	b.n	8003002 <_Z10linkAnalogv+0x16e>
	}
	else if ( !errorHardware[0] ){	// Si hay sensor interno
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003054 <_Z10linkAnalogv+0x1c0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	f083 0301 	eor.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <_Z10linkAnalogv+0x162>
		tempApp	= tempIntern;			// Copia temperatura
 8002fe4:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <_Z10linkAnalogv+0x1e4>)
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	4b20      	ldr	r3, [pc, #128]	@ (800306c <_Z10linkAnalogv+0x1d8>)
 8002fea:	801a      	strh	r2, [r3, #0]
		humApp	= humIntern;			// Copia humedad
 8002fec:	4b23      	ldr	r3, [pc, #140]	@ (800307c <_Z10linkAnalogv+0x1e8>)
 8002fee:	881a      	ldrh	r2, [r3, #0]
 8002ff0:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <_Z10linkAnalogv+0x1e0>)
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	e005      	b.n	8003002 <_Z10linkAnalogv+0x16e>
	}
	else{								// Si no hay ninguno de ambos sensores
		tempApp	= 0;					// Copia 0
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800306c <_Z10linkAnalogv+0x1d8>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	801a      	strh	r2, [r3, #0]
		humApp	= 0;					// Copia 0
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <_Z10linkAnalogv+0x1e0>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	801a      	strh	r2, [r3, #0]

	////////////
	// ALARMS //
	////////////

	if ( tempApp > 60 || tempApp < 5 ){	// Si pasa limite de sensores
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <_Z10linkAnalogv+0x1d8>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	2b3c      	cmp	r3, #60	@ 0x3c
 8003008:	d803      	bhi.n	8003012 <_Z10linkAnalogv+0x17e>
 800300a:	4b18      	ldr	r3, [pc, #96]	@ (800306c <_Z10linkAnalogv+0x1d8>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	2b04      	cmp	r3, #4
 8003010:	d803      	bhi.n	800301a <_Z10linkAnalogv+0x186>
		warningHardware[0]	= 1;			// Indica alarma
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <_Z10linkAnalogv+0x1ec>)
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e002      	b.n	8003020 <_Z10linkAnalogv+0x18c>
	}
	else{								// Si no
		warningHardware[0]	= 0;			// No hay alarma
 800301a:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <_Z10linkAnalogv+0x1ec>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
	}

	if ( humApp < 5 || humApp > 90){	// Si pasa limite de sensores
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <_Z10linkAnalogv+0x1e0>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d903      	bls.n	8003030 <_Z10linkAnalogv+0x19c>
 8003028:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <_Z10linkAnalogv+0x1e0>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	2b5a      	cmp	r3, #90	@ 0x5a
 800302e:	d903      	bls.n	8003038 <_Z10linkAnalogv+0x1a4>
		warningHardware[1]	= 1;			// Indica alarma
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <_Z10linkAnalogv+0x1ec>)
 8003032:	2201      	movs	r2, #1
 8003034:	705a      	strb	r2, [r3, #1]
 8003036:	e003      	b.n	8003040 <_Z10linkAnalogv+0x1ac>
	}
	else{								// Si no
		warningHardware[1]	= 0;			// No hay alarma
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <_Z10linkAnalogv+0x1ec>)
 800303a:	2200      	movs	r2, #0
 800303c:	705a      	strb	r2, [r3, #1]
	}
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}
 8003044:	2000062a 	.word	0x2000062a
 8003048:	2000062c 	.word	0x2000062c
 800304c:	20000634 	.word	0x20000634
 8003050:	20000630 	.word	0x20000630
 8003054:	200005dc 	.word	0x200005dc
 8003058:	20000546 	.word	0x20000546
 800305c:	20000625 	.word	0x20000625
 8003060:	2000054e 	.word	0x2000054e
 8003064:	20000635 	.word	0x20000635
 8003068:	2000052c 	.word	0x2000052c
 800306c:	20000626 	.word	0x20000626
 8003070:	2000052e 	.word	0x2000052e
 8003074:	20000628 	.word	0x20000628
 8003078:	20000528 	.word	0x20000528
 800307c:	2000052a 	.word	0x2000052a
 8003080:	200005d4 	.word	0x200005d4

08003084 <_Z41__static_initialization_and_destruction_0ii>:
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d127      	bne.n	80030e4 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800309a:	4293      	cmp	r3, r2
 800309c:	d122      	bne.n	80030e4 <_Z41__static_initialization_and_destruction_0ii+0x60>
long int limitGpsLink	= 240000/superloop;	// Limite de tiempo esperando mensajes validos
 800309e:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80030a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80030aa:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80030ac:	6013      	str	r3, [r2, #0]
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80030b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80030bc:	4a0f      	ldr	r2, [pc, #60]	@ (80030fc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80030be:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 80030c0:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80030c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80030cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80030ce:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 80030d0:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030da:	fb93 f3f2 	sdiv	r3, r3, r2
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80030e2:	801a      	strh	r2, [r3, #0]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	20000433 	.word	0x20000433
 80030f4:	0003a980 	.word	0x0003a980
 80030f8:	2000060c 	.word	0x2000060c
 80030fc:	20000620 	.word	0x20000620
 8003100:	000dbba0 	.word	0x000dbba0
 8003104:	20000630 	.word	0x20000630
 8003108:	2000063c 	.word	0x2000063c

0800310c <_GLOBAL__sub_I_stateGpsLink>:
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
 8003110:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003114:	2001      	movs	r0, #1
 8003116:	f7ff ffb5 	bl	8003084 <_Z41__static_initialization_and_destruction_0ii>
 800311a:	bd80      	pop	{r7, pc}

0800311c <_Z10linkOutputv>:
extern wdTimeout loraTimeWd;	// Watchdog de Lorawan
extern bool flagTxLora;			// Indica que se envía un mensaje

/***** OUTPUT *****/

void linkOutput(){
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
	linkOutLora();
 8003120:	f000 f804 	bl	800312c <_Z11linkOutLorav>
	linkOutGps();
 8003124:	f000 f81c 	bl	8003160 <_Z10linkOutGpsv>
	//linkOutDisplay();
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <_Z11linkOutLorav>:
/************************
 *****	LORA OUTPUT *****
 ************************
 *
 */
void linkOutLora(){
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( flagTxLora ){				// Si sale un comando
 8003130:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <_Z11linkOutLorav+0x24>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <_Z11linkOutLorav+0x12>
		loraTimeWd.setOutput();		// Se indica a wd
 8003138:	4806      	ldr	r0, [pc, #24]	@ (8003154 <_Z11linkOutLorav+0x28>)
 800313a:	f000 f957 	bl	80033ec <_ZN9wdTimeout9setOutputEv>

	//////////////
	// HARDWARE //
	//////////////

	if ( flagWdLora ){			// Si vence wd
 800313e:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <_Z11linkOutLorav+0x2c>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <_Z11linkOutLorav+0x20>
		flagResetHwLora	= 1;	// Reinicia chip
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <_Z11linkOutLorav+0x30>)
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
	}
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200005ed 	.word	0x200005ed
 8003154:	2000118c 	.word	0x2000118c
 8003158:	20000640 	.word	0x20000640
 800315c:	20000641 	.word	0x20000641

08003160 <_Z10linkOutGpsv>:

/**********************
 ***** GPS OUTPUT *****
 **********************
 */
void linkOutGps(){
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0

	if ( startGps ){		// Si se inicia Gps
 8003164:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <_Z10linkOutGpsv+0x30>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <_Z10linkOutGpsv+0x12>
		enableGps	= 1;	// Habilita gps
 800316c:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <_Z10linkOutGpsv+0x34>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
	}

	if ( stopGps ){			// Si se detiene gps
 8003172:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <_Z10linkOutGpsv+0x38>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <_Z10linkOutGpsv+0x26>
		stopGps		= 0;	// Reinicia Flag
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <_Z10linkOutGpsv+0x38>)
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
		enableGps	= 0;	// Deshabilita gps
 8003180:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <_Z10linkOutGpsv+0x34>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
	}
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	2000038f 	.word	0x2000038f
 8003194:	20000390 	.word	0x20000390
 8003198:	20000bf1 	.word	0x20000bf1

0800319c <_Z12setupLoraAppv>:

rn2903Command macSetCh8;
rn2903Command macSetCh9;
rn2903Command macSetCh10;

void setupLoraApp(){
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
	///////////////
	// SYS RESET //
	///////////////

	sysReset.command		= sysReset_RN2903;
 80031a0:	4b57      	ldr	r3, [pc, #348]	@ (8003300 <_Z12setupLoraAppv+0x164>)
 80031a2:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <_Z12setupLoraAppv+0x168>)
 80031a4:	605a      	str	r2, [r3, #4]
	sysReset.size			= sizeof( sysReset_RN2903 );
 80031a6:	4b56      	ldr	r3, [pc, #344]	@ (8003300 <_Z12setupLoraAppv+0x164>)
 80031a8:	220c      	movs	r2, #12
 80031aa:	701a      	strb	r2, [r3, #0]
	sysReset.responseSize	= 1;
 80031ac:	4b54      	ldr	r3, [pc, #336]	@ (8003300 <_Z12setupLoraAppv+0x164>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET MOD //
	///////////////////

	radioSetMod.command		= radioSetMod_RN2903;
 80031b2:	4b55      	ldr	r3, [pc, #340]	@ (8003308 <_Z12setupLoraAppv+0x16c>)
 80031b4:	4a55      	ldr	r2, [pc, #340]	@ (800330c <_Z12setupLoraAppv+0x170>)
 80031b6:	605a      	str	r2, [r3, #4]
	radioSetMod.size		= sizeof( radioSetMod_RN2903 ) - 1;
 80031b8:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <_Z12setupLoraAppv+0x16c>)
 80031ba:	2214      	movs	r2, #20
 80031bc:	701a      	strb	r2, [r3, #0]
	radioSetMod.responseSize= 3;
 80031be:	4b52      	ldr	r3, [pc, #328]	@ (8003308 <_Z12setupLoraAppv+0x16c>)
 80031c0:	2203      	movs	r2, #3
 80031c2:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET SF //
	//////////////////

	radioSetSf.command		= radioSetSf_RN2903;
 80031c4:	4b52      	ldr	r3, [pc, #328]	@ (8003310 <_Z12setupLoraAppv+0x174>)
 80031c6:	4a53      	ldr	r2, [pc, #332]	@ (8003314 <_Z12setupLoraAppv+0x178>)
 80031c8:	605a      	str	r2, [r3, #4]
	radioSetSf.size			= sizeof( radioSetSf_RN2903 ) - 1;
 80031ca:	4b51      	ldr	r3, [pc, #324]	@ (8003310 <_Z12setupLoraAppv+0x174>)
 80031cc:	2213      	movs	r2, #19
 80031ce:	701a      	strb	r2, [r3, #0]
	radioSetSf.responseSize	= 3;
 80031d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003310 <_Z12setupLoraAppv+0x174>)
 80031d2:	2203      	movs	r2, #3
 80031d4:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET BW //
	//////////////////

	radioSetBw.command		= radioSetBw_RN2903;
 80031d6:	4b50      	ldr	r3, [pc, #320]	@ (8003318 <_Z12setupLoraAppv+0x17c>)
 80031d8:	4a50      	ldr	r2, [pc, #320]	@ (800331c <_Z12setupLoraAppv+0x180>)
 80031da:	605a      	str	r2, [r3, #4]
	radioSetBw.size			= sizeof( radioSetBw_RN2903 ) - 1;
 80031dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003318 <_Z12setupLoraAppv+0x17c>)
 80031de:	2212      	movs	r2, #18
 80031e0:	701a      	strb	r2, [r3, #0]
	radioSetBw.responseSize = 3;
 80031e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003318 <_Z12setupLoraAppv+0x17c>)
 80031e4:	2203      	movs	r2, #3
 80031e6:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET PWR //
	///////////////////

	radioSetPwr.command		= radioSetPwr_RN2903;
 80031e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003320 <_Z12setupLoraAppv+0x184>)
 80031ea:	4a4e      	ldr	r2, [pc, #312]	@ (8003324 <_Z12setupLoraAppv+0x188>)
 80031ec:	605a      	str	r2, [r3, #4]
	radioSetPwr.size		= sizeof( radioSetPwr_RN2903 ) - 1;
 80031ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003320 <_Z12setupLoraAppv+0x184>)
 80031f0:	2212      	movs	r2, #18
 80031f2:	701a      	strb	r2, [r3, #0]
	radioSetPwr.responseSize= 3;
 80031f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003320 <_Z12setupLoraAppv+0x184>)
 80031f6:	2203      	movs	r2, #3
 80031f8:	721a      	strb	r2, [r3, #8]

	////////////////////
	// MAC SET DEVEUI //
	////////////////////

	macSetDeveui.command	= macSetDevEui_RN2903;
 80031fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003328 <_Z12setupLoraAppv+0x18c>)
 80031fc:	4a4b      	ldr	r2, [pc, #300]	@ (800332c <_Z12setupLoraAppv+0x190>)
 80031fe:	605a      	str	r2, [r3, #4]
	macSetDeveui.size		= sizeof( macSetDevEui_RN2903 ) - 1;
 8003200:	4b49      	ldr	r3, [pc, #292]	@ (8003328 <_Z12setupLoraAppv+0x18c>)
 8003202:	2220      	movs	r2, #32
 8003204:	701a      	strb	r2, [r3, #0]
	macSetDeveui.responseSize	= 3;
 8003206:	4b48      	ldr	r3, [pc, #288]	@ (8003328 <_Z12setupLoraAppv+0x18c>)
 8003208:	2203      	movs	r2, #3
 800320a:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET NETWORK KEY //
	/////////////////////////

	macSetNwkskey.command	= macSetNwkskey_RN2903;
 800320c:	4b48      	ldr	r3, [pc, #288]	@ (8003330 <_Z12setupLoraAppv+0x194>)
 800320e:	4a49      	ldr	r2, [pc, #292]	@ (8003334 <_Z12setupLoraAppv+0x198>)
 8003210:	605a      	str	r2, [r3, #4]
	macSetNwkskey.size		= sizeof( macSetNwkskey_RN2903 ) - 1;
 8003212:	4b47      	ldr	r3, [pc, #284]	@ (8003330 <_Z12setupLoraAppv+0x194>)
 8003214:	2232      	movs	r2, #50	@ 0x32
 8003216:	701a      	strb	r2, [r3, #0]
	macSetNwkskey.responseSize	= 3;
 8003218:	4b45      	ldr	r3, [pc, #276]	@ (8003330 <_Z12setupLoraAppv+0x194>)
 800321a:	2203      	movs	r2, #3
 800321c:	721a      	strb	r2, [r3, #8]

	//////////////////////
	// MAC SET APPS KEY //
	//////////////////////

	macSetAppskey.command	= macSetAppskey_RN2903;
 800321e:	4b46      	ldr	r3, [pc, #280]	@ (8003338 <_Z12setupLoraAppv+0x19c>)
 8003220:	4a46      	ldr	r2, [pc, #280]	@ (800333c <_Z12setupLoraAppv+0x1a0>)
 8003222:	605a      	str	r2, [r3, #4]
	macSetAppskey.size		= sizeof( macSetAppskey_RN2903 ) - 1;
 8003224:	4b44      	ldr	r3, [pc, #272]	@ (8003338 <_Z12setupLoraAppv+0x19c>)
 8003226:	2232      	movs	r2, #50	@ 0x32
 8003228:	701a      	strb	r2, [r3, #0]
	macSetAppskey.responseSize	= 3;
 800322a:	4b43      	ldr	r3, [pc, #268]	@ (8003338 <_Z12setupLoraAppv+0x19c>)
 800322c:	2203      	movs	r2, #3
 800322e:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET DEV ADDRESS //
	/////////////////////////

	macSetDevAddr.command		= macSetDevAddr_RN2903;
 8003230:	4b43      	ldr	r3, [pc, #268]	@ (8003340 <_Z12setupLoraAppv+0x1a4>)
 8003232:	4a44      	ldr	r2, [pc, #272]	@ (8003344 <_Z12setupLoraAppv+0x1a8>)
 8003234:	605a      	str	r2, [r3, #4]
	macSetDevAddr.size			= sizeof ( macSetDevAddr_RN2903 ) - 1;
 8003236:	4b42      	ldr	r3, [pc, #264]	@ (8003340 <_Z12setupLoraAppv+0x1a4>)
 8003238:	221a      	movs	r2, #26
 800323a:	701a      	strb	r2, [r3, #0]
	macSetDevAddr.responseSize	= 2;
 800323c:	4b40      	ldr	r3, [pc, #256]	@ (8003340 <_Z12setupLoraAppv+0x1a4>)
 800323e:	2202      	movs	r2, #2
 8003240:	721a      	strb	r2, [r3, #8]

	///////////////////
	// MAC JOIN OTAA //
	///////////////////

	macJoinOtaa.command			= macJoinOtaa_RN2903;
 8003242:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <_Z12setupLoraAppv+0x1ac>)
 8003244:	4a41      	ldr	r2, [pc, #260]	@ (800334c <_Z12setupLoraAppv+0x1b0>)
 8003246:	605a      	str	r2, [r3, #4]
	macJoinOtaa.size			= sizeof ( macJoinOtaa_RN2903 ) - 1;
 8003248:	4b3f      	ldr	r3, [pc, #252]	@ (8003348 <_Z12setupLoraAppv+0x1ac>)
 800324a:	220f      	movs	r2, #15
 800324c:	701a      	strb	r2, [r3, #0]
	macJoinOtaa.responseSize	= 7;
 800324e:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <_Z12setupLoraAppv+0x1ac>)
 8003250:	2207      	movs	r2, #7
 8003252:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC JOIN ABP //
	//////////////////

	macJoinAbp.command		= macJoinAbp_RN2903;
 8003254:	4b3e      	ldr	r3, [pc, #248]	@ (8003350 <_Z12setupLoraAppv+0x1b4>)
 8003256:	4a3f      	ldr	r2, [pc, #252]	@ (8003354 <_Z12setupLoraAppv+0x1b8>)
 8003258:	605a      	str	r2, [r3, #4]
	macJoinAbp.size			= sizeof( macJoinAbp_RN2903 ) - 1;
 800325a:	4b3d      	ldr	r3, [pc, #244]	@ (8003350 <_Z12setupLoraAppv+0x1b4>)
 800325c:	220e      	movs	r2, #14
 800325e:	701a      	strb	r2, [r3, #0]
	macJoinAbp.responseSize	= 2;
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <_Z12setupLoraAppv+0x1b4>)
 8003262:	2202      	movs	r2, #2
 8003264:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC SET SYNC //
	//////////////////

	macSetSync.command		= macSetSync_RN2903;
 8003266:	4b3c      	ldr	r3, [pc, #240]	@ (8003358 <_Z12setupLoraAppv+0x1bc>)
 8003268:	4a3c      	ldr	r2, [pc, #240]	@ (800335c <_Z12setupLoraAppv+0x1c0>)
 800326a:	605a      	str	r2, [r3, #4]
	macSetSync.size			= sizeof( macSetSync_RN2903 ) - 1;
 800326c:	4b3a      	ldr	r3, [pc, #232]	@ (8003358 <_Z12setupLoraAppv+0x1bc>)
 800326e:	2211      	movs	r2, #17
 8003270:	701a      	strb	r2, [r3, #0]
	macSetSync.responseSize	= 3;
 8003272:	4b39      	ldr	r3, [pc, #228]	@ (8003358 <_Z12setupLoraAppv+0x1bc>)
 8003274:	2203      	movs	r2, #3
 8003276:	721a      	strb	r2, [r3, #8]

	//////////////
	// MAC SAVE //
	//////////////

	macSave.command			= macSave_RN2903;
 8003278:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <_Z12setupLoraAppv+0x1c4>)
 800327a:	4a3a      	ldr	r2, [pc, #232]	@ (8003364 <_Z12setupLoraAppv+0x1c8>)
 800327c:	605a      	str	r2, [r3, #4]
	macSave.size			= sizeof( macSave_RN2903 ) - 1;
 800327e:	4b38      	ldr	r3, [pc, #224]	@ (8003360 <_Z12setupLoraAppv+0x1c4>)
 8003280:	220a      	movs	r2, #10
 8003282:	701a      	strb	r2, [r3, #0]
	macSave.responseSize	= 3;
 8003284:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <_Z12setupLoraAppv+0x1c4>)
 8003286:	2203      	movs	r2, #3
 8003288:	721a      	strb	r2, [r3, #8]

	/////////////////
	// MAC TX DATA //
	/////////////////

	 macTxData.command		= macTxData_RN2903;
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <_Z12setupLoraAppv+0x1cc>)
 800328c:	4a37      	ldr	r2, [pc, #220]	@ (800336c <_Z12setupLoraAppv+0x1d0>)
 800328e:	605a      	str	r2, [r3, #4]
	 macTxData.size			= sizeof( macTxData_RN2903 ) - 1;
 8003290:	4b35      	ldr	r3, [pc, #212]	@ (8003368 <_Z12setupLoraAppv+0x1cc>)
 8003292:	2219      	movs	r2, #25
 8003294:	701a      	strb	r2, [r3, #0]
	 macTxData.responseSize	= 14;
 8003296:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <_Z12setupLoraAppv+0x1cc>)
 8003298:	220e      	movs	r2, #14
 800329a:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	 macTxGps.command		= macTxGps_RN2903;
 800329c:	4b34      	ldr	r3, [pc, #208]	@ (8003370 <_Z12setupLoraAppv+0x1d4>)
 800329e:	4a35      	ldr	r2, [pc, #212]	@ (8003374 <_Z12setupLoraAppv+0x1d8>)
 80032a0:	605a      	str	r2, [r3, #4]
	 macTxGps.size			= sizeof( macTxGps_RN2903 ) - 1;
 80032a2:	4b33      	ldr	r3, [pc, #204]	@ (8003370 <_Z12setupLoraAppv+0x1d4>)
 80032a4:	2219      	movs	r2, #25
 80032a6:	701a      	strb	r2, [r3, #0]
	 macTxGps.responseSize	= 14;
 80032a8:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <_Z12setupLoraAppv+0x1d4>)
 80032aa:	220e      	movs	r2, #14
 80032ac:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	  macTxSys.command		= macTxSys_RN2903;
 80032ae:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <_Z12setupLoraAppv+0x1dc>)
 80032b0:	4a32      	ldr	r2, [pc, #200]	@ (800337c <_Z12setupLoraAppv+0x1e0>)
 80032b2:	605a      	str	r2, [r3, #4]
	  macTxSys.size			= sizeof( macTxSys_RN2903 ) - 1;
 80032b4:	4b30      	ldr	r3, [pc, #192]	@ (8003378 <_Z12setupLoraAppv+0x1dc>)
 80032b6:	2215      	movs	r2, #21
 80032b8:	701a      	strb	r2, [r3, #0]
	  macTxSys.responseSize	= 14;
 80032ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003378 <_Z12setupLoraAppv+0x1dc>)
 80032bc:	220e      	movs	r2, #14
 80032be:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 8 //
	  //////////////////

	  macSetCh8.command		= macSetCh8_RN2903;
 80032c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003380 <_Z12setupLoraAppv+0x1e4>)
 80032c2:	4a30      	ldr	r2, [pc, #192]	@ (8003384 <_Z12setupLoraAppv+0x1e8>)
 80032c4:	605a      	str	r2, [r3, #4]
	  macSetCh8.size		= sizeof( macSetCh8_RN2903 ) - 1;
 80032c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003380 <_Z12setupLoraAppv+0x1e4>)
 80032c8:	2219      	movs	r2, #25
 80032ca:	701a      	strb	r2, [r3, #0]
	  macSetCh8.responseSize	= 9;
 80032cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003380 <_Z12setupLoraAppv+0x1e4>)
 80032ce:	2209      	movs	r2, #9
 80032d0:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 9 //
	  //////////////////

	  macSetCh9.command		= macSetCh9_RN2903;
 80032d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003388 <_Z12setupLoraAppv+0x1ec>)
 80032d4:	4a2d      	ldr	r2, [pc, #180]	@ (800338c <_Z12setupLoraAppv+0x1f0>)
 80032d6:	605a      	str	r2, [r3, #4]
	  macSetCh9.size		= sizeof( macSetCh9_RN2903 ) - 1;
 80032d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003388 <_Z12setupLoraAppv+0x1ec>)
 80032da:	2219      	movs	r2, #25
 80032dc:	701a      	strb	r2, [r3, #0]
	  macSetCh9.responseSize	= 9;
 80032de:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <_Z12setupLoraAppv+0x1ec>)
 80032e0:	2209      	movs	r2, #9
 80032e2:	721a      	strb	r2, [r3, #8]

	  ///////////////////
	  // MAC SET CH 10 //
	  ///////////////////
	  macSetCh10.command		= macSetCh10_RN2903;
 80032e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003390 <_Z12setupLoraAppv+0x1f4>)
 80032e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003394 <_Z12setupLoraAppv+0x1f8>)
 80032e8:	605a      	str	r2, [r3, #4]
	  macSetCh10.size			= sizeof( macSetCh10_RN2903 ) - 1;
 80032ea:	4b29      	ldr	r3, [pc, #164]	@ (8003390 <_Z12setupLoraAppv+0x1f4>)
 80032ec:	221a      	movs	r2, #26
 80032ee:	701a      	strb	r2, [r3, #0]
	  macSetCh10.responseSize	= 9;
 80032f0:	4b27      	ldr	r3, [pc, #156]	@ (8003390 <_Z12setupLoraAppv+0x1f4>)
 80032f2:	2209      	movs	r2, #9
 80032f4:	721a      	strb	r2, [r3, #8]

}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	20000644 	.word	0x20000644
 8003304:	200001a4 	.word	0x200001a4
 8003308:	20000650 	.word	0x20000650
 800330c:	200001b0 	.word	0x200001b0
 8003310:	2000065c 	.word	0x2000065c
 8003314:	200001c8 	.word	0x200001c8
 8003318:	20000668 	.word	0x20000668
 800331c:	200001dc 	.word	0x200001dc
 8003320:	20000674 	.word	0x20000674
 8003324:	200001f0 	.word	0x200001f0
 8003328:	20000680 	.word	0x20000680
 800332c:	20000204 	.word	0x20000204
 8003330:	20000698 	.word	0x20000698
 8003334:	20000244 	.word	0x20000244
 8003338:	200006a4 	.word	0x200006a4
 800333c:	20000278 	.word	0x20000278
 8003340:	2000068c 	.word	0x2000068c
 8003344:	20000228 	.word	0x20000228
 8003348:	200006b0 	.word	0x200006b0
 800334c:	200002ac 	.word	0x200002ac
 8003350:	200006bc 	.word	0x200006bc
 8003354:	200002bc 	.word	0x200002bc
 8003358:	200006c8 	.word	0x200006c8
 800335c:	200002cc 	.word	0x200002cc
 8003360:	200006d4 	.word	0x200006d4
 8003364:	200002e0 	.word	0x200002e0
 8003368:	200006e0 	.word	0x200006e0
 800336c:	200002ec 	.word	0x200002ec
 8003370:	200006ec 	.word	0x200006ec
 8003374:	20000308 	.word	0x20000308
 8003378:	200006f8 	.word	0x200006f8
 800337c:	20000324 	.word	0x20000324
 8003380:	20000704 	.word	0x20000704
 8003384:	2000033c 	.word	0x2000033c
 8003388:	20000710 	.word	0x20000710
 800338c:	20000358 	.word	0x20000358
 8003390:	2000071c 	.word	0x2000071c
 8003394:	20000374 	.word	0x20000374

08003398 <_ZN10loraRutine10addCommandEP13rn2903Command>:

/////////////////
// ADD COMMAND //
/////////////////

void loraRutine::addCommand ( rn2903Command *command ){
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	this->listCommands[ this->sizeList ]	= command;	// AÑADE PUNTERO A LISTA
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 80033a8:	4619      	mov	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	this->sizeList++;									// Suma 1 al largo de lista
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 80033b8:	3301      	adds	r3, #1
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <_ZN9wdTimeoutC1El>:
 *		5.- newMessage:	Indica si se recibió un mensaje
 *		6.- timeout:	Indica si hubo un timeout
 *
 */

wdTimeout::wdTimeout( long limit ){	// Constructor
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
	this->limit	= limit;			// Se debe fijar el limite de timeout
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	609a      	str	r2, [r3, #8]
}
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <_ZN9wdTimeout9setOutputEv>:

////////////////
// SET OUTPUT //
////////////////

void wdTimeout::setOutput(){	//
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	this->flagOutput	= 1;	// Indica que salió un comando
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;	// Reinicia contador
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_ZN9wdTimeout6addOneEv>:

/////////////
// ADD ONE //
/////////////

void wdTimeout::addOne(){
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	if ( this->flagOutput ){			// Si salió un comando
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <_ZN9wdTimeout6addOneEv+0x1a>
		this->counter++;				// Suma uno al contador
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	605a      	str	r2, [r3, #4]
	}

	if (this->counter >= this->limit ){	// Si pasa el límite
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	db03      	blt.n	800343a <_ZN9wdTimeout6addOneEv+0x2e>
		this->flagTimeout	= 1;		// Se considera timeout
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	709a      	strb	r2, [r3, #2]
	}
	else{								// Si no
		this->flagTimeout	= 0;		// No indica timeout
	}
}
 8003438:	e002      	b.n	8003440 <_ZN9wdTimeout6addOneEv+0x34>
		this->flagTimeout	= 0;		// No indica timeout
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	709a      	strb	r2, [r3, #2]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <_ZN9wdTimeout8setInputEv>:

///////////////
// SET INPUT //
///////////////

void wdTimeout::setInput(){
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	this->flagInput		= this->flagOutput;		// Copia indicador salida de comando )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	785a      	ldrb	r2, [r3, #1]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	701a      	strb	r2, [r3, #0]
												// Si hay multiples respuestas toma sentido
	this->flagOutput	= 0;					// Reinicia indicador de salida comando
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;					// Reinicia contador
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	605a      	str	r2, [r3, #4]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <_ZN9wdTimeout7timeOutEv>:

/////////////
// TIMEOUT //
/////////////

bool wdTimeout::timeOut(){
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	bool flag			= this->flagTimeout;	// Copia indicador timeout
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	789b      	ldrb	r3, [r3, #2]
 8003480:	73fb      	strb	r3, [r7, #15]
	this->flagTimeout	= 0;					// Reinicia indicador timeout
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	709a      	strb	r2, [r3, #2]
	return flag;								// Retorna valor guardado
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <_ZN9loraCheck18setResponsePointerEPPhh>:

//////////////////////////
// SET RESPONSE POINTER //
//////////////////////////

void loraCheck::setResponsePointer( uint8_t *pointer[], uint8_t sizeIdealResponses ){
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
	this->idealResponses		= &pointer[0];
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	609a      	str	r2, [r3, #8]
	this->sizeIdealResponses	= sizeIdealResponses;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	79fa      	ldrb	r2, [r7, #7]
 80034ae:	731a      	strb	r2, [r3, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_ZN9loraCheck17setIdealResponsesEh>:

////////////////////////
// SET IDEAL RESPONSE //
////////////////////////

void loraCheck::setIdealResponses( uint8_t qtty ){
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
	this->qtty				= qtty;				// Copia el largo del arreglo
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	705a      	strb	r2, [r3, #1]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <_ZN9loraCheck11newResponseEPhh>:

//////////////////
// NEW RESPONSE //
//////////////////

void loraCheck::newResponse( uint8_t *response, uint8_t sizeResponse ){
 80034da:	b480      	push	{r7}
 80034dc:	b087      	sub	sp, #28
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71fb      	strb	r3, [r7, #7]
	this->realResponse	= response;			// Copia la respuesta entregada por el modulo
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	611a      	str	r2, [r3, #16]
	this->sizeResponse	= sizeResponse;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	79fa      	ldrb	r2, [r7, #7]
 80034f2:	701a      	strb	r2, [r3, #0]

	uint8_t i;	// Crea variable auxiliar
	uint8_t j;

	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]
 80034f8:	e029      	b.n	800354e <_ZN9loraCheck11newResponseEPhh+0x74>
		for ( j = 0; j < this->sizeResponse; j++ ){
 80034fa:	2300      	movs	r3, #0
 80034fc:	75bb      	strb	r3, [r7, #22]
 80034fe:	e01a      	b.n	8003536 <_ZN9loraCheck11newResponseEPhh+0x5c>
			if ( *(this->idealResponses[i] + j) == this->realResponse[j]){
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	7dbb      	ldrb	r3, [r7, #22]
 800350e:	4413      	add	r3, r2
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6919      	ldr	r1, [r3, #16]
 8003516:	7dbb      	ldrb	r3, [r7, #22]
 8003518:	440b      	add	r3, r1
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d103      	bne.n	8003528 <_ZN9loraCheck11newResponseEPhh+0x4e>
				this->flagCorrect	= 1;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	70da      	strb	r2, [r3, #3]
 8003526:	e003      	b.n	8003530 <_ZN9loraCheck11newResponseEPhh+0x56>
			}
			else{
				this->flagCorrect	= 0;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	70da      	strb	r2, [r3, #3]
				break;
 800352e:	e007      	b.n	8003540 <_ZN9loraCheck11newResponseEPhh+0x66>
		for ( j = 0; j < this->sizeResponse; j++ ){
 8003530:	7dbb      	ldrb	r3, [r7, #22]
 8003532:	3301      	adds	r3, #1
 8003534:	75bb      	strb	r3, [r7, #22]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	7dba      	ldrb	r2, [r7, #22]
 800353c:	429a      	cmp	r2, r3
 800353e:	d3df      	bcc.n	8003500 <_ZN9loraCheck11newResponseEPhh+0x26>
			}
		}
		if (this->flagCorrect){
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	78db      	ldrb	r3, [r3, #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <_ZN9loraCheck11newResponseEPhh+0x80>
	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	3301      	adds	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	7dfa      	ldrb	r2, [r7, #23]
 8003554:	429a      	cmp	r2, r3
 8003556:	d3d0      	bcc.n	80034fa <_ZN9loraCheck11newResponseEPhh+0x20>
 8003558:	e000      	b.n	800355c <_ZN9loraCheck11newResponseEPhh+0x82>
			break;
 800355a:	bf00      	nop
		}
	}

	this->position	= i;											// Copia posicion final
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	7dfa      	ldrb	r2, [r7, #23]
 8003560:	709a      	strb	r2, [r3, #2]
	this->flagCheck	= 1;											// Indica que hay nuevo resultado
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	711a      	strb	r2, [r3, #4]
}
 8003568:	bf00      	nop
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_ZN9loraCheck5checkEv>:

////////////////////
// CHECK RESPONSE //
////////////////////

bool loraCheck::check(){
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	bool flag;							// Crea variable auxiliar
	flag			= this->flagCheck;	// Copia resultado de flag
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	791b      	ldrb	r3, [r3, #4]
 8003580:	73fb      	strb	r3, [r7, #15]
	this->flagCheck	= 0;				// Reinicia el indicador de nuevo resultado
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	711a      	strb	r2, [r3, #4]

	return 	flag;						// Entrega resultado
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_ZN9loraCheck8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t loraCheck::response(){
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
	uint8_t	finalResult;				// Crea variable auxiliar
	uint8_t i;

	if (this->flagCorrect){				// Si hubo respuesta correcta
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	78db      	ldrb	r3, [r3, #3]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <_ZN9loraCheck8responseEv+0x18>
		finalResult	= this->position;	// Copia posición
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	789b      	ldrb	r3, [r3, #2]
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	e001      	b.n	80035b2 <_ZN9loraCheck8responseEv+0x1c>
	}
	else{								// Si no
		finalResult	= 99;				// Entrega 99
 80035ae:	2363      	movs	r3, #99	@ 0x63
 80035b0:	73fb      	strb	r3, [r7, #15]
	}
	finalResult = this->position;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	789b      	ldrb	r3, [r3, #2]
 80035b6:	73fb      	strb	r3, [r7, #15]

	if ( this->sizeResponse > 30 ){
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b1e      	cmp	r3, #30
 80035be:	d91c      	bls.n	80035fa <_ZN9loraCheck8responseEv+0x64>
		for (i = 0; i < this->sizeResponse-1; i++){
 80035c0:	2300      	movs	r3, #0
 80035c2:	73bb      	strb	r3, [r7, #14]
 80035c4:	e013      	b.n	80035ee <_ZN9loraCheck8responseEv+0x58>
			if ( this->realResponse[i] == 'R' && this->realResponse[i+1] == 'N'){
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	7bbb      	ldrb	r3, [r7, #14]
 80035cc:	4413      	add	r3, r2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b52      	cmp	r3, #82	@ 0x52
 80035d2:	d109      	bne.n	80035e8 <_ZN9loraCheck8responseEv+0x52>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	7bbb      	ldrb	r3, [r7, #14]
 80035da:	3301      	adds	r3, #1
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80035e2:	d101      	bne.n	80035e8 <_ZN9loraCheck8responseEv+0x52>
				finalResult	= 98;
 80035e4:	2362      	movs	r3, #98	@ 0x62
 80035e6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < this->sizeResponse-1; i++){
 80035e8:	7bbb      	ldrb	r3, [r7, #14]
 80035ea:	3301      	adds	r3, #1
 80035ec:	73bb      	strb	r3, [r7, #14]
 80035ee:	7bba      	ldrb	r2, [r7, #14]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	429a      	cmp	r2, r3
 80035f8:	dbe5      	blt.n	80035c6 <_ZN9loraCheck8responseEv+0x30>
			}
		}
	}

	return finalResult;					// Retorna decisión
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_ZN9loraInput12insertBufferEPhh>:

///////////////////
// INSERT BUFFER //
///////////////////

void loraInput::insertBuffer(uint8_t *buffer, uint8_t sizeBuffer){
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	71fb      	strb	r3, [r7, #7]
	this->buffer		= buffer;		// Guarda puntero inicial del buffer
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	605a      	str	r2, [r3, #4]
	this->sizeBuffer	= sizeBuffer;	// Guarda tamaño del buffer
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	79fa      	ldrb	r2, [r7, #7]
 8003620:	721a      	strb	r2, [r3, #8]
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <_ZN9loraInput11newResponseEv>:

//////////////////
// NEW RESPONSE //
//////////////////

bool loraInput::newResponse(){						// Se reinicia cuando es consultado
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
	bool flag				= this->flagNewResponse;	// Copia flag de nuevo mensaje
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800363c:	73fb      	strb	r3, [r7, #15]
	this->flagNewResponse	= 0;						// Reinicia flag
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return flag;										// Retorna respuesta guardada
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_ZN9loraInput8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t* loraInput::response(){	//
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	return this->buffer;		// Entrega la respuesta final
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <_ZN9loraInput12responseSizeEv>:

uint8_t loraInput::responseSize(){
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	return this->sizeResponse;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_ZN10loraSelect10newCommandEv>:

/////////////////
// NEW COMMAND //
/////////////////

bool loraSelect::newCommand(){
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
	bool flag = this->flagNew;								// Crea variable
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	79db      	ldrb	r3, [r3, #7]
 8003692:	73fb      	strb	r3, [r7, #15]
	this->flagNew	= 0;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	71da      	strb	r2, [r3, #7]

	return flag;							// Retorna salida
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <_ZN10loraSelect10getCommandEv>:

/////////////////
// GET COMMAND //
/////////////////

uint8_t	*loraSelect::getCommand(){
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	return this->command;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZN10loraSelect14getCommandSizeEv>:

///////////////////
// GET RESPONSES //
///////////////////

uint8_t loraSelect::getCommandSize(){
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	return this->commandSize;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	791b      	ldrb	r3, [r3, #4]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <_ZN10loraSelect13qttyResponsesEv>:

////////////////////////
// QUANTITY RESPONSES //
////////////////////////

uint8_t loraSelect::qttyResponses(){
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	return this->qtty;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	795b      	ldrb	r3, [r3, #5]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <_ZN12loraDecision10setRetriesEh>:

//////////////////
// SET RETRIES  //
//////////////////

void loraDecision::setRetries( uint8_t retries ){
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
	this->retries	= retries;					//
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	701a      	strb	r2, [r3, #0]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <_ZN12loraDecision8responseEh>:
//////////////
// RESPONSE //
//////////////


void loraDecision::response ( uint8_t position ){
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	70fb      	strb	r3, [r7, #3]
	this->position	= position;					//	Copia posicion
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	705a      	strb	r2, [r3, #1]

	if ( position == 0 || position == 12 ){						//	Si no hay error
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <_ZN12loraDecision8responseEh+0x1e>
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d10f      	bne.n	800374c <_ZN12loraDecision8responseEh+0x3e>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	709a      	strb	r2, [r3, #2]
		else{									//	Si no pasa  limite
			this->flagBurn		= 0;			//	No esta quemado
			this->flagRepeat	= 1;			//	Solicita repetir
		}
	}
}
 800374a:	e054      	b.n	80037f6 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 10 ){
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	2b0a      	cmp	r3, #10
 8003750:	d10f      	bne.n	8003772 <_ZN12loraDecision8responseEh+0x64>
		this->flagCorrect	= 0;				//	Indica que la respuesta es correcta
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 1;				//	Reinicia flag quemado
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	709a      	strb	r2, [r3, #2]
}
 8003770:	e041      	b.n	80037f6 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position < 98 ){
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	2b61      	cmp	r3, #97	@ 0x61
 8003776:	d80f      	bhi.n	8003798 <_ZN12loraDecision8responseEh+0x8a>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	709a      	strb	r2, [r3, #2]
}
 8003796:	e02e      	b.n	80037f6 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 98 ){
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	2b62      	cmp	r3, #98	@ 0x62
 800379c:	d10f      	bne.n	80037be <_ZN12loraDecision8responseEh+0xb0>
		this->flagCorrect	= 0;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	70da      	strb	r2, [r3, #3]
		this->flagBurn		= 0;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	715a      	strb	r2, [r3, #5]
		this->count			= 0;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	709a      	strb	r2, [r3, #2]
		this->flagEnable	= 1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	719a      	strb	r2, [r3, #6]
}
 80037bc:	e01b      	b.n	80037f6 <_ZN12loraDecision8responseEh+0xe8>
		this->flagCorrect	= 0;				//	Reinicia flag correcto
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	70da      	strb	r2, [r3, #3]
		this->count++;							//	Suma uno al contador
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	789b      	ldrb	r3, [r3, #2]
 80037c8:	3301      	adds	r3, #1
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	709a      	strb	r2, [r3, #2]
		if ( this->count >= this->retries ){	//	Si pasa limite de reintentos
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	789a      	ldrb	r2, [r3, #2]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d306      	bcc.n	80037ea <_ZN12loraDecision8responseEh+0xdc>
			this->flagBurn		= 1;			//	Indica que esta quemado
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 0;			//	No hay que repetir
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	715a      	strb	r2, [r3, #5]
}
 80037e8:	e005      	b.n	80037f6 <_ZN12loraDecision8responseEh+0xe8>
			this->flagBurn		= 0;			//	No esta quemado
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 1;			//	Solicita repetir
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	715a      	strb	r2, [r3, #5]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <_ZN12loraDecision5resetEv>:

///////////
// RESET //
///////////

void loraDecision::reset(){
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
	this->flagCorrect	= 0;	//	Reinicia indicador de msj correcto
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	70da      	strb	r2, [r3, #3]
	this->flagBurn		= 0;	//	Reinicia indicador de msj quemado
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	711a      	strb	r2, [r3, #4]
	this->flagRepeat	= 0;	//	Reinicia indicador de repetir mensaje
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	715a      	strb	r2, [r3, #5]
	this->count			= 0;	//	Reinicia contador
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	709a      	strb	r2, [r3, #2]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <_ZN12loraDecision7disableEv>:

void loraDecision::disable(){
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
	this->flagEnable	= 0;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	719a      	strb	r2, [r3, #6]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <_ZN12fifoCommandsC1Ev>:
////////////////////////
// FIFO COMMAND CLASS //
////////////////////////


class fifoCommands{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f103 0239 	add.w	r2, r3, #57	@ 0x39
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f103 0243 	add.w	r2, r3, #67	@ 0x43
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f103 024d 	add.w	r2, r3, #77	@ 0x4d
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f103 0257 	add.w	r2, r3, #87	@ 0x57
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	615a      	str	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f103 0261 	add.w	r2, r3, #97	@ 0x61
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	619a      	str	r2, [r3, #24]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f103 026b 	add.w	r2, r3, #107	@ 0x6b
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	61da      	str	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f103 0275 	add.w	r2, r3, #117	@ 0x75
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	621a      	str	r2, [r3, #32]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f103 027f 	add.w	r2, r3, #127	@ 0x7f
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f103 0289 	add.w	r2, r3, #137	@ 0x89
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038c8:	f001 fb19 	bl	8004efe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038cc:	f000 f8dc 	bl	8003a88 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038d0:	f000 fb56 	bl	8003f80 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80038d4:	f000 fafa 	bl	8003ecc <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 80038d8:	f000 fa90 	bl	8003dfc <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 80038dc:	f000 fac2 	bl	8003e64 <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 80038e0:	f000 f9fe 	bl	8003ce0 <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 80038e4:	f000 fa4a 	bl	8003d7c <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 80038e8:	f000 f94a 	bl	8003b80 <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 80038ec:	f000 f924 	bl	8003b38 <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 80038f0:	4845      	ldr	r0, [pc, #276]	@ (8003a08 <main+0x144>)
 80038f2:	f007 ffdf 	bl	800b8b4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA	(&huart4,	rxLora, sizeof(rxLora));
 80038f6:	2201      	movs	r2, #1
 80038f8:	4944      	ldr	r1, [pc, #272]	@ (8003a0c <main+0x148>)
 80038fa:	4845      	ldr	r0, [pc, #276]	@ (8003a10 <main+0x14c>)
 80038fc:	f008 fbbc 	bl	800c078 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA	(&huart5,	rxGps, sizeof(rxGps));
 8003900:	2202      	movs	r2, #2
 8003902:	4944      	ldr	r1, [pc, #272]	@ (8003a14 <main+0x150>)
 8003904:	4844      	ldr	r0, [pc, #272]	@ (8003a18 <main+0x154>)
 8003906:	f008 fbb7 	bl	800c078 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 800390a:	2203      	movs	r2, #3
 800390c:	4943      	ldr	r1, [pc, #268]	@ (8003a1c <main+0x158>)
 800390e:	4844      	ldr	r0, [pc, #272]	@ (8003a20 <main+0x15c>)
 8003910:	f001 ff0c 	bl	800572c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupLoraApp();
 8003914:	f7ff fc42 	bl	800319c <_Z12setupLoraAppv>

  chSetRN2903.addCommand( &macSetCh8 );
 8003918:	4942      	ldr	r1, [pc, #264]	@ (8003a24 <main+0x160>)
 800391a:	4843      	ldr	r0, [pc, #268]	@ (8003a28 <main+0x164>)
 800391c:	f7ff fd3c 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh9 );
 8003920:	4942      	ldr	r1, [pc, #264]	@ (8003a2c <main+0x168>)
 8003922:	4841      	ldr	r0, [pc, #260]	@ (8003a28 <main+0x164>)
 8003924:	f7ff fd38 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh10 );
 8003928:	4941      	ldr	r1, [pc, #260]	@ (8003a30 <main+0x16c>)
 800392a:	483f      	ldr	r0, [pc, #252]	@ (8003a28 <main+0x164>)
 800392c:	f7ff fd34 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &radioSetMod	);
 8003930:	4940      	ldr	r1, [pc, #256]	@ (8003a34 <main+0x170>)
 8003932:	4841      	ldr	r0, [pc, #260]	@ (8003a38 <main+0x174>)
 8003934:	f7ff fd30 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetSf 	);
 8003938:	4940      	ldr	r1, [pc, #256]	@ (8003a3c <main+0x178>)
 800393a:	483f      	ldr	r0, [pc, #252]	@ (8003a38 <main+0x174>)
 800393c:	f7ff fd2c 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetBw 	);
 8003940:	493f      	ldr	r1, [pc, #252]	@ (8003a40 <main+0x17c>)
 8003942:	483d      	ldr	r0, [pc, #244]	@ (8003a38 <main+0x174>)
 8003944:	f7ff fd28 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetPwr 	);
 8003948:	493e      	ldr	r1, [pc, #248]	@ (8003a44 <main+0x180>)
 800394a:	483b      	ldr	r0, [pc, #236]	@ (8003a38 <main+0x174>)
 800394c:	f7ff fd24 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &macSetDeveui );
 8003950:	493d      	ldr	r1, [pc, #244]	@ (8003a48 <main+0x184>)
 8003952:	4839      	ldr	r0, [pc, #228]	@ (8003a38 <main+0x174>)
 8003954:	f7ff fd20 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetDevAddr );
 8003958:	493c      	ldr	r1, [pc, #240]	@ (8003a4c <main+0x188>)
 800395a:	4837      	ldr	r0, [pc, #220]	@ (8003a38 <main+0x174>)
 800395c:	f7ff fd1c 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetNwkskey );
 8003960:	493b      	ldr	r1, [pc, #236]	@ (8003a50 <main+0x18c>)
 8003962:	4835      	ldr	r0, [pc, #212]	@ (8003a38 <main+0x174>)
 8003964:	f7ff fd18 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetAppskey );
 8003968:	493a      	ldr	r1, [pc, #232]	@ (8003a54 <main+0x190>)
 800396a:	4833      	ldr	r0, [pc, #204]	@ (8003a38 <main+0x174>)
 800396c:	f7ff fd14 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macJoinAbp );
 8003970:	4939      	ldr	r1, [pc, #228]	@ (8003a58 <main+0x194>)
 8003972:	4831      	ldr	r0, [pc, #196]	@ (8003a38 <main+0x174>)
 8003974:	f7ff fd10 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetSync );
 8003978:	4938      	ldr	r1, [pc, #224]	@ (8003a5c <main+0x198>)
 800397a:	482f      	ldr	r0, [pc, #188]	@ (8003a38 <main+0x174>)
 800397c:	f7ff fd0c 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSave );
 8003980:	4937      	ldr	r1, [pc, #220]	@ (8003a60 <main+0x19c>)
 8003982:	482d      	ldr	r0, [pc, #180]	@ (8003a38 <main+0x174>)
 8003984:	f7ff fd08 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loopRN2903.addCommand( &macTxData );
 8003988:	4936      	ldr	r1, [pc, #216]	@ (8003a64 <main+0x1a0>)
 800398a:	4837      	ldr	r0, [pc, #220]	@ (8003a68 <main+0x1a4>)
 800398c:	f7ff fd04 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>
  loopRN2903.addCommand( &macTxData );
 8003990:	4934      	ldr	r1, [pc, #208]	@ (8003a64 <main+0x1a0>)
 8003992:	4835      	ldr	r0, [pc, #212]	@ (8003a68 <main+0x1a4>)
 8003994:	f7ff fd00 	bl	8003398 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loraCheck.setResponsePointer( rxCommand, 13);
 8003998:	220d      	movs	r2, #13
 800399a:	4934      	ldr	r1, [pc, #208]	@ (8003a6c <main+0x1a8>)
 800399c:	4834      	ldr	r0, [pc, #208]	@ (8003a70 <main+0x1ac>)
 800399e:	f7ff fd7a 	bl	8003496 <_ZN9loraCheck18setResponsePointerEPPhh>
  loraDecision.setRetries(3);
 80039a2:	2103      	movs	r1, #3
 80039a4:	4833      	ldr	r0, [pc, #204]	@ (8003a74 <main+0x1b0>)
 80039a6:	f7ff fea3 	bl	80036f0 <_ZN12loraDecision10setRetriesEh>

  loraInput.insertBuffer( bufferLoraIn, sizeof(bufferLoraIn));
 80039aa:	2232      	movs	r2, #50	@ 0x32
 80039ac:	4932      	ldr	r1, [pc, #200]	@ (8003a78 <main+0x1b4>)
 80039ae:	4833      	ldr	r0, [pc, #204]	@ (8003a7c <main+0x1b8>)
 80039b0:	f7ff fe2a 	bl	8003608 <_ZN9loraInput12insertBufferEPhh>
  //displayLink.inputDisplay(8888, 3);
  //
  HAL_IWDG_Init(&hiwdg);
 80039b4:	4832      	ldr	r0, [pc, #200]	@ (8003a80 <main+0x1bc>)
 80039b6:	f006 fae6 	bl	8009f86 <HAL_IWDG_Init>
  while (1)
  {

	  hwInput();
 80039ba:	f7fd fe70 	bl	800169e <_Z7hwInputv>
	  linkInput();
 80039be:	f7fe fe91 	bl	80026e4 <_Z9linkInputv>
	  tcpInput();
 80039c2:	f001 f89d 	bl	8004b00 <_Z8tcpInputv>
	  app();
 80039c6:	f7fd f8c7 	bl	8000b58 <_Z3appv>
	  tcpOutput();
 80039ca:	f001 f9d5 	bl	8004d78 <_Z9tcpOutputv>
	  linkOutput();
 80039ce:	f7ff fba5 	bl	800311c <_Z10linkOutputv>
	  hwOutput();
 80039d2:	f7fe fad1 	bl	8001f78 <_Z8hwOutputv>
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */


	  HAL_SuspendTick();
 80039d6:	f001 fb2b 	bl	8005030 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80039da:	2101      	movs	r1, #1
 80039dc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80039e0:	f006 fb28 	bl	800a034 <HAL_PWR_EnterSLEEPMode>

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 80039e4:	bf00      	nop
 80039e6:	4b27      	ldr	r3, [pc, #156]	@ (8003a84 <main+0x1c0>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f083 0301 	eor.w	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f8      	bne.n	80039e6 <main+0x122>
	  }							// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 80039f4:	4b23      	ldr	r3, [pc, #140]	@ (8003a84 <main+0x1c0>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]

	  HAL_ResumeTick();
 80039fa:	f001 fb29 	bl	8005050 <HAL_ResumeTick>
	  HAL_IWDG_Refresh(&hiwdg);
 80039fe:	4820      	ldr	r0, [pc, #128]	@ (8003a80 <main+0x1bc>)
 8003a00:	f006 fb07 	bl	800a012 <HAL_IWDG_Refresh>
	  hwInput();
 8003a04:	e7d9      	b.n	80039ba <main+0xf6>
 8003a06:	bf00      	nop
 8003a08:	20000aec 	.word	0x20000aec
 8003a0c:	20000bf4 	.word	0x20000bf4
 8003a10:	200008bc 	.word	0x200008bc
 8003a14:	20000be4 	.word	0x20000be4
 8003a18:	20000944 	.word	0x20000944
 8003a1c:	20001240 	.word	0x20001240
 8003a20:	20000728 	.word	0x20000728
 8003a24:	20000704 	.word	0x20000704
 8003a28:	20000e30 	.word	0x20000e30
 8003a2c:	20000710 	.word	0x20000710
 8003a30:	2000071c 	.word	0x2000071c
 8003a34:	20000650 	.word	0x20000650
 8003a38:	20000c9c 	.word	0x20000c9c
 8003a3c:	2000065c 	.word	0x2000065c
 8003a40:	20000668 	.word	0x20000668
 8003a44:	20000674 	.word	0x20000674
 8003a48:	20000680 	.word	0x20000680
 8003a4c:	2000068c 	.word	0x2000068c
 8003a50:	20000698 	.word	0x20000698
 8003a54:	200006a4 	.word	0x200006a4
 8003a58:	200006bc 	.word	0x200006bc
 8003a5c:	200006c8 	.word	0x200006c8
 8003a60:	200006d4 	.word	0x200006d4
 8003a64:	200006e0 	.word	0x200006e0
 8003a68:	20000fc4 	.word	0x20000fc4
 8003a6c:	2000016c 	.word	0x2000016c
 8003a70:	20000c78 	.word	0x20000c78
 8003a74:	20000c8c 	.word	0x20000c8c
 8003a78:	20001158 	.word	0x20001158
 8003a7c:	20000c38 	.word	0x20000c38
 8003a80:	20000b38 	.word	0x20000b38
 8003a84:	2000123c 	.word	0x2000123c

08003a88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b096      	sub	sp, #88	@ 0x58
 8003a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a8e:	f107 0314 	add.w	r3, r7, #20
 8003a92:	2244      	movs	r2, #68	@ 0x44
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f009 fd85 	bl	800d5a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a9c:	463b      	mov	r3, r7
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	60da      	str	r2, [r3, #12]
 8003aa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003aaa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003aae:	f006 fb03 	bl	800a0b8 <HAL_PWREx_ControlVoltageScaling>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003ac2:	f000 fb8d 	bl	80041e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ace:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ad4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ad6:	2340      	movs	r3, #64	@ 0x40
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ade:	f107 0314 	add.w	r3, r7, #20
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f006 fb86 	bl	800a1f4 <HAL_RCC_OscConfig>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8003af8:	f000 fb72 	bl	80041e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003afc:	230f      	movs	r3, #15
 8003afe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003b00:	2302      	movs	r3, #2
 8003b02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b10:	463b      	mov	r3, r7
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f006 ff87 	bl	800aa28 <HAL_RCC_ClockConfig>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8003b2a:	f000 fb59 	bl	80041e0 <Error_Handler>
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3758      	adds	r7, #88	@ 0x58
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* Initialize the IWDG peripheral */
  hiwdg.Instance = IWDG;
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <_ZL12MX_IWDG_Initv+0x40>)
 8003b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8003b7c <_ZL12MX_IWDG_Initv+0x44>)
 8003b40:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <_ZL12MX_IWDG_Initv+0x40>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 399;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <_ZL12MX_IWDG_Initv+0x40>)
 8003b4a:	f240 128f 	movw	r2, #399	@ 0x18f
 8003b4e:	609a      	str	r2, [r3, #8]
  hiwdg.Init.Window	= 390;
 8003b50:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <_ZL12MX_IWDG_Initv+0x40>)
 8003b52:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8003b56:	60da      	str	r2, [r3, #12]

  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003b58:	4807      	ldr	r0, [pc, #28]	@ (8003b78 <_ZL12MX_IWDG_Initv+0x40>)
 8003b5a:	f006 fa14 	bl	8009f86 <HAL_IWDG_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <_ZL12MX_IWDG_Initv+0x3a>
  {
    Error_Handler();
 8003b6e:	f000 fb37 	bl	80041e0 <Error_Handler>
  }

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000b38 	.word	0x20000b38
 8003b7c:	40003000 	.word	0x40003000

08003b80 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	@ 0x28
 8003b84:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
 8003ba0:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003ba4:	4a4a      	ldr	r2, [pc, #296]	@ (8003cd0 <_ZL12MX_ADC1_Initv+0x150>)
 8003ba6:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003ba8:	4b48      	ldr	r3, [pc, #288]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003bae:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bb4:	4b45      	ldr	r3, [pc, #276]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003bba:	4b44      	ldr	r3, [pc, #272]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bc0:	4b42      	ldr	r3, [pc, #264]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003bc6:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8003bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 8003bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003be0:	4b3a      	ldr	r3, [pc, #232]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003be6:	4b39      	ldr	r3, [pc, #228]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003bec:	4b37      	ldr	r3, [pc, #220]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003bf4:	4b35      	ldr	r3, [pc, #212]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8003bfa:	4b34      	ldr	r3, [pc, #208]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c02:	4832      	ldr	r0, [pc, #200]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003c04:	f001 fc3e 	bl	8005484 <HAL_ADC_Init>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 8003c18:	f000 fae2 	bl	80041e0 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c20:	f107 031c 	add.w	r3, r7, #28
 8003c24:	4619      	mov	r1, r3
 8003c26:	4829      	ldr	r0, [pc, #164]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003c28:	f002 fdf2 	bl	8006810 <HAL_ADCEx_MultiModeConfigChannel>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 8003c3c:	f000 fad0 	bl	80041e0 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8003c40:	4b24      	ldr	r3, [pc, #144]	@ (8003cd4 <_ZL12MX_ADC1_Initv+0x154>)
 8003c42:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c44:	2306      	movs	r3, #6
 8003c46:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c4c:	237f      	movs	r3, #127	@ 0x7f
 8003c4e:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003c50:	2304      	movs	r3, #4
 8003c52:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	481b      	ldr	r0, [pc, #108]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003c5e:	f002 f859 	bl	8005d14 <HAL_ADC_ConfigChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 8003c72:	f000 fab5 	bl	80041e0 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8003c76:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <_ZL12MX_ADC1_Initv+0x158>)
 8003c78:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4812      	ldr	r0, [pc, #72]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003c84:	f002 f846 	bl	8005d14 <HAL_ADC_ConfigChannel>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bf14      	ite	ne
 8003c8e:	2301      	movne	r3, #1
 8003c90:	2300      	moveq	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 8003c98:	f000 faa2 	bl	80041e0 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <_ZL12MX_ADC1_Initv+0x15c>)
 8003c9e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003ca0:	2312      	movs	r3, #18
 8003ca2:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4808      	ldr	r0, [pc, #32]	@ (8003ccc <_ZL12MX_ADC1_Initv+0x14c>)
 8003caa:	f002 f833 	bl	8005d14 <HAL_ADC_ConfigChannel>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 8003cbe:	f000 fa8f 	bl	80041e0 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 8003cc2:	bf00      	nop
 8003cc4:	3728      	adds	r7, #40	@ 0x28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000728 	.word	0x20000728
 8003cd0:	50040000 	.word	0x50040000
 8003cd4:	04300002 	.word	0x04300002
 8003cd8:	08600004 	.word	0x08600004
 8003cdc:	0c900008 	.word	0x0c900008

08003ce0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ce4:	4b22      	ldr	r3, [pc, #136]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003ce6:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <_ZL12MX_I2C1_Initv+0x94>)
 8003ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003cea:	4b21      	ldr	r3, [pc, #132]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003cec:	4a22      	ldr	r2, [pc, #136]	@ (8003d78 <_ZL12MX_I2C1_Initv+0x98>)
 8003cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003d02:	4b1b      	ldr	r3, [pc, #108]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d08:	4b19      	ldr	r3, [pc, #100]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d0e:	4b18      	ldr	r3, [pc, #96]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d14:	4b16      	ldr	r3, [pc, #88]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d1a:	4815      	ldr	r0, [pc, #84]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003d1c:	f003 fd36 	bl	800778c <HAL_I2C_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8003d30:	f000 fa56 	bl	80041e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d34:	2100      	movs	r1, #0
 8003d36:	480e      	ldr	r0, [pc, #56]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003d38:	f006 f88e 	bl	8009e58 <HAL_I2CEx_ConfigAnalogFilter>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf14      	ite	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	2300      	moveq	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8003d4c:	f000 fa48 	bl	80041e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d50:	2100      	movs	r1, #0
 8003d52:	4807      	ldr	r0, [pc, #28]	@ (8003d70 <_ZL12MX_I2C1_Initv+0x90>)
 8003d54:	f006 f8cb 	bl	8009eee <HAL_I2CEx_ConfigDigitalFilter>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8003d68:	f000 fa3a 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	200007d8 	.word	0x200007d8
 8003d74:	40005400 	.word	0x40005400
 8003d78:	2000090e 	.word	0x2000090e

08003d7c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 8003d8c:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <_ZL12MX_TIM6_Initv+0x78>)
 8003d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003df8 <_ZL12MX_TIM6_Initv+0x7c>)
 8003d90:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 8003d92:	4b18      	ldr	r3, [pc, #96]	@ (8003df4 <_ZL12MX_TIM6_Initv+0x78>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d98:	4b16      	ldr	r3, [pc, #88]	@ (8003df4 <_ZL12MX_TIM6_Initv+0x78>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 8003d9e:	4b15      	ldr	r3, [pc, #84]	@ (8003df4 <_ZL12MX_TIM6_Initv+0x78>)
 8003da0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003da4:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da6:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <_ZL12MX_TIM6_Initv+0x78>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003dac:	4811      	ldr	r0, [pc, #68]	@ (8003df4 <_ZL12MX_TIM6_Initv+0x78>)
 8003dae:	f007 fd29 	bl	800b804 <HAL_TIM_Base_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 8003dc2:	f000 fa0d 	bl	80041e0 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003dce:	1d3b      	adds	r3, r7, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4808      	ldr	r0, [pc, #32]	@ (8003df4 <_ZL12MX_TIM6_Initv+0x78>)
 8003dd4:	f007 ffa2 	bl	800bd1c <HAL_TIMEx_MasterConfigSynchronization>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 8003de8:	f000 f9fa 	bl	80041e0 <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000aec 	.word	0x20000aec
 8003df8:	40001000 	.word	0x40001000

08003dfc <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003e00:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e02:	4a17      	ldr	r2, [pc, #92]	@ (8003e60 <_ZL13MX_UART4_Initv+0x64>)
 8003e04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8003e06:	4b15      	ldr	r3, [pc, #84]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e08:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8003e0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003e0e:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003e14:	4b11      	ldr	r3, [pc, #68]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003e1a:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003e20:	4b0e      	ldr	r3, [pc, #56]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e22:	220c      	movs	r2, #12
 8003e24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e32:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e38:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003e3e:	4807      	ldr	r0, [pc, #28]	@ (8003e5c <_ZL13MX_UART4_Initv+0x60>)
 8003e40:	f008 f812 	bl	800be68 <HAL_UART_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8003e54:	f000 f9c4 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200008bc 	.word	0x200008bc
 8003e60:	40004c00 	.word	0x40004c00

08003e64 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003e68:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ec8 <_ZL13MX_UART5_Initv+0x64>)
 8003e6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003e6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003e76:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 8003e82:	4b10      	ldr	r3, [pc, #64]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003e88:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e8a:	220c      	movs	r2, #12
 8003e8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ea0:	4b08      	ldr	r3, [pc, #32]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003ea6:	4807      	ldr	r0, [pc, #28]	@ (8003ec4 <_ZL13MX_UART5_Initv+0x60>)
 8003ea8:	f007 ffde 	bl	800be68 <HAL_UART_Init>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8003ebc:	f000 f990 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000944 	.word	0x20000944
 8003ec8:	40005000 	.word	0x40005000

08003ecc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f7c <_ZL11MX_DMA_Initv+0xb0>)
 8003ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed6:	4a29      	ldr	r2, [pc, #164]	@ (8003f7c <_ZL11MX_DMA_Initv+0xb0>)
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ede:	4b27      	ldr	r3, [pc, #156]	@ (8003f7c <_ZL11MX_DMA_Initv+0xb0>)
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003eea:	4b24      	ldr	r3, [pc, #144]	@ (8003f7c <_ZL11MX_DMA_Initv+0xb0>)
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	4a23      	ldr	r2, [pc, #140]	@ (8003f7c <_ZL11MX_DMA_Initv+0xb0>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ef6:	4b21      	ldr	r3, [pc, #132]	@ (8003f7c <_ZL11MX_DMA_Initv+0xb0>)
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	200b      	movs	r0, #11
 8003f08:	f002 fe31 	bl	8006b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003f0c:	200b      	movs	r0, #11
 8003f0e:	f002 fe4a 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003f12:	2200      	movs	r2, #0
 8003f14:	2100      	movs	r1, #0
 8003f16:	2010      	movs	r0, #16
 8003f18:	f002 fe29 	bl	8006b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003f1c:	2010      	movs	r0, #16
 8003f1e:	f002 fe42 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003f22:	2200      	movs	r2, #0
 8003f24:	2100      	movs	r1, #0
 8003f26:	2011      	movs	r0, #17
 8003f28:	f002 fe21 	bl	8006b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003f2c:	2011      	movs	r0, #17
 8003f2e:	f002 fe3a 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2100      	movs	r1, #0
 8003f36:	2038      	movs	r0, #56	@ 0x38
 8003f38:	f002 fe19 	bl	8006b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003f3c:	2038      	movs	r0, #56	@ 0x38
 8003f3e:	f002 fe32 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2100      	movs	r1, #0
 8003f46:	2039      	movs	r0, #57	@ 0x39
 8003f48:	f002 fe11 	bl	8006b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8003f4c:	2039      	movs	r0, #57	@ 0x39
 8003f4e:	f002 fe2a 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8003f52:	2200      	movs	r2, #0
 8003f54:	2100      	movs	r1, #0
 8003f56:	203a      	movs	r0, #58	@ 0x3a
 8003f58:	f002 fe09 	bl	8006b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003f5c:	203a      	movs	r0, #58	@ 0x3a
 8003f5e:	f002 fe22 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	203c      	movs	r0, #60	@ 0x3c
 8003f68:	f002 fe01 	bl	8006b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003f6c:	203c      	movs	r0, #60	@ 0x3c
 8003f6e:	f002 fe1a 	bl	8006ba6 <HAL_NVIC_EnableIRQ>

}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000

08003f80 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	@ 0x30
 8003f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f86:	f107 031c 	add.w	r3, r7, #28
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f96:	4b4b      	ldr	r3, [pc, #300]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003f9c:	f043 0310 	orr.w	r3, r3, #16
 8003fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fa2:	4b48      	ldr	r3, [pc, #288]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	61bb      	str	r3, [r7, #24]
 8003fac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fae:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	4a44      	ldr	r2, [pc, #272]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fb4:	f043 0304 	orr.w	r3, r3, #4
 8003fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fba:	4b42      	ldr	r3, [pc, #264]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	4a3e      	ldr	r2, [pc, #248]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fde:	4b39      	ldr	r3, [pc, #228]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe2:	4a38      	ldr	r2, [pc, #224]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ff6:	4b33      	ldr	r3, [pc, #204]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffa:	4a32      	ldr	r2, [pc, #200]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8003ffc:	f043 0308 	orr.w	r3, r3, #8
 8004000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004002:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8004004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800400e:	4b2d      	ldr	r3, [pc, #180]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8004010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004012:	4a2c      	ldr	r2, [pc, #176]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 8004014:	f043 0302 	orr.w	r3, r3, #2
 8004018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800401a:	4b2a      	ldr	r3, [pc, #168]	@ (80040c4 <_ZL12MX_GPIO_Initv+0x144>)
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8004026:	2200      	movs	r2, #0
 8004028:	210f      	movs	r1, #15
 800402a:	4827      	ldr	r0, [pc, #156]	@ (80040c8 <_ZL12MX_GPIO_Initv+0x148>)
 800402c:	f003 fb96 	bl	800775c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8004030:	2200      	movs	r2, #0
 8004032:	2174      	movs	r1, #116	@ 0x74
 8004034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004038:	f003 fb90 	bl	800775c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800403c:	2200      	movs	r2, #0
 800403e:	f64f 7105 	movw	r1, #65285	@ 0xff05
 8004042:	4822      	ldr	r0, [pc, #136]	@ (80040cc <_ZL12MX_GPIO_Initv+0x14c>)
 8004044:	f003 fb8a 	bl	800775c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8004048:	230f      	movs	r3, #15
 800404a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800404c:	2301      	movs	r3, #1
 800404e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	2300      	movs	r3, #0
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004054:	2300      	movs	r3, #0
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	4619      	mov	r1, r3
 800405e:	481a      	ldr	r0, [pc, #104]	@ (80040c8 <_ZL12MX_GPIO_Initv+0x148>)
 8004060:	f003 f8e0 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004064:	2374      	movs	r3, #116	@ 0x74
 8004066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004068:	2301      	movs	r3, #1
 800406a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004070:	2300      	movs	r3, #0
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004074:	f107 031c 	add.w	r3, r7, #28
 8004078:	4619      	mov	r1, r3
 800407a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800407e:	f003 f8d1 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004082:	2308      	movs	r3, #8
 8004084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004086:	2300      	movs	r3, #0
 8004088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408e:	f107 031c 	add.w	r3, r7, #28
 8004092:	4619      	mov	r1, r3
 8004094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004098:	f003 f8c4 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800409c:	f64f 7301 	movw	r3, #65281	@ 0xff01
 80040a0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a2:	2301      	movs	r3, #1
 80040a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040ae:	f107 031c 	add.w	r3, r7, #28
 80040b2:	4619      	mov	r1, r3
 80040b4:	4805      	ldr	r0, [pc, #20]	@ (80040cc <_ZL12MX_GPIO_Initv+0x14c>)
 80040b6:	f003 f8b5 	bl	8007224 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80040ba:	bf00      	nop
 80040bc:	3730      	adds	r7, #48	@ 0x30
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	48001000 	.word	0x48001000
 80040cc:	48000c00 	.word	0x48000c00

080040d0 <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a05      	ldr	r2, [pc, #20]	@ (80040f4 <HAL_ADC_ConvCpltCallback+0x24>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d102      	bne.n	80040e8 <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 80040e2:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_ADC_ConvCpltCallback+0x28>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	50040000 	.word	0x50040000
 80040f8:	2000124c 	.word	0x2000124c

080040fc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <HAL_UART_RxCpltCallback+0x64>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10a      	bne.n	8004124 <HAL_UART_RxCpltCallback+0x28>
		loraIn.insertElement(rxLora[0]);
 800410e:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <HAL_UART_RxCpltCallback+0x68>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	4619      	mov	r1, r3
 8004114:	4814      	ldr	r0, [pc, #80]	@ (8004168 <HAL_UART_RxCpltCallback+0x6c>)
 8004116:	f7fd fa0d 	bl	8001534 <_ZN8fifoUart13insertElementEh>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 800411a:	2201      	movs	r2, #1
 800411c:	4911      	ldr	r1, [pc, #68]	@ (8004164 <HAL_UART_RxCpltCallback+0x68>)
 800411e:	4813      	ldr	r0, [pc, #76]	@ (800416c <HAL_UART_RxCpltCallback+0x70>)
 8004120:	f007 ffaa 	bl	800c078 <HAL_UART_Receive_DMA>
	}

	if(huart->Instance == UART5){
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_UART_RxCpltCallback+0x74>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d114      	bne.n	8004158 <HAL_UART_RxCpltCallback+0x5c>
		gpsIn.insertElement(rxGps[0]);
 800412e:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <HAL_UART_RxCpltCallback+0x78>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	4810      	ldr	r0, [pc, #64]	@ (8004178 <HAL_UART_RxCpltCallback+0x7c>)
 8004136:	f7fd f9fd 	bl	8001534 <_ZN8fifoUart13insertElementEh>
		gpsIn.insertElement(rxGps[1]);
 800413a:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <HAL_UART_RxCpltCallback+0x78>)
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	4619      	mov	r1, r3
 8004140:	480d      	ldr	r0, [pc, #52]	@ (8004178 <HAL_UART_RxCpltCallback+0x7c>)
 8004142:	f7fd f9f7 	bl	8001534 <_ZN8fifoUart13insertElementEh>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxGps, sizeof(rxGps));
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart5, rxGps, sizeof(rxGps));
 8004146:	2202      	movs	r2, #2
 8004148:	490a      	ldr	r1, [pc, #40]	@ (8004174 <HAL_UART_RxCpltCallback+0x78>)
 800414a:	480c      	ldr	r0, [pc, #48]	@ (800417c <HAL_UART_RxCpltCallback+0x80>)
 800414c:	f007 ff94 	bl	800c078 <HAL_UART_Receive_DMA>
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8004150:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <HAL_UART_RxCpltCallback+0x80>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	621a      	str	r2, [r3, #32]
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
	}
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40004c00 	.word	0x40004c00
 8004164:	20000bf4 	.word	0x20000bf4
 8004168:	20000bf8 	.word	0x20000bf8
 800416c:	200008bc 	.word	0x200008bc
 8004170:	40005000 	.word	0x40005000
 8004174:	20000be4 	.word	0x20000be4
 8004178:	20000ba4 	.word	0x20000ba4
 800417c:	20000944 	.word	0x20000944

08004180 <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a05      	ldr	r2, [pc, #20]	@ (80041a4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d102      	bne.n	8004198 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 8004192:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
	}
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40001000 	.word	0x40001000
 80041a8:	2000123c 	.word	0x2000123c

080041ac <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 80041b4:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	200011a7 	.word	0x200011a7

080041cc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041e4:	b672      	cpsid	i
}
 80041e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <Error_Handler+0x8>

080041ec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d115      	bne.n	8004228 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004202:	4293      	cmp	r3, r2
 8004204:	d110      	bne.n	8004228 <_Z41__static_initialization_and_destruction_0ii+0x3c>
gpsInput gpsInput;		// Instancia de gpsInput
 8004206:	480a      	ldr	r0, [pc, #40]	@ (8004230 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004208:	f7fd fa1c 	bl	8001644 <_ZN8gpsInputC1Ev>
fifoUart	gpsIn;		//
 800420c:	4809      	ldr	r0, [pc, #36]	@ (8004234 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800420e:	f7fd f981 	bl	8001514 <_ZN8fifoUartC1Ev>
fifoUart loraIn;			// FIFO que recibe los datos
 8004212:	4809      	ldr	r0, [pc, #36]	@ (8004238 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004214:	f7fd f97e 	bl	8001514 <_ZN8fifoUartC1Ev>
wdTimeout loraTimeWd(4000);
 8004218:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800421c:	4807      	ldr	r0, [pc, #28]	@ (800423c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800421e:	f7ff f8d6 	bl	80033ce <_ZN9wdTimeoutC1El>
fifoCommands fifoContent;
 8004222:	4807      	ldr	r0, [pc, #28]	@ (8004240 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004224:	f7ff fb10 	bl	8003848 <_ZN12fifoCommandsC1Ev>
}
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000b4c 	.word	0x20000b4c
 8004234:	20000ba4 	.word	0x20000ba4
 8004238:	20000bf8 	.word	0x20000bf8
 800423c:	2000118c 	.word	0x2000118c
 8004240:	200011a8 	.word	0x200011a8

08004244 <_GLOBAL__sub_I_hadc1>:
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
 8004248:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800424c:	2001      	movs	r0, #1
 800424e:	f7ff ffcd 	bl	80041ec <_Z41__static_initialization_and_destruction_0ii>
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425a:	4b0f      	ldr	r3, [pc, #60]	@ (8004298 <HAL_MspInit+0x44>)
 800425c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425e:	4a0e      	ldr	r2, [pc, #56]	@ (8004298 <HAL_MspInit+0x44>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6613      	str	r3, [r2, #96]	@ 0x60
 8004266:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <HAL_MspInit+0x44>)
 8004268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <HAL_MspInit+0x44>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	4a08      	ldr	r2, [pc, #32]	@ (8004298 <HAL_MspInit+0x44>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427c:	6593      	str	r3, [r2, #88]	@ 0x58
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_MspInit+0x44>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000

0800429c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b0ac      	sub	sp, #176	@ 0xb0
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042b4:	f107 0310 	add.w	r3, r7, #16
 80042b8:	228c      	movs	r2, #140	@ 0x8c
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f009 f972 	bl	800d5a6 <memset>
  if(hadc->Instance==ADC1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a40      	ldr	r2, [pc, #256]	@ (80043c8 <HAL_ADC_MspInit+0x12c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d179      	bne.n	80043c0 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80042cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80042d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80042d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80042da:	2303      	movs	r3, #3
 80042dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80042de:	2301      	movs	r3, #1
 80042e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80042e2:	2308      	movs	r3, #8
 80042e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80042e6:	2302      	movs	r3, #2
 80042e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80042ea:	2302      	movs	r3, #2
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80042ee:	2302      	movs	r3, #2
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80042f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042f8:	f107 0310 	add.w	r3, r7, #16
 80042fc:	4618      	mov	r0, r3
 80042fe:	f006 fdb7 	bl	800ae70 <HAL_RCCEx_PeriphCLKConfig>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8004308:	f7ff ff6a 	bl	80041e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800430c:	4b2f      	ldr	r3, [pc, #188]	@ (80043cc <HAL_ADC_MspInit+0x130>)
 800430e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004310:	4a2e      	ldr	r2, [pc, #184]	@ (80043cc <HAL_ADC_MspInit+0x130>)
 8004312:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004318:	4b2c      	ldr	r3, [pc, #176]	@ (80043cc <HAL_ADC_MspInit+0x130>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004324:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <HAL_ADC_MspInit+0x130>)
 8004326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004328:	4a28      	ldr	r2, [pc, #160]	@ (80043cc <HAL_ADC_MspInit+0x130>)
 800432a:	f043 0304 	orr.w	r3, r3, #4
 800432e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004330:	4b26      	ldr	r3, [pc, #152]	@ (80043cc <HAL_ADC_MspInit+0x130>)
 8004332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800433c:	2307      	movs	r3, #7
 800433e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004342:	2303      	movs	r3, #3
 8004344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	2300      	movs	r3, #0
 800434a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800434e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004352:	4619      	mov	r1, r3
 8004354:	481e      	ldr	r0, [pc, #120]	@ (80043d0 <HAL_ADC_MspInit+0x134>)
 8004356:	f002 ff65 	bl	8007224 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800435a:	4b1e      	ldr	r3, [pc, #120]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 800435c:	4a1e      	ldr	r2, [pc, #120]	@ (80043d8 <HAL_ADC_MspInit+0x13c>)
 800435e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004360:	4b1c      	ldr	r3, [pc, #112]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 8004362:	2200      	movs	r2, #0
 8004364:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004366:	4b1b      	ldr	r3, [pc, #108]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 8004368:	2200      	movs	r2, #0
 800436a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800436c:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 800436e:	2200      	movs	r2, #0
 8004370:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004372:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 8004374:	2280      	movs	r2, #128	@ 0x80
 8004376:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004378:	4b16      	ldr	r3, [pc, #88]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 800437a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800437e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004380:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 8004382:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004386:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004388:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 800438a:	2220      	movs	r2, #32
 800438c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800438e:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 8004390:	2200      	movs	r2, #0
 8004392:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004394:	480f      	ldr	r0, [pc, #60]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 8004396:	f002 fc2f 	bl	8006bf8 <HAL_DMA_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80043a0:	f7ff ff1e 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a0b      	ldr	r2, [pc, #44]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 80043a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80043aa:	4a0a      	ldr	r2, [pc, #40]	@ (80043d4 <HAL_ADC_MspInit+0x138>)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80043b0:	2200      	movs	r2, #0
 80043b2:	2100      	movs	r1, #0
 80043b4:	2012      	movs	r0, #18
 80043b6:	f002 fbda 	bl	8006b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80043ba:	2012      	movs	r0, #18
 80043bc:	f002 fbf3 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043c0:	bf00      	nop
 80043c2:	37b0      	adds	r7, #176	@ 0xb0
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	50040000 	.word	0x50040000
 80043cc:	40021000 	.word	0x40021000
 80043d0:	48000800 	.word	0x48000800
 80043d4:	20000790 	.word	0x20000790
 80043d8:	40020008 	.word	0x40020008

080043dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0ac      	sub	sp, #176	@ 0xb0
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	228c      	movs	r2, #140	@ 0x8c
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f009 f8d2 	bl	800d5a6 <memset>
  if(hi2c->Instance==I2C1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a52      	ldr	r2, [pc, #328]	@ (8004550 <HAL_I2C_MspInit+0x174>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f040 809d 	bne.w	8004548 <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800440e:	2340      	movs	r3, #64	@ 0x40
 8004410:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004412:	2300      	movs	r3, #0
 8004414:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004416:	f107 0310 	add.w	r3, r7, #16
 800441a:	4618      	mov	r0, r3
 800441c:	f006 fd28 	bl	800ae70 <HAL_RCCEx_PeriphCLKConfig>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004426:	f7ff fedb 	bl	80041e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	4b4a      	ldr	r3, [pc, #296]	@ (8004554 <HAL_I2C_MspInit+0x178>)
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	4a49      	ldr	r2, [pc, #292]	@ (8004554 <HAL_I2C_MspInit+0x178>)
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004436:	4b47      	ldr	r3, [pc, #284]	@ (8004554 <HAL_I2C_MspInit+0x178>)
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004442:	23c0      	movs	r3, #192	@ 0xc0
 8004444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004448:	2312      	movs	r3, #18
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004454:	2303      	movs	r3, #3
 8004456:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800445a:	2304      	movs	r3, #4
 800445c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004460:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004464:	4619      	mov	r1, r3
 8004466:	483c      	ldr	r0, [pc, #240]	@ (8004558 <HAL_I2C_MspInit+0x17c>)
 8004468:	f002 fedc 	bl	8007224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800446c:	4b39      	ldr	r3, [pc, #228]	@ (8004554 <HAL_I2C_MspInit+0x178>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004470:	4a38      	ldr	r2, [pc, #224]	@ (8004554 <HAL_I2C_MspInit+0x178>)
 8004472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004476:	6593      	str	r3, [r2, #88]	@ 0x58
 8004478:	4b36      	ldr	r3, [pc, #216]	@ (8004554 <HAL_I2C_MspInit+0x178>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8004484:	4b35      	ldr	r3, [pc, #212]	@ (800455c <HAL_I2C_MspInit+0x180>)
 8004486:	4a36      	ldr	r2, [pc, #216]	@ (8004560 <HAL_I2C_MspInit+0x184>)
 8004488:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800448a:	4b34      	ldr	r3, [pc, #208]	@ (800455c <HAL_I2C_MspInit+0x180>)
 800448c:	2203      	movs	r2, #3
 800448e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004490:	4b32      	ldr	r3, [pc, #200]	@ (800455c <HAL_I2C_MspInit+0x180>)
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004496:	4b31      	ldr	r3, [pc, #196]	@ (800455c <HAL_I2C_MspInit+0x180>)
 8004498:	2200      	movs	r2, #0
 800449a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800449c:	4b2f      	ldr	r3, [pc, #188]	@ (800455c <HAL_I2C_MspInit+0x180>)
 800449e:	2280      	movs	r2, #128	@ 0x80
 80044a0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044a2:	4b2e      	ldr	r3, [pc, #184]	@ (800455c <HAL_I2C_MspInit+0x180>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044a8:	4b2c      	ldr	r3, [pc, #176]	@ (800455c <HAL_I2C_MspInit+0x180>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80044ae:	4b2b      	ldr	r3, [pc, #172]	@ (800455c <HAL_I2C_MspInit+0x180>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044b4:	4b29      	ldr	r3, [pc, #164]	@ (800455c <HAL_I2C_MspInit+0x180>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80044ba:	4828      	ldr	r0, [pc, #160]	@ (800455c <HAL_I2C_MspInit+0x180>)
 80044bc:	f002 fb9c 	bl	8006bf8 <HAL_DMA_Init>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 80044c6:	f7ff fe8b 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a23      	ldr	r2, [pc, #140]	@ (800455c <HAL_I2C_MspInit+0x180>)
 80044ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044d0:	4a22      	ldr	r2, [pc, #136]	@ (800455c <HAL_I2C_MspInit+0x180>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80044d6:	4b23      	ldr	r3, [pc, #140]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 80044d8:	4a23      	ldr	r2, [pc, #140]	@ (8004568 <HAL_I2C_MspInit+0x18c>)
 80044da:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80044dc:	4b21      	ldr	r3, [pc, #132]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 80044de:	2203      	movs	r2, #3
 80044e0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044e2:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 80044e4:	2210      	movs	r2, #16
 80044e6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 80044f0:	2280      	movs	r2, #128	@ 0x80
 80044f2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004500:	4b18      	ldr	r3, [pc, #96]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004506:	4b17      	ldr	r3, [pc, #92]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 8004508:	2200      	movs	r2, #0
 800450a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800450c:	4815      	ldr	r0, [pc, #84]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 800450e:	f002 fb73 	bl	8006bf8 <HAL_DMA_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 8004518:	f7ff fe62 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38
 8004522:	4a10      	ldr	r2, [pc, #64]	@ (8004564 <HAL_I2C_MspInit+0x188>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004528:	2200      	movs	r2, #0
 800452a:	2100      	movs	r1, #0
 800452c:	201f      	movs	r0, #31
 800452e:	f002 fb1e 	bl	8006b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004532:	201f      	movs	r0, #31
 8004534:	f002 fb37 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004538:	2200      	movs	r2, #0
 800453a:	2100      	movs	r1, #0
 800453c:	2020      	movs	r0, #32
 800453e:	f002 fb16 	bl	8006b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004542:	2020      	movs	r0, #32
 8004544:	f002 fb2f 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004548:	bf00      	nop
 800454a:	37b0      	adds	r7, #176	@ 0xb0
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40005400 	.word	0x40005400
 8004554:	40021000 	.word	0x40021000
 8004558:	48000400 	.word	0x48000400
 800455c:	2000082c 	.word	0x2000082c
 8004560:	40020080 	.word	0x40020080
 8004564:	20000874 	.word	0x20000874
 8004568:	4002006c 	.word	0x4002006c

0800456c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0d      	ldr	r2, [pc, #52]	@ (80045b0 <HAL_TIM_Base_MspInit+0x44>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d113      	bne.n	80045a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800457e:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <HAL_TIM_Base_MspInit+0x48>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <HAL_TIM_Base_MspInit+0x48>)
 8004584:	f043 0310 	orr.w	r3, r3, #16
 8004588:	6593      	str	r3, [r2, #88]	@ 0x58
 800458a:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <HAL_TIM_Base_MspInit+0x48>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	2100      	movs	r1, #0
 800459a:	2036      	movs	r0, #54	@ 0x36
 800459c:	f002 fae7 	bl	8006b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045a0:	2036      	movs	r0, #54	@ 0x36
 80045a2:	f002 fb00 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40001000 	.word	0x40001000
 80045b4:	40021000 	.word	0x40021000

080045b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b0b0      	sub	sp, #192	@ 0xc0
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045d0:	f107 0320 	add.w	r3, r7, #32
 80045d4:	228c      	movs	r2, #140	@ 0x8c
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f008 ffe4 	bl	800d5a6 <memset>
  if(huart->Instance==UART4)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004718 <HAL_UART_MspInit+0x160>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	f040 80a3 	bne.w	8004730 <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80045ea:	2308      	movs	r3, #8
 80045ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80045ee:	2300      	movs	r3, #0
 80045f0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045f2:	f107 0320 	add.w	r3, r7, #32
 80045f6:	4618      	mov	r0, r3
 80045f8:	f006 fc3a 	bl	800ae70 <HAL_RCCEx_PeriphCLKConfig>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004602:	f7ff fded 	bl	80041e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004606:	4b45      	ldr	r3, [pc, #276]	@ (800471c <HAL_UART_MspInit+0x164>)
 8004608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460a:	4a44      	ldr	r2, [pc, #272]	@ (800471c <HAL_UART_MspInit+0x164>)
 800460c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004610:	6593      	str	r3, [r2, #88]	@ 0x58
 8004612:	4b42      	ldr	r3, [pc, #264]	@ (800471c <HAL_UART_MspInit+0x164>)
 8004614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004616:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	4b3f      	ldr	r3, [pc, #252]	@ (800471c <HAL_UART_MspInit+0x164>)
 8004620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004622:	4a3e      	ldr	r2, [pc, #248]	@ (800471c <HAL_UART_MspInit+0x164>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800462a:	4b3c      	ldr	r3, [pc, #240]	@ (800471c <HAL_UART_MspInit+0x164>)
 800462c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004636:	2303      	movs	r3, #3
 8004638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463c:	2302      	movs	r3, #2
 800463e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004648:	2303      	movs	r3, #3
 800464a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800464e:	2308      	movs	r3, #8
 8004650:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004654:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800465e:	f002 fde1 	bl	8007224 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8004662:	4b2f      	ldr	r3, [pc, #188]	@ (8004720 <HAL_UART_MspInit+0x168>)
 8004664:	4a2f      	ldr	r2, [pc, #188]	@ (8004724 <HAL_UART_MspInit+0x16c>)
 8004666:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8004668:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <HAL_UART_MspInit+0x168>)
 800466a:	2202      	movs	r2, #2
 800466c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800466e:	4b2c      	ldr	r3, [pc, #176]	@ (8004720 <HAL_UART_MspInit+0x168>)
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004674:	4b2a      	ldr	r3, [pc, #168]	@ (8004720 <HAL_UART_MspInit+0x168>)
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800467a:	4b29      	ldr	r3, [pc, #164]	@ (8004720 <HAL_UART_MspInit+0x168>)
 800467c:	2280      	movs	r2, #128	@ 0x80
 800467e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004680:	4b27      	ldr	r3, [pc, #156]	@ (8004720 <HAL_UART_MspInit+0x168>)
 8004682:	2200      	movs	r2, #0
 8004684:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004686:	4b26      	ldr	r3, [pc, #152]	@ (8004720 <HAL_UART_MspInit+0x168>)
 8004688:	2200      	movs	r2, #0
 800468a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800468c:	4b24      	ldr	r3, [pc, #144]	@ (8004720 <HAL_UART_MspInit+0x168>)
 800468e:	2200      	movs	r2, #0
 8004690:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004692:	4b23      	ldr	r3, [pc, #140]	@ (8004720 <HAL_UART_MspInit+0x168>)
 8004694:	2200      	movs	r2, #0
 8004696:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004698:	4821      	ldr	r0, [pc, #132]	@ (8004720 <HAL_UART_MspInit+0x168>)
 800469a:	f002 faad 	bl	8006bf8 <HAL_DMA_Init>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80046a4:	f7ff fd9c 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <HAL_UART_MspInit+0x168>)
 80046ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80046ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004720 <HAL_UART_MspInit+0x168>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 80046b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046b6:	4a1d      	ldr	r2, [pc, #116]	@ (800472c <HAL_UART_MspInit+0x174>)
 80046b8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 80046ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046bc:	2202      	movs	r2, #2
 80046be:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046c0:	4b19      	ldr	r3, [pc, #100]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046c2:	2210      	movs	r2, #16
 80046c4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c6:	4b18      	ldr	r3, [pc, #96]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046cc:	4b16      	ldr	r3, [pc, #88]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046ce:	2280      	movs	r2, #128	@ 0x80
 80046d0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046da:	2200      	movs	r2, #0
 80046dc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80046de:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046e4:	4b10      	ldr	r3, [pc, #64]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80046ea:	480f      	ldr	r0, [pc, #60]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046ec:	f002 fa84 	bl	8006bf8 <HAL_DMA_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80046f6:	f7ff fd73 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004728 <HAL_UART_MspInit+0x170>)
 80046fe:	671a      	str	r2, [r3, #112]	@ 0x70
 8004700:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <HAL_UART_MspInit+0x170>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	2100      	movs	r1, #0
 800470a:	2034      	movs	r0, #52	@ 0x34
 800470c:	f002 fa2f 	bl	8006b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004710:	2034      	movs	r0, #52	@ 0x34
 8004712:	f002 fa48 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8004716:	e0c9      	b.n	80048ac <HAL_UART_MspInit+0x2f4>
 8004718:	40004c00 	.word	0x40004c00
 800471c:	40021000 	.word	0x40021000
 8004720:	200009cc 	.word	0x200009cc
 8004724:	40020458 	.word	0x40020458
 8004728:	20000a14 	.word	0x20000a14
 800472c:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a5f      	ldr	r2, [pc, #380]	@ (80048b4 <HAL_UART_MspInit+0x2fc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	f040 80b8 	bne.w	80048ac <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800473c:	2310      	movs	r3, #16
 800473e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8004740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004744:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004746:	f107 0320 	add.w	r3, r7, #32
 800474a:	4618      	mov	r0, r3
 800474c:	f006 fb90 	bl	800ae70 <HAL_RCCEx_PeriphCLKConfig>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8004756:	f7ff fd43 	bl	80041e0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800475a:	4b57      	ldr	r3, [pc, #348]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	4a56      	ldr	r2, [pc, #344]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 8004760:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004764:	6593      	str	r3, [r2, #88]	@ 0x58
 8004766:	4b54      	ldr	r3, [pc, #336]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004772:	4b51      	ldr	r3, [pc, #324]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 8004774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004776:	4a50      	ldr	r2, [pc, #320]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 8004778:	f043 0304 	orr.w	r3, r3, #4
 800477c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800477e:	4b4e      	ldr	r3, [pc, #312]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 8004780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800478a:	4b4b      	ldr	r3, [pc, #300]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 800478c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478e:	4a4a      	ldr	r2, [pc, #296]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 8004790:	f043 0308 	orr.w	r3, r3, #8
 8004794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004796:	4b48      	ldr	r3, [pc, #288]	@ (80048b8 <HAL_UART_MspInit+0x300>)
 8004798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80047a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047aa:	2302      	movs	r3, #2
 80047ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b6:	2303      	movs	r3, #3
 80047b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80047bc:	2308      	movs	r3, #8
 80047be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80047c6:	4619      	mov	r1, r3
 80047c8:	483c      	ldr	r0, [pc, #240]	@ (80048bc <HAL_UART_MspInit+0x304>)
 80047ca:	f002 fd2b 	bl	8007224 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047ce:	2304      	movs	r3, #4
 80047d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d4:	2302      	movs	r3, #2
 80047d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e0:	2303      	movs	r3, #3
 80047e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80047e6:	2308      	movs	r3, #8
 80047e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80047f0:	4619      	mov	r1, r3
 80047f2:	4833      	ldr	r0, [pc, #204]	@ (80048c0 <HAL_UART_MspInit+0x308>)
 80047f4:	f002 fd16 	bl	8007224 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 80047f8:	4b32      	ldr	r3, [pc, #200]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 80047fa:	4a33      	ldr	r2, [pc, #204]	@ (80048c8 <HAL_UART_MspInit+0x310>)
 80047fc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 80047fe:	4b31      	ldr	r3, [pc, #196]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 8004800:	2202      	movs	r2, #2
 8004802:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004804:	4b2f      	ldr	r3, [pc, #188]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800480a:	4b2e      	ldr	r3, [pc, #184]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 800480c:	2200      	movs	r2, #0
 800480e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004810:	4b2c      	ldr	r3, [pc, #176]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 8004812:	2280      	movs	r2, #128	@ 0x80
 8004814:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004816:	4b2b      	ldr	r3, [pc, #172]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 8004818:	2200      	movs	r2, #0
 800481a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800481c:	4b29      	ldr	r3, [pc, #164]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 800481e:	2200      	movs	r2, #0
 8004820:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004822:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 8004824:	2200      	movs	r2, #0
 8004826:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004828:	4b26      	ldr	r3, [pc, #152]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 800482a:	2200      	movs	r2, #0
 800482c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800482e:	4825      	ldr	r0, [pc, #148]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 8004830:	f002 f9e2 	bl	8006bf8 <HAL_DMA_Init>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_UART_MspInit+0x286>
      Error_Handler();
 800483a:	f7ff fcd1 	bl	80041e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a20      	ldr	r2, [pc, #128]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 8004842:	675a      	str	r2, [r3, #116]	@ 0x74
 8004844:	4a1f      	ldr	r2, [pc, #124]	@ (80048c4 <HAL_UART_MspInit+0x30c>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 800484a:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <HAL_UART_MspInit+0x314>)
 800484c:	4a20      	ldr	r2, [pc, #128]	@ (80048d0 <HAL_UART_MspInit+0x318>)
 800484e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 8004850:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <HAL_UART_MspInit+0x314>)
 8004852:	2202      	movs	r2, #2
 8004854:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004856:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <HAL_UART_MspInit+0x314>)
 8004858:	2210      	movs	r2, #16
 800485a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_UART_MspInit+0x314>)
 800485e:	2200      	movs	r2, #0
 8004860:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004862:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <HAL_UART_MspInit+0x314>)
 8004864:	2280      	movs	r2, #128	@ 0x80
 8004866:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004868:	4b18      	ldr	r3, [pc, #96]	@ (80048cc <HAL_UART_MspInit+0x314>)
 800486a:	2200      	movs	r2, #0
 800486c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800486e:	4b17      	ldr	r3, [pc, #92]	@ (80048cc <HAL_UART_MspInit+0x314>)
 8004870:	2200      	movs	r2, #0
 8004872:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004874:	4b15      	ldr	r3, [pc, #84]	@ (80048cc <HAL_UART_MspInit+0x314>)
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800487a:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <HAL_UART_MspInit+0x314>)
 800487c:	2200      	movs	r2, #0
 800487e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004880:	4812      	ldr	r0, [pc, #72]	@ (80048cc <HAL_UART_MspInit+0x314>)
 8004882:	f002 f9b9 	bl	8006bf8 <HAL_DMA_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 800488c:	f7ff fca8 	bl	80041e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a0e      	ldr	r2, [pc, #56]	@ (80048cc <HAL_UART_MspInit+0x314>)
 8004894:	671a      	str	r2, [r3, #112]	@ 0x70
 8004896:	4a0d      	ldr	r2, [pc, #52]	@ (80048cc <HAL_UART_MspInit+0x314>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800489c:	2200      	movs	r2, #0
 800489e:	2100      	movs	r1, #0
 80048a0:	2035      	movs	r0, #53	@ 0x35
 80048a2:	f002 f964 	bl	8006b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80048a6:	2035      	movs	r0, #53	@ 0x35
 80048a8:	f002 f97d 	bl	8006ba6 <HAL_NVIC_EnableIRQ>
}
 80048ac:	bf00      	nop
 80048ae:	37c0      	adds	r7, #192	@ 0xc0
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40005000 	.word	0x40005000
 80048b8:	40021000 	.word	0x40021000
 80048bc:	48000800 	.word	0x48000800
 80048c0:	48000c00 	.word	0x48000c00
 80048c4:	20000a5c 	.word	0x20000a5c
 80048c8:	4002041c 	.word	0x4002041c
 80048cc:	20000aa4 	.word	0x20000aa4
 80048d0:	40020408 	.word	0x40020408

080048d4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a20      	ldr	r2, [pc, #128]	@ (8004964 <HAL_UART_MspDeInit+0x90>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d118      	bne.n	8004918 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80048e6:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <HAL_UART_MspDeInit+0x94>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004968 <HAL_UART_MspDeInit+0x94>)
 80048ec:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80048f0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80048f2:	2103      	movs	r1, #3
 80048f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048f8:	f002 fe26 	bl	8007548 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004900:	4618      	mov	r0, r3
 8004902:	f002 fa31 	bl	8006d68 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	4618      	mov	r0, r3
 800490c:	f002 fa2c 	bl	8006d68 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004910:	2034      	movs	r0, #52	@ 0x34
 8004912:	f002 f956 	bl	8006bc2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }

}
 8004916:	e020      	b.n	800495a <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==UART5)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a13      	ldr	r2, [pc, #76]	@ (800496c <HAL_UART_MspDeInit+0x98>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d11b      	bne.n	800495a <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_UART5_CLK_DISABLE();
 8004922:	4b11      	ldr	r3, [pc, #68]	@ (8004968 <HAL_UART_MspDeInit+0x94>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004926:	4a10      	ldr	r2, [pc, #64]	@ (8004968 <HAL_UART_MspDeInit+0x94>)
 8004928:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800492c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800492e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004932:	480f      	ldr	r0, [pc, #60]	@ (8004970 <HAL_UART_MspDeInit+0x9c>)
 8004934:	f002 fe08 	bl	8007548 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8004938:	2104      	movs	r1, #4
 800493a:	480e      	ldr	r0, [pc, #56]	@ (8004974 <HAL_UART_MspDeInit+0xa0>)
 800493c:	f002 fe04 	bl	8007548 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004944:	4618      	mov	r0, r3
 8004946:	f002 fa0f 	bl	8006d68 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	4618      	mov	r0, r3
 8004950:	f002 fa0a 	bl	8006d68 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8004954:	2035      	movs	r0, #53	@ 0x35
 8004956:	f002 f934 	bl	8006bc2 <HAL_NVIC_DisableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40004c00 	.word	0x40004c00
 8004968:	40021000 	.word	0x40021000
 800496c:	40005000 	.word	0x40005000
 8004970:	48000800 	.word	0x48000800
 8004974:	48000c00 	.word	0x48000c00

08004978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <NMI_Handler+0x4>

08004980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <HardFault_Handler+0x4>

08004988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <MemManage_Handler+0x4>

08004990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <BusFault_Handler+0x4>

08004998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <UsageFault_Handler+0x4>

080049a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049ae:	b480      	push	{r7}
 80049b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049ce:	f000 faeb 	bl	8004fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049dc:	4802      	ldr	r0, [pc, #8]	@ (80049e8 <DMA1_Channel1_IRQHandler+0x10>)
 80049de:	f002 fb34 	bl	800704a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000790 	.word	0x20000790

080049ec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80049f0:	4802      	ldr	r0, [pc, #8]	@ (80049fc <DMA1_Channel6_IRQHandler+0x10>)
 80049f2:	f002 fb2a 	bl	800704a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000874 	.word	0x20000874

08004a00 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004a04:	4802      	ldr	r0, [pc, #8]	@ (8004a10 <DMA1_Channel7_IRQHandler+0x10>)
 8004a06:	f002 fb20 	bl	800704a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000082c 	.word	0x2000082c

08004a14 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004a18:	4802      	ldr	r0, [pc, #8]	@ (8004a24 <ADC1_2_IRQHandler+0x10>)
 8004a1a:	f000 ff43 	bl	80058a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000728 	.word	0x20000728

08004a28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a2c:	4802      	ldr	r0, [pc, #8]	@ (8004a38 <I2C1_EV_IRQHandler+0x10>)
 8004a2e:	f003 fb7b 	bl	8008128 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	200007d8 	.word	0x200007d8

08004a3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a40:	4802      	ldr	r0, [pc, #8]	@ (8004a4c <I2C1_ER_IRQHandler+0x10>)
 8004a42:	f003 fb8b 	bl	800815c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200007d8 	.word	0x200007d8

08004a50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004a54:	4802      	ldr	r0, [pc, #8]	@ (8004a60 <UART4_IRQHandler+0x10>)
 8004a56:	f007 fb5b 	bl	800c110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	200008bc 	.word	0x200008bc

08004a64 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004a68:	4802      	ldr	r0, [pc, #8]	@ (8004a74 <UART5_IRQHandler+0x10>)
 8004a6a:	f007 fb51 	bl	800c110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000944 	.word	0x20000944

08004a78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a7c:	4802      	ldr	r0, [pc, #8]	@ (8004a88 <TIM6_DAC_IRQHandler+0x10>)
 8004a7e:	f006 ff89 	bl	800b994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000aec 	.word	0x20000aec

08004a8c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004a90:	4802      	ldr	r0, [pc, #8]	@ (8004a9c <DMA2_Channel1_IRQHandler+0x10>)
 8004a92:	f002 fada 	bl	800704a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000aa4 	.word	0x20000aa4

08004aa0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004aa4:	4802      	ldr	r0, [pc, #8]	@ (8004ab0 <DMA2_Channel2_IRQHandler+0x10>)
 8004aa6:	f002 fad0 	bl	800704a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000a5c 	.word	0x20000a5c

08004ab4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004ab8:	4802      	ldr	r0, [pc, #8]	@ (8004ac4 <DMA2_Channel3_IRQHandler+0x10>)
 8004aba:	f002 fac6 	bl	800704a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000a14 	.word	0x20000a14

08004ac8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004acc:	4802      	ldr	r0, [pc, #8]	@ (8004ad8 <DMA2_Channel5_IRQHandler+0x10>)
 8004ace:	f002 fabc 	bl	800704a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	200009cc 	.word	0x200009cc

08004adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004ae0:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <SystemInit+0x20>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae6:	4a05      	ldr	r2, [pc, #20]	@ (8004afc <SystemInit+0x20>)
 8004ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <_Z8tcpInputv>:
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
bool flagSetSys;							// Indica que se debe enviar system

/*****	INPUT	*****/

void tcpInput(){
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	tcpData();
 8004b04:	f000 f840 	bl	8004b88 <_Z7tcpDatav>
	tcpSystem();
 8004b08:	f000 f806 	bl	8004b18 <_Z9tcpSystemv>
	tcpGps();
 8004b0c:	f000 f89a 	bl	8004c44 <_Z6tcpGpsv>
	tcpInLora();
 8004b10:	f000 f872 	bl	8004bf8 <_Z9tcpInLorav>
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <_Z9tcpSystemv>:
 *
 *	OUTPUT	:	flagSetSys | Indica que se debe enviar un paquete con datos del sistema
 *
 */

void tcpSystem(){
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
	switch( stateTcpSys ){
 8004b1c:	4b16      	ldr	r3, [pc, #88]	@ (8004b78 <_Z9tcpSystemv+0x60>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <_Z9tcpSystemv+0x12>
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d013      	beq.n	8004b50 <_Z9tcpSystemv+0x38>
 8004b28:	e01c      	b.n	8004b64 <_Z9tcpSystemv+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpSys++;						// Suma 1 al contador
 8004b2a:	4b14      	ldr	r3, [pc, #80]	@ (8004b7c <_Z9tcpSystemv+0x64>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <_Z9tcpSystemv+0x64>)
 8004b32:	6013      	str	r3, [r2, #0]

		if ( countTcpSys >= limitTcpSys ){	// Si pasa el limite
 8004b34:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <_Z9tcpSystemv+0x64>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b11      	ldr	r3, [pc, #68]	@ (8004b80 <_Z9tcpSystemv+0x68>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d303      	bcc.n	8004b48 <_Z9tcpSystemv+0x30>
			stateTcpSys	= 1;				// Pasa a S1
 8004b40:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <_Z9tcpSystemv+0x60>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateTcpSys	= 0;				// Espera en S0
		}
		break;
 8004b46:	e011      	b.n	8004b6c <_Z9tcpSystemv+0x54>
			stateTcpSys	= 0;				// Espera en S0
 8004b48:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <_Z9tcpSystemv+0x60>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	701a      	strb	r2, [r3, #0]
		break;
 8004b4e:	e00d      	b.n	8004b6c <_Z9tcpSystemv+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetSys	= 1;	// Indica que se debe enviar datos
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <_Z9tcpSystemv+0x6c>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
		countTcpSys	= 0;	// Reinicia contador
 8004b56:	4b09      	ldr	r3, [pc, #36]	@ (8004b7c <_Z9tcpSystemv+0x64>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
		stateTcpSys	= 0;	// Vuelve a S0
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <_Z9tcpSystemv+0x60>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
		break;
 8004b62:	e003      	b.n	8004b6c <_Z9tcpSystemv+0x54>

	default:
		stateTcpSys	= 0;
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <_Z9tcpSystemv+0x60>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
		break;
 8004b6a:	bf00      	nop
	}
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20001265 	.word	0x20001265
 8004b7c:	20001268 	.word	0x20001268
 8004b80:	2000126c 	.word	0x2000126c
 8004b84:	20001270 	.word	0x20001270

08004b88 <_Z7tcpDatav>:
 *
 *	OUTPUT	:	flagSetData | Indica que se debe enviar
 *
 */

void tcpData(){
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
	switch( stateTcpData ){
 8004b8c:	4b16      	ldr	r3, [pc, #88]	@ (8004be8 <_Z7tcpDatav+0x60>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <_Z7tcpDatav+0x12>
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d013      	beq.n	8004bc0 <_Z7tcpDatav+0x38>
 8004b98:	e01c      	b.n	8004bd4 <_Z7tcpDatav+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpData++;							// Suma 1 al contador
 8004b9a:	4b14      	ldr	r3, [pc, #80]	@ (8004bec <_Z7tcpDatav+0x64>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a12      	ldr	r2, [pc, #72]	@ (8004bec <_Z7tcpDatav+0x64>)
 8004ba2:	6013      	str	r3, [r2, #0]

		if ( countTcpData >= limitTcpData ){	// Si pasa el limite
 8004ba4:	4b11      	ldr	r3, [pc, #68]	@ (8004bec <_Z7tcpDatav+0x64>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b11      	ldr	r3, [pc, #68]	@ (8004bf0 <_Z7tcpDatav+0x68>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d303      	bcc.n	8004bb8 <_Z7tcpDatav+0x30>
			stateTcpData	= 1;				// Pasa a S1
 8004bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <_Z7tcpDatav+0x60>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateTcpData	= 0;				// Espera en S0
		}
		break;
 8004bb6:	e011      	b.n	8004bdc <_Z7tcpDatav+0x54>
			stateTcpData	= 0;				// Espera en S0
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <_Z7tcpDatav+0x60>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
		break;
 8004bbe:	e00d      	b.n	8004bdc <_Z7tcpDatav+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetData		= 1;	// Indica que se debe enviar datos
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf4 <_Z7tcpDatav+0x6c>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
		countTcpData	= 0;	// Reinicia contador
 8004bc6:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <_Z7tcpDatav+0x64>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

		stateTcpData	= 0;	// Vuelve a S0
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <_Z7tcpDatav+0x60>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
		break;
 8004bd2:	e003      	b.n	8004bdc <_Z7tcpDatav+0x54>

	default:
		stateTcpData	= 0;
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <_Z7tcpDatav+0x60>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
		break;
 8004bda:	bf00      	nop
	}
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20001259 	.word	0x20001259
 8004bec:	2000125c 	.word	0x2000125c
 8004bf0:	20001260 	.word	0x20001260
 8004bf4:	20001264 	.word	0x20001264

08004bf8 <_Z9tcpInLorav>:
 *
 *	OUTPUT	:	loraDecision.response()
 *				loraDecision.disable()
 */

void tcpInLora(){
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
	if ( loraCheck.check() ){					// Si hay respuesta nueva
 8004bfc:	480d      	ldr	r0, [pc, #52]	@ (8004c34 <_Z9tcpInLorav+0x3c>)
 8004bfe:	f7fe fcb9 	bl	8003574 <_ZN9loraCheck5checkEv>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00c      	beq.n	8004c22 <_Z9tcpInLorav+0x2a>
		busTcpLora	= loraCheck.response();		// Copia el codigo de respuesta
 8004c08:	480a      	ldr	r0, [pc, #40]	@ (8004c34 <_Z9tcpInLorav+0x3c>)
 8004c0a:	f7fe fcc4 	bl	8003596 <_ZN9loraCheck8responseEv>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <_Z9tcpInLorav+0x40>)
 8004c14:	701a      	strb	r2, [r3, #0]
		loraDecision.response( busTcpLora );	// Inserta en lora Decision
 8004c16:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <_Z9tcpInLorav+0x40>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4807      	ldr	r0, [pc, #28]	@ (8004c3c <_Z9tcpInLorav+0x44>)
 8004c1e:	f7fe fd76 	bl	800370e <_ZN12loraDecision8responseEh>
			busTcpLora	= 6;
		}*/

	}

	if ( flagWdLora ){			// Si hay WD
 8004c22:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <_Z9tcpInLorav+0x48>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <_Z9tcpInLorav+0x38>
		loraDecision.disable();	// Deshabilita tcp y app
 8004c2a:	4804      	ldr	r0, [pc, #16]	@ (8004c3c <_Z9tcpInLorav+0x44>)
 8004c2c:	f7fe fdff 	bl	800382e <_ZN12loraDecision7disableEv>
	}
}
 8004c30:	bf00      	nop
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000c78 	.word	0x20000c78
 8004c38:	20001258 	.word	0x20001258
 8004c3c:	20000c8c 	.word	0x20000c8c
 8004c40:	20000640 	.word	0x20000640

08004c44 <_Z6tcpGpsv>:
 *
 *	OUTPUT	:	flagGpsSaved
 *				startGps
 */

void tcpGps(){
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
	switch ( stateGpsTcp ){
 8004c48:	4b22      	ldr	r3, [pc, #136]	@ (8004cd4 <_Z6tcpGpsv+0x90>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d021      	beq.n	8004c94 <_Z6tcpGpsv+0x50>
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	dc38      	bgt.n	8004cc6 <_Z6tcpGpsv+0x82>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <_Z6tcpGpsv+0x1a>
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d014      	beq.n	8004c86 <_Z6tcpGpsv+0x42>
			stateGpsTcp	= 2;				// Se queda en S2
		}
		break;

	default:
		break;
 8004c5c:	e033      	b.n	8004cc6 <_Z6tcpGpsv+0x82>
		if ( savedGps ){		// Si se guardó un valor de GPS
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd8 <_Z6tcpGpsv+0x94>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <_Z6tcpGpsv+0x2a>
			stateGpsTcp	= 1;	// Pasa a S1
 8004c66:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <_Z6tcpGpsv+0x90>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
		break;
 8004c6c:	e02c      	b.n	8004cc8 <_Z6tcpGpsv+0x84>
		else if( stopGps ){		// Si se paró la recepcion de datos
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <_Z6tcpGpsv+0x98>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <_Z6tcpGpsv+0x3a>
			stateGpsTcp	= 2;	// Pasa a S2
 8004c76:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <_Z6tcpGpsv+0x90>)
 8004c78:	2202      	movs	r2, #2
 8004c7a:	701a      	strb	r2, [r3, #0]
		break;
 8004c7c:	e024      	b.n	8004cc8 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 0;	// Espera en S0
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <_Z6tcpGpsv+0x90>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
		break;
 8004c84:	e020      	b.n	8004cc8 <_Z6tcpGpsv+0x84>
		flagGpsSaved	= 1;	// Indica que se guardó un mensaje
 8004c86:	4b16      	ldr	r3, [pc, #88]	@ (8004ce0 <_Z6tcpGpsv+0x9c>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
		stateGpsTcp		= 2;	// Pasa a S3
 8004c8c:	4b11      	ldr	r3, [pc, #68]	@ (8004cd4 <_Z6tcpGpsv+0x90>)
 8004c8e:	2202      	movs	r2, #2
 8004c90:	701a      	strb	r2, [r3, #0]
		break;
 8004c92:	e019      	b.n	8004cc8 <_Z6tcpGpsv+0x84>
		countGpsTcp++;						// Suma 1 al contador
 8004c94:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <_Z6tcpGpsv+0xa0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ce4 <_Z6tcpGpsv+0xa0>)
 8004c9c:	6013      	str	r3, [r2, #0]
		if ( countGpsTcp >= limitGpsTcp ){	// Si pasa el limite
 8004c9e:	4b11      	ldr	r3, [pc, #68]	@ (8004ce4 <_Z6tcpGpsv+0xa0>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b11      	ldr	r3, [pc, #68]	@ (8004ce8 <_Z6tcpGpsv+0xa4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d309      	bcc.n	8004cbe <_Z6tcpGpsv+0x7a>
			startGps	= 1;				// Indica inicio de medicion gps
 8004caa:	4b10      	ldr	r3, [pc, #64]	@ (8004cec <_Z6tcpGpsv+0xa8>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
			countGpsTcp	= 0;				// Reinicia contador
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <_Z6tcpGpsv+0xa0>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
			stateGpsTcp	= 0;				// Vuelve a S0
 8004cb6:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <_Z6tcpGpsv+0x90>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
		break;
 8004cbc:	e004      	b.n	8004cc8 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 2;				// Se queda en S2
 8004cbe:	4b05      	ldr	r3, [pc, #20]	@ (8004cd4 <_Z6tcpGpsv+0x90>)
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	701a      	strb	r2, [r3, #0]
		break;
 8004cc4:	e000      	b.n	8004cc8 <_Z6tcpGpsv+0x84>
		break;
 8004cc6:	bf00      	nop
	}
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	2000124d 	.word	0x2000124d
 8004cd8:	20000bf2 	.word	0x20000bf2
 8004cdc:	20000bf1 	.word	0x20000bf1
 8004ce0:	2000124e 	.word	0x2000124e
 8004ce4:	20001250 	.word	0x20001250
 8004ce8:	20001254 	.word	0x20001254
 8004cec:	2000038f 	.word	0x2000038f

08004cf0 <_Z41__static_initialization_and_destruction_0ii>:
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d11f      	bne.n	8004d40 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d11a      	bne.n	8004d40 <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t limitGpsTcp = 43200000/superloop;// Tiempo que esta apagado GPS
 8004d0a:	4b10      	ldr	r3, [pc, #64]	@ (8004d4c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b0f      	ldr	r3, [pc, #60]	@ (8004d50 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d16:	461a      	mov	r2, r3
 8004d18:	4b0e      	ldr	r3, [pc, #56]	@ (8004d54 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004d1a:	601a      	str	r2, [r3, #0]
uint32_t limitTcpData	= 120000/superloop;	// Limite para fijar datos
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004d2c:	601a      	str	r2, [r3, #0]
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
 8004d2e:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004d36:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004d3e:	601a      	str	r2, [r3, #0]
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20000433 	.word	0x20000433
 8004d50:	02932e00 	.word	0x02932e00
 8004d54:	20001254 	.word	0x20001254
 8004d58:	0001d4c0 	.word	0x0001d4c0
 8004d5c:	20001260 	.word	0x20001260
 8004d60:	01499700 	.word	0x01499700
 8004d64:	2000126c 	.word	0x2000126c

08004d68 <_GLOBAL__sub_I_stateGpsTcp>:
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004d70:	2001      	movs	r0, #1
 8004d72:	f7ff ffbd 	bl	8004cf0 <_Z41__static_initialization_and_destruction_0ii>
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_Z9tcpOutputv>:
uint16_t countTcpLoraOut;							// Contador para esperar
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando

/*****	OUTPUT	*****/

void tcpOutput(){
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
	tcpOutLora();
 8004d7c:	f000 f802 	bl	8004d84 <_Z10tcpOutLorav>
}
 8004d80:	bf00      	nop
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <_Z10tcpOutLorav>:

void tcpOutLora(){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
	switch( stateTpcLoraOut ){
 8004d88:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <_Z10tcpOutLorav+0xb0>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d028      	beq.n	8004de2 <_Z10tcpOutLorav+0x5e>
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	dc48      	bgt.n	8004e26 <_Z10tcpOutLorav+0xa2>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <_Z10tcpOutLorav+0x1a>
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d00e      	beq.n	8004dba <_Z10tcpOutLorav+0x36>
 8004d9c:	e043      	b.n	8004e26 <_Z10tcpOutLorav+0xa2>
	///////////////////////
	// S0 - WAIT COMMAND //
	///////////////////////

	case 0:
		if ( loraSelect.newCommand() ){	// Si hay nuevo comando
 8004d9e:	4826      	ldr	r0, [pc, #152]	@ (8004e38 <_Z10tcpOutLorav+0xb4>)
 8004da0:	f7fe fc71 	bl	8003686 <_ZN10loraSelect10newCommandEv>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <_Z10tcpOutLorav+0x2e>
 			stateTpcLoraOut	= 1;		// Pasa a S1
 8004daa:	4b22      	ldr	r3, [pc, #136]	@ (8004e34 <_Z10tcpOutLorav+0xb0>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateTpcLoraOut	= 0;		// Queda en S0
		}
		break;
 8004db0:	e03d      	b.n	8004e2e <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 0;		// Queda en S0
 8004db2:	4b20      	ldr	r3, [pc, #128]	@ (8004e34 <_Z10tcpOutLorav+0xb0>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
		break;
 8004db8:	e039      	b.n	8004e2e <_Z10tcpOutLorav+0xaa>
	////////////////////////
	// S1 - WAIT FOR SEND //
	////////////////////////

	case 1:
		countTcpLoraOut++;							// Suma 1 al contador
 8004dba:	4b20      	ldr	r3, [pc, #128]	@ (8004e3c <_Z10tcpOutLorav+0xb8>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e3c <_Z10tcpOutLorav+0xb8>)
 8004dc4:	801a      	strh	r2, [r3, #0]

		if ( countTcpLoraOut >= limitTcpLoraOut ){	// Si llega al limite
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e3c <_Z10tcpOutLorav+0xb8>)
 8004dc8:	881a      	ldrh	r2, [r3, #0]
 8004dca:	4b1d      	ldr	r3, [pc, #116]	@ (8004e40 <_Z10tcpOutLorav+0xbc>)
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d303      	bcc.n	8004dda <_Z10tcpOutLorav+0x56>
			stateTpcLoraOut	= 2;					// Pasa a S2
 8004dd2:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <_Z10tcpOutLorav+0xb0>)
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateTpcLoraOut	= 1;					// Queda en S1
		}
		break;
 8004dd8:	e029      	b.n	8004e2e <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 1;					// Queda en S1
 8004dda:	4b16      	ldr	r3, [pc, #88]	@ (8004e34 <_Z10tcpOutLorav+0xb0>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
		break;
 8004de0:	e025      	b.n	8004e2e <_Z10tcpOutLorav+0xaa>
	/////////////////////////////
	// S2 - CONFIG BY TRANSMIT //
	/////////////////////////////

	case 2:
		countTcpLoraOut	= 0;										// Reinicia contador
 8004de2:	4b16      	ldr	r3, [pc, #88]	@ (8004e3c <_Z10tcpOutLorav+0xb8>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	801a      	strh	r2, [r3, #0]

		loraTxCommand0 	= loraSelect.getCommand();					// Guarda comando
 8004de8:	4813      	ldr	r0, [pc, #76]	@ (8004e38 <_Z10tcpOutLorav+0xb4>)
 8004dea:	f7fe fc5d 	bl	80036a8 <_ZN10loraSelect10getCommandEv>
 8004dee:	4603      	mov	r3, r0
 8004df0:	4a14      	ldr	r2, [pc, #80]	@ (8004e44 <_Z10tcpOutLorav+0xc0>)
 8004df2:	6013      	str	r3, [r2, #0]
		sizeTxCommand0	= loraSelect.getCommandSize();				// Guarda tamaño de comando
 8004df4:	4810      	ldr	r0, [pc, #64]	@ (8004e38 <_Z10tcpOutLorav+0xb4>)
 8004df6:	f7fe fc63 	bl	80036c0 <_ZN10loraSelect14getCommandSizeEv>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <_Z10tcpOutLorav+0xc4>)
 8004e00:	701a      	strb	r2, [r3, #0]

		loraCheck.setIdealResponses( loraSelect.qttyResponses() );	// Guarda largo de lista de respuestas
 8004e02:	480d      	ldr	r0, [pc, #52]	@ (8004e38 <_Z10tcpOutLorav+0xb4>)
 8004e04:	f7fe fc68 	bl	80036d8 <_ZN10loraSelect13qttyResponsesEv>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	480f      	ldr	r0, [pc, #60]	@ (8004e4c <_Z10tcpOutLorav+0xc8>)
 8004e0e:	f7fe fb55 	bl	80034bc <_ZN9loraCheck17setIdealResponsesEh>
		loraDecision.reset();										// Reinicia TCP
 8004e12:	480f      	ldr	r0, [pc, #60]	@ (8004e50 <_Z10tcpOutLorav+0xcc>)
 8004e14:	f7fe fcf5 	bl	8003802 <_ZN12loraDecision5resetEv>
		flagTxLora	= 1;											// Transmite
 8004e18:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <_Z10tcpOutLorav+0xd0>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
		stateTpcLoraOut	= 0;										// Vuelve a S0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <_Z10tcpOutLorav+0xb0>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
		break;
 8004e24:	e003      	b.n	8004e2e <_Z10tcpOutLorav+0xaa>

	default:
		stateTpcLoraOut	= 0;
 8004e26:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <_Z10tcpOutLorav+0xb0>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
		break;
 8004e2c:	bf00      	nop
	}

}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20001279 	.word	0x20001279
 8004e38:	20000c94 	.word	0x20000c94
 8004e3c:	2000127a 	.word	0x2000127a
 8004e40:	2000127c 	.word	0x2000127c
 8004e44:	20001274 	.word	0x20001274
 8004e48:	20001278 	.word	0x20001278
 8004e4c:	20000c78 	.word	0x20000c78
 8004e50:	20000c8c 	.word	0x20000c8c
 8004e54:	200005ed 	.word	0x200005ed

08004e58 <_Z41__static_initialization_and_destruction_0ii>:
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10e      	bne.n	8004e86 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d109      	bne.n	8004e86 <_Z41__static_initialization_and_destruction_0ii+0x2e>
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando
 8004e72:	4b08      	ldr	r3, [pc, #32]	@ (8004e94 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004e84:	801a      	strh	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000433 	.word	0x20000433
 8004e98:	2000127c 	.word	0x2000127c

08004e9c <_GLOBAL__sub_I_loraTxCommand0>:
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f7ff ffd7 	bl	8004e58 <_Z41__static_initialization_and_destruction_0ii>
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004eac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ee4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004eb0:	f7ff fe14 	bl	8004adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004eb4:	480c      	ldr	r0, [pc, #48]	@ (8004ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004eb6:	490d      	ldr	r1, [pc, #52]	@ (8004eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8004eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef0 <LoopForever+0xe>)
  movs r3, #0
 8004eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ebc:	e002      	b.n	8004ec4 <LoopCopyDataInit>

08004ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ec2:	3304      	adds	r3, #4

08004ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ec8:	d3f9      	bcc.n	8004ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eca:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8004ef8 <LoopForever+0x16>)
  movs r3, #0
 8004ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ed0:	e001      	b.n	8004ed6 <LoopFillZerobss>

08004ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ed4:	3204      	adds	r2, #4

08004ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ed8:	d3fb      	bcc.n	8004ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004eda:	f008 fb6d 	bl	800d5b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ede:	f7fe fcf1 	bl	80038c4 <main>

08004ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ee2:	e7fe      	b.n	8004ee2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ee4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004eec:	20000440 	.word	0x20000440
  ldr r2, =_sidata
 8004ef0:	0800d6c4 	.word	0x0800d6c4
  ldr r2, =_sbss
 8004ef4:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8004ef8:	20001284 	.word	0x20001284

08004efc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004efc:	e7fe      	b.n	8004efc <ADC3_IRQHandler>

08004efe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f08:	2003      	movs	r0, #3
 8004f0a:	f001 fe25 	bl	8006b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f0e:	200f      	movs	r0, #15
 8004f10:	f000 f80e 	bl	8004f30 <HAL_InitTick>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	71fb      	strb	r3, [r7, #7]
 8004f1e:	e001      	b.n	8004f24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f20:	f7ff f998 	bl	8004254 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f24:	79fb      	ldrb	r3, [r7, #7]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004f3c:	4b17      	ldr	r3, [pc, #92]	@ (8004f9c <HAL_InitTick+0x6c>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d023      	beq.n	8004f8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004f44:	4b16      	ldr	r3, [pc, #88]	@ (8004fa0 <HAL_InitTick+0x70>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b14      	ldr	r3, [pc, #80]	@ (8004f9c <HAL_InitTick+0x6c>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f001 fe3f 	bl	8006bde <HAL_SYSTICK_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10f      	bne.n	8004f86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b0f      	cmp	r3, #15
 8004f6a:	d809      	bhi.n	8004f80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	f001 fdfb 	bl	8006b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f78:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <HAL_InitTick+0x74>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e007      	b.n	8004f90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
 8004f84:	e004      	b.n	8004f90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
 8004f8a:	e001      	b.n	8004f90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	2000043c 	.word	0x2000043c
 8004fa0:	20000434 	.word	0x20000434
 8004fa4:	20000438 	.word	0x20000438

08004fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fac:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HAL_IncTick+0x20>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <HAL_IncTick+0x24>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	4a04      	ldr	r2, [pc, #16]	@ (8004fcc <HAL_IncTick+0x24>)
 8004fba:	6013      	str	r3, [r2, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	2000043c 	.word	0x2000043c
 8004fcc:	20001280 	.word	0x20001280

08004fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	@ (8004fe4 <HAL_GetTick+0x14>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20001280 	.word	0x20001280

08004fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ff0:	f7ff ffee 	bl	8004fd0 <HAL_GetTick>
 8004ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d005      	beq.n	800500e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005002:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <HAL_Delay+0x44>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800500e:	bf00      	nop
 8005010:	f7ff ffde 	bl	8004fd0 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d8f7      	bhi.n	8005010 <HAL_Delay+0x28>
  {
  }
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	2000043c 	.word	0x2000043c

08005030 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <HAL_SuspendTick+0x1c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a04      	ldr	r2, [pc, #16]	@ (800504c <HAL_SuspendTick+0x1c>)
 800503a:	f023 0302 	bic.w	r3, r3, #2
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	e000e010 	.word	0xe000e010

08005050 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <HAL_ResumeTick+0x1c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a04      	ldr	r2, [pc, #16]	@ (800506c <HAL_ResumeTick+0x1c>)
 800505a:	f043 0302 	orr.w	r3, r3, #2
 800505e:	6013      	str	r3, [r2, #0]
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	e000e010 	.word	0xe000e010

08005070 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	609a      	str	r2, [r3, #8]
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	609a      	str	r2, [r3, #8]
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3360      	adds	r3, #96	@ 0x60
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b08      	ldr	r3, [pc, #32]	@ (800511c <LL_ADC_SetOffset+0x44>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	4313      	orrs	r3, r2
 8005108:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	03fff000 	.word	0x03fff000

08005120 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3360      	adds	r3, #96	@ 0x60
 800512e:	461a      	mov	r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3360      	adds	r3, #96	@ 0x60
 800515c:	461a      	mov	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	431a      	orrs	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	615a      	str	r2, [r3, #20]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b087      	sub	sp, #28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3330      	adds	r3, #48	@ 0x30
 80051de:	461a      	mov	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	4413      	add	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	211f      	movs	r1, #31
 80051fa:	fa01 f303 	lsl.w	r3, r1, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	401a      	ands	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0e9b      	lsrs	r3, r3, #26
 8005206:	f003 011f 	and.w	r1, r3, #31
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	431a      	orrs	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005232:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3314      	adds	r3, #20
 800525c:	461a      	mov	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	0e5b      	lsrs	r3, r3, #25
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	0d1b      	lsrs	r3, r3, #20
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	2107      	movs	r1, #7
 800527a:	fa01 f303 	lsl.w	r3, r1, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	401a      	ands	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	0d1b      	lsrs	r3, r3, #20
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	fa01 f303 	lsl.w	r3, r1, r3
 8005290:	431a      	orrs	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052bc:	43db      	mvns	r3, r3
 80052be:	401a      	ands	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f003 0318 	and.w	r3, r3, #24
 80052c6:	4908      	ldr	r1, [pc, #32]	@ (80052e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80052c8:	40d9      	lsrs	r1, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	400b      	ands	r3, r1
 80052ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d2:	431a      	orrs	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	0007ffff 	.word	0x0007ffff

080052ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 031f 	and.w	r3, r3, #31
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005334:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6093      	str	r3, [r2, #8]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800535c:	d101      	bne.n	8005362 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005384:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ac:	d101      	bne.n	80053b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053d4:	f043 0201 	orr.w	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <LL_ADC_IsEnabled+0x18>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <LL_ADC_IsEnabled+0x1a>
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800541e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005422:	f043 0204 	orr.w	r2, r3, #4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b04      	cmp	r3, #4
 8005448:	d101      	bne.n	800544e <LL_ADC_REG_IsConversionOngoing+0x18>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d101      	bne.n	8005474 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b089      	sub	sp, #36	@ 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e133      	b.n	8005706 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fe fef5 	bl	800429c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ff3f 	bl	8005348 <LL_ADC_IsDeepPowerDownEnabled>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff ff25 	bl	8005324 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff ff5a 	bl	8005398 <LL_ADC_IsInternalRegulatorEnabled>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d115      	bne.n	8005516 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff ff3e 	bl	8005370 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054f4:	4b86      	ldr	r3, [pc, #536]	@ (8005710 <HAL_ADC_Init+0x28c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	099b      	lsrs	r3, r3, #6
 80054fa:	4a86      	ldr	r2, [pc, #536]	@ (8005714 <HAL_ADC_Init+0x290>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	099b      	lsrs	r3, r3, #6
 8005502:	3301      	adds	r3, #1
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005508:	e002      	b.n	8005510 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b01      	subs	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f9      	bne.n	800550a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff ff3c 	bl	8005398 <LL_ADC_IsInternalRegulatorEnabled>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10d      	bne.n	8005542 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	f043 0210 	orr.w	r2, r3, #16
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005536:	f043 0201 	orr.w	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff ff75 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 800554c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 80cc 	bne.w	80056f4 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 80c8 	bne.w	80056f4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800556c:	f043 0202 	orr.w	r2, r3, #2
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ff35 	bl	80053e8 <LL_ADC_IsEnabled>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d115      	bne.n	80055b0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005584:	4864      	ldr	r0, [pc, #400]	@ (8005718 <HAL_ADC_Init+0x294>)
 8005586:	f7ff ff2f 	bl	80053e8 <LL_ADC_IsEnabled>
 800558a:	4604      	mov	r4, r0
 800558c:	4863      	ldr	r0, [pc, #396]	@ (800571c <HAL_ADC_Init+0x298>)
 800558e:	f7ff ff2b 	bl	80053e8 <LL_ADC_IsEnabled>
 8005592:	4603      	mov	r3, r0
 8005594:	431c      	orrs	r4, r3
 8005596:	4862      	ldr	r0, [pc, #392]	@ (8005720 <HAL_ADC_Init+0x29c>)
 8005598:	f7ff ff26 	bl	80053e8 <LL_ADC_IsEnabled>
 800559c:	4603      	mov	r3, r0
 800559e:	4323      	orrs	r3, r4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4619      	mov	r1, r3
 80055aa:	485e      	ldr	r0, [pc, #376]	@ (8005724 <HAL_ADC_Init+0x2a0>)
 80055ac:	f7ff fd60 	bl	8005070 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7e5b      	ldrb	r3, [r3, #25]
 80055b4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055ba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80055c0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80055c6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055ce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d106      	bne.n	80055ec <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	3b01      	subs	r3, #1
 80055e4:	045b      	lsls	r3, r3, #17
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d009      	beq.n	8005608 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4313      	orrs	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	4b46      	ldr	r3, [pc, #280]	@ (8005728 <HAL_ADC_Init+0x2a4>)
 8005610:	4013      	ands	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	430b      	orrs	r3, r1
 800561a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff ff1b 	bl	800545c <LL_ADC_INJ_IsConversionOngoing>
 8005626:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d140      	bne.n	80056b0 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d13d      	bne.n	80056b0 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	7e1b      	ldrb	r3, [r3, #24]
 800563c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800563e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005646:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005648:	4313      	orrs	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005656:	f023 0306 	bic.w	r3, r3, #6
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	69b9      	ldr	r1, [r7, #24]
 8005660:	430b      	orrs	r3, r1
 8005662:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800566a:	2b01      	cmp	r3, #1
 800566c:	d118      	bne.n	80056a0 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005678:	f023 0304 	bic.w	r3, r3, #4
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800568a:	4311      	orrs	r1, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005690:	430a      	orrs	r2, r1
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0201 	orr.w	r2, r2, #1
 800569c:	611a      	str	r2, [r3, #16]
 800569e:	e007      	b.n	80056b0 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0201 	bic.w	r2, r2, #1
 80056ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10c      	bne.n	80056d2 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056be:	f023 010f 	bic.w	r1, r3, #15
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	1e5a      	subs	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80056d0:	e007      	b.n	80056e2 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 020f 	bic.w	r2, r2, #15
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80056f2:	e007      	b.n	8005704 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f8:	f043 0210 	orr.w	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005704:	7ffb      	ldrb	r3, [r7, #31]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3724      	adds	r7, #36	@ 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd90      	pop	{r4, r7, pc}
 800570e:	bf00      	nop
 8005710:	20000434 	.word	0x20000434
 8005714:	053e2d63 	.word	0x053e2d63
 8005718:	50040000 	.word	0x50040000
 800571c:	50040100 	.word	0x50040100
 8005720:	50040200 	.word	0x50040200
 8005724:	50040300 	.word	0x50040300
 8005728:	fff0c007 	.word	0xfff0c007

0800572c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005738:	4853      	ldr	r0, [pc, #332]	@ (8005888 <HAL_ADC_Start_DMA+0x15c>)
 800573a:	f7ff fdd7 	bl	80052ec <LL_ADC_GetMultimode>
 800573e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fe76 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 8093 	bne.w	8005878 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_ADC_Start_DMA+0x34>
 800575c:	2302      	movs	r3, #2
 800575e:	e08e      	b.n	800587e <HAL_ADC_Start_DMA+0x152>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a47      	ldr	r2, [pc, #284]	@ (800588c <HAL_ADC_Start_DMA+0x160>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d008      	beq.n	8005784 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b05      	cmp	r3, #5
 800577c:	d002      	beq.n	8005784 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b09      	cmp	r3, #9
 8005782:	d172      	bne.n	800586a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fed1 	bl	800652c <ADC_Enable>
 800578a:	4603      	mov	r3, r0
 800578c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d165      	bne.n	8005860 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005798:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a38      	ldr	r2, [pc, #224]	@ (8005890 <HAL_ADC_Start_DMA+0x164>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d002      	beq.n	80057b8 <HAL_ADC_Start_DMA+0x8c>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	e000      	b.n	80057ba <HAL_ADC_Start_DMA+0x8e>
 80057b8:	4b36      	ldr	r3, [pc, #216]	@ (8005894 <HAL_ADC_Start_DMA+0x168>)
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	4293      	cmp	r3, r2
 80057c0:	d002      	beq.n	80057c8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e4:	f023 0206 	bic.w	r2, r3, #6
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057ec:	e002      	b.n	80057f4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f8:	4a27      	ldr	r2, [pc, #156]	@ (8005898 <HAL_ADC_Start_DMA+0x16c>)
 80057fa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005800:	4a26      	ldr	r2, [pc, #152]	@ (800589c <HAL_ADC_Start_DMA+0x170>)
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005808:	4a25      	ldr	r2, [pc, #148]	@ (80058a0 <HAL_ADC_Start_DMA+0x174>)
 800580a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	221c      	movs	r2, #28
 8005812:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0210 	orr.w	r2, r2, #16
 800582a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3340      	adds	r3, #64	@ 0x40
 8005846:	4619      	mov	r1, r3
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f001 fb1e 	bl	8006e8c <HAL_DMA_Start_IT>
 8005850:	4603      	mov	r3, r0
 8005852:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fdd8 	bl	800540e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800585e:	e00d      	b.n	800587c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8005868:	e008      	b.n	800587c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8005876:	e001      	b.n	800587c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005878:	2302      	movs	r3, #2
 800587a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800587c:	7dfb      	ldrb	r3, [r7, #23]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	50040300 	.word	0x50040300
 800588c:	50040200 	.word	0x50040200
 8005890:	50040100 	.word	0x50040100
 8005894:	50040000 	.word	0x50040000
 8005898:	08006639 	.word	0x08006639
 800589c:	08006711 	.word	0x08006711
 80058a0:	0800672d 	.word	0x0800672d

080058a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	@ 0x28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80058ac:	2300      	movs	r3, #0
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058c0:	4882      	ldr	r0, [pc, #520]	@ (8005acc <HAL_ADC_IRQHandler+0x228>)
 80058c2:	f7ff fd13 	bl	80052ec <LL_ADC_GetMultimode>
 80058c6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <HAL_ADC_IRQHandler+0x5e>
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ec:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 ff81 	bl	80067fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2202      	movs	r2, #2
 8005900:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_ADC_IRQHandler+0x72>
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8083 	beq.w	8005a28 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d07d      	beq.n	8005a28 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fc2d 	bl	80051a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d062      	beq.n	8005a1a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a5d      	ldr	r2, [pc, #372]	@ (8005ad0 <HAL_ADC_IRQHandler+0x22c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d002      	beq.n	8005964 <HAL_ADC_IRQHandler+0xc0>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	e000      	b.n	8005966 <HAL_ADC_IRQHandler+0xc2>
 8005964:	4b5b      	ldr	r3, [pc, #364]	@ (8005ad4 <HAL_ADC_IRQHandler+0x230>)
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	4293      	cmp	r3, r2
 800596c:	d008      	beq.n	8005980 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b05      	cmp	r3, #5
 8005978:	d002      	beq.n	8005980 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b09      	cmp	r3, #9
 800597e:	d104      	bne.n	800598a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	623b      	str	r3, [r7, #32]
 8005988:	e00c      	b.n	80059a4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a50      	ldr	r2, [pc, #320]	@ (8005ad0 <HAL_ADC_IRQHandler+0x22c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d002      	beq.n	800599a <HAL_ADC_IRQHandler+0xf6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	e000      	b.n	800599c <HAL_ADC_IRQHandler+0xf8>
 800599a:	4b4e      	ldr	r3, [pc, #312]	@ (8005ad4 <HAL_ADC_IRQHandler+0x230>)
 800599c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d135      	bne.n	8005a1a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d12e      	bne.n	8005a1a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fd38 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11a      	bne.n	8005a02 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 020c 	bic.w	r2, r2, #12
 80059da:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d112      	bne.n	8005a1a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f8:	f043 0201 	orr.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a00:	e00b      	b.n	8005a1a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a06:	f043 0210 	orr.w	r2, r3, #16
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fe fb58 	bl	80040d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	220c      	movs	r2, #12
 8005a26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <HAL_ADC_IRQHandler+0x198>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 809f 	beq.w	8005b86 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8099 	beq.w	8005b86 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a64:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fbd8 	bl	8005226 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005a76:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fb93 	bl	80051a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a82:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a11      	ldr	r2, [pc, #68]	@ (8005ad0 <HAL_ADC_IRQHandler+0x22c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d002      	beq.n	8005a94 <HAL_ADC_IRQHandler+0x1f0>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	e000      	b.n	8005a96 <HAL_ADC_IRQHandler+0x1f2>
 8005a94:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad4 <HAL_ADC_IRQHandler+0x230>)
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d008      	beq.n	8005ab0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d002      	beq.n	8005ab0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b07      	cmp	r3, #7
 8005aae:	d104      	bne.n	8005aba <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	e013      	b.n	8005ae2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a04      	ldr	r2, [pc, #16]	@ (8005ad0 <HAL_ADC_IRQHandler+0x22c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_ADC_IRQHandler+0x234>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	e007      	b.n	8005ada <HAL_ADC_IRQHandler+0x236>
 8005aca:	bf00      	nop
 8005acc:	50040300 	.word	0x50040300
 8005ad0:	50040100 	.word	0x50040100
 8005ad4:	50040000 	.word	0x50040000
 8005ad8:	4b7d      	ldr	r3, [pc, #500]	@ (8005cd0 <HAL_ADC_IRQHandler+0x42c>)
 8005ada:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d047      	beq.n	8005b78 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <HAL_ADC_IRQHandler+0x25e>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d03f      	beq.n	8005b78 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d13a      	bne.n	8005b78 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d133      	bne.n	8005b78 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d12e      	bne.n	8005b78 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fc9c 	bl	800545c <LL_ADC_INJ_IsConversionOngoing>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d11a      	bne.n	8005b60 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b38:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d112      	bne.n	8005b78 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b5e:	e00b      	b.n	8005b78 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b64:	f043 0210 	orr.w	r2, r3, #16
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fe17 	bl	80067ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2260      	movs	r2, #96	@ 0x60
 8005b84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d011      	beq.n	8005bb4 <HAL_ADC_IRQHandler+0x310>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8a0 	bl	8005cec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2280      	movs	r2, #128	@ 0x80
 8005bb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <HAL_ADC_IRQHandler+0x340>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00d      	beq.n	8005be4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bcc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fdfd 	bl	80067d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005be2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d012      	beq.n	8005c14 <HAL_ADC_IRQHandler+0x370>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fdef 	bl	80067e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d036      	beq.n	8005c8c <HAL_ADC_IRQHandler+0x3e8>
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d031      	beq.n	8005c8c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005c30:	2301      	movs	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c34:	e014      	b.n	8005c60 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005c3c:	4825      	ldr	r0, [pc, #148]	@ (8005cd4 <HAL_ADC_IRQHandler+0x430>)
 8005c3e:	f7ff fb63 	bl	8005308 <LL_ADC_GetMultiDMATransfer>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c4c:	e008      	b.n	8005c60 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10e      	bne.n	8005c84 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c76:	f043 0202 	orr.w	r2, r3, #2
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f83e 	bl	8005d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2210      	movs	r2, #16
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <HAL_ADC_IRQHandler+0x424>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d013      	beq.n	8005cc8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb0:	f043 0208 	orr.w	r2, r3, #8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cc0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fd7c 	bl	80067c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005cc8:	bf00      	nop
 8005cca:	3728      	adds	r7, #40	@ 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	50040000 	.word	0x50040000
 8005cd4:	50040300 	.word	0x50040300

08005cd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b0b6      	sub	sp, #216	@ 0xd8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x22>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e3e3      	b.n	80064fe <HAL_ADC_ConfigChannel+0x7ea>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fb77 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 83c4 	bne.w	80064d8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b05      	cmp	r3, #5
 8005d5e:	d824      	bhi.n	8005daa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	3b02      	subs	r3, #2
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d81b      	bhi.n	8005da2 <HAL_ADC_ConfigChannel+0x8e>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <HAL_ADC_ConfigChannel+0x5c>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d81 	.word	0x08005d81
 8005d74:	08005d89 	.word	0x08005d89
 8005d78:	08005d91 	.word	0x08005d91
 8005d7c:	08005d99 	.word	0x08005d99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005d80:	230c      	movs	r3, #12
 8005d82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005d86:	e010      	b.n	8005daa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005d88:	2312      	movs	r3, #18
 8005d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005d8e:	e00c      	b.n	8005daa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005d90:	2318      	movs	r3, #24
 8005d92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005d96:	e008      	b.n	8005daa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005da0:	e003      	b.n	8005daa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005da2:	2306      	movs	r3, #6
 8005da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005da8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005db8:	f7ff fa09 	bl	80051ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fb38 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 8005dc6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fb44 	bl	800545c <LL_ADC_INJ_IsConversionOngoing>
 8005dd4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f040 81bf 	bne.w	8006160 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 81ba 	bne.w	8006160 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005df4:	d10f      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4619      	mov	r1, r3
 8005e02:	f7ff fa23 	bl	800524c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff f9b7 	bl	8005182 <LL_ADC_SetSamplingTimeCommonConfig>
 8005e14:	e00e      	b.n	8005e34 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6819      	ldr	r1, [r3, #0]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f7ff fa12 	bl	800524c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff f9a7 	bl	8005182 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d00a      	beq.n	8005e6c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6919      	ldr	r1, [r3, #16]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e66:	f7ff f937 	bl	80050d8 <LL_ADC_SetOffset>
 8005e6a:	e179      	b.n	8006160 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff f954 	bl	8005120 <LL_ADC_GetOffsetChannel>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x184>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff f949 	bl	8005120 <LL_ADC_GetOffsetChannel>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	0e9b      	lsrs	r3, r3, #26
 8005e92:	f003 021f 	and.w	r2, r3, #31
 8005e96:	e01e      	b.n	8005ed6 <HAL_ADC_ConfigChannel+0x1c2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff f93e 	bl	8005120 <LL_ADC_GetOffsetChannel>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005eba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ebe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	e004      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8005eca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005ece:	fab3 f383 	clz	r3, r3
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d105      	bne.n	8005eee <HAL_ADC_ConfigChannel+0x1da>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	0e9b      	lsrs	r3, r3, #26
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	e018      	b.n	8005f20 <HAL_ADC_ConfigChannel+0x20c>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005efa:	fa93 f3a3 	rbit	r3, r3
 8005efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005f0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8005f12:	2320      	movs	r3, #32
 8005f14:	e004      	b.n	8005f20 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8005f16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f1a:	fab3 f383 	clz	r3, r3
 8005f1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d106      	bne.n	8005f32 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff f90d 	bl	800514c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2101      	movs	r1, #1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff f8f1 	bl	8005120 <LL_ADC_GetOffsetChannel>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x24a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff f8e6 	bl	8005120 <LL_ADC_GetOffsetChannel>
 8005f54:	4603      	mov	r3, r0
 8005f56:	0e9b      	lsrs	r3, r3, #26
 8005f58:	f003 021f 	and.w	r2, r3, #31
 8005f5c:	e01e      	b.n	8005f9c <HAL_ADC_ConfigChannel+0x288>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2101      	movs	r1, #1
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff f8db 	bl	8005120 <LL_ADC_GetOffsetChannel>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f74:	fa93 f3a3 	rbit	r3, r3
 8005f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005f84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	e004      	b.n	8005f9a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8005f90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f94:	fab3 f383 	clz	r3, r3
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d105      	bne.n	8005fb4 <HAL_ADC_ConfigChannel+0x2a0>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	0e9b      	lsrs	r3, r3, #26
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	e018      	b.n	8005fe6 <HAL_ADC_ConfigChannel+0x2d2>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005fc0:	fa93 f3a3 	rbit	r3, r3
 8005fc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8005fd8:	2320      	movs	r3, #32
 8005fda:	e004      	b.n	8005fe6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8005fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fe0:	fab3 f383 	clz	r3, r3
 8005fe4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d106      	bne.n	8005ff8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f8aa 	bl	800514c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff f88e 	bl	8005120 <LL_ADC_GetOffsetChannel>
 8006004:	4603      	mov	r3, r0
 8006006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_ADC_ConfigChannel+0x310>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2102      	movs	r1, #2
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff f883 	bl	8005120 <LL_ADC_GetOffsetChannel>
 800601a:	4603      	mov	r3, r0
 800601c:	0e9b      	lsrs	r3, r3, #26
 800601e:	f003 021f 	and.w	r2, r3, #31
 8006022:	e01e      	b.n	8006062 <HAL_ADC_ConfigChannel+0x34e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2102      	movs	r1, #2
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff f878 	bl	8005120 <LL_ADC_GetOffsetChannel>
 8006030:	4603      	mov	r3, r0
 8006032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006036:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800603a:	fa93 f3a3 	rbit	r3, r3
 800603e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006042:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006046:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800604a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8006052:	2320      	movs	r3, #32
 8006054:	e004      	b.n	8006060 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8006056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800605a:	fab3 f383 	clz	r3, r3
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <HAL_ADC_ConfigChannel+0x366>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	0e9b      	lsrs	r3, r3, #26
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	e014      	b.n	80060a4 <HAL_ADC_ConfigChannel+0x390>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006080:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006082:	fa93 f3a3 	rbit	r3, r3
 8006086:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800608a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800608e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8006096:	2320      	movs	r3, #32
 8006098:	e004      	b.n	80060a4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800609a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800609e:	fab3 f383 	clz	r3, r3
 80060a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d106      	bne.n	80060b6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2102      	movs	r1, #2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff f84b 	bl	800514c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2103      	movs	r1, #3
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff f82f 	bl	8005120 <LL_ADC_GetOffsetChannel>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x3ce>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2103      	movs	r1, #3
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff f824 	bl	8005120 <LL_ADC_GetOffsetChannel>
 80060d8:	4603      	mov	r3, r0
 80060da:	0e9b      	lsrs	r3, r3, #26
 80060dc:	f003 021f 	and.w	r2, r3, #31
 80060e0:	e017      	b.n	8006112 <HAL_ADC_ConfigChannel+0x3fe>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2103      	movs	r1, #3
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff f819 	bl	8005120 <LL_ADC_GetOffsetChannel>
 80060ee:	4603      	mov	r3, r0
 80060f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060f4:	fa93 f3a3 	rbit	r3, r3
 80060f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80060fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060fc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80060fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006104:	2320      	movs	r3, #32
 8006106:	e003      	b.n	8006110 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800610a:	fab3 f383 	clz	r3, r3
 800610e:	b2db      	uxtb	r3, r3
 8006110:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800611a:	2b00      	cmp	r3, #0
 800611c:	d105      	bne.n	800612a <HAL_ADC_ConfigChannel+0x416>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	0e9b      	lsrs	r3, r3, #26
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	e011      	b.n	800614e <HAL_ADC_ConfigChannel+0x43a>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006132:	fa93 f3a3 	rbit	r3, r3
 8006136:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006138:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800613a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800613c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8006142:	2320      	movs	r3, #32
 8006144:	e003      	b.n	800614e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8006146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006148:	fab3 f383 	clz	r3, r3
 800614c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800614e:	429a      	cmp	r2, r3
 8006150:	d106      	bne.n	8006160 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	2103      	movs	r1, #3
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fff6 	bl	800514c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff f93f 	bl	80053e8 <LL_ADC_IsEnabled>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 813f 	bne.w	80063f0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6819      	ldr	r1, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	461a      	mov	r2, r3
 8006180:	f7ff f890 	bl	80052a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4a8e      	ldr	r2, [pc, #568]	@ (80063c4 <HAL_ADC_ConfigChannel+0x6b0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	f040 8130 	bne.w	80063f0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x4a4>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	0e9b      	lsrs	r3, r3, #26
 80061a6:	3301      	adds	r3, #1
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2b09      	cmp	r3, #9
 80061ae:	bf94      	ite	ls
 80061b0:	2301      	movls	r3, #1
 80061b2:	2300      	movhi	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e019      	b.n	80061ec <HAL_ADC_ConfigChannel+0x4d8>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80061c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80061ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80061d0:	2320      	movs	r3, #32
 80061d2:	e003      	b.n	80061dc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80061d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d6:	fab3 f383 	clz	r3, r3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	3301      	adds	r3, #1
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	bf94      	ite	ls
 80061e6:	2301      	movls	r3, #1
 80061e8:	2300      	movhi	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d079      	beq.n	80062e4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <HAL_ADC_ConfigChannel+0x4f8>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0e9b      	lsrs	r3, r3, #26
 8006202:	3301      	adds	r3, #1
 8006204:	069b      	lsls	r3, r3, #26
 8006206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800620a:	e015      	b.n	8006238 <HAL_ADC_ConfigChannel+0x524>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006214:	fa93 f3a3 	rbit	r3, r3
 8006218:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800621a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800621c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800621e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8006224:	2320      	movs	r3, #32
 8006226:	e003      	b.n	8006230 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8006228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622a:	fab3 f383 	clz	r3, r3
 800622e:	b2db      	uxtb	r3, r3
 8006230:	3301      	adds	r3, #1
 8006232:	069b      	lsls	r3, r3, #26
 8006234:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <HAL_ADC_ConfigChannel+0x544>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	0e9b      	lsrs	r3, r3, #26
 800624a:	3301      	adds	r3, #1
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2101      	movs	r1, #1
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	e017      	b.n	8006288 <HAL_ADC_ConfigChannel+0x574>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006260:	fa93 f3a3 	rbit	r3, r3
 8006264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006268:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800626a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8006270:	2320      	movs	r3, #32
 8006272:	e003      	b.n	800627c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8006274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006276:	fab3 f383 	clz	r3, r3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	3301      	adds	r3, #1
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2101      	movs	r1, #1
 8006284:	fa01 f303 	lsl.w	r3, r1, r3
 8006288:	ea42 0103 	orr.w	r1, r2, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x59a>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	0e9b      	lsrs	r3, r3, #26
 800629e:	3301      	adds	r3, #1
 80062a0:	f003 021f 	and.w	r2, r3, #31
 80062a4:	4613      	mov	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	4413      	add	r3, r2
 80062aa:	051b      	lsls	r3, r3, #20
 80062ac:	e018      	b.n	80062e0 <HAL_ADC_ConfigChannel+0x5cc>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b6:	fa93 f3a3 	rbit	r3, r3
 80062ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80062c6:	2320      	movs	r3, #32
 80062c8:	e003      	b.n	80062d2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80062ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062cc:	fab3 f383 	clz	r3, r3
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	3301      	adds	r3, #1
 80062d4:	f003 021f 	and.w	r2, r3, #31
 80062d8:	4613      	mov	r3, r2
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	4413      	add	r3, r2
 80062de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062e0:	430b      	orrs	r3, r1
 80062e2:	e080      	b.n	80063e6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d107      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x5ec>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	0e9b      	lsrs	r3, r3, #26
 80062f6:	3301      	adds	r3, #1
 80062f8:	069b      	lsls	r3, r3, #26
 80062fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80062fe:	e015      	b.n	800632c <HAL_ADC_ConfigChannel+0x618>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	fa93 f3a3 	rbit	r3, r3
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8006318:	2320      	movs	r3, #32
 800631a:	e003      	b.n	8006324 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800631c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631e:	fab3 f383 	clz	r3, r3
 8006322:	b2db      	uxtb	r3, r3
 8006324:	3301      	adds	r3, #1
 8006326:	069b      	lsls	r3, r3, #26
 8006328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_ADC_ConfigChannel+0x638>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	0e9b      	lsrs	r3, r3, #26
 800633e:	3301      	adds	r3, #1
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	2101      	movs	r1, #1
 8006346:	fa01 f303 	lsl.w	r3, r1, r3
 800634a:	e017      	b.n	800637c <HAL_ADC_ConfigChannel+0x668>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	fa93 f3a3 	rbit	r3, r3
 8006358:	61bb      	str	r3, [r7, #24]
  return result;
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8006364:	2320      	movs	r3, #32
 8006366:	e003      	b.n	8006370 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	fab3 f383 	clz	r3, r3
 800636e:	b2db      	uxtb	r3, r3
 8006370:	3301      	adds	r3, #1
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	2101      	movs	r1, #1
 8006378:	fa01 f303 	lsl.w	r3, r1, r3
 800637c:	ea42 0103 	orr.w	r1, r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10d      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x694>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	0e9b      	lsrs	r3, r3, #26
 8006392:	3301      	adds	r3, #1
 8006394:	f003 021f 	and.w	r2, r3, #31
 8006398:	4613      	mov	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	3b1e      	subs	r3, #30
 80063a0:	051b      	lsls	r3, r3, #20
 80063a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80063a6:	e01d      	b.n	80063e4 <HAL_ADC_ConfigChannel+0x6d0>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	fa93 f3a3 	rbit	r3, r3
 80063b4:	60fb      	str	r3, [r7, #12]
  return result;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80063c0:	2320      	movs	r3, #32
 80063c2:	e005      	b.n	80063d0 <HAL_ADC_ConfigChannel+0x6bc>
 80063c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	fab3 f383 	clz	r3, r3
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	3301      	adds	r3, #1
 80063d2:	f003 021f 	and.w	r2, r3, #31
 80063d6:	4613      	mov	r3, r2
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4413      	add	r3, r2
 80063dc:	3b1e      	subs	r3, #30
 80063de:	051b      	lsls	r3, r3, #20
 80063e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063ea:	4619      	mov	r1, r3
 80063ec:	f7fe ff2e 	bl	800524c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b44      	ldr	r3, [pc, #272]	@ (8006508 <HAL_ADC_ConfigChannel+0x7f4>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d07a      	beq.n	80064f2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063fc:	4843      	ldr	r0, [pc, #268]	@ (800650c <HAL_ADC_ConfigChannel+0x7f8>)
 80063fe:	f7fe fe5d 	bl	80050bc <LL_ADC_GetCommonPathInternalCh>
 8006402:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a41      	ldr	r2, [pc, #260]	@ (8006510 <HAL_ADC_ConfigChannel+0x7fc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d12c      	bne.n	800646a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d126      	bne.n	800646a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a3c      	ldr	r2, [pc, #240]	@ (8006514 <HAL_ADC_ConfigChannel+0x800>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <HAL_ADC_ConfigChannel+0x71c>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a3b      	ldr	r2, [pc, #236]	@ (8006518 <HAL_ADC_ConfigChannel+0x804>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d15d      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006434:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006438:	4619      	mov	r1, r3
 800643a:	4834      	ldr	r0, [pc, #208]	@ (800650c <HAL_ADC_ConfigChannel+0x7f8>)
 800643c:	f7fe fe2b 	bl	8005096 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006440:	4b36      	ldr	r3, [pc, #216]	@ (800651c <HAL_ADC_ConfigChannel+0x808>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	099b      	lsrs	r3, r3, #6
 8006446:	4a36      	ldr	r2, [pc, #216]	@ (8006520 <HAL_ADC_ConfigChannel+0x80c>)
 8006448:	fba2 2303 	umull	r2, r3, r2, r3
 800644c:	099b      	lsrs	r3, r3, #6
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	4613      	mov	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800645a:	e002      	b.n	8006462 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	3b01      	subs	r3, #1
 8006460:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f9      	bne.n	800645c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006468:	e040      	b.n	80064ec <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2d      	ldr	r2, [pc, #180]	@ (8006524 <HAL_ADC_ConfigChannel+0x810>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d118      	bne.n	80064a6 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006474:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d112      	bne.n	80064a6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a23      	ldr	r2, [pc, #140]	@ (8006514 <HAL_ADC_ConfigChannel+0x800>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d004      	beq.n	8006494 <HAL_ADC_ConfigChannel+0x780>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a22      	ldr	r2, [pc, #136]	@ (8006518 <HAL_ADC_ConfigChannel+0x804>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d12d      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800649c:	4619      	mov	r1, r3
 800649e:	481b      	ldr	r0, [pc, #108]	@ (800650c <HAL_ADC_ConfigChannel+0x7f8>)
 80064a0:	f7fe fdf9 	bl	8005096 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064a4:	e024      	b.n	80064f0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006528 <HAL_ADC_ConfigChannel+0x814>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d120      	bne.n	80064f2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80064b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d11a      	bne.n	80064f2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a14      	ldr	r2, [pc, #80]	@ (8006514 <HAL_ADC_ConfigChannel+0x800>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d115      	bne.n	80064f2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80064ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064ce:	4619      	mov	r1, r3
 80064d0:	480e      	ldr	r0, [pc, #56]	@ (800650c <HAL_ADC_ConfigChannel+0x7f8>)
 80064d2:	f7fe fde0 	bl	8005096 <LL_ADC_SetCommonPathInternalCh>
 80064d6:	e00c      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80064ea:	e002      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064ec:	bf00      	nop
 80064ee:	e000      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80064fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80064fe:	4618      	mov	r0, r3
 8006500:	37d8      	adds	r7, #216	@ 0xd8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	80080000 	.word	0x80080000
 800650c:	50040300 	.word	0x50040300
 8006510:	c7520000 	.word	0xc7520000
 8006514:	50040000 	.word	0x50040000
 8006518:	50040200 	.word	0x50040200
 800651c:	20000434 	.word	0x20000434
 8006520:	053e2d63 	.word	0x053e2d63
 8006524:	cb840000 	.word	0xcb840000
 8006528:	80000001 	.word	0x80000001

0800652c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006534:	2300      	movs	r3, #0
 8006536:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f7fe ff53 	bl	80053e8 <LL_ADC_IsEnabled>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d169      	bne.n	800661c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	4b36      	ldr	r3, [pc, #216]	@ (8006628 <ADC_Enable+0xfc>)
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00d      	beq.n	8006572 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	f043 0210 	orr.w	r2, r3, #16
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006566:	f043 0201 	orr.w	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e055      	b.n	800661e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe ff22 	bl	80053c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800657c:	482b      	ldr	r0, [pc, #172]	@ (800662c <ADC_Enable+0x100>)
 800657e:	f7fe fd9d 	bl	80050bc <LL_ADC_GetCommonPathInternalCh>
 8006582:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006584:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006588:	2b00      	cmp	r3, #0
 800658a:	d013      	beq.n	80065b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800658c:	4b28      	ldr	r3, [pc, #160]	@ (8006630 <ADC_Enable+0x104>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	099b      	lsrs	r3, r3, #6
 8006592:	4a28      	ldr	r2, [pc, #160]	@ (8006634 <ADC_Enable+0x108>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	099b      	lsrs	r3, r3, #6
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	4613      	mov	r3, r2
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80065a6:	e002      	b.n	80065ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f9      	bne.n	80065a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80065b4:	f7fe fd0c 	bl	8004fd0 <HAL_GetTick>
 80065b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065ba:	e028      	b.n	800660e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe ff11 	bl	80053e8 <LL_ADC_IsEnabled>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d104      	bne.n	80065d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fef5 	bl	80053c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065d6:	f7fe fcfb 	bl	8004fd0 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d914      	bls.n	800660e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d00d      	beq.n	800660e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f6:	f043 0210 	orr.w	r2, r3, #16
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006602:	f043 0201 	orr.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e007      	b.n	800661e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d1cf      	bne.n	80065bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	8000003f 	.word	0x8000003f
 800662c:	50040300 	.word	0x50040300
 8006630:	20000434 	.word	0x20000434
 8006634:	053e2d63 	.word	0x053e2d63

08006638 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800664e:	2b00      	cmp	r3, #0
 8006650:	d14b      	bne.n	80066ea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006656:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d021      	beq.n	80066b0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe fd99 	bl	80051a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d032      	beq.n	80066e2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d12b      	bne.n	80066e2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d11f      	bne.n	80066e2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a6:	f043 0201 	orr.w	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80066ae:	e018      	b.n	80066e2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d111      	bne.n	80066e2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066da:	f043 0201 	orr.w	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7fd fcf4 	bl	80040d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80066e8:	e00e      	b.n	8006708 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fb02 	bl	8005d00 <HAL_ADC_ErrorCallback>
}
 80066fc:	e004      	b.n	8006708 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff fada 	bl	8005cd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800673e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674a:	f043 0204 	orr.w	r2, r3, #4
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fad4 	bl	8005d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <LL_ADC_IsEnabled>:
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <LL_ADC_IsEnabled+0x18>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <LL_ADC_IsEnabled+0x1a>
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <LL_ADC_REG_IsConversionOngoing>:
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b04      	cmp	r3, #4
 8006798:	d101      	bne.n	800679e <LL_ADC_REG_IsConversionOngoing+0x18>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b0a1      	sub	sp, #132	@ 0x84
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800682a:	2302      	movs	r3, #2
 800682c:	e093      	b.n	8006956 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006836:	2300      	movs	r3, #0
 8006838:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800683a:	2300      	movs	r3, #0
 800683c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a47      	ldr	r2, [pc, #284]	@ (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d102      	bne.n	800684e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006848:	4b46      	ldr	r3, [pc, #280]	@ (8006964 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e001      	b.n	8006852 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685c:	f043 0220 	orr.w	r2, r3, #32
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e072      	b.n	8006956 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff ff87 	bl	8006786 <LL_ADC_REG_IsConversionOngoing>
 8006878:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff ff81 	bl	8006786 <LL_ADC_REG_IsConversionOngoing>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d154      	bne.n	8006934 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800688a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800688c:	2b00      	cmp	r3, #0
 800688e:	d151      	bne.n	8006934 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006890:	4b35      	ldr	r3, [pc, #212]	@ (8006968 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006892:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d02c      	beq.n	80068f6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800689c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	6859      	ldr	r1, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068ae:	035b      	lsls	r3, r3, #13
 80068b0:	430b      	orrs	r3, r1
 80068b2:	431a      	orrs	r2, r3
 80068b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068b8:	4829      	ldr	r0, [pc, #164]	@ (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80068ba:	f7ff ff51 	bl	8006760 <LL_ADC_IsEnabled>
 80068be:	4604      	mov	r4, r0
 80068c0:	4828      	ldr	r0, [pc, #160]	@ (8006964 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80068c2:	f7ff ff4d 	bl	8006760 <LL_ADC_IsEnabled>
 80068c6:	4603      	mov	r3, r0
 80068c8:	431c      	orrs	r4, r3
 80068ca:	4828      	ldr	r0, [pc, #160]	@ (800696c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80068cc:	f7ff ff48 	bl	8006760 <LL_ADC_IsEnabled>
 80068d0:	4603      	mov	r3, r0
 80068d2:	4323      	orrs	r3, r4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d137      	bne.n	8006948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80068d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80068e0:	f023 030f 	bic.w	r3, r3, #15
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	6811      	ldr	r1, [r2, #0]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	6892      	ldr	r2, [r2, #8]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	431a      	orrs	r2, r3
 80068f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068f2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80068f4:	e028      	b.n	8006948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80068f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006900:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006902:	4817      	ldr	r0, [pc, #92]	@ (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006904:	f7ff ff2c 	bl	8006760 <LL_ADC_IsEnabled>
 8006908:	4604      	mov	r4, r0
 800690a:	4816      	ldr	r0, [pc, #88]	@ (8006964 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800690c:	f7ff ff28 	bl	8006760 <LL_ADC_IsEnabled>
 8006910:	4603      	mov	r3, r0
 8006912:	431c      	orrs	r4, r3
 8006914:	4815      	ldr	r0, [pc, #84]	@ (800696c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006916:	f7ff ff23 	bl	8006760 <LL_ADC_IsEnabled>
 800691a:	4603      	mov	r3, r0
 800691c:	4323      	orrs	r3, r4
 800691e:	2b00      	cmp	r3, #0
 8006920:	d112      	bne.n	8006948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800692a:	f023 030f 	bic.w	r3, r3, #15
 800692e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006930:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006932:	e009      	b.n	8006948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006946:	e000      	b.n	800694a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006948:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006952:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006956:	4618      	mov	r0, r3
 8006958:	3784      	adds	r7, #132	@ 0x84
 800695a:	46bd      	mov	sp, r7
 800695c:	bd90      	pop	{r4, r7, pc}
 800695e:	bf00      	nop
 8006960:	50040000 	.word	0x50040000
 8006964:	50040100 	.word	0x50040100
 8006968:	50040300 	.word	0x50040300
 800696c:	50040200 	.word	0x50040200

08006970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006980:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <__NVIC_SetPriorityGrouping+0x44>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800698c:	4013      	ands	r3, r2
 800698e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800699c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069a2:	4a04      	ldr	r2, [pc, #16]	@ (80069b4 <__NVIC_SetPriorityGrouping+0x44>)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	60d3      	str	r3, [r2, #12]
}
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	e000ed00 	.word	0xe000ed00

080069b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069bc:	4b04      	ldr	r3, [pc, #16]	@ (80069d0 <__NVIC_GetPriorityGrouping+0x18>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	0a1b      	lsrs	r3, r3, #8
 80069c2:	f003 0307 	and.w	r3, r3, #7
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	e000ed00 	.word	0xe000ed00

080069d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	db0b      	blt.n	80069fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	f003 021f 	and.w	r2, r3, #31
 80069ec:	4907      	ldr	r1, [pc, #28]	@ (8006a0c <__NVIC_EnableIRQ+0x38>)
 80069ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f2:	095b      	lsrs	r3, r3, #5
 80069f4:	2001      	movs	r0, #1
 80069f6:	fa00 f202 	lsl.w	r2, r0, r2
 80069fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	e000e100 	.word	0xe000e100

08006a10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	db12      	blt.n	8006a48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	f003 021f 	and.w	r2, r3, #31
 8006a28:	490a      	ldr	r1, [pc, #40]	@ (8006a54 <__NVIC_DisableIRQ+0x44>)
 8006a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	2001      	movs	r0, #1
 8006a32:	fa00 f202 	lsl.w	r2, r0, r2
 8006a36:	3320      	adds	r3, #32
 8006a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a3c:	f3bf 8f4f 	dsb	sy
}
 8006a40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006a42:	f3bf 8f6f 	isb	sy
}
 8006a46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	e000e100 	.word	0xe000e100

08006a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	6039      	str	r1, [r7, #0]
 8006a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	db0a      	blt.n	8006a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	490c      	ldr	r1, [pc, #48]	@ (8006aa4 <__NVIC_SetPriority+0x4c>)
 8006a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a76:	0112      	lsls	r2, r2, #4
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a80:	e00a      	b.n	8006a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	4908      	ldr	r1, [pc, #32]	@ (8006aa8 <__NVIC_SetPriority+0x50>)
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	3b04      	subs	r3, #4
 8006a90:	0112      	lsls	r2, r2, #4
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	440b      	add	r3, r1
 8006a96:	761a      	strb	r2, [r3, #24]
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	e000e100 	.word	0xe000e100
 8006aa8:	e000ed00 	.word	0xe000ed00

08006aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b089      	sub	sp, #36	@ 0x24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f1c3 0307 	rsb	r3, r3, #7
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	bf28      	it	cs
 8006aca:	2304      	movcs	r3, #4
 8006acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	2b06      	cmp	r3, #6
 8006ad4:	d902      	bls.n	8006adc <NVIC_EncodePriority+0x30>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3b03      	subs	r3, #3
 8006ada:	e000      	b.n	8006ade <NVIC_EncodePriority+0x32>
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aea:	43da      	mvns	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	401a      	ands	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006af4:	f04f 31ff 	mov.w	r1, #4294967295
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	fa01 f303 	lsl.w	r3, r1, r3
 8006afe:	43d9      	mvns	r1, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b04:	4313      	orrs	r3, r2
         );
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3724      	adds	r7, #36	@ 0x24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b24:	d301      	bcc.n	8006b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b26:	2301      	movs	r3, #1
 8006b28:	e00f      	b.n	8006b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b54 <SysTick_Config+0x40>)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b32:	210f      	movs	r1, #15
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	f7ff ff8e 	bl	8006a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b3c:	4b05      	ldr	r3, [pc, #20]	@ (8006b54 <SysTick_Config+0x40>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b42:	4b04      	ldr	r3, [pc, #16]	@ (8006b54 <SysTick_Config+0x40>)
 8006b44:	2207      	movs	r2, #7
 8006b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	e000e010 	.word	0xe000e010

08006b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ff05 	bl	8006970 <__NVIC_SetPriorityGrouping>
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	4603      	mov	r3, r0
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b80:	f7ff ff1a 	bl	80069b8 <__NVIC_GetPriorityGrouping>
 8006b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	6978      	ldr	r0, [r7, #20]
 8006b8c:	f7ff ff8e 	bl	8006aac <NVIC_EncodePriority>
 8006b90:	4602      	mov	r2, r0
 8006b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b96:	4611      	mov	r1, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff ff5d 	bl	8006a58 <__NVIC_SetPriority>
}
 8006b9e:	bf00      	nop
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	4603      	mov	r3, r0
 8006bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff ff0d 	bl	80069d4 <__NVIC_EnableIRQ>
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	4603      	mov	r3, r0
 8006bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff ff1d 	bl	8006a10 <__NVIC_DisableIRQ>
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff ff94 	bl	8006b14 <SysTick_Config>
 8006bec:	4603      	mov	r3, r0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e098      	b.n	8006d3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4b4d      	ldr	r3, [pc, #308]	@ (8006d48 <HAL_DMA_Init+0x150>)
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d80f      	bhi.n	8006c36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8006d4c <HAL_DMA_Init+0x154>)
 8006c1e:	4413      	add	r3, r2
 8006c20:	4a4b      	ldr	r2, [pc, #300]	@ (8006d50 <HAL_DMA_Init+0x158>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	091b      	lsrs	r3, r3, #4
 8006c28:	009a      	lsls	r2, r3, #2
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a48      	ldr	r2, [pc, #288]	@ (8006d54 <HAL_DMA_Init+0x15c>)
 8006c32:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c34:	e00e      	b.n	8006c54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4b46      	ldr	r3, [pc, #280]	@ (8006d58 <HAL_DMA_Init+0x160>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	4a43      	ldr	r2, [pc, #268]	@ (8006d50 <HAL_DMA_Init+0x158>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	091b      	lsrs	r3, r3, #4
 8006c48:	009a      	lsls	r2, r3, #2
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a42      	ldr	r2, [pc, #264]	@ (8006d5c <HAL_DMA_Init+0x164>)
 8006c52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cae:	d039      	beq.n	8006d24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb4:	4a27      	ldr	r2, [pc, #156]	@ (8006d54 <HAL_DMA_Init+0x15c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d11a      	bne.n	8006cf0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006cba:	4b29      	ldr	r3, [pc, #164]	@ (8006d60 <HAL_DMA_Init+0x168>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc2:	f003 031c 	and.w	r3, r3, #28
 8006cc6:	210f      	movs	r1, #15
 8006cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	4924      	ldr	r1, [pc, #144]	@ (8006d60 <HAL_DMA_Init+0x168>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006cd4:	4b22      	ldr	r3, [pc, #136]	@ (8006d60 <HAL_DMA_Init+0x168>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6859      	ldr	r1, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce0:	f003 031c 	and.w	r3, r3, #28
 8006ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce8:	491d      	ldr	r1, [pc, #116]	@ (8006d60 <HAL_DMA_Init+0x168>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	600b      	str	r3, [r1, #0]
 8006cee:	e019      	b.n	8006d24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8006d64 <HAL_DMA_Init+0x16c>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf8:	f003 031c 	and.w	r3, r3, #28
 8006cfc:	210f      	movs	r1, #15
 8006cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006d02:	43db      	mvns	r3, r3
 8006d04:	4917      	ldr	r1, [pc, #92]	@ (8006d64 <HAL_DMA_Init+0x16c>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006d0a:	4b16      	ldr	r3, [pc, #88]	@ (8006d64 <HAL_DMA_Init+0x16c>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6859      	ldr	r1, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d16:	f003 031c 	and.w	r3, r3, #28
 8006d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1e:	4911      	ldr	r1, [pc, #68]	@ (8006d64 <HAL_DMA_Init+0x16c>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	40020407 	.word	0x40020407
 8006d4c:	bffdfff8 	.word	0xbffdfff8
 8006d50:	cccccccd 	.word	0xcccccccd
 8006d54:	40020000 	.word	0x40020000
 8006d58:	bffdfbf8 	.word	0xbffdfbf8
 8006d5c:	40020400 	.word	0x40020400
 8006d60:	400200a8 	.word	0x400200a8
 8006d64:	400204a8 	.word	0x400204a8

08006d68 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e072      	b.n	8006e60 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0201 	bic.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4b36      	ldr	r3, [pc, #216]	@ (8006e6c <HAL_DMA_DeInit+0x104>)
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d80f      	bhi.n	8006db6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4b34      	ldr	r3, [pc, #208]	@ (8006e70 <HAL_DMA_DeInit+0x108>)
 8006d9e:	4413      	add	r3, r2
 8006da0:	4a34      	ldr	r2, [pc, #208]	@ (8006e74 <HAL_DMA_DeInit+0x10c>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	091b      	lsrs	r3, r3, #4
 8006da8:	009a      	lsls	r2, r3, #2
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a31      	ldr	r2, [pc, #196]	@ (8006e78 <HAL_DMA_DeInit+0x110>)
 8006db2:	641a      	str	r2, [r3, #64]	@ 0x40
 8006db4:	e00e      	b.n	8006dd4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8006e7c <HAL_DMA_DeInit+0x114>)
 8006dbe:	4413      	add	r3, r2
 8006dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e74 <HAL_DMA_DeInit+0x10c>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	091b      	lsrs	r3, r3, #4
 8006dc8:	009a      	lsls	r2, r3, #2
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8006e80 <HAL_DMA_DeInit+0x118>)
 8006dd2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de0:	f003 021c 	and.w	r2, r3, #28
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de8:	2101      	movs	r1, #1
 8006dea:	fa01 f202 	lsl.w	r2, r1, r2
 8006dee:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	4a20      	ldr	r2, [pc, #128]	@ (8006e78 <HAL_DMA_DeInit+0x110>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10d      	bne.n	8006e16 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006dfa:	4b22      	ldr	r3, [pc, #136]	@ (8006e84 <HAL_DMA_DeInit+0x11c>)
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	f003 031c 	and.w	r3, r3, #28
 8006e06:	210f      	movs	r1, #15
 8006e08:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	491d      	ldr	r1, [pc, #116]	@ (8006e84 <HAL_DMA_DeInit+0x11c>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	600b      	str	r3, [r1, #0]
 8006e14:	e00c      	b.n	8006e30 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006e16:	4b1c      	ldr	r3, [pc, #112]	@ (8006e88 <HAL_DMA_DeInit+0x120>)
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1e:	f003 031c 	and.w	r3, r3, #28
 8006e22:	210f      	movs	r1, #15
 8006e24:	fa01 f303 	lsl.w	r3, r1, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	4917      	ldr	r1, [pc, #92]	@ (8006e88 <HAL_DMA_DeInit+0x120>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40020407 	.word	0x40020407
 8006e70:	bffdfff8 	.word	0xbffdfff8
 8006e74:	cccccccd 	.word	0xcccccccd
 8006e78:	40020000 	.word	0x40020000
 8006e7c:	bffdfbf8 	.word	0xbffdfbf8
 8006e80:	40020400 	.word	0x40020400
 8006e84:	400200a8 	.word	0x400200a8
 8006e88:	400204a8 	.word	0x400204a8

08006e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_DMA_Start_IT+0x20>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e04b      	b.n	8006f44 <HAL_DMA_Start_IT+0xb8>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d13a      	bne.n	8006f36 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	68b9      	ldr	r1, [r7, #8]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f96d 	bl	80071c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 020e 	orr.w	r2, r2, #14
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e00f      	b.n	8006f24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0204 	bic.w	r2, r2, #4
 8006f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 020a 	orr.w	r2, r2, #10
 8006f22:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e005      	b.n	8006f42 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d008      	beq.n	8006f76 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2204      	movs	r2, #4
 8006f68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e022      	b.n	8006fbc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 020e 	bic.w	r2, r2, #14
 8006f84:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9a:	f003 021c 	and.w	r2, r3, #28
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8006fa8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d005      	beq.n	8006fec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	73fb      	strb	r3, [r7, #15]
 8006fea:	e029      	b.n	8007040 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 020e 	bic.w	r2, r2, #14
 8006ffa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007010:	f003 021c 	and.w	r2, r3, #28
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007018:	2101      	movs	r1, #1
 800701a:	fa01 f202 	lsl.w	r2, r1, r2
 800701e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
    }
  }
  return status;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007066:	f003 031c 	and.w	r3, r3, #28
 800706a:	2204      	movs	r2, #4
 800706c:	409a      	lsls	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4013      	ands	r3, r2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d026      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x7a>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d021      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d107      	bne.n	800709e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0204 	bic.w	r2, r2, #4
 800709c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a2:	f003 021c 	and.w	r2, r3, #28
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	2104      	movs	r1, #4
 80070ac:	fa01 f202 	lsl.w	r2, r1, r2
 80070b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d071      	beq.n	800719e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80070c2:	e06c      	b.n	800719e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c8:	f003 031c 	and.w	r3, r3, #28
 80070cc:	2202      	movs	r2, #2
 80070ce:	409a      	lsls	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d02e      	beq.n	8007136 <HAL_DMA_IRQHandler+0xec>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d029      	beq.n	8007136 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 020a 	bic.w	r2, r2, #10
 80070fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710c:	f003 021c 	and.w	r2, r3, #28
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007114:	2102      	movs	r1, #2
 8007116:	fa01 f202 	lsl.w	r2, r1, r2
 800711a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d038      	beq.n	800719e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007134:	e033      	b.n	800719e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713a:	f003 031c 	and.w	r3, r3, #28
 800713e:	2208      	movs	r2, #8
 8007140:	409a      	lsls	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4013      	ands	r3, r2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d02a      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x156>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d025      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 020e 	bic.w	r2, r2, #14
 8007162:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007168:	f003 021c 	and.w	r2, r3, #28
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007170:	2101      	movs	r1, #1
 8007172:	fa01 f202 	lsl.w	r2, r1, r2
 8007176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
}
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80071b6:	b2db      	uxtb	r3, r3
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d6:	f003 021c 	and.w	r2, r3, #28
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	2101      	movs	r1, #1
 80071e0:	fa01 f202 	lsl.w	r2, r1, r2
 80071e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d108      	bne.n	8007208 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007206:	e007      	b.n	8007218 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007232:	e166      	b.n	8007502 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	2101      	movs	r1, #1
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	fa01 f303 	lsl.w	r3, r1, r3
 8007240:	4013      	ands	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8158 	beq.w	80074fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d005      	beq.n	8007264 <HAL_GPIO_Init+0x40>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f003 0303 	and.w	r3, r3, #3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d130      	bne.n	80072c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	2203      	movs	r2, #3
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	43db      	mvns	r3, r3
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4013      	ands	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800729a:	2201      	movs	r2, #1
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	43db      	mvns	r3, r3
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4013      	ands	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	091b      	lsrs	r3, r3, #4
 80072b0:	f003 0201 	and.w	r2, r3, #1
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d017      	beq.n	8007302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	2203      	movs	r2, #3
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	43db      	mvns	r3, r3
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4013      	ands	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d123      	bne.n	8007356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	08da      	lsrs	r2, r3, #3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3208      	adds	r2, #8
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	220f      	movs	r2, #15
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	43db      	mvns	r3, r3
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4013      	ands	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	fa02 f303 	lsl.w	r3, r2, r3
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	08da      	lsrs	r2, r3, #3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3208      	adds	r2, #8
 8007350:	6939      	ldr	r1, [r7, #16]
 8007352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	2203      	movs	r2, #3
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	43db      	mvns	r3, r3
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4013      	ands	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f003 0203 	and.w	r2, r3, #3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 80b2 	beq.w	80074fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007398:	4b61      	ldr	r3, [pc, #388]	@ (8007520 <HAL_GPIO_Init+0x2fc>)
 800739a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800739c:	4a60      	ldr	r2, [pc, #384]	@ (8007520 <HAL_GPIO_Init+0x2fc>)
 800739e:	f043 0301 	orr.w	r3, r3, #1
 80073a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80073a4:	4b5e      	ldr	r3, [pc, #376]	@ (8007520 <HAL_GPIO_Init+0x2fc>)
 80073a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80073b0:	4a5c      	ldr	r2, [pc, #368]	@ (8007524 <HAL_GPIO_Init+0x300>)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	089b      	lsrs	r3, r3, #2
 80073b6:	3302      	adds	r3, #2
 80073b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f003 0303 	and.w	r3, r3, #3
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	220f      	movs	r2, #15
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	43db      	mvns	r3, r3
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4013      	ands	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80073da:	d02b      	beq.n	8007434 <HAL_GPIO_Init+0x210>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a52      	ldr	r2, [pc, #328]	@ (8007528 <HAL_GPIO_Init+0x304>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d025      	beq.n	8007430 <HAL_GPIO_Init+0x20c>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a51      	ldr	r2, [pc, #324]	@ (800752c <HAL_GPIO_Init+0x308>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d01f      	beq.n	800742c <HAL_GPIO_Init+0x208>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a50      	ldr	r2, [pc, #320]	@ (8007530 <HAL_GPIO_Init+0x30c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d019      	beq.n	8007428 <HAL_GPIO_Init+0x204>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a4f      	ldr	r2, [pc, #316]	@ (8007534 <HAL_GPIO_Init+0x310>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d013      	beq.n	8007424 <HAL_GPIO_Init+0x200>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a4e      	ldr	r2, [pc, #312]	@ (8007538 <HAL_GPIO_Init+0x314>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00d      	beq.n	8007420 <HAL_GPIO_Init+0x1fc>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a4d      	ldr	r2, [pc, #308]	@ (800753c <HAL_GPIO_Init+0x318>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <HAL_GPIO_Init+0x1f8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a4c      	ldr	r2, [pc, #304]	@ (8007540 <HAL_GPIO_Init+0x31c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d101      	bne.n	8007418 <HAL_GPIO_Init+0x1f4>
 8007414:	2307      	movs	r3, #7
 8007416:	e00e      	b.n	8007436 <HAL_GPIO_Init+0x212>
 8007418:	2308      	movs	r3, #8
 800741a:	e00c      	b.n	8007436 <HAL_GPIO_Init+0x212>
 800741c:	2306      	movs	r3, #6
 800741e:	e00a      	b.n	8007436 <HAL_GPIO_Init+0x212>
 8007420:	2305      	movs	r3, #5
 8007422:	e008      	b.n	8007436 <HAL_GPIO_Init+0x212>
 8007424:	2304      	movs	r3, #4
 8007426:	e006      	b.n	8007436 <HAL_GPIO_Init+0x212>
 8007428:	2303      	movs	r3, #3
 800742a:	e004      	b.n	8007436 <HAL_GPIO_Init+0x212>
 800742c:	2302      	movs	r3, #2
 800742e:	e002      	b.n	8007436 <HAL_GPIO_Init+0x212>
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <HAL_GPIO_Init+0x212>
 8007434:	2300      	movs	r3, #0
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	f002 0203 	and.w	r2, r2, #3
 800743c:	0092      	lsls	r2, r2, #2
 800743e:	4093      	lsls	r3, r2
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007446:	4937      	ldr	r1, [pc, #220]	@ (8007524 <HAL_GPIO_Init+0x300>)
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	089b      	lsrs	r3, r3, #2
 800744c:	3302      	adds	r3, #2
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007454:	4b3b      	ldr	r3, [pc, #236]	@ (8007544 <HAL_GPIO_Init+0x320>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	43db      	mvns	r3, r3
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4013      	ands	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007478:	4a32      	ldr	r2, [pc, #200]	@ (8007544 <HAL_GPIO_Init+0x320>)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800747e:	4b31      	ldr	r3, [pc, #196]	@ (8007544 <HAL_GPIO_Init+0x320>)
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	43db      	mvns	r3, r3
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4013      	ands	r3, r2
 800748c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80074a2:	4a28      	ldr	r2, [pc, #160]	@ (8007544 <HAL_GPIO_Init+0x320>)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80074a8:	4b26      	ldr	r3, [pc, #152]	@ (8007544 <HAL_GPIO_Init+0x320>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	43db      	mvns	r3, r3
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4013      	ands	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80074cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007544 <HAL_GPIO_Init+0x320>)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80074d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <HAL_GPIO_Init+0x320>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	43db      	mvns	r3, r3
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4013      	ands	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80074f6:	4a13      	ldr	r2, [pc, #76]	@ (8007544 <HAL_GPIO_Init+0x320>)
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3301      	adds	r3, #1
 8007500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	f47f ae91 	bne.w	8007234 <HAL_GPIO_Init+0x10>
  }
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	40021000 	.word	0x40021000
 8007524:	40010000 	.word	0x40010000
 8007528:	48000400 	.word	0x48000400
 800752c:	48000800 	.word	0x48000800
 8007530:	48000c00 	.word	0x48000c00
 8007534:	48001000 	.word	0x48001000
 8007538:	48001400 	.word	0x48001400
 800753c:	48001800 	.word	0x48001800
 8007540:	48001c00 	.word	0x48001c00
 8007544:	40010400 	.word	0x40010400

08007548 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007556:	e0c9      	b.n	80076ec <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007558:	2201      	movs	r2, #1
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	fa02 f303 	lsl.w	r3, r2, r3
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	4013      	ands	r3, r2
 8007564:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 80bc 	beq.w	80076e6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800756e:	4a66      	ldr	r2, [pc, #408]	@ (8007708 <HAL_GPIO_DeInit+0x1c0>)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	089b      	lsrs	r3, r3, #2
 8007574:	3302      	adds	r3, #2
 8007576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800757a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	220f      	movs	r2, #15
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4013      	ands	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007596:	d02b      	beq.n	80075f0 <HAL_GPIO_DeInit+0xa8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a5c      	ldr	r2, [pc, #368]	@ (800770c <HAL_GPIO_DeInit+0x1c4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d025      	beq.n	80075ec <HAL_GPIO_DeInit+0xa4>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a5b      	ldr	r2, [pc, #364]	@ (8007710 <HAL_GPIO_DeInit+0x1c8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d01f      	beq.n	80075e8 <HAL_GPIO_DeInit+0xa0>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a5a      	ldr	r2, [pc, #360]	@ (8007714 <HAL_GPIO_DeInit+0x1cc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d019      	beq.n	80075e4 <HAL_GPIO_DeInit+0x9c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a59      	ldr	r2, [pc, #356]	@ (8007718 <HAL_GPIO_DeInit+0x1d0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d013      	beq.n	80075e0 <HAL_GPIO_DeInit+0x98>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a58      	ldr	r2, [pc, #352]	@ (800771c <HAL_GPIO_DeInit+0x1d4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00d      	beq.n	80075dc <HAL_GPIO_DeInit+0x94>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a57      	ldr	r2, [pc, #348]	@ (8007720 <HAL_GPIO_DeInit+0x1d8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d007      	beq.n	80075d8 <HAL_GPIO_DeInit+0x90>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a56      	ldr	r2, [pc, #344]	@ (8007724 <HAL_GPIO_DeInit+0x1dc>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d101      	bne.n	80075d4 <HAL_GPIO_DeInit+0x8c>
 80075d0:	2307      	movs	r3, #7
 80075d2:	e00e      	b.n	80075f2 <HAL_GPIO_DeInit+0xaa>
 80075d4:	2308      	movs	r3, #8
 80075d6:	e00c      	b.n	80075f2 <HAL_GPIO_DeInit+0xaa>
 80075d8:	2306      	movs	r3, #6
 80075da:	e00a      	b.n	80075f2 <HAL_GPIO_DeInit+0xaa>
 80075dc:	2305      	movs	r3, #5
 80075de:	e008      	b.n	80075f2 <HAL_GPIO_DeInit+0xaa>
 80075e0:	2304      	movs	r3, #4
 80075e2:	e006      	b.n	80075f2 <HAL_GPIO_DeInit+0xaa>
 80075e4:	2303      	movs	r3, #3
 80075e6:	e004      	b.n	80075f2 <HAL_GPIO_DeInit+0xaa>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e002      	b.n	80075f2 <HAL_GPIO_DeInit+0xaa>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e000      	b.n	80075f2 <HAL_GPIO_DeInit+0xaa>
 80075f0:	2300      	movs	r3, #0
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	f002 0203 	and.w	r2, r2, #3
 80075f8:	0092      	lsls	r2, r2, #2
 80075fa:	4093      	lsls	r3, r2
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d132      	bne.n	8007668 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007602:	4b49      	ldr	r3, [pc, #292]	@ (8007728 <HAL_GPIO_DeInit+0x1e0>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	43db      	mvns	r3, r3
 800760a:	4947      	ldr	r1, [pc, #284]	@ (8007728 <HAL_GPIO_DeInit+0x1e0>)
 800760c:	4013      	ands	r3, r2
 800760e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007610:	4b45      	ldr	r3, [pc, #276]	@ (8007728 <HAL_GPIO_DeInit+0x1e0>)
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	43db      	mvns	r3, r3
 8007618:	4943      	ldr	r1, [pc, #268]	@ (8007728 <HAL_GPIO_DeInit+0x1e0>)
 800761a:	4013      	ands	r3, r2
 800761c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800761e:	4b42      	ldr	r3, [pc, #264]	@ (8007728 <HAL_GPIO_DeInit+0x1e0>)
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	43db      	mvns	r3, r3
 8007626:	4940      	ldr	r1, [pc, #256]	@ (8007728 <HAL_GPIO_DeInit+0x1e0>)
 8007628:	4013      	ands	r3, r2
 800762a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800762c:	4b3e      	ldr	r3, [pc, #248]	@ (8007728 <HAL_GPIO_DeInit+0x1e0>)
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	43db      	mvns	r3, r3
 8007634:	493c      	ldr	r1, [pc, #240]	@ (8007728 <HAL_GPIO_DeInit+0x1e0>)
 8007636:	4013      	ands	r3, r2
 8007638:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f003 0303 	and.w	r3, r3, #3
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	220f      	movs	r2, #15
 8007644:	fa02 f303 	lsl.w	r3, r2, r3
 8007648:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800764a:	4a2f      	ldr	r2, [pc, #188]	@ (8007708 <HAL_GPIO_DeInit+0x1c0>)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	089b      	lsrs	r3, r3, #2
 8007650:	3302      	adds	r3, #2
 8007652:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	43da      	mvns	r2, r3
 800765a:	482b      	ldr	r0, [pc, #172]	@ (8007708 <HAL_GPIO_DeInit+0x1c0>)
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	089b      	lsrs	r3, r3, #2
 8007660:	400a      	ands	r2, r1
 8007662:	3302      	adds	r3, #2
 8007664:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	2103      	movs	r1, #3
 8007672:	fa01 f303 	lsl.w	r3, r1, r3
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	08da      	lsrs	r2, r3, #3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3208      	adds	r2, #8
 8007684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	220f      	movs	r2, #15
 8007692:	fa02 f303 	lsl.w	r3, r2, r3
 8007696:	43db      	mvns	r3, r3
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	08d2      	lsrs	r2, r2, #3
 800769c:	4019      	ands	r1, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3208      	adds	r2, #8
 80076a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	2103      	movs	r1, #3
 80076b0:	fa01 f303 	lsl.w	r3, r1, r3
 80076b4:	43db      	mvns	r3, r3
 80076b6:	401a      	ands	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	2101      	movs	r1, #1
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	fa01 f303 	lsl.w	r3, r1, r3
 80076c8:	43db      	mvns	r3, r3
 80076ca:	401a      	ands	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	2103      	movs	r1, #3
 80076da:	fa01 f303 	lsl.w	r3, r1, r3
 80076de:	43db      	mvns	r3, r3
 80076e0:	401a      	ands	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	3301      	adds	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f47f af2f 	bne.w	8007558 <HAL_GPIO_DeInit+0x10>
  }
}
 80076fa:	bf00      	nop
 80076fc:	bf00      	nop
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40010000 	.word	0x40010000
 800770c:	48000400 	.word	0x48000400
 8007710:	48000800 	.word	0x48000800
 8007714:	48000c00 	.word	0x48000c00
 8007718:	48001000 	.word	0x48001000
 800771c:	48001400 	.word	0x48001400
 8007720:	48001800 	.word	0x48001800
 8007724:	48001c00 	.word	0x48001c00
 8007728:	40010400 	.word	0x40010400

0800772c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	887b      	ldrh	r3, [r7, #2]
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
 8007748:	e001      	b.n	800774e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	807b      	strh	r3, [r7, #2]
 8007768:	4613      	mov	r3, r2
 800776a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800776c:	787b      	ldrb	r3, [r7, #1]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007772:	887a      	ldrh	r2, [r7, #2]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007778:	e002      	b.n	8007780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800777a:	887a      	ldrh	r2, [r7, #2]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e08d      	b.n	80078ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fc fe12 	bl	80043dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2224      	movs	r2, #36	@ 0x24
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80077dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d107      	bne.n	8007806 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007802:	609a      	str	r2, [r3, #8]
 8007804:	e006      	b.n	8007814 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007812:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d108      	bne.n	800782e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800782a:	605a      	str	r2, [r3, #4]
 800782c:	e007      	b.n	800783e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800783c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800784c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007850:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007860:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	69d9      	ldr	r1, [r3, #28]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a1a      	ldr	r2, [r3, #32]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	@ 0x28
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	461a      	mov	r2, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	817b      	strh	r3, [r7, #10]
 80078d4:	4613      	mov	r3, r2
 80078d6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b20      	cmp	r3, #32
 80078e6:	f040 80ef 	bne.w	8007ac8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f8:	d101      	bne.n	80078fe <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80078fa:	2302      	movs	r3, #2
 80078fc:	e0e5      	b.n	8007aca <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_I2C_Master_Transmit_DMA+0x48>
 8007908:	2302      	movs	r3, #2
 800790a:	e0de      	b.n	8007aca <HAL_I2C_Master_Transmit_DMA+0x206>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2221      	movs	r2, #33	@ 0x21
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2210      	movs	r2, #16
 8007920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	893a      	ldrh	r2, [r7, #8]
 8007934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4a66      	ldr	r2, [pc, #408]	@ (8007ad4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800793a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4a66      	ldr	r2, [pc, #408]	@ (8007ad8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007940:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007946:	b29b      	uxth	r3, r3
 8007948:	2bff      	cmp	r3, #255	@ 0xff
 800794a:	d906      	bls.n	800795a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	22ff      	movs	r2, #255	@ 0xff
 8007950:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007952:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007956:	61fb      	str	r3, [r7, #28]
 8007958:	e007      	b.n	800796a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007968:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01a      	beq.n	80079a8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	781a      	ldrb	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800798c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d074      	beq.n	8007a9a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d022      	beq.n	80079fe <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079bc:	4a47      	ldr	r2, [pc, #284]	@ (8007adc <HAL_I2C_Master_Transmit_DMA+0x218>)
 80079be:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c4:	4a46      	ldr	r2, [pc, #280]	@ (8007ae0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80079c6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079cc:	2200      	movs	r2, #0
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d4:	2200      	movs	r2, #0
 80079d6:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80079e8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80079ee:	f7ff fa4d 	bl	8006e8c <HAL_DMA_Start_IT>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d13a      	bne.n	8007a72 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80079fc:	e013      	b.n	8007a26 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e051      	b.n	8007aca <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	8979      	ldrh	r1, [r7, #10]
 8007a32:	4b2c      	ldr	r3, [pc, #176]	@ (8007ae4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f002 f8f9 	bl	8009c30 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007a58:	2110      	movs	r1, #16
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f002 f91a 	bl	8009c94 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e028      	b.n	8007ac4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a86:	f043 0210 	orr.w	r2, r3, #16
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e017      	b.n	8007aca <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4a12      	ldr	r2, [pc, #72]	@ (8007ae8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007a9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	8979      	ldrh	r1, [r7, #10]
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f002 f8be 	bl	8009c30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007abc:	2101      	movs	r1, #1
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f002 f8e8 	bl	8009c94 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e000      	b.n	8007aca <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007ac8:	2302      	movs	r3, #2
  }
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	ffff0000 	.word	0xffff0000
 8007ad8:	080086f9 	.word	0x080086f9
 8007adc:	08009727 	.word	0x08009727
 8007ae0:	08009853 	.word	0x08009853
 8007ae4:	80002000 	.word	0x80002000
 8007ae8:	080082bb 	.word	0x080082bb

08007aec <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	461a      	mov	r2, r3
 8007af8:	460b      	mov	r3, r1
 8007afa:	817b      	strh	r3, [r7, #10]
 8007afc:	4613      	mov	r3, r2
 8007afe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	f040 80cd 	bne.w	8007ca8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b1c:	d101      	bne.n	8007b22 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e0c3      	b.n	8007caa <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_I2C_Master_Receive_DMA+0x44>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e0bc      	b.n	8007caa <HAL_I2C_Master_Receive_DMA+0x1be>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2222      	movs	r2, #34	@ 0x22
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2210      	movs	r2, #16
 8007b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	893a      	ldrh	r2, [r7, #8]
 8007b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4a55      	ldr	r2, [pc, #340]	@ (8007cb4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8007b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a55      	ldr	r2, [pc, #340]	@ (8007cb8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8007b64:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2bff      	cmp	r3, #255	@ 0xff
 8007b6e:	d906      	bls.n	8007b7e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	22ff      	movs	r2, #255	@ 0xff
 8007b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007b76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e007      	b.n	8007b8e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b8c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d070      	beq.n	8007c78 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d020      	beq.n	8007be0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba2:	4a46      	ldr	r2, [pc, #280]	@ (8007cbc <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8007ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007baa:	4a45      	ldr	r2, [pc, #276]	@ (8007cc0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8007bac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bba:	2200      	movs	r2, #0
 8007bbc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3324      	adds	r3, #36	@ 0x24
 8007bc8:	4619      	mov	r1, r3
 8007bca:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007bd0:	f7ff f95c 	bl	8006e8c <HAL_DMA_Start_IT>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d138      	bne.n	8007c50 <HAL_I2C_Master_Receive_DMA+0x164>
 8007bde:	e013      	b.n	8007c08 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e050      	b.n	8007caa <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	8979      	ldrh	r1, [r7, #10]
 8007c10:	4b2c      	ldr	r3, [pc, #176]	@ (8007cc4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f002 f80a 	bl	8009c30 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007c36:	2110      	movs	r1, #16
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f002 f82b 	bl	8009c94 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e029      	b.n	8007ca4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c64:	f043 0210 	orr.w	r2, r3, #16
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e018      	b.n	8007caa <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4a13      	ldr	r2, [pc, #76]	@ (8007cc8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8007c7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	8979      	ldrh	r1, [r7, #10]
 8007c86:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f001 ffce 	bl	8009c30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007c9c:	2102      	movs	r1, #2
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 fff8 	bl	8009c94 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e000      	b.n	8007caa <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8007ca8:	2302      	movs	r3, #2
  }
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	ffff0000 	.word	0xffff0000
 8007cb8:	080086f9 	.word	0x080086f9
 8007cbc:	080097bd 	.word	0x080097bd
 8007cc0:	08009853 	.word	0x08009853
 8007cc4:	80002400 	.word	0x80002400
 8007cc8:	080082bb 	.word	0x080082bb

08007ccc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	817b      	strh	r3, [r7, #10]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	813b      	strh	r3, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	f040 80f9 	bne.w	8007ee6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <HAL_I2C_Mem_Write+0x34>
 8007cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d105      	bne.n	8007d0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0ed      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <HAL_I2C_Mem_Write+0x4e>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e0e6      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x21c>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d22:	f7fd f955 	bl	8004fd0 <HAL_GetTick>
 8007d26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	2319      	movs	r3, #25
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f001 fdc1 	bl	80098bc <I2C_WaitOnFlagUntilTimeout>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0d1      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2221      	movs	r2, #33	@ 0x21
 8007d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2240      	movs	r2, #64	@ 0x40
 8007d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a3a      	ldr	r2, [r7, #32]
 8007d5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d6c:	88f8      	ldrh	r0, [r7, #6]
 8007d6e:	893a      	ldrh	r2, [r7, #8]
 8007d70:	8979      	ldrh	r1, [r7, #10]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 ffa3 	bl	8008cc8 <I2C_RequestMemoryWrite>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e0a9      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2bff      	cmp	r3, #255	@ 0xff
 8007d9c:	d90e      	bls.n	8007dbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	22ff      	movs	r2, #255	@ 0xff
 8007da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	8979      	ldrh	r1, [r7, #10]
 8007dac:	2300      	movs	r3, #0
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f001 ff3b 	bl	8009c30 <I2C_TransferConfig>
 8007dba:	e00f      	b.n	8007ddc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	8979      	ldrh	r1, [r7, #10]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f001 ff2a 	bl	8009c30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f001 fdba 	bl	800995a <I2C_WaitOnTXISFlagUntilTimeout>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e07b      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d034      	beq.n	8007e94 <HAL_I2C_Mem_Write+0x1c8>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d130      	bne.n	8007e94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2180      	movs	r1, #128	@ 0x80
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f001 fd3d 	bl	80098bc <I2C_WaitOnFlagUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e04d      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2bff      	cmp	r3, #255	@ 0xff
 8007e54:	d90e      	bls.n	8007e74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	22ff      	movs	r2, #255	@ 0xff
 8007e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	8979      	ldrh	r1, [r7, #10]
 8007e64:	2300      	movs	r3, #0
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f001 fedf 	bl	8009c30 <I2C_TransferConfig>
 8007e72:	e00f      	b.n	8007e94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	8979      	ldrh	r1, [r7, #10]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f001 fece 	bl	8009c30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d19e      	bne.n	8007ddc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f001 fda0 	bl	80099e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e01a      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6859      	ldr	r1, [r3, #4]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef0 <HAL_I2C_Mem_Write+0x224>)
 8007ec6:	400b      	ands	r3, r1
 8007ec8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e000      	b.n	8007ee8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007ee6:	2302      	movs	r3, #2
  }
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	fe00e800 	.word	0xfe00e800

08007ef4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	4608      	mov	r0, r1
 8007efe:	4611      	mov	r1, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	817b      	strh	r3, [r7, #10]
 8007f06:	460b      	mov	r3, r1
 8007f08:	813b      	strh	r3, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	f040 80fd 	bne.w	8008116 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_I2C_Mem_Read+0x34>
 8007f22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d105      	bne.n	8007f34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0f1      	b.n	8008118 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <HAL_I2C_Mem_Read+0x4e>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e0ea      	b.n	8008118 <HAL_I2C_Mem_Read+0x224>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f4a:	f7fd f841 	bl	8004fd0 <HAL_GetTick>
 8007f4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2319      	movs	r3, #25
 8007f56:	2201      	movs	r2, #1
 8007f58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f001 fcad 	bl	80098bc <I2C_WaitOnFlagUntilTimeout>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e0d5      	b.n	8008118 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2222      	movs	r2, #34	@ 0x22
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2240      	movs	r2, #64	@ 0x40
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a3a      	ldr	r2, [r7, #32]
 8007f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f94:	88f8      	ldrh	r0, [r7, #6]
 8007f96:	893a      	ldrh	r2, [r7, #8]
 8007f98:	8979      	ldrh	r1, [r7, #10]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 fee3 	bl	8008d70 <I2C_RequestMemoryRead>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e0ad      	b.n	8008118 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2bff      	cmp	r3, #255	@ 0xff
 8007fc4:	d90e      	bls.n	8007fe4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	22ff      	movs	r2, #255	@ 0xff
 8007fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	8979      	ldrh	r1, [r7, #10]
 8007fd4:	4b52      	ldr	r3, [pc, #328]	@ (8008120 <HAL_I2C_Mem_Read+0x22c>)
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 fe27 	bl	8009c30 <I2C_TransferConfig>
 8007fe2:	e00f      	b.n	8008004 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	8979      	ldrh	r1, [r7, #10]
 8007ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8008120 <HAL_I2C_Mem_Read+0x22c>)
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f001 fe16 	bl	8009c30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800a:	2200      	movs	r2, #0
 800800c:	2104      	movs	r1, #4
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f001 fc54 	bl	80098bc <I2C_WaitOnFlagUntilTimeout>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e07c      	b.n	8008118 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008028:	b2d2      	uxtb	r2, r2
 800802a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008054:	b29b      	uxth	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d034      	beq.n	80080c4 <HAL_I2C_Mem_Read+0x1d0>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800805e:	2b00      	cmp	r3, #0
 8008060:	d130      	bne.n	80080c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	2200      	movs	r2, #0
 800806a:	2180      	movs	r1, #128	@ 0x80
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f001 fc25 	bl	80098bc <I2C_WaitOnFlagUntilTimeout>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e04d      	b.n	8008118 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008080:	b29b      	uxth	r3, r3
 8008082:	2bff      	cmp	r3, #255	@ 0xff
 8008084:	d90e      	bls.n	80080a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	22ff      	movs	r2, #255	@ 0xff
 800808a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008090:	b2da      	uxtb	r2, r3
 8008092:	8979      	ldrh	r1, [r7, #10]
 8008094:	2300      	movs	r3, #0
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f001 fdc7 	bl	8009c30 <I2C_TransferConfig>
 80080a2:	e00f      	b.n	80080c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	8979      	ldrh	r1, [r7, #10]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 fdb6 	bl	8009c30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d19a      	bne.n	8008004 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f001 fc88 	bl	80099e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e01a      	b.n	8008118 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2220      	movs	r2, #32
 80080e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6859      	ldr	r1, [r3, #4]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008124 <HAL_I2C_Mem_Read+0x230>)
 80080f6:	400b      	ands	r3, r1
 80080f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	e000      	b.n	8008118 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008116:	2302      	movs	r3, #2
  }
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	80002400 	.word	0x80002400
 8008124:	fe00e800 	.word	0xfe00e800

08008128 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	68f9      	ldr	r1, [r7, #12]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
  }
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00f      	beq.n	800819e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818c:	f043 0201 	orr.w	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800819c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00f      	beq.n	80081c8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b6:	f043 0208 	orr.w	r2, r3, #8
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80081c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00f      	beq.n	80081f2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e0:	f043 0202 	orr.w	r2, r3, #2
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f003 030b 	and.w	r3, r3, #11
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 f953 	bl	80094b0 <I2C_ITError>
  }
}
 800820a:	bf00      	nop
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
 8008246:	4613      	mov	r3, r2
 8008248:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80082ae:	bf00      	nop
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b088      	sub	sp, #32
 80082be:	af02      	add	r7, sp, #8
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <I2C_Master_ISR_IT+0x1e>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e113      	b.n	8008500 <I2C_Master_ISR_IT+0x246>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f003 0310 	and.w	r3, r3, #16
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d012      	beq.n	8008310 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00d      	beq.n	8008310 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2210      	movs	r2, #16
 80082fa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008300:	f043 0204 	orr.w	r2, r3, #4
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f001 f9e8 	bl	80096de <I2C_Flush_TXDR>
 800830e:	e0e4      	b.n	80084da <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	d022      	beq.n	8008360 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01d      	beq.n	8008360 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f023 0304 	bic.w	r3, r3, #4
 800832a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008348:	3b01      	subs	r3, #1
 800834a:	b29a      	uxth	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800835e:	e0bc      	b.n	80084da <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d128      	bne.n	80083bc <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008370:	2b00      	cmp	r3, #0
 8008372:	d023      	beq.n	80083bc <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01e      	beq.n	80083bc <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80a8 	beq.w	80084da <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80083ba:	e08e      	b.n	80084da <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d05c      	beq.n	8008480 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d057      	beq.n	8008480 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d040      	beq.n	800845c <I2C_Master_ISR_IT+0x1a2>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d13c      	bne.n	800845c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083ee:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2bff      	cmp	r3, #255	@ 0xff
 80083f8:	d90e      	bls.n	8008418 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	22ff      	movs	r2, #255	@ 0xff
 80083fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008404:	b2da      	uxtb	r2, r3
 8008406:	8a79      	ldrh	r1, [r7, #18]
 8008408:	2300      	movs	r3, #0
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f001 fc0d 	bl	8009c30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008416:	e032      	b.n	800847e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800841c:	b29a      	uxth	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008426:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800842a:	d00b      	beq.n	8008444 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008430:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008436:	8a79      	ldrh	r1, [r7, #18]
 8008438:	2000      	movs	r0, #0
 800843a:	9000      	str	r0, [sp, #0]
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f001 fbf7 	bl	8009c30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008442:	e01c      	b.n	800847e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008448:	b2da      	uxtb	r2, r3
 800844a:	8a79      	ldrh	r1, [r7, #18]
 800844c:	2300      	movs	r3, #0
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f001 fbeb 	bl	8009c30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800845a:	e010      	b.n	800847e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800846a:	d003      	beq.n	8008474 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 fd57 	bl	8008f20 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008472:	e032      	b.n	80084da <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008474:	2140      	movs	r1, #64	@ 0x40
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f001 f81a 	bl	80094b0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800847c:	e02d      	b.n	80084da <I2C_Master_ISR_IT+0x220>
 800847e:	e02c      	b.n	80084da <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008486:	2b00      	cmp	r3, #0
 8008488:	d027      	beq.n	80084da <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008490:	2b00      	cmp	r3, #0
 8008492:	d022      	beq.n	80084da <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d119      	bne.n	80084d2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084ac:	d015      	beq.n	80084da <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084b6:	d108      	bne.n	80084ca <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084c6:	605a      	str	r2, [r3, #4]
 80084c8:	e007      	b.n	80084da <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 fd28 	bl	8008f20 <I2C_ITMasterSeqCplt>
 80084d0:	e003      	b.n	80084da <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80084d2:	2140      	movs	r1, #64	@ 0x40
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 ffeb 	bl	80094b0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f003 0320 	and.w	r3, r3, #32
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d008      	beq.n	80084f6 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80084ee:	6979      	ldr	r1, [r7, #20]
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 fdaf 	bl	8009054 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008518:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <I2C_Slave_ISR_IT+0x24>
 8008528:	2302      	movs	r3, #2
 800852a:	e0e1      	b.n	80086f0 <I2C_Slave_ISR_IT+0x1e8>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d008      	beq.n	8008550 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008548:	6939      	ldr	r1, [r7, #16]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fe4a 	bl	80091e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b00      	cmp	r3, #0
 8008558:	d04b      	beq.n	80085f2 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008560:	2b00      	cmp	r3, #0
 8008562:	d046      	beq.n	80085f2 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d128      	bne.n	80085c0 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b28      	cmp	r3, #40	@ 0x28
 8008578:	d108      	bne.n	800858c <I2C_Slave_ISR_IT+0x84>
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008580:	d104      	bne.n	800858c <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008582:	6939      	ldr	r1, [r7, #16]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 ff3f 	bl	8009408 <I2C_ITListenCplt>
 800858a:	e031      	b.n	80085f0 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b29      	cmp	r3, #41	@ 0x29
 8008596:	d10e      	bne.n	80085b6 <I2C_Slave_ISR_IT+0xae>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800859e:	d00a      	beq.n	80085b6 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2210      	movs	r2, #16
 80085a6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f001 f898 	bl	80096de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fcf3 	bl	8008f9a <I2C_ITSlaveSeqCplt>
 80085b4:	e01c      	b.n	80085f0 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2210      	movs	r2, #16
 80085bc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80085be:	e08f      	b.n	80086e0 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2210      	movs	r2, #16
 80085c6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085cc:	f043 0204 	orr.w	r2, r3, #4
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <I2C_Slave_ISR_IT+0xda>
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085e0:	d17e      	bne.n	80086e0 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e6:	4619      	mov	r1, r3
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 ff61 	bl	80094b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80085ee:	e077      	b.n	80086e0 <I2C_Slave_ISR_IT+0x1d8>
 80085f0:	e076      	b.n	80086e0 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d02f      	beq.n	800865c <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008602:	2b00      	cmp	r3, #0
 8008604:	d02a      	beq.n	800865c <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800860a:	b29b      	uxth	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d018      	beq.n	8008642 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861a:	b2d2      	uxtb	r2, r2
 800861c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008638:	b29b      	uxth	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d14b      	bne.n	80086e4 <I2C_Slave_ISR_IT+0x1dc>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008652:	d047      	beq.n	80086e4 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 fca0 	bl	8008f9a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800865a:	e043      	b.n	80086e4 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b00      	cmp	r3, #0
 8008664:	d009      	beq.n	800867a <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800866c:	2b00      	cmp	r3, #0
 800866e:	d004      	beq.n	800867a <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008670:	6939      	ldr	r1, [r7, #16]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fbd0 	bl	8008e18 <I2C_ITAddrCplt>
 8008678:	e035      	b.n	80086e6 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d030      	beq.n	80086e6 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800868a:	2b00      	cmp	r3, #0
 800868c:	d02b      	beq.n	80086e6 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008692:	b29b      	uxth	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d018      	beq.n	80086ca <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80086c8:	e00d      	b.n	80086e6 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086d0:	d002      	beq.n	80086d8 <I2C_Slave_ISR_IT+0x1d0>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fc5e 	bl	8008f9a <I2C_ITSlaveSeqCplt>
 80086de:	e002      	b.n	80086e6 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80086e0:	bf00      	nop
 80086e2:	e000      	b.n	80086e6 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80086e4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <I2C_Master_ISR_DMA+0x1a>
 800870e:	2302      	movs	r3, #2
 8008710:	e0d9      	b.n	80088c6 <I2C_Master_ISR_DMA+0x1ce>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	2b00      	cmp	r3, #0
 8008722:	d016      	beq.n	8008752 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800872a:	2b00      	cmp	r3, #0
 800872c:	d011      	beq.n	8008752 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2210      	movs	r2, #16
 8008734:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800873a:	f043 0204 	orr.w	r2, r3, #4
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008742:	2120      	movs	r1, #32
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f001 faa5 	bl	8009c94 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 ffc7 	bl	80096de <I2C_Flush_TXDR>
 8008750:	e0b4      	b.n	80088bc <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008758:	2b00      	cmp	r3, #0
 800875a:	d071      	beq.n	8008840 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008762:	2b00      	cmp	r3, #0
 8008764:	d06c      	beq.n	8008840 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008774:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d04e      	beq.n	800881e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800878c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008792:	b29b      	uxth	r3, r3
 8008794:	2bff      	cmp	r3, #255	@ 0xff
 8008796:	d906      	bls.n	80087a6 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	22ff      	movs	r2, #255	@ 0xff
 800879c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800879e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	e010      	b.n	80087c8 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087b8:	d003      	beq.n	80087c2 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	617b      	str	r3, [r7, #20]
 80087c0:	e002      	b.n	80087c8 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80087c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80087c6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	8a79      	ldrh	r1, [r7, #18]
 80087d0:	2300      	movs	r3, #0
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f001 fa2a 	bl	8009c30 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b22      	cmp	r3, #34	@ 0x22
 80087f8:	d108      	bne.n	800880c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008808:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800880a:	e057      	b.n	80088bc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800881a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800881c:	e04e      	b.n	80088bc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800882c:	d003      	beq.n	8008836 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fb76 	bl	8008f20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008834:	e042      	b.n	80088bc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008836:	2140      	movs	r1, #64	@ 0x40
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 fe39 	bl	80094b0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800883e:	e03d      	b.n	80088bc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d028      	beq.n	800889c <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008850:	2b00      	cmp	r3, #0
 8008852:	d023      	beq.n	800889c <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d119      	bne.n	8008892 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800886c:	d025      	beq.n	80088ba <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008872:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008876:	d108      	bne.n	800888a <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008886:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008888:	e017      	b.n	80088ba <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 fb48 	bl	8008f20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008890:	e013      	b.n	80088ba <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008892:	2140      	movs	r1, #64	@ 0x40
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fe0b 	bl	80094b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800889a:	e00e      	b.n	80088ba <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 fbce 	bl	8009054 <I2C_ITMasterCplt>
 80088b8:	e000      	b.n	80088bc <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80088ba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80088dc:	4b8d      	ldr	r3, [pc, #564]	@ (8008b14 <I2C_Mem_ISR_DMA+0x244>)
 80088de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d101      	bne.n	80088ee <I2C_Mem_ISR_DMA+0x1e>
 80088ea:	2302      	movs	r3, #2
 80088ec:	e10e      	b.n	8008b0c <I2C_Mem_ISR_DMA+0x23c>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f003 0310 	and.w	r3, r3, #16
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d016      	beq.n	800892e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008906:	2b00      	cmp	r3, #0
 8008908:	d011      	beq.n	800892e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2210      	movs	r2, #16
 8008910:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008916:	f043 0204 	orr.w	r2, r3, #4
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800891e:	2120      	movs	r1, #32
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f001 f9b7 	bl	8009c94 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fed9 	bl	80096de <I2C_Flush_TXDR>
 800892c:	e0e9      	b.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00e      	beq.n	8008956 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800894a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f04f 32ff 	mov.w	r2, #4294967295
 8008952:	651a      	str	r2, [r3, #80]	@ 0x50
 8008954:	e0d5      	b.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800895c:	2b00      	cmp	r3, #0
 800895e:	d05f      	beq.n	8008a20 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008966:	2b00      	cmp	r3, #0
 8008968:	d05a      	beq.n	8008a20 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800896a:	2101      	movs	r1, #1
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f001 fa15 	bl	8009d9c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008972:	2110      	movs	r1, #16
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f001 f98d 	bl	8009c94 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d048      	beq.n	8008a16 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008988:	b29b      	uxth	r3, r3
 800898a:	2bff      	cmp	r3, #255	@ 0xff
 800898c:	d910      	bls.n	80089b0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	22ff      	movs	r2, #255	@ 0xff
 8008992:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008998:	b299      	uxth	r1, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	2300      	movs	r3, #0
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f001 f941 	bl	8009c30 <I2C_TransferConfig>
 80089ae:	e011      	b.n	80089d4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089be:	b299      	uxth	r1, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	2300      	movs	r3, #0
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f001 f92e 	bl	8009c30 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b22      	cmp	r3, #34	@ 0x22
 80089f0:	d108      	bne.n	8008a04 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008a02:	e07e      	b.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a12:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008a14:	e075      	b.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a16:	2140      	movs	r1, #64	@ 0x40
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fd49 	bl	80094b0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008a1e:	e070      	b.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d05d      	beq.n	8008ae6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d058      	beq.n	8008ae6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a34:	2101      	movs	r1, #1
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f001 f9b0 	bl	8009d9c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008a3c:	2110      	movs	r1, #16
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f001 f928 	bl	8009c94 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b22      	cmp	r3, #34	@ 0x22
 8008a4e:	d101      	bne.n	8008a54 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8008a50:	4b31      	ldr	r3, [pc, #196]	@ (8008b18 <I2C_Mem_ISR_DMA+0x248>)
 8008a52:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2bff      	cmp	r3, #255	@ 0xff
 8008a5c:	d910      	bls.n	8008a80 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	22ff      	movs	r2, #255	@ 0xff
 8008a62:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a68:	b299      	uxth	r1, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f001 f8d9 	bl	8009c30 <I2C_TransferConfig>
 8008a7e:	e011      	b.n	8008aa4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a8e:	b299      	uxth	r1, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f001 f8c6 	bl	8009c30 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b22      	cmp	r3, #34	@ 0x22
 8008ac0:	d108      	bne.n	8008ad4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ad0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ad2:	e016      	b.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ae2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ae4:	e00d      	b.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f003 0320 	and.w	r3, r3, #32
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d008      	beq.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 faa9 	bl	8009054 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	80002000 	.word	0x80002000
 8008b18:	80002400 	.word	0x80002400

08008b1c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <I2C_Slave_ISR_DMA+0x24>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e0bf      	b.n	8008cc0 <I2C_Slave_ISR_DMA+0x1a4>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008b5c:	68b9      	ldr	r1, [r7, #8]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 fb40 	bl	80091e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 8095 	beq.w	8008c9a <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 808f 	beq.w	8008c9a <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d104      	bne.n	8008b90 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d07d      	beq.n	8008c8c <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00c      	beq.n	8008bb2 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d007      	beq.n	8008bb2 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d128      	bne.n	8008c2c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b28      	cmp	r3, #40	@ 0x28
 8008be4:	d108      	bne.n	8008bf8 <I2C_Slave_ISR_DMA+0xdc>
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bec:	d104      	bne.n	8008bf8 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 fc09 	bl	8009408 <I2C_ITListenCplt>
 8008bf6:	e048      	b.n	8008c8a <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b29      	cmp	r3, #41	@ 0x29
 8008c02:	d10e      	bne.n	8008c22 <I2C_Slave_ISR_DMA+0x106>
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c0a:	d00a      	beq.n	8008c22 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2210      	movs	r2, #16
 8008c12:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fd62 	bl	80096de <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 f9bd 	bl	8008f9a <I2C_ITSlaveSeqCplt>
 8008c20:	e033      	b.n	8008c8a <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2210      	movs	r2, #16
 8008c28:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008c2a:	e034      	b.n	8008c96 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2210      	movs	r2, #16
 8008c32:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c38:	f043 0204 	orr.w	r2, r3, #4
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c46:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <I2C_Slave_ISR_DMA+0x13a>
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c54:	d11f      	bne.n	8008c96 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	2b21      	cmp	r3, #33	@ 0x21
 8008c5a:	d002      	beq.n	8008c62 <I2C_Slave_ISR_DMA+0x146>
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	2b29      	cmp	r3, #41	@ 0x29
 8008c60:	d103      	bne.n	8008c6a <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2221      	movs	r2, #33	@ 0x21
 8008c66:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c68:	e008      	b.n	8008c7c <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	2b22      	cmp	r3, #34	@ 0x22
 8008c6e:	d002      	beq.n	8008c76 <I2C_Slave_ISR_DMA+0x15a>
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c74:	d102      	bne.n	8008c7c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2222      	movs	r2, #34	@ 0x22
 8008c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c80:	4619      	mov	r1, r3
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fc14 	bl	80094b0 <I2C_ITError>
      if (treatdmanack == 1U)
 8008c88:	e005      	b.n	8008c96 <I2C_Slave_ISR_DMA+0x17a>
 8008c8a:	e004      	b.n	8008c96 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2210      	movs	r2, #16
 8008c92:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c94:	e00f      	b.n	8008cb6 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8008c96:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008c98:	e00d      	b.n	8008cb6 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f003 0308 	and.w	r3, r3, #8
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 f8b1 	bl	8008e18 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3720      	adds	r7, #32
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af02      	add	r7, sp, #8
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	817b      	strh	r3, [r7, #10]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	813b      	strh	r3, [r7, #8]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	8979      	ldrh	r1, [r7, #10]
 8008ce8:	4b20      	ldr	r3, [pc, #128]	@ (8008d6c <I2C_RequestMemoryWrite+0xa4>)
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 ff9d 	bl	8009c30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	69b9      	ldr	r1, [r7, #24]
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 fe2d 	bl	800995a <I2C_WaitOnTXISFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e02c      	b.n	8008d64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d0a:	88fb      	ldrh	r3, [r7, #6]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d105      	bne.n	8008d1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d10:	893b      	ldrh	r3, [r7, #8]
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d1a:	e015      	b.n	8008d48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d1c:	893b      	ldrh	r3, [r7, #8]
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	69b9      	ldr	r1, [r7, #24]
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 fe13 	bl	800995a <I2C_WaitOnTXISFlagUntilTimeout>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e012      	b.n	8008d64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d3e:	893b      	ldrh	r3, [r7, #8]
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2180      	movs	r1, #128	@ 0x80
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fdb2 	bl	80098bc <I2C_WaitOnFlagUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e000      	b.n	8008d64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	80002000 	.word	0x80002000

08008d70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af02      	add	r7, sp, #8
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	4608      	mov	r0, r1
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4603      	mov	r3, r0
 8008d80:	817b      	strh	r3, [r7, #10]
 8008d82:	460b      	mov	r3, r1
 8008d84:	813b      	strh	r3, [r7, #8]
 8008d86:	4613      	mov	r3, r2
 8008d88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d8a:	88fb      	ldrh	r3, [r7, #6]
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	8979      	ldrh	r1, [r7, #10]
 8008d90:	4b20      	ldr	r3, [pc, #128]	@ (8008e14 <I2C_RequestMemoryRead+0xa4>)
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	2300      	movs	r3, #0
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 ff4a 	bl	8009c30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	69b9      	ldr	r1, [r7, #24]
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 fdda 	bl	800995a <I2C_WaitOnTXISFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e02c      	b.n	8008e0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d105      	bne.n	8008dc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008db6:	893b      	ldrh	r3, [r7, #8]
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8008dc0:	e015      	b.n	8008dee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008dc2:	893b      	ldrh	r3, [r7, #8]
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	69b9      	ldr	r1, [r7, #24]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 fdc0 	bl	800995a <I2C_WaitOnTXISFlagUntilTimeout>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e012      	b.n	8008e0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008de4:	893b      	ldrh	r3, [r7, #8]
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2200      	movs	r2, #0
 8008df6:	2140      	movs	r1, #64	@ 0x40
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 fd5f 	bl	80098bc <I2C_WaitOnFlagUntilTimeout>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	80002000 	.word	0x80002000

08008e18 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e2e:	2b28      	cmp	r3, #40	@ 0x28
 8008e30:	d16a      	bne.n	8008f08 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	0c1b      	lsrs	r3, r3, #16
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	0c1b      	lsrs	r3, r3, #16
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008e50:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e5e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008e6c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d138      	bne.n	8008ee8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008e76:	897b      	ldrh	r3, [r7, #10]
 8008e78:	09db      	lsrs	r3, r3, #7
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	89bb      	ldrh	r3, [r7, #12]
 8008e7e:	4053      	eors	r3, r2
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f003 0306 	and.w	r3, r3, #6
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d11c      	bne.n	8008ec4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008e8a:	897b      	ldrh	r3, [r7, #10]
 8008e8c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d13b      	bne.n	8008f18 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2208      	movs	r2, #8
 8008eac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008eb6:	89ba      	ldrh	r2, [r7, #12]
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff f9bc 	bl	800823a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ec2:	e029      	b.n	8008f18 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008ec4:	893b      	ldrh	r3, [r7, #8]
 8008ec6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ec8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 ff65 	bl	8009d9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008eda:	89ba      	ldrh	r2, [r7, #12]
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff f9aa 	bl	800823a <HAL_I2C_AddrCallback>
}
 8008ee6:	e017      	b.n	8008f18 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ee8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 ff55 	bl	8009d9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008efa:	89ba      	ldrh	r2, [r7, #12]
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff f99a 	bl	800823a <HAL_I2C_AddrCallback>
}
 8008f06:	e007      	b.n	8008f18 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b21      	cmp	r3, #33	@ 0x21
 8008f3a:	d115      	bne.n	8008f68 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2211      	movs	r2, #17
 8008f48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f50:	2101      	movs	r1, #1
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 ff22 	bl	8009d9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7fb f923 	bl	80041ac <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f66:	e014      	b.n	8008f92 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2212      	movs	r2, #18
 8008f74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008f7c:	2102      	movs	r1, #2
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 ff0c 	bl	8009d9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7fb f91d 	bl	80041cc <HAL_I2C_MasterRxCpltCallback>
}
 8008f92:	bf00      	nop
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d008      	beq.n	8008fce <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	e00c      	b.n	8008fe8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d007      	beq.n	8008fe8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fe6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b29      	cmp	r3, #41	@ 0x29
 8008ff2:	d112      	bne.n	800901a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2228      	movs	r2, #40	@ 0x28
 8008ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2221      	movs	r2, #33	@ 0x21
 8009000:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009002:	2101      	movs	r1, #1
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fec9 	bl	8009d9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff f8fd 	bl	8008212 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009018:	e017      	b.n	800904a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b2a      	cmp	r3, #42	@ 0x2a
 8009024:	d111      	bne.n	800904a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2228      	movs	r2, #40	@ 0x28
 800902a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2222      	movs	r2, #34	@ 0x22
 8009032:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009034:	2102      	movs	r1, #2
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 feb0 	bl	8009d9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff f8ee 	bl	8008226 <HAL_I2C_SlaveRxCpltCallback>
}
 800904a:	bf00      	nop
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2220      	movs	r2, #32
 8009068:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b21      	cmp	r3, #33	@ 0x21
 8009074:	d107      	bne.n	8009086 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009076:	2101      	movs	r1, #1
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fe8f 	bl	8009d9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2211      	movs	r2, #17
 8009082:	631a      	str	r2, [r3, #48]	@ 0x30
 8009084:	e00c      	b.n	80090a0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b22      	cmp	r3, #34	@ 0x22
 8009090:	d106      	bne.n	80090a0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009092:	2102      	movs	r1, #2
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fe81 	bl	8009d9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2212      	movs	r2, #18
 800909e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6859      	ldr	r1, [r3, #4]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	4b4c      	ldr	r3, [pc, #304]	@ (80091dc <I2C_ITMasterCplt+0x188>)
 80090ac:	400b      	ands	r3, r1
 80090ae:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a49      	ldr	r2, [pc, #292]	@ (80091e0 <I2C_ITMasterCplt+0x18c>)
 80090ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d009      	beq.n	80090da <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2210      	movs	r2, #16
 80090cc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d2:	f043 0204 	orr.w	r2, r3, #4
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b60      	cmp	r3, #96	@ 0x60
 80090e4:	d10a      	bne.n	80090fc <I2C_ITMasterCplt+0xa8>
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80090fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 faee 	bl	80096de <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009106:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b60      	cmp	r3, #96	@ 0x60
 8009112:	d002      	beq.n	800911a <I2C_ITMasterCplt+0xc6>
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d006      	beq.n	8009128 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f9c5 	bl	80094b0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009126:	e054      	b.n	80091d2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b21      	cmp	r3, #33	@ 0x21
 8009132:	d124      	bne.n	800917e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b40      	cmp	r3, #64	@ 0x40
 800914c:	d10b      	bne.n	8009166 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff f883 	bl	800826a <HAL_I2C_MemTxCpltCallback>
}
 8009164:	e035      	b.n	80091d2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7fb f818 	bl	80041ac <HAL_I2C_MasterTxCpltCallback>
}
 800917c:	e029      	b.n	80091d2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b22      	cmp	r3, #34	@ 0x22
 8009188:	d123      	bne.n	80091d2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2220      	movs	r2, #32
 800918e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b40      	cmp	r3, #64	@ 0x40
 80091a2:	d10b      	bne.n	80091bc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff f862 	bl	800827e <HAL_I2C_MemRxCpltCallback>
}
 80091ba:	e00a      	b.n	80091d2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7fa fffd 	bl	80041cc <HAL_I2C_MasterRxCpltCallback>
}
 80091d2:	bf00      	nop
 80091d4:	3718      	adds	r7, #24
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	fe00e800 	.word	0xfe00e800
 80091e0:	ffff0000 	.word	0xffff0000

080091e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009200:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2220      	movs	r2, #32
 8009208:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	2b21      	cmp	r3, #33	@ 0x21
 800920e:	d002      	beq.n	8009216 <I2C_ITSlaveCplt+0x32>
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	2b29      	cmp	r3, #41	@ 0x29
 8009214:	d108      	bne.n	8009228 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009216:	f248 0101 	movw	r1, #32769	@ 0x8001
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fdbe 	bl	8009d9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2221      	movs	r2, #33	@ 0x21
 8009224:	631a      	str	r2, [r3, #48]	@ 0x30
 8009226:	e019      	b.n	800925c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	2b22      	cmp	r3, #34	@ 0x22
 800922c:	d002      	beq.n	8009234 <I2C_ITSlaveCplt+0x50>
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	2b2a      	cmp	r3, #42	@ 0x2a
 8009232:	d108      	bne.n	8009246 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009234:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fdaf 	bl	8009d9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2222      	movs	r2, #34	@ 0x22
 8009242:	631a      	str	r2, [r3, #48]	@ 0x30
 8009244:	e00a      	b.n	800925c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	2b28      	cmp	r3, #40	@ 0x28
 800924a:	d107      	bne.n	800925c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800924c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fda3 	bl	8009d9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800926a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6859      	ldr	r1, [r3, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	4b62      	ldr	r3, [pc, #392]	@ (8009400 <I2C_ITSlaveCplt+0x21c>)
 8009278:	400b      	ands	r3, r1
 800927a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fa2e 	bl	80096de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d013      	beq.n	80092b4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800929a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01f      	beq.n	80092e4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092b2:	e017      	b.n	80092e4 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d012      	beq.n	80092e4 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80092cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d006      	beq.n	80092e4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	b29a      	uxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d020      	beq.n	8009330 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f023 0304 	bic.w	r3, r3, #4
 80092f4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00c      	beq.n	8009330 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931a:	3b01      	subs	r3, #1
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009326:	b29b      	uxth	r3, r3
 8009328:	3b01      	subs	r3, #1
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009334:	b29b      	uxth	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933e:	f043 0204 	orr.w	r2, r3, #4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009358:	2b00      	cmp	r3, #0
 800935a:	d010      	beq.n	800937e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f8a4 	bl	80094b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b28      	cmp	r3, #40	@ 0x28
 8009372:	d141      	bne.n	80093f8 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009374:	6979      	ldr	r1, [r7, #20]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f846 	bl	8009408 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800937c:	e03c      	b.n	80093f8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009382:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009386:	d014      	beq.n	80093b2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fe06 	bl	8008f9a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a1c      	ldr	r2, [pc, #112]	@ (8009404 <I2C_ITSlaveCplt+0x220>)
 8009392:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7fe ff53 	bl	8008256 <HAL_I2C_ListenCpltCallback>
}
 80093b0:	e022      	b.n	80093f8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b22      	cmp	r3, #34	@ 0x22
 80093bc:	d10e      	bne.n	80093dc <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7fe ff26 	bl	8008226 <HAL_I2C_SlaveRxCpltCallback>
}
 80093da:	e00d      	b.n	80093f8 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2220      	movs	r2, #32
 80093e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fe ff0d 	bl	8008212 <HAL_I2C_SlaveTxCpltCallback>
}
 80093f8:	bf00      	nop
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	fe00e800 	.word	0xfe00e800
 8009404:	ffff0000 	.word	0xffff0000

08009408 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a25      	ldr	r2, [pc, #148]	@ (80094ac <I2C_ITListenCplt+0xa4>)
 8009416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	d022      	beq.n	8009484 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800945a:	2b00      	cmp	r3, #0
 800945c:	d012      	beq.n	8009484 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800947c:	f043 0204 	orr.w	r2, r3, #4
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009484:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fc87 	bl	8009d9c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2210      	movs	r2, #16
 8009494:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7fe fed9 	bl	8008256 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	ffff0000 	.word	0xffff0000

080094b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094c0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a6d      	ldr	r2, [pc, #436]	@ (8009684 <I2C_ITError+0x1d4>)
 80094ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2b28      	cmp	r3, #40	@ 0x28
 80094e6:	d005      	beq.n	80094f4 <I2C_ITError+0x44>
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	2b29      	cmp	r3, #41	@ 0x29
 80094ec:	d002      	beq.n	80094f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80094f2:	d10b      	bne.n	800950c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80094f4:	2103      	movs	r1, #3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fc50 	bl	8009d9c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2228      	movs	r2, #40	@ 0x28
 8009500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a60      	ldr	r2, [pc, #384]	@ (8009688 <I2C_ITError+0x1d8>)
 8009508:	635a      	str	r2, [r3, #52]	@ 0x34
 800950a:	e030      	b.n	800956e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800950c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fc43 	bl	8009d9c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f8e1 	bl	80096de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b60      	cmp	r3, #96	@ 0x60
 8009526:	d01f      	beq.n	8009568 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b20      	cmp	r3, #32
 800953c:	d114      	bne.n	8009568 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	2b10      	cmp	r3, #16
 800954a:	d109      	bne.n	8009560 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2210      	movs	r2, #16
 8009552:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009558:	f043 0204 	orr.w	r2, r3, #4
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2220      	movs	r2, #32
 8009566:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009572:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d039      	beq.n	80095f0 <I2C_ITError+0x140>
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b11      	cmp	r3, #17
 8009580:	d002      	beq.n	8009588 <I2C_ITError+0xd8>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b21      	cmp	r3, #33	@ 0x21
 8009586:	d133      	bne.n	80095f0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009596:	d107      	bne.n	80095a8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80095a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd fdfb 	bl	80071a8 <HAL_DMA_GetState>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d017      	beq.n	80095e8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095bc:	4a33      	ldr	r2, [pc, #204]	@ (800968c <I2C_ITError+0x1dc>)
 80095be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fd fcfb 	bl	8006fc8 <HAL_DMA_Abort_IT>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d04d      	beq.n	8009674 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80095e2:	4610      	mov	r0, r2
 80095e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095e6:	e045      	b.n	8009674 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f851 	bl	8009690 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095ee:	e041      	b.n	8009674 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d039      	beq.n	800966c <I2C_ITError+0x1bc>
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b12      	cmp	r3, #18
 80095fc:	d002      	beq.n	8009604 <I2C_ITError+0x154>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b22      	cmp	r3, #34	@ 0x22
 8009602:	d133      	bne.n	800966c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800960e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009612:	d107      	bne.n	8009624 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009622:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009628:	4618      	mov	r0, r3
 800962a:	f7fd fdbd 	bl	80071a8 <HAL_DMA_GetState>
 800962e:	4603      	mov	r3, r0
 8009630:	2b01      	cmp	r3, #1
 8009632:	d017      	beq.n	8009664 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009638:	4a14      	ldr	r2, [pc, #80]	@ (800968c <I2C_ITError+0x1dc>)
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009648:	4618      	mov	r0, r3
 800964a:	f7fd fcbd 	bl	8006fc8 <HAL_DMA_Abort_IT>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d011      	beq.n	8009678 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800965e:	4610      	mov	r0, r2
 8009660:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009662:	e009      	b.n	8009678 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f813 	bl	8009690 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800966a:	e005      	b.n	8009678 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f80f 	bl	8009690 <I2C_TreatErrorCallback>
  }
}
 8009672:	e002      	b.n	800967a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009674:	bf00      	nop
 8009676:	e000      	b.n	800967a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009678:	bf00      	nop
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	ffff0000 	.word	0xffff0000
 8009688:	08008509 	.word	0x08008509
 800968c:	08009881 	.word	0x08009881

08009690 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b60      	cmp	r3, #96	@ 0x60
 80096a2:	d10e      	bne.n	80096c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fe fdf3 	bl	80082a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80096c0:	e009      	b.n	80096d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7fe fdde 	bl	8008292 <HAL_I2C_ErrorCallback>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d103      	bne.n	80096fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2200      	movs	r2, #0
 80096fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b01      	cmp	r3, #1
 8009708:	d007      	beq.n	800971a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	699a      	ldr	r2, [r3, #24]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0201 	orr.w	r2, r2, #1
 8009718:	619a      	str	r2, [r3, #24]
  }
}
 800971a:	bf00      	nop
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009732:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009742:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009748:	b29b      	uxth	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d104      	bne.n	8009758 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800974e:	2120      	movs	r1, #32
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 fa9f 	bl	8009c94 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009756:	e02d      	b.n	80097b4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009760:	441a      	add	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800976a:	b29b      	uxth	r3, r3
 800976c:	2bff      	cmp	r3, #255	@ 0xff
 800976e:	d903      	bls.n	8009778 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	22ff      	movs	r2, #255	@ 0xff
 8009774:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009776:	e004      	b.n	8009782 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	4619      	mov	r1, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3328      	adds	r3, #40	@ 0x28
 8009792:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009798:	f7fd fb78 	bl	8006e8c <HAL_DMA_Start_IT>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d004      	beq.n	80097ac <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80097a2:	2110      	movs	r1, #16
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7ff fe83 	bl	80094b0 <I2C_ITError>
}
 80097aa:	e003      	b.n	80097b4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80097ac:	2140      	movs	r1, #64	@ 0x40
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fa70 	bl	8009c94 <I2C_Enable_IRQ>
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097d8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d104      	bne.n	80097ee <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80097e4:	2120      	movs	r1, #32
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fa54 	bl	8009c94 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80097ec:	e02d      	b.n	800984a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80097f6:	441a      	add	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009800:	b29b      	uxth	r3, r3
 8009802:	2bff      	cmp	r3, #255	@ 0xff
 8009804:	d903      	bls.n	800980e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	22ff      	movs	r2, #255	@ 0xff
 800980a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800980c:	e004      	b.n	8009818 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009812:	b29a      	uxth	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3324      	adds	r3, #36	@ 0x24
 8009822:	4619      	mov	r1, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009828:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800982e:	f7fd fb2d 	bl	8006e8c <HAL_DMA_Start_IT>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d004      	beq.n	8009842 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009838:	2110      	movs	r1, #16
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f7ff fe38 	bl	80094b0 <I2C_ITError>
}
 8009840:	e003      	b.n	800984a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009842:	2140      	movs	r1, #64	@ 0x40
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 fa25 	bl	8009c94 <I2C_Enable_IRQ>
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985e:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800986e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009870:	2110      	movs	r1, #16
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7ff fe1c 	bl	80094b0 <I2C_ITError>
}
 8009878:	bf00      	nop
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989a:	2200      	movs	r2, #0
 800989c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098aa:	2200      	movs	r2, #0
 80098ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff feee 	bl	8009690 <I2C_TreatErrorCallback>
}
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	4613      	mov	r3, r2
 80098ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098cc:	e031      	b.n	8009932 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d4:	d02d      	beq.n	8009932 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d6:	f7fb fb7b 	bl	8004fd0 <HAL_GetTick>
 80098da:	4602      	mov	r2, r0
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d302      	bcc.n	80098ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d122      	bne.n	8009932 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	699a      	ldr	r2, [r3, #24]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	4013      	ands	r3, r2
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	bf0c      	ite	eq
 80098fc:	2301      	moveq	r3, #1
 80098fe:	2300      	movne	r3, #0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	461a      	mov	r2, r3
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	429a      	cmp	r2, r3
 8009908:	d113      	bne.n	8009932 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800990e:	f043 0220 	orr.w	r2, r3, #32
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2220      	movs	r2, #32
 800991a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e00f      	b.n	8009952 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	699a      	ldr	r2, [r3, #24]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4013      	ands	r3, r2
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	429a      	cmp	r2, r3
 8009940:	bf0c      	ite	eq
 8009942:	2301      	moveq	r3, #1
 8009944:	2300      	movne	r3, #0
 8009946:	b2db      	uxtb	r3, r3
 8009948:	461a      	mov	r2, r3
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	429a      	cmp	r2, r3
 800994e:	d0be      	beq.n	80098ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009966:	e033      	b.n	80099d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 f87f 	bl	8009a70 <I2C_IsErrorOccurred>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e031      	b.n	80099e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009982:	d025      	beq.n	80099d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009984:	f7fb fb24 	bl	8004fd0 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	429a      	cmp	r2, r3
 8009992:	d302      	bcc.n	800999a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d11a      	bne.n	80099d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	f003 0302 	and.w	r3, r3, #2
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d013      	beq.n	80099d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ac:	f043 0220 	orr.w	r2, r3, #32
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2220      	movs	r2, #32
 80099b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e007      	b.n	80099e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d1c4      	bne.n	8009968 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099f4:	e02f      	b.n	8009a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68b9      	ldr	r1, [r7, #8]
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 f838 	bl	8009a70 <I2C_IsErrorOccurred>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e02d      	b.n	8009a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a0a:	f7fb fae1 	bl	8004fd0 <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d302      	bcc.n	8009a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d11a      	bne.n	8009a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	d013      	beq.n	8009a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a32:	f043 0220 	orr.w	r2, r3, #32
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e007      	b.n	8009a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	f003 0320 	and.w	r3, r3, #32
 8009a60:	2b20      	cmp	r3, #32
 8009a62:	d1c8      	bne.n	80099f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08a      	sub	sp, #40	@ 0x28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	f003 0310 	and.w	r3, r3, #16
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d068      	beq.n	8009b6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2210      	movs	r2, #16
 8009aa2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009aa4:	e049      	b.n	8009b3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aac:	d045      	beq.n	8009b3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009aae:	f7fb fa8f 	bl	8004fd0 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d302      	bcc.n	8009ac4 <I2C_IsErrorOccurred+0x54>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d13a      	bne.n	8009b3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ace:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ad6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ae6:	d121      	bne.n	8009b2c <I2C_IsErrorOccurred+0xbc>
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aee:	d01d      	beq.n	8009b2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009af0:	7cfb      	ldrb	r3, [r7, #19]
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d01a      	beq.n	8009b2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b06:	f7fb fa63 	bl	8004fd0 <HAL_GetTick>
 8009b0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b0c:	e00e      	b.n	8009b2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b0e:	f7fb fa5f 	bl	8004fd0 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b19      	cmp	r3, #25
 8009b1a:	d907      	bls.n	8009b2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	f043 0320 	orr.w	r3, r3, #32
 8009b22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009b2a:	e006      	b.n	8009b3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	f003 0320 	and.w	r3, r3, #32
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d1e9      	bne.n	8009b0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	d003      	beq.n	8009b50 <I2C_IsErrorOccurred+0xe0>
 8009b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0aa      	beq.n	8009aa6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d103      	bne.n	8009b60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	f043 0304 	orr.w	r3, r3, #4
 8009b66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	f043 0301 	orr.w	r3, r3, #1
 8009b86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00b      	beq.n	8009bba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	f043 0308 	orr.w	r3, r3, #8
 8009ba8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00b      	beq.n	8009bdc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	f043 0302 	orr.w	r3, r3, #2
 8009bca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01c      	beq.n	8009c1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff fd7a 	bl	80096de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6859      	ldr	r1, [r3, #4]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8009c2c <I2C_IsErrorOccurred+0x1bc>)
 8009bf6:	400b      	ands	r3, r1
 8009bf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3728      	adds	r7, #40	@ 0x28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	fe00e800 	.word	0xfe00e800

08009c30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	607b      	str	r3, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	817b      	strh	r3, [r7, #10]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c42:	897b      	ldrh	r3, [r7, #10]
 8009c44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c48:	7a7b      	ldrb	r3, [r7, #9]
 8009c4a:	041b      	lsls	r3, r3, #16
 8009c4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	0d5b      	lsrs	r3, r3, #21
 8009c6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009c6e:	4b08      	ldr	r3, [pc, #32]	@ (8009c90 <I2C_TransferConfig+0x60>)
 8009c70:	430b      	orrs	r3, r1
 8009c72:	43db      	mvns	r3, r3
 8009c74:	ea02 0103 	and.w	r1, r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c82:	bf00      	nop
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	03ff63ff 	.word	0x03ff63ff

08009c94 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ca8:	4a39      	ldr	r2, [pc, #228]	@ (8009d90 <I2C_Enable_IRQ+0xfc>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d032      	beq.n	8009d14 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009cb2:	4a38      	ldr	r2, [pc, #224]	@ (8009d94 <I2C_Enable_IRQ+0x100>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d02d      	beq.n	8009d14 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009cbc:	4a36      	ldr	r2, [pc, #216]	@ (8009d98 <I2C_Enable_IRQ+0x104>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d028      	beq.n	8009d14 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009cc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da03      	bge.n	8009cd2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009cd0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009cd2:	887b      	ldrh	r3, [r7, #2]
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009ce2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009ce4:	887b      	ldrh	r3, [r7, #2]
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009cf4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009cf6:	887b      	ldrh	r3, [r7, #2]
 8009cf8:	2b10      	cmp	r3, #16
 8009cfa:	d103      	bne.n	8009d04 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009d02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009d04:	887b      	ldrh	r3, [r7, #2]
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d133      	bne.n	8009d72 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f043 0320 	orr.w	r3, r3, #32
 8009d10:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009d12:	e02e      	b.n	8009d72 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009d14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	da03      	bge.n	8009d24 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009d22:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d24:	887b      	ldrh	r3, [r7, #2]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009d34:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d36:	887b      	ldrh	r3, [r7, #2]
 8009d38:	f003 0302 	and.w	r3, r3, #2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009d46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009d48:	887b      	ldrh	r3, [r7, #2]
 8009d4a:	2b10      	cmp	r3, #16
 8009d4c:	d103      	bne.n	8009d56 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009d54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009d56:	887b      	ldrh	r3, [r7, #2]
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	d103      	bne.n	8009d64 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009d62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009d64:	887b      	ldrh	r3, [r7, #2]
 8009d66:	2b40      	cmp	r3, #64	@ 0x40
 8009d68:	d103      	bne.n	8009d72 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d70:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6819      	ldr	r1, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	601a      	str	r2, [r3, #0]
}
 8009d82:	bf00      	nop
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	080086f9 	.word	0x080086f9
 8009d94:	08008b1d 	.word	0x08008b1d
 8009d98:	080088d1 	.word	0x080088d1

08009d9c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009dac:	887b      	ldrh	r3, [r7, #2]
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00f      	beq.n	8009dd6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009dbc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009dca:	2b28      	cmp	r3, #40	@ 0x28
 8009dcc:	d003      	beq.n	8009dd6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009dd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009dd6:	887b      	ldrh	r3, [r7, #2]
 8009dd8:	f003 0302 	and.w	r3, r3, #2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00f      	beq.n	8009e00 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009de6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009df4:	2b28      	cmp	r3, #40	@ 0x28
 8009df6:	d003      	beq.n	8009e00 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009dfe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009e00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	da03      	bge.n	8009e10 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009e0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009e10:	887b      	ldrh	r3, [r7, #2]
 8009e12:	2b10      	cmp	r3, #16
 8009e14:	d103      	bne.n	8009e1e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009e1c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e1e:	887b      	ldrh	r3, [r7, #2]
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d103      	bne.n	8009e2c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f043 0320 	orr.w	r3, r3, #32
 8009e2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009e2c:	887b      	ldrh	r3, [r7, #2]
 8009e2e:	2b40      	cmp	r3, #64	@ 0x40
 8009e30:	d103      	bne.n	8009e3a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e38:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6819      	ldr	r1, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	43da      	mvns	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	400a      	ands	r2, r1
 8009e4a:	601a      	str	r2, [r3, #0]
}
 8009e4c:	bf00      	nop
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b20      	cmp	r3, #32
 8009e6c:	d138      	bne.n	8009ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e032      	b.n	8009ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2224      	movs	r2, #36	@ 0x24
 8009e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f022 0201 	bic.w	r2, r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6819      	ldr	r1, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0201 	orr.w	r2, r2, #1
 8009eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	e000      	b.n	8009ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ee0:	2302      	movs	r3, #2
  }
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b20      	cmp	r3, #32
 8009f02:	d139      	bne.n	8009f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d101      	bne.n	8009f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e033      	b.n	8009f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2224      	movs	r2, #36	@ 0x24
 8009f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f022 0201 	bic.w	r2, r2, #1
 8009f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	e000      	b.n	8009f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f78:	2302      	movs	r3, #2
  }
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e038      	b.n	800a00a <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8009fa0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f245 5255 	movw	r2, #21845	@ 0x5555
 8009faa:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	6852      	ldr	r2, [r2, #4]
 8009fb4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	6892      	ldr	r2, [r2, #8]
 8009fbe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009fc0:	f7fb f806 	bl	8004fd0 <HAL_GetTick>
 8009fc4:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8009fc6:	e008      	b.n	8009fda <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009fc8:	f7fb f802 	bl	8004fd0 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	2b30      	cmp	r3, #48	@ 0x30
 8009fd4:	d901      	bls.n	8009fda <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e017      	b.n	800a00a <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1f1      	bne.n	8009fc8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d005      	beq.n	8009ffe <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	68d2      	ldr	r2, [r2, #12]
 8009ffa:	611a      	str	r2, [r3, #16]
 8009ffc:	e004      	b.n	800a008 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800a006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a012:	b480      	push	{r7}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800a022:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
	...

0800a034 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10c      	bne.n	800a060 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a046:	4b13      	ldr	r3, [pc, #76]	@ (800a094 <HAL_PWR_EnterSLEEPMode+0x60>)
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a04e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a052:	d10e      	bne.n	800a072 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800a054:	f000 f896 	bl	800a184 <HAL_PWREx_DisableLowPowerRunMode>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800a05e:	e016      	b.n	800a08e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800a060:	4b0c      	ldr	r3, [pc, #48]	@ (800a094 <HAL_PWR_EnterSLEEPMode+0x60>)
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a06c:	d001      	beq.n	800a072 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800a06e:	f000 f879 	bl	800a164 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a072:	4b09      	ldr	r3, [pc, #36]	@ (800a098 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	4a08      	ldr	r2, [pc, #32]	@ (800a098 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a078:	f023 0304 	bic.w	r3, r3, #4
 800a07c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d101      	bne.n	800a088 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800a084:	bf30      	wfi
 800a086:	e002      	b.n	800a08e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a088:	bf40      	sev
    __WFE();
 800a08a:	bf20      	wfe
    __WFE();
 800a08c:	bf20      	wfe
  }

}
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	40007000 	.word	0x40007000
 800a098:	e000ed00 	.word	0xe000ed00

0800a09c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a0a0:	4b04      	ldr	r3, [pc, #16]	@ (800a0b4 <HAL_PWREx_GetVoltageRange+0x18>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	40007000 	.word	0x40007000

0800a0b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c6:	d130      	bne.n	800a12a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0c8:	4b23      	ldr	r3, [pc, #140]	@ (800a158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a0d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d4:	d038      	beq.n	800a148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a0d6:	4b20      	ldr	r3, [pc, #128]	@ (800a158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a0de:	4a1e      	ldr	r2, [pc, #120]	@ (800a158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a0e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	@ (800a15c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2232      	movs	r2, #50	@ 0x32
 800a0ec:	fb02 f303 	mul.w	r3, r2, r3
 800a0f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f6:	0c9b      	lsrs	r3, r3, #18
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0fc:	e002      	b.n	800a104 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3b01      	subs	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a104:	4b14      	ldr	r3, [pc, #80]	@ (800a158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a10c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a110:	d102      	bne.n	800a118 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1f2      	bne.n	800a0fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a118:	4b0f      	ldr	r3, [pc, #60]	@ (800a158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a124:	d110      	bne.n	800a148 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e00f      	b.n	800a14a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a12a:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a136:	d007      	beq.n	800a148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a138:	4b07      	ldr	r3, [pc, #28]	@ (800a158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a140:	4a05      	ldr	r2, [pc, #20]	@ (800a158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a146:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	40007000 	.word	0x40007000
 800a15c:	20000434 	.word	0x20000434
 800a160:	431bde83 	.word	0x431bde83

0800a164 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a168:	4b05      	ldr	r3, [pc, #20]	@ (800a180 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a04      	ldr	r2, [pc, #16]	@ (800a180 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a16e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a172:	6013      	str	r3, [r2, #0]
}
 800a174:	bf00      	nop
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	40007000 	.word	0x40007000

0800a184 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a18a:	4b17      	ldr	r3, [pc, #92]	@ (800a1e8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a16      	ldr	r2, [pc, #88]	@ (800a1e8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a190:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a194:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a196:	4b15      	ldr	r3, [pc, #84]	@ (800a1ec <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2232      	movs	r2, #50	@ 0x32
 800a19c:	fb02 f303 	mul.w	r3, r2, r3
 800a1a0:	4a13      	ldr	r2, [pc, #76]	@ (800a1f0 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a6:	0c9b      	lsrs	r3, r3, #18
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a1ac:	e002      	b.n	800a1b4 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a1b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1c0:	d102      	bne.n	800a1c8 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1f2      	bne.n	800a1ae <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a1c8:	4b07      	ldr	r3, [pc, #28]	@ (800a1e8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1d4:	d101      	bne.n	800a1da <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	e000      	b.n	800a1dc <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	40007000 	.word	0x40007000
 800a1ec:	20000434 	.word	0x20000434
 800a1f0:	431bde83 	.word	0x431bde83

0800a1f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b088      	sub	sp, #32
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d102      	bne.n	800a208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	f000 bc08 	b.w	800aa18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a208:	4b96      	ldr	r3, [pc, #600]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	f003 030c 	and.w	r3, r3, #12
 800a210:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a212:	4b94      	ldr	r3, [pc, #592]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0310 	and.w	r3, r3, #16
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 80e4 	beq.w	800a3f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <HAL_RCC_OscConfig+0x4c>
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	2b0c      	cmp	r3, #12
 800a234:	f040 808b 	bne.w	800a34e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	f040 8087 	bne.w	800a34e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a240:	4b88      	ldr	r3, [pc, #544]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d005      	beq.n	800a258 <HAL_RCC_OscConfig+0x64>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e3df      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1a      	ldr	r2, [r3, #32]
 800a25c:	4b81      	ldr	r3, [pc, #516]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0308 	and.w	r3, r3, #8
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <HAL_RCC_OscConfig+0x7e>
 800a268:	4b7e      	ldr	r3, [pc, #504]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a270:	e005      	b.n	800a27e <HAL_RCC_OscConfig+0x8a>
 800a272:	4b7c      	ldr	r3, [pc, #496]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a278:	091b      	lsrs	r3, r3, #4
 800a27a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a27e:	4293      	cmp	r3, r2
 800a280:	d223      	bcs.n	800a2ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fd92 	bl	800adb0 <RCC_SetFlashLatencyFromMSIRange>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e3c0      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a296:	4b73      	ldr	r3, [pc, #460]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a72      	ldr	r2, [pc, #456]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a29c:	f043 0308 	orr.w	r3, r3, #8
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	4b70      	ldr	r3, [pc, #448]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	496d      	ldr	r1, [pc, #436]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a2b4:	4b6b      	ldr	r3, [pc, #428]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	021b      	lsls	r3, r3, #8
 800a2c2:	4968      	ldr	r1, [pc, #416]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	604b      	str	r3, [r1, #4]
 800a2c8:	e025      	b.n	800a316 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a2ca:	4b66      	ldr	r3, [pc, #408]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a65      	ldr	r2, [pc, #404]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2d0:	f043 0308 	orr.w	r3, r3, #8
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	4b63      	ldr	r3, [pc, #396]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	4960      	ldr	r1, [pc, #384]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a2e8:	4b5e      	ldr	r3, [pc, #376]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	495b      	ldr	r1, [pc, #364]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d109      	bne.n	800a316 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fd52 	bl	800adb0 <RCC_SetFlashLatencyFromMSIRange>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e380      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a316:	f000 fc87 	bl	800ac28 <HAL_RCC_GetSysClockFreq>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b51      	ldr	r3, [pc, #324]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	091b      	lsrs	r3, r3, #4
 800a322:	f003 030f 	and.w	r3, r3, #15
 800a326:	4950      	ldr	r1, [pc, #320]	@ (800a468 <HAL_RCC_OscConfig+0x274>)
 800a328:	5ccb      	ldrb	r3, [r1, r3]
 800a32a:	f003 031f 	and.w	r3, r3, #31
 800a32e:	fa22 f303 	lsr.w	r3, r2, r3
 800a332:	4a4e      	ldr	r2, [pc, #312]	@ (800a46c <HAL_RCC_OscConfig+0x278>)
 800a334:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a336:	4b4e      	ldr	r3, [pc, #312]	@ (800a470 <HAL_RCC_OscConfig+0x27c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fa fdf8 	bl	8004f30 <HAL_InitTick>
 800a340:	4603      	mov	r3, r0
 800a342:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d052      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	e364      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d032      	beq.n	800a3bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a356:	4b43      	ldr	r3, [pc, #268]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a42      	ldr	r2, [pc, #264]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a35c:	f043 0301 	orr.w	r3, r3, #1
 800a360:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a362:	f7fa fe35 	bl	8004fd0 <HAL_GetTick>
 800a366:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a368:	e008      	b.n	800a37c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a36a:	f7fa fe31 	bl	8004fd0 <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	2b02      	cmp	r3, #2
 800a376:	d901      	bls.n	800a37c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e34d      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a37c:	4b39      	ldr	r3, [pc, #228]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0302 	and.w	r3, r3, #2
 800a384:	2b00      	cmp	r3, #0
 800a386:	d0f0      	beq.n	800a36a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a388:	4b36      	ldr	r3, [pc, #216]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a35      	ldr	r2, [pc, #212]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a38e:	f043 0308 	orr.w	r3, r3, #8
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	4b33      	ldr	r3, [pc, #204]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	4930      	ldr	r1, [pc, #192]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a3a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	492b      	ldr	r1, [pc, #172]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	604b      	str	r3, [r1, #4]
 800a3ba:	e01a      	b.n	800a3f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a3bc:	4b29      	ldr	r3, [pc, #164]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a28      	ldr	r2, [pc, #160]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a3c2:	f023 0301 	bic.w	r3, r3, #1
 800a3c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a3c8:	f7fa fe02 	bl	8004fd0 <HAL_GetTick>
 800a3cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a3ce:	e008      	b.n	800a3e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a3d0:	f7fa fdfe 	bl	8004fd0 <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d901      	bls.n	800a3e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e31a      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a3e2:	4b20      	ldr	r3, [pc, #128]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 0302 	and.w	r3, r3, #2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1f0      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x1dc>
 800a3ee:	e000      	b.n	800a3f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a3f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d073      	beq.n	800a4e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	2b08      	cmp	r3, #8
 800a402:	d005      	beq.n	800a410 <HAL_RCC_OscConfig+0x21c>
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	2b0c      	cmp	r3, #12
 800a408:	d10e      	bne.n	800a428 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d10b      	bne.n	800a428 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a410:	4b14      	ldr	r3, [pc, #80]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d063      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x2f0>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d15f      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e2f7      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a430:	d106      	bne.n	800a440 <HAL_RCC_OscConfig+0x24c>
 800a432:	4b0c      	ldr	r3, [pc, #48]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a0b      	ldr	r2, [pc, #44]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	e025      	b.n	800a48c <HAL_RCC_OscConfig+0x298>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a448:	d114      	bne.n	800a474 <HAL_RCC_OscConfig+0x280>
 800a44a:	4b06      	ldr	r3, [pc, #24]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a05      	ldr	r2, [pc, #20]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	4b03      	ldr	r3, [pc, #12]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a02      	ldr	r2, [pc, #8]	@ (800a464 <HAL_RCC_OscConfig+0x270>)
 800a45c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	e013      	b.n	800a48c <HAL_RCC_OscConfig+0x298>
 800a464:	40021000 	.word	0x40021000
 800a468:	0800d650 	.word	0x0800d650
 800a46c:	20000434 	.word	0x20000434
 800a470:	20000438 	.word	0x20000438
 800a474:	4ba0      	ldr	r3, [pc, #640]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a9f      	ldr	r2, [pc, #636]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a47a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	4b9d      	ldr	r3, [pc, #628]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a9c      	ldr	r2, [pc, #624]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a48a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d013      	beq.n	800a4bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a494:	f7fa fd9c 	bl	8004fd0 <HAL_GetTick>
 800a498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a49a:	e008      	b.n	800a4ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a49c:	f7fa fd98 	bl	8004fd0 <HAL_GetTick>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	2b64      	cmp	r3, #100	@ 0x64
 800a4a8:	d901      	bls.n	800a4ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e2b4      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4ae:	4b92      	ldr	r3, [pc, #584]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d0f0      	beq.n	800a49c <HAL_RCC_OscConfig+0x2a8>
 800a4ba:	e014      	b.n	800a4e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4bc:	f7fa fd88 	bl	8004fd0 <HAL_GetTick>
 800a4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4c4:	f7fa fd84 	bl	8004fd0 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b64      	cmp	r3, #100	@ 0x64
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e2a0      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a4d6:	4b88      	ldr	r3, [pc, #544]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1f0      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x2d0>
 800a4e2:	e000      	b.n	800a4e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d060      	beq.n	800a5b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d005      	beq.n	800a504 <HAL_RCC_OscConfig+0x310>
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	2b0c      	cmp	r3, #12
 800a4fc:	d119      	bne.n	800a532 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d116      	bne.n	800a532 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a504:	4b7c      	ldr	r3, [pc, #496]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d005      	beq.n	800a51c <HAL_RCC_OscConfig+0x328>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e27d      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a51c:	4b76      	ldr	r3, [pc, #472]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	061b      	lsls	r3, r3, #24
 800a52a:	4973      	ldr	r1, [pc, #460]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a530:	e040      	b.n	800a5b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d023      	beq.n	800a582 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a53a:	4b6f      	ldr	r3, [pc, #444]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a6e      	ldr	r2, [pc, #440]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a546:	f7fa fd43 	bl	8004fd0 <HAL_GetTick>
 800a54a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a54c:	e008      	b.n	800a560 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a54e:	f7fa fd3f 	bl	8004fd0 <HAL_GetTick>
 800a552:	4602      	mov	r2, r0
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d901      	bls.n	800a560 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e25b      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a560:	4b65      	ldr	r3, [pc, #404]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0f0      	beq.n	800a54e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a56c:	4b62      	ldr	r3, [pc, #392]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	061b      	lsls	r3, r3, #24
 800a57a:	495f      	ldr	r1, [pc, #380]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a57c:	4313      	orrs	r3, r2
 800a57e:	604b      	str	r3, [r1, #4]
 800a580:	e018      	b.n	800a5b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a582:	4b5d      	ldr	r3, [pc, #372]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a5c      	ldr	r2, [pc, #368]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a58c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58e:	f7fa fd1f 	bl	8004fd0 <HAL_GetTick>
 800a592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a594:	e008      	b.n	800a5a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a596:	f7fa fd1b 	bl	8004fd0 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d901      	bls.n	800a5a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e237      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a5a8:	4b53      	ldr	r3, [pc, #332]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1f0      	bne.n	800a596 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f003 0308 	and.w	r3, r3, #8
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d03c      	beq.n	800a63a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	695b      	ldr	r3, [r3, #20]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d01c      	beq.n	800a602 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5c8:	4b4b      	ldr	r3, [pc, #300]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a5ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5ce:	4a4a      	ldr	r2, [pc, #296]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a5d0:	f043 0301 	orr.w	r3, r3, #1
 800a5d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5d8:	f7fa fcfa 	bl	8004fd0 <HAL_GetTick>
 800a5dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a5de:	e008      	b.n	800a5f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5e0:	f7fa fcf6 	bl	8004fd0 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d901      	bls.n	800a5f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e212      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a5f2:	4b41      	ldr	r3, [pc, #260]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5f8:	f003 0302 	and.w	r3, r3, #2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0ef      	beq.n	800a5e0 <HAL_RCC_OscConfig+0x3ec>
 800a600:	e01b      	b.n	800a63a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a602:	4b3d      	ldr	r3, [pc, #244]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a608:	4a3b      	ldr	r2, [pc, #236]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a60a:	f023 0301 	bic.w	r3, r3, #1
 800a60e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a612:	f7fa fcdd 	bl	8004fd0 <HAL_GetTick>
 800a616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a618:	e008      	b.n	800a62c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a61a:	f7fa fcd9 	bl	8004fd0 <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	2b02      	cmp	r3, #2
 800a626:	d901      	bls.n	800a62c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e1f5      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a62c:	4b32      	ldr	r3, [pc, #200]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a62e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1ef      	bne.n	800a61a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 80a6 	beq.w	800a794 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a648:	2300      	movs	r3, #0
 800a64a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a64c:	4b2a      	ldr	r3, [pc, #168]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a64e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10d      	bne.n	800a674 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a658:	4b27      	ldr	r3, [pc, #156]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a65a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a65c:	4a26      	ldr	r2, [pc, #152]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a65e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a662:	6593      	str	r3, [r2, #88]	@ 0x58
 800a664:	4b24      	ldr	r3, [pc, #144]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a66c:	60bb      	str	r3, [r7, #8]
 800a66e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a670:	2301      	movs	r3, #1
 800a672:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a674:	4b21      	ldr	r3, [pc, #132]	@ (800a6fc <HAL_RCC_OscConfig+0x508>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d118      	bne.n	800a6b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a680:	4b1e      	ldr	r3, [pc, #120]	@ (800a6fc <HAL_RCC_OscConfig+0x508>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a1d      	ldr	r2, [pc, #116]	@ (800a6fc <HAL_RCC_OscConfig+0x508>)
 800a686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a68a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a68c:	f7fa fca0 	bl	8004fd0 <HAL_GetTick>
 800a690:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a692:	e008      	b.n	800a6a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a694:	f7fa fc9c 	bl	8004fd0 <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d901      	bls.n	800a6a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e1b8      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6a6:	4b15      	ldr	r3, [pc, #84]	@ (800a6fc <HAL_RCC_OscConfig+0x508>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d0f0      	beq.n	800a694 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d108      	bne.n	800a6cc <HAL_RCC_OscConfig+0x4d8>
 800a6ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6c0:	4a0d      	ldr	r2, [pc, #52]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a6c2:	f043 0301 	orr.w	r3, r3, #1
 800a6c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a6ca:	e029      	b.n	800a720 <HAL_RCC_OscConfig+0x52c>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	2b05      	cmp	r3, #5
 800a6d2:	d115      	bne.n	800a700 <HAL_RCC_OscConfig+0x50c>
 800a6d4:	4b08      	ldr	r3, [pc, #32]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6da:	4a07      	ldr	r2, [pc, #28]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a6dc:	f043 0304 	orr.w	r3, r3, #4
 800a6e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a6e4:	4b04      	ldr	r3, [pc, #16]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ea:	4a03      	ldr	r2, [pc, #12]	@ (800a6f8 <HAL_RCC_OscConfig+0x504>)
 800a6ec:	f043 0301 	orr.w	r3, r3, #1
 800a6f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a6f4:	e014      	b.n	800a720 <HAL_RCC_OscConfig+0x52c>
 800a6f6:	bf00      	nop
 800a6f8:	40021000 	.word	0x40021000
 800a6fc:	40007000 	.word	0x40007000
 800a700:	4b9d      	ldr	r3, [pc, #628]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a706:	4a9c      	ldr	r2, [pc, #624]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a708:	f023 0301 	bic.w	r3, r3, #1
 800a70c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a710:	4b99      	ldr	r3, [pc, #612]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a716:	4a98      	ldr	r2, [pc, #608]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a718:	f023 0304 	bic.w	r3, r3, #4
 800a71c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d016      	beq.n	800a756 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a728:	f7fa fc52 	bl	8004fd0 <HAL_GetTick>
 800a72c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a72e:	e00a      	b.n	800a746 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a730:	f7fa fc4e 	bl	8004fd0 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a73e:	4293      	cmp	r3, r2
 800a740:	d901      	bls.n	800a746 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e168      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a746:	4b8c      	ldr	r3, [pc, #560]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d0ed      	beq.n	800a730 <HAL_RCC_OscConfig+0x53c>
 800a754:	e015      	b.n	800a782 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a756:	f7fa fc3b 	bl	8004fd0 <HAL_GetTick>
 800a75a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a75c:	e00a      	b.n	800a774 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a75e:	f7fa fc37 	bl	8004fd0 <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d901      	bls.n	800a774 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e151      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a774:	4b80      	ldr	r3, [pc, #512]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1ed      	bne.n	800a75e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a782:	7ffb      	ldrb	r3, [r7, #31]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d105      	bne.n	800a794 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a788:	4b7b      	ldr	r3, [pc, #492]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a78a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a78c:	4a7a      	ldr	r2, [pc, #488]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a78e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a792:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0320 	and.w	r3, r3, #32
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d03c      	beq.n	800a81a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01c      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a7a8:	4b73      	ldr	r3, [pc, #460]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a7aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a7ae:	4a72      	ldr	r2, [pc, #456]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a7b0:	f043 0301 	orr.w	r3, r3, #1
 800a7b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7b8:	f7fa fc0a 	bl	8004fd0 <HAL_GetTick>
 800a7bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a7be:	e008      	b.n	800a7d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7c0:	f7fa fc06 	bl	8004fd0 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d901      	bls.n	800a7d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e122      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a7d2:	4b69      	ldr	r3, [pc, #420]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a7d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0ef      	beq.n	800a7c0 <HAL_RCC_OscConfig+0x5cc>
 800a7e0:	e01b      	b.n	800a81a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a7e2:	4b65      	ldr	r3, [pc, #404]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a7e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a7e8:	4a63      	ldr	r2, [pc, #396]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a7ea:	f023 0301 	bic.w	r3, r3, #1
 800a7ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7f2:	f7fa fbed 	bl	8004fd0 <HAL_GetTick>
 800a7f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a7f8:	e008      	b.n	800a80c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7fa:	f7fa fbe9 	bl	8004fd0 <HAL_GetTick>
 800a7fe:	4602      	mov	r2, r0
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b02      	cmp	r3, #2
 800a806:	d901      	bls.n	800a80c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e105      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a80c:	4b5a      	ldr	r3, [pc, #360]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a80e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1ef      	bne.n	800a7fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 80f9 	beq.w	800aa16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a828:	2b02      	cmp	r3, #2
 800a82a:	f040 80cf 	bne.w	800a9cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a82e:	4b52      	ldr	r3, [pc, #328]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f003 0203 	and.w	r2, r3, #3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83e:	429a      	cmp	r2, r3
 800a840:	d12c      	bne.n	800a89c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a84c:	3b01      	subs	r3, #1
 800a84e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a850:	429a      	cmp	r2, r3
 800a852:	d123      	bne.n	800a89c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a860:	429a      	cmp	r2, r3
 800a862:	d11b      	bne.n	800a89c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a870:	429a      	cmp	r2, r3
 800a872:	d113      	bne.n	800a89c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	3b01      	subs	r3, #1
 800a882:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a884:	429a      	cmp	r2, r3
 800a886:	d109      	bne.n	800a89c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a892:	085b      	lsrs	r3, r3, #1
 800a894:	3b01      	subs	r3, #1
 800a896:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a898:	429a      	cmp	r2, r3
 800a89a:	d071      	beq.n	800a980 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	2b0c      	cmp	r3, #12
 800a8a0:	d068      	beq.n	800a974 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a8a2:	4b35      	ldr	r3, [pc, #212]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d105      	bne.n	800a8ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a8ae:	4b32      	ldr	r3, [pc, #200]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e0ac      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a8be:	4b2e      	ldr	r3, [pc, #184]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a2d      	ldr	r2, [pc, #180]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a8c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a8ca:	f7fa fb81 	bl	8004fd0 <HAL_GetTick>
 800a8ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8d0:	e008      	b.n	800a8e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8d2:	f7fa fb7d 	bl	8004fd0 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d901      	bls.n	800a8e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e099      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8e4:	4b24      	ldr	r3, [pc, #144]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1f0      	bne.n	800a8d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8f0:	4b21      	ldr	r3, [pc, #132]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	4b21      	ldr	r3, [pc, #132]	@ (800a97c <HAL_RCC_OscConfig+0x788>)
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a900:	3a01      	subs	r2, #1
 800a902:	0112      	lsls	r2, r2, #4
 800a904:	4311      	orrs	r1, r2
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a90a:	0212      	lsls	r2, r2, #8
 800a90c:	4311      	orrs	r1, r2
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a912:	0852      	lsrs	r2, r2, #1
 800a914:	3a01      	subs	r2, #1
 800a916:	0552      	lsls	r2, r2, #21
 800a918:	4311      	orrs	r1, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a91e:	0852      	lsrs	r2, r2, #1
 800a920:	3a01      	subs	r2, #1
 800a922:	0652      	lsls	r2, r2, #25
 800a924:	4311      	orrs	r1, r2
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a92a:	06d2      	lsls	r2, r2, #27
 800a92c:	430a      	orrs	r2, r1
 800a92e:	4912      	ldr	r1, [pc, #72]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a930:	4313      	orrs	r3, r2
 800a932:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a934:	4b10      	ldr	r3, [pc, #64]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a0f      	ldr	r2, [pc, #60]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a93a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a93e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a940:	4b0d      	ldr	r3, [pc, #52]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	4a0c      	ldr	r2, [pc, #48]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a94a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a94c:	f7fa fb40 	bl	8004fd0 <HAL_GetTick>
 800a950:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a954:	f7fa fb3c 	bl	8004fd0 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e058      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a966:	4b04      	ldr	r3, [pc, #16]	@ (800a978 <HAL_RCC_OscConfig+0x784>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0f0      	beq.n	800a954 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a972:	e050      	b.n	800aa16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e04f      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
 800a978:	40021000 	.word	0x40021000
 800a97c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a980:	4b27      	ldr	r3, [pc, #156]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d144      	bne.n	800aa16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a98c:	4b24      	ldr	r3, [pc, #144]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a23      	ldr	r2, [pc, #140]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a996:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a998:	4b21      	ldr	r3, [pc, #132]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	4a20      	ldr	r2, [pc, #128]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a99e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a9a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a9a4:	f7fa fb14 	bl	8004fd0 <HAL_GetTick>
 800a9a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9aa:	e008      	b.n	800a9be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9ac:	f7fa fb10 	bl	8004fd0 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d901      	bls.n	800a9be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e02c      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9be:	4b18      	ldr	r3, [pc, #96]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0f0      	beq.n	800a9ac <HAL_RCC_OscConfig+0x7b8>
 800a9ca:	e024      	b.n	800aa16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	2b0c      	cmp	r3, #12
 800a9d0:	d01f      	beq.n	800aa12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9d2:	4b13      	ldr	r3, [pc, #76]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a12      	ldr	r2, [pc, #72]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a9d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9de:	f7fa faf7 	bl	8004fd0 <HAL_GetTick>
 800a9e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9e4:	e008      	b.n	800a9f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9e6:	f7fa faf3 	bl	8004fd0 <HAL_GetTick>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d901      	bls.n	800a9f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e00f      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9f8:	4b09      	ldr	r3, [pc, #36]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1f0      	bne.n	800a9e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800aa04:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800aa06:	68da      	ldr	r2, [r3, #12]
 800aa08:	4905      	ldr	r1, [pc, #20]	@ (800aa20 <HAL_RCC_OscConfig+0x82c>)
 800aa0a:	4b06      	ldr	r3, [pc, #24]	@ (800aa24 <HAL_RCC_OscConfig+0x830>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	60cb      	str	r3, [r1, #12]
 800aa10:	e001      	b.n	800aa16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e000      	b.n	800aa18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3720      	adds	r7, #32
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	40021000 	.word	0x40021000
 800aa24:	feeefffc 	.word	0xfeeefffc

0800aa28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e0e7      	b.n	800ac0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa3c:	4b75      	ldr	r3, [pc, #468]	@ (800ac14 <HAL_RCC_ClockConfig+0x1ec>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 0307 	and.w	r3, r3, #7
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d910      	bls.n	800aa6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa4a:	4b72      	ldr	r3, [pc, #456]	@ (800ac14 <HAL_RCC_ClockConfig+0x1ec>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f023 0207 	bic.w	r2, r3, #7
 800aa52:	4970      	ldr	r1, [pc, #448]	@ (800ac14 <HAL_RCC_ClockConfig+0x1ec>)
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa5a:	4b6e      	ldr	r3, [pc, #440]	@ (800ac14 <HAL_RCC_ClockConfig+0x1ec>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d001      	beq.n	800aa6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e0cf      	b.n	800ac0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0302 	and.w	r3, r3, #2
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d010      	beq.n	800aa9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	4b66      	ldr	r3, [pc, #408]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d908      	bls.n	800aa9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa88:	4b63      	ldr	r3, [pc, #396]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	4960      	ldr	r1, [pc, #384]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d04c      	beq.n	800ab40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d107      	bne.n	800aabe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aaae:	4b5a      	ldr	r3, [pc, #360]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d121      	bne.n	800aafe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e0a6      	b.n	800ac0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d107      	bne.n	800aad6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aac6:	4b54      	ldr	r3, [pc, #336]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d115      	bne.n	800aafe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e09a      	b.n	800ac0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d107      	bne.n	800aaee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aade:	4b4e      	ldr	r3, [pc, #312]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d109      	bne.n	800aafe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e08e      	b.n	800ac0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aaee:	4b4a      	ldr	r3, [pc, #296]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e086      	b.n	800ac0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aafe:	4b46      	ldr	r3, [pc, #280]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	f023 0203 	bic.w	r2, r3, #3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	4943      	ldr	r1, [pc, #268]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab10:	f7fa fa5e 	bl	8004fd0 <HAL_GetTick>
 800ab14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab16:	e00a      	b.n	800ab2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab18:	f7fa fa5a 	bl	8004fd0 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d901      	bls.n	800ab2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e06e      	b.n	800ac0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab2e:	4b3a      	ldr	r3, [pc, #232]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 020c 	and.w	r2, r3, #12
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d1eb      	bne.n	800ab18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d010      	beq.n	800ab6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689a      	ldr	r2, [r3, #8]
 800ab50:	4b31      	ldr	r3, [pc, #196]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d208      	bcs.n	800ab6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab5c:	4b2e      	ldr	r3, [pc, #184]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	492b      	ldr	r1, [pc, #172]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab6e:	4b29      	ldr	r3, [pc, #164]	@ (800ac14 <HAL_RCC_ClockConfig+0x1ec>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d210      	bcs.n	800ab9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab7c:	4b25      	ldr	r3, [pc, #148]	@ (800ac14 <HAL_RCC_ClockConfig+0x1ec>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f023 0207 	bic.w	r2, r3, #7
 800ab84:	4923      	ldr	r1, [pc, #140]	@ (800ac14 <HAL_RCC_ClockConfig+0x1ec>)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab8c:	4b21      	ldr	r3, [pc, #132]	@ (800ac14 <HAL_RCC_ClockConfig+0x1ec>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 0307 	and.w	r3, r3, #7
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d001      	beq.n	800ab9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e036      	b.n	800ac0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0304 	and.w	r3, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d008      	beq.n	800abbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800abaa:	4b1b      	ldr	r3, [pc, #108]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	4918      	ldr	r1, [pc, #96]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0308 	and.w	r3, r3, #8
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d009      	beq.n	800abdc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800abc8:	4b13      	ldr	r3, [pc, #76]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	4910      	ldr	r1, [pc, #64]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800abdc:	f000 f824 	bl	800ac28 <HAL_RCC_GetSysClockFreq>
 800abe0:	4602      	mov	r2, r0
 800abe2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <HAL_RCC_ClockConfig+0x1f0>)
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	091b      	lsrs	r3, r3, #4
 800abe8:	f003 030f 	and.w	r3, r3, #15
 800abec:	490b      	ldr	r1, [pc, #44]	@ (800ac1c <HAL_RCC_ClockConfig+0x1f4>)
 800abee:	5ccb      	ldrb	r3, [r1, r3]
 800abf0:	f003 031f 	and.w	r3, r3, #31
 800abf4:	fa22 f303 	lsr.w	r3, r2, r3
 800abf8:	4a09      	ldr	r2, [pc, #36]	@ (800ac20 <HAL_RCC_ClockConfig+0x1f8>)
 800abfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800abfc:	4b09      	ldr	r3, [pc, #36]	@ (800ac24 <HAL_RCC_ClockConfig+0x1fc>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fa f995 	bl	8004f30 <HAL_InitTick>
 800ac06:	4603      	mov	r3, r0
 800ac08:	72fb      	strb	r3, [r7, #11]

  return status;
 800ac0a:	7afb      	ldrb	r3, [r7, #11]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	40022000 	.word	0x40022000
 800ac18:	40021000 	.word	0x40021000
 800ac1c:	0800d650 	.word	0x0800d650
 800ac20:	20000434 	.word	0x20000434
 800ac24:	20000438 	.word	0x20000438

0800ac28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b089      	sub	sp, #36	@ 0x24
 800ac2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61fb      	str	r3, [r7, #28]
 800ac32:	2300      	movs	r3, #0
 800ac34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac36:	4b3e      	ldr	r3, [pc, #248]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	f003 030c 	and.w	r3, r3, #12
 800ac3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac40:	4b3b      	ldr	r3, [pc, #236]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f003 0303 	and.w	r3, r3, #3
 800ac48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d005      	beq.n	800ac5c <HAL_RCC_GetSysClockFreq+0x34>
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	2b0c      	cmp	r3, #12
 800ac54:	d121      	bne.n	800ac9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d11e      	bne.n	800ac9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ac5c:	4b34      	ldr	r3, [pc, #208]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0308 	and.w	r3, r3, #8
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d107      	bne.n	800ac78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ac68:	4b31      	ldr	r3, [pc, #196]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac6e:	0a1b      	lsrs	r3, r3, #8
 800ac70:	f003 030f 	and.w	r3, r3, #15
 800ac74:	61fb      	str	r3, [r7, #28]
 800ac76:	e005      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ac78:	4b2d      	ldr	r3, [pc, #180]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	091b      	lsrs	r3, r3, #4
 800ac7e:	f003 030f 	and.w	r3, r3, #15
 800ac82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ac84:	4a2b      	ldr	r2, [pc, #172]	@ (800ad34 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10d      	bne.n	800acb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ac98:	e00a      	b.n	800acb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d102      	bne.n	800aca6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aca0:	4b25      	ldr	r3, [pc, #148]	@ (800ad38 <HAL_RCC_GetSysClockFreq+0x110>)
 800aca2:	61bb      	str	r3, [r7, #24]
 800aca4:	e004      	b.n	800acb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d101      	bne.n	800acb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800acac:	4b23      	ldr	r3, [pc, #140]	@ (800ad3c <HAL_RCC_GetSysClockFreq+0x114>)
 800acae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	2b0c      	cmp	r3, #12
 800acb4:	d134      	bne.n	800ad20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800acb6:	4b1e      	ldr	r3, [pc, #120]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d003      	beq.n	800acce <HAL_RCC_GetSysClockFreq+0xa6>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b03      	cmp	r3, #3
 800acca:	d003      	beq.n	800acd4 <HAL_RCC_GetSysClockFreq+0xac>
 800accc:	e005      	b.n	800acda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800acce:	4b1a      	ldr	r3, [pc, #104]	@ (800ad38 <HAL_RCC_GetSysClockFreq+0x110>)
 800acd0:	617b      	str	r3, [r7, #20]
      break;
 800acd2:	e005      	b.n	800ace0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800acd4:	4b19      	ldr	r3, [pc, #100]	@ (800ad3c <HAL_RCC_GetSysClockFreq+0x114>)
 800acd6:	617b      	str	r3, [r7, #20]
      break;
 800acd8:	e002      	b.n	800ace0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	617b      	str	r3, [r7, #20]
      break;
 800acde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ace0:	4b13      	ldr	r3, [pc, #76]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	091b      	lsrs	r3, r3, #4
 800ace6:	f003 0307 	and.w	r3, r3, #7
 800acea:	3301      	adds	r3, #1
 800acec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800acee:	4b10      	ldr	r3, [pc, #64]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	0a1b      	lsrs	r3, r3, #8
 800acf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	fb03 f202 	mul.w	r2, r3, r2
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad06:	4b0a      	ldr	r3, [pc, #40]	@ (800ad30 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	0e5b      	lsrs	r3, r3, #25
 800ad0c:	f003 0303 	and.w	r3, r3, #3
 800ad10:	3301      	adds	r3, #1
 800ad12:	005b      	lsls	r3, r3, #1
 800ad14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ad20:	69bb      	ldr	r3, [r7, #24]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3724      	adds	r7, #36	@ 0x24
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	40021000 	.word	0x40021000
 800ad34:	0800d668 	.word	0x0800d668
 800ad38:	00f42400 	.word	0x00f42400
 800ad3c:	007a1200 	.word	0x007a1200

0800ad40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad44:	4b03      	ldr	r3, [pc, #12]	@ (800ad54 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad46:	681b      	ldr	r3, [r3, #0]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	20000434 	.word	0x20000434

0800ad58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ad5c:	f7ff fff0 	bl	800ad40 <HAL_RCC_GetHCLKFreq>
 800ad60:	4602      	mov	r2, r0
 800ad62:	4b06      	ldr	r3, [pc, #24]	@ (800ad7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	0a1b      	lsrs	r3, r3, #8
 800ad68:	f003 0307 	and.w	r3, r3, #7
 800ad6c:	4904      	ldr	r1, [pc, #16]	@ (800ad80 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad6e:	5ccb      	ldrb	r3, [r1, r3]
 800ad70:	f003 031f 	and.w	r3, r3, #31
 800ad74:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	40021000 	.word	0x40021000
 800ad80:	0800d660 	.word	0x0800d660

0800ad84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ad88:	f7ff ffda 	bl	800ad40 <HAL_RCC_GetHCLKFreq>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	4b06      	ldr	r3, [pc, #24]	@ (800ada8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	0adb      	lsrs	r3, r3, #11
 800ad94:	f003 0307 	and.w	r3, r3, #7
 800ad98:	4904      	ldr	r1, [pc, #16]	@ (800adac <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad9a:	5ccb      	ldrb	r3, [r1, r3]
 800ad9c:	f003 031f 	and.w	r3, r3, #31
 800ada0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	40021000 	.word	0x40021000
 800adac:	0800d660 	.word	0x0800d660

0800adb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800adb8:	2300      	movs	r3, #0
 800adba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800adbc:	4b2a      	ldr	r3, [pc, #168]	@ (800ae68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800adbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800adc8:	f7ff f968 	bl	800a09c <HAL_PWREx_GetVoltageRange>
 800adcc:	6178      	str	r0, [r7, #20]
 800adce:	e014      	b.n	800adfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800add0:	4b25      	ldr	r3, [pc, #148]	@ (800ae68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800add2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800add4:	4a24      	ldr	r2, [pc, #144]	@ (800ae68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800add6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adda:	6593      	str	r3, [r2, #88]	@ 0x58
 800addc:	4b22      	ldr	r3, [pc, #136]	@ (800ae68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800adde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ade0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ade4:	60fb      	str	r3, [r7, #12]
 800ade6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ade8:	f7ff f958 	bl	800a09c <HAL_PWREx_GetVoltageRange>
 800adec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800adee:	4b1e      	ldr	r3, [pc, #120]	@ (800ae68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800adf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adf2:	4a1d      	ldr	r2, [pc, #116]	@ (800ae68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800adf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adf8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae00:	d10b      	bne.n	800ae1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b80      	cmp	r3, #128	@ 0x80
 800ae06:	d919      	bls.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2ba0      	cmp	r3, #160	@ 0xa0
 800ae0c:	d902      	bls.n	800ae14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ae0e:	2302      	movs	r3, #2
 800ae10:	613b      	str	r3, [r7, #16]
 800ae12:	e013      	b.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ae14:	2301      	movs	r3, #1
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	e010      	b.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b80      	cmp	r3, #128	@ 0x80
 800ae1e:	d902      	bls.n	800ae26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ae20:	2303      	movs	r3, #3
 800ae22:	613b      	str	r3, [r7, #16]
 800ae24:	e00a      	b.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b80      	cmp	r3, #128	@ 0x80
 800ae2a:	d102      	bne.n	800ae32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	e004      	b.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b70      	cmp	r3, #112	@ 0x70
 800ae36:	d101      	bne.n	800ae3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ae38:	2301      	movs	r3, #1
 800ae3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ae3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f023 0207 	bic.w	r2, r3, #7
 800ae44:	4909      	ldr	r1, [pc, #36]	@ (800ae6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ae4c:	4b07      	ldr	r3, [pc, #28]	@ (800ae6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0307 	and.w	r3, r3, #7
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d001      	beq.n	800ae5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e000      	b.n	800ae60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	40021000 	.word	0x40021000
 800ae6c:	40022000 	.word	0x40022000

0800ae70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae78:	2300      	movs	r3, #0
 800ae7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d041      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae94:	d02a      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ae96:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae9a:	d824      	bhi.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aea0:	d008      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800aea2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aea6:	d81e      	bhi.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00a      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800aeac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aeb0:	d010      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aeb2:	e018      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aeb4:	4b86      	ldr	r3, [pc, #536]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	4a85      	ldr	r2, [pc, #532]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aeba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aebe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800aec0:	e015      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3304      	adds	r3, #4
 800aec6:	2100      	movs	r1, #0
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 facd 	bl	800b468 <RCCEx_PLLSAI1_Config>
 800aece:	4603      	mov	r3, r0
 800aed0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800aed2:	e00c      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	3320      	adds	r3, #32
 800aed8:	2100      	movs	r1, #0
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fbb6 	bl	800b64c <RCCEx_PLLSAI2_Config>
 800aee0:	4603      	mov	r3, r0
 800aee2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800aee4:	e003      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	74fb      	strb	r3, [r7, #19]
      break;
 800aeea:	e000      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aeec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeee:	7cfb      	ldrb	r3, [r7, #19]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10b      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aef4:	4b76      	ldr	r3, [pc, #472]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aefa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af02:	4973      	ldr	r1, [pc, #460]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af04:	4313      	orrs	r3, r2
 800af06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800af0a:	e001      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0c:	7cfb      	ldrb	r3, [r7, #19]
 800af0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d041      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af24:	d02a      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800af26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af2a:	d824      	bhi.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800af2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af30:	d008      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800af32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af36:	d81e      	bhi.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00a      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800af3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af40:	d010      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800af42:	e018      	b.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800af44:	4b62      	ldr	r3, [pc, #392]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	4a61      	ldr	r2, [pc, #388]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800af50:	e015      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3304      	adds	r3, #4
 800af56:	2100      	movs	r1, #0
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 fa85 	bl	800b468 <RCCEx_PLLSAI1_Config>
 800af5e:	4603      	mov	r3, r0
 800af60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800af62:	e00c      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3320      	adds	r3, #32
 800af68:	2100      	movs	r1, #0
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fb6e 	bl	800b64c <RCCEx_PLLSAI2_Config>
 800af70:	4603      	mov	r3, r0
 800af72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800af74:	e003      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	74fb      	strb	r3, [r7, #19]
      break;
 800af7a:	e000      	b.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800af7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af7e:	7cfb      	ldrb	r3, [r7, #19]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10b      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800af84:	4b52      	ldr	r3, [pc, #328]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af92:	494f      	ldr	r1, [pc, #316]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800af94:	4313      	orrs	r3, r2
 800af96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800af9a:	e001      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9c:	7cfb      	ldrb	r3, [r7, #19]
 800af9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 80a0 	beq.w	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afae:	2300      	movs	r3, #0
 800afb0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800afb2:	4b47      	ldr	r3, [pc, #284]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e000      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800afc2:	2300      	movs	r3, #0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00d      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afc8:	4b41      	ldr	r3, [pc, #260]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afcc:	4a40      	ldr	r2, [pc, #256]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afd2:	6593      	str	r3, [r2, #88]	@ 0x58
 800afd4:	4b3e      	ldr	r3, [pc, #248]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afdc:	60bb      	str	r3, [r7, #8]
 800afde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800afe0:	2301      	movs	r3, #1
 800afe2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afe4:	4b3b      	ldr	r3, [pc, #236]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a3a      	ldr	r2, [pc, #232]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800afea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aff0:	f7f9 ffee 	bl	8004fd0 <HAL_GetTick>
 800aff4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aff6:	e009      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aff8:	f7f9 ffea 	bl	8004fd0 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	2b02      	cmp	r3, #2
 800b004:	d902      	bls.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	74fb      	strb	r3, [r7, #19]
        break;
 800b00a:	e005      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b00c:	4b31      	ldr	r3, [pc, #196]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0ef      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b018:	7cfb      	ldrb	r3, [r7, #19]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d15c      	bne.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b01e:	4b2c      	ldr	r3, [pc, #176]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b028:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d01f      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d019      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b03c:	4b24      	ldr	r3, [pc, #144]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b046:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b048:	4b21      	ldr	r3, [pc, #132]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b04e:	4a20      	ldr	r2, [pc, #128]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b058:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b05e:	4a1c      	ldr	r2, [pc, #112]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b068:	4a19      	ldr	r2, [pc, #100]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	2b00      	cmp	r3, #0
 800b078:	d016      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b07a:	f7f9 ffa9 	bl	8004fd0 <HAL_GetTick>
 800b07e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b080:	e00b      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b082:	f7f9 ffa5 	bl	8004fd0 <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b090:	4293      	cmp	r3, r2
 800b092:	d902      	bls.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	74fb      	strb	r3, [r7, #19]
            break;
 800b098:	e006      	b.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b09a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a0:	f003 0302 	and.w	r3, r3, #2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0ec      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b0a8:	7cfb      	ldrb	r3, [r7, #19]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10c      	bne.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0ae:	4b08      	ldr	r3, [pc, #32]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0be:	4904      	ldr	r1, [pc, #16]	@ (800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b0c6:	e009      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0c8:	7cfb      	ldrb	r3, [r7, #19]
 800b0ca:	74bb      	strb	r3, [r7, #18]
 800b0cc:	e006      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b0ce:	bf00      	nop
 800b0d0:	40021000 	.word	0x40021000
 800b0d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d8:	7cfb      	ldrb	r3, [r7, #19]
 800b0da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b0dc:	7c7b      	ldrb	r3, [r7, #17]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d105      	bne.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0e2:	4ba6      	ldr	r3, [pc, #664]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0e6:	4aa5      	ldr	r2, [pc, #660]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b0fa:	4ba0      	ldr	r3, [pc, #640]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b100:	f023 0203 	bic.w	r2, r3, #3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b108:	499c      	ldr	r1, [pc, #624]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0302 	and.w	r3, r3, #2
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00a      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b11c:	4b97      	ldr	r3, [pc, #604]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b122:	f023 020c 	bic.w	r2, r3, #12
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b12a:	4994      	ldr	r1, [pc, #592]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b12c:	4313      	orrs	r3, r2
 800b12e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b13e:	4b8f      	ldr	r3, [pc, #572]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b144:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b14c:	498b      	ldr	r1, [pc, #556]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0308 	and.w	r3, r3, #8
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00a      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b160:	4b86      	ldr	r3, [pc, #536]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b166:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b16e:	4983      	ldr	r1, [pc, #524]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b170:	4313      	orrs	r3, r2
 800b172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0310 	and.w	r3, r3, #16
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00a      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b182:	4b7e      	ldr	r3, [pc, #504]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b190:	497a      	ldr	r1, [pc, #488]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b192:	4313      	orrs	r3, r2
 800b194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0320 	and.w	r3, r3, #32
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00a      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1a4:	4b75      	ldr	r3, [pc, #468]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1b2:	4972      	ldr	r1, [pc, #456]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00a      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b1c6:	4b6d      	ldr	r3, [pc, #436]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1d4:	4969      	ldr	r1, [pc, #420]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00a      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b1e8:	4b64      	ldr	r3, [pc, #400]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1f6:	4961      	ldr	r1, [pc, #388]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00a      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b20a:	4b5c      	ldr	r3, [pc, #368]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b210:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b218:	4958      	ldr	r1, [pc, #352]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b21a:	4313      	orrs	r3, r2
 800b21c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00a      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b22c:	4b53      	ldr	r3, [pc, #332]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b232:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b23a:	4950      	ldr	r1, [pc, #320]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b23c:	4313      	orrs	r3, r2
 800b23e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b24e:	4b4b      	ldr	r3, [pc, #300]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b254:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b25c:	4947      	ldr	r1, [pc, #284]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b25e:	4313      	orrs	r3, r2
 800b260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00a      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b270:	4b42      	ldr	r3, [pc, #264]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b276:	f023 0203 	bic.w	r2, r3, #3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b27e:	493f      	ldr	r1, [pc, #252]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b280:	4313      	orrs	r3, r2
 800b282:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d028      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b292:	4b3a      	ldr	r3, [pc, #232]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b298:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2a0:	4936      	ldr	r1, [pc, #216]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2b0:	d106      	bne.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2b2:	4b32      	ldr	r3, [pc, #200]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	4a31      	ldr	r2, [pc, #196]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2bc:	60d3      	str	r3, [r2, #12]
 800b2be:	e011      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2c8:	d10c      	bne.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f8c9 	bl	800b468 <RCCEx_PLLSAI1_Config>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b2da:	7cfb      	ldrb	r3, [r7, #19]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800b2e0:	7cfb      	ldrb	r3, [r7, #19]
 800b2e2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d028      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b2f0:	4b22      	ldr	r3, [pc, #136]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2fe:	491f      	ldr	r1, [pc, #124]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b300:	4313      	orrs	r3, r2
 800b302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b30a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b30e:	d106      	bne.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b310:	4b1a      	ldr	r3, [pc, #104]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	4a19      	ldr	r2, [pc, #100]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b31a:	60d3      	str	r3, [r2, #12]
 800b31c:	e011      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b322:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b326:	d10c      	bne.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	2101      	movs	r1, #1
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f89a 	bl	800b468 <RCCEx_PLLSAI1_Config>
 800b334:	4603      	mov	r3, r0
 800b336:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b338:	7cfb      	ldrb	r3, [r7, #19]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800b33e:	7cfb      	ldrb	r3, [r7, #19]
 800b340:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d02a      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b34e:	4b0b      	ldr	r3, [pc, #44]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b354:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b35c:	4907      	ldr	r1, [pc, #28]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b36c:	d108      	bne.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b36e:	4b03      	ldr	r3, [pc, #12]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	4a02      	ldr	r2, [pc, #8]	@ (800b37c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b374:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b378:	60d3      	str	r3, [r2, #12]
 800b37a:	e013      	b.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800b37c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b388:	d10c      	bne.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3304      	adds	r3, #4
 800b38e:	2101      	movs	r1, #1
 800b390:	4618      	mov	r0, r3
 800b392:	f000 f869 	bl	800b468 <RCCEx_PLLSAI1_Config>
 800b396:	4603      	mov	r3, r0
 800b398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b39a:	7cfb      	ldrb	r3, [r7, #19]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800b3a0:	7cfb      	ldrb	r3, [r7, #19]
 800b3a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d02f      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b3b0:	4b2c      	ldr	r3, [pc, #176]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3be:	4929      	ldr	r1, [pc, #164]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3ce:	d10d      	bne.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	2102      	movs	r1, #2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 f846 	bl	800b468 <RCCEx_PLLSAI1_Config>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b3e0:	7cfb      	ldrb	r3, [r7, #19]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d014      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b3e6:	7cfb      	ldrb	r3, [r7, #19]
 800b3e8:	74bb      	strb	r3, [r7, #18]
 800b3ea:	e011      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3f4:	d10c      	bne.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3320      	adds	r3, #32
 800b3fa:	2102      	movs	r1, #2
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 f925 	bl	800b64c <RCCEx_PLLSAI2_Config>
 800b402:	4603      	mov	r3, r0
 800b404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b406:	7cfb      	ldrb	r3, [r7, #19]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b40c:	7cfb      	ldrb	r3, [r7, #19]
 800b40e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00b      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b41c:	4b11      	ldr	r3, [pc, #68]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b422:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b42c:	490d      	ldr	r1, [pc, #52]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00b      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b440:	4b08      	ldr	r3, [pc, #32]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b446:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b450:	4904      	ldr	r1, [pc, #16]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b452:	4313      	orrs	r3, r2
 800b454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b458:	7cbb      	ldrb	r3, [r7, #18]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	40021000 	.word	0x40021000

0800b468 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b476:	4b74      	ldr	r3, [pc, #464]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	f003 0303 	and.w	r3, r3, #3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d018      	beq.n	800b4b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b482:	4b71      	ldr	r3, [pc, #452]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f003 0203 	and.w	r2, r3, #3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d10d      	bne.n	800b4ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
       ||
 800b496:	2b00      	cmp	r3, #0
 800b498:	d009      	beq.n	800b4ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b49a:	4b6b      	ldr	r3, [pc, #428]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	091b      	lsrs	r3, r3, #4
 800b4a0:	f003 0307 	and.w	r3, r3, #7
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
       ||
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d047      	beq.n	800b53e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	73fb      	strb	r3, [r7, #15]
 800b4b2:	e044      	b.n	800b53e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d018      	beq.n	800b4ee <RCCEx_PLLSAI1_Config+0x86>
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d825      	bhi.n	800b50c <RCCEx_PLLSAI1_Config+0xa4>
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d002      	beq.n	800b4ca <RCCEx_PLLSAI1_Config+0x62>
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d009      	beq.n	800b4dc <RCCEx_PLLSAI1_Config+0x74>
 800b4c8:	e020      	b.n	800b50c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b4ca:	4b5f      	ldr	r3, [pc, #380]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0302 	and.w	r3, r3, #2
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d11d      	bne.n	800b512 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4da:	e01a      	b.n	800b512 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b4dc:	4b5a      	ldr	r3, [pc, #360]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d116      	bne.n	800b516 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4ec:	e013      	b.n	800b516 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b4ee:	4b56      	ldr	r3, [pc, #344]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10f      	bne.n	800b51a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b4fa:	4b53      	ldr	r3, [pc, #332]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d109      	bne.n	800b51a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b50a:	e006      	b.n	800b51a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	73fb      	strb	r3, [r7, #15]
      break;
 800b510:	e004      	b.n	800b51c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b512:	bf00      	nop
 800b514:	e002      	b.n	800b51c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b516:	bf00      	nop
 800b518:	e000      	b.n	800b51c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b51a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10d      	bne.n	800b53e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b522:	4b49      	ldr	r3, [pc, #292]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6819      	ldr	r1, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	3b01      	subs	r3, #1
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	430b      	orrs	r3, r1
 800b538:	4943      	ldr	r1, [pc, #268]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b53a:	4313      	orrs	r3, r2
 800b53c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d17c      	bne.n	800b63e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b544:	4b40      	ldr	r3, [pc, #256]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a3f      	ldr	r2, [pc, #252]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b54a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b54e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b550:	f7f9 fd3e 	bl	8004fd0 <HAL_GetTick>
 800b554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b556:	e009      	b.n	800b56c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b558:	f7f9 fd3a 	bl	8004fd0 <HAL_GetTick>
 800b55c:	4602      	mov	r2, r0
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	2b02      	cmp	r3, #2
 800b564:	d902      	bls.n	800b56c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	73fb      	strb	r3, [r7, #15]
        break;
 800b56a:	e005      	b.n	800b578 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b56c:	4b36      	ldr	r3, [pc, #216]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1ef      	bne.n	800b558 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d15f      	bne.n	800b63e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d110      	bne.n	800b5a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b584:	4b30      	ldr	r3, [pc, #192]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b58c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	6892      	ldr	r2, [r2, #8]
 800b594:	0211      	lsls	r1, r2, #8
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68d2      	ldr	r2, [r2, #12]
 800b59a:	06d2      	lsls	r2, r2, #27
 800b59c:	430a      	orrs	r2, r1
 800b59e:	492a      	ldr	r1, [pc, #168]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	610b      	str	r3, [r1, #16]
 800b5a4:	e027      	b.n	800b5f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d112      	bne.n	800b5d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5ac:	4b26      	ldr	r3, [pc, #152]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b5b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	6892      	ldr	r2, [r2, #8]
 800b5bc:	0211      	lsls	r1, r2, #8
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	6912      	ldr	r2, [r2, #16]
 800b5c2:	0852      	lsrs	r2, r2, #1
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	0552      	lsls	r2, r2, #21
 800b5c8:	430a      	orrs	r2, r1
 800b5ca:	491f      	ldr	r1, [pc, #124]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	610b      	str	r3, [r1, #16]
 800b5d0:	e011      	b.n	800b5f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5d2:	4b1d      	ldr	r3, [pc, #116]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b5da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6892      	ldr	r2, [r2, #8]
 800b5e2:	0211      	lsls	r1, r2, #8
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	6952      	ldr	r2, [r2, #20]
 800b5e8:	0852      	lsrs	r2, r2, #1
 800b5ea:	3a01      	subs	r2, #1
 800b5ec:	0652      	lsls	r2, r2, #25
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	4915      	ldr	r1, [pc, #84]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b5f6:	4b14      	ldr	r3, [pc, #80]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a13      	ldr	r2, [pc, #76]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b600:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b602:	f7f9 fce5 	bl	8004fd0 <HAL_GetTick>
 800b606:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b608:	e009      	b.n	800b61e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b60a:	f7f9 fce1 	bl	8004fd0 <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	2b02      	cmp	r3, #2
 800b616:	d902      	bls.n	800b61e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	73fb      	strb	r3, [r7, #15]
          break;
 800b61c:	e005      	b.n	800b62a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b61e:	4b0a      	ldr	r3, [pc, #40]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d0ef      	beq.n	800b60a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d106      	bne.n	800b63e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b630:	4b05      	ldr	r3, [pc, #20]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	4903      	ldr	r1, [pc, #12]	@ (800b648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b63a:	4313      	orrs	r3, r2
 800b63c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	40021000 	.word	0x40021000

0800b64c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b65a:	4b69      	ldr	r3, [pc, #420]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	f003 0303 	and.w	r3, r3, #3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d018      	beq.n	800b698 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b666:	4b66      	ldr	r3, [pc, #408]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f003 0203 	and.w	r2, r3, #3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	429a      	cmp	r2, r3
 800b674:	d10d      	bne.n	800b692 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
       ||
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d009      	beq.n	800b692 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b67e:	4b60      	ldr	r3, [pc, #384]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	091b      	lsrs	r3, r3, #4
 800b684:	f003 0307 	and.w	r3, r3, #7
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	685b      	ldr	r3, [r3, #4]
       ||
 800b68e:	429a      	cmp	r2, r3
 800b690:	d047      	beq.n	800b722 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	73fb      	strb	r3, [r7, #15]
 800b696:	e044      	b.n	800b722 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d018      	beq.n	800b6d2 <RCCEx_PLLSAI2_Config+0x86>
 800b6a0:	2b03      	cmp	r3, #3
 800b6a2:	d825      	bhi.n	800b6f0 <RCCEx_PLLSAI2_Config+0xa4>
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d002      	beq.n	800b6ae <RCCEx_PLLSAI2_Config+0x62>
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d009      	beq.n	800b6c0 <RCCEx_PLLSAI2_Config+0x74>
 800b6ac:	e020      	b.n	800b6f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b6ae:	4b54      	ldr	r3, [pc, #336]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d11d      	bne.n	800b6f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6be:	e01a      	b.n	800b6f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b6c0:	4b4f      	ldr	r3, [pc, #316]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d116      	bne.n	800b6fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6d0:	e013      	b.n	800b6fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b6d2:	4b4b      	ldr	r3, [pc, #300]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10f      	bne.n	800b6fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b6de:	4b48      	ldr	r3, [pc, #288]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d109      	bne.n	800b6fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b6ee:	e006      	b.n	800b6fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f4:	e004      	b.n	800b700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b6f6:	bf00      	nop
 800b6f8:	e002      	b.n	800b700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b6fa:	bf00      	nop
 800b6fc:	e000      	b.n	800b700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b6fe:	bf00      	nop
    }

    if(status == HAL_OK)
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10d      	bne.n	800b722 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b706:	4b3e      	ldr	r3, [pc, #248]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6819      	ldr	r1, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	3b01      	subs	r3, #1
 800b718:	011b      	lsls	r3, r3, #4
 800b71a:	430b      	orrs	r3, r1
 800b71c:	4938      	ldr	r1, [pc, #224]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b71e:	4313      	orrs	r3, r2
 800b720:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b722:	7bfb      	ldrb	r3, [r7, #15]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d166      	bne.n	800b7f6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b728:	4b35      	ldr	r3, [pc, #212]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a34      	ldr	r2, [pc, #208]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b72e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b734:	f7f9 fc4c 	bl	8004fd0 <HAL_GetTick>
 800b738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b73a:	e009      	b.n	800b750 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b73c:	f7f9 fc48 	bl	8004fd0 <HAL_GetTick>
 800b740:	4602      	mov	r2, r0
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	2b02      	cmp	r3, #2
 800b748:	d902      	bls.n	800b750 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	73fb      	strb	r3, [r7, #15]
        break;
 800b74e:	e005      	b.n	800b75c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b750:	4b2b      	ldr	r3, [pc, #172]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1ef      	bne.n	800b73c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d149      	bne.n	800b7f6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d110      	bne.n	800b78a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b768:	4b25      	ldr	r3, [pc, #148]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b770:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	6892      	ldr	r2, [r2, #8]
 800b778:	0211      	lsls	r1, r2, #8
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	68d2      	ldr	r2, [r2, #12]
 800b77e:	06d2      	lsls	r2, r2, #27
 800b780:	430a      	orrs	r2, r1
 800b782:	491f      	ldr	r1, [pc, #124]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b784:	4313      	orrs	r3, r2
 800b786:	614b      	str	r3, [r1, #20]
 800b788:	e011      	b.n	800b7ae <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b78a:	4b1d      	ldr	r3, [pc, #116]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b792:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	6892      	ldr	r2, [r2, #8]
 800b79a:	0211      	lsls	r1, r2, #8
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	6912      	ldr	r2, [r2, #16]
 800b7a0:	0852      	lsrs	r2, r2, #1
 800b7a2:	3a01      	subs	r2, #1
 800b7a4:	0652      	lsls	r2, r2, #25
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	4915      	ldr	r1, [pc, #84]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b7ae:	4b14      	ldr	r3, [pc, #80]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a13      	ldr	r2, [pc, #76]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7ba:	f7f9 fc09 	bl	8004fd0 <HAL_GetTick>
 800b7be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b7c0:	e009      	b.n	800b7d6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b7c2:	f7f9 fc05 	bl	8004fd0 <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d902      	bls.n	800b7d6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	73fb      	strb	r3, [r7, #15]
          break;
 800b7d4:	e005      	b.n	800b7e2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b7d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d0ef      	beq.n	800b7c2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800b7e2:	7bfb      	ldrb	r3, [r7, #15]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d106      	bne.n	800b7f6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b7e8:	4b05      	ldr	r3, [pc, #20]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7ea:	695a      	ldr	r2, [r3, #20]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	4903      	ldr	r1, [pc, #12]	@ (800b800 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	40021000 	.word	0x40021000

0800b804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e049      	b.n	800b8aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d106      	bne.n	800b830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7f8 fe9e 	bl	800456c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2202      	movs	r2, #2
 800b834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3304      	adds	r3, #4
 800b840:	4619      	mov	r1, r3
 800b842:	4610      	mov	r0, r2
 800b844:	f000 f9d0 	bl	800bbe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
	...

0800b8b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d001      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e04f      	b.n	800b96c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f042 0201 	orr.w	r2, r2, #1
 800b8e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a23      	ldr	r2, [pc, #140]	@ (800b978 <HAL_TIM_Base_Start_IT+0xc4>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d01d      	beq.n	800b92a <HAL_TIM_Base_Start_IT+0x76>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8f6:	d018      	beq.n	800b92a <HAL_TIM_Base_Start_IT+0x76>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a1f      	ldr	r2, [pc, #124]	@ (800b97c <HAL_TIM_Base_Start_IT+0xc8>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d013      	beq.n	800b92a <HAL_TIM_Base_Start_IT+0x76>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a1e      	ldr	r2, [pc, #120]	@ (800b980 <HAL_TIM_Base_Start_IT+0xcc>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d00e      	beq.n	800b92a <HAL_TIM_Base_Start_IT+0x76>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1c      	ldr	r2, [pc, #112]	@ (800b984 <HAL_TIM_Base_Start_IT+0xd0>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d009      	beq.n	800b92a <HAL_TIM_Base_Start_IT+0x76>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a1b      	ldr	r2, [pc, #108]	@ (800b988 <HAL_TIM_Base_Start_IT+0xd4>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d004      	beq.n	800b92a <HAL_TIM_Base_Start_IT+0x76>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a19      	ldr	r2, [pc, #100]	@ (800b98c <HAL_TIM_Base_Start_IT+0xd8>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d115      	bne.n	800b956 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	689a      	ldr	r2, [r3, #8]
 800b930:	4b17      	ldr	r3, [pc, #92]	@ (800b990 <HAL_TIM_Base_Start_IT+0xdc>)
 800b932:	4013      	ands	r3, r2
 800b934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b06      	cmp	r3, #6
 800b93a:	d015      	beq.n	800b968 <HAL_TIM_Base_Start_IT+0xb4>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b942:	d011      	beq.n	800b968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f042 0201 	orr.w	r2, r2, #1
 800b952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b954:	e008      	b.n	800b968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f042 0201 	orr.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	e000      	b.n	800b96a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b968:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	40012c00 	.word	0x40012c00
 800b97c:	40000400 	.word	0x40000400
 800b980:	40000800 	.word	0x40000800
 800b984:	40000c00 	.word	0x40000c00
 800b988:	40013400 	.word	0x40013400
 800b98c:	40014000 	.word	0x40014000
 800b990:	00010007 	.word	0x00010007

0800b994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f003 0302 	and.w	r3, r3, #2
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d020      	beq.n	800b9f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01b      	beq.n	800b9f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f06f 0202 	mvn.w	r2, #2
 800b9c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	f003 0303 	and.w	r3, r3, #3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f8e4 	bl	800bbac <HAL_TIM_IC_CaptureCallback>
 800b9e4:	e005      	b.n	800b9f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f8d6 	bl	800bb98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f8e7 	bl	800bbc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	f003 0304 	and.w	r3, r3, #4
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d020      	beq.n	800ba44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f003 0304 	and.w	r3, r3, #4
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d01b      	beq.n	800ba44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f06f 0204 	mvn.w	r2, #4
 800ba14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f8be 	bl	800bbac <HAL_TIM_IC_CaptureCallback>
 800ba30:	e005      	b.n	800ba3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f8b0 	bl	800bb98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f8c1 	bl	800bbc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d020      	beq.n	800ba90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f003 0308 	and.w	r3, r3, #8
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d01b      	beq.n	800ba90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f06f 0208 	mvn.w	r2, #8
 800ba60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2204      	movs	r2, #4
 800ba66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	69db      	ldr	r3, [r3, #28]
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f898 	bl	800bbac <HAL_TIM_IC_CaptureCallback>
 800ba7c:	e005      	b.n	800ba8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f88a 	bl	800bb98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f89b 	bl	800bbc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f003 0310 	and.w	r3, r3, #16
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d020      	beq.n	800badc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f003 0310 	and.w	r3, r3, #16
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d01b      	beq.n	800badc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f06f 0210 	mvn.w	r2, #16
 800baac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2208      	movs	r2, #8
 800bab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	69db      	ldr	r3, [r3, #28]
 800baba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f872 	bl	800bbac <HAL_TIM_IC_CaptureCallback>
 800bac8:	e005      	b.n	800bad6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f864 	bl	800bb98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f875 	bl	800bbc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00c      	beq.n	800bb00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	2b00      	cmp	r3, #0
 800baee:	d007      	beq.n	800bb00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f06f 0201 	mvn.w	r2, #1
 800baf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7f8 fb40 	bl	8004180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00c      	beq.n	800bb24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d007      	beq.n	800bb24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bb1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f98e 	bl	800be40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00c      	beq.n	800bb48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d007      	beq.n	800bb48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bb40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f986 	bl	800be54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00c      	beq.n	800bb6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d007      	beq.n	800bb6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f834 	bl	800bbd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00c      	beq.n	800bb90 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f003 0320 	and.w	r3, r3, #32
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d007      	beq.n	800bb90 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f06f 0220 	mvn.w	r2, #32
 800bb88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f94e 	bl	800be2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb90:	bf00      	nop
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a40      	ldr	r2, [pc, #256]	@ (800bcfc <TIM_Base_SetConfig+0x114>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d013      	beq.n	800bc28 <TIM_Base_SetConfig+0x40>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc06:	d00f      	beq.n	800bc28 <TIM_Base_SetConfig+0x40>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a3d      	ldr	r2, [pc, #244]	@ (800bd00 <TIM_Base_SetConfig+0x118>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d00b      	beq.n	800bc28 <TIM_Base_SetConfig+0x40>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a3c      	ldr	r2, [pc, #240]	@ (800bd04 <TIM_Base_SetConfig+0x11c>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d007      	beq.n	800bc28 <TIM_Base_SetConfig+0x40>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a3b      	ldr	r2, [pc, #236]	@ (800bd08 <TIM_Base_SetConfig+0x120>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d003      	beq.n	800bc28 <TIM_Base_SetConfig+0x40>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a3a      	ldr	r2, [pc, #232]	@ (800bd0c <TIM_Base_SetConfig+0x124>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d108      	bne.n	800bc3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a2f      	ldr	r2, [pc, #188]	@ (800bcfc <TIM_Base_SetConfig+0x114>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d01f      	beq.n	800bc82 <TIM_Base_SetConfig+0x9a>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc48:	d01b      	beq.n	800bc82 <TIM_Base_SetConfig+0x9a>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a2c      	ldr	r2, [pc, #176]	@ (800bd00 <TIM_Base_SetConfig+0x118>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d017      	beq.n	800bc82 <TIM_Base_SetConfig+0x9a>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a2b      	ldr	r2, [pc, #172]	@ (800bd04 <TIM_Base_SetConfig+0x11c>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d013      	beq.n	800bc82 <TIM_Base_SetConfig+0x9a>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a2a      	ldr	r2, [pc, #168]	@ (800bd08 <TIM_Base_SetConfig+0x120>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d00f      	beq.n	800bc82 <TIM_Base_SetConfig+0x9a>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a29      	ldr	r2, [pc, #164]	@ (800bd0c <TIM_Base_SetConfig+0x124>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d00b      	beq.n	800bc82 <TIM_Base_SetConfig+0x9a>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a28      	ldr	r2, [pc, #160]	@ (800bd10 <TIM_Base_SetConfig+0x128>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d007      	beq.n	800bc82 <TIM_Base_SetConfig+0x9a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a27      	ldr	r2, [pc, #156]	@ (800bd14 <TIM_Base_SetConfig+0x12c>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d003      	beq.n	800bc82 <TIM_Base_SetConfig+0x9a>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a26      	ldr	r2, [pc, #152]	@ (800bd18 <TIM_Base_SetConfig+0x130>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d108      	bne.n	800bc94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a10      	ldr	r2, [pc, #64]	@ (800bcfc <TIM_Base_SetConfig+0x114>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00f      	beq.n	800bce0 <TIM_Base_SetConfig+0xf8>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a12      	ldr	r2, [pc, #72]	@ (800bd0c <TIM_Base_SetConfig+0x124>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d00b      	beq.n	800bce0 <TIM_Base_SetConfig+0xf8>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a11      	ldr	r2, [pc, #68]	@ (800bd10 <TIM_Base_SetConfig+0x128>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d007      	beq.n	800bce0 <TIM_Base_SetConfig+0xf8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a10      	ldr	r2, [pc, #64]	@ (800bd14 <TIM_Base_SetConfig+0x12c>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d003      	beq.n	800bce0 <TIM_Base_SetConfig+0xf8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a0f      	ldr	r2, [pc, #60]	@ (800bd18 <TIM_Base_SetConfig+0x130>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d103      	bne.n	800bce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	691a      	ldr	r2, [r3, #16]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	615a      	str	r2, [r3, #20]
}
 800bcee:	bf00      	nop
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	40012c00 	.word	0x40012c00
 800bd00:	40000400 	.word	0x40000400
 800bd04:	40000800 	.word	0x40000800
 800bd08:	40000c00 	.word	0x40000c00
 800bd0c:	40013400 	.word	0x40013400
 800bd10:	40014000 	.word	0x40014000
 800bd14:	40014400 	.word	0x40014400
 800bd18:	40014800 	.word	0x40014800

0800bd1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d101      	bne.n	800bd34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e068      	b.n	800be06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a2e      	ldr	r2, [pc, #184]	@ (800be14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d004      	beq.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a2d      	ldr	r2, [pc, #180]	@ (800be18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d108      	bne.n	800bd7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bd6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a1e      	ldr	r2, [pc, #120]	@ (800be14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d01d      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda6:	d018      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a1b      	ldr	r2, [pc, #108]	@ (800be1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d013      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a1a      	ldr	r2, [pc, #104]	@ (800be20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00e      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a18      	ldr	r2, [pc, #96]	@ (800be24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d009      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a13      	ldr	r2, [pc, #76]	@ (800be18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d004      	beq.n	800bdda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a14      	ldr	r2, [pc, #80]	@ (800be28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d10c      	bne.n	800bdf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bde0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	40012c00 	.word	0x40012c00
 800be18:	40013400 	.word	0x40013400
 800be1c:	40000400 	.word	0x40000400
 800be20:	40000800 	.word	0x40000800
 800be24:	40000c00 	.word	0x40000c00
 800be28:	40014000 	.word	0x40014000

0800be2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e040      	b.n	800befc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d106      	bne.n	800be90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7f8 fb94 	bl	80045b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2224      	movs	r2, #36	@ 0x24
 800be94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f022 0201 	bic.w	r2, r2, #1
 800bea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 ff04 	bl	800ccbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fc49 	bl	800c74c <UART_SetConfig>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d101      	bne.n	800bec4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e01b      	b.n	800befc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	689a      	ldr	r2, [r3, #8]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f042 0201 	orr.w	r2, r2, #1
 800bef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 ff83 	bl	800ce00 <UART_CheckIdleState>
 800befa:	4603      	mov	r3, r0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e02f      	b.n	800bf76 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2224      	movs	r2, #36	@ 0x24
 800bf1a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f022 0201 	bic.w	r2, r2, #1
 800bf2a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2200      	movs	r2, #0
 800bf42:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7f8 fcc5 	bl	80048d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
	...

0800bf80 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08a      	sub	sp, #40	@ 0x28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf92:	2b20      	cmp	r3, #32
 800bf94:	d165      	bne.n	800c062 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d002      	beq.n	800bfa2 <HAL_UART_Transmit_DMA+0x22>
 800bf9c:	88fb      	ldrh	r3, [r7, #6]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e05e      	b.n	800c064 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	88fa      	ldrh	r2, [r7, #6]
 800bfb0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	88fa      	ldrh	r2, [r7, #6]
 800bfb8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2221      	movs	r2, #33	@ 0x21
 800bfc8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d027      	beq.n	800c022 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfd6:	4a25      	ldr	r2, [pc, #148]	@ (800c06c <HAL_UART_Transmit_DMA+0xec>)
 800bfd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfde:	4a24      	ldr	r2, [pc, #144]	@ (800c070 <HAL_UART_Transmit_DMA+0xf0>)
 800bfe0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfe6:	4a23      	ldr	r2, [pc, #140]	@ (800c074 <HAL_UART_Transmit_DMA+0xf4>)
 800bfe8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfee:	2200      	movs	r2, #0
 800bff0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bffa:	4619      	mov	r1, r3
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	3328      	adds	r3, #40	@ 0x28
 800c002:	461a      	mov	r2, r3
 800c004:	88fb      	ldrh	r3, [r7, #6]
 800c006:	f7fa ff41 	bl	8006e8c <HAL_DMA_Start_IT>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d008      	beq.n	800c022 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2210      	movs	r2, #16
 800c014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2220      	movs	r2, #32
 800c01c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e020      	b.n	800c064 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2240      	movs	r2, #64	@ 0x40
 800c028:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3308      	adds	r3, #8
 800c030:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	e853 3f00 	ldrex	r3, [r3]
 800c038:	613b      	str	r3, [r7, #16]
   return(result);
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c040:	627b      	str	r3, [r7, #36]	@ 0x24
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3308      	adds	r3, #8
 800c048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c04a:	623a      	str	r2, [r7, #32]
 800c04c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04e:	69f9      	ldr	r1, [r7, #28]
 800c050:	6a3a      	ldr	r2, [r7, #32]
 800c052:	e841 2300 	strex	r3, r2, [r1]
 800c056:	61bb      	str	r3, [r7, #24]
   return(result);
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1e5      	bne.n	800c02a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	e000      	b.n	800c064 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c062:	2302      	movs	r3, #2
  }
}
 800c064:	4618      	mov	r0, r3
 800c066:	3728      	adds	r7, #40	@ 0x28
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	0800d275 	.word	0x0800d275
 800c070:	0800d30f 	.word	0x0800d30f
 800c074:	0800d495 	.word	0x0800d495

0800c078 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08a      	sub	sp, #40	@ 0x28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	4613      	mov	r3, r2
 800c084:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c08c:	2b20      	cmp	r3, #32
 800c08e:	d137      	bne.n	800c100 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <HAL_UART_Receive_DMA+0x24>
 800c096:	88fb      	ldrh	r3, [r7, #6]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	e030      	b.n	800c102 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a18      	ldr	r2, [pc, #96]	@ (800c10c <HAL_UART_Receive_DMA+0x94>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d01f      	beq.n	800c0f0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d018      	beq.n	800c0f0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	e853 3f00 	ldrex	r3, [r3]
 800c0ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c0d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0dc:	623b      	str	r3, [r7, #32]
 800c0de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e0:	69f9      	ldr	r1, [r7, #28]
 800c0e2:	6a3a      	ldr	r2, [r7, #32]
 800c0e4:	e841 2300 	strex	r3, r2, [r1]
 800c0e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1e6      	bne.n	800c0be <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c0f0:	88fb      	ldrh	r3, [r7, #6]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	68b9      	ldr	r1, [r7, #8]
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f000 ff92 	bl	800d020 <UART_Start_Receive_DMA>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	e000      	b.n	800c102 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c100:	2302      	movs	r3, #2
  }
}
 800c102:	4618      	mov	r0, r3
 800c104:	3728      	adds	r7, #40	@ 0x28
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	40008000 	.word	0x40008000

0800c110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b0ba      	sub	sp, #232	@ 0xe8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	69db      	ldr	r3, [r3, #28]
 800c11e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c13a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c13e:	4013      	ands	r3, r2
 800c140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d115      	bne.n	800c178 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c150:	f003 0320 	and.w	r3, r3, #32
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00f      	beq.n	800c178 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c15c:	f003 0320 	and.w	r3, r3, #32
 800c160:	2b00      	cmp	r3, #0
 800c162:	d009      	beq.n	800c178 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 82ae 	beq.w	800c6ca <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	4798      	blx	r3
      }
      return;
 800c176:	e2a8      	b.n	800c6ca <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 8117 	beq.w	800c3b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c18e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c192:	4b85      	ldr	r3, [pc, #532]	@ (800c3a8 <HAL_UART_IRQHandler+0x298>)
 800c194:	4013      	ands	r3, r2
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 810a 	beq.w	800c3b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1a0:	f003 0301 	and.w	r3, r3, #1
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d011      	beq.n	800c1cc <HAL_UART_IRQHandler+0xbc>
 800c1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1c2:	f043 0201 	orr.w	r2, r3, #1
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d011      	beq.n	800c1fc <HAL_UART_IRQHandler+0xec>
 800c1d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00b      	beq.n	800c1fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1f2:	f043 0204 	orr.w	r2, r3, #4
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c200:	f003 0304 	and.w	r3, r3, #4
 800c204:	2b00      	cmp	r3, #0
 800c206:	d011      	beq.n	800c22c <HAL_UART_IRQHandler+0x11c>
 800c208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00b      	beq.n	800c22c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2204      	movs	r2, #4
 800c21a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c222:	f043 0202 	orr.w	r2, r3, #2
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c230:	f003 0308 	and.w	r3, r3, #8
 800c234:	2b00      	cmp	r3, #0
 800c236:	d017      	beq.n	800c268 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c23c:	f003 0320 	and.w	r3, r3, #32
 800c240:	2b00      	cmp	r3, #0
 800c242:	d105      	bne.n	800c250 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c248:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00b      	beq.n	800c268 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2208      	movs	r2, #8
 800c256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c25e:	f043 0208 	orr.w	r2, r3, #8
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c26c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c270:	2b00      	cmp	r3, #0
 800c272:	d012      	beq.n	800c29a <HAL_UART_IRQHandler+0x18a>
 800c274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c278:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00c      	beq.n	800c29a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c290:	f043 0220 	orr.w	r2, r3, #32
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f000 8214 	beq.w	800c6ce <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00d      	beq.n	800c2ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2b6:	f003 0320 	and.w	r3, r3, #32
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d007      	beq.n	800c2ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2e2:	2b40      	cmp	r3, #64	@ 0x40
 800c2e4:	d005      	beq.n	800c2f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c2e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c2ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d04f      	beq.n	800c392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 ff5a 	bl	800d1ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c302:	2b40      	cmp	r3, #64	@ 0x40
 800c304:	d141      	bne.n	800c38a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3308      	adds	r3, #8
 800c30c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c31c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3308      	adds	r3, #8
 800c32e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c332:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c33e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c342:	e841 2300 	strex	r3, r2, [r1]
 800c346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c34a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1d9      	bne.n	800c306 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c356:	2b00      	cmp	r3, #0
 800c358:	d013      	beq.n	800c382 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c35e:	4a13      	ldr	r2, [pc, #76]	@ (800c3ac <HAL_UART_IRQHandler+0x29c>)
 800c360:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c366:	4618      	mov	r0, r3
 800c368:	f7fa fe2e 	bl	8006fc8 <HAL_DMA_Abort_IT>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d017      	beq.n	800c3a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c37c:	4610      	mov	r0, r2
 800c37e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c380:	e00f      	b.n	800c3a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f9cc 	bl	800c720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c388:	e00b      	b.n	800c3a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f9c8 	bl	800c720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c390:	e007      	b.n	800c3a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f9c4 	bl	800c720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c3a0:	e195      	b.n	800c6ce <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a2:	bf00      	nop
    return;
 800c3a4:	e193      	b.n	800c6ce <HAL_UART_IRQHandler+0x5be>
 800c3a6:	bf00      	nop
 800c3a8:	04000120 	.word	0x04000120
 800c3ac:	0800d513 	.word	0x0800d513

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	f040 814e 	bne.w	800c656 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3be:	f003 0310 	and.w	r3, r3, #16
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 8147 	beq.w	800c656 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3cc:	f003 0310 	and.w	r3, r3, #16
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 8140 	beq.w	800c656 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2210      	movs	r2, #16
 800c3dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3e8:	2b40      	cmp	r3, #64	@ 0x40
 800c3ea:	f040 80b8 	bne.w	800c55e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c3fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 8167 	beq.w	800c6d2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c40a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c40e:	429a      	cmp	r2, r3
 800c410:	f080 815f 	bcs.w	800c6d2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c41a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f003 0320 	and.w	r3, r3, #32
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f040 8086 	bne.w	800c53c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c43c:	e853 3f00 	ldrex	r3, [r3]
 800c440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c44c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	461a      	mov	r2, r3
 800c456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c45a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c45e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c462:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c466:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c46a:	e841 2300 	strex	r3, r2, [r1]
 800c46e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1da      	bne.n	800c430 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3308      	adds	r3, #8
 800c480:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c484:	e853 3f00 	ldrex	r3, [r3]
 800c488:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c48a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c48c:	f023 0301 	bic.w	r3, r3, #1
 800c490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3308      	adds	r3, #8
 800c49a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c49e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c4a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c4a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c4aa:	e841 2300 	strex	r3, r2, [r1]
 800c4ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c4b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1e1      	bne.n	800c47a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	3308      	adds	r3, #8
 800c4bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4c0:	e853 3f00 	ldrex	r3, [r3]
 800c4c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c4c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c4da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c4dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c4e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c4e2:	e841 2300 	strex	r3, r2, [r1]
 800c4e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c4e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1e3      	bne.n	800c4b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2220      	movs	r2, #32
 800c4f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c50a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c50c:	f023 0310 	bic.w	r3, r3, #16
 800c510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c51e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c520:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c524:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c52c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e4      	bne.n	800c4fc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c536:	4618      	mov	r0, r3
 800c538:	f7fa fd08 	bl	8006f4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c54e:	b29b      	uxth	r3, r3
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	b29b      	uxth	r3, r3
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f8ec 	bl	800c734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c55c:	e0b9      	b.n	800c6d2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c578:	b29b      	uxth	r3, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f000 80ab 	beq.w	800c6d6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800c580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 80a6 	beq.w	800c6d6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c592:	e853 3f00 	ldrex	r3, [r3]
 800c596:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c59a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c59e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c5ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c5b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c5b4:	e841 2300 	strex	r3, r2, [r1]
 800c5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e4      	bne.n	800c58a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ca:	e853 3f00 	ldrex	r3, [r3]
 800c5ce:	623b      	str	r3, [r7, #32]
   return(result);
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	f023 0301 	bic.w	r3, r3, #1
 800c5d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3308      	adds	r3, #8
 800c5e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c5e4:	633a      	str	r2, [r7, #48]	@ 0x30
 800c5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5ec:	e841 2300 	strex	r3, r2, [r1]
 800c5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1e3      	bne.n	800c5c0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2220      	movs	r2, #32
 800c5fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	e853 3f00 	ldrex	r3, [r3]
 800c618:	60fb      	str	r3, [r7, #12]
   return(result);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f023 0310 	bic.w	r3, r3, #16
 800c620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c62e:	61fb      	str	r3, [r7, #28]
 800c630:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c632:	69b9      	ldr	r1, [r7, #24]
 800c634:	69fa      	ldr	r2, [r7, #28]
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	617b      	str	r3, [r7, #20]
   return(result);
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e4      	bne.n	800c60c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2202      	movs	r2, #2
 800c646:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f870 	bl	800c734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c654:	e03f      	b.n	800c6d6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c65a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00e      	beq.n	800c680 <HAL_UART_IRQHandler+0x570>
 800c662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d008      	beq.n	800c680 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c676:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 ff8a 	bl	800d592 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c67e:	e02d      	b.n	800c6dc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00e      	beq.n	800c6aa <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c694:	2b00      	cmp	r3, #0
 800c696:	d008      	beq.n	800c6aa <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d01c      	beq.n	800c6da <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	4798      	blx	r3
    }
    return;
 800c6a8:	e017      	b.n	800c6da <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d012      	beq.n	800c6dc <HAL_UART_IRQHandler+0x5cc>
 800c6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00c      	beq.n	800c6dc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 ff3b 	bl	800d53e <UART_EndTransmit_IT>
    return;
 800c6c8:	e008      	b.n	800c6dc <HAL_UART_IRQHandler+0x5cc>
      return;
 800c6ca:	bf00      	nop
 800c6cc:	e006      	b.n	800c6dc <HAL_UART_IRQHandler+0x5cc>
    return;
 800c6ce:	bf00      	nop
 800c6d0:	e004      	b.n	800c6dc <HAL_UART_IRQHandler+0x5cc>
      return;
 800c6d2:	bf00      	nop
 800c6d4:	e002      	b.n	800c6dc <HAL_UART_IRQHandler+0x5cc>
      return;
 800c6d6:	bf00      	nop
 800c6d8:	e000      	b.n	800c6dc <HAL_UART_IRQHandler+0x5cc>
    return;
 800c6da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c6dc:	37e8      	adds	r7, #232	@ 0xe8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop

0800c6e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c728:	bf00      	nop
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c74c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c750:	b08a      	sub	sp, #40	@ 0x28
 800c752:	af00      	add	r7, sp, #0
 800c754:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	431a      	orrs	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	431a      	orrs	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	69db      	ldr	r3, [r3, #28]
 800c770:	4313      	orrs	r3, r2
 800c772:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	4ba4      	ldr	r3, [pc, #656]	@ (800ca0c <UART_SetConfig+0x2c0>)
 800c77c:	4013      	ands	r3, r2
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	6812      	ldr	r2, [r2, #0]
 800c782:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c784:	430b      	orrs	r3, r1
 800c786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	68da      	ldr	r2, [r3, #12]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	430a      	orrs	r2, r1
 800c79c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a99      	ldr	r2, [pc, #612]	@ (800ca10 <UART_SetConfig+0x2c4>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d004      	beq.n	800c7b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7c8:	430a      	orrs	r2, r1
 800c7ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a90      	ldr	r2, [pc, #576]	@ (800ca14 <UART_SetConfig+0x2c8>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d126      	bne.n	800c824 <UART_SetConfig+0xd8>
 800c7d6:	4b90      	ldr	r3, [pc, #576]	@ (800ca18 <UART_SetConfig+0x2cc>)
 800c7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7dc:	f003 0303 	and.w	r3, r3, #3
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	d81b      	bhi.n	800c81c <UART_SetConfig+0xd0>
 800c7e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7ec <UART_SetConfig+0xa0>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c7fd 	.word	0x0800c7fd
 800c7f0:	0800c80d 	.word	0x0800c80d
 800c7f4:	0800c805 	.word	0x0800c805
 800c7f8:	0800c815 	.word	0x0800c815
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c802:	e116      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c804:	2302      	movs	r3, #2
 800c806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c80a:	e112      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c80c:	2304      	movs	r3, #4
 800c80e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c812:	e10e      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c814:	2308      	movs	r3, #8
 800c816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c81a:	e10a      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c81c:	2310      	movs	r3, #16
 800c81e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c822:	e106      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a7c      	ldr	r2, [pc, #496]	@ (800ca1c <UART_SetConfig+0x2d0>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d138      	bne.n	800c8a0 <UART_SetConfig+0x154>
 800c82e:	4b7a      	ldr	r3, [pc, #488]	@ (800ca18 <UART_SetConfig+0x2cc>)
 800c830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c834:	f003 030c 	and.w	r3, r3, #12
 800c838:	2b0c      	cmp	r3, #12
 800c83a:	d82d      	bhi.n	800c898 <UART_SetConfig+0x14c>
 800c83c:	a201      	add	r2, pc, #4	@ (adr r2, 800c844 <UART_SetConfig+0xf8>)
 800c83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c842:	bf00      	nop
 800c844:	0800c879 	.word	0x0800c879
 800c848:	0800c899 	.word	0x0800c899
 800c84c:	0800c899 	.word	0x0800c899
 800c850:	0800c899 	.word	0x0800c899
 800c854:	0800c889 	.word	0x0800c889
 800c858:	0800c899 	.word	0x0800c899
 800c85c:	0800c899 	.word	0x0800c899
 800c860:	0800c899 	.word	0x0800c899
 800c864:	0800c881 	.word	0x0800c881
 800c868:	0800c899 	.word	0x0800c899
 800c86c:	0800c899 	.word	0x0800c899
 800c870:	0800c899 	.word	0x0800c899
 800c874:	0800c891 	.word	0x0800c891
 800c878:	2300      	movs	r3, #0
 800c87a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c87e:	e0d8      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c880:	2302      	movs	r3, #2
 800c882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c886:	e0d4      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c888:	2304      	movs	r3, #4
 800c88a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c88e:	e0d0      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c890:	2308      	movs	r3, #8
 800c892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c896:	e0cc      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c898:	2310      	movs	r3, #16
 800c89a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c89e:	e0c8      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a5e      	ldr	r2, [pc, #376]	@ (800ca20 <UART_SetConfig+0x2d4>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d125      	bne.n	800c8f6 <UART_SetConfig+0x1aa>
 800c8aa:	4b5b      	ldr	r3, [pc, #364]	@ (800ca18 <UART_SetConfig+0x2cc>)
 800c8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c8b4:	2b30      	cmp	r3, #48	@ 0x30
 800c8b6:	d016      	beq.n	800c8e6 <UART_SetConfig+0x19a>
 800c8b8:	2b30      	cmp	r3, #48	@ 0x30
 800c8ba:	d818      	bhi.n	800c8ee <UART_SetConfig+0x1a2>
 800c8bc:	2b20      	cmp	r3, #32
 800c8be:	d00a      	beq.n	800c8d6 <UART_SetConfig+0x18a>
 800c8c0:	2b20      	cmp	r3, #32
 800c8c2:	d814      	bhi.n	800c8ee <UART_SetConfig+0x1a2>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <UART_SetConfig+0x182>
 800c8c8:	2b10      	cmp	r3, #16
 800c8ca:	d008      	beq.n	800c8de <UART_SetConfig+0x192>
 800c8cc:	e00f      	b.n	800c8ee <UART_SetConfig+0x1a2>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8d4:	e0ad      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8dc:	e0a9      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c8de:	2304      	movs	r3, #4
 800c8e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8e4:	e0a5      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c8e6:	2308      	movs	r3, #8
 800c8e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8ec:	e0a1      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c8ee:	2310      	movs	r3, #16
 800c8f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c8f4:	e09d      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a4a      	ldr	r2, [pc, #296]	@ (800ca24 <UART_SetConfig+0x2d8>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d125      	bne.n	800c94c <UART_SetConfig+0x200>
 800c900:	4b45      	ldr	r3, [pc, #276]	@ (800ca18 <UART_SetConfig+0x2cc>)
 800c902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c906:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c90a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c90c:	d016      	beq.n	800c93c <UART_SetConfig+0x1f0>
 800c90e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c910:	d818      	bhi.n	800c944 <UART_SetConfig+0x1f8>
 800c912:	2b80      	cmp	r3, #128	@ 0x80
 800c914:	d00a      	beq.n	800c92c <UART_SetConfig+0x1e0>
 800c916:	2b80      	cmp	r3, #128	@ 0x80
 800c918:	d814      	bhi.n	800c944 <UART_SetConfig+0x1f8>
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <UART_SetConfig+0x1d8>
 800c91e:	2b40      	cmp	r3, #64	@ 0x40
 800c920:	d008      	beq.n	800c934 <UART_SetConfig+0x1e8>
 800c922:	e00f      	b.n	800c944 <UART_SetConfig+0x1f8>
 800c924:	2300      	movs	r3, #0
 800c926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c92a:	e082      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c92c:	2302      	movs	r3, #2
 800c92e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c932:	e07e      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c934:	2304      	movs	r3, #4
 800c936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c93a:	e07a      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c93c:	2308      	movs	r3, #8
 800c93e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c942:	e076      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c944:	2310      	movs	r3, #16
 800c946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c94a:	e072      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a35      	ldr	r2, [pc, #212]	@ (800ca28 <UART_SetConfig+0x2dc>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d12a      	bne.n	800c9ac <UART_SetConfig+0x260>
 800c956:	4b30      	ldr	r3, [pc, #192]	@ (800ca18 <UART_SetConfig+0x2cc>)
 800c958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c95c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c964:	d01a      	beq.n	800c99c <UART_SetConfig+0x250>
 800c966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c96a:	d81b      	bhi.n	800c9a4 <UART_SetConfig+0x258>
 800c96c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c970:	d00c      	beq.n	800c98c <UART_SetConfig+0x240>
 800c972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c976:	d815      	bhi.n	800c9a4 <UART_SetConfig+0x258>
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d003      	beq.n	800c984 <UART_SetConfig+0x238>
 800c97c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c980:	d008      	beq.n	800c994 <UART_SetConfig+0x248>
 800c982:	e00f      	b.n	800c9a4 <UART_SetConfig+0x258>
 800c984:	2300      	movs	r3, #0
 800c986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c98a:	e052      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c98c:	2302      	movs	r3, #2
 800c98e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c992:	e04e      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c994:	2304      	movs	r3, #4
 800c996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c99a:	e04a      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c99c:	2308      	movs	r3, #8
 800c99e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9a2:	e046      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9aa:	e042      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a17      	ldr	r2, [pc, #92]	@ (800ca10 <UART_SetConfig+0x2c4>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d13a      	bne.n	800ca2c <UART_SetConfig+0x2e0>
 800c9b6:	4b18      	ldr	r3, [pc, #96]	@ (800ca18 <UART_SetConfig+0x2cc>)
 800c9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c9c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c9c4:	d01a      	beq.n	800c9fc <UART_SetConfig+0x2b0>
 800c9c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c9ca:	d81b      	bhi.n	800ca04 <UART_SetConfig+0x2b8>
 800c9cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9d0:	d00c      	beq.n	800c9ec <UART_SetConfig+0x2a0>
 800c9d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9d6:	d815      	bhi.n	800ca04 <UART_SetConfig+0x2b8>
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d003      	beq.n	800c9e4 <UART_SetConfig+0x298>
 800c9dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9e0:	d008      	beq.n	800c9f4 <UART_SetConfig+0x2a8>
 800c9e2:	e00f      	b.n	800ca04 <UART_SetConfig+0x2b8>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9ea:	e022      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9f2:	e01e      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c9f4:	2304      	movs	r3, #4
 800c9f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9fa:	e01a      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800c9fc:	2308      	movs	r3, #8
 800c9fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca02:	e016      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800ca04:	2310      	movs	r3, #16
 800ca06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca0a:	e012      	b.n	800ca32 <UART_SetConfig+0x2e6>
 800ca0c:	efff69f3 	.word	0xefff69f3
 800ca10:	40008000 	.word	0x40008000
 800ca14:	40013800 	.word	0x40013800
 800ca18:	40021000 	.word	0x40021000
 800ca1c:	40004400 	.word	0x40004400
 800ca20:	40004800 	.word	0x40004800
 800ca24:	40004c00 	.word	0x40004c00
 800ca28:	40005000 	.word	0x40005000
 800ca2c:	2310      	movs	r3, #16
 800ca2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a9f      	ldr	r2, [pc, #636]	@ (800ccb4 <UART_SetConfig+0x568>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d17a      	bne.n	800cb32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ca40:	2b08      	cmp	r3, #8
 800ca42:	d824      	bhi.n	800ca8e <UART_SetConfig+0x342>
 800ca44:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <UART_SetConfig+0x300>)
 800ca46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4a:	bf00      	nop
 800ca4c:	0800ca71 	.word	0x0800ca71
 800ca50:	0800ca8f 	.word	0x0800ca8f
 800ca54:	0800ca79 	.word	0x0800ca79
 800ca58:	0800ca8f 	.word	0x0800ca8f
 800ca5c:	0800ca7f 	.word	0x0800ca7f
 800ca60:	0800ca8f 	.word	0x0800ca8f
 800ca64:	0800ca8f 	.word	0x0800ca8f
 800ca68:	0800ca8f 	.word	0x0800ca8f
 800ca6c:	0800ca87 	.word	0x0800ca87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca70:	f7fe f972 	bl	800ad58 <HAL_RCC_GetPCLK1Freq>
 800ca74:	61f8      	str	r0, [r7, #28]
        break;
 800ca76:	e010      	b.n	800ca9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca78:	4b8f      	ldr	r3, [pc, #572]	@ (800ccb8 <UART_SetConfig+0x56c>)
 800ca7a:	61fb      	str	r3, [r7, #28]
        break;
 800ca7c:	e00d      	b.n	800ca9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca7e:	f7fe f8d3 	bl	800ac28 <HAL_RCC_GetSysClockFreq>
 800ca82:	61f8      	str	r0, [r7, #28]
        break;
 800ca84:	e009      	b.n	800ca9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca8a:	61fb      	str	r3, [r7, #28]
        break;
 800ca8c:	e005      	b.n	800ca9a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ca98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f000 80fb 	beq.w	800cc98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	685a      	ldr	r2, [r3, #4]
 800caa6:	4613      	mov	r3, r2
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	4413      	add	r3, r2
 800caac:	69fa      	ldr	r2, [r7, #28]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d305      	bcc.n	800cabe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cab8:	69fa      	ldr	r2, [r7, #28]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d903      	bls.n	800cac6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cac4:	e0e8      	b.n	800cc98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	2200      	movs	r2, #0
 800caca:	461c      	mov	r4, r3
 800cacc:	4615      	mov	r5, r2
 800cace:	f04f 0200 	mov.w	r2, #0
 800cad2:	f04f 0300 	mov.w	r3, #0
 800cad6:	022b      	lsls	r3, r5, #8
 800cad8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cadc:	0222      	lsls	r2, r4, #8
 800cade:	68f9      	ldr	r1, [r7, #12]
 800cae0:	6849      	ldr	r1, [r1, #4]
 800cae2:	0849      	lsrs	r1, r1, #1
 800cae4:	2000      	movs	r0, #0
 800cae6:	4688      	mov	r8, r1
 800cae8:	4681      	mov	r9, r0
 800caea:	eb12 0a08 	adds.w	sl, r2, r8
 800caee:	eb43 0b09 	adc.w	fp, r3, r9
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	603b      	str	r3, [r7, #0]
 800cafa:	607a      	str	r2, [r7, #4]
 800cafc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb00:	4650      	mov	r0, sl
 800cb02:	4659      	mov	r1, fp
 800cb04:	f7f3 fdb6 	bl	8000674 <__aeabi_uldivmod>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb16:	d308      	bcc.n	800cb2a <UART_SetConfig+0x3de>
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb1e:	d204      	bcs.n	800cb2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	69ba      	ldr	r2, [r7, #24]
 800cb26:	60da      	str	r2, [r3, #12]
 800cb28:	e0b6      	b.n	800cc98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cb30:	e0b2      	b.n	800cc98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	69db      	ldr	r3, [r3, #28]
 800cb36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb3a:	d15e      	bne.n	800cbfa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800cb3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cb40:	2b08      	cmp	r3, #8
 800cb42:	d828      	bhi.n	800cb96 <UART_SetConfig+0x44a>
 800cb44:	a201      	add	r2, pc, #4	@ (adr r2, 800cb4c <UART_SetConfig+0x400>)
 800cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4a:	bf00      	nop
 800cb4c:	0800cb71 	.word	0x0800cb71
 800cb50:	0800cb79 	.word	0x0800cb79
 800cb54:	0800cb81 	.word	0x0800cb81
 800cb58:	0800cb97 	.word	0x0800cb97
 800cb5c:	0800cb87 	.word	0x0800cb87
 800cb60:	0800cb97 	.word	0x0800cb97
 800cb64:	0800cb97 	.word	0x0800cb97
 800cb68:	0800cb97 	.word	0x0800cb97
 800cb6c:	0800cb8f 	.word	0x0800cb8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb70:	f7fe f8f2 	bl	800ad58 <HAL_RCC_GetPCLK1Freq>
 800cb74:	61f8      	str	r0, [r7, #28]
        break;
 800cb76:	e014      	b.n	800cba2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb78:	f7fe f904 	bl	800ad84 <HAL_RCC_GetPCLK2Freq>
 800cb7c:	61f8      	str	r0, [r7, #28]
        break;
 800cb7e:	e010      	b.n	800cba2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb80:	4b4d      	ldr	r3, [pc, #308]	@ (800ccb8 <UART_SetConfig+0x56c>)
 800cb82:	61fb      	str	r3, [r7, #28]
        break;
 800cb84:	e00d      	b.n	800cba2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb86:	f7fe f84f 	bl	800ac28 <HAL_RCC_GetSysClockFreq>
 800cb8a:	61f8      	str	r0, [r7, #28]
        break;
 800cb8c:	e009      	b.n	800cba2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb92:	61fb      	str	r3, [r7, #28]
        break;
 800cb94:	e005      	b.n	800cba2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d077      	beq.n	800cc98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	005a      	lsls	r2, r3, #1
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	085b      	lsrs	r3, r3, #1
 800cbb2:	441a      	add	r2, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	2b0f      	cmp	r3, #15
 800cbc2:	d916      	bls.n	800cbf2 <UART_SetConfig+0x4a6>
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbca:	d212      	bcs.n	800cbf2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	f023 030f 	bic.w	r3, r3, #15
 800cbd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	085b      	lsrs	r3, r3, #1
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	f003 0307 	and.w	r3, r3, #7
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	8afb      	ldrh	r3, [r7, #22]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	8afa      	ldrh	r2, [r7, #22]
 800cbee:	60da      	str	r2, [r3, #12]
 800cbf0:	e052      	b.n	800cc98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cbf8:	e04e      	b.n	800cc98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cbfe:	2b08      	cmp	r3, #8
 800cc00:	d827      	bhi.n	800cc52 <UART_SetConfig+0x506>
 800cc02:	a201      	add	r2, pc, #4	@ (adr r2, 800cc08 <UART_SetConfig+0x4bc>)
 800cc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc08:	0800cc2d 	.word	0x0800cc2d
 800cc0c:	0800cc35 	.word	0x0800cc35
 800cc10:	0800cc3d 	.word	0x0800cc3d
 800cc14:	0800cc53 	.word	0x0800cc53
 800cc18:	0800cc43 	.word	0x0800cc43
 800cc1c:	0800cc53 	.word	0x0800cc53
 800cc20:	0800cc53 	.word	0x0800cc53
 800cc24:	0800cc53 	.word	0x0800cc53
 800cc28:	0800cc4b 	.word	0x0800cc4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc2c:	f7fe f894 	bl	800ad58 <HAL_RCC_GetPCLK1Freq>
 800cc30:	61f8      	str	r0, [r7, #28]
        break;
 800cc32:	e014      	b.n	800cc5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc34:	f7fe f8a6 	bl	800ad84 <HAL_RCC_GetPCLK2Freq>
 800cc38:	61f8      	str	r0, [r7, #28]
        break;
 800cc3a:	e010      	b.n	800cc5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc3c:	4b1e      	ldr	r3, [pc, #120]	@ (800ccb8 <UART_SetConfig+0x56c>)
 800cc3e:	61fb      	str	r3, [r7, #28]
        break;
 800cc40:	e00d      	b.n	800cc5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc42:	f7fd fff1 	bl	800ac28 <HAL_RCC_GetSysClockFreq>
 800cc46:	61f8      	str	r0, [r7, #28]
        break;
 800cc48:	e009      	b.n	800cc5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc4e:	61fb      	str	r3, [r7, #28]
        break;
 800cc50:	e005      	b.n	800cc5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cc52:	2300      	movs	r3, #0
 800cc54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cc5c:	bf00      	nop
    }

    if (pclk != 0U)
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d019      	beq.n	800cc98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	085a      	lsrs	r2, r3, #1
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	441a      	add	r2, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	2b0f      	cmp	r3, #15
 800cc7c:	d909      	bls.n	800cc92 <UART_SetConfig+0x546>
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc84:	d205      	bcs.n	800cc92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	60da      	str	r2, [r3, #12]
 800cc90:	e002      	b.n	800cc98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cca4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3728      	adds	r7, #40	@ 0x28
 800ccac:	46bd      	mov	sp, r7
 800ccae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccb2:	bf00      	nop
 800ccb4:	40008000 	.word	0x40008000
 800ccb8:	00f42400 	.word	0x00f42400

0800ccbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc8:	f003 0308 	and.w	r3, r3, #8
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00a      	beq.n	800cce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	430a      	orrs	r2, r1
 800cce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00a      	beq.n	800cd08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	430a      	orrs	r2, r1
 800cd06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd0c:	f003 0302 	and.w	r3, r3, #2
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00a      	beq.n	800cd2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	430a      	orrs	r2, r1
 800cd28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd2e:	f003 0304 	and.w	r3, r3, #4
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00a      	beq.n	800cd4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	430a      	orrs	r2, r1
 800cd4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd50:	f003 0310 	and.w	r3, r3, #16
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00a      	beq.n	800cd6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd72:	f003 0320 	and.w	r3, r3, #32
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	430a      	orrs	r2, r1
 800cd8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d01a      	beq.n	800cdd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	430a      	orrs	r2, r1
 800cdb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdba:	d10a      	bne.n	800cdd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	430a      	orrs	r2, r1
 800cdd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00a      	beq.n	800cdf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	430a      	orrs	r2, r1
 800cdf2:	605a      	str	r2, [r3, #4]
  }
}
 800cdf4:	bf00      	nop
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b098      	sub	sp, #96	@ 0x60
 800ce04:	af02      	add	r7, sp, #8
 800ce06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce10:	f7f8 f8de 	bl	8004fd0 <HAL_GetTick>
 800ce14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0308 	and.w	r3, r3, #8
 800ce20:	2b08      	cmp	r3, #8
 800ce22:	d12e      	bne.n	800ce82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 f88c 	bl	800cf50 <UART_WaitOnFlagUntilTimeout>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d021      	beq.n	800ce82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce46:	e853 3f00 	ldrex	r3, [r3]
 800ce4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce52:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	461a      	mov	r2, r3
 800ce5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce64:	e841 2300 	strex	r3, r2, [r1]
 800ce68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1e6      	bne.n	800ce3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2220      	movs	r2, #32
 800ce74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e062      	b.n	800cf48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d149      	bne.n	800cf24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f856 	bl	800cf50 <UART_WaitOnFlagUntilTimeout>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d03c      	beq.n	800cf24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb2:	e853 3f00 	ldrex	r3, [r3]
 800ceb6:	623b      	str	r3, [r7, #32]
   return(result);
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	461a      	mov	r2, r3
 800cec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cec8:	633b      	str	r3, [r7, #48]	@ 0x30
 800ceca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ced0:	e841 2300 	strex	r3, r2, [r1]
 800ced4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ced6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e6      	bne.n	800ceaa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3308      	adds	r3, #8
 800cee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	e853 3f00 	ldrex	r3, [r3]
 800ceea:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f023 0301 	bic.w	r3, r3, #1
 800cef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3308      	adds	r3, #8
 800cefa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cefc:	61fa      	str	r2, [r7, #28]
 800cefe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf00:	69b9      	ldr	r1, [r7, #24]
 800cf02:	69fa      	ldr	r2, [r7, #28]
 800cf04:	e841 2300 	strex	r3, r2, [r1]
 800cf08:	617b      	str	r3, [r7, #20]
   return(result);
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e5      	bne.n	800cedc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2220      	movs	r2, #32
 800cf14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf20:	2303      	movs	r3, #3
 800cf22:	e011      	b.n	800cf48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2220      	movs	r2, #32
 800cf28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2220      	movs	r2, #32
 800cf2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3758      	adds	r7, #88	@ 0x58
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	603b      	str	r3, [r7, #0]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf60:	e049      	b.n	800cff6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf68:	d045      	beq.n	800cff6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf6a:	f7f8 f831 	bl	8004fd0 <HAL_GetTick>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	69ba      	ldr	r2, [r7, #24]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d302      	bcc.n	800cf80 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf80:	2303      	movs	r3, #3
 800cf82:	e048      	b.n	800d016 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 0304 	and.w	r3, r3, #4
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d031      	beq.n	800cff6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	69db      	ldr	r3, [r3, #28]
 800cf98:	f003 0308 	and.w	r3, r3, #8
 800cf9c:	2b08      	cmp	r3, #8
 800cf9e:	d110      	bne.n	800cfc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2208      	movs	r2, #8
 800cfa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f000 f8ff 	bl	800d1ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2208      	movs	r2, #8
 800cfb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e029      	b.n	800d016 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	69db      	ldr	r3, [r3, #28]
 800cfc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfd0:	d111      	bne.n	800cff6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cfda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f000 f8e5 	bl	800d1ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2220      	movs	r2, #32
 800cfe6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800cff2:	2303      	movs	r3, #3
 800cff4:	e00f      	b.n	800d016 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	69da      	ldr	r2, [r3, #28]
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	4013      	ands	r3, r2
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	429a      	cmp	r2, r3
 800d004:	bf0c      	ite	eq
 800d006:	2301      	moveq	r3, #1
 800d008:	2300      	movne	r3, #0
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	461a      	mov	r2, r3
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	429a      	cmp	r2, r3
 800d012:	d0a6      	beq.n	800cf62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
	...

0800d020 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b096      	sub	sp, #88	@ 0x58
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	4613      	mov	r3, r2
 800d02c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	88fa      	ldrh	r2, [r7, #6]
 800d038:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2222      	movs	r2, #34	@ 0x22
 800d048:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d050:	2b00      	cmp	r3, #0
 800d052:	d028      	beq.n	800d0a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d058:	4a3e      	ldr	r2, [pc, #248]	@ (800d154 <UART_Start_Receive_DMA+0x134>)
 800d05a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d060:	4a3d      	ldr	r2, [pc, #244]	@ (800d158 <UART_Start_Receive_DMA+0x138>)
 800d062:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d068:	4a3c      	ldr	r2, [pc, #240]	@ (800d15c <UART_Start_Receive_DMA+0x13c>)
 800d06a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d070:	2200      	movs	r2, #0
 800d072:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3324      	adds	r3, #36	@ 0x24
 800d07e:	4619      	mov	r1, r3
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d084:	461a      	mov	r2, r3
 800d086:	88fb      	ldrh	r3, [r7, #6]
 800d088:	f7f9 ff00 	bl	8006e8c <HAL_DMA_Start_IT>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2210      	movs	r2, #16
 800d096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2220      	movs	r2, #32
 800d09e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e051      	b.n	800d14a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d018      	beq.n	800d0e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0b6:	e853 3f00 	ldrex	r3, [r3]
 800d0ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d0d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0d4:	e841 2300 	strex	r3, r2, [r1]
 800d0d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d0da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1e6      	bne.n	800d0ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ea:	e853 3f00 	ldrex	r3, [r3]
 800d0ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f2:	f043 0301 	orr.w	r3, r3, #1
 800d0f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d100:	637a      	str	r2, [r7, #52]	@ 0x34
 800d102:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d104:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d108:	e841 2300 	strex	r3, r2, [r1]
 800d10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1e5      	bne.n	800d0e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3308      	adds	r3, #8
 800d11a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	e853 3f00 	ldrex	r3, [r3]
 800d122:	613b      	str	r3, [r7, #16]
   return(result);
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d12a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3308      	adds	r3, #8
 800d132:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d134:	623a      	str	r2, [r7, #32]
 800d136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d138:	69f9      	ldr	r1, [r7, #28]
 800d13a:	6a3a      	ldr	r2, [r7, #32]
 800d13c:	e841 2300 	strex	r3, r2, [r1]
 800d140:	61bb      	str	r3, [r7, #24]
   return(result);
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1e5      	bne.n	800d114 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3758      	adds	r7, #88	@ 0x58
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	0800d32b 	.word	0x0800d32b
 800d158:	0800d457 	.word	0x0800d457
 800d15c:	0800d495 	.word	0x0800d495

0800d160 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d160:	b480      	push	{r7}
 800d162:	b089      	sub	sp, #36	@ 0x24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	e853 3f00 	ldrex	r3, [r3]
 800d174:	60bb      	str	r3, [r7, #8]
   return(result);
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d17c:	61fb      	str	r3, [r7, #28]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	61bb      	str	r3, [r7, #24]
 800d188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d18a:	6979      	ldr	r1, [r7, #20]
 800d18c:	69ba      	ldr	r2, [r7, #24]
 800d18e:	e841 2300 	strex	r3, r2, [r1]
 800d192:	613b      	str	r3, [r7, #16]
   return(result);
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1e6      	bne.n	800d168 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2220      	movs	r2, #32
 800d19e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d1a0:	bf00      	nop
 800d1a2:	3724      	adds	r7, #36	@ 0x24
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b095      	sub	sp, #84	@ 0x54
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1bc:	e853 3f00 	ldrex	r3, [r3]
 800d1c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1da:	e841 2300 	strex	r3, r2, [r1]
 800d1de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1e6      	bne.n	800d1b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3308      	adds	r3, #8
 800d1ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	e853 3f00 	ldrex	r3, [r3]
 800d1f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	f023 0301 	bic.w	r3, r3, #1
 800d1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	3308      	adds	r3, #8
 800d204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d206:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d208:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d20c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d20e:	e841 2300 	strex	r3, r2, [r1]
 800d212:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1e5      	bne.n	800d1e6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d118      	bne.n	800d254 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	e853 3f00 	ldrex	r3, [r3]
 800d22e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	f023 0310 	bic.w	r3, r3, #16
 800d236:	647b      	str	r3, [r7, #68]	@ 0x44
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	461a      	mov	r2, r3
 800d23e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d240:	61bb      	str	r3, [r7, #24]
 800d242:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d244:	6979      	ldr	r1, [r7, #20]
 800d246:	69ba      	ldr	r2, [r7, #24]
 800d248:	e841 2300 	strex	r3, r2, [r1]
 800d24c:	613b      	str	r3, [r7, #16]
   return(result);
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1e6      	bne.n	800d222 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2220      	movs	r2, #32
 800d258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d268:	bf00      	nop
 800d26a:	3754      	adds	r7, #84	@ 0x54
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b090      	sub	sp, #64	@ 0x40
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d280:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 0320 	and.w	r3, r3, #32
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d137      	bne.n	800d300 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d292:	2200      	movs	r2, #0
 800d294:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3308      	adds	r3, #8
 800d29e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	e853 3f00 	ldrex	r3, [r3]
 800d2a6:	623b      	str	r3, [r7, #32]
   return(result);
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d2b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3308      	adds	r3, #8
 800d2b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2b8:	633a      	str	r2, [r7, #48]	@ 0x30
 800d2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2c0:	e841 2300 	strex	r3, r2, [r1]
 800d2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1e5      	bne.n	800d298 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	e853 3f00 	ldrex	r3, [r3]
 800d2d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ea:	61fb      	str	r3, [r7, #28]
 800d2ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ee:	69b9      	ldr	r1, [r7, #24]
 800d2f0:	69fa      	ldr	r2, [r7, #28]
 800d2f2:	e841 2300 	strex	r3, r2, [r1]
 800d2f6:	617b      	str	r3, [r7, #20]
   return(result);
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1e6      	bne.n	800d2cc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d2fe:	e002      	b.n	800d306 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d300:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d302:	f7ff f9ef 	bl	800c6e4 <HAL_UART_TxCpltCallback>
}
 800d306:	bf00      	nop
 800d308:	3740      	adds	r7, #64	@ 0x40
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d31a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f7ff f9eb 	bl	800c6f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d322:	bf00      	nop
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b09c      	sub	sp, #112	@ 0x70
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d336:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f003 0320 	and.w	r3, r3, #32
 800d342:	2b00      	cmp	r3, #0
 800d344:	d171      	bne.n	800d42a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d348:	2200      	movs	r2, #0
 800d34a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d34e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d356:	e853 3f00 	ldrex	r3, [r3]
 800d35a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d35c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d35e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d362:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	461a      	mov	r2, r3
 800d36a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d36c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d36e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d370:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d372:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d374:	e841 2300 	strex	r3, r2, [r1]
 800d378:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d37a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1e6      	bne.n	800d34e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3308      	adds	r3, #8
 800d386:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38a:	e853 3f00 	ldrex	r3, [r3]
 800d38e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d392:	f023 0301 	bic.w	r3, r3, #1
 800d396:	667b      	str	r3, [r7, #100]	@ 0x64
 800d398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3308      	adds	r3, #8
 800d39e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d3a0:	647a      	str	r2, [r7, #68]	@ 0x44
 800d3a2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3a8:	e841 2300 	strex	r3, r2, [r1]
 800d3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1e5      	bne.n	800d380 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	3308      	adds	r3, #8
 800d3ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3be:	e853 3f00 	ldrex	r3, [r3]
 800d3c2:	623b      	str	r3, [r7, #32]
   return(result);
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800d3cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d3d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800d3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3dc:	e841 2300 	strex	r3, r2, [r1]
 800d3e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e5      	bne.n	800d3b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d3e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ea:	2220      	movs	r2, #32
 800d3ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d118      	bne.n	800d42a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	e853 3f00 	ldrex	r3, [r3]
 800d404:	60fb      	str	r3, [r7, #12]
   return(result);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f023 0310 	bic.w	r3, r3, #16
 800d40c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d40e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	461a      	mov	r2, r3
 800d414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d416:	61fb      	str	r3, [r7, #28]
 800d418:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	69b9      	ldr	r1, [r7, #24]
 800d41c:	69fa      	ldr	r2, [r7, #28]
 800d41e:	e841 2300 	strex	r3, r2, [r1]
 800d422:	617b      	str	r3, [r7, #20]
   return(result);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1e6      	bne.n	800d3f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d42a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d42c:	2200      	movs	r2, #0
 800d42e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d434:	2b01      	cmp	r3, #1
 800d436:	d107      	bne.n	800d448 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d43a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d43e:	4619      	mov	r1, r3
 800d440:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d442:	f7ff f977 	bl	800c734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d446:	e002      	b.n	800d44e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d448:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d44a:	f7f6 fe57 	bl	80040fc <HAL_UART_RxCpltCallback>
}
 800d44e:	bf00      	nop
 800d450:	3770      	adds	r7, #112	@ 0x70
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d462:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2201      	movs	r2, #1
 800d468:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d109      	bne.n	800d486 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d478:	085b      	lsrs	r3, r3, #1
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	4619      	mov	r1, r3
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f7ff f958 	bl	800c734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d484:	e002      	b.n	800d48c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f7ff f940 	bl	800c70c <HAL_UART_RxHalfCpltCallback>
}
 800d48c:	bf00      	nop
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d4a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ba:	2b80      	cmp	r3, #128	@ 0x80
 800d4bc:	d109      	bne.n	800d4d2 <UART_DMAError+0x3e>
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	2b21      	cmp	r3, #33	@ 0x21
 800d4c2:	d106      	bne.n	800d4d2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d4cc:	6978      	ldr	r0, [r7, #20]
 800d4ce:	f7ff fe47 	bl	800d160 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4dc:	2b40      	cmp	r3, #64	@ 0x40
 800d4de:	d109      	bne.n	800d4f4 <UART_DMAError+0x60>
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2b22      	cmp	r3, #34	@ 0x22
 800d4e4:	d106      	bne.n	800d4f4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d4ee:	6978      	ldr	r0, [r7, #20]
 800d4f0:	f7ff fe5c 	bl	800d1ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d4fa:	f043 0210 	orr.w	r2, r3, #16
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d504:	6978      	ldr	r0, [r7, #20]
 800d506:	f7ff f90b 	bl	800c720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d50a:	bf00      	nop
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b084      	sub	sp, #16
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d51e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f7ff f8f5 	bl	800c720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d536:	bf00      	nop
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b088      	sub	sp, #32
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	e853 3f00 	ldrex	r3, [r3]
 800d552:	60bb      	str	r3, [r7, #8]
   return(result);
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d55a:	61fb      	str	r3, [r7, #28]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	461a      	mov	r2, r3
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	61bb      	str	r3, [r7, #24]
 800d566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d568:	6979      	ldr	r1, [r7, #20]
 800d56a:	69ba      	ldr	r2, [r7, #24]
 800d56c:	e841 2300 	strex	r3, r2, [r1]
 800d570:	613b      	str	r3, [r7, #16]
   return(result);
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1e6      	bne.n	800d546 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2220      	movs	r2, #32
 800d57c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7ff f8ad 	bl	800c6e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d58a:	bf00      	nop
 800d58c:	3720      	adds	r7, #32
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d592:	b480      	push	{r7}
 800d594:	b083      	sub	sp, #12
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d59a:	bf00      	nop
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <memset>:
 800d5a6:	4402      	add	r2, r0
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d100      	bne.n	800d5b0 <memset+0xa>
 800d5ae:	4770      	bx	lr
 800d5b0:	f803 1b01 	strb.w	r1, [r3], #1
 800d5b4:	e7f9      	b.n	800d5aa <memset+0x4>
	...

0800d5b8 <__libc_init_array>:
 800d5b8:	b570      	push	{r4, r5, r6, lr}
 800d5ba:	4d0d      	ldr	r5, [pc, #52]	@ (800d5f0 <__libc_init_array+0x38>)
 800d5bc:	4c0d      	ldr	r4, [pc, #52]	@ (800d5f4 <__libc_init_array+0x3c>)
 800d5be:	1b64      	subs	r4, r4, r5
 800d5c0:	10a4      	asrs	r4, r4, #2
 800d5c2:	2600      	movs	r6, #0
 800d5c4:	42a6      	cmp	r6, r4
 800d5c6:	d109      	bne.n	800d5dc <__libc_init_array+0x24>
 800d5c8:	4d0b      	ldr	r5, [pc, #44]	@ (800d5f8 <__libc_init_array+0x40>)
 800d5ca:	4c0c      	ldr	r4, [pc, #48]	@ (800d5fc <__libc_init_array+0x44>)
 800d5cc:	f000 f818 	bl	800d600 <_init>
 800d5d0:	1b64      	subs	r4, r4, r5
 800d5d2:	10a4      	asrs	r4, r4, #2
 800d5d4:	2600      	movs	r6, #0
 800d5d6:	42a6      	cmp	r6, r4
 800d5d8:	d105      	bne.n	800d5e6 <__libc_init_array+0x2e>
 800d5da:	bd70      	pop	{r4, r5, r6, pc}
 800d5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5e0:	4798      	blx	r3
 800d5e2:	3601      	adds	r6, #1
 800d5e4:	e7ee      	b.n	800d5c4 <__libc_init_array+0xc>
 800d5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ea:	4798      	blx	r3
 800d5ec:	3601      	adds	r6, #1
 800d5ee:	e7f2      	b.n	800d5d6 <__libc_init_array+0x1e>
 800d5f0:	0800d6a0 	.word	0x0800d6a0
 800d5f4:	0800d6a0 	.word	0x0800d6a0
 800d5f8:	0800d6a0 	.word	0x0800d6a0
 800d5fc:	0800d6c0 	.word	0x0800d6c0

0800d600 <_init>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr

0800d60c <_fini>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	bf00      	nop
 800d610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d612:	bc08      	pop	{r3}
 800d614:	469e      	mov	lr, r3
 800d616:	4770      	bx	lr
