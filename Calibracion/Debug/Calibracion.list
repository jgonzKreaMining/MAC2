
Calibracion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c364  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800c510  0800c510  0001c510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c580  0800c580  00020368  2**0
                  CONTENTS
  4 .ARM          00000008  0800c580  0800c580  0001c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c588  0800c588  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800c588  0800c588  0001c588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5a8  0800c5a8  0001c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800c5ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de0  20000368  0800c914  00020368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001148  0800c914  00021148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY
 13 .debug_info   000531f0  00000000  00000000  000203db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007c5b  00000000  00000000  000735cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d60  00000000  00000000  0007b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016cd  00000000  00000000  0007cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033737  00000000  00000000  0007e655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cf3f  00000000  00000000  000b1d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00124136  00000000  00000000  000deccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d58  00000000  00000000  00202e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0020ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000368 	.word	0x20000368
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800c4f8 	.word	0x0800c4f8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000036c 	.word	0x2000036c
 80001e8:	0800c4f8 	.word	0x0800c4f8

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__gedf2>:
 8000564:	f04f 3cff 	mov.w	ip, #4294967295
 8000568:	e006      	b.n	8000578 <__cmpdf2+0x4>
 800056a:	bf00      	nop

0800056c <__ledf2>:
 800056c:	f04f 0c01 	mov.w	ip, #1
 8000570:	e002      	b.n	8000578 <__cmpdf2+0x4>
 8000572:	bf00      	nop

08000574 <__cmpdf2>:
 8000574:	f04f 0c01 	mov.w	ip, #1
 8000578:	f84d cd04 	str.w	ip, [sp, #-4]!
 800057c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000588:	bf18      	it	ne
 800058a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800058e:	d01b      	beq.n	80005c8 <__cmpdf2+0x54>
 8000590:	b001      	add	sp, #4
 8000592:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000596:	bf0c      	ite	eq
 8000598:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800059c:	ea91 0f03 	teqne	r1, r3
 80005a0:	bf02      	ittt	eq
 80005a2:	ea90 0f02 	teqeq	r0, r2
 80005a6:	2000      	moveq	r0, #0
 80005a8:	4770      	bxeq	lr
 80005aa:	f110 0f00 	cmn.w	r0, #0
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf58      	it	pl
 80005b4:	4299      	cmppl	r1, r3
 80005b6:	bf08      	it	eq
 80005b8:	4290      	cmpeq	r0, r2
 80005ba:	bf2c      	ite	cs
 80005bc:	17d8      	asrcs	r0, r3, #31
 80005be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005c2:	f040 0001 	orr.w	r0, r0, #1
 80005c6:	4770      	bx	lr
 80005c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005d0:	d102      	bne.n	80005d8 <__cmpdf2+0x64>
 80005d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005d6:	d107      	bne.n	80005e8 <__cmpdf2+0x74>
 80005d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e0:	d1d6      	bne.n	8000590 <__cmpdf2+0x1c>
 80005e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005e6:	d0d3      	beq.n	8000590 <__cmpdf2+0x1c>
 80005e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_cdrcmple>:
 80005f0:	4684      	mov	ip, r0
 80005f2:	4610      	mov	r0, r2
 80005f4:	4662      	mov	r2, ip
 80005f6:	468c      	mov	ip, r1
 80005f8:	4619      	mov	r1, r3
 80005fa:	4663      	mov	r3, ip
 80005fc:	e000      	b.n	8000600 <__aeabi_cdcmpeq>
 80005fe:	bf00      	nop

08000600 <__aeabi_cdcmpeq>:
 8000600:	b501      	push	{r0, lr}
 8000602:	f7ff ffb7 	bl	8000574 <__cmpdf2>
 8000606:	2800      	cmp	r0, #0
 8000608:	bf48      	it	mi
 800060a:	f110 0f00 	cmnmi.w	r0, #0
 800060e:	bd01      	pop	{r0, pc}

08000610 <__aeabi_dcmpeq>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff fff4 	bl	8000600 <__aeabi_cdcmpeq>
 8000618:	bf0c      	ite	eq
 800061a:	2001      	moveq	r0, #1
 800061c:	2000      	movne	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmplt>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffea 	bl	8000600 <__aeabi_cdcmpeq>
 800062c:	bf34      	ite	cc
 800062e:	2001      	movcc	r0, #1
 8000630:	2000      	movcs	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmple>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffe0 	bl	8000600 <__aeabi_cdcmpeq>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpge>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffce 	bl	80005f0 <__aeabi_cdrcmple>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpgt>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffc4 	bl	80005f0 <__aeabi_cdrcmple>
 8000668:	bf34      	ite	cc
 800066a:	2001      	movcc	r0, #1
 800066c:	2000      	movcs	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_uldivmod>:
 8000674:	b953      	cbnz	r3, 800068c <__aeabi_uldivmod+0x18>
 8000676:	b94a      	cbnz	r2, 800068c <__aeabi_uldivmod+0x18>
 8000678:	2900      	cmp	r1, #0
 800067a:	bf08      	it	eq
 800067c:	2800      	cmpeq	r0, #0
 800067e:	bf1c      	itt	ne
 8000680:	f04f 31ff 	movne.w	r1, #4294967295
 8000684:	f04f 30ff 	movne.w	r0, #4294967295
 8000688:	f000 b970 	b.w	800096c <__aeabi_idiv0>
 800068c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000690:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000694:	f000 f806 	bl	80006a4 <__udivmoddi4>
 8000698:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a0:	b004      	add	sp, #16
 80006a2:	4770      	bx	lr

080006a4 <__udivmoddi4>:
 80006a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a8:	9e08      	ldr	r6, [sp, #32]
 80006aa:	460d      	mov	r5, r1
 80006ac:	4604      	mov	r4, r0
 80006ae:	460f      	mov	r7, r1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d14a      	bne.n	800074a <__udivmoddi4+0xa6>
 80006b4:	428a      	cmp	r2, r1
 80006b6:	4694      	mov	ip, r2
 80006b8:	d965      	bls.n	8000786 <__udivmoddi4+0xe2>
 80006ba:	fab2 f382 	clz	r3, r2
 80006be:	b143      	cbz	r3, 80006d2 <__udivmoddi4+0x2e>
 80006c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006c4:	f1c3 0220 	rsb	r2, r3, #32
 80006c8:	409f      	lsls	r7, r3
 80006ca:	fa20 f202 	lsr.w	r2, r0, r2
 80006ce:	4317      	orrs	r7, r2
 80006d0:	409c      	lsls	r4, r3
 80006d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006d6:	fa1f f58c 	uxth.w	r5, ip
 80006da:	fbb7 f1fe 	udiv	r1, r7, lr
 80006de:	0c22      	lsrs	r2, r4, #16
 80006e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80006e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006e8:	fb01 f005 	mul.w	r0, r1, r5
 80006ec:	4290      	cmp	r0, r2
 80006ee:	d90a      	bls.n	8000706 <__udivmoddi4+0x62>
 80006f0:	eb1c 0202 	adds.w	r2, ip, r2
 80006f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80006f8:	f080 811c 	bcs.w	8000934 <__udivmoddi4+0x290>
 80006fc:	4290      	cmp	r0, r2
 80006fe:	f240 8119 	bls.w	8000934 <__udivmoddi4+0x290>
 8000702:	3902      	subs	r1, #2
 8000704:	4462      	add	r2, ip
 8000706:	1a12      	subs	r2, r2, r0
 8000708:	b2a4      	uxth	r4, r4
 800070a:	fbb2 f0fe 	udiv	r0, r2, lr
 800070e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000712:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000716:	fb00 f505 	mul.w	r5, r0, r5
 800071a:	42a5      	cmp	r5, r4
 800071c:	d90a      	bls.n	8000734 <__udivmoddi4+0x90>
 800071e:	eb1c 0404 	adds.w	r4, ip, r4
 8000722:	f100 32ff 	add.w	r2, r0, #4294967295
 8000726:	f080 8107 	bcs.w	8000938 <__udivmoddi4+0x294>
 800072a:	42a5      	cmp	r5, r4
 800072c:	f240 8104 	bls.w	8000938 <__udivmoddi4+0x294>
 8000730:	4464      	add	r4, ip
 8000732:	3802      	subs	r0, #2
 8000734:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000738:	1b64      	subs	r4, r4, r5
 800073a:	2100      	movs	r1, #0
 800073c:	b11e      	cbz	r6, 8000746 <__udivmoddi4+0xa2>
 800073e:	40dc      	lsrs	r4, r3
 8000740:	2300      	movs	r3, #0
 8000742:	e9c6 4300 	strd	r4, r3, [r6]
 8000746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074a:	428b      	cmp	r3, r1
 800074c:	d908      	bls.n	8000760 <__udivmoddi4+0xbc>
 800074e:	2e00      	cmp	r6, #0
 8000750:	f000 80ed 	beq.w	800092e <__udivmoddi4+0x28a>
 8000754:	2100      	movs	r1, #0
 8000756:	e9c6 0500 	strd	r0, r5, [r6]
 800075a:	4608      	mov	r0, r1
 800075c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000760:	fab3 f183 	clz	r1, r3
 8000764:	2900      	cmp	r1, #0
 8000766:	d149      	bne.n	80007fc <__udivmoddi4+0x158>
 8000768:	42ab      	cmp	r3, r5
 800076a:	d302      	bcc.n	8000772 <__udivmoddi4+0xce>
 800076c:	4282      	cmp	r2, r0
 800076e:	f200 80f8 	bhi.w	8000962 <__udivmoddi4+0x2be>
 8000772:	1a84      	subs	r4, r0, r2
 8000774:	eb65 0203 	sbc.w	r2, r5, r3
 8000778:	2001      	movs	r0, #1
 800077a:	4617      	mov	r7, r2
 800077c:	2e00      	cmp	r6, #0
 800077e:	d0e2      	beq.n	8000746 <__udivmoddi4+0xa2>
 8000780:	e9c6 4700 	strd	r4, r7, [r6]
 8000784:	e7df      	b.n	8000746 <__udivmoddi4+0xa2>
 8000786:	b902      	cbnz	r2, 800078a <__udivmoddi4+0xe6>
 8000788:	deff      	udf	#255	; 0xff
 800078a:	fab2 f382 	clz	r3, r2
 800078e:	2b00      	cmp	r3, #0
 8000790:	f040 8090 	bne.w	80008b4 <__udivmoddi4+0x210>
 8000794:	1a8a      	subs	r2, r1, r2
 8000796:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800079a:	fa1f fe8c 	uxth.w	lr, ip
 800079e:	2101      	movs	r1, #1
 80007a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80007a4:	fb07 2015 	mls	r0, r7, r5, r2
 80007a8:	0c22      	lsrs	r2, r4, #16
 80007aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007ae:	fb0e f005 	mul.w	r0, lr, r5
 80007b2:	4290      	cmp	r0, r2
 80007b4:	d908      	bls.n	80007c8 <__udivmoddi4+0x124>
 80007b6:	eb1c 0202 	adds.w	r2, ip, r2
 80007ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80007be:	d202      	bcs.n	80007c6 <__udivmoddi4+0x122>
 80007c0:	4290      	cmp	r0, r2
 80007c2:	f200 80cb 	bhi.w	800095c <__udivmoddi4+0x2b8>
 80007c6:	4645      	mov	r5, r8
 80007c8:	1a12      	subs	r2, r2, r0
 80007ca:	b2a4      	uxth	r4, r4
 80007cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80007d0:	fb07 2210 	mls	r2, r7, r0, r2
 80007d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007d8:	fb0e fe00 	mul.w	lr, lr, r0
 80007dc:	45a6      	cmp	lr, r4
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x14e>
 80007e0:	eb1c 0404 	adds.w	r4, ip, r4
 80007e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007e8:	d202      	bcs.n	80007f0 <__udivmoddi4+0x14c>
 80007ea:	45a6      	cmp	lr, r4
 80007ec:	f200 80bb 	bhi.w	8000966 <__udivmoddi4+0x2c2>
 80007f0:	4610      	mov	r0, r2
 80007f2:	eba4 040e 	sub.w	r4, r4, lr
 80007f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007fa:	e79f      	b.n	800073c <__udivmoddi4+0x98>
 80007fc:	f1c1 0720 	rsb	r7, r1, #32
 8000800:	408b      	lsls	r3, r1
 8000802:	fa22 fc07 	lsr.w	ip, r2, r7
 8000806:	ea4c 0c03 	orr.w	ip, ip, r3
 800080a:	fa05 f401 	lsl.w	r4, r5, r1
 800080e:	fa20 f307 	lsr.w	r3, r0, r7
 8000812:	40fd      	lsrs	r5, r7
 8000814:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000818:	4323      	orrs	r3, r4
 800081a:	fbb5 f8f9 	udiv	r8, r5, r9
 800081e:	fa1f fe8c 	uxth.w	lr, ip
 8000822:	fb09 5518 	mls	r5, r9, r8, r5
 8000826:	0c1c      	lsrs	r4, r3, #16
 8000828:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800082c:	fb08 f50e 	mul.w	r5, r8, lr
 8000830:	42a5      	cmp	r5, r4
 8000832:	fa02 f201 	lsl.w	r2, r2, r1
 8000836:	fa00 f001 	lsl.w	r0, r0, r1
 800083a:	d90b      	bls.n	8000854 <__udivmoddi4+0x1b0>
 800083c:	eb1c 0404 	adds.w	r4, ip, r4
 8000840:	f108 3aff 	add.w	sl, r8, #4294967295
 8000844:	f080 8088 	bcs.w	8000958 <__udivmoddi4+0x2b4>
 8000848:	42a5      	cmp	r5, r4
 800084a:	f240 8085 	bls.w	8000958 <__udivmoddi4+0x2b4>
 800084e:	f1a8 0802 	sub.w	r8, r8, #2
 8000852:	4464      	add	r4, ip
 8000854:	1b64      	subs	r4, r4, r5
 8000856:	b29d      	uxth	r5, r3
 8000858:	fbb4 f3f9 	udiv	r3, r4, r9
 800085c:	fb09 4413 	mls	r4, r9, r3, r4
 8000860:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000864:	fb03 fe0e 	mul.w	lr, r3, lr
 8000868:	45a6      	cmp	lr, r4
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x1da>
 800086c:	eb1c 0404 	adds.w	r4, ip, r4
 8000870:	f103 35ff 	add.w	r5, r3, #4294967295
 8000874:	d26c      	bcs.n	8000950 <__udivmoddi4+0x2ac>
 8000876:	45a6      	cmp	lr, r4
 8000878:	d96a      	bls.n	8000950 <__udivmoddi4+0x2ac>
 800087a:	3b02      	subs	r3, #2
 800087c:	4464      	add	r4, ip
 800087e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000882:	fba3 9502 	umull	r9, r5, r3, r2
 8000886:	eba4 040e 	sub.w	r4, r4, lr
 800088a:	42ac      	cmp	r4, r5
 800088c:	46c8      	mov	r8, r9
 800088e:	46ae      	mov	lr, r5
 8000890:	d356      	bcc.n	8000940 <__udivmoddi4+0x29c>
 8000892:	d053      	beq.n	800093c <__udivmoddi4+0x298>
 8000894:	b156      	cbz	r6, 80008ac <__udivmoddi4+0x208>
 8000896:	ebb0 0208 	subs.w	r2, r0, r8
 800089a:	eb64 040e 	sbc.w	r4, r4, lr
 800089e:	fa04 f707 	lsl.w	r7, r4, r7
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	40cc      	lsrs	r4, r1
 80008a6:	4317      	orrs	r7, r2
 80008a8:	e9c6 7400 	strd	r7, r4, [r6]
 80008ac:	4618      	mov	r0, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	f1c3 0120 	rsb	r1, r3, #32
 80008b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008bc:	fa20 f201 	lsr.w	r2, r0, r1
 80008c0:	fa25 f101 	lsr.w	r1, r5, r1
 80008c4:	409d      	lsls	r5, r3
 80008c6:	432a      	orrs	r2, r5
 80008c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008cc:	fa1f fe8c 	uxth.w	lr, ip
 80008d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d4:	fb07 1510 	mls	r5, r7, r0, r1
 80008d8:	0c11      	lsrs	r1, r2, #16
 80008da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008de:	fb00 f50e 	mul.w	r5, r0, lr
 80008e2:	428d      	cmp	r5, r1
 80008e4:	fa04 f403 	lsl.w	r4, r4, r3
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x258>
 80008ea:	eb1c 0101 	adds.w	r1, ip, r1
 80008ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80008f2:	d22f      	bcs.n	8000954 <__udivmoddi4+0x2b0>
 80008f4:	428d      	cmp	r5, r1
 80008f6:	d92d      	bls.n	8000954 <__udivmoddi4+0x2b0>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4461      	add	r1, ip
 80008fc:	1b49      	subs	r1, r1, r5
 80008fe:	b292      	uxth	r2, r2
 8000900:	fbb1 f5f7 	udiv	r5, r1, r7
 8000904:	fb07 1115 	mls	r1, r7, r5, r1
 8000908:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800090c:	fb05 f10e 	mul.w	r1, r5, lr
 8000910:	4291      	cmp	r1, r2
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x282>
 8000914:	eb1c 0202 	adds.w	r2, ip, r2
 8000918:	f105 38ff 	add.w	r8, r5, #4294967295
 800091c:	d216      	bcs.n	800094c <__udivmoddi4+0x2a8>
 800091e:	4291      	cmp	r1, r2
 8000920:	d914      	bls.n	800094c <__udivmoddi4+0x2a8>
 8000922:	3d02      	subs	r5, #2
 8000924:	4462      	add	r2, ip
 8000926:	1a52      	subs	r2, r2, r1
 8000928:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800092c:	e738      	b.n	80007a0 <__udivmoddi4+0xfc>
 800092e:	4631      	mov	r1, r6
 8000930:	4630      	mov	r0, r6
 8000932:	e708      	b.n	8000746 <__udivmoddi4+0xa2>
 8000934:	4639      	mov	r1, r7
 8000936:	e6e6      	b.n	8000706 <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e6fb      	b.n	8000734 <__udivmoddi4+0x90>
 800093c:	4548      	cmp	r0, r9
 800093e:	d2a9      	bcs.n	8000894 <__udivmoddi4+0x1f0>
 8000940:	ebb9 0802 	subs.w	r8, r9, r2
 8000944:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000948:	3b01      	subs	r3, #1
 800094a:	e7a3      	b.n	8000894 <__udivmoddi4+0x1f0>
 800094c:	4645      	mov	r5, r8
 800094e:	e7ea      	b.n	8000926 <__udivmoddi4+0x282>
 8000950:	462b      	mov	r3, r5
 8000952:	e794      	b.n	800087e <__udivmoddi4+0x1da>
 8000954:	4640      	mov	r0, r8
 8000956:	e7d1      	b.n	80008fc <__udivmoddi4+0x258>
 8000958:	46d0      	mov	r8, sl
 800095a:	e77b      	b.n	8000854 <__udivmoddi4+0x1b0>
 800095c:	3d02      	subs	r5, #2
 800095e:	4462      	add	r2, ip
 8000960:	e732      	b.n	80007c8 <__udivmoddi4+0x124>
 8000962:	4608      	mov	r0, r1
 8000964:	e70a      	b.n	800077c <__udivmoddi4+0xd8>
 8000966:	4464      	add	r4, ip
 8000968:	3802      	subs	r0, #2
 800096a:	e742      	b.n	80007f2 <__udivmoddi4+0x14e>

0800096c <__aeabi_idiv0>:
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <_ZN11displayLink11dotPositionEv>:

//////////////////
// DOT POSITION //
//////////////////

uint8_t displayLink::dotPosition(){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	return this->dot;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	781b      	ldrb	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_ZN11displayLink12inputDisplayEih>:

///////////////////
// INPUT DISPLAY //
///////////////////

void displayLink::inputDisplay( int number, uint8_t dot ){
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	4613      	mov	r3, r2
 8000994:	71fb      	strb	r3, [r7, #7]
	this->dot	= dot;																		// Copia posicion del punto
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	701a      	strb	r2, [r3, #0]

	this->milesima	= number/1000;															// Obtiene milesima
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <_ZN11displayLink12inputDisplayEih+0xd0>)
 80009a0:	fb82 1203 	smull	r1, r2, r2, r3
 80009a4:	1192      	asrs	r2, r2, #6
 80009a6:	17db      	asrs	r3, r3, #31
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	705a      	strb	r2, [r3, #1]
	this->centena	= (number - this->milesima*1000)/100;									// Obtiene centena
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <_ZN11displayLink12inputDisplayEih+0xd4>)
 80009b8:	fb03 f202 	mul.w	r2, r3, r2
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4413      	add	r3, r2
 80009c0:	4a27      	ldr	r2, [pc, #156]	; (8000a60 <_ZN11displayLink12inputDisplayEih+0xd8>)
 80009c2:	fb82 1203 	smull	r1, r2, r2, r3
 80009c6:	1152      	asrs	r2, r2, #5
 80009c8:	17db      	asrs	r3, r3, #31
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	709a      	strb	r2, [r3, #2]
	this->decena	= (number - this->milesima*1000 - this->centena*100)/10;				// Obtiene decena
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <_ZN11displayLink12inputDisplayEih+0xd4>)
 80009da:	fb03 f202 	mul.w	r2, r3, r2
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	441a      	add	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	4619      	mov	r1, r3
 80009e8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80009ec:	fb01 f303 	mul.w	r3, r1, r3
 80009f0:	4413      	add	r3, r2
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <_ZN11displayLink12inputDisplayEih+0xdc>)
 80009f4:	fb82 1203 	smull	r1, r2, r2, r3
 80009f8:	1092      	asrs	r2, r2, #2
 80009fa:	17db      	asrs	r3, r3, #31
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	70da      	strb	r2, [r3, #3]
	this->unidad	= (number - this->milesima*1000 - this->centena*100 - this->decena*10);	// Obtiene unidad
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	789b      	ldrb	r3, [r3, #2]
 8000a16:	4619      	mov	r1, r3
 8000a18:	0089      	lsls	r1, r1, #2
 8000a1a:	4419      	add	r1, r3
 8000a1c:	00c9      	lsls	r1, r1, #3
 8000a1e:	1acb      	subs	r3, r1, r3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	78db      	ldrb	r3, [r3, #3]
 8000a34:	4619      	mov	r1, r3
 8000a36:	0149      	lsls	r1, r1, #5
 8000a38:	1ac9      	subs	r1, r1, r3
 8000a3a:	0089      	lsls	r1, r1, #2
 8000a3c:	1acb      	subs	r3, r1, r3
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	711a      	strb	r2, [r3, #4]
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	10624dd3 	.word	0x10624dd3
 8000a5c:	fffffc18 	.word	0xfffffc18
 8000a60:	51eb851f 	.word	0x51eb851f
 8000a64:	66666667 	.word	0x66666667

08000a68 <_ZN11displayLink13numberInDigitEh>:

/////////////////////
// NUMBER IN DIGIT //
/////////////////////

uint8_t displayLink::numberInDigit( uint8_t digit ){
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
	uint8_t number;					// Crea variable

	switch(digit){					// Segun el numero del digito que entra
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d81b      	bhi.n	8000ab4 <_ZN11displayLink13numberInDigitEh+0x4c>
 8000a7c:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <_ZN11displayLink13numberInDigitEh+0x1c>)
 8000a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a82:	bf00      	nop
 8000a84:	08000a95 	.word	0x08000a95
 8000a88:	08000a9d 	.word	0x08000a9d
 8000a8c:	08000aa5 	.word	0x08000aa5
 8000a90:	08000aad 	.word	0x08000aad
	case 1:							// Caso 1
		number	= this->milesima;	// Retorna milesima
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	73fb      	strb	r3, [r7, #15]
		break;
 8000a9a:	e00e      	b.n	8000aba <_ZN11displayLink13numberInDigitEh+0x52>

	case 2:							// Caso 2
		number	= this->centena;	// Retorna centena
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	789b      	ldrb	r3, [r3, #2]
 8000aa0:	73fb      	strb	r3, [r7, #15]
		break;
 8000aa2:	e00a      	b.n	8000aba <_ZN11displayLink13numberInDigitEh+0x52>

	case 3:							// Caso 3
		number	= this->decena;		// Retorna decena
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	78db      	ldrb	r3, [r3, #3]
 8000aa8:	73fb      	strb	r3, [r7, #15]
		break;
 8000aaa:	e006      	b.n	8000aba <_ZN11displayLink13numberInDigitEh+0x52>

	case 4:							// Caso 4
		number	= this->unidad;		// Retorna unidad
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	791b      	ldrb	r3, [r3, #4]
 8000ab0:	73fb      	strb	r3, [r7, #15]
		break;
 8000ab2:	e002      	b.n	8000aba <_ZN11displayLink13numberInDigitEh+0x52>

	default:						// En otro caso
		number	= 0;				// Retorna 0
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ab8:	bf00      	nop
	}
	return number;					// Retorna variable
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_ZN15displayPhysical6enableEb>:

////////////
// ENABLE //
////////////

void displayPhysical::enable( bool onOff ){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
	if ( !onOff ){					//	Si esta apagado
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	f083 0301 	eor.w	r3, r3, #1
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <_ZN15displayPhysical6enableEb+0x20>
		this->flagEnable	= 0;	//	Deshabilita
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	}
	else{							//	Si esta prendido
		this->flagEnable	= 1;	//	Habilita
	}
}
 8000ae6:	e002      	b.n	8000aee <_ZN15displayPhysical6enableEb+0x26>
		this->flagEnable	= 1;	//	Habilita
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_ZN15displayPhysical6setDotEh>:

/////////////
// SET DOT //
/////////////

void displayPhysical::setDot( uint8_t dot ){
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
	this->dot	= dot;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	78fa      	ldrb	r2, [r7, #3]
 8000b0a:	705a      	strb	r2, [r3, #1]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <_ZN15displayPhysical4nextEv>:

//////////
// NEXT //
//////////

uint8_t displayPhysical::next(){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	return this->counter;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	789b      	ldrb	r3, [r3, #2]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_ZN15displayPhysical9setNumberEh>:

////////////////
// SET NUMBER //
////////////////

void displayPhysical::setNumber( uint8_t number ){
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]

	this->dpSignal	= 0;					// Reinicia la señal de Dot
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	739a      	strb	r2, [r3, #14]
	if (this->dot	== this->counter ){		// Si la posicion dot coincide con contador
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	785a      	ldrb	r2, [r3, #1]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	789b      	ldrb	r3, [r3, #2]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d102      	bne.n	8000b54 <_ZN15displayPhysical9setNumberEh+0x24>
		this->dpSignal	= 1;				// Se activa la señal de dot
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2201      	movs	r2, #1
 8000b52:	739a      	strb	r2, [r3, #14]
	}

	switch ( this->counter ){				// Dependiendo del contador
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	789b      	ldrb	r3, [r3, #2]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d84a      	bhi.n	8000bf4 <_ZN15displayPhysical9setNumberEh+0xc4>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <_ZN15displayPhysical9setNumberEh+0x34>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b95 	.word	0x08000b95
 8000b6c:	08000bb5 	.word	0x08000bb5
 8000b70:	08000bd5 	.word	0x08000bd5
	case 1:									//	Caso 1
		this->oneSignal		= 1;			//	Activa led 1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2201      	movs	r2, #1
 8000b78:	70da      	strb	r2, [r3, #3]
		this->twoSignal		= 0;			//	Desactiva led 2
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	711a      	strb	r2, [r3, #4]
		this->threeSignal	= 0;			//	Desactiva led 3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	715a      	strb	r2, [r3, #5]
		this->fourSignal	= 0;			//	Desactiva led 4
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	719a      	strb	r2, [r3, #6]
		this->counter		= 2;			//	Cambia contador a 2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	709a      	strb	r2, [r3, #2]
		break;
 8000b92:	e033      	b.n	8000bfc <_ZN15displayPhysical9setNumberEh+0xcc>

	case 2:									//	Caso 2
		this->oneSignal		= 0;			//	Desactiva led 1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	70da      	strb	r2, [r3, #3]
		this->twoSignal		= 1;			//	Activa led 2
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	711a      	strb	r2, [r3, #4]
		this->threeSignal	= 0;			//	Desactiva led 3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	715a      	strb	r2, [r3, #5]
		this->fourSignal	= 0;			//	Desactiva led 4
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	719a      	strb	r2, [r3, #6]
		this->counter		= 3;			//	Cambia contador a 3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2203      	movs	r2, #3
 8000bb0:	709a      	strb	r2, [r3, #2]
		break;
 8000bb2:	e023      	b.n	8000bfc <_ZN15displayPhysical9setNumberEh+0xcc>

	case 3:									//	Caso 3
		this->oneSignal		= 0;			//	Desactiva led 1
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	70da      	strb	r2, [r3, #3]
		this->twoSignal		= 0;			//	Desactiva led 2
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	711a      	strb	r2, [r3, #4]
		this->threeSignal	= 1;			//	Activa led 3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	715a      	strb	r2, [r3, #5]
		this->fourSignal	= 0;			//	Desactiva led 4
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	719a      	strb	r2, [r3, #6]
		this->counter		= 4;			//	Cambia a contador 4
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2204      	movs	r2, #4
 8000bd0:	709a      	strb	r2, [r3, #2]
		break;
 8000bd2:	e013      	b.n	8000bfc <_ZN15displayPhysical9setNumberEh+0xcc>

	case 4:									//	Caso 4
		this->oneSignal		= 0;			//	Desactiva led 1
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	70da      	strb	r2, [r3, #3]
		this->twoSignal		= 0;			//	Desactiva led 2
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	711a      	strb	r2, [r3, #4]
		this->threeSignal	= 0;			//	Desactiva led 3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	715a      	strb	r2, [r3, #5]
		this->fourSignal	= 1;			//	Activa led 4
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	719a      	strb	r2, [r3, #6]
		this->counter		= 1;			//	Cambia a contador en 1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	709a      	strb	r2, [r3, #2]
		break;
 8000bf2:	e003      	b.n	8000bfc <_ZN15displayPhysical9setNumberEh+0xcc>

	default:
		this->counter	= 1;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	709a      	strb	r2, [r3, #2]
		break;
 8000bfa:	bf00      	nop
	}

	if ( this->flagEnable ){		//	Si el display esta habilitado
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 810d 	beq.w	8000e20 <_ZN15displayPhysical9setNumberEh+0x2f0>

		switch( number ){			//	Segun el numero que ingresa
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	2b09      	cmp	r3, #9
 8000c0a:	f200 80f3 	bhi.w	8000df4 <_ZN15displayPhysical9setNumberEh+0x2c4>
 8000c0e:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <_ZN15displayPhysical9setNumberEh+0xe4>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	08000c69 	.word	0x08000c69
 8000c1c:	08000c95 	.word	0x08000c95
 8000c20:	08000cc1 	.word	0x08000cc1
 8000c24:	08000ced 	.word	0x08000ced
 8000c28:	08000d19 	.word	0x08000d19
 8000c2c:	08000d45 	.word	0x08000d45
 8000c30:	08000d71 	.word	0x08000d71
 8000c34:	08000d9d 	.word	0x08000d9d
 8000c38:	08000dc9 	.word	0x08000dc9

		case 0:						//	Caso 0: asigna pines para marcar 0
			this->aSignal	= 1;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2201      	movs	r2, #1
 8000c52:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 1;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 0;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	735a      	strb	r2, [r3, #13]
			break;
 8000c66:	e0f7      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 1:						//	Caso 1: asigna pines para marcar 1
			this->aSignal	= 0;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 0;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 0;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	735a      	strb	r2, [r3, #13]
			break;
 8000c92:	e0e1      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 2:						//	Caso 2: asigna pines para marcar 2
			this->aSignal	= 1;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2201      	movs	r2, #1
 8000c98:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 0;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 1;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	735a      	strb	r2, [r3, #13]
			break;
 8000cbe:	e0cb      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 3:						//	Caso 3: asigna pines para marcar 3
			this->aSignal	= 1;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	735a      	strb	r2, [r3, #13]
			break;
 8000cea:	e0b5      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 4:						//	Caso 4: asigna pines para marcar 4
			this->aSignal	= 0;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	735a      	strb	r2, [r3, #13]
			break;
 8000d16:	e09f      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 5:						//	Caso 5: asigna pines para marcar 5
			this->aSignal	= 1;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 0;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2201      	movs	r2, #1
 8000d28:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	735a      	strb	r2, [r3, #13]
			break;
 8000d42:	e089      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 6:						//	Caso 6: asigna pines para marcar 6
			this->aSignal	= 1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 1;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	735a      	strb	r2, [r3, #13]
			break;
 8000d6e:	e073      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 7:						//	Caso 7: asigna pines para marcar 7
			this->aSignal	= 1;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 0;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 0;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	735a      	strb	r2, [r3, #13]
			break;
 8000d9a:	e05d      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 8:						//	Caso 8: asigna pines para marcar 8
			this->aSignal	= 1;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	735a      	strb	r2, [r3, #13]
			break;
 8000dc6:	e047      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		case 9:						//	Caso 9: asigna pines para marcar 9
			this->aSignal	= 1;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	735a      	strb	r2, [r3, #13]
			break;
 8000df2:	e031      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>

		default:
			this->aSignal	= 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 0;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 0;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 0;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	735a      	strb	r2, [r3, #13]
			break;
 8000e1e:	e01b      	b.n	8000e58 <_ZN15displayPhysical9setNumberEh+0x328>
		}
	}
	else{						// Si esta deshabiliado no marca display
		this->aSignal	= 0;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	71da      	strb	r2, [r3, #7]
		this->bSignal	= 0;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	721a      	strb	r2, [r3, #8]
		this->cSignal	= 0;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	725a      	strb	r2, [r3, #9]
		this->dSignal	= 0;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	729a      	strb	r2, [r3, #10]
		this->eSignal	= 0;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	72da      	strb	r2, [r3, #11]
		this->fSignal	= 0;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	731a      	strb	r2, [r3, #12]
		this->gSignal	= 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	735a      	strb	r2, [r3, #13]
		this->dpSignal	= 0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	739a      	strb	r2, [r3, #14]
		this->counter	= 0;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	709a      	strb	r2, [r3, #2]
	}
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_ZN15displayPhysical11firstNumberEv>:

//////////////////
// FIRST NUMBER //
//////////////////

bool displayPhysical::firstNumber(){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	return this->oneSignal;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	78db      	ldrb	r3, [r3, #3]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_ZN15displayPhysical12secondNumberEv>:

///////////////////
// SECOND NUMBER //
///////////////////

bool displayPhysical::secondNumber(){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	return this->twoSignal;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	791b      	ldrb	r3, [r3, #4]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_ZN15displayPhysical11thirdNumberEv>:

//////////////////
// THIRD NUMBER //
//////////////////

bool displayPhysical::thirdNumber(){
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	return this->threeSignal;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	795b      	ldrb	r3, [r3, #5]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_ZN15displayPhysical12fourthNumberEv>:

///////////////////
// FOURTH NUMBER //
///////////////////

bool displayPhysical::fourthNumber(){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	return this->fourSignal;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	799b      	ldrb	r3, [r3, #6]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN15displayPhysical4aLedEv>:

///////////
// A LED //
///////////

bool displayPhysical::aLed(){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	return this->aSignal;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	79db      	ldrb	r3, [r3, #7]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_ZN15displayPhysical4bLedEv>:

///////////
// B LED //
///////////

bool displayPhysical::bLed(){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	return this->bSignal;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7a1b      	ldrb	r3, [r3, #8]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN15displayPhysical4cLedEv>:

///////////
// C LED //
///////////

bool displayPhysical::cLed(){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	return this->cSignal;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7a5b      	ldrb	r3, [r3, #9]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_ZN15displayPhysical4dLedEv>:

///////////
// D LED //
///////////

bool displayPhysical::dLed(){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	return this->dSignal;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7a9b      	ldrb	r3, [r3, #10]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_ZN15displayPhysical4eLedEv>:

///////////
// E LED //
///////////

bool displayPhysical::eLed(){
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	return this->eSignal;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7adb      	ldrb	r3, [r3, #11]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_ZN15displayPhysical4fLedEv>:

///////////
// F LED //
///////////

bool displayPhysical::fLed(){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	return this->fSignal;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7b1b      	ldrb	r3, [r3, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN15displayPhysical4gLedEv>:

///////////
// G LED //
///////////

bool displayPhysical::gLed(){
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	return this->gSignal;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7b5b      	ldrb	r3, [r3, #13]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_ZN15displayPhysical5dpLedEv>:

////////////
// DP LED //
////////////

bool displayPhysical::dpLed(){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	return this->dpSignal;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7b9b      	ldrb	r3, [r3, #14]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000f94:	88fa      	ldrh	r2, [r7, #6]
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f9c:	dc01      	bgt.n	8000fa2 <_Z12bytestowritett+0x1e>
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	e003      	b.n	8000faa <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000fa8:	b29b      	uxth	r3, r3
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_Z12EEPROM_WritettPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08e      	sub	sp, #56	; 0x38
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	81fb      	strh	r3, [r7, #14]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	81bb      	strh	r3, [r7, #12]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000fce:	2306      	movs	r3, #6
 8000fd0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	89bb      	ldrh	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	da00      	bge.n	8000fe2 <_Z12EEPROM_WritettPht+0x2a>
 8000fe0:	333f      	adds	r3, #63	; 0x3f
 8000fe2:	119b      	asrs	r3, r3, #6
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	4413      	add	r3, r2
 8000fea:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000fec:	8b7a      	ldrh	r2, [r7, #26]
 8000fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	e034      	b.n	800106c <_Z12EEPROM_WritettPht+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8001002:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	b21a      	sxth	r2, r3
 800100c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8001016:	89ba      	ldrh	r2, [r7, #12]
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffb1 	bl	8000f84 <_Z12bytestowritett>
 8001022:	4603      	mov	r3, r0
 8001024:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8001026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	8af9      	ldrh	r1, [r7, #22]
 800102e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001032:	9202      	str	r2, [sp, #8]
 8001034:	8aba      	ldrh	r2, [r7, #20]
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2302      	movs	r3, #2
 800103c:	460a      	mov	r2, r1
 800103e:	21a0      	movs	r1, #160	; 0xa0
 8001040:	480f      	ldr	r0, [pc, #60]	; (8001080 <_Z12EEPROM_WritettPht+0xc8>)
 8001042:	f005 ffb1 	bl	8006fa8 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8001046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001048:	3301      	adds	r3, #1
 800104a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800104c:	2300      	movs	r3, #0
 800104e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	8abb      	ldrh	r3, [r7, #20]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8001058:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800105a:	8abb      	ldrh	r3, [r7, #20]
 800105c:	4413      	add	r3, r2
 800105e:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8001060:	2005      	movs	r0, #5
 8001062:	f003 fae5 	bl	8004630 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	3301      	adds	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	6a3a      	ldr	r2, [r7, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbc6      	blt.n	8001002 <_Z12EEPROM_WritettPht+0x4a>
	}
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200006d8 	.word	0x200006d8

08001084 <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af04      	add	r7, sp, #16
 800108a:	60ba      	str	r2, [r7, #8]
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	81fb      	strh	r3, [r7, #14]
 8001092:	460b      	mov	r3, r1
 8001094:	81bb      	strh	r3, [r7, #12]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 800109a:	2306      	movs	r3, #6
 800109c:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80010a2:	88fa      	ldrh	r2, [r7, #6]
 80010a4:	89bb      	ldrh	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	da00      	bge.n	80010ae <_Z11EEPROM_ReadttPht+0x2a>
 80010ac:	333f      	adds	r3, #63	; 0x3f
 80010ae:	119b      	asrs	r3, r3, #6
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	4413      	add	r3, r2
 80010b6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 80010b8:	8b7a      	ldrh	r2, [r7, #26]
 80010ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	3301      	adds	r3, #1
 80010c2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
 80010cc:	e031      	b.n	8001132 <_Z11EEPROM_ReadttPht+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80010ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21b      	sxth	r3, r3
 80010e0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80010e2:	89ba      	ldrh	r2, [r7, #12]
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff4b 	bl	8000f84 <_Z12bytestowritett>
 80010ee:	4603      	mov	r3, r0
 80010f0:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80010f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	4413      	add	r3, r2
 80010f8:	8af9      	ldrh	r1, [r7, #22]
 80010fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010fe:	9202      	str	r2, [sp, #8]
 8001100:	8aba      	ldrh	r2, [r7, #20]
 8001102:	9201      	str	r2, [sp, #4]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2302      	movs	r3, #2
 8001108:	460a      	mov	r2, r1
 800110a:	21a0      	movs	r1, #160	; 0xa0
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <_Z11EEPROM_ReadttPht+0xc0>)
 800110e:	f006 f85f 	bl	80071d0 <HAL_I2C_Mem_Read>
		startPage += 1;
 8001112:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001114:	3301      	adds	r3, #1
 8001116:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8001118:	2300      	movs	r3, #0
 800111a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800111c:	88fa      	ldrh	r2, [r7, #6]
 800111e:	8abb      	ldrh	r3, [r7, #20]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8001124:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001126:	8abb      	ldrh	r3, [r7, #20]
 8001128:	4413      	add	r3, r2
 800112a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	3301      	adds	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
 8001132:	8b3b      	ldrh	r3, [r7, #24]
 8001134:	6a3a      	ldr	r2, [r7, #32]
 8001136:	429a      	cmp	r2, r3
 8001138:	dbc9      	blt.n	80010ce <_Z11EEPROM_ReadttPht+0x4a>
	}
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200006d8 	.word	0x200006d8

08001148 <_Z3appv>:

/////////
// APP //
/////////

void app(){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	warming();//reloj
 800114c:	f000 fbca 	bl	80018e4 <_Z7warmingv>
	stability();
 8001150:	f000 f90e 	bl	8001370 <_Z9stabilityv>
	process();
 8001154:	f000 fa16 	bl	8001584 <_Z7processv>
	displayCalib();
 8001158:	f000 f802 	bl	8001160 <_Z12displayCalibv>
	//appContent();
	//appLora();
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <_Z12displayCalibv>:

void displayCalib(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	countDebug++;
 8001164:	4b7b      	ldr	r3, [pc, #492]	; (8001354 <_Z12displayCalibv+0x1f4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a7a      	ldr	r2, [pc, #488]	; (8001354 <_Z12displayCalibv+0x1f4>)
 800116c:	6013      	str	r3, [r2, #0]

	switch(stateProcess){
 800116e:	4b7a      	ldr	r3, [pc, #488]	; (8001358 <_Z12displayCalibv+0x1f8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b08      	cmp	r3, #8
 8001174:	f200 80ea 	bhi.w	800134c <_Z12displayCalibv+0x1ec>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <_Z12displayCalibv+0x20>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	080011a5 	.word	0x080011a5
 8001184:	080011b9 	.word	0x080011b9
 8001188:	080011ef 	.word	0x080011ef
 800118c:	0800120d 	.word	0x0800120d
 8001190:	0800122b 	.word	0x0800122b
 8001194:	08001263 	.word	0x08001263
 8001198:	08001299 	.word	0x08001299
 800119c:	080012e1 	.word	0x080012e1
 80011a0:	08001317 	.word	0x08001317
	case 0:
		flagLedOn	= 0;
 80011a4:	4b6d      	ldr	r3, [pc, #436]	; (800135c <_Z12displayCalibv+0x1fc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 1;
 80011aa:	4b6d      	ldr	r3, [pc, #436]	; (8001360 <_Z12displayCalibv+0x200>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 80011b0:	4b6c      	ldr	r3, [pc, #432]	; (8001364 <_Z12displayCalibv+0x204>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
		break;
 80011b6:	e0ca      	b.n	800134e <_Z12displayCalibv+0x1ee>

	case 1:
		displayLink.inputDisplay(1, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	486a      	ldr	r0, [pc, #424]	; (8001368 <_Z12displayCalibv+0x208>)
 80011be:	f7ff fbe3 	bl	8000988 <_ZN11displayLink12inputDisplayEih>
		flagLedOn	= 0;
 80011c2:	4b66      	ldr	r3, [pc, #408]	; (800135c <_Z12displayCalibv+0x1fc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 80011c8:	4b65      	ldr	r3, [pc, #404]	; (8001360 <_Z12displayCalibv+0x200>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 80011ce:	4b65      	ldr	r3, [pc, #404]	; (8001364 <_Z12displayCalibv+0x204>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'H';
 80011d4:	4b65      	ldr	r3, [pc, #404]	; (800136c <_Z12displayCalibv+0x20c>)
 80011d6:	2248      	movs	r2, #72	; 0x48
 80011d8:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'E';
 80011da:	4b64      	ldr	r3, [pc, #400]	; (800136c <_Z12displayCalibv+0x20c>)
 80011dc:	2245      	movs	r2, #69	; 0x45
 80011de:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'A';
 80011e0:	4b62      	ldr	r3, [pc, #392]	; (800136c <_Z12displayCalibv+0x20c>)
 80011e2:	2241      	movs	r2, #65	; 0x41
 80011e4:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'T';
 80011e6:	4b61      	ldr	r3, [pc, #388]	; (800136c <_Z12displayCalibv+0x20c>)
 80011e8:	2254      	movs	r2, #84	; 0x54
 80011ea:	70da      	strb	r2, [r3, #3]
		break;
 80011ec:	e0af      	b.n	800134e <_Z12displayCalibv+0x1ee>

	case 2:
		displayLink.inputDisplay(2, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2102      	movs	r1, #2
 80011f2:	485d      	ldr	r0, [pc, #372]	; (8001368 <_Z12displayCalibv+0x208>)
 80011f4:	f7ff fbc8 	bl	8000988 <_ZN11displayLink12inputDisplayEih>
		flagLedOn	= 0;
 80011f8:	4b58      	ldr	r3, [pc, #352]	; (800135c <_Z12displayCalibv+0x1fc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 80011fe:	4b58      	ldr	r3, [pc, #352]	; (8001360 <_Z12displayCalibv+0x200>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8001204:	4b57      	ldr	r3, [pc, #348]	; (8001364 <_Z12displayCalibv+0x204>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
		break;
 800120a:	e0a0      	b.n	800134e <_Z12displayCalibv+0x1ee>

	case 3:
		displayLink.inputDisplay(3, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2103      	movs	r1, #3
 8001210:	4855      	ldr	r0, [pc, #340]	; (8001368 <_Z12displayCalibv+0x208>)
 8001212:	f7ff fbb9 	bl	8000988 <_ZN11displayLink12inputDisplayEih>
		flagLedOn	= 0;
 8001216:	4b51      	ldr	r3, [pc, #324]	; (800135c <_Z12displayCalibv+0x1fc>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 800121c:	4b50      	ldr	r3, [pc, #320]	; (8001360 <_Z12displayCalibv+0x200>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8001222:	4b50      	ldr	r3, [pc, #320]	; (8001364 <_Z12displayCalibv+0x204>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
		break;
 8001228:	e091      	b.n	800134e <_Z12displayCalibv+0x1ee>

	case 4:
		displayLink.inputDisplay(9999, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	f242 710f 	movw	r1, #9999	; 0x270f
 8001230:	484d      	ldr	r0, [pc, #308]	; (8001368 <_Z12displayCalibv+0x208>)
 8001232:	f7ff fba9 	bl	8000988 <_ZN11displayLink12inputDisplayEih>
		flagLedOn	= 1;
 8001236:	4b49      	ldr	r3, [pc, #292]	; (800135c <_Z12displayCalibv+0x1fc>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 800123c:	4b48      	ldr	r3, [pc, #288]	; (8001360 <_Z12displayCalibv+0x200>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8001242:	4b48      	ldr	r3, [pc, #288]	; (8001364 <_Z12displayCalibv+0x204>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'E';
 8001248:	4b48      	ldr	r3, [pc, #288]	; (800136c <_Z12displayCalibv+0x20c>)
 800124a:	2245      	movs	r2, #69	; 0x45
 800124c:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'R';
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <_Z12displayCalibv+0x20c>)
 8001250:	2252      	movs	r2, #82	; 0x52
 8001252:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'R';
 8001254:	4b45      	ldr	r3, [pc, #276]	; (800136c <_Z12displayCalibv+0x20c>)
 8001256:	2252      	movs	r2, #82	; 0x52
 8001258:	709a      	strb	r2, [r3, #2]
		calibContent[3] = ' ';
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <_Z12displayCalibv+0x20c>)
 800125c:	2220      	movs	r2, #32
 800125e:	70da      	strb	r2, [r3, #3]
		break;
 8001260:	e075      	b.n	800134e <_Z12displayCalibv+0x1ee>

	case 5:
		displayLink.inputDisplay(5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	4840      	ldr	r0, [pc, #256]	; (8001368 <_Z12displayCalibv+0x208>)
 8001268:	f7ff fb8e 	bl	8000988 <_ZN11displayLink12inputDisplayEih>
		flagLedOn	= 0;
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <_Z12displayCalibv+0x1fc>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 1;
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <_Z12displayCalibv+0x200>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8001278:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <_Z12displayCalibv+0x204>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'S';
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <_Z12displayCalibv+0x20c>)
 8001280:	2253      	movs	r2, #83	; 0x53
 8001282:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'T';
 8001284:	4b39      	ldr	r3, [pc, #228]	; (800136c <_Z12displayCalibv+0x20c>)
 8001286:	2254      	movs	r2, #84	; 0x54
 8001288:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'A';
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <_Z12displayCalibv+0x20c>)
 800128c:	2241      	movs	r2, #65	; 0x41
 800128e:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'R';
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <_Z12displayCalibv+0x20c>)
 8001292:	2252      	movs	r2, #82	; 0x52
 8001294:	70da      	strb	r2, [r3, #3]
		break;
 8001296:	e05a      	b.n	800134e <_Z12displayCalibv+0x1ee>

	case 6:
		displayLink.inputDisplay(6, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2106      	movs	r1, #6
 800129c:	4832      	ldr	r0, [pc, #200]	; (8001368 <_Z12displayCalibv+0x208>)
 800129e:	f7ff fb73 	bl	8000988 <_ZN11displayLink12inputDisplayEih>
		flagLedOn	= 0;
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <_Z12displayCalibv+0x1fc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <_Z12displayCalibv+0x200>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <_Z12displayCalibv+0x204>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]

		flagLedOn	= 0;
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <_Z12displayCalibv+0x1fc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <_Z12displayCalibv+0x200>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <_Z12displayCalibv+0x204>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'C';
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <_Z12displayCalibv+0x20c>)
 80012c8:	2243      	movs	r2, #67	; 0x43
 80012ca:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'A';
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <_Z12displayCalibv+0x20c>)
 80012ce:	2241      	movs	r2, #65	; 0x41
 80012d0:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'L';
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <_Z12displayCalibv+0x20c>)
 80012d4:	224c      	movs	r2, #76	; 0x4c
 80012d6:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'I';
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <_Z12displayCalibv+0x20c>)
 80012da:	2249      	movs	r2, #73	; 0x49
 80012dc:	70da      	strb	r2, [r3, #3]
		break;
 80012de:	e036      	b.n	800134e <_Z12displayCalibv+0x1ee>

	case 7:
		displayLink.inputDisplay(7, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2107      	movs	r1, #7
 80012e4:	4820      	ldr	r0, [pc, #128]	; (8001368 <_Z12displayCalibv+0x208>)
 80012e6:	f7ff fb4f 	bl	8000988 <_ZN11displayLink12inputDisplayEih>
		flagLedOn	= 0;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <_Z12displayCalibv+0x1fc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <_Z12displayCalibv+0x200>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <_Z12displayCalibv+0x204>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'C';
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <_Z12displayCalibv+0x20c>)
 80012fe:	2243      	movs	r2, #67	; 0x43
 8001300:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'A';
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <_Z12displayCalibv+0x20c>)
 8001304:	2241      	movs	r2, #65	; 0x41
 8001306:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'L';
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <_Z12displayCalibv+0x20c>)
 800130a:	224c      	movs	r2, #76	; 0x4c
 800130c:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'I';
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <_Z12displayCalibv+0x20c>)
 8001310:	2249      	movs	r2, #73	; 0x49
 8001312:	70da      	strb	r2, [r3, #3]
		break;
 8001314:	e01b      	b.n	800134e <_Z12displayCalibv+0x1ee>

	case 8:
		displayLink.inputDisplay(8, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2108      	movs	r1, #8
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <_Z12displayCalibv+0x208>)
 800131c:	f7ff fb34 	bl	8000988 <_ZN11displayLink12inputDisplayEih>
		flagLedOn	= 1;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <_Z12displayCalibv+0x1fc>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <_Z12displayCalibv+0x200>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <_Z12displayCalibv+0x204>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'O';
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <_Z12displayCalibv+0x20c>)
 8001334:	224f      	movs	r2, #79	; 0x4f
 8001336:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'K';
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <_Z12displayCalibv+0x20c>)
 800133a:	224b      	movs	r2, #75	; 0x4b
 800133c:	705a      	strb	r2, [r3, #1]
		calibContent[2] = ' ';
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <_Z12displayCalibv+0x20c>)
 8001340:	2220      	movs	r2, #32
 8001342:	709a      	strb	r2, [r3, #2]
		calibContent[3] = ' ';
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <_Z12displayCalibv+0x20c>)
 8001346:	2220      	movs	r2, #32
 8001348:	70da      	strb	r2, [r3, #3]
		break;
 800134a:	e000      	b.n	800134e <_Z12displayCalibv+0x1ee>

	default:
		break;
 800134c:	bf00      	nop
	}
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000400 	.word	0x20000400
 8001358:	20000396 	.word	0x20000396
 800135c:	20000510 	.word	0x20000510
 8001360:	20000511 	.word	0x20000511
 8001364:	20000512 	.word	0x20000512
 8001368:	20001074 	.word	0x20001074
 800136c:	200003fc 	.word	0x200003fc

08001370 <_Z9stabilityv>:

///////////////
// STABILITY //
///////////////

void stability(){
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	af00      	add	r7, sp, #0
	if ( stateAdc == 5 ){				// Si se toma una muestra
 8001374:	4b74      	ldr	r3, [pc, #464]	; (8001548 <_Z9stabilityv+0x1d8>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b05      	cmp	r3, #5
 800137a:	d113      	bne.n	80013a4 <_Z9stabilityv+0x34>
		alphaA_LP	= iir(alphaA);		// Inserta en filtro pasabajos
 800137c:	4b73      	ldr	r3, [pc, #460]	; (800154c <_Z9stabilityv+0x1dc>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fafa 	bl	800197c <_Z3iirs>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b70      	ldr	r3, [pc, #448]	; (8001550 <_Z9stabilityv+0x1e0>)
 800138e:	801a      	strh	r2, [r3, #0]
		alphaB_LP	= iir2(alphaB);		//
 8001390:	4b70      	ldr	r3, [pc, #448]	; (8001554 <_Z9stabilityv+0x1e4>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b21b      	sxth	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fb72 	bl	8001a80 <_Z4iir2s>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <_Z9stabilityv+0x1e8>)
 80013a2:	801a      	strh	r2, [r3, #0]
		//alphaA_BP	= iir3(alphaA);		// Inserta en filtro pasabanda
	}

	switch( stateStability ){
 80013a4:	4b6d      	ldr	r3, [pc, #436]	; (800155c <_Z9stabilityv+0x1ec>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	f200 80ca 	bhi.w	8001542 <_Z9stabilityv+0x1d2>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <_Z9stabilityv+0x44>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013cd 	.word	0x080013cd
 80013b8:	080013f1 	.word	0x080013f1
 80013bc:	0800141d 	.word	0x0800141d
 80013c0:	08001463 	.word	0x08001463
 80013c4:	0800151b 	.word	0x0800151b
 80013c8:	0800152f 	.word	0x0800152f
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		flagFinishStab	= 0;
 80013cc:	4b64      	ldr	r3, [pc, #400]	; (8001560 <_Z9stabilityv+0x1f0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
		flagStability	= 0;
 80013d2:	4b64      	ldr	r3, [pc, #400]	; (8001564 <_Z9stabilityv+0x1f4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
		if ( flagStartStability ){	// Si se indica inciar
 80013d8:	4b63      	ldr	r3, [pc, #396]	; (8001568 <_Z9stabilityv+0x1f8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <_Z9stabilityv+0x78>
			stateStability	= 1;	// Para a S1
 80013e0:	4b5e      	ldr	r3, [pc, #376]	; (800155c <_Z9stabilityv+0x1ec>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateStability	= 0;	// Queda en S0
		}
		break;
 80013e6:	e0ad      	b.n	8001544 <_Z9stabilityv+0x1d4>
			stateStability	= 0;	// Queda en S0
 80013e8:	4b5c      	ldr	r3, [pc, #368]	; (800155c <_Z9stabilityv+0x1ec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
		break;
 80013ee:	e0a9      	b.n	8001544 <_Z9stabilityv+0x1d4>
	//////////////////////
	// S1 - WAIT A TIME //
	//////////////////////

	case 1:
		countStability++;						//
 80013f0:	4b5e      	ldr	r3, [pc, #376]	; (800156c <_Z9stabilityv+0x1fc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a5d      	ldr	r2, [pc, #372]	; (800156c <_Z9stabilityv+0x1fc>)
 80013f8:	6013      	str	r3, [r2, #0]

		if (countStability >= limitStability ){	//
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <_Z9stabilityv+0x1fc>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <_Z9stabilityv+0x200>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d306      	bcc.n	8001414 <_Z9stabilityv+0xa4>
			countStability	= 0;				//
 8001406:	4b59      	ldr	r3, [pc, #356]	; (800156c <_Z9stabilityv+0x1fc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
			stateStability	= 2;				//
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <_Z9stabilityv+0x1ec>)
 800140e:	2202      	movs	r2, #2
 8001410:	701a      	strb	r2, [r3, #0]
		}
		else{									//
			stateStability	= 1;				//
		}
		break;
 8001412:	e097      	b.n	8001544 <_Z9stabilityv+0x1d4>
			stateStability	= 1;				//
 8001414:	4b51      	ldr	r3, [pc, #324]	; (800155c <_Z9stabilityv+0x1ec>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
		break;
 800141a:	e093      	b.n	8001544 <_Z9stabilityv+0x1d4>

	////////////////////
	// S2 - SAVE DATA //
	////////////////////
	case 2:
		if ( stateAdc == 5 ){							// Si llega un dato
 800141c:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <_Z9stabilityv+0x1d8>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d10d      	bne.n	8001440 <_Z9stabilityv+0xd0>
			bufferStabA[ countStability2 ]	= alphaB;	// Guarda valor bruto
 8001424:	4b53      	ldr	r3, [pc, #332]	; (8001574 <_Z9stabilityv+0x204>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <_Z9stabilityv+0x1e4>)
 800142c:	8819      	ldrh	r1, [r3, #0]
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <_Z9stabilityv+0x208>)
 8001430:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			countStability2++;							// Suma 1
 8001434:	4b4f      	ldr	r3, [pc, #316]	; (8001574 <_Z9stabilityv+0x204>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <_Z9stabilityv+0x204>)
 800143e:	701a      	strb	r2, [r3, #0]
		}

		if ( countStability2 >= sizeBufStab ){			// Si pasa limite del buffer
 8001440:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <_Z9stabilityv+0x204>)
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <_Z9stabilityv+0x20c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d306      	bcc.n	800145a <_Z9stabilityv+0xea>
			countStability2	= 0;						// Reinicia contador
 800144c:	4b49      	ldr	r3, [pc, #292]	; (8001574 <_Z9stabilityv+0x204>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
			stateStability	= 3;						// Pasa a S3
 8001452:	4b42      	ldr	r3, [pc, #264]	; (800155c <_Z9stabilityv+0x1ec>)
 8001454:	2203      	movs	r2, #3
 8001456:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateStability	= 2;						// Queda en S2
		}

		break;
 8001458:	e074      	b.n	8001544 <_Z9stabilityv+0x1d4>
			stateStability	= 2;						// Queda en S2
 800145a:	4b40      	ldr	r3, [pc, #256]	; (800155c <_Z9stabilityv+0x1ec>)
 800145c:	2202      	movs	r2, #2
 800145e:	701a      	strb	r2, [r3, #0]
		break;
 8001460:	e070      	b.n	8001544 <_Z9stabilityv+0x1d4>

	case 3:
		for ( countStability2 = 0; countStability2 < sizeBufStab; countStability2++ ){	// Recorre el buffer
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <_Z9stabilityv+0x204>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e031      	b.n	80014ce <_Z9stabilityv+0x15e>
			if ( fabs(bufferStabA[ countStability2 ] - alphaB_LP) < limitStability){	// Si la diferencia entre la muestra y valor Mean es menor al limite de stabilidad
 800146a:	4b42      	ldr	r3, [pc, #264]	; (8001574 <_Z9stabilityv+0x204>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4b41      	ldr	r3, [pc, #260]	; (8001578 <_Z9stabilityv+0x208>)
 8001472:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001476:	461a      	mov	r2, r3
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <_Z9stabilityv+0x1e8>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fb80 	bl	8001b84 <_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001484:	ec55 4b10 	vmov	r4, r5, d0
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <_Z9stabilityv+0x200>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe ffef 	bl	8000470 <__aeabi_ui2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	2101      	movs	r1, #1
 8001498:	460e      	mov	r6, r1
 800149a:	4620      	mov	r0, r4
 800149c:	4629      	mov	r1, r5
 800149e:	f7ff f8c1 	bl	8000624 <__aeabi_dcmplt>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <_Z9stabilityv+0x13c>
 80014a8:	2300      	movs	r3, #0
 80014aa:	461e      	mov	r6, r3
 80014ac:	b2f3      	uxtb	r3, r6
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <_Z9stabilityv+0x14a>
				flagStability	= 1;													// Marca que es estable
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <_Z9stabilityv+0x1f4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e003      	b.n	80014c2 <_Z9stabilityv+0x152>
			}
			else{																		// Si no
				flagStability	= 0;													// Marcaque es inestable
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <_Z9stabilityv+0x1f4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
				break;																	// Sale del ciclo for
 80014c0:	e00b      	b.n	80014da <_Z9stabilityv+0x16a>
		for ( countStability2 = 0; countStability2 < sizeBufStab; countStability2++ ){	// Recorre el buffer
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <_Z9stabilityv+0x204>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <_Z9stabilityv+0x204>)
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <_Z9stabilityv+0x204>)
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <_Z9stabilityv+0x20c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3c7      	bcc.n	800146a <_Z9stabilityv+0xfa>
			}
		}

		countStability3++;								// Suma 1 al contador
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <_Z9stabilityv+0x210>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <_Z9stabilityv+0x210>)
 80014e4:	701a      	strb	r2, [r3, #0]

		if (flagStability){								// Si es estable
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <_Z9stabilityv+0x1f4>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <_Z9stabilityv+0x18c>
			countStability3	= 0;						// Reinicia contador
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <_Z9stabilityv+0x210>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
			stateStability	= 5;						// Pasa a S5
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <_Z9stabilityv+0x1ec>)
 80014f6:	2205      	movs	r2, #5
 80014f8:	701a      	strb	r2, [r3, #0]
			stateStability	= 4;						// Pasa a S4
		}
		else{											// Si no
			stateStability	= 1;						// Vuelve a S1
		}
		break;
 80014fa:	e023      	b.n	8001544 <_Z9stabilityv+0x1d4>
		else if ( countStability3 >= limitRetStab ){	// Si lleva muchos reintentos
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <_Z9stabilityv+0x210>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d906      	bls.n	8001512 <_Z9stabilityv+0x1a2>
			countStability3	= 0;						// Reinicia contador
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <_Z9stabilityv+0x210>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
			stateStability	= 4;						// Pasa a S4
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <_Z9stabilityv+0x1ec>)
 800150c:	2204      	movs	r2, #4
 800150e:	701a      	strb	r2, [r3, #0]
		break;
 8001510:	e018      	b.n	8001544 <_Z9stabilityv+0x1d4>
			stateStability	= 1;						// Vuelve a S1
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <_Z9stabilityv+0x1ec>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
		break;
 8001518:	e014      	b.n	8001544 <_Z9stabilityv+0x1d4>

	case 4:
		flagFinishStab	= 1;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_Z9stabilityv+0x1f0>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
		flagStability	= 0;
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_Z9stabilityv+0x1f4>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
		stateStability	= 0;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <_Z9stabilityv+0x1ec>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
		break;
 800152c:	e00a      	b.n	8001544 <_Z9stabilityv+0x1d4>

	case 5:
		flagFinishStab	= 1;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <_Z9stabilityv+0x1f0>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
		flagStability	= 1;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <_Z9stabilityv+0x1f4>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
		stateStability	= 0;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <_Z9stabilityv+0x1ec>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
		break;
 8001540:	e000      	b.n	8001544 <_Z9stabilityv+0x1d4>

	default:
		break;
 8001542:	bf00      	nop
	}
}
 8001544:	bf00      	nop
 8001546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001548:	20000454 	.word	0x20000454
 800154c:	2000046a 	.word	0x2000046a
 8001550:	200003a2 	.word	0x200003a2
 8001554:	2000046c 	.word	0x2000046c
 8001558:	200003a4 	.word	0x200003a4
 800155c:	200003ae 	.word	0x200003ae
 8001560:	200003bd 	.word	0x200003bd
 8001564:	200003a0 	.word	0x200003a0
 8001568:	200003bc 	.word	0x200003bc
 800156c:	200003b0 	.word	0x200003b0
 8001570:	200003b8 	.word	0x200003b8
 8001574:	200003b4 	.word	0x200003b4
 8001578:	200003c0 	.word	0x200003c0
 800157c:	20000000 	.word	0x20000000
 8001580:	200003b5 	.word	0x200003b5

08001584 <_Z7processv>:
 * S7:	SET FINAL POINT
 * S8:	SAVE IN EEPROM
 * S9:	WAIT FOR RESET PROCESS
 */

void process(){
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0


	switch ( stateProcess ){
 8001588:	4b61      	ldr	r3, [pc, #388]	; (8001710 <_Z7processv+0x18c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b08      	cmp	r3, #8
 800158e:	f200 817f 	bhi.w	8001890 <_Z7processv+0x30c>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <_Z7processv+0x14>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015bd 	.word	0x080015bd
 800159c:	080015cb 	.word	0x080015cb
 80015a0:	080015e9 	.word	0x080015e9
 80015a4:	0800162b 	.word	0x0800162b
 80015a8:	08001681 	.word	0x08001681
 80015ac:	08001699 	.word	0x08001699
 80015b0:	080016b1 	.word	0x080016b1
 80015b4:	08001745 	.word	0x08001745
 80015b8:	08001873 	.word	0x08001873
	////////////////////////
	// S0 - START PROCESS //
	////////////////////////

	case 0:
		flagResetWarming	= 1;	// Indica que empieza el calentaiento del sensor
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <_Z7processv+0x190>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
		stateProcess		= 1;	// Pasa a S1
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <_Z7processv+0x18c>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
		break;
 80015c8:	e163      	b.n	8001892 <_Z7processv+0x30e>
	///////////////////////////
	// S1 - WAIT FOR WARMING //
	///////////////////////////

	case 1:
		flagResetWarming	= 0;	// Reinicia indicador
 80015ca:	4b52      	ldr	r3, [pc, #328]	; (8001714 <_Z7processv+0x190>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

		if ( flagWarmingOk ){		// Si indica que se calentó
 80015d0:	4b51      	ldr	r3, [pc, #324]	; (8001718 <_Z7processv+0x194>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <_Z7processv+0x5c>
			stateProcess	= 2;	// Pasa a S2
 80015d8:	4b4d      	ldr	r3, [pc, #308]	; (8001710 <_Z7processv+0x18c>)
 80015da:	2202      	movs	r2, #2
 80015dc:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 1;	// Queda en S1
		}
		break;
 80015de:	e158      	b.n	8001892 <_Z7processv+0x30e>
			stateProcess	= 1;	// Queda en S1
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <_Z7processv+0x18c>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
		break;
 80015e6:	e154      	b.n	8001892 <_Z7processv+0x30e>
	/////////////////////
	// S2 - SET GROUND //
	/////////////////////

	case 2:
		countProcess++;							// Suma 1 al contador
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <_Z7processv+0x198>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a4b      	ldr	r2, [pc, #300]	; (800171c <_Z7processv+0x198>)
 80015f0:	6013      	str	r3, [r2, #0]

		if ( countProcess >= limitProcess){		// Si se llega al limite de tiempo
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <_Z7processv+0x198>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <_Z7processv+0x19c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d311      	bcc.n	8001622 <_Z7processv+0x9e>
			countProcess		= 0;			// Reinicia contador
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <_Z7processv+0x198>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
			meanAlphaA			= alphaA_LP;	// Guarda valor en filtro
 8001604:	4b47      	ldr	r3, [pc, #284]	; (8001724 <_Z7processv+0x1a0>)
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <_Z7processv+0x1a4>)
 800160a:	801a      	strh	r2, [r3, #0]
			meanAlphaB			= alphaB_LP;
 800160c:	4b47      	ldr	r3, [pc, #284]	; (800172c <_Z7processv+0x1a8>)
 800160e:	881a      	ldrh	r2, [r3, #0]
 8001610:	4b47      	ldr	r3, [pc, #284]	; (8001730 <_Z7processv+0x1ac>)
 8001612:	801a      	strh	r2, [r3, #0]
			flagStartStability	= 1;			//
 8001614:	4b47      	ldr	r3, [pc, #284]	; (8001734 <_Z7processv+0x1b0>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
			stateProcess		= 3;			// Pasa a S3
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <_Z7processv+0x18c>)
 800161c:	2203      	movs	r2, #3
 800161e:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateProcess	= 2;				// Espera en S2
		}
		break;
 8001620:	e137      	b.n	8001892 <_Z7processv+0x30e>
			stateProcess	= 2;				// Espera en S2
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <_Z7processv+0x18c>)
 8001624:	2202      	movs	r2, #2
 8001626:	701a      	strb	r2, [r3, #0]
		break;
 8001628:	e133      	b.n	8001892 <_Z7processv+0x30e>
	//////////////////////////
	// S3 - CHECK STABILITY //
	//////////////////////////

	case 3:
		flagStartStability	= 0;						//
 800162a:	4b42      	ldr	r3, [pc, #264]	; (8001734 <_Z7processv+0x1b0>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]

		if ( flagFinishStab && flagStability){			// Si es estable
 8001630:	4b41      	ldr	r3, [pc, #260]	; (8001738 <_Z7processv+0x1b4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00f      	beq.n	8001658 <_Z7processv+0xd4>
 8001638:	4b40      	ldr	r3, [pc, #256]	; (800173c <_Z7processv+0x1b8>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00b      	beq.n	8001658 <_Z7processv+0xd4>
			meanAlphaA		= alphaA_LP;				//
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <_Z7processv+0x1a0>)
 8001642:	881a      	ldrh	r2, [r3, #0]
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <_Z7processv+0x1a4>)
 8001646:	801a      	strh	r2, [r3, #0]
			meanAlphaB		= alphaB_LP;
 8001648:	4b38      	ldr	r3, [pc, #224]	; (800172c <_Z7processv+0x1a8>)
 800164a:	881a      	ldrh	r2, [r3, #0]
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <_Z7processv+0x1ac>)
 800164e:	801a      	strh	r2, [r3, #0]
			stateProcess	= 5;						// Pasa a S5
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <_Z7processv+0x18c>)
 8001652:	2205      	movs	r2, #5
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e012      	b.n	800167e <_Z7processv+0xfa>
		}
		else if ( flagFinishStab && !flagStability){	// Si es inestable
 8001658:	4b37      	ldr	r3, [pc, #220]	; (8001738 <_Z7processv+0x1b4>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00a      	beq.n	8001676 <_Z7processv+0xf2>
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <_Z7processv+0x1b8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	f083 0301 	eor.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <_Z7processv+0xf2>
			stateProcess	= 4;						// Pasa  S4
 800166e:	4b28      	ldr	r3, [pc, #160]	; (8001710 <_Z7processv+0x18c>)
 8001670:	2204      	movs	r2, #4
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e003      	b.n	800167e <_Z7processv+0xfa>
		}
		else{											// Si no marca
			stateProcess	= 3;						// Espera en S3
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <_Z7processv+0x18c>)
 8001678:	2203      	movs	r2, #3
 800167a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800167c:	e109      	b.n	8001892 <_Z7processv+0x30e>
 800167e:	e108      	b.n	8001892 <_Z7processv+0x30e>
	////////////////////
	// S4 - SET ERROR //
	////////////////////

	case 4:
		if (flagBoton){				// Si se aprieta boton
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <_Z7processv+0x1bc>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <_Z7processv+0x10c>
			stateProcess	= 0;	// Reinicia la maquina
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <_Z7processv+0x18c>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 4;	// Espera en S4
		}
		break;
 800168e:	e100      	b.n	8001892 <_Z7processv+0x30e>
			stateProcess	= 4;	// Espera en S4
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <_Z7processv+0x18c>)
 8001692:	2204      	movs	r2, #4
 8001694:	701a      	strb	r2, [r3, #0]
		break;
 8001696:	e0fc      	b.n	8001892 <_Z7processv+0x30e>
	///////////////////////////
	// S5 - WAIT INSTRUCTION //
	///////////////////////////

	case 5:
		if (flagBoton){				// Si se aprieta el boton
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <_Z7processv+0x1bc>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <_Z7processv+0x124>
			stateProcess	= 6;	// Inicia proceso calibracion
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <_Z7processv+0x18c>)
 80016a2:	2206      	movs	r2, #6
 80016a4:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 5;	// Espera en S5
		}
		break;
 80016a6:	e0f4      	b.n	8001892 <_Z7processv+0x30e>
			stateProcess	= 5;	// Espera en S5
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <_Z7processv+0x18c>)
 80016aa:	2205      	movs	r2, #5
 80016ac:	701a      	strb	r2, [r3, #0]
		break;
 80016ae:	e0f0      	b.n	8001892 <_Z7processv+0x30e>
	/////////////////////////
	// S6 - DETECT INCEASE //
	/////////////////////////

	case 6:
		countProcess++;										// Suma 1 al contador
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <_Z7processv+0x198>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a19      	ldr	r2, [pc, #100]	; (800171c <_Z7processv+0x198>)
 80016b8:	6013      	str	r3, [r2, #0]

		if (alphaB_LP - meanAlphaB >= limitGrowHcl ){ 	// Si se detecta increento
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <_Z7processv+0x1a8>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <_Z7processv+0x1ac>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f240 5235 	movw	r2, #1333	; 0x535
 80016ca:	4293      	cmp	r3, r2
 80016cc:	dd09      	ble.n	80016e2 <_Z7processv+0x15e>
			flagStartStability	= 1;
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <_Z7processv+0x1b0>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
			countProcess	= 0;							// Reinicia contador
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_Z7processv+0x198>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
			stateProcess	= 7;							// Pasa a S7
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <_Z7processv+0x18c>)
 80016dc:	2207      	movs	r2, #7
 80016de:	701a      	strb	r2, [r3, #0]
			stateProcess		= 4;						// Pasa a S4 - ERROR
		}
		else{												// Si aun no se cumple el contador
			stateProcess	= 6;							// Queda en S4
		}
		break;
 80016e0:	e0d7      	b.n	8001892 <_Z7processv+0x30e>
		else if ( countProcess >= limitProcess*6 ){			// Si no se detecta crecimiento
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <_Z7processv+0x19c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <_Z7processv+0x198>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d806      	bhi.n	8001706 <_Z7processv+0x182>
			countProcess		= 0;						// Reinicia contador
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_Z7processv+0x198>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
			stateProcess		= 4;						// Pasa a S4 - ERROR
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <_Z7processv+0x18c>)
 8001700:	2204      	movs	r2, #4
 8001702:	701a      	strb	r2, [r3, #0]
		break;
 8001704:	e0c5      	b.n	8001892 <_Z7processv+0x30e>
			stateProcess	= 6;							// Queda en S4
 8001706:	4b02      	ldr	r3, [pc, #8]	; (8001710 <_Z7processv+0x18c>)
 8001708:	2206      	movs	r2, #6
 800170a:	701a      	strb	r2, [r3, #0]
		break;
 800170c:	e0c1      	b.n	8001892 <_Z7processv+0x30e>
 800170e:	bf00      	nop
 8001710:	20000396 	.word	0x20000396
 8001714:	20000395 	.word	0x20000395
 8001718:	20000394 	.word	0x20000394
 800171c:	20000398 	.word	0x20000398
 8001720:	2000039c 	.word	0x2000039c
 8001724:	200003a2 	.word	0x200003a2
 8001728:	200003a6 	.word	0x200003a6
 800172c:	200003a4 	.word	0x200003a4
 8001730:	200003aa 	.word	0x200003aa
 8001734:	200003bc 	.word	0x200003bc
 8001738:	200003bd 	.word	0x200003bd
 800173c:	200003a0 	.word	0x200003a0
 8001740:	20000a38 	.word	0x20000a38
	/////////////////////////////
	// S7 - WAIT FOR STABILITY //
	/////////////////////////////

	case 7:
		flagStartStability	= 0;							// Reinicia flag
 8001744:	4b55      	ldr	r3, [pc, #340]	; (800189c <_Z7processv+0x318>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
		countProcess++;										// Suma 1 al proceso
 800174a:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <_Z7processv+0x31c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	4a53      	ldr	r2, [pc, #332]	; (80018a0 <_Z7processv+0x31c>)
 8001752:	6013      	str	r3, [r2, #0]

		if ( flagFinishStab && flagStability){				// Si es estable
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <_Z7processv+0x320>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d073      	beq.n	8001844 <_Z7processv+0x2c0>
 800175c:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <_Z7processv+0x324>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d06f      	beq.n	8001844 <_Z7processv+0x2c0>
			meanAlphaA_2	= (alphaA_LP - meanAlphaA)/50;	//
 8001764:	4b51      	ldr	r3, [pc, #324]	; (80018ac <_Z7processv+0x328>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b51      	ldr	r3, [pc, #324]	; (80018b0 <_Z7processv+0x32c>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <_Z7processv+0x330>)
 8001772:	fb82 1203 	smull	r1, r2, r2, r3
 8001776:	1112      	asrs	r2, r2, #4
 8001778:	17db      	asrs	r3, r3, #31
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <_Z7processv+0x334>)
 8001780:	801a      	strh	r2, [r3, #0]
			meanAlphaB_2	= (alphaB_LP - meanAlphaB)/50;	//
 8001782:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <_Z7processv+0x338>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <_Z7processv+0x33c>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	4a49      	ldr	r2, [pc, #292]	; (80018b4 <_Z7processv+0x330>)
 8001790:	fb82 1203 	smull	r1, r2, r2, r3
 8001794:	1112      	asrs	r2, r2, #4
 8001796:	17db      	asrs	r3, r3, #31
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <_Z7processv+0x340>)
 800179e:	801a      	strh	r2, [r3, #0]

			groundSensor0[0]	= meanAlphaB & 0xFF;		//
 80017a0:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <_Z7processv+0x33c>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <_Z7processv+0x344>)
 80017a8:	701a      	strb	r2, [r3, #0]
			groundSensor0[1]	= (meanAlphaB >> 8) & 0xFF;	//
 80017aa:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <_Z7processv+0x33c>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <_Z7processv+0x344>)
 80017b6:	705a      	strb	r2, [r3, #1]
			groundSensor0[2]	= 0;						//
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <_Z7processv+0x344>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	709a      	strb	r2, [r3, #2]
			groundSensor0[3]	= 0;						//
 80017be:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <_Z7processv+0x344>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	70da      	strb	r2, [r3, #3]

			curveSensor0[0]		= meanAlphaB_2 & 0xFF;			//
 80017c4:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <_Z7processv+0x340>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <_Z7processv+0x348>)
 80017cc:	701a      	strb	r2, [r3, #0]
			curveSensor0[1]		= (meanAlphaB_2 >> 8) & 0xFF;	//
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <_Z7processv+0x340>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <_Z7processv+0x348>)
 80017da:	705a      	strb	r2, [r3, #1]
			curveSensor0[2]		= 0;							//
 80017dc:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <_Z7processv+0x348>)
 80017de:	2200      	movs	r2, #0
 80017e0:	709a      	strb	r2, [r3, #2]
			curveSensor0[3]		= 0;							//
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <_Z7processv+0x348>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	70da      	strb	r2, [r3, #3]

			groundSensor1[0]	= meanAlphaA & 0xFF;		//
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <_Z7processv+0x32c>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <_Z7processv+0x34c>)
 80017f0:	701a      	strb	r2, [r3, #0]
			groundSensor1[1]	= (meanAlphaA >> 8) & 0xFF;	//
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <_Z7processv+0x32c>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <_Z7processv+0x34c>)
 80017fe:	705a      	strb	r2, [r3, #1]
			groundSensor1[2]	= 0;						//
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <_Z7processv+0x34c>)
 8001802:	2200      	movs	r2, #0
 8001804:	709a      	strb	r2, [r3, #2]
			groundSensor1[3]	= 0;						//
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <_Z7processv+0x34c>)
 8001808:	2200      	movs	r2, #0
 800180a:	70da      	strb	r2, [r3, #3]

			curveSensor1[0]		= meanAlphaA_2 & 0xFF;			//
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <_Z7processv+0x334>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <_Z7processv+0x350>)
 8001814:	701a      	strb	r2, [r3, #0]
			curveSensor1[1]		= (meanAlphaA_2 >> 8) & 0xFF;	//
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <_Z7processv+0x334>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b29b      	uxth	r3, r3
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <_Z7processv+0x350>)
 8001822:	705a      	strb	r2, [r3, #1]
			curveSensor1[2]		= 0;							//
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <_Z7processv+0x350>)
 8001826:	2200      	movs	r2, #0
 8001828:	709a      	strb	r2, [r3, #2]
			curveSensor1[3]		= 0;							//
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <_Z7processv+0x350>)
 800182c:	2200      	movs	r2, #0
 800182e:	70da      	strb	r2, [r3, #3]

			flagSaveEeprom	= 1;						//
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <_Z7processv+0x354>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
			countProcess	= 0;						//
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <_Z7processv+0x31c>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
			stateProcess	= 8;						// Pasa a S5
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <_Z7processv+0x358>)
 800183e:	2208      	movs	r2, #8
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e015      	b.n	8001870 <_Z7processv+0x2ec>
		}
		else if ( flagFinishStab && !flagStability){	// Si es inestable
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <_Z7processv+0x320>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00d      	beq.n	8001868 <_Z7processv+0x2e4>
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <_Z7processv+0x324>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <_Z7processv+0x2e4>
			countProcess	= 0;						//
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_Z7processv+0x31c>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
			stateProcess	= 4;						// Pasa  S4
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <_Z7processv+0x358>)
 8001862:	2204      	movs	r2, #4
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e003      	b.n	8001870 <_Z7processv+0x2ec>
		}
		else{											// Si no marca
			stateProcess	= 7;						// Espera en S3
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <_Z7processv+0x358>)
 800186a:	2207      	movs	r2, #7
 800186c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800186e:	e010      	b.n	8001892 <_Z7processv+0x30e>
 8001870:	e00f      	b.n	8001892 <_Z7processv+0x30e>
	////////////////////////
	// S8 - FINISH PROCESS//
	////////////////////////

	case 8:
		flagSaveEeprom		= 0;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <_Z7processv+0x354>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
		if (flagBoton){				// Si se aprieta el boton
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <_Z7processv+0x35c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <_Z7processv+0x304>
			stateProcess	= 0;	// Inicia proceso calibracion
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <_Z7processv+0x358>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 8;	// Espera en S5
		}
		break;
 8001886:	e004      	b.n	8001892 <_Z7processv+0x30e>
			stateProcess	= 8;	// Espera en S5
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <_Z7processv+0x358>)
 800188a:	2208      	movs	r2, #8
 800188c:	701a      	strb	r2, [r3, #0]
		break;
 800188e:	e000      	b.n	8001892 <_Z7processv+0x30e>

	default:
		//stateProcess	= 0;
		break;
 8001890:	bf00      	nop
	}

}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	200003bc 	.word	0x200003bc
 80018a0:	20000398 	.word	0x20000398
 80018a4:	200003bd 	.word	0x200003bd
 80018a8:	200003a0 	.word	0x200003a0
 80018ac:	200003a2 	.word	0x200003a2
 80018b0:	200003a6 	.word	0x200003a6
 80018b4:	51eb851f 	.word	0x51eb851f
 80018b8:	200003a8 	.word	0x200003a8
 80018bc:	200003a4 	.word	0x200003a4
 80018c0:	200003aa 	.word	0x200003aa
 80018c4:	200003ac 	.word	0x200003ac
 80018c8:	2000031c 	.word	0x2000031c
 80018cc:	20000324 	.word	0x20000324
 80018d0:	20000340 	.word	0x20000340
 80018d4:	20000348 	.word	0x20000348
 80018d8:	20000513 	.word	0x20000513
 80018dc:	20000396 	.word	0x20000396
 80018e0:	20000a38 	.word	0x20000a38

080018e4 <_Z7warmingv>:

/////////////
// WARMING //
/////////////

void warming(){
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	switch( stateWarming ){
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <_Z7warmingv+0x84>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d02e      	beq.n	800194e <_Z7warmingv+0x6a>
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	dc33      	bgt.n	800195c <_Z7warmingv+0x78>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <_Z7warmingv+0x1a>
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d00f      	beq.n	800191c <_Z7warmingv+0x38>
	case 2:
		flagWarmingOk	= 1;	//
		stateWarming	= 0;	//
		break;
	}
}
 80018fc:	e02e      	b.n	800195c <_Z7warmingv+0x78>
		flagWarmingOk	= 0;		//
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <_Z7warmingv+0x88>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
		if ( flagResetWarming ){	//
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <_Z7warmingv+0x8c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <_Z7warmingv+0x30>
			stateWarming	= 1;	//
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <_Z7warmingv+0x84>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
		break;
 8001912:	e023      	b.n	800195c <_Z7warmingv+0x78>
			stateWarming	= 0;	//
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <_Z7warmingv+0x84>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
		break;
 800191a:	e01f      	b.n	800195c <_Z7warmingv+0x78>
		countWarming++;							//
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <_Z7warmingv+0x90>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_Z7warmingv+0x90>)
 8001924:	6013      	str	r3, [r2, #0]
		flagWarmingOk	= 0;					//
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <_Z7warmingv+0x88>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
		if ( countWarming >= limitWarming ){	//
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_Z7warmingv+0x90>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_Z7warmingv+0x94>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d306      	bcc.n	8001946 <_Z7warmingv+0x62>
			countWarming	= 0;				//
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <_Z7warmingv+0x90>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
			stateWarming	= 2;				//
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <_Z7warmingv+0x84>)
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
		break;
 8001944:	e00a      	b.n	800195c <_Z7warmingv+0x78>
			stateWarming	= 1;				//
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <_Z7warmingv+0x84>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
		break;
 800194c:	e006      	b.n	800195c <_Z7warmingv+0x78>
		flagWarmingOk	= 1;	//
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_Z7warmingv+0x88>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
		stateWarming	= 0;	//
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <_Z7warmingv+0x84>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
		break;
 800195a:	bf00      	nop
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000388 	.word	0x20000388
 800196c:	20000394 	.word	0x20000394
 8001970:	20000395 	.word	0x20000395
 8001974:	2000038c 	.word	0x2000038c
 8001978:	20000390 	.word	0x20000390

0800197c <_Z3iirs>:
	}
	return  value;
}


__int16_t iir(__int16_t NewSample) {
 800197c:	b490      	push	{r4, r7}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
    __int16_t ACoef[NCoef+1] = {
 8001986:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <_Z3iirs+0xf4>)
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001990:	6018      	str	r0, [r3, #0]
 8001992:	3304      	adds	r3, #4
 8001994:	8019      	strh	r1, [r3, #0]
         8294,
        16588,
         8294
    };

    __int16_t BCoef[NCoef+1] = {
 8001996:	4a37      	ldr	r2, [pc, #220]	; (8001a74 <_Z3iirs+0xf8>)
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a0:	6018      	str	r0, [r3, #0]
 80019a2:	3304      	adds	r3, #4
 80019a4:	8019      	strh	r1, [r3, #0]

    static __int16_t x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 80019a6:	2302      	movs	r3, #2
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e014      	b.n	80019d6 <_Z3iirs+0x5a>
       x[n] = x[n-1];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	4a31      	ldr	r2, [pc, #196]	; (8001a78 <_Z3iirs+0xfc>)
 80019b2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80019b6:	4a30      	ldr	r2, [pc, #192]	; (8001a78 <_Z3iirs+0xfc>)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
       y[n] = y[n-1];
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a2e      	ldr	r2, [pc, #184]	; (8001a7c <_Z3iirs+0x100>)
 80019c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019c8:	492c      	ldr	r1, [pc, #176]	; (8001a7c <_Z3iirs+0x100>)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(n=NCoef; n>0; n--) {
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	dce7      	bgt.n	80019ac <_Z3iirs+0x30>
    }

    //Calculate the new output
    x[0] = NewSample;
 80019dc:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <_Z3iirs+0xfc>)
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	8013      	strh	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 80019e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <_Z3iirs+0xfc>)
 80019ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <_Z3iirs+0x100>)
 80019f4:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef; n++)
 80019f6:	2301      	movs	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e022      	b.n	8001a42 <_Z3iirs+0xc6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <_Z3iirs+0x100>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	3320      	adds	r3, #32
 8001a06:	443b      	add	r3, r7
 8001a08:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	491a      	ldr	r1, [pc, #104]	; (8001a78 <_Z3iirs+0xfc>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001a16:	fb03 f100 	mul.w	r1, r3, r0
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	3320      	adds	r3, #32
 8001a20:	443b      	add	r3, r7
 8001a22:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8001a26:	461c      	mov	r4, r3
 8001a28:	4814      	ldr	r0, [pc, #80]	; (8001a7c <_Z3iirs+0x100>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a30:	fb04 f303 	mul.w	r3, r4, r3
 8001a34:	1acb      	subs	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <_Z3iirs+0x100>)
 8001a3a:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef; n++)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	ddd9      	ble.n	80019fc <_Z3iirs+0x80>

    y[0] /= BCoef[0];
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <_Z3iirs+0x100>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a54:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <_Z3iirs+0x100>)
 8001a56:	6013      	str	r3, [r2, #0]

    return y[0] / DCgain;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_Z3iirs+0x100>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da00      	bge.n	8001a62 <_Z3iirs+0xe6>
 8001a60:	3307      	adds	r3, #7
 8001a62:	10db      	asrs	r3, r3, #3
 8001a64:	b21b      	sxth	r3, r3
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc90      	pop	{r4, r7}
 8001a6e:	4770      	bx	lr
 8001a70:	0800c510 	.word	0x0800c510
 8001a74:	0800c518 	.word	0x0800c518
 8001a78:	20000410 	.word	0x20000410
 8001a7c:	20000404 	.word	0x20000404

08001a80 <_Z4iir2s>:

__int16_t iir2(__int16_t NewSample) {
 8001a80:	b490      	push	{r4, r7}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
    __int16_t ACoef2[NCoef+1] = {
 8001a8a:	4a3a      	ldr	r2, [pc, #232]	; (8001b74 <_Z4iir2s+0xf4>)
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a94:	6018      	str	r0, [r3, #0]
 8001a96:	3304      	adds	r3, #4
 8001a98:	8019      	strh	r1, [r3, #0]
         8294,
        16588,
         8294
    };

    __int16_t BCoef2[NCoef+1] = {
 8001a9a:	4a37      	ldr	r2, [pc, #220]	; (8001b78 <_Z4iir2s+0xf8>)
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa4:	6018      	str	r0, [r3, #0]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	8019      	strh	r1, [r3, #0]

    static __int16_t x2[NCoef+1]; //input samples
    int n2;

    //shift the old samples
    for(n2=NCoef; n2>0; n2--) {
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e014      	b.n	8001ada <_Z4iir2s+0x5a>
       x2[n2] = x2[n2-1];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <_Z4iir2s+0xfc>)
 8001ab6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001aba:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <_Z4iir2s+0xfc>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
       y2[n2] = y2[n2-1];
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	4a2e      	ldr	r2, [pc, #184]	; (8001b80 <_Z4iir2s+0x100>)
 8001ac8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001acc:	492c      	ldr	r1, [pc, #176]	; (8001b80 <_Z4iir2s+0x100>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(n2=NCoef; n2>0; n2--) {
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dce7      	bgt.n	8001ab0 <_Z4iir2s+0x30>
    }

    //Calculate the new output
    x2[0] = NewSample;
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <_Z4iir2s+0xfc>)
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	8013      	strh	r3, [r2, #0]
    y2[0] = ACoef2[0] * x2[0];
 8001ae6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <_Z4iir2s+0xfc>)
 8001aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <_Z4iir2s+0x100>)
 8001af8:	6013      	str	r3, [r2, #0]
    for(n2=1; n2<=NCoef; n2++)
 8001afa:	2301      	movs	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e022      	b.n	8001b46 <_Z4iir2s+0xc6>
        y2[0] += ACoef2[n2] * x2[n2] - BCoef2[n2] * y2[n2];
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <_Z4iir2s+0x100>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	3320      	adds	r3, #32
 8001b0a:	443b      	add	r3, r7
 8001b0c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001b10:	4618      	mov	r0, r3
 8001b12:	491a      	ldr	r1, [pc, #104]	; (8001b7c <_Z4iir2s+0xfc>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001b1a:	fb03 f100 	mul.w	r1, r3, r0
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	3320      	adds	r3, #32
 8001b24:	443b      	add	r3, r7
 8001b26:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8001b2a:	461c      	mov	r4, r3
 8001b2c:	4814      	ldr	r0, [pc, #80]	; (8001b80 <_Z4iir2s+0x100>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b34:	fb04 f303 	mul.w	r3, r4, r3
 8001b38:	1acb      	subs	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <_Z4iir2s+0x100>)
 8001b3e:	6013      	str	r3, [r2, #0]
    for(n2=1; n2<=NCoef; n2++)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	3301      	adds	r3, #1
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	ddd9      	ble.n	8001b00 <_Z4iir2s+0x80>

    y2[0] /= BCoef2[0];
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <_Z4iir2s+0x100>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b54:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b58:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <_Z4iir2s+0x100>)
 8001b5a:	6013      	str	r3, [r2, #0]

    return y2[0] / DCgain;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <_Z4iir2s+0x100>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da00      	bge.n	8001b66 <_Z4iir2s+0xe6>
 8001b64:	3307      	adds	r3, #7
 8001b66:	10db      	asrs	r3, r3, #3
 8001b68:	b21b      	sxth	r3, r3
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc90      	pop	{r4, r7}
 8001b72:	4770      	bx	lr
 8001b74:	0800c510 	.word	0x0800c510
 8001b78:	0800c518 	.word	0x0800c518
 8001b7c:	20000424 	.word	0x20000424
 8001b80:	20000418 	.word	0x20000418

08001b84 <_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7fe fc7f 	bl	8000490 <__aeabi_i2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001b9c:	ec45 4b17 	vmov	d7, r4, r5
 8001ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba4:	eef0 0a67 	vmov.f32	s1, s15
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001bb0 <_Z41__static_initialization_and_destruction_0ii>:
        y3[0] += ACoef3[n] * x3[n] - BCoef3[n] * y3[n];

    y3[0] /= BCoef3[0];

    return y3[0] / DCgain2;
}
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d12a      	bne.n	8001c16 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d125      	bne.n	8001c16 <_Z41__static_initialization_and_destruction_0ii+0x66>
int limitLoraApp = 5000/superloop;		//
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001bda:	6013      	str	r3, [r2, #0]
uint32_t limitWarming	= 1200000/superloop;	//superloop son 2[mS, esta operacion son 20 min.
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001bec:	601a      	str	r2, [r3, #0]
const uint32_t limitProcess	= 20000/superloop;	//
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001bf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001c00:	601a      	str	r2, [r3, #0]
const uint32_t limitStability	= 20000/superloop;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001c14:	601a      	str	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	2000035b 	.word	0x2000035b
 8001c28:	20000384 	.word	0x20000384
 8001c2c:	00124f80 	.word	0x00124f80
 8001c30:	20000390 	.word	0x20000390
 8001c34:	2000039c 	.word	0x2000039c
 8001c38:	200003b8 	.word	0x200003b8

08001c3c <_GLOBAL__sub_I_stateContent>:
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff ffb3 	bl	8001bb0 <_Z41__static_initialization_and_destruction_0ii>
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_ZN8fifoUartC1Ev>:
}


/********************/

fifoUart::fifoUart(){
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	this->finalElement = this->elements;	// Cuando se construye la fifo
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f103 020c 	add.w	r2, r3, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	601a      	str	r2, [r3, #0]
											// El puntero de ultimo elemento
											// Apunta al primer elemento de la cadena
}
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_ZN8fifoUart13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

bool fifoUart::insertElement( uint8_t element ){
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]

	if (!(this->bussyFifo)){							// Si no está lleno
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	795b      	ldrb	r3, [r3, #5]
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <_ZN8fifoUart13insertElementEh+0x36>
		*this->finalElement	= element;					// Inserta elemento
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	701a      	strb	r2, [r3, #0]
		this->finalElement = this->finalElement + 1;	// Suma 1 al puntero
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	601a      	str	r2, [r3, #0]
		this->large++;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
	}

	if ( this->finalElement == &this->elements[50] ){	// Si el puntero es el último del array
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	333e      	adds	r3, #62	; 0x3e
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d103      	bne.n	8001cb6 <_ZN8fifoUart13insertElementEh+0x4a>
		this->bussyFifo	= 1;							// Indica que se lleno el buffer
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	715a      	strb	r2, [r3, #5]
 8001cb4:	e002      	b.n	8001cbc <_ZN8fifoUart13insertElementEh+0x50>
	}
	else{												// Si no
		this->bussyFifo	= 0;							// Indica que no se ha llenado
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	715a      	strb	r2, [r3, #5]
	}

	return !(this->bussyFifo);							// 1: Se insertó correctamente
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	795b      	ldrb	r3, [r3, #5]
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
														// 0: No se inserto por Fifo llena
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_ZN8gpsInputC1Ev>:

///////////////////////////
// CONSTRUCTOR GPS INPUT //
///////////////////////////

gpsInput::gpsInput(){
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
};
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	hwBoton();
 8001cec:	f000 fa3c 	bl	8002168 <_Z7hwBotonv>
	hwSht31();
 8001cf0:	f000 f8d8 	bl	8001ea4 <_Z7hwSht31v>
	hwAds1115();
 8001cf4:	f000 f806 	bl	8001d04 <_Z9hwAds1115v>
	hwAnalog();
 8001cf8:	f000 fa98 	bl	800222c <_Z8hwAnalogv>
	hwEEPROM();
 8001cfc:	f000 faf6 	bl	80022ec <_Z8hwEEPROMv>
	//hwGpsIn();
	//hwLoraIn();
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 8001d08:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	f200 80a8 	bhi.w	8001e62 <_Z9hwAds1115v+0x15e>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <_Z9hwAds1115v+0x14>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d31 	.word	0x08001d31
 8001d1c:	08001d65 	.word	0x08001d65
 8001d20:	08001d9b 	.word	0x08001d9b
 8001d24:	08001dcd 	.word	0x08001dcd
 8001d28:	08001df3 	.word	0x08001df3
 8001d2c:	08001e47 	.word	0x08001e47
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 8001d30:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <_Z9hwAds1115v+0x168>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <_Z9hwAds1115v+0x168>)
 8001d38:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <_Z9hwAds1115v+0x168>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <_Z9hwAds1115v+0x16c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	db0a      	blt.n	8001d5c <_Z9hwAds1115v+0x58>
 8001d46:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <_Z9hwAds1115v+0x170>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <_Z9hwAds1115v+0x170>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 8001d54:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 8001d5a:	e083      	b.n	8001e64 <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 8001d5c:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
		break;
 8001d62:	e07f      	b.n	8001e64 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 8001d64:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <_Z9hwAds1115v+0x168>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001d6a:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <_Z9hwAds1115v+0x174>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 8001d72:	2303      	movs	r3, #3
 8001d74:	4a41      	ldr	r2, [pc, #260]	; (8001e7c <_Z9hwAds1115v+0x178>)
 8001d76:	2190      	movs	r1, #144	; 0x90
 8001d78:	4841      	ldr	r0, [pc, #260]	; (8001e80 <_Z9hwAds1115v+0x17c>)
 8001d7a:	f004 ff11 	bl	8006ba0 <HAL_I2C_Master_Transmit_DMA>
 8001d7e:	e005      	b.n	8001d8c <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 8001d80:	2303      	movs	r3, #3
 8001d82:	4a40      	ldr	r2, [pc, #256]	; (8001e84 <_Z9hwAds1115v+0x180>)
 8001d84:	2190      	movs	r1, #144	; 0x90
 8001d86:	483e      	ldr	r0, [pc, #248]	; (8001e80 <_Z9hwAds1115v+0x17c>)
 8001d88:	f004 ff0a 	bl	8006ba0 <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <_Z9hwAds1115v+0x184>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 8001d92:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]

		break;
 8001d98:	e064      	b.n	8001e64 <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <_Z9hwAds1115v+0x188>)
 8001d9e:	2190      	movs	r1, #144	; 0x90
 8001da0:	4837      	ldr	r0, [pc, #220]	; (8001e80 <_Z9hwAds1115v+0x17c>)
 8001da2:	f004 fefd 	bl	8006ba0 <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <_Z9hwAds1115v+0x184>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f083 0301 	eor.w	r3, r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <_Z9hwAds1115v+0x18c>)
 8001db2:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <_Z9hwAds1115v+0x184>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 8001dc2:	e04f      	b.n	8001e64 <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001dc6:	2205      	movs	r2, #5
 8001dc8:	701a      	strb	r2, [r3, #0]
		break;
 8001dca:	e04b      	b.n	8001e64 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <_Z9hwAds1115v+0x168>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <_Z9hwAds1115v+0x168>)
 8001dd4:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <_Z9hwAds1115v+0x168>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <_Z9hwAds1115v+0x190>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	db03      	blt.n	8001dea <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001de4:	2204      	movs	r2, #4
 8001de6:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 8001de8:	e03c      	b.n	8001e64 <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001dec:	2203      	movs	r2, #3
 8001dee:	701a      	strb	r2, [r3, #0]
		break;
 8001df0:	e038      	b.n	8001e64 <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <_Z9hwAds1115v+0x168>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 8001df8:	2302      	movs	r3, #2
 8001dfa:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <_Z9hwAds1115v+0x194>)
 8001dfc:	2190      	movs	r1, #144	; 0x90
 8001dfe:	4820      	ldr	r0, [pc, #128]	; (8001e80 <_Z9hwAds1115v+0x17c>)
 8001e00:	f004 ffe2 	bl	8006dc8 <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <_Z9hwAds1115v+0x174>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <_Z9hwAds1115v+0x122>
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <_Z9hwAds1115v+0x194>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <_Z9hwAds1115v+0x194>)
 8001e16:	785b      	ldrb	r3, [r3, #1]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <_Z9hwAds1115v+0x198>)
 8001e22:	801a      	strh	r2, [r3, #0]
 8001e24:	e00b      	b.n	8001e3e <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <_Z9hwAds1115v+0x194>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <_Z9hwAds1115v+0x194>)
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <_Z9hwAds1115v+0x19c>)
 8001e3c:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001e40:	2205      	movs	r2, #5
 8001e42:	701a      	strb	r2, [r3, #0]
		break;
 8001e44:	e00e      	b.n	8001e64 <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <_Z9hwAds1115v+0x174>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f083 0301 	eor.w	r3, r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <_Z9hwAds1115v+0x174>)
 8001e52:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_Z9hwAds1115v+0x170>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <_Z9hwAds1115v+0x164>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
		break;
 8001e60:	e000      	b.n	8001e64 <_Z9hwAds1115v+0x160>

	default:
		break;
 8001e62:	bf00      	nop
	}
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000454 	.word	0x20000454
 8001e6c:	20000458 	.word	0x20000458
 8001e70:	2000045c 	.word	0x2000045c
 8001e74:	20000007 	.word	0x20000007
 8001e78:	2000046e 	.word	0x2000046e
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	200006d8 	.word	0x200006d8
 8001e84:	2000000c 	.word	0x2000000c
 8001e88:	2000108b 	.word	0x2000108b
 8001e8c:	20000464 	.word	0x20000464
 8001e90:	200004fc 	.word	0x200004fc
 8001e94:	20000460 	.word	0x20000460
 8001e98:	20000468 	.word	0x20000468
 8001e9c:	2000046c 	.word	0x2000046c
 8001ea0:	2000046a 	.word	0x2000046a

08001ea4 <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 8001ea8:	4b9d      	ldr	r3, [pc, #628]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	f200 8130 	bhi.w	8002112 <_Z7hwSht31v+0x26e>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <_Z7hwSht31v+0x14>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ed5 	.word	0x08001ed5
 8001ebc:	08001f09 	.word	0x08001f09
 8001ec0:	08001f49 	.word	0x08001f49
 8001ec4:	08001f8d 	.word	0x08001f8d
 8001ec8:	08001fb3 	.word	0x08001fb3
 8001ecc:	08001fd5 	.word	0x08001fd5
 8001ed0:	080020e1 	.word	0x080020e1
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 8001ed4:	4b93      	ldr	r3, [pc, #588]	; (8002124 <_Z7hwSht31v+0x280>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a92      	ldr	r2, [pc, #584]	; (8002124 <_Z7hwSht31v+0x280>)
 8001edc:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <_Z7hwSht31v+0x280>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b91      	ldr	r3, [pc, #580]	; (8002128 <_Z7hwSht31v+0x284>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	db0a      	blt.n	8001f00 <_Z7hwSht31v+0x5c>
 8001eea:	4b90      	ldr	r3, [pc, #576]	; (800212c <_Z7hwSht31v+0x288>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 8001ef2:	4b8e      	ldr	r3, [pc, #568]	; (800212c <_Z7hwSht31v+0x288>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 8001ef8:	4b89      	ldr	r3, [pc, #548]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 8001efe:	e10c      	b.n	800211a <_Z7hwSht31v+0x276>
			stateSht31	= 0;					// Espera
 8001f00:	4b87      	ldr	r3, [pc, #540]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
		break;
 8001f06:	e108      	b.n	800211a <_Z7hwSht31v+0x276>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 8001f08:	4b86      	ldr	r3, [pc, #536]	; (8002124 <_Z7hwSht31v+0x280>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 8001f0e:	4b88      	ldr	r3, [pc, #544]	; (8002130 <_Z7hwSht31v+0x28c>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b86      	ldr	r3, [pc, #536]	; (8002134 <_Z7hwSht31v+0x290>)
 8001f1a:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 8001f1c:	4b84      	ldr	r3, [pc, #528]	; (8002130 <_Z7hwSht31v+0x28c>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b84      	ldr	r3, [pc, #528]	; (8002134 <_Z7hwSht31v+0x290>)
 8001f24:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 8001f26:	4b84      	ldr	r3, [pc, #528]	; (8002138 <_Z7hwSht31v+0x294>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 8001f2c:	4b83      	ldr	r3, [pc, #524]	; (800213c <_Z7hwSht31v+0x298>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	b299      	uxth	r1, r3
 8001f36:	2302      	movs	r3, #2
 8001f38:	4a7e      	ldr	r2, [pc, #504]	; (8002134 <_Z7hwSht31v+0x290>)
 8001f3a:	4881      	ldr	r0, [pc, #516]	; (8002140 <_Z7hwSht31v+0x29c>)
 8001f3c:	f004 fe30 	bl	8006ba0 <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 8001f40:	4b77      	ldr	r3, [pc, #476]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
		break;
 8001f46:	e0e8      	b.n	800211a <_Z7hwSht31v+0x276>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 8001f48:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <_Z7hwSht31v+0x2a0>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f083 0301 	eor.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <_Z7hwSht31v+0xc2>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 8001f56:	4b78      	ldr	r3, [pc, #480]	; (8002138 <_Z7hwSht31v+0x294>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b79      	ldr	r3, [pc, #484]	; (8002148 <_Z7hwSht31v+0x2a4>)
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e006      	b.n	8001f74 <_Z7hwSht31v+0xd0>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 8001f66:	4b74      	ldr	r3, [pc, #464]	; (8002138 <_Z7hwSht31v+0x294>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	f083 0301 	eor.w	r3, r3, #1
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	4b75      	ldr	r3, [pc, #468]	; (8002148 <_Z7hwSht31v+0x2a4>)
 8001f72:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 8001f74:	4b70      	ldr	r3, [pc, #448]	; (8002138 <_Z7hwSht31v+0x294>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <_Z7hwSht31v+0xe0>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001f7e:	2203      	movs	r2, #3
 8001f80:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 8001f82:	e0ca      	b.n	800211a <_Z7hwSht31v+0x276>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 8001f84:	4b66      	ldr	r3, [pc, #408]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001f86:	2206      	movs	r2, #6
 8001f88:	701a      	strb	r2, [r3, #0]
		break;
 8001f8a:	e0c6      	b.n	800211a <_Z7hwSht31v+0x276>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 8001f8c:	4b65      	ldr	r3, [pc, #404]	; (8002124 <_Z7hwSht31v+0x280>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	4a64      	ldr	r2, [pc, #400]	; (8002124 <_Z7hwSht31v+0x280>)
 8001f94:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <_Z7hwSht31v+0x280>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b6c      	ldr	r3, [pc, #432]	; (800214c <_Z7hwSht31v+0x2a8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	db03      	blt.n	8001faa <_Z7hwSht31v+0x106>
			stateSht31	= 4;					// Pasa a S4
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 8001fa8:	e0b7      	b.n	800211a <_Z7hwSht31v+0x276>
			stateSht31	= 3;					// Espera en S3
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001fac:	2203      	movs	r2, #3
 8001fae:	701a      	strb	r2, [r3, #0]
		break;
 8001fb0:	e0b3      	b.n	800211a <_Z7hwSht31v+0x276>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <_Z7hwSht31v+0x280>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 8001fb8:	4b60      	ldr	r3, [pc, #384]	; (800213c <_Z7hwSht31v+0x298>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	b299      	uxth	r1, r3
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	4a62      	ldr	r2, [pc, #392]	; (8002150 <_Z7hwSht31v+0x2ac>)
 8001fc6:	485e      	ldr	r0, [pc, #376]	; (8002140 <_Z7hwSht31v+0x29c>)
 8001fc8:	f004 fefe 	bl	8006dc8 <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 8001fcc:	4b54      	ldr	r3, [pc, #336]	; (8002120 <_Z7hwSht31v+0x27c>)
 8001fce:	2205      	movs	r2, #5
 8001fd0:	701a      	strb	r2, [r3, #0]
		break;
 8001fd2:	e0a2      	b.n	800211a <_Z7hwSht31v+0x276>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <_Z7hwSht31v+0x2a0>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03d      	beq.n	800205e <_Z7hwSht31v+0x1ba>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <_Z7hwSht31v+0x2ac>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b58      	ldr	r3, [pc, #352]	; (8002150 <_Z7hwSht31v+0x2ac>)
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	4b57      	ldr	r3, [pc, #348]	; (8002154 <_Z7hwSht31v+0x2b0>)
 8001ff8:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <_Z7hwSht31v+0x2b0>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	4a53      	ldr	r2, [pc, #332]	; (8002158 <_Z7hwSht31v+0x2b4>)
 800200a:	fb82 1203 	smull	r1, r2, r2, r3
 800200e:	441a      	add	r2, r3
 8002010:	13d2      	asrs	r2, r2, #15
 8002012:	17db      	asrs	r3, r3, #31
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	b29b      	uxth	r3, r3
 8002018:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 800201c:	b29a      	uxth	r2, r3
 800201e:	4b4d      	ldr	r3, [pc, #308]	; (8002154 <_Z7hwSht31v+0x2b0>)
 8002020:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 8002022:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <_Z7hwSht31v+0x2ac>)
 8002024:	78db      	ldrb	r3, [r3, #3]
 8002026:	b29b      	uxth	r3, r3
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b48      	ldr	r3, [pc, #288]	; (8002150 <_Z7hwSht31v+0x2ac>)
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b49      	ldr	r3, [pc, #292]	; (800215c <_Z7hwSht31v+0x2b8>)
 8002038:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <_Z7hwSht31v+0x2b8>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	4a43      	ldr	r2, [pc, #268]	; (8002158 <_Z7hwSht31v+0x2b4>)
 800204a:	fb82 1203 	smull	r1, r2, r2, r3
 800204e:	441a      	add	r2, r3
 8002050:	13d2      	asrs	r2, r2, #15
 8002052:	17db      	asrs	r3, r3, #31
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b40      	ldr	r3, [pc, #256]	; (800215c <_Z7hwSht31v+0x2b8>)
 800205a:	801a      	strh	r2, [r3, #0]
 800205c:	e03c      	b.n	80020d8 <_Z7hwSht31v+0x234>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 800205e:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <_Z7hwSht31v+0x2ac>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b39      	ldr	r3, [pc, #228]	; (8002150 <_Z7hwSht31v+0x2ac>)
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4413      	add	r3, r2
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <_Z7hwSht31v+0x2bc>)
 8002074:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 8002076:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <_Z7hwSht31v+0x2bc>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	4a34      	ldr	r2, [pc, #208]	; (8002158 <_Z7hwSht31v+0x2b4>)
 8002086:	fb82 1203 	smull	r1, r2, r2, r3
 800208a:	441a      	add	r2, r3
 800208c:	13d2      	asrs	r2, r2, #15
 800208e:	17db      	asrs	r3, r3, #31
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	b29b      	uxth	r3, r3
 8002094:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b31      	ldr	r3, [pc, #196]	; (8002160 <_Z7hwSht31v+0x2bc>)
 800209c:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 800209e:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <_Z7hwSht31v+0x2ac>)
 80020a0:	78db      	ldrb	r3, [r3, #3]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <_Z7hwSht31v+0x2ac>)
 80020aa:	791b      	ldrb	r3, [r3, #4]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <_Z7hwSht31v+0x2c0>)
 80020b4:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 80020b6:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <_Z7hwSht31v+0x2c0>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	4a24      	ldr	r2, [pc, #144]	; (8002158 <_Z7hwSht31v+0x2b4>)
 80020c6:	fb82 1203 	smull	r1, r2, r2, r3
 80020ca:	441a      	add	r2, r3
 80020cc:	13d2      	asrs	r2, r2, #15
 80020ce:	17db      	asrs	r3, r3, #31
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <_Z7hwSht31v+0x2c0>)
 80020d6:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_Z7hwSht31v+0x27c>)
 80020da:	2206      	movs	r2, #6
 80020dc:	701a      	strb	r2, [r3, #0]
		break;
 80020de:	e01c      	b.n	800211a <_Z7hwSht31v+0x276>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <_Z7hwSht31v+0x288>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <_Z7hwSht31v+0x2a0>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <_Z7hwSht31v+0x2a0>)
 80020f2:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_Z7hwSht31v+0x2a0>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <_Z7hwSht31v+0x260>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <_Z7hwSht31v+0x298>)
 80020fe:	2244      	movs	r2, #68	; 0x44
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e002      	b.n	800210a <_Z7hwSht31v+0x266>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <_Z7hwSht31v+0x298>)
 8002106:	2245      	movs	r2, #69	; 0x45
 8002108:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <_Z7hwSht31v+0x27c>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
		break;
 8002110:	e003      	b.n	800211a <_Z7hwSht31v+0x276>

	default:
		stateSht31	= 0;
 8002112:	4b03      	ldr	r3, [pc, #12]	; (8002120 <_Z7hwSht31v+0x27c>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
		break;
 8002118:	bf00      	nop
	}
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000435 	.word	0x20000435
 8002124:	20000438 	.word	0x20000438
 8002128:	2000043c 	.word	0x2000043c
 800212c:	20000007 	.word	0x20000007
 8002130:	20000002 	.word	0x20000002
 8002134:	20000004 	.word	0x20000004
 8002138:	2000108b 	.word	0x2000108b
 800213c:	20000006 	.word	0x20000006
 8002140:	200006d8 	.word	0x200006d8
 8002144:	2000044a 	.word	0x2000044a
 8002148:	200004fc 	.word	0x200004fc
 800214c:	20000440 	.word	0x20000440
 8002150:	20000444 	.word	0x20000444
 8002154:	2000044c 	.word	0x2000044c
 8002158:	80008001 	.word	0x80008001
 800215c:	2000044e 	.word	0x2000044e
 8002160:	20000450 	.word	0x20000450
 8002164:	20000452 	.word	0x20000452

08002168 <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 800216c:	2108      	movs	r1, #8
 800216e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002172:	f004 fc49 	bl	8006a08 <HAL_GPIO_ReadPin>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <_Z7hwBotonv+0xb0>)
 8002184:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <_Z7hwBotonv+0xb4>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d03a      	beq.n	8002204 <_Z7hwBotonv+0x9c>
 800218e:	2b02      	cmp	r3, #2
 8002190:	dc3f      	bgt.n	8002212 <_Z7hwBotonv+0xaa>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <_Z7hwBotonv+0x34>
 8002196:	2b01      	cmp	r3, #1
 8002198:	d012      	beq.n	80021c0 <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 800219a:	e03a      	b.n	8002212 <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <_Z7hwBotonv+0xb8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <_Z7hwBotonv+0xbc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <_Z7hwBotonv+0xb0>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <_Z7hwBotonv+0xb4>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
		break;
 80021b6:	e02d      	b.n	8002214 <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <_Z7hwBotonv+0xb4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
		break;
 80021be:	e029      	b.n	8002214 <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <_Z7hwBotonv+0xb8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <_Z7hwBotonv+0xb8>)
 80021c8:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <_Z7hwBotonv+0xb0>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <_Z7hwBotonv+0x7e>
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <_Z7hwBotonv+0xb8>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <_Z7hwBotonv+0xc0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	db03      	blt.n	80021e6 <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <_Z7hwBotonv+0xb4>)
 80021e0:	2202      	movs	r2, #2
 80021e2:	701a      	strb	r2, [r3, #0]
		break;
 80021e4:	e016      	b.n	8002214 <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <_Z7hwBotonv+0xb0>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	f083 0301 	eor.w	r3, r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <_Z7hwBotonv+0xb4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
		break;
 80021fa:	e00b      	b.n	8002214 <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <_Z7hwBotonv+0xb4>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
		break;
 8002202:	e007      	b.n	8002214 <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <_Z7hwBotonv+0xbc>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <_Z7hwBotonv+0xb4>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
		break;
 8002210:	e000      	b.n	8002214 <_Z7hwBotonv+0xac>
		break;
 8002212:	bf00      	nop
	}
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000042a 	.word	0x2000042a
 800221c:	20000434 	.word	0x20000434
 8002220:	2000042c 	.word	0x2000042c
 8002224:	20000a38 	.word	0x20000a38
 8002228:	20000430 	.word	0x20000430

0800222c <_Z8hwAnalogv>:
 *
 *	INPUT	:	analog[0],	analog[1], flagAnalog
 *	OUTPUT	:	battery, alphaAnalog_A, alphaAnalog_B
 */

void hwAnalog(){
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	switch ( stateAnalog ){
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <_Z8hwAnalogv+0x9c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d025      	beq.n	8002284 <_Z8hwAnalogv+0x58>
 8002238:	2b02      	cmp	r3, #2
 800223a:	dc42      	bgt.n	80022c2 <_Z8hwAnalogv+0x96>
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <_Z8hwAnalogv+0x1a>
 8002240:	2b01      	cmp	r3, #1
 8002242:	d013      	beq.n	800226c <_Z8hwAnalogv+0x40>
		else{												// Si no ha guardado
			stateAnalog		= 2;							// Espera en S2
		}
		break;
	}
}
 8002244:	e03d      	b.n	80022c2 <_Z8hwAnalogv+0x96>
		countAnalog++;						// Suma 1 al contador
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <_Z8hwAnalogv+0xa0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <_Z8hwAnalogv+0xa0>)
 800224e:	6013      	str	r3, [r2, #0]
		if ( countAnalog >= sampleAnalog ){	// Si cumple el tiempo de muestreo
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <_Z8hwAnalogv+0xa0>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <_Z8hwAnalogv+0xa4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	db03      	blt.n	8002264 <_Z8hwAnalogv+0x38>
			stateAnalog	= 1;				// Pasa a S1
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <_Z8hwAnalogv+0x9c>)
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
		break;
 8002262:	e02e      	b.n	80022c2 <_Z8hwAnalogv+0x96>
			stateAnalog	= 0;				// Espera en S0
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <_Z8hwAnalogv+0x9c>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
		break;
 800226a:	e02a      	b.n	80022c2 <_Z8hwAnalogv+0x96>
		countAnalog	= 0;									// Reinicia contador
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <_Z8hwAnalogv+0xa0>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);	// Inicia muestreo
 8002272:	2203      	movs	r2, #3
 8002274:	4917      	ldr	r1, [pc, #92]	; (80022d4 <_Z8hwAnalogv+0xa8>)
 8002276:	4818      	ldr	r0, [pc, #96]	; (80022d8 <_Z8hwAnalogv+0xac>)
 8002278:	f002 fd7c 	bl	8004d74 <HAL_ADC_Start_DMA>
		stateAnalog	= 2;									// Pasa a S2
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <_Z8hwAnalogv+0x9c>)
 800227e:	2202      	movs	r2, #2
 8002280:	701a      	strb	r2, [r3, #0]
		break;
 8002282:	e01e      	b.n	80022c2 <_Z8hwAnalogv+0x96>
		if ( flagAnalog ){									// Si guardo correctamente
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <_Z8hwAnalogv+0xb0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d016      	beq.n	80022ba <_Z8hwAnalogv+0x8e>
			battery			= (analog[0] & 0xFFFF);			// Guarda valor bateria
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <_Z8hwAnalogv+0xa8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <_Z8hwAnalogv+0xb4>)
 8002294:	801a      	strh	r2, [r3, #0]
			alphaAnalog_B	= (analog[0] >> 16 & 0xFFFF);	// Guarda valor Alpha A
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <_Z8hwAnalogv+0xa8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0c1b      	lsrs	r3, r3, #16
 800229c:	b29a      	uxth	r2, r3
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_Z8hwAnalogv+0xb8>)
 80022a0:	801a      	strh	r2, [r3, #0]
			alphaAnalog_A	= (analog[1] & 0xFFFF);			// Guarda valor Alpha B
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <_Z8hwAnalogv+0xa8>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <_Z8hwAnalogv+0xbc>)
 80022aa:	801a      	strh	r2, [r3, #0]
			flagAnalog		= 0;							// Reinicia flag de medicion analogica
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <_Z8hwAnalogv+0xb0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
			stateAnalog		= 0;							// Vuelve a S0
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <_Z8hwAnalogv+0x9c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
		break;
 80022b8:	e002      	b.n	80022c0 <_Z8hwAnalogv+0x94>
			stateAnalog		= 2;							// Espera en S2
 80022ba:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <_Z8hwAnalogv+0x9c>)
 80022bc:	2202      	movs	r2, #2
 80022be:	701a      	strb	r2, [r3, #0]
		break;
 80022c0:	bf00      	nop
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000480 	.word	0x20000480
 80022cc:	20000478 	.word	0x20000478
 80022d0:	2000047c 	.word	0x2000047c
 80022d4:	20001124 	.word	0x20001124
 80022d8:	20000628 	.word	0x20000628
 80022dc:	20001130 	.word	0x20001130
 80022e0:	20000470 	.word	0x20000470
 80022e4:	20000474 	.word	0x20000474
 80022e8:	20000472 	.word	0x20000472

080022ec <_Z8hwEEPROMv>:
 * 1. Indicar cada uno de los pasos de calibracion
 * 2. Guardas datos de forma periodica en EEPROM
 * 3.
 */

void hwEEPROM(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0

	switch ( stateEEPROM ){
 80022f2:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <_Z8hwEEPROMv+0x184>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	f200 80b0 	bhi.w	800245c <_Z8hwEEPROMv+0x170>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <_Z8hwEEPROMv+0x18>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002319 	.word	0x08002319
 8002308:	08002381 	.word	0x08002381
 800230c:	080023e9 	.word	0x080023e9
 8002310:	080023f1 	.word	0x080023f1
 8002314:	08002465 	.word	0x08002465
	// S0 - READ PAGE 0 //
	//////////////////////

	case 0:

		EEPROM_Read(0, 0,  nameSensor_0,	sizeof(nameSensor_0));		// Name of sensor
 8002318:	2314      	movs	r3, #20
 800231a:	4a56      	ldr	r2, [pc, #344]	; (8002474 <_Z8hwEEPROMv+0x188>)
 800231c:	2100      	movs	r1, #0
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe feb0 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 20, idSensor_0,		sizeof(idSensor_0));		// ID of sensor
 8002324:	2304      	movs	r3, #4
 8002326:	4a54      	ldr	r2, [pc, #336]	; (8002478 <_Z8hwEEPROMv+0x18c>)
 8002328:	2114      	movs	r1, #20
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe feaa 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 24, rangeSensor_0,	sizeof(rangeSensor_0));		// Range of sensor
 8002330:	2304      	movs	r3, #4
 8002332:	4a52      	ldr	r2, [pc, #328]	; (800247c <_Z8hwEEPROMv+0x190>)
 8002334:	2118      	movs	r1, #24
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe fea4 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 28, amplifier_10,	sizeof(amplifier_10));		// Amplifier 1 of sensor
 800233c:	2304      	movs	r3, #4
 800233e:	4a50      	ldr	r2, [pc, #320]	; (8002480 <_Z8hwEEPROMv+0x194>)
 8002340:	211c      	movs	r1, #28
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe fe9e 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 32, amplifier_20,	sizeof(amplifier_20));		// Amplifier 2 of sensor
 8002348:	2304      	movs	r3, #4
 800234a:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <_Z8hwEEPROMv+0x198>)
 800234c:	2120      	movs	r1, #32
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe fe98 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 36, groundSensor_0,	sizeof(groundSensor_0));	// N of curve
 8002354:	2304      	movs	r3, #4
 8002356:	4a4c      	ldr	r2, [pc, #304]	; (8002488 <_Z8hwEEPROMv+0x19c>)
 8002358:	2124      	movs	r1, #36	; 0x24
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe fe92 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 40, curveSensor_0,	sizeof(curveSensor_0));		// M of curve
 8002360:	2304      	movs	r3, #4
 8002362:	4a4a      	ldr	r2, [pc, #296]	; (800248c <_Z8hwEEPROMv+0x1a0>)
 8002364:	2128      	movs	r1, #40	; 0x28
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe fe8c 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 44, dateCalib_0,		sizeof(dateCalib_0));		// Date of calibration
 800236c:	230a      	movs	r3, #10
 800236e:	4a48      	ldr	r2, [pc, #288]	; (8002490 <_Z8hwEEPROMv+0x1a4>)
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	2000      	movs	r0, #0
 8002374:	f7fe fe86 	bl	8001084 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 1;												// S1 to read page 1
 8002378:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <_Z8hwEEPROMv+0x184>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
		break;
 800237e:	e072      	b.n	8002466 <_Z8hwEEPROMv+0x17a>
	//////////////////////
	// S1 - READ PAGE 1 //
	//////////////////////

	case 1:
		EEPROM_Read(1, 0,  nameSensor_1,	sizeof(nameSensor_1));		// Name of sensor
 8002380:	2314      	movs	r3, #20
 8002382:	4a44      	ldr	r2, [pc, #272]	; (8002494 <_Z8hwEEPROMv+0x1a8>)
 8002384:	2100      	movs	r1, #0
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe fe7c 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 20, idSensor_1,		sizeof(idSensor_1));		// ID of sensor
 800238c:	2304      	movs	r3, #4
 800238e:	4a42      	ldr	r2, [pc, #264]	; (8002498 <_Z8hwEEPROMv+0x1ac>)
 8002390:	2114      	movs	r1, #20
 8002392:	2001      	movs	r0, #1
 8002394:	f7fe fe76 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 24, rangeSensor_1,	sizeof(rangeSensor_1));		// Range of sensor
 8002398:	2304      	movs	r3, #4
 800239a:	4a40      	ldr	r2, [pc, #256]	; (800249c <_Z8hwEEPROMv+0x1b0>)
 800239c:	2118      	movs	r1, #24
 800239e:	2001      	movs	r0, #1
 80023a0:	f7fe fe70 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 28, amplifier_11,	sizeof(amplifier_11));		// Amplifier 1 of sensor
 80023a4:	2304      	movs	r3, #4
 80023a6:	4a3e      	ldr	r2, [pc, #248]	; (80024a0 <_Z8hwEEPROMv+0x1b4>)
 80023a8:	211c      	movs	r1, #28
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe fe6a 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 32, amplifier_21,	sizeof(amplifier_21));		// Amplifier 2 of sensor
 80023b0:	2304      	movs	r3, #4
 80023b2:	4a3c      	ldr	r2, [pc, #240]	; (80024a4 <_Z8hwEEPROMv+0x1b8>)
 80023b4:	2120      	movs	r1, #32
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7fe fe64 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 36, groundSensor_1,	sizeof(groundSensor_1));	// N of curve
 80023bc:	2304      	movs	r3, #4
 80023be:	4a3a      	ldr	r2, [pc, #232]	; (80024a8 <_Z8hwEEPROMv+0x1bc>)
 80023c0:	2124      	movs	r1, #36	; 0x24
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7fe fe5e 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 40, curveSensor_1,	sizeof(curveSensor_1));		// M of curve
 80023c8:	2304      	movs	r3, #4
 80023ca:	4a38      	ldr	r2, [pc, #224]	; (80024ac <_Z8hwEEPROMv+0x1c0>)
 80023cc:	2128      	movs	r1, #40	; 0x28
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7fe fe58 	bl	8001084 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 44, dateCalib_1,		sizeof(dateCalib_1));		// Date of calibration
 80023d4:	230a      	movs	r3, #10
 80023d6:	4a36      	ldr	r2, [pc, #216]	; (80024b0 <_Z8hwEEPROMv+0x1c4>)
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	2001      	movs	r0, #1
 80023dc:	f7fe fe52 	bl	8001084 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 2;												// S2 to stop of read
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <_Z8hwEEPROMv+0x184>)
 80023e2:	2202      	movs	r2, #2
 80023e4:	701a      	strb	r2, [r3, #0]
		break;
 80023e6:	e03e      	b.n	8002466 <_Z8hwEEPROMv+0x17a>
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
		*/
		stateEEPROM	= 3;								// Pasa a S3
 80023e8:	4b21      	ldr	r3, [pc, #132]	; (8002470 <_Z8hwEEPROMv+0x184>)
 80023ea:	2203      	movs	r2, #3
 80023ec:	701a      	strb	r2, [r3, #0]
		break;
 80023ee:	e03a      	b.n	8002466 <_Z8hwEEPROMv+0x17a>
	// S3 - STOP READING //
	///////////////////////

	case 3:
		uint8_t i;										// Inicia contador
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 80023f0:	2300      	movs	r3, #0
 80023f2:	71fb      	strb	r3, [r7, #7]
 80023f4:	e012      	b.n	800241c <_Z8hwEEPROMv+0x130>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <_Z8hwEEPROMv+0x1c8>)
 80023fa:	5cd2      	ldrb	r2, [r2, r3]
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	491d      	ldr	r1, [pc, #116]	; (8002474 <_Z8hwEEPROMv+0x188>)
 8002400:	5ccb      	ldrb	r3, [r1, r3]
 8002402:	429a      	cmp	r2, r3
 8002404:	d103      	bne.n	800240e <_Z8hwEEPROMv+0x122>
				errorHardware[4]	= 0;				// Si son iguales  no hay error
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <_Z8hwEEPROMv+0x1cc>)
 8002408:	2200      	movs	r2, #0
 800240a:	711a      	strb	r2, [r3, #4]
 800240c:	e003      	b.n	8002416 <_Z8hwEEPROMv+0x12a>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 800240e:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <_Z8hwEEPROMv+0x1cc>)
 8002410:	2201      	movs	r2, #1
 8002412:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8002414:	e005      	b.n	8002422 <_Z8hwEEPROMv+0x136>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	3301      	adds	r3, #1
 800241a:	71fb      	strb	r3, [r7, #7]
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	2b11      	cmp	r3, #17
 8002420:	d9e9      	bls.n	80023f6 <_Z8hwEEPROMv+0x10a>
			}
		}

		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	e012      	b.n	800244e <_Z8hwEEPROMv+0x162>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <_Z8hwEEPROMv+0x1c8>)
 800242c:	5cd2      	ldrb	r2, [r2, r3]
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4910      	ldr	r1, [pc, #64]	; (8002474 <_Z8hwEEPROMv+0x188>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	429a      	cmp	r2, r3
 8002436:	d103      	bne.n	8002440 <_Z8hwEEPROMv+0x154>
				errorHardware[4]	= 0;				// Si son iguales no idnica error
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <_Z8hwEEPROMv+0x1cc>)
 800243a:	2200      	movs	r2, #0
 800243c:	711a      	strb	r2, [r3, #4]
 800243e:	e003      	b.n	8002448 <_Z8hwEEPROMv+0x15c>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <_Z8hwEEPROMv+0x1cc>)
 8002442:	2201      	movs	r2, #1
 8002444:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8002446:	e005      	b.n	8002454 <_Z8hwEEPROMv+0x168>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	3301      	adds	r3, #1
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b11      	cmp	r3, #17
 8002452:	d9e9      	bls.n	8002428 <_Z8hwEEPROMv+0x13c>
			}
		}
		stateEEPROM	= 4;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <_Z8hwEEPROMv+0x184>)
 8002456:	2204      	movs	r2, #4
 8002458:	701a      	strb	r2, [r3, #0]
		break;
 800245a:	e004      	b.n	8002466 <_Z8hwEEPROMv+0x17a>

	case 4:
		break;
	default:
		stateEEPROM	= 0;
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <_Z8hwEEPROMv+0x184>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
		break;
 8002462:	e000      	b.n	8002466 <_Z8hwEEPROMv+0x17a>
		break;
 8002464:	bf00      	nop
	}
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200004f2 	.word	0x200004f2
 8002474:	20000484 	.word	0x20000484
 8002478:	20000498 	.word	0x20000498
 800247c:	2000049c 	.word	0x2000049c
 8002480:	200004a0 	.word	0x200004a0
 8002484:	200004a4 	.word	0x200004a4
 8002488:	200004a8 	.word	0x200004a8
 800248c:	200004ac 	.word	0x200004ac
 8002490:	200004b0 	.word	0x200004b0
 8002494:	200004bc 	.word	0x200004bc
 8002498:	200004d0 	.word	0x200004d0
 800249c:	200004d4 	.word	0x200004d4
 80024a0:	200004d8 	.word	0x200004d8
 80024a4:	200004dc 	.word	0x200004dc
 80024a8:	200004e0 	.word	0x200004e0
 80024ac:	200004e4 	.word	0x200004e4
 80024b0:	200004e8 	.word	0x200004e8
 80024b4:	20000010 	.word	0x20000010
 80024b8:	200004fc 	.word	0x200004fc

080024bc <_Z41__static_initialization_and_destruction_0ii>:
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d137      	bne.n	800253c <_Z41__static_initialization_and_destruction_0ii+0x80>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d132      	bne.n	800253c <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80024e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80024e6:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80024f8:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	2332      	movs	r3, #50	; 0x32
 8002502:	fb93 f3f2 	sdiv	r3, r3, r2
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002508:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	2364      	movs	r3, #100	; 0x64
 8002512:	fb93 f3f2 	sdiv	r3, r3, r2
 8002516:	4a10      	ldr	r2, [pc, #64]	; (8002558 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002518:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	2314      	movs	r3, #20
 8002522:	fb93 f3f2 	sdiv	r3, r3, r2
 8002526:	3b01      	subs	r3, #1
 8002528:	4a0c      	ldr	r2, [pc, #48]	; (800255c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800252a:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	2332      	movs	r3, #50	; 0x32
 8002534:	fb93 f3f2 	sdiv	r3, r3, r2
 8002538:	4a09      	ldr	r2, [pc, #36]	; (8002560 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	2000035b 	.word	0x2000035b
 800254c:	20000430 	.word	0x20000430
 8002550:	2000043c 	.word	0x2000043c
 8002554:	20000440 	.word	0x20000440
 8002558:	2000045c 	.word	0x2000045c
 800255c:	20000460 	.word	0x20000460
 8002560:	2000047c 	.word	0x2000047c

08002564 <_GLOBAL__sub_I_boton>:
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
 8002568:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff ffa5 	bl	80024bc <_Z41__static_initialization_and_destruction_0ii>
 8002572:	bd80      	pop	{r7, pc}

08002574 <_Z8hwOutputv>:

extern uint8_t dateCalib1[10];		// Fecha de calibración

/***** OUTPUT	*****/

void hwOutput(){
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	hwDisplay();
 8002578:	f000 f93e 	bl	80027f8 <_Z9hwDisplayv>
	//hwAlarms();
	//hwLoraOut();
	//hwGpsOut();
	hwLedOut();
 800257c:	f000 f87e 	bl	800267c <_Z8hwLedOutv>
	hwEEPROMOut();
 8002580:	f000 f802 	bl	8002588 <_Z11hwEEPROMOutv>
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <_Z11hwEEPROMOutv>:

////////////
// EEPROM //
////////////

void hwEEPROMOut(){
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	switch( stateEepromOut ){
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <_Z11hwEEPROMOutv+0xcc>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d859      	bhi.n	8002648 <_Z11hwEEPROMOutv+0xc0>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <_Z11hwEEPROMOutv+0x14>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025b1 	.word	0x080025b1
 80025a0:	080025c9 	.word	0x080025c9
 80025a4:	080025d1 	.word	0x080025d1
 80025a8:	08002609 	.word	0x08002609
 80025ac:	08002611 	.word	0x08002611
	case 0:
		if (flagSaveEeprom){
 80025b0:	4b29      	ldr	r3, [pc, #164]	; (8002658 <_Z11hwEEPROMOutv+0xd0>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <_Z11hwEEPROMOutv+0x38>
			stateEepromOut	= 1;
 80025b8:	4b26      	ldr	r3, [pc, #152]	; (8002654 <_Z11hwEEPROMOutv+0xcc>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateEepromOut	= 0;
		}
		break;
 80025be:	e047      	b.n	8002650 <_Z11hwEEPROMOutv+0xc8>
			stateEepromOut	= 0;
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <_Z11hwEEPROMOutv+0xcc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
		break;
 80025c6:	e043      	b.n	8002650 <_Z11hwEEPROMOutv+0xc8>
		/*
		EEPROM_Write(0, 0, nameSensor0, sizeof(nameSensor0));
		EEPROM_Write(0, 20, idSensor0, sizeof(idSensor0));
		EEPROM_Write(0, 24, rangeSensor0, sizeof(rangeSensor0));
		EEPROM_Write(0, 28, amplifier1_0, sizeof(amplifier1_0));*/
		stateEepromOut	= 2;
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <_Z11hwEEPROMOutv+0xcc>)
 80025ca:	2202      	movs	r2, #2
 80025cc:	701a      	strb	r2, [r3, #0]

		break;
 80025ce:	e03f      	b.n	8002650 <_Z11hwEEPROMOutv+0xc8>

	case 2:
		EEPROM_Write(0, 32, amplifier2_0, sizeof(amplifier2_0));
 80025d0:	2304      	movs	r3, #4
 80025d2:	4a22      	ldr	r2, [pc, #136]	; (800265c <_Z11hwEEPROMOutv+0xd4>)
 80025d4:	2120      	movs	r1, #32
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe fcee 	bl	8000fb8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 36, groundSensor0, sizeof(groundSensor0));
 80025dc:	2304      	movs	r3, #4
 80025de:	4a20      	ldr	r2, [pc, #128]	; (8002660 <_Z11hwEEPROMOutv+0xd8>)
 80025e0:	2124      	movs	r1, #36	; 0x24
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fce8 	bl	8000fb8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 40, curveSensor0, sizeof(curveSensor0));
 80025e8:	2304      	movs	r3, #4
 80025ea:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <_Z11hwEEPROMOutv+0xdc>)
 80025ec:	2128      	movs	r1, #40	; 0x28
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe fce2 	bl	8000fb8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 44, dateCalib0, sizeof(dateCalib0));
 80025f4:	230a      	movs	r3, #10
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <_Z11hwEEPROMOutv+0xe0>)
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fcdc 	bl	8000fb8 <_Z12EEPROM_WritettPht>
		stateEepromOut	= 3;
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <_Z11hwEEPROMOutv+0xcc>)
 8002602:	2203      	movs	r2, #3
 8002604:	701a      	strb	r2, [r3, #0]
		break;
 8002606:	e023      	b.n	8002650 <_Z11hwEEPROMOutv+0xc8>
	case 3:/*
		EEPROM_Write(1, 0, nameSensor1, sizeof(nameSensor0));
		EEPROM_Write(1, 20, idSensor1, sizeof(idSensor1));
		EEPROM_Write(1, 24, rangeSensor1, sizeof(rangeSensor0));
		EEPROM_Write(1, 28, amplifier1_1, sizeof(amplifier1_0));*/
		stateEepromOut	= 4;
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <_Z11hwEEPROMOutv+0xcc>)
 800260a:	2204      	movs	r2, #4
 800260c:	701a      	strb	r2, [r3, #0]
		break;
 800260e:	e01f      	b.n	8002650 <_Z11hwEEPROMOutv+0xc8>

	case 4:
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
 8002610:	2304      	movs	r3, #4
 8002612:	4a16      	ldr	r2, [pc, #88]	; (800266c <_Z11hwEEPROMOutv+0xe4>)
 8002614:	2120      	movs	r1, #32
 8002616:	2001      	movs	r0, #1
 8002618:	f7fe fcce 	bl	8000fb8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
 800261c:	2304      	movs	r3, #4
 800261e:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_Z11hwEEPROMOutv+0xe8>)
 8002620:	2124      	movs	r1, #36	; 0x24
 8002622:	2001      	movs	r0, #1
 8002624:	f7fe fcc8 	bl	8000fb8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
 8002628:	2304      	movs	r3, #4
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <_Z11hwEEPROMOutv+0xec>)
 800262c:	2128      	movs	r1, #40	; 0x28
 800262e:	2001      	movs	r0, #1
 8002630:	f7fe fcc2 	bl	8000fb8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
 8002634:	230a      	movs	r3, #10
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <_Z11hwEEPROMOutv+0xf0>)
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	2001      	movs	r0, #1
 800263c:	f7fe fcbc 	bl	8000fb8 <_Z12EEPROM_WritettPht>
		stateEepromOut	= 0;
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <_Z11hwEEPROMOutv+0xcc>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
		break;
 8002646:	e003      	b.n	8002650 <_Z11hwEEPROMOutv+0xc8>

	default:
		stateEepromOut	= 0;
 8002648:	4b02      	ldr	r3, [pc, #8]	; (8002654 <_Z11hwEEPROMOutv+0xcc>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		break;
 800264e:	bf00      	nop
	}
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000514 	.word	0x20000514
 8002658:	20000513 	.word	0x20000513
 800265c:	20000314 	.word	0x20000314
 8002660:	2000031c 	.word	0x2000031c
 8002664:	20000324 	.word	0x20000324
 8002668:	2000032c 	.word	0x2000032c
 800266c:	20000338 	.word	0x20000338
 8002670:	20000340 	.word	0x20000340
 8002674:	20000348 	.word	0x20000348
 8002678:	20000350 	.word	0x20000350

0800267c <_Z8hwLedOutv>:

/////////
// LED //
/////////

void hwLedOut(){
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0

	switch(stateLed){
 8002680:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <_Z8hwLedOutv+0x164>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b03      	cmp	r3, #3
 8002686:	f200 80a5 	bhi.w	80027d4 <_Z8hwLedOutv+0x158>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <_Z8hwLedOutv+0x14>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026a1 	.word	0x080026a1
 8002694:	080026d5 	.word	0x080026d5
 8002698:	08002709 	.word	0x08002709
 800269c:	0800276f 	.word	0x0800276f
	//////////////////
	// S0 - LED OFF //
	//////////////////

	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2110      	movs	r1, #16
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a8:	f004 f9c6 	bl	8006a38 <HAL_GPIO_WritePin>

		if ( flagLedOn ){			//
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <_Z8hwLedOutv+0x168>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <_Z8hwLedOutv+0x40>
			stateLed	= 1;		//
 80026b4:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
			stateLed	= 2;		//
		}
		else{						//
			stateLed	= 0;		//
		}
		break;
 80026ba:	e08f      	b.n	80027dc <_Z8hwLedOutv+0x160>
		else if ( flagLedFreq ){	//
 80026bc:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <_Z8hwLedOutv+0x16c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <_Z8hwLedOutv+0x50>
			stateLed	= 2;		//
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]
		break;
 80026ca:	e087      	b.n	80027dc <_Z8hwLedOutv+0x160>
			stateLed	= 0;		//
 80026cc:	4b44      	ldr	r3, [pc, #272]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
		break;
 80026d2:	e083      	b.n	80027dc <_Z8hwLedOutv+0x160>
	/////////////////
	// S1 - LED ON //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80026d4:	2201      	movs	r2, #1
 80026d6:	2110      	movs	r1, #16
 80026d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026dc:	f004 f9ac 	bl	8006a38 <HAL_GPIO_WritePin>

		if ( flagLedOff ){			//
 80026e0:	4b42      	ldr	r3, [pc, #264]	; (80027ec <_Z8hwLedOutv+0x170>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <_Z8hwLedOutv+0x74>
			stateLed	= 0;		//
 80026e8:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
			stateLed	= 2;		//
		}
		else{						//
			stateLed	= 1;		//
		}
		break;
 80026ee:	e075      	b.n	80027dc <_Z8hwLedOutv+0x160>
		else if ( flagLedFreq ){	//
 80026f0:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <_Z8hwLedOutv+0x16c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <_Z8hwLedOutv+0x84>
			stateLed	= 2;		//
 80026f8:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80026fa:	2202      	movs	r2, #2
 80026fc:	701a      	strb	r2, [r3, #0]
		break;
 80026fe:	e06d      	b.n	80027dc <_Z8hwLedOutv+0x160>
			stateLed	= 1;		//
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <_Z8hwLedOutv+0x164>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
		break;
 8002706:	e069      	b.n	80027dc <_Z8hwLedOutv+0x160>
	///////////////////
	// S2 - LED FREQ //
	///////////////////

	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002708:	2201      	movs	r2, #1
 800270a:	2110      	movs	r1, #16
 800270c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002710:	f004 f992 	bl	8006a38 <HAL_GPIO_WritePin>

		countLedOut++;							//
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <_Z8hwLedOutv+0x174>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <_Z8hwLedOutv+0x174>)
 800271e:	801a      	strh	r2, [r3, #0]

		if ( flagLedOn ){						//
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <_Z8hwLedOutv+0x168>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <_Z8hwLedOutv+0xba>
			countLedOut	= 0;					//
 8002728:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <_Z8hwLedOutv+0x174>)
 800272a:	2200      	movs	r2, #0
 800272c:	801a      	strh	r2, [r3, #0]
			stateLed	= 1;					//
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <_Z8hwLedOutv+0x164>)
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
			stateLed	= 3;					//
		}
		else{									//
			stateLed	= 2;					//
		}
		break;
 8002734:	e052      	b.n	80027dc <_Z8hwLedOutv+0x160>
		else if ( flagLedOff ){					//
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <_Z8hwLedOutv+0x170>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <_Z8hwLedOutv+0xd0>
			countLedOut	= 0;					//
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <_Z8hwLedOutv+0x174>)
 8002740:	2200      	movs	r2, #0
 8002742:	801a      	strh	r2, [r3, #0]
			stateLed	= 0;					//
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <_Z8hwLedOutv+0x164>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
		break;
 800274a:	e047      	b.n	80027dc <_Z8hwLedOutv+0x160>
		else if ( countLedOut >= limitLed ){	//
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <_Z8hwLedOutv+0x174>)
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <_Z8hwLedOutv+0x178>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d306      	bcc.n	8002766 <_Z8hwLedOutv+0xea>
			countLedOut	= 0;					//
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <_Z8hwLedOutv+0x174>)
 800275a:	2200      	movs	r2, #0
 800275c:	801a      	strh	r2, [r3, #0]
			stateLed	= 3;					//
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <_Z8hwLedOutv+0x164>)
 8002760:	2203      	movs	r2, #3
 8002762:	701a      	strb	r2, [r3, #0]
		break;
 8002764:	e03a      	b.n	80027dc <_Z8hwLedOutv+0x160>
			stateLed	= 2;					//
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <_Z8hwLedOutv+0x164>)
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]
		break;
 800276c:	e036      	b.n	80027dc <_Z8hwLedOutv+0x160>
	///////////////////
	// S3 - LED FREQ //
	///////////////////

	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	2110      	movs	r1, #16
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f004 f95f 	bl	8006a38 <HAL_GPIO_WritePin>

		countLedOut++;							//
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <_Z8hwLedOutv+0x174>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <_Z8hwLedOutv+0x174>)
 8002784:	801a      	strh	r2, [r3, #0]

		if ( flagLedOn ){						//
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <_Z8hwLedOutv+0x168>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <_Z8hwLedOutv+0x120>
			countLedOut	= 0;					//
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <_Z8hwLedOutv+0x174>)
 8002790:	2200      	movs	r2, #0
 8002792:	801a      	strh	r2, [r3, #0]
			stateLed	= 1;					//
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <_Z8hwLedOutv+0x164>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
			stateLed	= 3;					//
		}
		else{									//
			stateLed	= 2;					//
		}
		break;
 800279a:	e01f      	b.n	80027dc <_Z8hwLedOutv+0x160>
		else if ( flagLedOff ){					//
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_Z8hwLedOutv+0x170>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <_Z8hwLedOutv+0x136>
			countLedOut	= 0;					//
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <_Z8hwLedOutv+0x174>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	801a      	strh	r2, [r3, #0]
			stateLed	= 0;					//
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
		break;
 80027b0:	e014      	b.n	80027dc <_Z8hwLedOutv+0x160>
		else if ( countLedOut >= limitLed ){	//
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <_Z8hwLedOutv+0x174>)
 80027b4:	881a      	ldrh	r2, [r3, #0]
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <_Z8hwLedOutv+0x178>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d306      	bcc.n	80027cc <_Z8hwLedOutv+0x150>
			countLedOut	= 0;					//
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <_Z8hwLedOutv+0x174>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	801a      	strh	r2, [r3, #0]
			stateLed	= 3;					//
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80027c6:	2203      	movs	r2, #3
 80027c8:	701a      	strb	r2, [r3, #0]
		break;
 80027ca:	e007      	b.n	80027dc <_Z8hwLedOutv+0x160>
			stateLed	= 2;					//
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80027ce:	2202      	movs	r2, #2
 80027d0:	701a      	strb	r2, [r3, #0]
		break;
 80027d2:	e003      	b.n	80027dc <_Z8hwLedOutv+0x160>

	default:
		stateLed	= 0;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <_Z8hwLedOutv+0x164>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
		break;
 80027da:	bf00      	nop
	}
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	2000050a 	.word	0x2000050a
 80027e4:	20000510 	.word	0x20000510
 80027e8:	20000512 	.word	0x20000512
 80027ec:	20000511 	.word	0x20000511
 80027f0:	2000050c 	.word	0x2000050c
 80027f4:	2000050e 	.word	0x2000050e

080027f8 <_Z9hwDisplayv>:
 *
 *	Accion sobre leds
 *
 */

void hwDisplay(){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
	/////////////////
	// FIRST DIGIT //
	/////////////////


	if ( displayPhy.firstNumber() ){
 80027fc:	486e      	ldr	r0, [pc, #440]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 80027fe:	f7fe fb31 	bl	8000e64 <_ZN15displayPhysical11firstNumberEv>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <_Z9hwDisplayv+0x1c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8002808:	2201      	movs	r2, #1
 800280a:	2101      	movs	r1, #1
 800280c:	486b      	ldr	r0, [pc, #428]	; (80029bc <_Z9hwDisplayv+0x1c4>)
 800280e:	f004 f913 	bl	8006a38 <HAL_GPIO_WritePin>
 8002812:	e004      	b.n	800281e <_Z9hwDisplayv+0x26>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	2101      	movs	r1, #1
 8002818:	4868      	ldr	r0, [pc, #416]	; (80029bc <_Z9hwDisplayv+0x1c4>)
 800281a:	f004 f90d 	bl	8006a38 <HAL_GPIO_WritePin>

	//////////////////
	// SECOND DIGIT //
	//////////////////

	if ( displayPhy.secondNumber() ){
 800281e:	4866      	ldr	r0, [pc, #408]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 8002820:	f7fe fb2c 	bl	8000e7c <_ZN15displayPhysical12secondNumberEv>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <_Z9hwDisplayv+0x3e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800282a:	2201      	movs	r2, #1
 800282c:	2102      	movs	r1, #2
 800282e:	4863      	ldr	r0, [pc, #396]	; (80029bc <_Z9hwDisplayv+0x1c4>)
 8002830:	f004 f902 	bl	8006a38 <HAL_GPIO_WritePin>
 8002834:	e004      	b.n	8002840 <_Z9hwDisplayv+0x48>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8002836:	2200      	movs	r2, #0
 8002838:	2102      	movs	r1, #2
 800283a:	4860      	ldr	r0, [pc, #384]	; (80029bc <_Z9hwDisplayv+0x1c4>)
 800283c:	f004 f8fc 	bl	8006a38 <HAL_GPIO_WritePin>

	/////////////////
	// THIRD DIGIT //
	/////////////////

	if ( displayPhy.thirdNumber() ){
 8002840:	485d      	ldr	r0, [pc, #372]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 8002842:	f7fe fb27 	bl	8000e94 <_ZN15displayPhysical11thirdNumberEv>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <_Z9hwDisplayv+0x60>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 800284c:	2201      	movs	r2, #1
 800284e:	2104      	movs	r1, #4
 8002850:	485a      	ldr	r0, [pc, #360]	; (80029bc <_Z9hwDisplayv+0x1c4>)
 8002852:	f004 f8f1 	bl	8006a38 <HAL_GPIO_WritePin>
 8002856:	e004      	b.n	8002862 <_Z9hwDisplayv+0x6a>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	2104      	movs	r1, #4
 800285c:	4857      	ldr	r0, [pc, #348]	; (80029bc <_Z9hwDisplayv+0x1c4>)
 800285e:	f004 f8eb 	bl	8006a38 <HAL_GPIO_WritePin>

	//////////////////
	// FOURTH DIGIT //
	//////////////////

	if ( displayPhy.fourthNumber() ){
 8002862:	4855      	ldr	r0, [pc, #340]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 8002864:	f7fe fb22 	bl	8000eac <_ZN15displayPhysical12fourthNumberEv>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <_Z9hwDisplayv+0x82>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800286e:	2201      	movs	r2, #1
 8002870:	2108      	movs	r1, #8
 8002872:	4852      	ldr	r0, [pc, #328]	; (80029bc <_Z9hwDisplayv+0x1c4>)
 8002874:	f004 f8e0 	bl	8006a38 <HAL_GPIO_WritePin>
 8002878:	e004      	b.n	8002884 <_Z9hwDisplayv+0x8c>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800287a:	2200      	movs	r2, #0
 800287c:	2108      	movs	r1, #8
 800287e:	484f      	ldr	r0, [pc, #316]	; (80029bc <_Z9hwDisplayv+0x1c4>)
 8002880:	f004 f8da 	bl	8006a38 <HAL_GPIO_WritePin>
	///////////
	// A LED //
	///////////


	if ( displayPhy.aLed() ){
 8002884:	484c      	ldr	r0, [pc, #304]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 8002886:	f7fe fb1d 	bl	8000ec4 <_ZN15displayPhysical4aLedEv>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <_Z9hwDisplayv+0xa6>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,  GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002896:	484a      	ldr	r0, [pc, #296]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 8002898:	f004 f8ce 	bl	8006a38 <HAL_GPIO_WritePin>
 800289c:	e005      	b.n	80028aa <_Z9hwDisplayv+0xb2>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,  GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028a4:	4846      	ldr	r0, [pc, #280]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 80028a6:	f004 f8c7 	bl	8006a38 <HAL_GPIO_WritePin>

	///////////
	// B LED //
	///////////

	if ( displayPhy.bLed() ){
 80028aa:	4843      	ldr	r0, [pc, #268]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 80028ac:	f7fe fb16 	bl	8000edc <_ZN15displayPhysical4bLedEv>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <_Z9hwDisplayv+0xcc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,  GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028bc:	4840      	ldr	r0, [pc, #256]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 80028be:	f004 f8bb 	bl	8006a38 <HAL_GPIO_WritePin>
 80028c2:	e005      	b.n	80028d0 <_Z9hwDisplayv+0xd8>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,  GPIO_PIN_RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ca:	483d      	ldr	r0, [pc, #244]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 80028cc:	f004 f8b4 	bl	8006a38 <HAL_GPIO_WritePin>

	///////////
	// C LED //
	///////////

	if ( displayPhy.cLed() ){
 80028d0:	4839      	ldr	r0, [pc, #228]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 80028d2:	f7fe fb0f 	bl	8000ef4 <_ZN15displayPhysical4cLedEv>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <_Z9hwDisplayv+0xf2>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80028dc:	2201      	movs	r2, #1
 80028de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e2:	4837      	ldr	r0, [pc, #220]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 80028e4:	f004 f8a8 	bl	8006a38 <HAL_GPIO_WritePin>
 80028e8:	e005      	b.n	80028f6 <_Z9hwDisplayv+0xfe>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80028ea:	2200      	movs	r2, #0
 80028ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f0:	4833      	ldr	r0, [pc, #204]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 80028f2:	f004 f8a1 	bl	8006a38 <HAL_GPIO_WritePin>

	///////////
	// D LED //
	///////////

	if ( displayPhy.dLed() ){
 80028f6:	4830      	ldr	r0, [pc, #192]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 80028f8:	f7fe fb08 	bl	8000f0c <_ZN15displayPhysical4dLedEv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <_Z9hwDisplayv+0x118>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002902:	2201      	movs	r2, #1
 8002904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002908:	482d      	ldr	r0, [pc, #180]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 800290a:	f004 f895 	bl	8006a38 <HAL_GPIO_WritePin>
 800290e:	e005      	b.n	800291c <_Z9hwDisplayv+0x124>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002910:	2200      	movs	r2, #0
 8002912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002916:	482a      	ldr	r0, [pc, #168]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 8002918:	f004 f88e 	bl	8006a38 <HAL_GPIO_WritePin>

	///////////
	// E LED //
	///////////

	if ( displayPhy.eLed() ){
 800291c:	4826      	ldr	r0, [pc, #152]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 800291e:	f7fe fb01 	bl	8000f24 <_ZN15displayPhysical4eLedEv>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <_Z9hwDisplayv+0x13e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800292e:	4824      	ldr	r0, [pc, #144]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 8002930:	f004 f882 	bl	8006a38 <HAL_GPIO_WritePin>
 8002934:	e005      	b.n	8002942 <_Z9hwDisplayv+0x14a>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800293c:	4820      	ldr	r0, [pc, #128]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 800293e:	f004 f87b 	bl	8006a38 <HAL_GPIO_WritePin>

	///////////
	// F LED //
	///////////

	if ( displayPhy.fLed() ){
 8002942:	481d      	ldr	r0, [pc, #116]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 8002944:	f7fe fafa 	bl	8000f3c <_ZN15displayPhysical4fLedEv>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <_Z9hwDisplayv+0x164>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800294e:	2201      	movs	r2, #1
 8002950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002954:	481a      	ldr	r0, [pc, #104]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 8002956:	f004 f86f 	bl	8006a38 <HAL_GPIO_WritePin>
 800295a:	e005      	b.n	8002968 <_Z9hwDisplayv+0x170>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800295c:	2200      	movs	r2, #0
 800295e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002962:	4817      	ldr	r0, [pc, #92]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 8002964:	f004 f868 	bl	8006a38 <HAL_GPIO_WritePin>

	///////////
	// G LED //
	///////////

	if ( displayPhy.gLed() ){
 8002968:	4813      	ldr	r0, [pc, #76]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 800296a:	f7fe faf3 	bl	8000f54 <_ZN15displayPhysical4gLedEv>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <_Z9hwDisplayv+0x18a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002974:	2201      	movs	r2, #1
 8002976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800297a:	4811      	ldr	r0, [pc, #68]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 800297c:	f004 f85c 	bl	8006a38 <HAL_GPIO_WritePin>
 8002980:	e005      	b.n	800298e <_Z9hwDisplayv+0x196>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 800298a:	f004 f855 	bl	8006a38 <HAL_GPIO_WritePin>

	////////////
	// DP LED //
	////////////

	if ( displayPhy.dpLed() ){
 800298e:	480a      	ldr	r0, [pc, #40]	; (80029b8 <_Z9hwDisplayv+0x1c0>)
 8002990:	f7fe faec 	bl	8000f6c <_ZN15displayPhysical5dpLedEv>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <_Z9hwDisplayv+0x1b0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 80029a2:	f004 f849 	bl	8006a38 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80029a6:	e005      	b.n	80029b4 <_Z9hwDisplayv+0x1bc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
 80029aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <_Z9hwDisplayv+0x1c8>)
 80029b0:	f004 f842 	bl	8006a38 <HAL_GPIO_WritePin>
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	2000107c 	.word	0x2000107c
 80029bc:	48001000 	.word	0x48001000
 80029c0:	48000c00 	.word	0x48000c00

080029c4 <_Z41__static_initialization_and_destruction_0ii>:
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d12c      	bne.n	8002a2e <_Z41__static_initialization_and_destruction_0ii+0x6a>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029da:	4293      	cmp	r3, r2
 80029dc:	d127      	bne.n	8002a2e <_Z41__static_initialization_and_destruction_0ii+0x6a>
uint16_t limitGpsAvailable	= 5000/superloop;
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80029e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80029f0:	801a      	strh	r2, [r3, #0]
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002a04:	801a      	strh	r2, [r3, #0]
uint16_t limitUartGps	= 20000/superloop;	//
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002a10:	fb93 f3f2 	sdiv	r3, r3, r2
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002a18:	801a      	strh	r2, [r3, #0]
uint16_t limitLed	= 500/superloop;	//
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002a2c:	801a      	strh	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000035b 	.word	0x2000035b
 8002a40:	20000504 	.word	0x20000504
 8002a44:	20000506 	.word	0x20000506
 8002a48:	20000508 	.word	0x20000508
 8002a4c:	2000050e 	.word	0x2000050e

08002a50 <_GLOBAL__sub_I_availableGps>:
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f7ff ffb3 	bl	80029c4 <_Z41__static_initialization_and_destruction_0ii>
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_Z9linkInputv>:
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
uint16_t countBat;						// Contador bateria

/***** INPUT *****/

void linkInput(){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	//linkInGps();
	//linkInLora();
	linkBoton();
 8002a64:	f000 f8ca 	bl	8002bfc <_Z9linkBotonv>
	linkAnalog();
 8002a68:	f000 f92e 	bl	8002cc8 <_Z10linkAnalogv>
	linkBattery();
 8002a6c:	f000 f802 	bl	8002a74 <_Z11linkBatteryv>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_Z11linkBatteryv>:
 * Output:
 * 		errorHardware[6]
 *
 */

void linkBattery(){
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0

	batScaled = battery *510/10000;		// Escalamiento de bateria
 8002a78:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <_Z11linkBatteryv+0x168>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4a56      	ldr	r2, [pc, #344]	; (8002be0 <_Z11linkBatteryv+0x16c>)
 8002a88:	fb82 1203 	smull	r1, r2, r2, r3
 8002a8c:	1312      	asrs	r2, r2, #12
 8002a8e:	17db      	asrs	r3, r3, #31
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	4a54      	ldr	r2, [pc, #336]	; (8002be4 <_Z11linkBatteryv+0x170>)
 8002a94:	6013      	str	r3, [r2, #0]

	switch ( stateBattery ){
 8002a96:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	f200 8095 	bhi.w	8002bca <_Z11linkBatteryv+0x156>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <_Z11linkBatteryv+0x34>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002abd 	.word	0x08002abd
 8002aac:	08002aeb 	.word	0x08002aeb
 8002ab0:	08002b0d 	.word	0x08002b0d
 8002ab4:	08002b5b 	.word	0x08002b5b
 8002ab8:	08002b7d 	.word	0x08002b7d
	//////////////////////////
	// S0 -  WAIT STABILITY //
	//////////////////////////

	case 0:
		countBat++;						// Suma 1 al contador
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b49      	ldr	r3, [pc, #292]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002ac6:	801a      	strh	r2, [r3, #0]

		if ( countBat >= limitBat ){	// Si pasa limite
 8002ac8:	4b48      	ldr	r3, [pc, #288]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002aca:	881a      	ldrh	r2, [r3, #0]
 8002acc:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <_Z11linkBatteryv+0x17c>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d306      	bcc.n	8002ae2 <_Z11linkBatteryv+0x6e>
			countBat		= 0;		// Reinicia contador
 8002ad4:	4b45      	ldr	r3, [pc, #276]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;		// Pasa a S1
 8002ada:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateBattery	= 0;		// Queda en S0
		}
		break;
 8002ae0:	e077      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
			stateBattery	= 0;		// Queda en S0
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
		break;
 8002ae8:	e073      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
	////////////////////////
	// S1 - CHECK BATTERY //
	////////////////////////

	case 1:
		errorHardware[6]	= 0;			// Sin error
 8002aea:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <_Z11linkBatteryv+0x180>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria baja del limite
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <_Z11linkBatteryv+0x170>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <_Z11linkBatteryv+0x184>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	da03      	bge.n	8002b04 <_Z11linkBatteryv+0x90>
			stateBattery	= 2;			// Pasa a S2
 8002afc:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 1;			// Queda en S1
		}
		break;
 8002b02:	e066      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
			stateBattery	= 1;			// Queda en S1
 8002b04:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
		break;
 8002b0a:	e062      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S2 - CHECK STABILITY //
	//////////////////////////

	case 2:
		errorHardware[6]	= 0;			// Sin error
 8002b0c:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <_Z11linkBatteryv+0x180>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8002b12:	4b36      	ldr	r3, [pc, #216]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b34      	ldr	r3, [pc, #208]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002b1c:	801a      	strh	r2, [r3, #0]

		if ( batScaled > thresholdBat ){	// Si la bateria esta Ok
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <_Z11linkBatteryv+0x170>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <_Z11linkBatteryv+0x184>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	dd06      	ble.n	8002b38 <_Z11linkBatteryv+0xc4>
			countBat		= 0;			// Reinicia contador
 8002b2a:	4b30      	ldr	r3, [pc, #192]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Vuelve a S1
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 2;			// Queda en S2
		}
		break;
 8002b36:	e04c      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si el contador pasa limite
 8002b38:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002b3a:	881a      	ldrh	r2, [r3, #0]
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <_Z11linkBatteryv+0x17c>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d306      	bcc.n	8002b52 <_Z11linkBatteryv+0xde>
			countBat		= 0;			// Reinicia contador
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	701a      	strb	r2, [r3, #0]
		break;
 8002b50:	e03f      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
			stateBattery	= 2;			// Queda en S2
 8002b52:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002b54:	2202      	movs	r2, #2
 8002b56:	701a      	strb	r2, [r3, #0]
		break;
 8002b58:	e03b      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
	///////////////////////////////////
	// S3 - CHECK BATTERY WITH ERROR //
	///////////////////////////////////

	case 3:
		errorHardware[6]	= 1;			// Indica error
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <_Z11linkBatteryv+0x180>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria esta baja
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <_Z11linkBatteryv+0x170>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <_Z11linkBatteryv+0x184>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	da03      	bge.n	8002b74 <_Z11linkBatteryv+0x100>
			stateBattery	= 3;			// Sigue en S3
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002b6e:	2203      	movs	r2, #3
 8002b70:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 4;			// Pasa a S4
		}
		break;
 8002b72:	e02e      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Pasa a S4
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002b76:	2204      	movs	r2, #4
 8002b78:	701a      	strb	r2, [r3, #0]
		break;
 8002b7a:	e02a      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S4 - CHECK STABILITY //
	//////////////////////////

	case 4:
		errorHardware[6]	= 1;			// Indica error
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <_Z11linkBatteryv+0x180>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002b8c:	801a      	strh	r2, [r3, #0]

		if ( batScaled < thresholdBat ){	// Si la bateria sigue baja
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <_Z11linkBatteryv+0x170>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <_Z11linkBatteryv+0x184>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	da06      	bge.n	8002ba8 <_Z11linkBatteryv+0x134>
			countBat		= 0;			// Reinicia contador
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Vuelve a S3
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	701a      	strb	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 4;			// Queda en S4
		}
		break;
 8002ba6:	e014      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si contador pasa limite
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <_Z11linkBatteryv+0x17c>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d306      	bcc.n	8002bc2 <_Z11linkBatteryv+0x14e>
			countBat		= 0;			// Reinicia contador
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <_Z11linkBatteryv+0x178>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
		break;
 8002bc0:	e007      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Queda en S4
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	701a      	strb	r2, [r3, #0]
		break;
 8002bc8:	e003      	b.n	8002bd2 <_Z11linkBatteryv+0x15e>

	default:
		stateBattery	= 0;
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <_Z11linkBatteryv+0x174>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
		break;
 8002bd0:	bf00      	nop
	}
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	20000470 	.word	0x20000470
 8002be0:	68db8bad 	.word	0x68db8bad
 8002be4:	20000538 	.word	0x20000538
 8002be8:	20000536 	.word	0x20000536
 8002bec:	2000053e 	.word	0x2000053e
 8002bf0:	2000053c 	.word	0x2000053c
 8002bf4:	200004fc 	.word	0x200004fc
 8002bf8:	20000024 	.word	0x20000024

08002bfc <_Z9linkBotonv>:
 *	INPUT	:	flagBoton
 *	OUTPUT	:	displayPhy.enable
 */


void linkBoton(){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

	switch ( stateEnableDisplay ){
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <_Z9linkBotonv+0x74>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <_Z9linkBotonv+0x12>
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d013      	beq.n	8002c34 <_Z9linkBotonv+0x38>
 8002c0c:	e029      	b.n	8002c62 <_Z9linkBotonv+0x66>
	//////////////////////
	// S0 - WAIT BUTTON //
	//////////////////////

	case 0:
		displayPhy.enable(1);			//	Inhabilita display
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4818      	ldr	r0, [pc, #96]	; (8002c74 <_Z9linkBotonv+0x78>)
 8002c12:	f7fd ff59 	bl	8000ac8 <_ZN15displayPhysical6enableEb>
		countEnableDisplay	= 0;		//	Reinicia contador
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <_Z9linkBotonv+0x7c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

		if ( flagBoton ){				//	Si se presiona el boton
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <_Z9linkBotonv+0x80>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <_Z9linkBotonv+0x30>
			stateEnableDisplay	= 1;	//	Pasa a S1
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <_Z9linkBotonv+0x74>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
		}
		else{							//	Si no
			stateEnableDisplay	= 0;	//	Espera en S0
		}
		break;
 8002c2a:	e01e      	b.n	8002c6a <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 0;	//	Espera en S0
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <_Z9linkBotonv+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
		break;
 8002c32:	e01a      	b.n	8002c6a <_Z9linkBotonv+0x6e>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		displayPhy.enable(1);							// Habilita display
 8002c34:	2101      	movs	r1, #1
 8002c36:	480f      	ldr	r0, [pc, #60]	; (8002c74 <_Z9linkBotonv+0x78>)
 8002c38:	f7fd ff46 	bl	8000ac8 <_ZN15displayPhysical6enableEb>

		countEnableDisplay++;							// Suma 1 al contador
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <_Z9linkBotonv+0x7c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <_Z9linkBotonv+0x7c>)
 8002c44:	6013      	str	r3, [r2, #0]

		if ( countEnableDisplay > limitEnableDisplay ){	// Si llega al limite
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <_Z9linkBotonv+0x7c>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <_Z9linkBotonv+0x84>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	dd03      	ble.n	8002c5a <_Z9linkBotonv+0x5e>
			stateEnableDisplay	= 0;					// Vuelve a S0
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <_Z9linkBotonv+0x74>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateEnableDisplay	= 1;					// Espera en S1
		}
		break;
 8002c58:	e007      	b.n	8002c6a <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 1;					// Espera en S1
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <_Z9linkBotonv+0x74>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
		break;
 8002c60:	e003      	b.n	8002c6a <_Z9linkBotonv+0x6e>

	default:
		stateEnableDisplay	= 0;
 8002c62:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <_Z9linkBotonv+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
		break;
 8002c68:	bf00      	nop

	}
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000524 	.word	0x20000524
 8002c74:	2000107c 	.word	0x2000107c
 8002c78:	2000051c 	.word	0x2000051c
 8002c7c:	20000a38 	.word	0x20000a38
 8002c80:	20000520 	.word	0x20000520

08002c84 <_Z7adc2PPMth>:
 *	MODE 2	:	ADC interno A1
 *	MODE 3	:	ADC externo B1
 *	MODE 4	:	ADC interno B1
 */

uint8_t adc2PPM( uint16_t signal, uint8_t mode){
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	80fb      	strh	r3, [r7, #6]
 8002c90:	4613      	mov	r3, r2
 8002c92:	717b      	strb	r3, [r7, #5]
	uint8_t result;

	result	= 1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]

	switch ( mode ){
 8002c98:	797b      	ldrb	r3, [r7, #5]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d80b      	bhi.n	8002cb8 <_Z7adc2PPMth+0x34>
 8002ca0:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <_Z7adc2PPMth+0x24>)
 8002ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca6:	bf00      	nop
 8002ca8:	08002cb9 	.word	0x08002cb9
 8002cac:	08002cb9 	.word	0x08002cb9
 8002cb0:	08002cb9 	.word	0x08002cb9
 8002cb4:	08002cb9 	.word	0x08002cb9

	case 4:
		break;
	}

	return result;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <_Z10linkAnalogv>:
 *				flagAlarm_PPM,
 *				flagAlarm_TEMP
 *				flagAlarm_HUM
 */

void linkAnalog(){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0

	/////////////////
	// CALIBRATION //
	/////////////////

	switch ( stateCalibration ){
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <_Z10linkAnalogv+0x1b0>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <_Z10linkAnalogv+0x12>
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d01d      	beq.n	8002d14 <_Z10linkAnalogv+0x4c>
 8002cd8:	e018      	b.n	8002d0c <_Z10linkAnalogv+0x44>
	///////////////////////////////
	// S0 - WAIT FOR CALIBRATION //
	///////////////////////////////

	case 0:
		countCalibration++;								// Suma 1 al contador
 8002cda:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <_Z10linkAnalogv+0x1b4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a66      	ldr	r2, [pc, #408]	; (8002e7c <_Z10linkAnalogv+0x1b4>)
 8002ce2:	6013      	str	r3, [r2, #0]
		enableSensors	= 0;							// Deshabilita sensores
 8002ce4:	4b66      	ldr	r3, [pc, #408]	; (8002e80 <_Z10linkAnalogv+0x1b8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]

		if ( countCalibration >= limitCalibration ){	// Si se cumple el tiempo de calibracion
 8002cea:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <_Z10linkAnalogv+0x1b4>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <_Z10linkAnalogv+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	db06      	blt.n	8002d04 <_Z10linkAnalogv+0x3c>
			enableSensors		= 1;					// Habilita sensores
 8002cf6:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <_Z10linkAnalogv+0x1b8>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
			stateCalibration	= 1;					// Pasa a S1
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <_Z10linkAnalogv+0x1b0>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateCalibration	= 0;					// Espera en S0
		}
		break;
 8002d02:	e008      	b.n	8002d16 <_Z10linkAnalogv+0x4e>
			stateCalibration	= 0;					// Espera en S0
 8002d04:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <_Z10linkAnalogv+0x1b0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
		break;
 8002d0a:	e004      	b.n	8002d16 <_Z10linkAnalogv+0x4e>
	////////////////////
	case 1:
		break;

	default:
		stateCalibration	= 0;
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <_Z10linkAnalogv+0x1b0>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
		break;
 8002d12:	e000      	b.n	8002d16 <_Z10linkAnalogv+0x4e>
		break;
 8002d14:	bf00      	nop

	////////////
	// A1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habilitado el ADC
 8002d16:	4b5c      	ldr	r3, [pc, #368]	; (8002e88 <_Z10linkAnalogv+0x1c0>)
 8002d18:	795b      	ldrb	r3, [r3, #5]
 8002d1a:	f083 0301 	eor.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00f      	beq.n	8002d44 <_Z10linkAnalogv+0x7c>
		alpha_A1_PPM = adc2PPM(alphaA, 1) * enableSensors;			// Convierte en PPM
 8002d24:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <_Z10linkAnalogv+0x1c4>)
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ffaa 	bl	8002c84 <_Z7adc2PPMth>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <_Z10linkAnalogv+0x1b8>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	fb12 f303 	smulbb	r3, r2, r3
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <_Z10linkAnalogv+0x1c8>)
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	e00e      	b.n	8002d62 <_Z10linkAnalogv+0x9a>
	}
	else{															// Si no esta habiltiado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 2) * enableSensors;	// Convierte en PPM
 8002d44:	4b53      	ldr	r3, [pc, #332]	; (8002e94 <_Z10linkAnalogv+0x1cc>)
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	2102      	movs	r1, #2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff9a 	bl	8002c84 <_Z7adc2PPMth>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b4a      	ldr	r3, [pc, #296]	; (8002e80 <_Z10linkAnalogv+0x1b8>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	fb12 f303 	smulbb	r3, r2, r3
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <_Z10linkAnalogv+0x1c8>)
 8002d60:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors){		// Si pasa de 5 ppm
 8002d62:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <_Z10linkAnalogv+0x1c8>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b32      	cmp	r3, #50	; 0x32
 8002d68:	d907      	bls.n	8002d7a <_Z10linkAnalogv+0xb2>
 8002d6a:	4b45      	ldr	r3, [pc, #276]	; (8002e80 <_Z10linkAnalogv+0x1b8>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <_Z10linkAnalogv+0xb2>
		flagAlarm_PPM	= 1;						// Indica alarma
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <_Z10linkAnalogv+0x1d0>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e002      	b.n	8002d80 <_Z10linkAnalogv+0xb8>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <_Z10linkAnalogv+0x1d0>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]

	////////////
	// B1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habitado el ADC
 8002d80:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <_Z10linkAnalogv+0x1c0>)
 8002d82:	795b      	ldrb	r3, [r3, #5]
 8002d84:	f083 0301 	eor.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00f      	beq.n	8002dae <_Z10linkAnalogv+0xe6>
		alpha_A1_PPM = adc2PPM(alphaA, 3) * enableSensors;			// Convierte en PPM
 8002d8e:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <_Z10linkAnalogv+0x1c4>)
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	2103      	movs	r1, #3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff75 	bl	8002c84 <_Z7adc2PPMth>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <_Z10linkAnalogv+0x1b8>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	fb12 f303 	smulbb	r3, r2, r3
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <_Z10linkAnalogv+0x1c8>)
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	e00e      	b.n	8002dcc <_Z10linkAnalogv+0x104>
	}
	else{															// Si no esta habilitado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 4) * enableSensors;	// Convierte en PPM
 8002dae:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <_Z10linkAnalogv+0x1cc>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	2104      	movs	r1, #4
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff65 	bl	8002c84 <_Z7adc2PPMth>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <_Z10linkAnalogv+0x1b8>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	fb12 f303 	smulbb	r3, r2, r3
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <_Z10linkAnalogv+0x1c8>)
 8002dca:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors ){		// Si pasa de 5 ppm
 8002dcc:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <_Z10linkAnalogv+0x1c8>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b32      	cmp	r3, #50	; 0x32
 8002dd2:	d907      	bls.n	8002de4 <_Z10linkAnalogv+0x11c>
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <_Z10linkAnalogv+0x1b8>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <_Z10linkAnalogv+0x11c>
		flagAlarm_PPM	= 1;						// Indica alarma
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <_Z10linkAnalogv+0x1d0>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e002      	b.n	8002dea <_Z10linkAnalogv+0x122>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <_Z10linkAnalogv+0x1d0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]

	//////////////
	// TEMP HUM //
	///////////////

	if ( !errorHardware[1] ){			// Si hay sensor externo
 8002dea:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <_Z10linkAnalogv+0x1c0>)
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <_Z10linkAnalogv+0x142>
		tempApp	= tempExtern;			// Copia temperatura
 8002df8:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <_Z10linkAnalogv+0x1d4>)
 8002dfa:	881a      	ldrh	r2, [r3, #0]
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <_Z10linkAnalogv+0x1d8>)
 8002dfe:	801a      	strh	r2, [r3, #0]
		humApp	= humExtern;			// Copia humedad
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <_Z10linkAnalogv+0x1dc>)
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <_Z10linkAnalogv+0x1e0>)
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	e015      	b.n	8002e36 <_Z10linkAnalogv+0x16e>
	}
	else if ( !errorHardware[0] ){	// Si hay sensor interno
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <_Z10linkAnalogv+0x1c0>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	f083 0301 	eor.w	r3, r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <_Z10linkAnalogv+0x162>
		tempApp	= tempIntern;			// Copia temperatura
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <_Z10linkAnalogv+0x1e4>)
 8002e1a:	881a      	ldrh	r2, [r3, #0]
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <_Z10linkAnalogv+0x1d8>)
 8002e1e:	801a      	strh	r2, [r3, #0]
		humApp	= humIntern;			// Copia humedad
 8002e20:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <_Z10linkAnalogv+0x1e8>)
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <_Z10linkAnalogv+0x1e0>)
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	e005      	b.n	8002e36 <_Z10linkAnalogv+0x16e>
	}
	else{								// Si no hay ninguno de ambos sensores
		tempApp	= 0;					// Copia 0
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <_Z10linkAnalogv+0x1d8>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	801a      	strh	r2, [r3, #0]
		humApp	= 0;					// Copia 0
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <_Z10linkAnalogv+0x1e0>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	801a      	strh	r2, [r3, #0]

	////////////
	// ALARMS //
	////////////

	if ( tempApp > 60 || tempApp < 5 ){	// Si pasa limite de sensores
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <_Z10linkAnalogv+0x1d8>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	2b3c      	cmp	r3, #60	; 0x3c
 8002e3c:	d803      	bhi.n	8002e46 <_Z10linkAnalogv+0x17e>
 8002e3e:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <_Z10linkAnalogv+0x1d8>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d803      	bhi.n	8002e4e <_Z10linkAnalogv+0x186>
		warningHardware[0]	= 1;			// Indica alarma
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <_Z10linkAnalogv+0x1ec>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e002      	b.n	8002e54 <_Z10linkAnalogv+0x18c>
	}
	else{								// Si no
		warningHardware[0]	= 0;			// No hay alarma
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <_Z10linkAnalogv+0x1ec>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
	}

	if ( humApp < 5 || humApp > 90){	// Si pasa limite de sensores
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <_Z10linkAnalogv+0x1e0>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d903      	bls.n	8002e64 <_Z10linkAnalogv+0x19c>
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <_Z10linkAnalogv+0x1e0>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	2b5a      	cmp	r3, #90	; 0x5a
 8002e62:	d903      	bls.n	8002e6c <_Z10linkAnalogv+0x1a4>
		warningHardware[1]	= 1;			// Indica alarma
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <_Z10linkAnalogv+0x1ec>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	705a      	strb	r2, [r3, #1]
 8002e6a:	e003      	b.n	8002e74 <_Z10linkAnalogv+0x1ac>
	}
	else{								// Si no
		warningHardware[1]	= 0;			// No hay alarma
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <_Z10linkAnalogv+0x1ec>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	705a      	strb	r2, [r3, #1]
	}
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000052a 	.word	0x2000052a
 8002e7c:	2000052c 	.word	0x2000052c
 8002e80:	20000534 	.word	0x20000534
 8002e84:	20000530 	.word	0x20000530
 8002e88:	200004fc 	.word	0x200004fc
 8002e8c:	2000046a 	.word	0x2000046a
 8002e90:	20000525 	.word	0x20000525
 8002e94:	20000472 	.word	0x20000472
 8002e98:	20000535 	.word	0x20000535
 8002e9c:	20000450 	.word	0x20000450
 8002ea0:	20000526 	.word	0x20000526
 8002ea4:	20000452 	.word	0x20000452
 8002ea8:	20000528 	.word	0x20000528
 8002eac:	2000044c 	.word	0x2000044c
 8002eb0:	2000044e 	.word	0x2000044e
 8002eb4:	200004f4 	.word	0x200004f4

08002eb8 <_Z41__static_initialization_and_destruction_0ii>:
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d127      	bne.n	8002f18 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d122      	bne.n	8002f18 <_Z41__static_initialization_and_destruction_0ii+0x60>
long int limitGpsLink	= 240000/superloop;	// Limite de tiempo esperando mensajes validos
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002eda:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002ee0:	6013      	str	r3, [r2, #0]
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002ef2:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002efc:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002f02:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002f16:	801a      	strh	r2, [r3, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	2000035b 	.word	0x2000035b
 8002f28:	0003a980 	.word	0x0003a980
 8002f2c:	20000518 	.word	0x20000518
 8002f30:	20000520 	.word	0x20000520
 8002f34:	000dbba0 	.word	0x000dbba0
 8002f38:	20000530 	.word	0x20000530
 8002f3c:	2000053c 	.word	0x2000053c

08002f40 <_GLOBAL__sub_I_stateGpsLink>:
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f7ff ffb5 	bl	8002eb8 <_Z41__static_initialization_and_destruction_0ii>
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_Z10linkOutputv>:
extern wdTimeout loraTimeWd;	// Watchdog de Lorawan
extern bool flagTxLora;			// Indica que se envía un mensaje

/***** OUTPUT *****/

void linkOutput(){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
	//linkOutLora();
	//linkOutGps();
	linkOutDisplay();
 8002f54:	f000 f802 	bl	8002f5c <_Z14linkOutDisplayv>
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_Z14linkOutDisplayv>:
 *	Interactua con physical layer a traves de displayPhy
 *	La instancia  displayLink contiene los valores en cada digito del display
 *	Incluye el punto
 *
 */
void linkOutDisplay(){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0

	digit	= displayPhy.next();					// Copia el valor del digito que se desplegara
 8002f60:	4812      	ldr	r0, [pc, #72]	; (8002fac <_Z14linkOutDisplayv+0x50>)
 8002f62:	f7fd fdd9 	bl	8000b18 <_ZN15displayPhysical4nextEv>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <_Z14linkOutDisplayv+0x54>)
 8002f6c:	701a      	strb	r2, [r3, #0]
	digit	= displayLink.numberInDigit( digit );	// Indica valor en Display
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <_Z14linkOutDisplayv+0x54>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	480f      	ldr	r0, [pc, #60]	; (8002fb4 <_Z14linkOutDisplayv+0x58>)
 8002f76:	f7fd fd77 	bl	8000a68 <_ZN11displayLink13numberInDigitEh>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <_Z14linkOutDisplayv+0x54>)
 8002f80:	701a      	strb	r2, [r3, #0]
	displayPhy.setNumber(digit);					// Inserta numero en capa fisica
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <_Z14linkOutDisplayv+0x54>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4808      	ldr	r0, [pc, #32]	; (8002fac <_Z14linkOutDisplayv+0x50>)
 8002f8a:	f7fd fdd1 	bl	8000b30 <_ZN15displayPhysical9setNumberEh>

	digit	= displayLink.dotPosition();			// Guarda valor del digito con punto
 8002f8e:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <_Z14linkOutDisplayv+0x58>)
 8002f90:	f7fd fcee 	bl	8000970 <_ZN11displayLink11dotPositionEv>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <_Z14linkOutDisplayv+0x54>)
 8002f9a:	701a      	strb	r2, [r3, #0]
	displayPhy.setDot( digit );						// Inserta punto en digito indicado
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <_Z14linkOutDisplayv+0x54>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4802      	ldr	r0, [pc, #8]	; (8002fac <_Z14linkOutDisplayv+0x50>)
 8002fa4:	f7fd fda9 	bl	8000afa <_ZN15displayPhysical6setDotEh>

}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000107c 	.word	0x2000107c
 8002fb0:	20000540 	.word	0x20000540
 8002fb4:	20001074 	.word	0x20001074

08002fb8 <_Z12setupLoraAppv>:

rn2903Command macSetCh8;
rn2903Command macSetCh9;
rn2903Command macSetCh10;

void setupLoraApp(){
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
	///////////////
	// SYS RESET //
	///////////////

	sysReset.command		= sysReset_RN2903;
 8002fbc:	4b57      	ldr	r3, [pc, #348]	; (800311c <_Z12setupLoraAppv+0x164>)
 8002fbe:	4a58      	ldr	r2, [pc, #352]	; (8003120 <_Z12setupLoraAppv+0x168>)
 8002fc0:	605a      	str	r2, [r3, #4]
	sysReset.size			= sizeof( sysReset_RN2903 );
 8002fc2:	4b56      	ldr	r3, [pc, #344]	; (800311c <_Z12setupLoraAppv+0x164>)
 8002fc4:	220c      	movs	r2, #12
 8002fc6:	701a      	strb	r2, [r3, #0]
	sysReset.responseSize	= 1;
 8002fc8:	4b54      	ldr	r3, [pc, #336]	; (800311c <_Z12setupLoraAppv+0x164>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET MOD //
	///////////////////

	radioSetMod.command		= radioSetMod_RN2903;
 8002fce:	4b55      	ldr	r3, [pc, #340]	; (8003124 <_Z12setupLoraAppv+0x16c>)
 8002fd0:	4a55      	ldr	r2, [pc, #340]	; (8003128 <_Z12setupLoraAppv+0x170>)
 8002fd2:	605a      	str	r2, [r3, #4]
	radioSetMod.size		= sizeof( radioSetMod_RN2903 ) - 1;
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <_Z12setupLoraAppv+0x16c>)
 8002fd6:	2214      	movs	r2, #20
 8002fd8:	701a      	strb	r2, [r3, #0]
	radioSetMod.responseSize= 3;
 8002fda:	4b52      	ldr	r3, [pc, #328]	; (8003124 <_Z12setupLoraAppv+0x16c>)
 8002fdc:	2203      	movs	r2, #3
 8002fde:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET SF //
	//////////////////

	radioSetSf.command		= radioSetSf_RN2903;
 8002fe0:	4b52      	ldr	r3, [pc, #328]	; (800312c <_Z12setupLoraAppv+0x174>)
 8002fe2:	4a53      	ldr	r2, [pc, #332]	; (8003130 <_Z12setupLoraAppv+0x178>)
 8002fe4:	605a      	str	r2, [r3, #4]
	radioSetSf.size			= sizeof( radioSetSf_RN2903 ) - 1;
 8002fe6:	4b51      	ldr	r3, [pc, #324]	; (800312c <_Z12setupLoraAppv+0x174>)
 8002fe8:	2213      	movs	r2, #19
 8002fea:	701a      	strb	r2, [r3, #0]
	radioSetSf.responseSize	= 3;
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <_Z12setupLoraAppv+0x174>)
 8002fee:	2203      	movs	r2, #3
 8002ff0:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET BW //
	//////////////////

	radioSetBw.command		= radioSetBw_RN2903;
 8002ff2:	4b50      	ldr	r3, [pc, #320]	; (8003134 <_Z12setupLoraAppv+0x17c>)
 8002ff4:	4a50      	ldr	r2, [pc, #320]	; (8003138 <_Z12setupLoraAppv+0x180>)
 8002ff6:	605a      	str	r2, [r3, #4]
	radioSetBw.size			= sizeof( radioSetBw_RN2903 ) - 1;
 8002ff8:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <_Z12setupLoraAppv+0x17c>)
 8002ffa:	2212      	movs	r2, #18
 8002ffc:	701a      	strb	r2, [r3, #0]
	radioSetBw.responseSize = 3;
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <_Z12setupLoraAppv+0x17c>)
 8003000:	2203      	movs	r2, #3
 8003002:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET PWR //
	///////////////////

	radioSetPwr.command		= radioSetPwr_RN2903;
 8003004:	4b4d      	ldr	r3, [pc, #308]	; (800313c <_Z12setupLoraAppv+0x184>)
 8003006:	4a4e      	ldr	r2, [pc, #312]	; (8003140 <_Z12setupLoraAppv+0x188>)
 8003008:	605a      	str	r2, [r3, #4]
	radioSetPwr.size		= sizeof( radioSetPwr_RN2903 ) - 1;
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <_Z12setupLoraAppv+0x184>)
 800300c:	2212      	movs	r2, #18
 800300e:	701a      	strb	r2, [r3, #0]
	radioSetPwr.responseSize= 3;
 8003010:	4b4a      	ldr	r3, [pc, #296]	; (800313c <_Z12setupLoraAppv+0x184>)
 8003012:	2203      	movs	r2, #3
 8003014:	721a      	strb	r2, [r3, #8]

	////////////////////
	// MAC SET DEVEUI //
	////////////////////

	macSetDeveui.command	= macSetDevEui_RN2903;
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <_Z12setupLoraAppv+0x18c>)
 8003018:	4a4b      	ldr	r2, [pc, #300]	; (8003148 <_Z12setupLoraAppv+0x190>)
 800301a:	605a      	str	r2, [r3, #4]
	macSetDeveui.size		= sizeof( macSetDevEui_RN2903 ) - 1;
 800301c:	4b49      	ldr	r3, [pc, #292]	; (8003144 <_Z12setupLoraAppv+0x18c>)
 800301e:	2220      	movs	r2, #32
 8003020:	701a      	strb	r2, [r3, #0]
	macSetDeveui.responseSize	= 3;
 8003022:	4b48      	ldr	r3, [pc, #288]	; (8003144 <_Z12setupLoraAppv+0x18c>)
 8003024:	2203      	movs	r2, #3
 8003026:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET NETWORK KEY //
	/////////////////////////

	macSetNwkskey.command	= macSetNwkskey_RN2903;
 8003028:	4b48      	ldr	r3, [pc, #288]	; (800314c <_Z12setupLoraAppv+0x194>)
 800302a:	4a49      	ldr	r2, [pc, #292]	; (8003150 <_Z12setupLoraAppv+0x198>)
 800302c:	605a      	str	r2, [r3, #4]
	macSetNwkskey.size		= sizeof( macSetNwkskey_RN2903 ) - 1;
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <_Z12setupLoraAppv+0x194>)
 8003030:	2232      	movs	r2, #50	; 0x32
 8003032:	701a      	strb	r2, [r3, #0]
	macSetNwkskey.responseSize	= 3;
 8003034:	4b45      	ldr	r3, [pc, #276]	; (800314c <_Z12setupLoraAppv+0x194>)
 8003036:	2203      	movs	r2, #3
 8003038:	721a      	strb	r2, [r3, #8]

	//////////////////////
	// MAC SET APPS KEY //
	//////////////////////

	macSetAppskey.command	= macSetAppskey_RN2903;
 800303a:	4b46      	ldr	r3, [pc, #280]	; (8003154 <_Z12setupLoraAppv+0x19c>)
 800303c:	4a46      	ldr	r2, [pc, #280]	; (8003158 <_Z12setupLoraAppv+0x1a0>)
 800303e:	605a      	str	r2, [r3, #4]
	macSetAppskey.size		= sizeof( macSetAppskey_RN2903 ) - 1;
 8003040:	4b44      	ldr	r3, [pc, #272]	; (8003154 <_Z12setupLoraAppv+0x19c>)
 8003042:	2232      	movs	r2, #50	; 0x32
 8003044:	701a      	strb	r2, [r3, #0]
	macSetAppskey.responseSize	= 3;
 8003046:	4b43      	ldr	r3, [pc, #268]	; (8003154 <_Z12setupLoraAppv+0x19c>)
 8003048:	2203      	movs	r2, #3
 800304a:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET DEV ADDRESS //
	/////////////////////////

	macSetDevAddr.command		= macSetDevAddr_RN2903;
 800304c:	4b43      	ldr	r3, [pc, #268]	; (800315c <_Z12setupLoraAppv+0x1a4>)
 800304e:	4a44      	ldr	r2, [pc, #272]	; (8003160 <_Z12setupLoraAppv+0x1a8>)
 8003050:	605a      	str	r2, [r3, #4]
	macSetDevAddr.size			= sizeof ( macSetDevAddr_RN2903 ) - 1;
 8003052:	4b42      	ldr	r3, [pc, #264]	; (800315c <_Z12setupLoraAppv+0x1a4>)
 8003054:	221a      	movs	r2, #26
 8003056:	701a      	strb	r2, [r3, #0]
	macSetDevAddr.responseSize	= 2;
 8003058:	4b40      	ldr	r3, [pc, #256]	; (800315c <_Z12setupLoraAppv+0x1a4>)
 800305a:	2202      	movs	r2, #2
 800305c:	721a      	strb	r2, [r3, #8]

	///////////////////
	// MAC JOIN OTAA //
	///////////////////

	macJoinOtaa.command			= macJoinOtaa_RN2903;
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <_Z12setupLoraAppv+0x1ac>)
 8003060:	4a41      	ldr	r2, [pc, #260]	; (8003168 <_Z12setupLoraAppv+0x1b0>)
 8003062:	605a      	str	r2, [r3, #4]
	macJoinOtaa.size			= sizeof ( macJoinOtaa_RN2903 ) - 1;
 8003064:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <_Z12setupLoraAppv+0x1ac>)
 8003066:	220f      	movs	r2, #15
 8003068:	701a      	strb	r2, [r3, #0]
	macJoinOtaa.responseSize	= 7;
 800306a:	4b3e      	ldr	r3, [pc, #248]	; (8003164 <_Z12setupLoraAppv+0x1ac>)
 800306c:	2207      	movs	r2, #7
 800306e:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC JOIN ABP //
	//////////////////

	macJoinAbp.command		= macJoinAbp_RN2903;
 8003070:	4b3e      	ldr	r3, [pc, #248]	; (800316c <_Z12setupLoraAppv+0x1b4>)
 8003072:	4a3f      	ldr	r2, [pc, #252]	; (8003170 <_Z12setupLoraAppv+0x1b8>)
 8003074:	605a      	str	r2, [r3, #4]
	macJoinAbp.size			= sizeof( macJoinAbp_RN2903 ) - 1;
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <_Z12setupLoraAppv+0x1b4>)
 8003078:	220e      	movs	r2, #14
 800307a:	701a      	strb	r2, [r3, #0]
	macJoinAbp.responseSize	= 2;
 800307c:	4b3b      	ldr	r3, [pc, #236]	; (800316c <_Z12setupLoraAppv+0x1b4>)
 800307e:	2202      	movs	r2, #2
 8003080:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC SET SYNC //
	//////////////////

	macSetSync.command		= macSetSync_RN2903;
 8003082:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <_Z12setupLoraAppv+0x1bc>)
 8003084:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <_Z12setupLoraAppv+0x1c0>)
 8003086:	605a      	str	r2, [r3, #4]
	macSetSync.size			= sizeof( macSetSync_RN2903 ) - 1;
 8003088:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <_Z12setupLoraAppv+0x1bc>)
 800308a:	2211      	movs	r2, #17
 800308c:	701a      	strb	r2, [r3, #0]
	macSetSync.responseSize	= 3;
 800308e:	4b39      	ldr	r3, [pc, #228]	; (8003174 <_Z12setupLoraAppv+0x1bc>)
 8003090:	2203      	movs	r2, #3
 8003092:	721a      	strb	r2, [r3, #8]

	//////////////
	// MAC SAVE //
	//////////////

	macSave.command			= macSave_RN2903;
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <_Z12setupLoraAppv+0x1c4>)
 8003096:	4a3a      	ldr	r2, [pc, #232]	; (8003180 <_Z12setupLoraAppv+0x1c8>)
 8003098:	605a      	str	r2, [r3, #4]
	macSave.size			= sizeof( macSave_RN2903 ) - 1;
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <_Z12setupLoraAppv+0x1c4>)
 800309c:	220a      	movs	r2, #10
 800309e:	701a      	strb	r2, [r3, #0]
	macSave.responseSize	= 3;
 80030a0:	4b36      	ldr	r3, [pc, #216]	; (800317c <_Z12setupLoraAppv+0x1c4>)
 80030a2:	2203      	movs	r2, #3
 80030a4:	721a      	strb	r2, [r3, #8]

	/////////////////
	// MAC TX DATA //
	/////////////////

	 macTxData.command		= macTxData_RN2903;
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <_Z12setupLoraAppv+0x1cc>)
 80030a8:	4a37      	ldr	r2, [pc, #220]	; (8003188 <_Z12setupLoraAppv+0x1d0>)
 80030aa:	605a      	str	r2, [r3, #4]
	 macTxData.size			= sizeof( macTxData_RN2903 ) - 1;
 80030ac:	4b35      	ldr	r3, [pc, #212]	; (8003184 <_Z12setupLoraAppv+0x1cc>)
 80030ae:	2219      	movs	r2, #25
 80030b0:	701a      	strb	r2, [r3, #0]
	 macTxData.responseSize	= 14;
 80030b2:	4b34      	ldr	r3, [pc, #208]	; (8003184 <_Z12setupLoraAppv+0x1cc>)
 80030b4:	220e      	movs	r2, #14
 80030b6:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	 macTxGps.command		= macTxGps_RN2903;
 80030b8:	4b34      	ldr	r3, [pc, #208]	; (800318c <_Z12setupLoraAppv+0x1d4>)
 80030ba:	4a35      	ldr	r2, [pc, #212]	; (8003190 <_Z12setupLoraAppv+0x1d8>)
 80030bc:	605a      	str	r2, [r3, #4]
	 macTxGps.size			= sizeof( macTxGps_RN2903 ) - 1;
 80030be:	4b33      	ldr	r3, [pc, #204]	; (800318c <_Z12setupLoraAppv+0x1d4>)
 80030c0:	2219      	movs	r2, #25
 80030c2:	701a      	strb	r2, [r3, #0]
	 macTxGps.responseSize	= 14;
 80030c4:	4b31      	ldr	r3, [pc, #196]	; (800318c <_Z12setupLoraAppv+0x1d4>)
 80030c6:	220e      	movs	r2, #14
 80030c8:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	  macTxSys.command		= macTxSys_RN2903;
 80030ca:	4b32      	ldr	r3, [pc, #200]	; (8003194 <_Z12setupLoraAppv+0x1dc>)
 80030cc:	4a32      	ldr	r2, [pc, #200]	; (8003198 <_Z12setupLoraAppv+0x1e0>)
 80030ce:	605a      	str	r2, [r3, #4]
	  macTxSys.size			= sizeof( macTxSys_RN2903 ) - 1;
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <_Z12setupLoraAppv+0x1dc>)
 80030d2:	2215      	movs	r2, #21
 80030d4:	701a      	strb	r2, [r3, #0]
	  macTxSys.responseSize	= 14;
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <_Z12setupLoraAppv+0x1dc>)
 80030d8:	220e      	movs	r2, #14
 80030da:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 8 //
	  //////////////////

	  macSetCh8.command		= macSetCh8_RN2903;
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <_Z12setupLoraAppv+0x1e4>)
 80030de:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <_Z12setupLoraAppv+0x1e8>)
 80030e0:	605a      	str	r2, [r3, #4]
	  macSetCh8.size		= sizeof( macSetCh8_RN2903 ) - 1;
 80030e2:	4b2e      	ldr	r3, [pc, #184]	; (800319c <_Z12setupLoraAppv+0x1e4>)
 80030e4:	2219      	movs	r2, #25
 80030e6:	701a      	strb	r2, [r3, #0]
	  macSetCh8.responseSize	= 9;
 80030e8:	4b2c      	ldr	r3, [pc, #176]	; (800319c <_Z12setupLoraAppv+0x1e4>)
 80030ea:	2209      	movs	r2, #9
 80030ec:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 9 //
	  //////////////////

	  macSetCh9.command		= macSetCh9_RN2903;
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <_Z12setupLoraAppv+0x1ec>)
 80030f0:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <_Z12setupLoraAppv+0x1f0>)
 80030f2:	605a      	str	r2, [r3, #4]
	  macSetCh9.size		= sizeof( macSetCh9_RN2903 ) - 1;
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <_Z12setupLoraAppv+0x1ec>)
 80030f6:	2219      	movs	r2, #25
 80030f8:	701a      	strb	r2, [r3, #0]
	  macSetCh9.responseSize	= 9;
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <_Z12setupLoraAppv+0x1ec>)
 80030fc:	2209      	movs	r2, #9
 80030fe:	721a      	strb	r2, [r3, #8]

	  ///////////////////
	  // MAC SET CH 10 //
	  ///////////////////
	  macSetCh10.command		= macSetCh10_RN2903;
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <_Z12setupLoraAppv+0x1f4>)
 8003102:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <_Z12setupLoraAppv+0x1f8>)
 8003104:	605a      	str	r2, [r3, #4]
	  macSetCh10.size			= sizeof( macSetCh10_RN2903 ) - 1;
 8003106:	4b29      	ldr	r3, [pc, #164]	; (80031ac <_Z12setupLoraAppv+0x1f4>)
 8003108:	221a      	movs	r2, #26
 800310a:	701a      	strb	r2, [r3, #0]
	  macSetCh10.responseSize	= 9;
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <_Z12setupLoraAppv+0x1f4>)
 800310e:	2209      	movs	r2, #9
 8003110:	721a      	strb	r2, [r3, #8]

}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	20000544 	.word	0x20000544
 8003120:	20000128 	.word	0x20000128
 8003124:	20000550 	.word	0x20000550
 8003128:	20000134 	.word	0x20000134
 800312c:	2000055c 	.word	0x2000055c
 8003130:	2000014c 	.word	0x2000014c
 8003134:	20000568 	.word	0x20000568
 8003138:	20000160 	.word	0x20000160
 800313c:	20000574 	.word	0x20000574
 8003140:	20000174 	.word	0x20000174
 8003144:	20000580 	.word	0x20000580
 8003148:	20000188 	.word	0x20000188
 800314c:	20000598 	.word	0x20000598
 8003150:	200001c8 	.word	0x200001c8
 8003154:	200005a4 	.word	0x200005a4
 8003158:	200001fc 	.word	0x200001fc
 800315c:	2000058c 	.word	0x2000058c
 8003160:	200001ac 	.word	0x200001ac
 8003164:	200005b0 	.word	0x200005b0
 8003168:	20000230 	.word	0x20000230
 800316c:	200005bc 	.word	0x200005bc
 8003170:	20000240 	.word	0x20000240
 8003174:	200005c8 	.word	0x200005c8
 8003178:	20000250 	.word	0x20000250
 800317c:	200005d4 	.word	0x200005d4
 8003180:	20000264 	.word	0x20000264
 8003184:	200005e0 	.word	0x200005e0
 8003188:	20000270 	.word	0x20000270
 800318c:	200005ec 	.word	0x200005ec
 8003190:	2000028c 	.word	0x2000028c
 8003194:	200005f8 	.word	0x200005f8
 8003198:	200002a8 	.word	0x200002a8
 800319c:	20000604 	.word	0x20000604
 80031a0:	200002c0 	.word	0x200002c0
 80031a4:	20000610 	.word	0x20000610
 80031a8:	200002dc 	.word	0x200002dc
 80031ac:	2000061c 	.word	0x2000061c
 80031b0:	200002f8 	.word	0x200002f8

080031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>:

/////////////////
// ADD COMMAND //
/////////////////

void loraRutine::addCommand ( rn2903Command *command ){
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
	this->listCommands[ this->sizeList ]	= command;	// AÑADE PUNTERO A LISTA
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 80031c4:	4619      	mov	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	this->sizeList++;									// Suma 1 al largo de lista
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 80031d4:	3301      	adds	r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_ZN9wdTimeoutC1El>:
 *		5.- newMessage:	Indica si se recibió un mensaje
 *		6.- timeout:	Indica si hubo un timeout
 *
 */

wdTimeout::wdTimeout( long limit ){	// Constructor
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
	this->limit	= limit;			// Se debe fijar el limite de timeout
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_ZN9loraCheck18setResponsePointerEPPhh>:

//////////////////////////
// SET RESPONSE POINTER //
//////////////////////////

void loraCheck::setResponsePointer( uint8_t *pointer[], uint8_t sizeIdealResponses ){
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	71fb      	strb	r3, [r7, #7]
	this->idealResponses		= &pointer[0];
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]
	this->sizeIdealResponses	= sizeIdealResponses;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	79fa      	ldrb	r2, [r7, #7]
 8003220:	731a      	strb	r2, [r3, #12]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <_ZN9loraInput12insertBufferEPhh>:

///////////////////
// INSERT BUFFER //
///////////////////

void loraInput::insertBuffer(uint8_t *buffer, uint8_t sizeBuffer){
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	4613      	mov	r3, r2
 800323a:	71fb      	strb	r3, [r7, #7]
	this->buffer		= buffer;		// Guarda puntero inicial del buffer
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	605a      	str	r2, [r3, #4]
	this->sizeBuffer	= sizeBuffer;	// Guarda tamaño del buffer
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	79fa      	ldrb	r2, [r7, #7]
 8003246:	721a      	strb	r2, [r3, #8]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_ZN12loraDecision10setRetriesEh>:

//////////////////
// SET RETRIES  //
//////////////////

void loraDecision::setRetries( uint8_t retries ){
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
	this->retries	= retries;					//
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	701a      	strb	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <_ZN12fifoCommandsC1Ev>:
////////////////////////
// FIFO COMMAND CLASS //
////////////////////////


class fifoCommands{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f103 022f 	add.w	r2, r3, #47	; 0x2f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f103 0239 	add.w	r2, r3, #57	; 0x39
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f103 0243 	add.w	r2, r3, #67	; 0x43
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f103 024d 	add.w	r2, r3, #77	; 0x4d
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	611a      	str	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f103 0257 	add.w	r2, r3, #87	; 0x57
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	615a      	str	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f103 0261 	add.w	r2, r3, #97	; 0x61
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	619a      	str	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f103 026b 	add.w	r2, r3, #107	; 0x6b
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	61da      	str	r2, [r3, #28]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f103 0275 	add.w	r2, r3, #117	; 0x75
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	621a      	str	r2, [r3, #32]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f103 027f 	add.w	r2, r3, #127	; 0x7f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f103 0289 	add.w	r2, r3, #137	; 0x89
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032f0:	f001 f929 	bl	8004546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032f4:	f000 f8ca 	bl	800348c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032f8:	f000 fb26 	bl	8003948 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80032fc:	f000 faca 	bl	8003894 <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8003300:	f000 fa60 	bl	80037c4 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8003304:	f000 fa92 	bl	800382c <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 8003308:	f000 f9ce 	bl	80036a8 <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 800330c:	f000 fa1a 	bl	8003744 <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 8003310:	f000 f91a 	bl	8003548 <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 8003314:	f000 f911 	bl	800353a <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 8003318:	483d      	ldr	r0, [pc, #244]	; (8003410 <main+0x124>)
 800331a:	f007 fb67 	bl	800a9ec <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA	(&huart4,	rxLora, sizeof(rxLora));
 800331e:	2201      	movs	r2, #1
 8003320:	493c      	ldr	r1, [pc, #240]	; (8003414 <main+0x128>)
 8003322:	483d      	ldr	r0, [pc, #244]	; (8003418 <main+0x12c>)
 8003324:	f007 fe8a 	bl	800b03c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA	(&huart5,	rxGps, sizeof(rxGps));
 8003328:	2202      	movs	r2, #2
 800332a:	493c      	ldr	r1, [pc, #240]	; (800341c <main+0x130>)
 800332c:	483c      	ldr	r0, [pc, #240]	; (8003420 <main+0x134>)
 800332e:	f007 fe85 	bl	800b03c <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 8003332:	2203      	movs	r2, #3
 8003334:	493b      	ldr	r1, [pc, #236]	; (8003424 <main+0x138>)
 8003336:	483c      	ldr	r0, [pc, #240]	; (8003428 <main+0x13c>)
 8003338:	f001 fd1c 	bl	8004d74 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupLoraApp();
 800333c:	f7ff fe3c 	bl	8002fb8 <_Z12setupLoraAppv>

  chSetRN2903.addCommand( &macSetCh8 );
 8003340:	493a      	ldr	r1, [pc, #232]	; (800342c <main+0x140>)
 8003342:	483b      	ldr	r0, [pc, #236]	; (8003430 <main+0x144>)
 8003344:	f7ff ff36 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh9 );
 8003348:	493a      	ldr	r1, [pc, #232]	; (8003434 <main+0x148>)
 800334a:	4839      	ldr	r0, [pc, #228]	; (8003430 <main+0x144>)
 800334c:	f7ff ff32 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh10 );
 8003350:	4939      	ldr	r1, [pc, #228]	; (8003438 <main+0x14c>)
 8003352:	4837      	ldr	r0, [pc, #220]	; (8003430 <main+0x144>)
 8003354:	f7ff ff2e 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &radioSetMod	);
 8003358:	4938      	ldr	r1, [pc, #224]	; (800343c <main+0x150>)
 800335a:	4839      	ldr	r0, [pc, #228]	; (8003440 <main+0x154>)
 800335c:	f7ff ff2a 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetSf 	);
 8003360:	4938      	ldr	r1, [pc, #224]	; (8003444 <main+0x158>)
 8003362:	4837      	ldr	r0, [pc, #220]	; (8003440 <main+0x154>)
 8003364:	f7ff ff26 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetBw 	);
 8003368:	4937      	ldr	r1, [pc, #220]	; (8003448 <main+0x15c>)
 800336a:	4835      	ldr	r0, [pc, #212]	; (8003440 <main+0x154>)
 800336c:	f7ff ff22 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetPwr 	);
 8003370:	4936      	ldr	r1, [pc, #216]	; (800344c <main+0x160>)
 8003372:	4833      	ldr	r0, [pc, #204]	; (8003440 <main+0x154>)
 8003374:	f7ff ff1e 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &macSetDeveui );
 8003378:	4935      	ldr	r1, [pc, #212]	; (8003450 <main+0x164>)
 800337a:	4831      	ldr	r0, [pc, #196]	; (8003440 <main+0x154>)
 800337c:	f7ff ff1a 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetDevAddr );
 8003380:	4934      	ldr	r1, [pc, #208]	; (8003454 <main+0x168>)
 8003382:	482f      	ldr	r0, [pc, #188]	; (8003440 <main+0x154>)
 8003384:	f7ff ff16 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetNwkskey );
 8003388:	4933      	ldr	r1, [pc, #204]	; (8003458 <main+0x16c>)
 800338a:	482d      	ldr	r0, [pc, #180]	; (8003440 <main+0x154>)
 800338c:	f7ff ff12 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetAppskey );
 8003390:	4932      	ldr	r1, [pc, #200]	; (800345c <main+0x170>)
 8003392:	482b      	ldr	r0, [pc, #172]	; (8003440 <main+0x154>)
 8003394:	f7ff ff0e 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macJoinAbp );
 8003398:	4931      	ldr	r1, [pc, #196]	; (8003460 <main+0x174>)
 800339a:	4829      	ldr	r0, [pc, #164]	; (8003440 <main+0x154>)
 800339c:	f7ff ff0a 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetSync );
 80033a0:	4930      	ldr	r1, [pc, #192]	; (8003464 <main+0x178>)
 80033a2:	4827      	ldr	r0, [pc, #156]	; (8003440 <main+0x154>)
 80033a4:	f7ff ff06 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSave );
 80033a8:	492f      	ldr	r1, [pc, #188]	; (8003468 <main+0x17c>)
 80033aa:	4825      	ldr	r0, [pc, #148]	; (8003440 <main+0x154>)
 80033ac:	f7ff ff02 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loopRN2903.addCommand( &macTxData );
 80033b0:	492e      	ldr	r1, [pc, #184]	; (800346c <main+0x180>)
 80033b2:	482f      	ldr	r0, [pc, #188]	; (8003470 <main+0x184>)
 80033b4:	f7ff fefe 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  loopRN2903.addCommand( &macTxData );
 80033b8:	492c      	ldr	r1, [pc, #176]	; (800346c <main+0x180>)
 80033ba:	482d      	ldr	r0, [pc, #180]	; (8003470 <main+0x184>)
 80033bc:	f7ff fefa 	bl	80031b4 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loraCheck.setResponsePointer( rxCommand, 13);
 80033c0:	220d      	movs	r2, #13
 80033c2:	492c      	ldr	r1, [pc, #176]	; (8003474 <main+0x188>)
 80033c4:	482c      	ldr	r0, [pc, #176]	; (8003478 <main+0x18c>)
 80033c6:	f7ff ff1f 	bl	8003208 <_ZN9loraCheck18setResponsePointerEPPhh>
  loraDecision.setRetries(3);
 80033ca:	2103      	movs	r1, #3
 80033cc:	482b      	ldr	r0, [pc, #172]	; (800347c <main+0x190>)
 80033ce:	f7ff ff41 	bl	8003254 <_ZN12loraDecision10setRetriesEh>

  loraInput.insertBuffer( bufferLoraIn, sizeof(bufferLoraIn));
 80033d2:	2232      	movs	r2, #50	; 0x32
 80033d4:	492a      	ldr	r1, [pc, #168]	; (8003480 <main+0x194>)
 80033d6:	482b      	ldr	r0, [pc, #172]	; (8003484 <main+0x198>)
 80033d8:	f7ff ff29 	bl	800322e <_ZN9loraInput12insertBufferEPhh>
  //
  //HAL_IWDG_Init(&hiwdg);
  while (1)
  {

	  hwInput();
 80033dc:	f7fe fc84 	bl	8001ce8 <_Z7hwInputv>
	  linkInput();
 80033e0:	f7ff fb3e 	bl	8002a60 <_Z9linkInputv>
	  //tcpInput();
	  app();
 80033e4:	f7fd feb0 	bl	8001148 <_Z3appv>
	  //tcpOutput();
	  linkOutput();
 80033e8:	f7ff fdb2 	bl	8002f50 <_Z10linkOutputv>
	  hwOutput();
 80033ec:	f7ff f8c2 	bl	8002574 <_Z8hwOutputv>
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */


	  HAL_SuspendTick();
 80033f0:	f001 f942 	bl	8004678 <HAL_SuspendTick>
	  //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 80033f4:	bf00      	nop
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <main+0x19c>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	f083 0301 	eor.w	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f8      	bne.n	80033f6 <main+0x10a>
	  }// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <main+0x19c>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]

	  HAL_ResumeTick();
 800340a:	f001 f945 	bl	8004698 <HAL_ResumeTick>
	  hwInput();
 800340e:	e7e5      	b.n	80033dc <main+0xf0>
 8003410:	200009ec 	.word	0x200009ec
 8003414:	20000ad8 	.word	0x20000ad8
 8003418:	200007bc 	.word	0x200007bc
 800341c:	20000ad4 	.word	0x20000ad4
 8003420:	20000844 	.word	0x20000844
 8003424:	20001124 	.word	0x20001124
 8003428:	20000628 	.word	0x20000628
 800342c:	20000604 	.word	0x20000604
 8003430:	20000d0c 	.word	0x20000d0c
 8003434:	20000610 	.word	0x20000610
 8003438:	2000061c 	.word	0x2000061c
 800343c:	20000550 	.word	0x20000550
 8003440:	20000b78 	.word	0x20000b78
 8003444:	2000055c 	.word	0x2000055c
 8003448:	20000568 	.word	0x20000568
 800344c:	20000574 	.word	0x20000574
 8003450:	20000580 	.word	0x20000580
 8003454:	2000058c 	.word	0x2000058c
 8003458:	20000598 	.word	0x20000598
 800345c:	200005a4 	.word	0x200005a4
 8003460:	200005bc 	.word	0x200005bc
 8003464:	200005c8 	.word	0x200005c8
 8003468:	200005d4 	.word	0x200005d4
 800346c:	200005e0 	.word	0x200005e0
 8003470:	20000ea0 	.word	0x20000ea0
 8003474:	200000f0 	.word	0x200000f0
 8003478:	20000b5c 	.word	0x20000b5c
 800347c:	20000b70 	.word	0x20000b70
 8003480:	20001034 	.word	0x20001034
 8003484:	20000b1c 	.word	0x20000b1c
 8003488:	20001120 	.word	0x20001120

0800348c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b096      	sub	sp, #88	; 0x58
 8003490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	2244      	movs	r2, #68	; 0x44
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f009 f800 	bl	800c4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034a0:	463b      	mov	r3, r7
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80034ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034b2:	f005 fee5 	bl	8009280 <HAL_PWREx_ControlVoltageScaling>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80034c6:	f000 fb6f 	bl	8003ba8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80034ca:	2303      	movs	r3, #3
 80034cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034da:	2340      	movs	r3, #64	; 0x40
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80034de:	2300      	movs	r3, #0
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4618      	mov	r0, r3
 80034e8:	f005 ff20 	bl	800932c <HAL_RCC_OscConfig>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80034fc:	f000 fb54 	bl	8003ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003500:	230f      	movs	r3, #15
 8003502:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003504:	2302      	movs	r3, #2
 8003506:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003514:	463b      	mov	r3, r7
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f006 fb21 	bl	8009b60 <HAL_RCC_ClockConfig>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800352e:	f000 fb3b 	bl	8003ba8 <Error_Handler>
  }
}
 8003532:	bf00      	nop
 8003534:	3758      	adds	r7, #88	; 0x58
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  //}

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 800354e:	f107 031c 	add.w	r3, r7, #28
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
 8003568:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 800356c:	4a4a      	ldr	r2, [pc, #296]	; (8003698 <_ZL12MX_ADC1_Initv+0x150>)
 800356e:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 8003572:	2200      	movs	r2, #0
 8003574:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800357c:	4b45      	ldr	r3, [pc, #276]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003582:	4b44      	ldr	r3, [pc, #272]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 8003584:	2201      	movs	r2, #1
 8003586:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003588:	4b42      	ldr	r3, [pc, #264]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 800358a:	2204      	movs	r2, #4
 800358c:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 8003590:	2200      	movs	r2, #0
 8003592:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8003594:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 8003596:	2201      	movs	r2, #1
 8003598:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 800359c:	2203      	movs	r2, #3
 800359e:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035a0:	4b3c      	ldr	r3, [pc, #240]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035a8:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035ae:	4b39      	ldr	r3, [pc, #228]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 80035b4:	4b37      	ldr	r3, [pc, #220]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035ca:	4832      	ldr	r0, [pc, #200]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 80035cc:	f001 fa7e 	bl	8004acc <HAL_ADC_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 80035e0:	f000 fae2 	bl	8003ba8 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80035e8:	f107 031c 	add.w	r3, r7, #28
 80035ec:	4619      	mov	r1, r3
 80035ee:	4829      	ldr	r0, [pc, #164]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 80035f0:	f002 fc32 	bl	8005e58 <HAL_ADCEx_MultiModeConfigChannel>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 8003604:	f000 fad0 	bl	8003ba8 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8003608:	4b24      	ldr	r3, [pc, #144]	; (800369c <_ZL12MX_ADC1_Initv+0x154>)
 800360a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800360c:	2306      	movs	r3, #6
 800360e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8003610:	2303      	movs	r3, #3
 8003612:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003614:	237f      	movs	r3, #127	; 0x7f
 8003616:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003618:	2304      	movs	r3, #4
 800361a:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	4619      	mov	r1, r3
 8003624:	481b      	ldr	r0, [pc, #108]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 8003626:	f001 fe99 	bl	800535c <HAL_ADC_ConfigChannel>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 800363a:	f000 fab5 	bl	8003ba8 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <_ZL12MX_ADC1_Initv+0x158>)
 8003640:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003642:	230c      	movs	r3, #12
 8003644:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4812      	ldr	r0, [pc, #72]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 800364c:	f001 fe86 	bl	800535c <HAL_ADC_ConfigChannel>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 8003660:	f000 faa2 	bl	8003ba8 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <_ZL12MX_ADC1_Initv+0x15c>)
 8003666:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003668:	2312      	movs	r3, #18
 800366a:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4808      	ldr	r0, [pc, #32]	; (8003694 <_ZL12MX_ADC1_Initv+0x14c>)
 8003672:	f001 fe73 	bl	800535c <HAL_ADC_ConfigChannel>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 8003686:	f000 fa8f 	bl	8003ba8 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 800368a:	bf00      	nop
 800368c:	3728      	adds	r7, #40	; 0x28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000628 	.word	0x20000628
 8003698:	50040000 	.word	0x50040000
 800369c:	04300002 	.word	0x04300002
 80036a0:	08600004 	.word	0x08600004
 80036a4:	0c900008 	.word	0x0c900008

080036a8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036ac:	4b22      	ldr	r3, [pc, #136]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036ae:	4a23      	ldr	r2, [pc, #140]	; (800373c <_ZL12MX_I2C1_Initv+0x94>)
 80036b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80036b2:	4b21      	ldr	r3, [pc, #132]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <_ZL12MX_I2C1_Initv+0x98>)
 80036b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036d0:	4b19      	ldr	r3, [pc, #100]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036d8:	2200      	movs	r2, #0
 80036da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036e2:	4815      	ldr	r0, [pc, #84]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 80036e4:	f003 f9c0 	bl	8006a68 <HAL_I2C_Init>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf14      	ite	ne
 80036ee:	2301      	movne	r3, #1
 80036f0:	2300      	moveq	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80036f8:	f000 fa56 	bl	8003ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036fc:	2100      	movs	r1, #0
 80036fe:	480e      	ldr	r0, [pc, #56]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 8003700:	f005 fd18 	bl	8009134 <HAL_I2CEx_ConfigAnalogFilter>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8003714:	f000 fa48 	bl	8003ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003718:	2100      	movs	r1, #0
 800371a:	4807      	ldr	r0, [pc, #28]	; (8003738 <_ZL12MX_I2C1_Initv+0x90>)
 800371c:	f005 fd55 	bl	80091ca <HAL_I2CEx_ConfigDigitalFilter>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8003730:	f000 fa3a 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200006d8 	.word	0x200006d8
 800373c:	40005400 	.word	0x40005400
 8003740:	2000090e 	.word	0x2000090e

08003744 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <_ZL12MX_TIM6_Initv+0x78>)
 8003756:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <_ZL12MX_TIM6_Initv+0x7c>)
 8003758:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <_ZL12MX_TIM6_Initv+0x78>)
 800375c:	2201      	movs	r2, #1
 800375e:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <_ZL12MX_TIM6_Initv+0x78>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <_ZL12MX_TIM6_Initv+0x78>)
 8003768:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800376c:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <_ZL12MX_TIM6_Initv+0x78>)
 8003770:	2200      	movs	r2, #0
 8003772:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003774:	4811      	ldr	r0, [pc, #68]	; (80037bc <_ZL12MX_TIM6_Initv+0x78>)
 8003776:	f007 f8e1 	bl	800a93c <HAL_TIM_Base_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 800378a:	f000 fa0d 	bl	8003ba8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	4619      	mov	r1, r3
 800379a:	4808      	ldr	r0, [pc, #32]	; (80037bc <_ZL12MX_TIM6_Initv+0x78>)
 800379c:	f007 fb5a 	bl	800ae54 <HAL_TIMEx_MasterConfigSynchronization>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 80037b0:	f000 f9fa 	bl	8003ba8 <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200009ec 	.word	0x200009ec
 80037c0:	40001000 	.word	0x40001000

080037c4 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <_ZL13MX_UART4_Initv+0x64>)
 80037cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 80037ce:	4b15      	ldr	r3, [pc, #84]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037d0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80037d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037ea:	220c      	movs	r2, #12
 80037ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 8003802:	2200      	movs	r2, #0
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003806:	4807      	ldr	r0, [pc, #28]	; (8003824 <_ZL13MX_UART4_Initv+0x60>)
 8003808:	f007 fbca 	bl	800afa0 <HAL_UART_Init>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 800381c:	f000 f9c4 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}
 8003824:	200007bc 	.word	0x200007bc
 8003828:	40004c00 	.word	0x40004c00

0800382c <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003830:	4b16      	ldr	r3, [pc, #88]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 8003832:	4a17      	ldr	r2, [pc, #92]	; (8003890 <_ZL13MX_UART5_Initv+0x64>)
 8003834:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 8003838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800383c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 800384c:	2200      	movs	r2, #0
 800384e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 8003852:	220c      	movs	r2, #12
 8003854:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 8003864:	2200      	movs	r2, #0
 8003866:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 800386a:	2200      	movs	r2, #0
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800386e:	4807      	ldr	r0, [pc, #28]	; (800388c <_ZL13MX_UART5_Initv+0x60>)
 8003870:	f007 fb96 	bl	800afa0 <HAL_UART_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8003884:	f000 f990 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20000844 	.word	0x20000844
 8003890:	40005000 	.word	0x40005000

08003894 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <_ZL11MX_DMA_Initv+0xb0>)
 800389c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <_ZL11MX_DMA_Initv+0xb0>)
 80038a0:	f043 0302 	orr.w	r3, r3, #2
 80038a4:	6493      	str	r3, [r2, #72]	; 0x48
 80038a6:	4b27      	ldr	r3, [pc, #156]	; (8003944 <_ZL11MX_DMA_Initv+0xb0>)
 80038a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <_ZL11MX_DMA_Initv+0xb0>)
 80038b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b6:	4a23      	ldr	r2, [pc, #140]	; (8003944 <_ZL11MX_DMA_Initv+0xb0>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6493      	str	r3, [r2, #72]	; 0x48
 80038be:	4b21      	ldr	r3, [pc, #132]	; (8003944 <_ZL11MX_DMA_Initv+0xb0>)
 80038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	200b      	movs	r0, #11
 80038d0:	f002 fc4d 	bl	800616e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80038d4:	200b      	movs	r0, #11
 80038d6:	f002 fc66 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	2010      	movs	r0, #16
 80038e0:	f002 fc45 	bl	800616e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80038e4:	2010      	movs	r0, #16
 80038e6:	f002 fc5e 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	2011      	movs	r0, #17
 80038f0:	f002 fc3d 	bl	800616e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80038f4:	2011      	movs	r0, #17
 80038f6:	f002 fc56 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2100      	movs	r1, #0
 80038fe:	2038      	movs	r0, #56	; 0x38
 8003900:	f002 fc35 	bl	800616e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003904:	2038      	movs	r0, #56	; 0x38
 8003906:	f002 fc4e 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800390a:	2200      	movs	r2, #0
 800390c:	2100      	movs	r1, #0
 800390e:	2039      	movs	r0, #57	; 0x39
 8003910:	f002 fc2d 	bl	800616e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8003914:	2039      	movs	r0, #57	; 0x39
 8003916:	f002 fc46 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800391a:	2200      	movs	r2, #0
 800391c:	2100      	movs	r1, #0
 800391e:	203a      	movs	r0, #58	; 0x3a
 8003920:	f002 fc25 	bl	800616e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003924:	203a      	movs	r0, #58	; 0x3a
 8003926:	f002 fc3e 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	203c      	movs	r0, #60	; 0x3c
 8003930:	f002 fc1d 	bl	800616e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003934:	203c      	movs	r0, #60	; 0x3c
 8003936:	f002 fc36 	bl	80061a6 <HAL_NVIC_EnableIRQ>

}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000

08003948 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	; 0x30
 800394c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	60da      	str	r2, [r3, #12]
 800395c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800395e:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4a4a      	ldr	r2, [pc, #296]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 8003964:	f043 0310 	orr.w	r3, r3, #16
 8003968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396a:	4b48      	ldr	r3, [pc, #288]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003976:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	4a44      	ldr	r2, [pc, #272]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003982:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800398e:	4b3f      	ldr	r3, [pc, #252]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	4a3e      	ldr	r2, [pc, #248]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 8003994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399a:	4b3c      	ldr	r3, [pc, #240]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b2:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039be:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	4a32      	ldr	r2, [pc, #200]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ca:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039da:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e2:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <_ZL12MX_GPIO_Initv+0x144>)
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80039ee:	2200      	movs	r2, #0
 80039f0:	210f      	movs	r1, #15
 80039f2:	4827      	ldr	r0, [pc, #156]	; (8003a90 <_ZL12MX_GPIO_Initv+0x148>)
 80039f4:	f003 f820 	bl	8006a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80039f8:	2200      	movs	r2, #0
 80039fa:	2174      	movs	r1, #116	; 0x74
 80039fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a00:	f003 f81a 	bl	8006a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a04:	2200      	movs	r2, #0
 8003a06:	f64f 7105 	movw	r1, #65285	; 0xff05
 8003a0a:	4822      	ldr	r0, [pc, #136]	; (8003a94 <_ZL12MX_GPIO_Initv+0x14c>)
 8003a0c:	f003 f814 	bl	8006a38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8003a10:	230f      	movs	r3, #15
 8003a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a14:	2301      	movs	r3, #1
 8003a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	4619      	mov	r1, r3
 8003a26:	481a      	ldr	r0, [pc, #104]	; (8003a90 <_ZL12MX_GPIO_Initv+0x148>)
 8003a28:	f002 fe5c 	bl	80066e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003a2c:	2374      	movs	r3, #116	; 0x74
 8003a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a30:	2301      	movs	r3, #1
 8003a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	4619      	mov	r1, r3
 8003a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a46:	f002 fe4d 	bl	80066e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a60:	f002 fe40 	bl	80066e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a64:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003a68:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a72:	2300      	movs	r3, #0
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a76:	f107 031c 	add.w	r3, r7, #28
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4805      	ldr	r0, [pc, #20]	; (8003a94 <_ZL12MX_GPIO_Initv+0x14c>)
 8003a7e:	f002 fe31 	bl	80066e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a82:	bf00      	nop
 8003a84:	3730      	adds	r7, #48	; 0x30
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	48001000 	.word	0x48001000
 8003a94:	48000c00 	.word	0x48000c00

08003a98 <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a05      	ldr	r2, [pc, #20]	; (8003abc <HAL_ADC_ConvCpltCallback+0x24>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d102      	bne.n	8003ab0 <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_ADC_ConvCpltCallback+0x28>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	50040000 	.word	0x50040000
 8003ac0:	20001130 	.word	0x20001130

08003ac4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_UART_RxCpltCallback+0x64>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10a      	bne.n	8003aec <HAL_UART_RxCpltCallback+0x28>
		loraIn.insertElement(rxLora[0]);
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <HAL_UART_RxCpltCallback+0x68>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	4814      	ldr	r0, [pc, #80]	; (8003b30 <HAL_UART_RxCpltCallback+0x6c>)
 8003ade:	f7fe f8c5 	bl	8001c6c <_ZN8fifoUart13insertElementEh>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4911      	ldr	r1, [pc, #68]	; (8003b2c <HAL_UART_RxCpltCallback+0x68>)
 8003ae6:	4813      	ldr	r0, [pc, #76]	; (8003b34 <HAL_UART_RxCpltCallback+0x70>)
 8003ae8:	f007 faa8 	bl	800b03c <HAL_UART_Receive_DMA>
	}

	if(huart->Instance == UART5){
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a11      	ldr	r2, [pc, #68]	; (8003b38 <HAL_UART_RxCpltCallback+0x74>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d114      	bne.n	8003b20 <HAL_UART_RxCpltCallback+0x5c>
		gpsIn.insertElement(rxGps[0]);
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <HAL_UART_RxCpltCallback+0x78>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	4619      	mov	r1, r3
 8003afc:	4810      	ldr	r0, [pc, #64]	; (8003b40 <HAL_UART_RxCpltCallback+0x7c>)
 8003afe:	f7fe f8b5 	bl	8001c6c <_ZN8fifoUart13insertElementEh>
		gpsIn.insertElement(rxGps[1]);
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_UART_RxCpltCallback+0x78>)
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	4619      	mov	r1, r3
 8003b08:	480d      	ldr	r0, [pc, #52]	; (8003b40 <HAL_UART_RxCpltCallback+0x7c>)
 8003b0a:	f7fe f8af 	bl	8001c6c <_ZN8fifoUart13insertElementEh>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxGps, sizeof(rxGps));
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart5, rxGps, sizeof(rxGps));
 8003b0e:	2202      	movs	r2, #2
 8003b10:	490a      	ldr	r1, [pc, #40]	; (8003b3c <HAL_UART_RxCpltCallback+0x78>)
 8003b12:	480c      	ldr	r0, [pc, #48]	; (8003b44 <HAL_UART_RxCpltCallback+0x80>)
 8003b14:	f007 fa92 	bl	800b03c <HAL_UART_Receive_DMA>
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_UART_RxCpltCallback+0x80>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	621a      	str	r2, [r3, #32]
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
	}
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40004c00 	.word	0x40004c00
 8003b2c:	20000ad8 	.word	0x20000ad8
 8003b30:	20000adc 	.word	0x20000adc
 8003b34:	200007bc 	.word	0x200007bc
 8003b38:	40005000 	.word	0x40005000
 8003b3c:	20000ad4 	.word	0x20000ad4
 8003b40:	20000a94 	.word	0x20000a94
 8003b44:	20000844 	.word	0x20000844

08003b48 <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d102      	bne.n	8003b60 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
	}
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40001000 	.word	0x40001000
 8003b70:	20001120 	.word	0x20001120

08003b74 <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 8003b7c:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	2000108b 	.word	0x2000108b

08003b94 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bac:	b672      	cpsid	i
}
 8003bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bb0:	e7fe      	b.n	8003bb0 <Error_Handler+0x8>
	...

08003bb4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d115      	bne.n	8003bf0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d110      	bne.n	8003bf0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
gpsInput gpsInput;		// Instancia de gpsInput
 8003bce:	480a      	ldr	r0, [pc, #40]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003bd0:	f7fe f87f 	bl	8001cd2 <_ZN8gpsInputC1Ev>
fifoUart	gpsIn;		//
 8003bd4:	4809      	ldr	r0, [pc, #36]	; (8003bfc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003bd6:	f7fe f839 	bl	8001c4c <_ZN8fifoUartC1Ev>
fifoUart loraIn;			// FIFO que recibe los datos
 8003bda:	4809      	ldr	r0, [pc, #36]	; (8003c00 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003bdc:	f7fe f836 	bl	8001c4c <_ZN8fifoUartC1Ev>
wdTimeout loraTimeWd(4000);
 8003be0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003be4:	4807      	ldr	r0, [pc, #28]	; (8003c04 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003be6:	f7ff fb00 	bl	80031ea <_ZN9wdTimeoutC1El>
fifoCommands fifoContent;
 8003bea:	4807      	ldr	r0, [pc, #28]	; (8003c08 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003bec:	f7ff fb41 	bl	8003272 <_ZN12fifoCommandsC1Ev>
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000a3c 	.word	0x20000a3c
 8003bfc:	20000a94 	.word	0x20000a94
 8003c00:	20000adc 	.word	0x20000adc
 8003c04:	20001068 	.word	0x20001068
 8003c08:	2000108c 	.word	0x2000108c

08003c0c <_GLOBAL__sub_I_hadc1>:
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7ff ffcd 	bl	8003bb4 <_Z41__static_initialization_and_destruction_0ii>
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <HAL_MspInit+0x44>)
 8003c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c26:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <HAL_MspInit+0x44>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <HAL_MspInit+0x44>)
 8003c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_MspInit+0x44>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <HAL_MspInit+0x44>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6593      	str	r3, [r2, #88]	; 0x58
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_MspInit+0x44>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b0ac      	sub	sp, #176	; 0xb0
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	228c      	movs	r2, #140	; 0x8c
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f008 fc0b 	bl	800c4a0 <memset>
  if(hadc->Instance==ADC1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_ADC_MspInit+0x12c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d179      	bne.n	8003d88 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003c94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003c9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003caa:	2308      	movs	r3, #8
 8003cac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cc0:	f107 0310 	add.w	r3, r7, #16
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f006 f96f 	bl	8009fa8 <HAL_RCCEx_PeriphCLKConfig>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003cd0:	f7ff ff6a 	bl	8003ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <HAL_ADC_MspInit+0x130>)
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd8:	4a2e      	ldr	r2, [pc, #184]	; (8003d94 <HAL_ADC_MspInit+0x130>)
 8003cda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ce0:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <HAL_ADC_MspInit+0x130>)
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_ADC_MspInit+0x130>)
 8003cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf0:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <HAL_ADC_MspInit+0x130>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_ADC_MspInit+0x130>)
 8003cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003d04:	2307      	movs	r3, #7
 8003d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	481e      	ldr	r0, [pc, #120]	; (8003d98 <HAL_ADC_MspInit+0x134>)
 8003d1e:	f002 fce1 	bl	80066e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d24:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <HAL_ADC_MspInit+0x13c>)
 8003d26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003d28:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d2e:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d34:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d3a:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d52:	2220      	movs	r2, #32
 8003d54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d5c:	480f      	ldr	r0, [pc, #60]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d5e:	f002 fa3d 	bl	80061dc <HAL_DMA_Init>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8003d68:	f7ff ff1e 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d70:	651a      	str	r2, [r3, #80]	; 0x50
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <HAL_ADC_MspInit+0x138>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	2012      	movs	r0, #18
 8003d7e:	f002 f9f6 	bl	800616e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003d82:	2012      	movs	r0, #18
 8003d84:	f002 fa0f 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d88:	bf00      	nop
 8003d8a:	37b0      	adds	r7, #176	; 0xb0
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	50040000 	.word	0x50040000
 8003d94:	40021000 	.word	0x40021000
 8003d98:	48000800 	.word	0x48000800
 8003d9c:	20000690 	.word	0x20000690
 8003da0:	40020008 	.word	0x40020008

08003da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b0ac      	sub	sp, #176	; 0xb0
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dbc:	f107 0310 	add.w	r3, r7, #16
 8003dc0:	228c      	movs	r2, #140	; 0x8c
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f008 fb6b 	bl	800c4a0 <memset>
  if(hi2c->Instance==I2C1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a52      	ldr	r2, [pc, #328]	; (8003f18 <HAL_I2C_MspInit+0x174>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	f040 809d 	bne.w	8003f10 <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4618      	mov	r0, r3
 8003de4:	f006 f8e0 	bl	8009fa8 <HAL_RCCEx_PeriphCLKConfig>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003dee:	f7ff fedb 	bl	8003ba8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df2:	4b4a      	ldr	r3, [pc, #296]	; (8003f1c <HAL_I2C_MspInit+0x178>)
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	4a49      	ldr	r2, [pc, #292]	; (8003f1c <HAL_I2C_MspInit+0x178>)
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_I2C_MspInit+0x178>)
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e0a:	23c0      	movs	r3, #192	; 0xc0
 8003e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e10:	2312      	movs	r3, #18
 8003e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e22:	2304      	movs	r3, #4
 8003e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	483c      	ldr	r0, [pc, #240]	; (8003f20 <HAL_I2C_MspInit+0x17c>)
 8003e30:	f002 fc58 	bl	80066e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e34:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <HAL_I2C_MspInit+0x178>)
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	4a38      	ldr	r2, [pc, #224]	; (8003f1c <HAL_I2C_MspInit+0x178>)
 8003e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e40:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_I2C_MspInit+0x178>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e4e:	4a36      	ldr	r2, [pc, #216]	; (8003f28 <HAL_I2C_MspInit+0x184>)
 8003e50:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8003e52:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e54:	2203      	movs	r2, #3
 8003e56:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e58:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e64:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e6a:	4b2e      	ldr	r3, [pc, #184]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e70:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003e82:	4828      	ldr	r0, [pc, #160]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e84:	f002 f9aa 	bl	80061dc <HAL_DMA_Init>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8003e8e:	f7ff fe8b 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a23      	ldr	r2, [pc, #140]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_I2C_MspInit+0x180>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8003e9e:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <HAL_I2C_MspInit+0x18c>)
 8003ea2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003eac:	2210      	movs	r2, #16
 8003eae:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003ec8:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003ed4:	4815      	ldr	r0, [pc, #84]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003ed6:	f002 f981 	bl	80061dc <HAL_DMA_Init>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 8003ee0:	f7ff fe62 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_I2C_MspInit+0x188>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	201f      	movs	r0, #31
 8003ef6:	f002 f93a 	bl	800616e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003efa:	201f      	movs	r0, #31
 8003efc:	f002 f953 	bl	80061a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2100      	movs	r1, #0
 8003f04:	2020      	movs	r0, #32
 8003f06:	f002 f932 	bl	800616e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003f0a:	2020      	movs	r0, #32
 8003f0c:	f002 f94b 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f10:	bf00      	nop
 8003f12:	37b0      	adds	r7, #176	; 0xb0
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40005400 	.word	0x40005400
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	48000400 	.word	0x48000400
 8003f24:	2000072c 	.word	0x2000072c
 8003f28:	40020080 	.word	0x40020080
 8003f2c:	20000774 	.word	0x20000774
 8003f30:	4002006c 	.word	0x4002006c

08003f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_TIM_Base_MspInit+0x44>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d113      	bne.n	8003f6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_TIM_Base_MspInit+0x48>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <HAL_TIM_Base_MspInit+0x48>)
 8003f4c:	f043 0310 	orr.w	r3, r3, #16
 8003f50:	6593      	str	r3, [r2, #88]	; 0x58
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_TIM_Base_MspInit+0x48>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2100      	movs	r1, #0
 8003f62:	2036      	movs	r0, #54	; 0x36
 8003f64:	f002 f903 	bl	800616e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f68:	2036      	movs	r0, #54	; 0x36
 8003f6a:	f002 f91c 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40001000 	.word	0x40001000
 8003f7c:	40021000 	.word	0x40021000

08003f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0b0      	sub	sp, #192	; 0xc0
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f98:	f107 0320 	add.w	r3, r7, #32
 8003f9c:	228c      	movs	r2, #140	; 0x8c
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f008 fa7d 	bl	800c4a0 <memset>
  if(huart->Instance==UART4)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4d      	ldr	r2, [pc, #308]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	f040 80a3 	bne.w	80040f8 <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fba:	f107 0320 	add.w	r3, r7, #32
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f005 fff2 	bl	8009fa8 <HAL_RCCEx_PeriphCLKConfig>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003fca:	f7ff fded 	bl	8003ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003fce:	4b45      	ldr	r3, [pc, #276]	; (80040e4 <HAL_UART_MspInit+0x164>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	4a44      	ldr	r2, [pc, #272]	; (80040e4 <HAL_UART_MspInit+0x164>)
 8003fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fda:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <HAL_UART_MspInit+0x164>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe2:	61fb      	str	r3, [r7, #28]
 8003fe4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe6:	4b3f      	ldr	r3, [pc, #252]	; (80040e4 <HAL_UART_MspInit+0x164>)
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	4a3e      	ldr	r2, [pc, #248]	; (80040e4 <HAL_UART_MspInit+0x164>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ff2:	4b3c      	ldr	r3, [pc, #240]	; (80040e4 <HAL_UART_MspInit+0x164>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ffe:	2303      	movs	r3, #3
 8004000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004016:	2308      	movs	r3, #8
 8004018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004020:	4619      	mov	r1, r3
 8004022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004026:	f002 fb5d 	bl	80066e4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <HAL_UART_MspInit+0x168>)
 800402c:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <HAL_UART_MspInit+0x16c>)
 800402e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004032:	2202      	movs	r2, #2
 8004034:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004038:	2200      	movs	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800403c:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <HAL_UART_MspInit+0x168>)
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004042:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004044:	2280      	movs	r2, #128	; 0x80
 8004046:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <HAL_UART_MspInit+0x168>)
 800404a:	2200      	movs	r2, #0
 800404c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800404e:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004054:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004056:	2200      	movs	r2, #0
 8004058:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800405a:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <HAL_UART_MspInit+0x168>)
 800405c:	2200      	movs	r2, #0
 800405e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004060:	4821      	ldr	r0, [pc, #132]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004062:	f002 f8bb 	bl	80061dc <HAL_DMA_Init>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800406c:	f7ff fd9c 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004074:	675a      	str	r2, [r3, #116]	; 0x74
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 800407c:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <HAL_UART_MspInit+0x170>)
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_UART_MspInit+0x174>)
 8004080:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8004082:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_UART_MspInit+0x170>)
 8004084:	2202      	movs	r2, #2
 8004086:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_UART_MspInit+0x170>)
 800408a:	2210      	movs	r2, #16
 800408c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800408e:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_UART_MspInit+0x170>)
 8004090:	2200      	movs	r2, #0
 8004092:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004094:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <HAL_UART_MspInit+0x170>)
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <HAL_UART_MspInit+0x170>)
 800409c:	2200      	movs	r2, #0
 800409e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_UART_MspInit+0x170>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <HAL_UART_MspInit+0x170>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_UART_MspInit+0x170>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80040b2:	480f      	ldr	r0, [pc, #60]	; (80040f0 <HAL_UART_MspInit+0x170>)
 80040b4:	f002 f892 	bl	80061dc <HAL_DMA_Init>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80040be:	f7ff fd73 	bl	8003ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <HAL_UART_MspInit+0x170>)
 80040c6:	671a      	str	r2, [r3, #112]	; 0x70
 80040c8:	4a09      	ldr	r2, [pc, #36]	; (80040f0 <HAL_UART_MspInit+0x170>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2100      	movs	r1, #0
 80040d2:	2034      	movs	r0, #52	; 0x34
 80040d4:	f002 f84b 	bl	800616e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80040d8:	2034      	movs	r0, #52	; 0x34
 80040da:	f002 f864 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80040de:	e0c9      	b.n	8004274 <HAL_UART_MspInit+0x2f4>
 80040e0:	40004c00 	.word	0x40004c00
 80040e4:	40021000 	.word	0x40021000
 80040e8:	200008cc 	.word	0x200008cc
 80040ec:	40020458 	.word	0x40020458
 80040f0:	20000914 	.word	0x20000914
 80040f4:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a5f      	ldr	r2, [pc, #380]	; (800427c <HAL_UART_MspInit+0x2fc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	f040 80b8 	bne.w	8004274 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004104:	2310      	movs	r3, #16
 8004106:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8004108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800410c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800410e:	f107 0320 	add.w	r3, r7, #32
 8004112:	4618      	mov	r0, r3
 8004114:	f005 ff48 	bl	8009fa8 <HAL_RCCEx_PeriphCLKConfig>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 800411e:	f7ff fd43 	bl	8003ba8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004122:	4b57      	ldr	r3, [pc, #348]	; (8004280 <HAL_UART_MspInit+0x300>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	4a56      	ldr	r2, [pc, #344]	; (8004280 <HAL_UART_MspInit+0x300>)
 8004128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <HAL_UART_MspInit+0x300>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800413a:	4b51      	ldr	r3, [pc, #324]	; (8004280 <HAL_UART_MspInit+0x300>)
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	4a50      	ldr	r2, [pc, #320]	; (8004280 <HAL_UART_MspInit+0x300>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004146:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <HAL_UART_MspInit+0x300>)
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004152:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <HAL_UART_MspInit+0x300>)
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	4a4a      	ldr	r2, [pc, #296]	; (8004280 <HAL_UART_MspInit+0x300>)
 8004158:	f043 0308 	orr.w	r3, r3, #8
 800415c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800415e:	4b48      	ldr	r3, [pc, #288]	; (8004280 <HAL_UART_MspInit+0x300>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800416a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004172:	2302      	movs	r3, #2
 8004174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800417e:	2303      	movs	r3, #3
 8004180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004184:	2308      	movs	r3, #8
 8004186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800418a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800418e:	4619      	mov	r1, r3
 8004190:	483c      	ldr	r0, [pc, #240]	; (8004284 <HAL_UART_MspInit+0x304>)
 8004192:	f002 faa7 	bl	80066e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004196:	2304      	movs	r3, #4
 8004198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419c:	2302      	movs	r3, #2
 800419e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a8:	2303      	movs	r3, #3
 80041aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80041ae:	2308      	movs	r3, #8
 80041b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80041b8:	4619      	mov	r1, r3
 80041ba:	4833      	ldr	r0, [pc, #204]	; (8004288 <HAL_UART_MspInit+0x308>)
 80041bc:	f002 fa92 	bl	80066e4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041c2:	4a33      	ldr	r2, [pc, #204]	; (8004290 <HAL_UART_MspInit+0x310>)
 80041c4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 80041c6:	4b31      	ldr	r3, [pc, #196]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041c8:	2202      	movs	r2, #2
 80041ca:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041cc:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041d8:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041e4:	4b29      	ldr	r3, [pc, #164]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041f0:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80041f6:	4825      	ldr	r0, [pc, #148]	; (800428c <HAL_UART_MspInit+0x30c>)
 80041f8:	f001 fff0 	bl	80061dc <HAL_DMA_Init>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_UART_MspInit+0x286>
      Error_Handler();
 8004202:	f7ff fcd1 	bl	8003ba8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_UART_MspInit+0x30c>)
 800420a:	675a      	str	r2, [r3, #116]	; 0x74
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_UART_MspInit+0x30c>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_UART_MspInit+0x314>)
 8004214:	4a20      	ldr	r2, [pc, #128]	; (8004298 <HAL_UART_MspInit+0x318>)
 8004216:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <HAL_UART_MspInit+0x314>)
 800421a:	2202      	movs	r2, #2
 800421c:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <HAL_UART_MspInit+0x314>)
 8004220:	2210      	movs	r2, #16
 8004222:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <HAL_UART_MspInit+0x314>)
 8004226:	2200      	movs	r2, #0
 8004228:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800422a:	4b1a      	ldr	r3, [pc, #104]	; (8004294 <HAL_UART_MspInit+0x314>)
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_UART_MspInit+0x314>)
 8004232:	2200      	movs	r2, #0
 8004234:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004236:	4b17      	ldr	r3, [pc, #92]	; (8004294 <HAL_UART_MspInit+0x314>)
 8004238:	2200      	movs	r2, #0
 800423a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800423c:	4b15      	ldr	r3, [pc, #84]	; (8004294 <HAL_UART_MspInit+0x314>)
 800423e:	2200      	movs	r2, #0
 8004240:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <HAL_UART_MspInit+0x314>)
 8004244:	2200      	movs	r2, #0
 8004246:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004248:	4812      	ldr	r0, [pc, #72]	; (8004294 <HAL_UART_MspInit+0x314>)
 800424a:	f001 ffc7 	bl	80061dc <HAL_DMA_Init>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8004254:	f7ff fca8 	bl	8003ba8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <HAL_UART_MspInit+0x314>)
 800425c:	671a      	str	r2, [r3, #112]	; 0x70
 800425e:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <HAL_UART_MspInit+0x314>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004264:	2200      	movs	r2, #0
 8004266:	2100      	movs	r1, #0
 8004268:	2035      	movs	r0, #53	; 0x35
 800426a:	f001 ff80 	bl	800616e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800426e:	2035      	movs	r0, #53	; 0x35
 8004270:	f001 ff99 	bl	80061a6 <HAL_NVIC_EnableIRQ>
}
 8004274:	bf00      	nop
 8004276:	37c0      	adds	r7, #192	; 0xc0
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40005000 	.word	0x40005000
 8004280:	40021000 	.word	0x40021000
 8004284:	48000800 	.word	0x48000800
 8004288:	48000c00 	.word	0x48000c00
 800428c:	2000095c 	.word	0x2000095c
 8004290:	4002041c 	.word	0x4002041c
 8004294:	200009a4 	.word	0x200009a4
 8004298:	40020408 	.word	0x40020408

0800429c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <NMI_Handler+0x4>

080042a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042a6:	e7fe      	b.n	80042a6 <HardFault_Handler+0x4>

080042a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042ac:	e7fe      	b.n	80042ac <MemManage_Handler+0x4>

080042ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042b2:	e7fe      	b.n	80042b2 <BusFault_Handler+0x4>

080042b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042b8:	e7fe      	b.n	80042b8 <UsageFault_Handler+0x4>

080042ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042e8:	f000 f982 	bl	80045f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042f4:	4802      	ldr	r0, [pc, #8]	; (8004300 <DMA1_Channel1_IRQHandler+0x10>)
 80042f6:	f002 f908 	bl	800650a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000690 	.word	0x20000690

08004304 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <DMA1_Channel6_IRQHandler+0x10>)
 800430a:	f002 f8fe 	bl	800650a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000774 	.word	0x20000774

08004318 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800431c:	4802      	ldr	r0, [pc, #8]	; (8004328 <DMA1_Channel7_IRQHandler+0x10>)
 800431e:	f002 f8f4 	bl	800650a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	2000072c 	.word	0x2000072c

0800432c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <ADC1_2_IRQHandler+0x10>)
 8004332:	f000 fddb 	bl	8004eec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000628 	.word	0x20000628

08004340 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004344:	4802      	ldr	r0, [pc, #8]	; (8004350 <I2C1_EV_IRQHandler+0x10>)
 8004346:	f003 f85d 	bl	8007404 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200006d8 	.word	0x200006d8

08004354 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <I2C1_ER_IRQHandler+0x10>)
 800435a:	f003 f86d 	bl	8007438 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200006d8 	.word	0x200006d8

08004368 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <UART4_IRQHandler+0x10>)
 800436e:	f006 feb1 	bl	800b0d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	200007bc 	.word	0x200007bc

0800437c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004380:	4802      	ldr	r0, [pc, #8]	; (800438c <UART5_IRQHandler+0x10>)
 8004382:	f006 fea7 	bl	800b0d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000844 	.word	0x20000844

08004390 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <TIM6_DAC_IRQHandler+0x10>)
 8004396:	f006 fb99 	bl	800aacc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200009ec 	.word	0x200009ec

080043a4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80043a8:	4802      	ldr	r0, [pc, #8]	; (80043b4 <DMA2_Channel1_IRQHandler+0x10>)
 80043aa:	f002 f8ae 	bl	800650a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	200009a4 	.word	0x200009a4

080043b8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80043bc:	4802      	ldr	r0, [pc, #8]	; (80043c8 <DMA2_Channel2_IRQHandler+0x10>)
 80043be:	f002 f8a4 	bl	800650a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2000095c 	.word	0x2000095c

080043cc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80043d0:	4802      	ldr	r0, [pc, #8]	; (80043dc <DMA2_Channel3_IRQHandler+0x10>)
 80043d2:	f002 f89a 	bl	800650a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000914 	.word	0x20000914

080043e0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <DMA2_Channel5_IRQHandler+0x10>)
 80043e6:	f002 f890 	bl	800650a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200008cc 	.word	0x200008cc

080043f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <SystemInit+0x20>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	4a05      	ldr	r2, [pc, #20]	; (8004414 <SystemInit+0x20>)
 8004400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <_Z41__static_initialization_and_destruction_0ii>:
		break;

	default:
		break;
	}
}
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d11f      	bne.n	8004468 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800442e:	4293      	cmp	r3, r2
 8004430:	d11a      	bne.n	8004468 <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t limitGpsTcp = 43200000/superloop;// Tiempo que esta apagado GPS
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800443a:	fb93 f3f2 	sdiv	r3, r3, r2
 800443e:	461a      	mov	r2, r3
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004442:	601a      	str	r2, [r3, #0]
uint32_t limitTcpData	= 120000/superloop;	// Limite para fijar datos
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800444c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004450:	461a      	mov	r2, r3
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004454:	601a      	str	r2, [r3, #0]
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800445e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004462:	461a      	mov	r2, r3
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004466:	601a      	str	r2, [r3, #0]
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	2000035b 	.word	0x2000035b
 8004478:	02932e00 	.word	0x02932e00
 800447c:	20001134 	.word	0x20001134
 8004480:	0001d4c0 	.word	0x0001d4c0
 8004484:	20001138 	.word	0x20001138
 8004488:	01499700 	.word	0x01499700
 800448c:	2000113c 	.word	0x2000113c

08004490 <_GLOBAL__sub_I_stateGpsTcp>:
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
 8004494:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004498:	2001      	movs	r0, #1
 800449a:	f7ff ffbd 	bl	8004418 <_Z41__static_initialization_and_destruction_0ii>
 800449e:	bd80      	pop	{r7, pc}

080044a0 <_Z41__static_initialization_and_destruction_0ii>:
	default:
		stateTpcLoraOut	= 0;
		break;
	}

}
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d10e      	bne.n	80044ce <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d109      	bne.n	80044ce <_Z41__static_initialization_and_destruction_0ii+0x2e>
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80044cc:	801a      	strh	r2, [r3, #0]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000035b 	.word	0x2000035b
 80044e0:	20001140 	.word	0x20001140

080044e4 <_GLOBAL__sub_I_loraTxCommand0>:
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044ec:	2001      	movs	r0, #1
 80044ee:	f7ff ffd7 	bl	80044a0 <_Z41__static_initialization_and_destruction_0ii>
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80044f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800452c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044f8:	f7ff ff7c 	bl	80043f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044fc:	480c      	ldr	r0, [pc, #48]	; (8004530 <LoopForever+0x6>)
  ldr r1, =_edata
 80044fe:	490d      	ldr	r1, [pc, #52]	; (8004534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004500:	4a0d      	ldr	r2, [pc, #52]	; (8004538 <LoopForever+0xe>)
  movs r3, #0
 8004502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004504:	e002      	b.n	800450c <LoopCopyDataInit>

08004506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800450a:	3304      	adds	r3, #4

0800450c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800450c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800450e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004510:	d3f9      	bcc.n	8004506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004514:	4c0a      	ldr	r4, [pc, #40]	; (8004540 <LoopForever+0x16>)
  movs r3, #0
 8004516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004518:	e001      	b.n	800451e <LoopFillZerobss>

0800451a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800451a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800451c:	3204      	adds	r2, #4

0800451e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800451e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004520:	d3fb      	bcc.n	800451a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004522:	f007 ffc5 	bl	800c4b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004526:	f7fe fee1 	bl	80032ec <main>

0800452a <LoopForever>:

LoopForever:
    b LoopForever
 800452a:	e7fe      	b.n	800452a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800452c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004534:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8004538:	0800c5ac 	.word	0x0800c5ac
  ldr r2, =_sbss
 800453c:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8004540:	20001148 	.word	0x20001148

08004544 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004544:	e7fe      	b.n	8004544 <ADC3_IRQHandler>

08004546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004550:	2003      	movs	r0, #3
 8004552:	f001 fe01 	bl	8006158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004556:	200f      	movs	r0, #15
 8004558:	f000 f80e 	bl	8004578 <HAL_InitTick>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	71fb      	strb	r3, [r7, #7]
 8004566:	e001      	b.n	800456c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004568:	f7ff fb58 	bl	8003c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800456c:	79fb      	ldrb	r3, [r7, #7]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004584:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <HAL_InitTick+0x6c>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800458c:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <HAL_InitTick+0x70>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <HAL_InitTick+0x6c>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	4619      	mov	r1, r3
 8004596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800459a:	fbb3 f3f1 	udiv	r3, r3, r1
 800459e:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 fe0d 	bl	80061c2 <HAL_SYSTICK_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b0f      	cmp	r3, #15
 80045b2:	d809      	bhi.n	80045c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045b4:	2200      	movs	r2, #0
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	f001 fdd7 	bl	800616e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <HAL_InitTick+0x74>)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e007      	b.n	80045d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	e004      	b.n	80045d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
 80045d2:	e001      	b.n	80045d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000364 	.word	0x20000364
 80045e8:	2000035c 	.word	0x2000035c
 80045ec:	20000360 	.word	0x20000360

080045f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_IncTick+0x20>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_IncTick+0x24>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4413      	add	r3, r2
 8004600:	4a04      	ldr	r2, [pc, #16]	; (8004614 <HAL_IncTick+0x24>)
 8004602:	6013      	str	r3, [r2, #0]
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000364 	.word	0x20000364
 8004614:	20001144 	.word	0x20001144

08004618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return uwTick;
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <HAL_GetTick+0x14>)
 800461e:	681b      	ldr	r3, [r3, #0]
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20001144 	.word	0x20001144

08004630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004638:	f7ff ffee 	bl	8004618 <HAL_GetTick>
 800463c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d005      	beq.n	8004656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <HAL_Delay+0x44>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004656:	bf00      	nop
 8004658:	f7ff ffde 	bl	8004618 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	429a      	cmp	r2, r3
 8004666:	d8f7      	bhi.n	8004658 <HAL_Delay+0x28>
  {
  }
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000364 	.word	0x20000364

08004678 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_SuspendTick+0x1c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a04      	ldr	r2, [pc, #16]	; (8004694 <HAL_SuspendTick+0x1c>)
 8004682:	f023 0302 	bic.w	r3, r3, #2
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000e010 	.word	0xe000e010

08004698 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_ResumeTick+0x1c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <HAL_ResumeTick+0x1c>)
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	e000e010 	.word	0xe000e010

080046b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	609a      	str	r2, [r3, #8]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3360      	adds	r3, #96	; 0x60
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <LL_ADC_SetOffset+0x44>)
 8004742:	4013      	ands	r3, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	03fff000 	.word	0x03fff000

08004768 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3360      	adds	r3, #96	; 0x60
 8004776:	461a      	mov	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3360      	adds	r3, #96	; 0x60
 80047a4:	461a      	mov	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	615a      	str	r2, [r3, #20]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004816:	b480      	push	{r7}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3330      	adds	r3, #48	; 0x30
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	4413      	add	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	211f      	movs	r1, #31
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	401a      	ands	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	0e9b      	lsrs	r3, r3, #26
 800484e:	f003 011f 	and.w	r1, r3, #31
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	431a      	orrs	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3314      	adds	r3, #20
 80048a4:	461a      	mov	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0e5b      	lsrs	r3, r3, #25
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	4413      	add	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	0d1b      	lsrs	r3, r3, #20
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2107      	movs	r1, #7
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	401a      	ands	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	0d1b      	lsrs	r3, r3, #20
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	431a      	orrs	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004904:	43db      	mvns	r3, r3
 8004906:	401a      	ands	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f003 0318 	and.w	r3, r3, #24
 800490e:	4908      	ldr	r1, [pc, #32]	; (8004930 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004910:	40d9      	lsrs	r1, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	400b      	ands	r3, r1
 8004916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800491a:	431a      	orrs	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	0007ffff 	.word	0x0007ffff

08004934 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 031f 	and.w	r3, r3, #31
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800497c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6093      	str	r3, [r2, #8]
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a4:	d101      	bne.n	80049aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80049c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f4:	d101      	bne.n	80049fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a1c:	f043 0201 	orr.w	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <LL_ADC_IsEnabled+0x18>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <LL_ADC_IsEnabled+0x1a>
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a6a:	f043 0204 	orr.w	r2, r3, #4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d101      	bne.n	8004a96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d101      	bne.n	8004abc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b089      	sub	sp, #36	; 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e133      	b.n	8004d4e <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff f8b5 	bl	8003c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff3f 	bl	8004990 <LL_ADC_IsDeepPowerDownEnabled>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff ff25 	bl	800496c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ff5a 	bl	80049e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d115      	bne.n	8004b5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ff3e 	bl	80049b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b3c:	4b86      	ldr	r3, [pc, #536]	; (8004d58 <HAL_ADC_Init+0x28c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	4a86      	ldr	r2, [pc, #536]	; (8004d5c <HAL_ADC_Init+0x290>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b50:	e002      	b.n	8004b58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f9      	bne.n	8004b52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ff3c 	bl	80049e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10d      	bne.n	8004b8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	f043 0210 	orr.w	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff75 	bl	8004a7e <LL_ADC_REG_IsConversionOngoing>
 8004b94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f040 80cc 	bne.w	8004d3c <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 80c8 	bne.w	8004d3c <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004bb4:	f043 0202 	orr.w	r2, r3, #2
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff ff35 	bl	8004a30 <LL_ADC_IsEnabled>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d115      	bne.n	8004bf8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bcc:	4864      	ldr	r0, [pc, #400]	; (8004d60 <HAL_ADC_Init+0x294>)
 8004bce:	f7ff ff2f 	bl	8004a30 <LL_ADC_IsEnabled>
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	4863      	ldr	r0, [pc, #396]	; (8004d64 <HAL_ADC_Init+0x298>)
 8004bd6:	f7ff ff2b 	bl	8004a30 <LL_ADC_IsEnabled>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	431c      	orrs	r4, r3
 8004bde:	4862      	ldr	r0, [pc, #392]	; (8004d68 <HAL_ADC_Init+0x29c>)
 8004be0:	f7ff ff26 	bl	8004a30 <LL_ADC_IsEnabled>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4323      	orrs	r3, r4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	485e      	ldr	r0, [pc, #376]	; (8004d6c <HAL_ADC_Init+0x2a0>)
 8004bf4:	f7ff fd60 	bl	80046b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	7e5b      	ldrb	r3, [r3, #25]
 8004bfc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c02:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004c08:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004c0e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c16:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d106      	bne.n	8004c34 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	045b      	lsls	r3, r3, #17
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <HAL_ADC_Init+0x2a4>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	69b9      	ldr	r1, [r7, #24]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff1b 	bl	8004aa4 <LL_ADC_INJ_IsConversionOngoing>
 8004c6e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d140      	bne.n	8004cf8 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d13d      	bne.n	8004cf8 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7e1b      	ldrb	r3, [r3, #24]
 8004c84:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c86:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c8e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9e:	f023 0306 	bic.w	r3, r3, #6
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	69b9      	ldr	r1, [r7, #24]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d118      	bne.n	8004ce8 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cc0:	f023 0304 	bic.w	r3, r3, #4
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cd2:	4311      	orrs	r1, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	611a      	str	r2, [r3, #16]
 8004ce6:	e007      	b.n	8004cf8 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d10c      	bne.n	8004d1a <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	f023 010f 	bic.w	r1, r3, #15
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	1e5a      	subs	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
 8004d18:	e007      	b.n	8004d2a <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 020f 	bic.w	r2, r2, #15
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	659a      	str	r2, [r3, #88]	; 0x58
 8004d3a:	e007      	b.n	8004d4c <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	f043 0210 	orr.w	r2, r3, #16
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3724      	adds	r7, #36	; 0x24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd90      	pop	{r4, r7, pc}
 8004d56:	bf00      	nop
 8004d58:	2000035c 	.word	0x2000035c
 8004d5c:	053e2d63 	.word	0x053e2d63
 8004d60:	50040000 	.word	0x50040000
 8004d64:	50040100 	.word	0x50040100
 8004d68:	50040200 	.word	0x50040200
 8004d6c:	50040300 	.word	0x50040300
 8004d70:	fff0c007 	.word	0xfff0c007

08004d74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d80:	4853      	ldr	r0, [pc, #332]	; (8004ed0 <HAL_ADC_Start_DMA+0x15c>)
 8004d82:	f7ff fdd7 	bl	8004934 <LL_ADC_GetMultimode>
 8004d86:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fe76 	bl	8004a7e <LL_ADC_REG_IsConversionOngoing>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 8093 	bne.w	8004ec0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_ADC_Start_DMA+0x34>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e08e      	b.n	8004ec6 <HAL_ADC_Start_DMA+0x152>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a47      	ldr	r2, [pc, #284]	; (8004ed4 <HAL_ADC_Start_DMA+0x160>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d008      	beq.n	8004dcc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d002      	beq.n	8004dcc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	d172      	bne.n	8004eb2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fed1 	bl	8005b74 <ADC_Enable>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d165      	bne.n	8004ea8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a38      	ldr	r2, [pc, #224]	; (8004ed8 <HAL_ADC_Start_DMA+0x164>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d002      	beq.n	8004e00 <HAL_ADC_Start_DMA+0x8c>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	e000      	b.n	8004e02 <HAL_ADC_Start_DMA+0x8e>
 8004e00:	4b36      	ldr	r3, [pc, #216]	; (8004edc <HAL_ADC_Start_DMA+0x168>)
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d002      	beq.n	8004e10 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d006      	beq.n	8004e36 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	f023 0206 	bic.w	r2, r3, #6
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e34:	e002      	b.n	8004e3c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <HAL_ADC_Start_DMA+0x16c>)
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	4a26      	ldr	r2, [pc, #152]	; (8004ee4 <HAL_ADC_Start_DMA+0x170>)
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e50:	4a25      	ldr	r2, [pc, #148]	; (8004ee8 <HAL_ADC_Start_DMA+0x174>)
 8004e52:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	221c      	movs	r2, #28
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0210 	orr.w	r2, r2, #16
 8004e72:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3340      	adds	r3, #64	; 0x40
 8004e8e:	4619      	mov	r1, r3
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f001 fa5a 	bl	800634c <HAL_DMA_Start_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fdd8 	bl	8004a56 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004ea6:	e00d      	b.n	8004ec4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8004eb0:	e008      	b.n	8004ec4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004ebe:	e001      	b.n	8004ec4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	50040300 	.word	0x50040300
 8004ed4:	50040200 	.word	0x50040200
 8004ed8:	50040100 	.word	0x50040100
 8004edc:	50040000 	.word	0x50040000
 8004ee0:	08005c81 	.word	0x08005c81
 8004ee4:	08005d59 	.word	0x08005d59
 8004ee8:	08005d75 	.word	0x08005d75

08004eec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f08:	4882      	ldr	r0, [pc, #520]	; (8005114 <HAL_ADC_IRQHandler+0x228>)
 8004f0a:	f7ff fd13 	bl	8004934 <LL_ADC_GetMultimode>
 8004f0e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d017      	beq.n	8004f4a <HAL_ADC_IRQHandler+0x5e>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 ff81 	bl	8005e44 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2202      	movs	r2, #2
 8004f48:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <HAL_ADC_IRQHandler+0x72>
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8083 	beq.w	8005070 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d07d      	beq.n	8005070 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fc2d 	bl	80047f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d062      	beq.n	8005062 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a5d      	ldr	r2, [pc, #372]	; (8005118 <HAL_ADC_IRQHandler+0x22c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d002      	beq.n	8004fac <HAL_ADC_IRQHandler+0xc0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	e000      	b.n	8004fae <HAL_ADC_IRQHandler+0xc2>
 8004fac:	4b5b      	ldr	r3, [pc, #364]	; (800511c <HAL_ADC_IRQHandler+0x230>)
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d008      	beq.n	8004fc8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d002      	beq.n	8004fc8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d104      	bne.n	8004fd2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	e00c      	b.n	8004fec <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a50      	ldr	r2, [pc, #320]	; (8005118 <HAL_ADC_IRQHandler+0x22c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d002      	beq.n	8004fe2 <HAL_ADC_IRQHandler+0xf6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	e000      	b.n	8004fe4 <HAL_ADC_IRQHandler+0xf8>
 8004fe2:	4b4e      	ldr	r3, [pc, #312]	; (800511c <HAL_ADC_IRQHandler+0x230>)
 8004fe4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d135      	bne.n	8005062 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b08      	cmp	r3, #8
 8005002:	d12e      	bne.n	8005062 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fd38 	bl	8004a7e <LL_ADC_REG_IsConversionOngoing>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11a      	bne.n	800504a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 020c 	bic.w	r2, r2, #12
 8005022:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d112      	bne.n	8005062 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	f043 0201 	orr.w	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	659a      	str	r2, [r3, #88]	; 0x58
 8005048:	e00b      	b.n	8005062 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f043 0210 	orr.w	r2, r3, #16
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505a:	f043 0201 	orr.w	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fe fd18 	bl	8003a98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	220c      	movs	r2, #12
 800506e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <HAL_ADC_IRQHandler+0x198>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 809f 	beq.w	80051ce <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8099 	beq.w	80051ce <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fbd8 	bl	800486e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80050be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fb93 	bl	80047f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80050ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a11      	ldr	r2, [pc, #68]	; (8005118 <HAL_ADC_IRQHandler+0x22c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d002      	beq.n	80050dc <HAL_ADC_IRQHandler+0x1f0>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	e000      	b.n	80050de <HAL_ADC_IRQHandler+0x1f2>
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <HAL_ADC_IRQHandler+0x230>)
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d008      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d002      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b07      	cmp	r3, #7
 80050f6:	d104      	bne.n	8005102 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	623b      	str	r3, [r7, #32]
 8005100:	e013      	b.n	800512a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a04      	ldr	r2, [pc, #16]	; (8005118 <HAL_ADC_IRQHandler+0x22c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d009      	beq.n	8005120 <HAL_ADC_IRQHandler+0x234>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	e007      	b.n	8005122 <HAL_ADC_IRQHandler+0x236>
 8005112:	bf00      	nop
 8005114:	50040300 	.word	0x50040300
 8005118:	50040100 	.word	0x50040100
 800511c:	50040000 	.word	0x50040000
 8005120:	4b7d      	ldr	r3, [pc, #500]	; (8005318 <HAL_ADC_IRQHandler+0x42c>)
 8005122:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d047      	beq.n	80051c0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <HAL_ADC_IRQHandler+0x25e>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d03f      	beq.n	80051c0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005146:	2b00      	cmp	r3, #0
 8005148:	d13a      	bne.n	80051c0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d133      	bne.n	80051c0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d12e      	bne.n	80051c0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fc9c 	bl	8004aa4 <LL_ADC_INJ_IsConversionOngoing>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11a      	bne.n	80051a8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005180:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d112      	bne.n	80051c0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f043 0201 	orr.w	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	659a      	str	r2, [r3, #88]	; 0x58
 80051a6:	e00b      	b.n	80051c0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ac:	f043 0210 	orr.w	r2, r3, #16
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b8:	f043 0201 	orr.w	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fe17 	bl	8005df4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2260      	movs	r2, #96	; 0x60
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d011      	beq.n	80051fc <HAL_ADC_IRQHandler+0x310>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00c      	beq.n	80051fc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8a0 	bl	8005334 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2280      	movs	r2, #128	; 0x80
 80051fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d012      	beq.n	800522c <HAL_ADC_IRQHandler+0x340>
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fdfd 	bl	8005e1c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005232:	2b00      	cmp	r3, #0
 8005234:	d012      	beq.n	800525c <HAL_ADC_IRQHandler+0x370>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fdef 	bl	8005e30 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b00      	cmp	r3, #0
 8005264:	d036      	beq.n	80052d4 <HAL_ADC_IRQHandler+0x3e8>
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d031      	beq.n	80052d4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005278:	2301      	movs	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
 800527c:	e014      	b.n	80052a8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005284:	4825      	ldr	r0, [pc, #148]	; (800531c <HAL_ADC_IRQHandler+0x430>)
 8005286:	f7ff fb63 	bl	8004950 <LL_ADC_GetMultiDMATransfer>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005290:	2301      	movs	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
 8005294:	e008      	b.n	80052a8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80052a4:	2301      	movs	r3, #1
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10e      	bne.n	80052cc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	f043 0202 	orr.w	r2, r3, #2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f83e 	bl	8005348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2210      	movs	r2, #16
 80052d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d018      	beq.n	8005310 <HAL_ADC_IRQHandler+0x424>
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ec:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f8:	f043 0208 	orr.w	r2, r3, #8
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005308:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd7c 	bl	8005e08 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005310:	bf00      	nop
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	50040000 	.word	0x50040000
 800531c:	50040300 	.word	0x50040300

08005320 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b0b6      	sub	sp, #216	; 0xd8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800536c:	2300      	movs	r3, #0
 800536e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_ADC_ConfigChannel+0x22>
 800537a:	2302      	movs	r3, #2
 800537c:	e3e3      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x7ea>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fb77 	bl	8004a7e <LL_ADC_REG_IsConversionOngoing>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	f040 83c4 	bne.w	8005b20 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	d824      	bhi.n	80053f2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	3b02      	subs	r3, #2
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d81b      	bhi.n	80053ea <HAL_ADC_ConfigChannel+0x8e>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <HAL_ADC_ConfigChannel+0x5c>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053d1 	.word	0x080053d1
 80053c0:	080053d9 	.word	0x080053d9
 80053c4:	080053e1 	.word	0x080053e1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80053c8:	230c      	movs	r3, #12
 80053ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053ce:	e010      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80053d0:	2312      	movs	r3, #18
 80053d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053d6:	e00c      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80053d8:	2318      	movs	r3, #24
 80053da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053de:	e008      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80053e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053e8:	e003      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80053ea:	2306      	movs	r3, #6
 80053ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80053f0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005400:	f7ff fa09 	bl	8004816 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fb38 	bl	8004a7e <LL_ADC_REG_IsConversionOngoing>
 800540e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fb44 	bl	8004aa4 <LL_ADC_INJ_IsConversionOngoing>
 800541c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005424:	2b00      	cmp	r3, #0
 8005426:	f040 81bf 	bne.w	80057a8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800542a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 81ba 	bne.w	80057a8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543c:	d10f      	bne.n	800545e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	4619      	mov	r1, r3
 800544a:	f7ff fa23 	bl	8004894 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff f9b7 	bl	80047ca <LL_ADC_SetSamplingTimeCommonConfig>
 800545c:	e00e      	b.n	800547c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	461a      	mov	r2, r3
 800546c:	f7ff fa12 	bl	8004894 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff f9a7 	bl	80047ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	08db      	lsrs	r3, r3, #3
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b04      	cmp	r3, #4
 800549c:	d00a      	beq.n	80054b4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6919      	ldr	r1, [r3, #16]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054ae:	f7ff f937 	bl	8004720 <LL_ADC_SetOffset>
 80054b2:	e179      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2100      	movs	r1, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff f954 	bl	8004768 <LL_ADC_GetOffsetChannel>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x184>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff f949 	bl	8004768 <LL_ADC_GetOffsetChannel>
 80054d6:	4603      	mov	r3, r0
 80054d8:	0e9b      	lsrs	r3, r3, #26
 80054da:	f003 021f 	and.w	r2, r3, #31
 80054de:	e01e      	b.n	800551e <HAL_ADC_ConfigChannel+0x1c2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff f93e 	bl	8004768 <LL_ADC_GetOffsetChannel>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054f6:	fa93 f3a3 	rbit	r3, r3
 80054fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005506:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800550e:	2320      	movs	r3, #32
 8005510:	e004      	b.n	800551c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8005512:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <HAL_ADC_ConfigChannel+0x1da>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	0e9b      	lsrs	r3, r3, #26
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	e018      	b.n	8005568 <HAL_ADC_ConfigChannel+0x20c>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005542:	fa93 f3a3 	rbit	r3, r3
 8005546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800554a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800554e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800555a:	2320      	movs	r3, #32
 800555c:	e004      	b.n	8005568 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800555e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005562:	fab3 f383 	clz	r3, r3
 8005566:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005568:	429a      	cmp	r2, r3
 800556a:	d106      	bne.n	800557a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2200      	movs	r2, #0
 8005572:	2100      	movs	r1, #0
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff f90d 	bl	8004794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2101      	movs	r1, #1
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff f8f1 	bl	8004768 <LL_ADC_GetOffsetChannel>
 8005586:	4603      	mov	r3, r0
 8005588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <HAL_ADC_ConfigChannel+0x24a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2101      	movs	r1, #1
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff f8e6 	bl	8004768 <LL_ADC_GetOffsetChannel>
 800559c:	4603      	mov	r3, r0
 800559e:	0e9b      	lsrs	r3, r3, #26
 80055a0:	f003 021f 	and.w	r2, r3, #31
 80055a4:	e01e      	b.n	80055e4 <HAL_ADC_ConfigChannel+0x288>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff f8db 	bl	8004768 <LL_ADC_GetOffsetChannel>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055bc:	fa93 f3a3 	rbit	r3, r3
 80055c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80055c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80055cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80055d4:	2320      	movs	r3, #32
 80055d6:	e004      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80055d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055dc:	fab3 f383 	clz	r3, r3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x2a0>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	0e9b      	lsrs	r3, r3, #26
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	e018      	b.n	800562e <HAL_ADC_ConfigChannel+0x2d2>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005604:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005608:	fa93 f3a3 	rbit	r3, r3
 800560c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8005620:	2320      	movs	r3, #32
 8005622:	e004      	b.n	800562e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8005624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005628:	fab3 f383 	clz	r3, r3
 800562c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800562e:	429a      	cmp	r2, r3
 8005630:	d106      	bne.n	8005640 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2200      	movs	r2, #0
 8005638:	2101      	movs	r1, #1
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff f8aa 	bl	8004794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2102      	movs	r1, #2
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff f88e 	bl	8004768 <LL_ADC_GetOffsetChannel>
 800564c:	4603      	mov	r3, r0
 800564e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <HAL_ADC_ConfigChannel+0x310>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2102      	movs	r1, #2
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff f883 	bl	8004768 <LL_ADC_GetOffsetChannel>
 8005662:	4603      	mov	r3, r0
 8005664:	0e9b      	lsrs	r3, r3, #26
 8005666:	f003 021f 	and.w	r2, r3, #31
 800566a:	e01e      	b.n	80056aa <HAL_ADC_ConfigChannel+0x34e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2102      	movs	r1, #2
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff f878 	bl	8004768 <LL_ADC_GetOffsetChannel>
 8005678:	4603      	mov	r3, r0
 800567a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005682:	fa93 f3a3 	rbit	r3, r3
 8005686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800568a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800568e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800569a:	2320      	movs	r3, #32
 800569c:	e004      	b.n	80056a8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800569e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056a2:	fab3 f383 	clz	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d105      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x366>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	0e9b      	lsrs	r3, r3, #26
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	e014      	b.n	80056ec <HAL_ADC_ConfigChannel+0x390>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80056d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80056d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80056de:	2320      	movs	r3, #32
 80056e0:	e004      	b.n	80056ec <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80056e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056e6:	fab3 f383 	clz	r3, r3
 80056ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d106      	bne.n	80056fe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2102      	movs	r1, #2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff f84b 	bl	8004794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2103      	movs	r1, #3
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff f82f 	bl	8004768 <LL_ADC_GetOffsetChannel>
 800570a:	4603      	mov	r3, r0
 800570c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <HAL_ADC_ConfigChannel+0x3ce>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2103      	movs	r1, #3
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff f824 	bl	8004768 <LL_ADC_GetOffsetChannel>
 8005720:	4603      	mov	r3, r0
 8005722:	0e9b      	lsrs	r3, r3, #26
 8005724:	f003 021f 	and.w	r2, r3, #31
 8005728:	e017      	b.n	800575a <HAL_ADC_ConfigChannel+0x3fe>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2103      	movs	r1, #3
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff f819 	bl	8004768 <LL_ADC_GetOffsetChannel>
 8005736:	4603      	mov	r3, r0
 8005738:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800574c:	2320      	movs	r3, #32
 800574e:	e003      	b.n	8005758 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8005750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005752:	fab3 f383 	clz	r3, r3
 8005756:	b2db      	uxtb	r3, r3
 8005758:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005762:	2b00      	cmp	r3, #0
 8005764:	d105      	bne.n	8005772 <HAL_ADC_ConfigChannel+0x416>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	0e9b      	lsrs	r3, r3, #26
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	e011      	b.n	8005796 <HAL_ADC_ConfigChannel+0x43a>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005782:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800578a:	2320      	movs	r3, #32
 800578c:	e003      	b.n	8005796 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800578e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005796:	429a      	cmp	r2, r3
 8005798:	d106      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	2103      	movs	r1, #3
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fff6 	bl	8004794 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff f93f 	bl	8004a30 <LL_ADC_IsEnabled>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 813f 	bne.w	8005a38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7ff f890 	bl	80048ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4a8e      	ldr	r2, [pc, #568]	; (8005a0c <HAL_ADC_ConfigChannel+0x6b0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f040 8130 	bne.w	8005a38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10b      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x4a4>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	0e9b      	lsrs	r3, r3, #26
 80057ee:	3301      	adds	r3, #1
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	2b09      	cmp	r3, #9
 80057f6:	bf94      	ite	ls
 80057f8:	2301      	movls	r3, #1
 80057fa:	2300      	movhi	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	e019      	b.n	8005834 <HAL_ADC_ConfigChannel+0x4d8>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005808:	fa93 f3a3 	rbit	r3, r3
 800580c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800580e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005810:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8005818:	2320      	movs	r3, #32
 800581a:	e003      	b.n	8005824 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800581c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581e:	fab3 f383 	clz	r3, r3
 8005822:	b2db      	uxtb	r3, r3
 8005824:	3301      	adds	r3, #1
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	2b09      	cmp	r3, #9
 800582c:	bf94      	ite	ls
 800582e:	2301      	movls	r3, #1
 8005830:	2300      	movhi	r3, #0
 8005832:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005834:	2b00      	cmp	r3, #0
 8005836:	d079      	beq.n	800592c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <HAL_ADC_ConfigChannel+0x4f8>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	0e9b      	lsrs	r3, r3, #26
 800584a:	3301      	adds	r3, #1
 800584c:	069b      	lsls	r3, r3, #26
 800584e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005852:	e015      	b.n	8005880 <HAL_ADC_ConfigChannel+0x524>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585c:	fa93 f3a3 	rbit	r3, r3
 8005860:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005864:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800586c:	2320      	movs	r3, #32
 800586e:	e003      	b.n	8005878 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8005870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	3301      	adds	r3, #1
 800587a:	069b      	lsls	r3, r3, #26
 800587c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <HAL_ADC_ConfigChannel+0x544>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	0e9b      	lsrs	r3, r3, #26
 8005892:	3301      	adds	r3, #1
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2101      	movs	r1, #1
 800589a:	fa01 f303 	lsl.w	r3, r1, r3
 800589e:	e017      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x574>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a8:	fa93 f3a3 	rbit	r3, r3
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80058b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80058b8:	2320      	movs	r3, #32
 80058ba:	e003      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80058bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058be:	fab3 f383 	clz	r3, r3
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	3301      	adds	r3, #1
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	2101      	movs	r1, #1
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	ea42 0103 	orr.w	r1, r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <HAL_ADC_ConfigChannel+0x59a>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	0e9b      	lsrs	r3, r3, #26
 80058e6:	3301      	adds	r3, #1
 80058e8:	f003 021f 	and.w	r2, r3, #31
 80058ec:	4613      	mov	r3, r2
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	4413      	add	r3, r2
 80058f2:	051b      	lsls	r3, r3, #20
 80058f4:	e018      	b.n	8005928 <HAL_ADC_ConfigChannel+0x5cc>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	fa93 f3a3 	rbit	r3, r3
 8005902:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800590e:	2320      	movs	r3, #32
 8005910:	e003      	b.n	800591a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	fab3 f383 	clz	r3, r3
 8005918:	b2db      	uxtb	r3, r3
 800591a:	3301      	adds	r3, #1
 800591c:	f003 021f 	and.w	r2, r3, #31
 8005920:	4613      	mov	r3, r2
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	4413      	add	r3, r2
 8005926:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005928:	430b      	orrs	r3, r1
 800592a:	e080      	b.n	8005a2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_ADC_ConfigChannel+0x5ec>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	0e9b      	lsrs	r3, r3, #26
 800593e:	3301      	adds	r3, #1
 8005940:	069b      	lsls	r3, r3, #26
 8005942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005946:	e015      	b.n	8005974 <HAL_ADC_ConfigChannel+0x618>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	fa93 f3a3 	rbit	r3, r3
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8005960:	2320      	movs	r3, #32
 8005962:	e003      	b.n	800596c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	fab3 f383 	clz	r3, r3
 800596a:	b2db      	uxtb	r3, r3
 800596c:	3301      	adds	r3, #1
 800596e:	069b      	lsls	r3, r3, #26
 8005970:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <HAL_ADC_ConfigChannel+0x638>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	0e9b      	lsrs	r3, r3, #26
 8005986:	3301      	adds	r3, #1
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	e017      	b.n	80059c4 <HAL_ADC_ConfigChannel+0x668>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	fa93 f3a3 	rbit	r3, r3
 80059a0:	61bb      	str	r3, [r7, #24]
  return result;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80059ac:	2320      	movs	r3, #32
 80059ae:	e003      	b.n	80059b8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	fab3 f383 	clz	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	3301      	adds	r3, #1
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	2101      	movs	r1, #1
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	ea42 0103 	orr.w	r1, r2, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10d      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x694>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	0e9b      	lsrs	r3, r3, #26
 80059da:	3301      	adds	r3, #1
 80059dc:	f003 021f 	and.w	r2, r3, #31
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	3b1e      	subs	r3, #30
 80059e8:	051b      	lsls	r3, r3, #20
 80059ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059ee:	e01d      	b.n	8005a2c <HAL_ADC_ConfigChannel+0x6d0>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	fa93 f3a3 	rbit	r3, r3
 80059fc:	60fb      	str	r3, [r7, #12]
  return result;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005a08:	2320      	movs	r3, #32
 8005a0a:	e005      	b.n	8005a18 <HAL_ADC_ConfigChannel+0x6bc>
 8005a0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	fab3 f383 	clz	r3, r3
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	3301      	adds	r3, #1
 8005a1a:	f003 021f 	and.w	r2, r3, #31
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	3b1e      	subs	r3, #30
 8005a26:	051b      	lsls	r3, r3, #20
 8005a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a32:	4619      	mov	r1, r3
 8005a34:	f7fe ff2e 	bl	8004894 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b44      	ldr	r3, [pc, #272]	; (8005b50 <HAL_ADC_ConfigChannel+0x7f4>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d07a      	beq.n	8005b3a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a44:	4843      	ldr	r0, [pc, #268]	; (8005b54 <HAL_ADC_ConfigChannel+0x7f8>)
 8005a46:	f7fe fe5d 	bl	8004704 <LL_ADC_GetCommonPathInternalCh>
 8005a4a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a41      	ldr	r2, [pc, #260]	; (8005b58 <HAL_ADC_ConfigChannel+0x7fc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d12c      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d126      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a3c      	ldr	r2, [pc, #240]	; (8005b5c <HAL_ADC_ConfigChannel+0x800>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_ADC_ConfigChannel+0x71c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a3b      	ldr	r2, [pc, #236]	; (8005b60 <HAL_ADC_ConfigChannel+0x804>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d15d      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a80:	4619      	mov	r1, r3
 8005a82:	4834      	ldr	r0, [pc, #208]	; (8005b54 <HAL_ADC_ConfigChannel+0x7f8>)
 8005a84:	f7fe fe2b 	bl	80046de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a88:	4b36      	ldr	r3, [pc, #216]	; (8005b64 <HAL_ADC_ConfigChannel+0x808>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	099b      	lsrs	r3, r3, #6
 8005a8e:	4a36      	ldr	r2, [pc, #216]	; (8005b68 <HAL_ADC_ConfigChannel+0x80c>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	099b      	lsrs	r3, r3, #6
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	4613      	mov	r3, r2
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005aa2:	e002      	b.n	8005aaa <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f9      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ab0:	e040      	b.n	8005b34 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2d      	ldr	r2, [pc, #180]	; (8005b6c <HAL_ADC_ConfigChannel+0x810>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d118      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005abc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d112      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <HAL_ADC_ConfigChannel+0x800>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <HAL_ADC_ConfigChannel+0x780>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a22      	ldr	r2, [pc, #136]	; (8005b60 <HAL_ADC_ConfigChannel+0x804>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d12d      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005adc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ae0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	481b      	ldr	r0, [pc, #108]	; (8005b54 <HAL_ADC_ConfigChannel+0x7f8>)
 8005ae8:	f7fe fdf9 	bl	80046de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aec:	e024      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1f      	ldr	r2, [pc, #124]	; (8005b70 <HAL_ADC_ConfigChannel+0x814>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d120      	bne.n	8005b3a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005af8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d11a      	bne.n	8005b3a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <HAL_ADC_ConfigChannel+0x800>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d115      	bne.n	8005b3a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b16:	4619      	mov	r1, r3
 8005b18:	480e      	ldr	r0, [pc, #56]	; (8005b54 <HAL_ADC_ConfigChannel+0x7f8>)
 8005b1a:	f7fe fde0 	bl	80046de <LL_ADC_SetCommonPathInternalCh>
 8005b1e:	e00c      	b.n	8005b3a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005b32:	e002      	b.n	8005b3a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005b42:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	37d8      	adds	r7, #216	; 0xd8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	80080000 	.word	0x80080000
 8005b54:	50040300 	.word	0x50040300
 8005b58:	c7520000 	.word	0xc7520000
 8005b5c:	50040000 	.word	0x50040000
 8005b60:	50040200 	.word	0x50040200
 8005b64:	2000035c 	.word	0x2000035c
 8005b68:	053e2d63 	.word	0x053e2d63
 8005b6c:	cb840000 	.word	0xcb840000
 8005b70:	80000001 	.word	0x80000001

08005b74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fe ff53 	bl	8004a30 <LL_ADC_IsEnabled>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d169      	bne.n	8005c64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	4b36      	ldr	r3, [pc, #216]	; (8005c70 <ADC_Enable+0xfc>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	f043 0210 	orr.w	r2, r3, #16
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bae:	f043 0201 	orr.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e055      	b.n	8005c66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe ff22 	bl	8004a08 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005bc4:	482b      	ldr	r0, [pc, #172]	; (8005c74 <ADC_Enable+0x100>)
 8005bc6:	f7fe fd9d 	bl	8004704 <LL_ADC_GetCommonPathInternalCh>
 8005bca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005bcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bd4:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <ADC_Enable+0x104>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	099b      	lsrs	r3, r3, #6
 8005bda:	4a28      	ldr	r2, [pc, #160]	; (8005c7c <ADC_Enable+0x108>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	099b      	lsrs	r3, r3, #6
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	4613      	mov	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005bee:	e002      	b.n	8005bf6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1f9      	bne.n	8005bf0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005bfc:	f7fe fd0c 	bl	8004618 <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c02:	e028      	b.n	8005c56 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe ff11 	bl	8004a30 <LL_ADC_IsEnabled>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fe fef5 	bl	8004a08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c1e:	f7fe fcfb 	bl	8004618 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d914      	bls.n	8005c56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d00d      	beq.n	8005c56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	f043 0210 	orr.w	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e007      	b.n	8005c66 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d1cf      	bne.n	8005c04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	8000003f 	.word	0x8000003f
 8005c74:	50040300 	.word	0x50040300
 8005c78:	2000035c 	.word	0x2000035c
 8005c7c:	053e2d63 	.word	0x053e2d63

08005c80 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d14b      	bne.n	8005d32 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d021      	beq.n	8005cf8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe fd99 	bl	80047f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d032      	beq.n	8005d2a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d12b      	bne.n	8005d2a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d11f      	bne.n	8005d2a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	f043 0201 	orr.w	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	659a      	str	r2, [r3, #88]	; 0x58
 8005cf6:	e018      	b.n	8005d2a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d111      	bne.n	8005d2a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	f043 0201 	orr.w	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7fd feb4 	bl	8003a98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d30:	e00e      	b.n	8005d50 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7ff fb02 	bl	8005348 <HAL_ADC_ErrorCallback>
}
 8005d44:	e004      	b.n	8005d50 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f7ff fada 	bl	8005320 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d92:	f043 0204 	orr.w	r2, r3, #4
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff fad4 	bl	8005348 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <LL_ADC_IsEnabled>:
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <LL_ADC_IsEnabled+0x18>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <LL_ADC_IsEnabled+0x1a>
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <LL_ADC_REG_IsConversionOngoing>:
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d101      	bne.n	8005de6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b0a1      	sub	sp, #132	; 0x84
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e093      	b.n	8005f9e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e82:	2300      	movs	r3, #0
 8005e84:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a47      	ldr	r2, [pc, #284]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d102      	bne.n	8005e96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e90:	4b46      	ldr	r3, [pc, #280]	; (8005fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e001      	b.n	8005e9a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	f043 0220 	orr.w	r2, r3, #32
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e072      	b.n	8005f9e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff ff87 	bl	8005dce <LL_ADC_REG_IsConversionOngoing>
 8005ec0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff ff81 	bl	8005dce <LL_ADC_REG_IsConversionOngoing>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d154      	bne.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d151      	bne.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ed8:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005eda:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02c      	beq.n	8005f3e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ef6:	035b      	lsls	r3, r3, #13
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	431a      	orrs	r2, r3
 8005efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005efe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f00:	4829      	ldr	r0, [pc, #164]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005f02:	f7ff ff51 	bl	8005da8 <LL_ADC_IsEnabled>
 8005f06:	4604      	mov	r4, r0
 8005f08:	4828      	ldr	r0, [pc, #160]	; (8005fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005f0a:	f7ff ff4d 	bl	8005da8 <LL_ADC_IsEnabled>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	431c      	orrs	r4, r3
 8005f12:	4828      	ldr	r0, [pc, #160]	; (8005fb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005f14:	f7ff ff48 	bl	8005da8 <LL_ADC_IsEnabled>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4323      	orrs	r3, r4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d137      	bne.n	8005f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f28:	f023 030f 	bic.w	r3, r3, #15
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	6811      	ldr	r1, [r2, #0]
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	6892      	ldr	r2, [r2, #8]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	431a      	orrs	r2, r3
 8005f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f3c:	e028      	b.n	8005f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f48:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f4a:	4817      	ldr	r0, [pc, #92]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005f4c:	f7ff ff2c 	bl	8005da8 <LL_ADC_IsEnabled>
 8005f50:	4604      	mov	r4, r0
 8005f52:	4816      	ldr	r0, [pc, #88]	; (8005fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005f54:	f7ff ff28 	bl	8005da8 <LL_ADC_IsEnabled>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	431c      	orrs	r4, r3
 8005f5c:	4815      	ldr	r0, [pc, #84]	; (8005fb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005f5e:	f7ff ff23 	bl	8005da8 <LL_ADC_IsEnabled>
 8005f62:	4603      	mov	r3, r0
 8005f64:	4323      	orrs	r3, r4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d112      	bne.n	8005f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f72:	f023 030f 	bic.w	r3, r3, #15
 8005f76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f78:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f7a:	e009      	b.n	8005f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005f8e:	e000      	b.n	8005f92 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005f9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3784      	adds	r7, #132	; 0x84
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd90      	pop	{r4, r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	50040000 	.word	0x50040000
 8005fac:	50040100 	.word	0x50040100
 8005fb0:	50040300 	.word	0x50040300
 8005fb4:	50040200 	.word	0x50040200

08005fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <__NVIC_SetPriorityGrouping+0x44>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fea:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <__NVIC_SetPriorityGrouping+0x44>)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	60d3      	str	r3, [r2, #12]
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <__NVIC_GetPriorityGrouping+0x18>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	0a1b      	lsrs	r3, r3, #8
 800600a:	f003 0307 	and.w	r3, r3, #7
}
 800600e:	4618      	mov	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	e000ed00 	.word	0xe000ed00

0800601c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	db0b      	blt.n	8006046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	f003 021f 	and.w	r2, r3, #31
 8006034:	4907      	ldr	r1, [pc, #28]	; (8006054 <__NVIC_EnableIRQ+0x38>)
 8006036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	2001      	movs	r0, #1
 800603e:	fa00 f202 	lsl.w	r2, r0, r2
 8006042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	e000e100 	.word	0xe000e100

08006058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006068:	2b00      	cmp	r3, #0
 800606a:	db0a      	blt.n	8006082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	490c      	ldr	r1, [pc, #48]	; (80060a4 <__NVIC_SetPriority+0x4c>)
 8006072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006076:	0112      	lsls	r2, r2, #4
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	440b      	add	r3, r1
 800607c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006080:	e00a      	b.n	8006098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	4908      	ldr	r1, [pc, #32]	; (80060a8 <__NVIC_SetPriority+0x50>)
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	3b04      	subs	r3, #4
 8006090:	0112      	lsls	r2, r2, #4
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	440b      	add	r3, r1
 8006096:	761a      	strb	r2, [r3, #24]
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	e000e100 	.word	0xe000e100
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	; 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f1c3 0307 	rsb	r3, r3, #7
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	bf28      	it	cs
 80060ca:	2304      	movcs	r3, #4
 80060cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	3304      	adds	r3, #4
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d902      	bls.n	80060dc <NVIC_EncodePriority+0x30>
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3b03      	subs	r3, #3
 80060da:	e000      	b.n	80060de <NVIC_EncodePriority+0x32>
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060e0:	f04f 32ff 	mov.w	r2, #4294967295
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43da      	mvns	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	401a      	ands	r2, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060f4:	f04f 31ff 	mov.w	r1, #4294967295
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	fa01 f303 	lsl.w	r3, r1, r3
 80060fe:	43d9      	mvns	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006104:	4313      	orrs	r3, r2
         );
}
 8006106:	4618      	mov	r0, r3
 8006108:	3724      	adds	r7, #36	; 0x24
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3b01      	subs	r3, #1
 8006120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006124:	d301      	bcc.n	800612a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006126:	2301      	movs	r3, #1
 8006128:	e00f      	b.n	800614a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800612a:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <SysTick_Config+0x40>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3b01      	subs	r3, #1
 8006130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006132:	210f      	movs	r1, #15
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	f7ff ff8e 	bl	8006058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <SysTick_Config+0x40>)
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006142:	4b04      	ldr	r3, [pc, #16]	; (8006154 <SysTick_Config+0x40>)
 8006144:	2207      	movs	r2, #7
 8006146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	e000e010 	.word	0xe000e010

08006158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff29 	bl	8005fb8 <__NVIC_SetPriorityGrouping>
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b086      	sub	sp, #24
 8006172:	af00      	add	r7, sp, #0
 8006174:	4603      	mov	r3, r0
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006180:	f7ff ff3e 	bl	8006000 <__NVIC_GetPriorityGrouping>
 8006184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	6978      	ldr	r0, [r7, #20]
 800618c:	f7ff ff8e 	bl	80060ac <NVIC_EncodePriority>
 8006190:	4602      	mov	r2, r0
 8006192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006196:	4611      	mov	r1, r2
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff ff5d 	bl	8006058 <__NVIC_SetPriority>
}
 800619e:	bf00      	nop
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	4603      	mov	r3, r0
 80061ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff ff31 	bl	800601c <__NVIC_EnableIRQ>
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff ffa2 	bl	8006114 <SysTick_Config>
 80061d0:	4603      	mov	r3, r0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e098      	b.n	8006320 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b4d      	ldr	r3, [pc, #308]	; (800632c <HAL_DMA_Init+0x150>)
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d80f      	bhi.n	800621a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	4b4b      	ldr	r3, [pc, #300]	; (8006330 <HAL_DMA_Init+0x154>)
 8006202:	4413      	add	r3, r2
 8006204:	4a4b      	ldr	r2, [pc, #300]	; (8006334 <HAL_DMA_Init+0x158>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	009a      	lsls	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a48      	ldr	r2, [pc, #288]	; (8006338 <HAL_DMA_Init+0x15c>)
 8006216:	641a      	str	r2, [r3, #64]	; 0x40
 8006218:	e00e      	b.n	8006238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	4b46      	ldr	r3, [pc, #280]	; (800633c <HAL_DMA_Init+0x160>)
 8006222:	4413      	add	r3, r2
 8006224:	4a43      	ldr	r2, [pc, #268]	; (8006334 <HAL_DMA_Init+0x158>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	009a      	lsls	r2, r3, #2
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a42      	ldr	r2, [pc, #264]	; (8006340 <HAL_DMA_Init+0x164>)
 8006236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800625c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006292:	d039      	beq.n	8006308 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	4a27      	ldr	r2, [pc, #156]	; (8006338 <HAL_DMA_Init+0x15c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d11a      	bne.n	80062d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800629e:	4b29      	ldr	r3, [pc, #164]	; (8006344 <HAL_DMA_Init+0x168>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a6:	f003 031c 	and.w	r3, r3, #28
 80062aa:	210f      	movs	r1, #15
 80062ac:	fa01 f303 	lsl.w	r3, r1, r3
 80062b0:	43db      	mvns	r3, r3
 80062b2:	4924      	ldr	r1, [pc, #144]	; (8006344 <HAL_DMA_Init+0x168>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80062b8:	4b22      	ldr	r3, [pc, #136]	; (8006344 <HAL_DMA_Init+0x168>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	f003 031c 	and.w	r3, r3, #28
 80062c8:	fa01 f303 	lsl.w	r3, r1, r3
 80062cc:	491d      	ldr	r1, [pc, #116]	; (8006344 <HAL_DMA_Init+0x168>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	600b      	str	r3, [r1, #0]
 80062d2:	e019      	b.n	8006308 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <HAL_DMA_Init+0x16c>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	f003 031c 	and.w	r3, r3, #28
 80062e0:	210f      	movs	r1, #15
 80062e2:	fa01 f303 	lsl.w	r3, r1, r3
 80062e6:	43db      	mvns	r3, r3
 80062e8:	4917      	ldr	r1, [pc, #92]	; (8006348 <HAL_DMA_Init+0x16c>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80062ee:	4b16      	ldr	r3, [pc, #88]	; (8006348 <HAL_DMA_Init+0x16c>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6859      	ldr	r1, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	f003 031c 	and.w	r3, r3, #28
 80062fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006302:	4911      	ldr	r1, [pc, #68]	; (8006348 <HAL_DMA_Init+0x16c>)
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40020407 	.word	0x40020407
 8006330:	bffdfff8 	.word	0xbffdfff8
 8006334:	cccccccd 	.word	0xcccccccd
 8006338:	40020000 	.word	0x40020000
 800633c:	bffdfbf8 	.word	0xbffdfbf8
 8006340:	40020400 	.word	0x40020400
 8006344:	400200a8 	.word	0x400200a8
 8006348:	400204a8 	.word	0x400204a8

0800634c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_DMA_Start_IT+0x20>
 8006368:	2302      	movs	r3, #2
 800636a:	e04b      	b.n	8006404 <HAL_DMA_Start_IT+0xb8>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d13a      	bne.n	80063f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f96d 	bl	8006684 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d008      	beq.n	80063c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 020e 	orr.w	r2, r2, #14
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e00f      	b.n	80063e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0204 	bic.w	r2, r2, #4
 80063d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 020a 	orr.w	r2, r2, #10
 80063e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e005      	b.n	8006402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
 8006400:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006402:	7dfb      	ldrb	r3, [r7, #23]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d008      	beq.n	8006436 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2204      	movs	r2, #4
 8006428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e022      	b.n	800647c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 020e 	bic.w	r2, r2, #14
 8006444:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	f003 021c 	and.w	r2, r3, #28
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2101      	movs	r1, #1
 8006464:	fa01 f202 	lsl.w	r2, r1, r2
 8006468:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d005      	beq.n	80064ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2204      	movs	r2, #4
 80064a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	73fb      	strb	r3, [r7, #15]
 80064aa:	e029      	b.n	8006500 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 020e 	bic.w	r2, r2, #14
 80064ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	f003 021c 	and.w	r2, r3, #28
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	2101      	movs	r1, #1
 80064da:	fa01 f202 	lsl.w	r2, r1, r2
 80064de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	4798      	blx	r3
    }
  }
  return status;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006526:	f003 031c 	and.w	r3, r3, #28
 800652a:	2204      	movs	r2, #4
 800652c:	409a      	lsls	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d026      	beq.n	8006584 <HAL_DMA_IRQHandler+0x7a>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d021      	beq.n	8006584 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d107      	bne.n	800655e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0204 	bic.w	r2, r2, #4
 800655c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	f003 021c 	and.w	r2, r3, #28
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	2104      	movs	r1, #4
 800656c:	fa01 f202 	lsl.w	r2, r1, r2
 8006570:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	2b00      	cmp	r3, #0
 8006578:	d071      	beq.n	800665e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006582:	e06c      	b.n	800665e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	f003 031c 	and.w	r3, r3, #28
 800658c:	2202      	movs	r2, #2
 800658e:	409a      	lsls	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02e      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xec>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d029      	beq.n	80065f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10b      	bne.n	80065c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 020a 	bic.w	r2, r2, #10
 80065be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065cc:	f003 021c 	and.w	r2, r3, #28
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	2102      	movs	r1, #2
 80065d6:	fa01 f202 	lsl.w	r2, r1, r2
 80065da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d038      	beq.n	800665e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80065f4:	e033      	b.n	800665e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fa:	f003 031c 	and.w	r3, r3, #28
 80065fe:	2208      	movs	r2, #8
 8006600:	409a      	lsls	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4013      	ands	r3, r2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d02a      	beq.n	8006660 <HAL_DMA_IRQHandler+0x156>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d025      	beq.n	8006660 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 020e 	bic.w	r2, r2, #14
 8006622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006628:	f003 021c 	and.w	r2, r3, #28
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f202 	lsl.w	r2, r1, r2
 8006636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800665e:	bf00      	nop
 8006660:	bf00      	nop
}
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006676:	b2db      	uxtb	r3, r3
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006696:	f003 021c 	and.w	r2, r3, #28
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	2101      	movs	r1, #1
 80066a0:	fa01 f202 	lsl.w	r2, r1, r2
 80066a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b10      	cmp	r3, #16
 80066b4:	d108      	bne.n	80066c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80066c6:	e007      	b.n	80066d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]
}
 80066d8:	bf00      	nop
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066f2:	e166      	b.n	80069c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	2101      	movs	r1, #1
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006700:	4013      	ands	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8158 	beq.w	80069bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	2b01      	cmp	r3, #1
 8006716:	d005      	beq.n	8006724 <HAL_GPIO_Init+0x40>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d130      	bne.n	8006786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	2203      	movs	r2, #3
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4013      	ands	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800675a:	2201      	movs	r2, #1
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	43db      	mvns	r3, r3
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4013      	ands	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 0201 	and.w	r2, r3, #1
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	fa02 f303 	lsl.w	r3, r2, r3
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b03      	cmp	r3, #3
 8006790:	d017      	beq.n	80067c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	2203      	movs	r2, #3
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	43db      	mvns	r3, r3
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4013      	ands	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d123      	bne.n	8006816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	08da      	lsrs	r2, r3, #3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3208      	adds	r2, #8
 80067d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	220f      	movs	r2, #15
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4013      	ands	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	691a      	ldr	r2, [r3, #16]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	08da      	lsrs	r2, r3, #3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3208      	adds	r2, #8
 8006810:	6939      	ldr	r1, [r7, #16]
 8006812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	2203      	movs	r2, #3
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43db      	mvns	r3, r3
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4013      	ands	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f003 0203 	and.w	r2, r3, #3
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80b2 	beq.w	80069bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006858:	4b61      	ldr	r3, [pc, #388]	; (80069e0 <HAL_GPIO_Init+0x2fc>)
 800685a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685c:	4a60      	ldr	r2, [pc, #384]	; (80069e0 <HAL_GPIO_Init+0x2fc>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6613      	str	r3, [r2, #96]	; 0x60
 8006864:	4b5e      	ldr	r3, [pc, #376]	; (80069e0 <HAL_GPIO_Init+0x2fc>)
 8006866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006870:	4a5c      	ldr	r2, [pc, #368]	; (80069e4 <HAL_GPIO_Init+0x300>)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	089b      	lsrs	r3, r3, #2
 8006876:	3302      	adds	r3, #2
 8006878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	220f      	movs	r2, #15
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	43db      	mvns	r3, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4013      	ands	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800689a:	d02b      	beq.n	80068f4 <HAL_GPIO_Init+0x210>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a52      	ldr	r2, [pc, #328]	; (80069e8 <HAL_GPIO_Init+0x304>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d025      	beq.n	80068f0 <HAL_GPIO_Init+0x20c>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a51      	ldr	r2, [pc, #324]	; (80069ec <HAL_GPIO_Init+0x308>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d01f      	beq.n	80068ec <HAL_GPIO_Init+0x208>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a50      	ldr	r2, [pc, #320]	; (80069f0 <HAL_GPIO_Init+0x30c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d019      	beq.n	80068e8 <HAL_GPIO_Init+0x204>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a4f      	ldr	r2, [pc, #316]	; (80069f4 <HAL_GPIO_Init+0x310>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <HAL_GPIO_Init+0x200>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a4e      	ldr	r2, [pc, #312]	; (80069f8 <HAL_GPIO_Init+0x314>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00d      	beq.n	80068e0 <HAL_GPIO_Init+0x1fc>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a4d      	ldr	r2, [pc, #308]	; (80069fc <HAL_GPIO_Init+0x318>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <HAL_GPIO_Init+0x1f8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a4c      	ldr	r2, [pc, #304]	; (8006a00 <HAL_GPIO_Init+0x31c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d101      	bne.n	80068d8 <HAL_GPIO_Init+0x1f4>
 80068d4:	2307      	movs	r3, #7
 80068d6:	e00e      	b.n	80068f6 <HAL_GPIO_Init+0x212>
 80068d8:	2308      	movs	r3, #8
 80068da:	e00c      	b.n	80068f6 <HAL_GPIO_Init+0x212>
 80068dc:	2306      	movs	r3, #6
 80068de:	e00a      	b.n	80068f6 <HAL_GPIO_Init+0x212>
 80068e0:	2305      	movs	r3, #5
 80068e2:	e008      	b.n	80068f6 <HAL_GPIO_Init+0x212>
 80068e4:	2304      	movs	r3, #4
 80068e6:	e006      	b.n	80068f6 <HAL_GPIO_Init+0x212>
 80068e8:	2303      	movs	r3, #3
 80068ea:	e004      	b.n	80068f6 <HAL_GPIO_Init+0x212>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e002      	b.n	80068f6 <HAL_GPIO_Init+0x212>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <HAL_GPIO_Init+0x212>
 80068f4:	2300      	movs	r3, #0
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	f002 0203 	and.w	r2, r2, #3
 80068fc:	0092      	lsls	r2, r2, #2
 80068fe:	4093      	lsls	r3, r2
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006906:	4937      	ldr	r1, [pc, #220]	; (80069e4 <HAL_GPIO_Init+0x300>)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	089b      	lsrs	r3, r3, #2
 800690c:	3302      	adds	r3, #2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006914:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <HAL_GPIO_Init+0x320>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	43db      	mvns	r3, r3
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4013      	ands	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006938:	4a32      	ldr	r2, [pc, #200]	; (8006a04 <HAL_GPIO_Init+0x320>)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800693e:	4b31      	ldr	r3, [pc, #196]	; (8006a04 <HAL_GPIO_Init+0x320>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	43db      	mvns	r3, r3
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4013      	ands	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006962:	4a28      	ldr	r2, [pc, #160]	; (8006a04 <HAL_GPIO_Init+0x320>)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006968:	4b26      	ldr	r3, [pc, #152]	; (8006a04 <HAL_GPIO_Init+0x320>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	43db      	mvns	r3, r3
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4013      	ands	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800698c:	4a1d      	ldr	r2, [pc, #116]	; (8006a04 <HAL_GPIO_Init+0x320>)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006992:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <HAL_GPIO_Init+0x320>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	43db      	mvns	r3, r3
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4013      	ands	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80069b6:	4a13      	ldr	r2, [pc, #76]	; (8006a04 <HAL_GPIO_Init+0x320>)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	3301      	adds	r3, #1
 80069c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	fa22 f303 	lsr.w	r3, r2, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f47f ae91 	bne.w	80066f4 <HAL_GPIO_Init+0x10>
  }
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40021000 	.word	0x40021000
 80069e4:	40010000 	.word	0x40010000
 80069e8:	48000400 	.word	0x48000400
 80069ec:	48000800 	.word	0x48000800
 80069f0:	48000c00 	.word	0x48000c00
 80069f4:	48001000 	.word	0x48001000
 80069f8:	48001400 	.word	0x48001400
 80069fc:	48001800 	.word	0x48001800
 8006a00:	48001c00 	.word	0x48001c00
 8006a04:	40010400 	.word	0x40010400

08006a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	887b      	ldrh	r3, [r7, #2]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
 8006a24:	e001      	b.n	8006a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
 8006a44:	4613      	mov	r3, r2
 8006a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a48:	787b      	ldrb	r3, [r7, #1]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a4e:	887a      	ldrh	r2, [r7, #2]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a54:	e002      	b.n	8006a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a56:	887a      	ldrh	r2, [r7, #2]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e08d      	b.n	8006b96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fd f988 	bl	8003da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2224      	movs	r2, #36	; 0x24
 8006a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d107      	bne.n	8006ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ade:	609a      	str	r2, [r3, #8]
 8006ae0:	e006      	b.n	8006af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d108      	bne.n	8006b0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b06:	605a      	str	r2, [r3, #4]
 8006b08:	e007      	b.n	8006b1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69d9      	ldr	r1, [r3, #28]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1a      	ldr	r2, [r3, #32]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	461a      	mov	r2, r3
 8006bac:	460b      	mov	r3, r1
 8006bae:	817b      	strh	r3, [r7, #10]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	f040 80ef 	bne.w	8006da4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd4:	d101      	bne.n	8006bda <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e0e5      	b.n	8006da6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_I2C_Master_Transmit_DMA+0x48>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e0de      	b.n	8006da6 <HAL_I2C_Master_Transmit_DMA+0x206>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2221      	movs	r2, #33	; 0x21
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	893a      	ldrh	r2, [r7, #8]
 8006c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a66      	ldr	r2, [pc, #408]	; (8006db0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006c16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a66      	ldr	r2, [pc, #408]	; (8006db4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006c1c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2bff      	cmp	r3, #255	; 0xff
 8006c26:	d906      	bls.n	8006c36 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	22ff      	movs	r2, #255	; 0xff
 8006c2c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006c2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	e007      	b.n	8006c46 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c44:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01a      	beq.n	8006c84 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d074      	beq.n	8006d76 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d022      	beq.n	8006cda <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	4a47      	ldr	r2, [pc, #284]	; (8006db8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8006c9a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	4a46      	ldr	r2, [pc, #280]	; (8006dbc <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8006ca2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006cc4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006cca:	f7ff fb3f 	bl	800634c <HAL_DMA_Start_IT>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d13a      	bne.n	8006d4e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8006cd8:	e013      	b.n	8006d02 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e051      	b.n	8006da6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	3301      	adds	r3, #1
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	8979      	ldrh	r1, [r7, #10]
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f002 f8f9 	bl	8008f0c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006d34:	2110      	movs	r1, #16
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f002 f91a 	bl	8008f70 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	e028      	b.n	8006da0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	f043 0210 	orr.w	r2, r3, #16
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e017      	b.n	8006da6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a12      	ldr	r2, [pc, #72]	; (8006dc4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8006d7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	8979      	ldrh	r1, [r7, #10]
 8006d82:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f002 f8be 	bl	8008f0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d98:	2101      	movs	r1, #1
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f002 f8e8 	bl	8008f70 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	ffff0000 	.word	0xffff0000
 8006db4:	080079d5 	.word	0x080079d5
 8006db8:	08008a03 	.word	0x08008a03
 8006dbc:	08008b2f 	.word	0x08008b2f
 8006dc0:	80002000 	.word	0x80002000
 8006dc4:	08007597 	.word	0x08007597

08006dc8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	607a      	str	r2, [r7, #4]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	817b      	strh	r3, [r7, #10]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	f040 80cd 	bne.w	8006f84 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df8:	d101      	bne.n	8006dfe <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e0c3      	b.n	8006f86 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_I2C_Master_Receive_DMA+0x44>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e0bc      	b.n	8006f86 <HAL_I2C_Master_Receive_DMA+0x1be>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2222      	movs	r2, #34	; 0x22
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2210      	movs	r2, #16
 8006e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	893a      	ldrh	r2, [r7, #8]
 8006e34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4a55      	ldr	r2, [pc, #340]	; (8006f90 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8006e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a55      	ldr	r2, [pc, #340]	; (8006f94 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8006e40:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2bff      	cmp	r3, #255	; 0xff
 8006e4a:	d906      	bls.n	8006e5a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	22ff      	movs	r2, #255	; 0xff
 8006e50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e007      	b.n	8006e6a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d070      	beq.n	8006f54 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d020      	beq.n	8006ebc <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	4a46      	ldr	r2, [pc, #280]	; (8006f98 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	4a45      	ldr	r2, [pc, #276]	; (8006f9c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8006e88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	2200      	movs	r2, #0
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e96:	2200      	movs	r2, #0
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3324      	adds	r3, #36	; 0x24
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006eac:	f7ff fa4e 	bl	800634c <HAL_DMA_Start_IT>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006eb4:	7cfb      	ldrb	r3, [r7, #19]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d138      	bne.n	8006f2c <HAL_I2C_Master_Receive_DMA+0x164>
 8006eba:	e013      	b.n	8006ee4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e050      	b.n	8006f86 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	8979      	ldrh	r1, [r7, #10]
 8006eec:	4b2c      	ldr	r3, [pc, #176]	; (8006fa0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f002 f80a 	bl	8008f0c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006f12:	2110      	movs	r1, #16
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f002 f82b 	bl	8008f70 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e029      	b.n	8006f80 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f40:	f043 0210 	orr.w	r2, r3, #16
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e018      	b.n	8006f86 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a13      	ldr	r2, [pc, #76]	; (8006fa4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8006f58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	8979      	ldrh	r1, [r7, #10]
 8006f62:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 ffce 	bl	8008f0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006f78:	2102      	movs	r1, #2
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f001 fff8 	bl	8008f70 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	e000      	b.n	8006f86 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8006f84:	2302      	movs	r3, #2
  }
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	ffff0000 	.word	0xffff0000
 8006f94:	080079d5 	.word	0x080079d5
 8006f98:	08008a99 	.word	0x08008a99
 8006f9c:	08008b2f 	.word	0x08008b2f
 8006fa0:	80002400 	.word	0x80002400
 8006fa4:	08007597 	.word	0x08007597

08006fa8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	817b      	strh	r3, [r7, #10]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	813b      	strh	r3, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	f040 80f9 	bne.w	80071c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_I2C_Mem_Write+0x34>
 8006fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d105      	bne.n	8006fe8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0ed      	b.n	80071c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_I2C_Mem_Write+0x4e>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e0e6      	b.n	80071c4 <HAL_I2C_Mem_Write+0x21c>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ffe:	f7fd fb0b 	bl	8004618 <HAL_GetTick>
 8007002:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	2319      	movs	r3, #25
 800700a:	2201      	movs	r2, #1
 800700c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 fdc1 	bl	8008b98 <I2C_WaitOnFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0d1      	b.n	80071c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2221      	movs	r2, #33	; 0x21
 8007024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2240      	movs	r2, #64	; 0x40
 800702c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a3a      	ldr	r2, [r7, #32]
 800703a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007040:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007048:	88f8      	ldrh	r0, [r7, #6]
 800704a:	893a      	ldrh	r2, [r7, #8]
 800704c:	8979      	ldrh	r1, [r7, #10]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4603      	mov	r3, r0
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 ffa3 	bl	8007fa4 <I2C_RequestMemoryWrite>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0a9      	b.n	80071c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	2bff      	cmp	r3, #255	; 0xff
 8007078:	d90e      	bls.n	8007098 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	22ff      	movs	r2, #255	; 0xff
 800707e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007084:	b2da      	uxtb	r2, r3
 8007086:	8979      	ldrh	r1, [r7, #10]
 8007088:	2300      	movs	r3, #0
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f001 ff3b 	bl	8008f0c <I2C_TransferConfig>
 8007096:	e00f      	b.n	80070b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	8979      	ldrh	r1, [r7, #10]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f001 ff2a 	bl	8008f0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f001 fdba 	bl	8008c36 <I2C_WaitOnTXISFlagUntilTimeout>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e07b      	b.n	80071c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	781a      	ldrb	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d034      	beq.n	8007170 <HAL_I2C_Mem_Write+0x1c8>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d130      	bne.n	8007170 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	2200      	movs	r2, #0
 8007116:	2180      	movs	r1, #128	; 0x80
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f001 fd3d 	bl	8008b98 <I2C_WaitOnFlagUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e04d      	b.n	80071c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	2bff      	cmp	r3, #255	; 0xff
 8007130:	d90e      	bls.n	8007150 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713c:	b2da      	uxtb	r2, r3
 800713e:	8979      	ldrh	r1, [r7, #10]
 8007140:	2300      	movs	r3, #0
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f001 fedf 	bl	8008f0c <I2C_TransferConfig>
 800714e:	e00f      	b.n	8007170 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715e:	b2da      	uxtb	r2, r3
 8007160:	8979      	ldrh	r1, [r7, #10]
 8007162:	2300      	movs	r3, #0
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f001 fece 	bl	8008f0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d19e      	bne.n	80070b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f001 fda0 	bl	8008cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e01a      	b.n	80071c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2220      	movs	r2, #32
 8007194:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <HAL_I2C_Mem_Write+0x224>)
 80071a2:	400b      	ands	r3, r1
 80071a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	e000      	b.n	80071c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80071c2:	2302      	movs	r3, #2
  }
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	fe00e800 	.word	0xfe00e800

080071d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	461a      	mov	r2, r3
 80071de:	4603      	mov	r3, r0
 80071e0:	817b      	strh	r3, [r7, #10]
 80071e2:	460b      	mov	r3, r1
 80071e4:	813b      	strh	r3, [r7, #8]
 80071e6:	4613      	mov	r3, r2
 80071e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	f040 80fd 	bne.w	80073f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_I2C_Mem_Read+0x34>
 80071fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d105      	bne.n	8007210 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800720a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0f1      	b.n	80073f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007216:	2b01      	cmp	r3, #1
 8007218:	d101      	bne.n	800721e <HAL_I2C_Mem_Read+0x4e>
 800721a:	2302      	movs	r3, #2
 800721c:	e0ea      	b.n	80073f4 <HAL_I2C_Mem_Read+0x224>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007226:	f7fd f9f7 	bl	8004618 <HAL_GetTick>
 800722a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2319      	movs	r3, #25
 8007232:	2201      	movs	r2, #1
 8007234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f001 fcad 	bl	8008b98 <I2C_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0d5      	b.n	80073f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2222      	movs	r2, #34	; 0x22
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2240      	movs	r2, #64	; 0x40
 8007254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a3a      	ldr	r2, [r7, #32]
 8007262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007270:	88f8      	ldrh	r0, [r7, #6]
 8007272:	893a      	ldrh	r2, [r7, #8]
 8007274:	8979      	ldrh	r1, [r7, #10]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4603      	mov	r3, r0
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fee3 	bl	800804c <I2C_RequestMemoryRead>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e0ad      	b.n	80073f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729c:	b29b      	uxth	r3, r3
 800729e:	2bff      	cmp	r3, #255	; 0xff
 80072a0:	d90e      	bls.n	80072c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	22ff      	movs	r2, #255	; 0xff
 80072a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	8979      	ldrh	r1, [r7, #10]
 80072b0:	4b52      	ldr	r3, [pc, #328]	; (80073fc <HAL_I2C_Mem_Read+0x22c>)
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f001 fe27 	bl	8008f0c <I2C_TransferConfig>
 80072be:	e00f      	b.n	80072e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	8979      	ldrh	r1, [r7, #10]
 80072d2:	4b4a      	ldr	r3, [pc, #296]	; (80073fc <HAL_I2C_Mem_Read+0x22c>)
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f001 fe16 	bl	8008f0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	2200      	movs	r2, #0
 80072e8:	2104      	movs	r1, #4
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f001 fc54 	bl	8008b98 <I2C_WaitOnFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e07c      	b.n	80073f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	b2d2      	uxtb	r2, r2
 8007306:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d034      	beq.n	80073a0 <HAL_I2C_Mem_Read+0x1d0>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733a:	2b00      	cmp	r3, #0
 800733c:	d130      	bne.n	80073a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	2200      	movs	r2, #0
 8007346:	2180      	movs	r1, #128	; 0x80
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 fc25 	bl	8008b98 <I2C_WaitOnFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e04d      	b.n	80073f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	2bff      	cmp	r3, #255	; 0xff
 8007360:	d90e      	bls.n	8007380 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	22ff      	movs	r2, #255	; 0xff
 8007366:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800736c:	b2da      	uxtb	r2, r3
 800736e:	8979      	ldrh	r1, [r7, #10]
 8007370:	2300      	movs	r3, #0
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f001 fdc7 	bl	8008f0c <I2C_TransferConfig>
 800737e:	e00f      	b.n	80073a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800738e:	b2da      	uxtb	r2, r3
 8007390:	8979      	ldrh	r1, [r7, #10]
 8007392:	2300      	movs	r3, #0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f001 fdb6 	bl	8008f0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d19a      	bne.n	80072e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f001 fc88 	bl	8008cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e01a      	b.n	80073f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2220      	movs	r2, #32
 80073c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6859      	ldr	r1, [r3, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <HAL_I2C_Mem_Read+0x230>)
 80073d2:	400b      	ands	r3, r1
 80073d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	e000      	b.n	80073f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
  }
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	80002400 	.word	0x80002400
 8007400:	fe00e800 	.word	0xfe00e800

08007404 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
  }
}
 8007430:	bf00      	nop
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00f      	beq.n	800747a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007468:	f043 0201 	orr.w	r2, r3, #1
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007478:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00f      	beq.n	80074a4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007492:	f043 0208 	orr.w	r2, r3, #8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00f      	beq.n	80074ce <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	f043 0202 	orr.w	r2, r3, #2
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 030b 	and.w	r3, r3, #11
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80074de:	68f9      	ldr	r1, [r7, #12]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 f953 	bl	800878c <I2C_ITError>
  }
}
 80074e6:	bf00      	nop
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	460b      	mov	r3, r1
 8007520:	70fb      	strb	r3, [r7, #3]
 8007522:	4613      	mov	r3, r2
 8007524:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b088      	sub	sp, #32
 800759a:	af02      	add	r7, sp, #8
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d101      	bne.n	80075b4 <I2C_Master_ISR_IT+0x1e>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e113      	b.n	80077dc <I2C_Master_ISR_IT+0x246>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d012      	beq.n	80075ec <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00d      	beq.n	80075ec <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2210      	movs	r2, #16
 80075d6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	f043 0204 	orr.w	r2, r3, #4
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f001 f9e8 	bl	80089ba <I2C_Flush_TXDR>
 80075ea:	e0e4      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d022      	beq.n	800763c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01d      	beq.n	800763c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f023 0304 	bic.w	r3, r3, #4
 8007606:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	855a      	strh	r2, [r3, #42]	; 0x2a
 800763a:	e0bc      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d128      	bne.n	8007698 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800764c:	2b00      	cmp	r3, #0
 800764e:	d023      	beq.n	8007698 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01e      	beq.n	8007698 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 80a8 	beq.w	80077b6 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8007696:	e08e      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d05c      	beq.n	800775c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d057      	beq.n	800775c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d040      	beq.n	8007738 <I2C_Master_ISR_IT+0x1a2>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d13c      	bne.n	8007738 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ca:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2bff      	cmp	r3, #255	; 0xff
 80076d4:	d90e      	bls.n	80076f4 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	22ff      	movs	r2, #255	; 0xff
 80076da:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	8a79      	ldrh	r1, [r7, #18]
 80076e4:	2300      	movs	r3, #0
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f001 fc0d 	bl	8008f0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076f2:	e032      	b.n	800775a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007706:	d00b      	beq.n	8007720 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007712:	8a79      	ldrh	r1, [r7, #18]
 8007714:	2000      	movs	r0, #0
 8007716:	9000      	str	r0, [sp, #0]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f001 fbf7 	bl	8008f0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800771e:	e01c      	b.n	800775a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007724:	b2da      	uxtb	r2, r3
 8007726:	8a79      	ldrh	r1, [r7, #18]
 8007728:	2300      	movs	r3, #0
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f001 fbeb 	bl	8008f0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007736:	e010      	b.n	800775a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007746:	d003      	beq.n	8007750 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fd57 	bl	80081fc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800774e:	e032      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007750:	2140      	movs	r1, #64	; 0x40
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f001 f81a 	bl	800878c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007758:	e02d      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
 800775a:	e02c      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d027      	beq.n	80077b6 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800776c:	2b00      	cmp	r3, #0
 800776e:	d022      	beq.n	80077b6 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d119      	bne.n	80077ae <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007788:	d015      	beq.n	80077b6 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007792:	d108      	bne.n	80077a6 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077a2:	605a      	str	r2, [r3, #4]
 80077a4:	e007      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fd28 	bl	80081fc <I2C_ITMasterSeqCplt>
 80077ac:	e003      	b.n	80077b6 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80077ae:	2140      	movs	r1, #64	; 0x40
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 ffeb 	bl	800878c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80077ca:	6979      	ldr	r1, [r7, #20]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fdaf 	bl	8008330 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <I2C_Slave_ISR_IT+0x24>
 8007804:	2302      	movs	r3, #2
 8007806:	e0e1      	b.n	80079cc <I2C_Slave_ISR_IT+0x1e8>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007824:	6939      	ldr	r1, [r7, #16]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fe4a 	bl	80084c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f003 0310 	and.w	r3, r3, #16
 8007832:	2b00      	cmp	r3, #0
 8007834:	d04b      	beq.n	80078ce <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800783c:	2b00      	cmp	r3, #0
 800783e:	d046      	beq.n	80078ce <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d128      	bne.n	800789c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b28      	cmp	r3, #40	; 0x28
 8007854:	d108      	bne.n	8007868 <I2C_Slave_ISR_IT+0x84>
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800785c:	d104      	bne.n	8007868 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800785e:	6939      	ldr	r1, [r7, #16]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 ff3f 	bl	80086e4 <I2C_ITListenCplt>
 8007866:	e031      	b.n	80078cc <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b29      	cmp	r3, #41	; 0x29
 8007872:	d10e      	bne.n	8007892 <I2C_Slave_ISR_IT+0xae>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800787a:	d00a      	beq.n	8007892 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2210      	movs	r2, #16
 8007882:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f001 f898 	bl	80089ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fcf3 	bl	8008276 <I2C_ITSlaveSeqCplt>
 8007890:	e01c      	b.n	80078cc <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2210      	movs	r2, #16
 8007898:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800789a:	e08f      	b.n	80079bc <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2210      	movs	r2, #16
 80078a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a8:	f043 0204 	orr.w	r2, r3, #4
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <I2C_Slave_ISR_IT+0xda>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078bc:	d17e      	bne.n	80079bc <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c2:	4619      	mov	r1, r3
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 ff61 	bl	800878c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80078ca:	e077      	b.n	80079bc <I2C_Slave_ISR_IT+0x1d8>
 80078cc:	e076      	b.n	80079bc <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d02f      	beq.n	8007938 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02a      	beq.n	8007938 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d018      	beq.n	800791e <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007914:	b29b      	uxth	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d14b      	bne.n	80079c0 <I2C_Slave_ISR_IT+0x1dc>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800792e:	d047      	beq.n	80079c0 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 fca0 	bl	8008276 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007936:	e043      	b.n	80079c0 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800794c:	6939      	ldr	r1, [r7, #16]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fbd0 	bl	80080f4 <I2C_ITAddrCplt>
 8007954:	e035      	b.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d030      	beq.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007966:	2b00      	cmp	r3, #0
 8007968:	d02b      	beq.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796e:	b29b      	uxth	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d018      	beq.n	80079a6 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80079a4:	e00d      	b.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079ac:	d002      	beq.n	80079b4 <I2C_Slave_ISR_IT+0x1d0>
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 fc5e 	bl	8008276 <I2C_ITSlaveSeqCplt>
 80079ba:	e002      	b.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80079bc:	bf00      	nop
 80079be:	e000      	b.n	80079c2 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80079c0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <I2C_Master_ISR_DMA+0x1a>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e0d9      	b.n	8007ba2 <I2C_Master_ISR_DMA+0x1ce>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d016      	beq.n	8007a2e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d011      	beq.n	8007a2e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	f043 0204 	orr.w	r2, r3, #4
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a1e:	2120      	movs	r1, #32
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f001 faa5 	bl	8008f70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 ffc7 	bl	80089ba <I2C_Flush_TXDR>
 8007a2c:	e0b4      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d071      	beq.n	8007b1c <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d06c      	beq.n	8007b1c <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a50:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d04e      	beq.n	8007afa <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a68:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2bff      	cmp	r3, #255	; 0xff
 8007a72:	d906      	bls.n	8007a82 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	22ff      	movs	r2, #255	; 0xff
 8007a78:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007a7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	e010      	b.n	8007aa4 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a94:	d003      	beq.n	8007a9e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e002      	b.n	8007aa4 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aa2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	8a79      	ldrh	r1, [r7, #18]
 8007aac:	2300      	movs	r3, #0
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f001 fa2a 	bl	8008f0c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b22      	cmp	r3, #34	; 0x22
 8007ad4:	d108      	bne.n	8007ae8 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ae4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007ae6:	e057      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007af8:	e04e      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b08:	d003      	beq.n	8007b12 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fb76 	bl	80081fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007b10:	e042      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007b12:	2140      	movs	r1, #64	; 0x40
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fe39 	bl	800878c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007b1a:	e03d      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d028      	beq.n	8007b78 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d023      	beq.n	8007b78 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d119      	bne.n	8007b6e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b48:	d025      	beq.n	8007b96 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b52:	d108      	bne.n	8007b66 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b62:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007b64:	e017      	b.n	8007b96 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fb48 	bl	80081fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007b6c:	e013      	b.n	8007b96 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007b6e:	2140      	movs	r1, #64	; 0x40
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 fe0b 	bl	800878c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007b76:	e00e      	b.n	8007b96 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fbce 	bl	8008330 <I2C_ITMasterCplt>
 8007b94:	e000      	b.n	8007b98 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8007b96:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007bb8:	4b8d      	ldr	r3, [pc, #564]	; (8007df0 <I2C_Mem_ISR_DMA+0x244>)
 8007bba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <I2C_Mem_ISR_DMA+0x1e>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e10e      	b.n	8007de8 <I2C_Mem_ISR_DMA+0x23c>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d016      	beq.n	8007c0a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d011      	beq.n	8007c0a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2210      	movs	r2, #16
 8007bec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf2:	f043 0204 	orr.w	r2, r3, #4
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007bfa:	2120      	movs	r1, #32
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f001 f9b7 	bl	8008f70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fed9 	bl	80089ba <I2C_Flush_TXDR>
 8007c08:	e0e9      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00e      	beq.n	8007c32 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2e:	651a      	str	r2, [r3, #80]	; 0x50
 8007c30:	e0d5      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d05f      	beq.n	8007cfc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d05a      	beq.n	8007cfc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c46:	2101      	movs	r1, #1
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f001 fa15 	bl	8009078 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007c4e:	2110      	movs	r1, #16
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f001 f98d 	bl	8008f70 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d048      	beq.n	8007cf2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2bff      	cmp	r3, #255	; 0xff
 8007c68:	d910      	bls.n	8007c8c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	22ff      	movs	r2, #255	; 0xff
 8007c6e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c74:	b299      	uxth	r1, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f001 f941 	bl	8008f0c <I2C_TransferConfig>
 8007c8a:	e011      	b.n	8007cb0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9a:	b299      	uxth	r1, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f001 f92e 	bl	8008f0c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b22      	cmp	r3, #34	; 0x22
 8007ccc:	d108      	bne.n	8007ce0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cdc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007cde:	e07e      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007cf0:	e075      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007cf2:	2140      	movs	r1, #64	; 0x40
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fd49 	bl	800878c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007cfa:	e070      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d05d      	beq.n	8007dc2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d058      	beq.n	8007dc2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007d10:	2101      	movs	r1, #1
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f001 f9b0 	bl	8009078 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007d18:	2110      	movs	r1, #16
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f001 f928 	bl	8008f70 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b22      	cmp	r3, #34	; 0x22
 8007d2a:	d101      	bne.n	8007d30 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8007d2c:	4b31      	ldr	r3, [pc, #196]	; (8007df4 <I2C_Mem_ISR_DMA+0x248>)
 8007d2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	2bff      	cmp	r3, #255	; 0xff
 8007d38:	d910      	bls.n	8007d5c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22ff      	movs	r2, #255	; 0xff
 8007d3e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d44:	b299      	uxth	r1, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f001 f8d9 	bl	8008f0c <I2C_TransferConfig>
 8007d5a:	e011      	b.n	8007d80 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6a:	b299      	uxth	r1, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f001 f8c6 	bl	8008f0c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b22      	cmp	r3, #34	; 0x22
 8007d9c:	d108      	bne.n	8007db0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dac:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dae:	e016      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dbe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dc0:	e00d      	b.n	8007dde <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 faa9 	bl	8008330 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	80002000 	.word	0x80002000
 8007df4:	80002400 	.word	0x80002400

08007df8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <I2C_Slave_ISR_DMA+0x24>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e0bf      	b.n	8007f9c <I2C_Slave_ISR_DMA+0x1a4>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fb40 	bl	80084c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 8095 	beq.w	8007f76 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 808f 	beq.w	8007f76 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d07d      	beq.n	8007f68 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00c      	beq.n	8007e8e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00c      	beq.n	8007eb0 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8007eac:	2301      	movs	r3, #1
 8007eae:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d128      	bne.n	8007f08 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b28      	cmp	r3, #40	; 0x28
 8007ec0:	d108      	bne.n	8007ed4 <I2C_Slave_ISR_DMA+0xdc>
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ec8:	d104      	bne.n	8007ed4 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fc09 	bl	80086e4 <I2C_ITListenCplt>
 8007ed2:	e048      	b.n	8007f66 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b29      	cmp	r3, #41	; 0x29
 8007ede:	d10e      	bne.n	8007efe <I2C_Slave_ISR_DMA+0x106>
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ee6:	d00a      	beq.n	8007efe <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2210      	movs	r2, #16
 8007eee:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fd62 	bl	80089ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f9bd 	bl	8008276 <I2C_ITSlaveSeqCplt>
 8007efc:	e033      	b.n	8007f66 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2210      	movs	r2, #16
 8007f04:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f06:	e034      	b.n	8007f72 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2210      	movs	r2, #16
 8007f0e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f14:	f043 0204 	orr.w	r2, r3, #4
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f22:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <I2C_Slave_ISR_DMA+0x13a>
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f30:	d11f      	bne.n	8007f72 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	2b21      	cmp	r3, #33	; 0x21
 8007f36:	d002      	beq.n	8007f3e <I2C_Slave_ISR_DMA+0x146>
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	2b29      	cmp	r3, #41	; 0x29
 8007f3c:	d103      	bne.n	8007f46 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2221      	movs	r2, #33	; 0x21
 8007f42:	631a      	str	r2, [r3, #48]	; 0x30
 8007f44:	e008      	b.n	8007f58 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b22      	cmp	r3, #34	; 0x22
 8007f4a:	d002      	beq.n	8007f52 <I2C_Slave_ISR_DMA+0x15a>
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f50:	d102      	bne.n	8007f58 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2222      	movs	r2, #34	; 0x22
 8007f56:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fc14 	bl	800878c <I2C_ITError>
      if (treatdmanack == 1U)
 8007f64:	e005      	b.n	8007f72 <I2C_Slave_ISR_DMA+0x17a>
 8007f66:	e004      	b.n	8007f72 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2210      	movs	r2, #16
 8007f6e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f70:	e00f      	b.n	8007f92 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8007f72:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f74:	e00d      	b.n	8007f92 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f8b1 	bl	80080f4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3720      	adds	r7, #32
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	4608      	mov	r0, r1
 8007fae:	4611      	mov	r1, r2
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	817b      	strh	r3, [r7, #10]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	813b      	strh	r3, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007fbe:	88fb      	ldrh	r3, [r7, #6]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	8979      	ldrh	r1, [r7, #10]
 8007fc4:	4b20      	ldr	r3, [pc, #128]	; (8008048 <I2C_RequestMemoryWrite+0xa4>)
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 ff9d 	bl	8008f0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	69b9      	ldr	r1, [r7, #24]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 fe2d 	bl	8008c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e02c      	b.n	8008040 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d105      	bne.n	8007ff8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fec:	893b      	ldrh	r3, [r7, #8]
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	629a      	str	r2, [r3, #40]	; 0x28
 8007ff6:	e015      	b.n	8008024 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ff8:	893b      	ldrh	r3, [r7, #8]
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fe13 	bl	8008c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e012      	b.n	8008040 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800801a:	893b      	ldrh	r3, [r7, #8]
 800801c:	b2da      	uxtb	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	2200      	movs	r2, #0
 800802c:	2180      	movs	r1, #128	; 0x80
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 fdb2 	bl	8008b98 <I2C_WaitOnFlagUntilTimeout>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	80002000 	.word	0x80002000

0800804c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af02      	add	r7, sp, #8
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	4608      	mov	r0, r1
 8008056:	4611      	mov	r1, r2
 8008058:	461a      	mov	r2, r3
 800805a:	4603      	mov	r3, r0
 800805c:	817b      	strh	r3, [r7, #10]
 800805e:	460b      	mov	r3, r1
 8008060:	813b      	strh	r3, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	b2da      	uxtb	r2, r3
 800806a:	8979      	ldrh	r1, [r7, #10]
 800806c:	4b20      	ldr	r3, [pc, #128]	; (80080f0 <I2C_RequestMemoryRead+0xa4>)
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2300      	movs	r3, #0
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 ff4a 	bl	8008f0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	69b9      	ldr	r1, [r7, #24]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fdda 	bl	8008c36 <I2C_WaitOnTXISFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e02c      	b.n	80080e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800808c:	88fb      	ldrh	r3, [r7, #6]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d105      	bne.n	800809e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008092:	893b      	ldrh	r3, [r7, #8]
 8008094:	b2da      	uxtb	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	629a      	str	r2, [r3, #40]	; 0x28
 800809c:	e015      	b.n	80080ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800809e:	893b      	ldrh	r3, [r7, #8]
 80080a0:	0a1b      	lsrs	r3, r3, #8
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	69b9      	ldr	r1, [r7, #24]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 fdc0 	bl	8008c36 <I2C_WaitOnTXISFlagUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e012      	b.n	80080e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080c0:	893b      	ldrh	r3, [r7, #8]
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2200      	movs	r2, #0
 80080d2:	2140      	movs	r1, #64	; 0x40
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 fd5f 	bl	8008b98 <I2C_WaitOnFlagUntilTimeout>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e000      	b.n	80080e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	80002000 	.word	0x80002000

080080f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008104:	b2db      	uxtb	r3, r3
 8008106:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800810a:	2b28      	cmp	r3, #40	; 0x28
 800810c:	d16a      	bne.n	80081e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	b2db      	uxtb	r3, r3
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	b29b      	uxth	r3, r3
 8008128:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800812c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	b29b      	uxth	r3, r3
 8008136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800813a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008148:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d138      	bne.n	80081c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008152:	897b      	ldrh	r3, [r7, #10]
 8008154:	09db      	lsrs	r3, r3, #7
 8008156:	b29a      	uxth	r2, r3
 8008158:	89bb      	ldrh	r3, [r7, #12]
 800815a:	4053      	eors	r3, r2
 800815c:	b29b      	uxth	r3, r3
 800815e:	f003 0306 	and.w	r3, r3, #6
 8008162:	2b00      	cmp	r3, #0
 8008164:	d11c      	bne.n	80081a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008166:	897b      	ldrh	r3, [r7, #10]
 8008168:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008178:	2b02      	cmp	r3, #2
 800817a:	d13b      	bne.n	80081f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2208      	movs	r2, #8
 8008188:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008192:	89ba      	ldrh	r2, [r7, #12]
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff f9bc 	bl	8007516 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800819e:	e029      	b.n	80081f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80081a0:	893b      	ldrh	r3, [r7, #8]
 80081a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 ff65 	bl	8009078 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081b6:	89ba      	ldrh	r2, [r7, #12]
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff f9aa 	bl	8007516 <HAL_I2C_AddrCallback>
}
 80081c2:	e017      	b.n	80081f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 ff55 	bl	8009078 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081d6:	89ba      	ldrh	r2, [r7, #12]
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff f99a 	bl	8007516 <HAL_I2C_AddrCallback>
}
 80081e2:	e007      	b.n	80081f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2208      	movs	r2, #8
 80081ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b21      	cmp	r3, #33	; 0x21
 8008216:	d115      	bne.n	8008244 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2220      	movs	r2, #32
 800821c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2211      	movs	r2, #17
 8008224:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800822c:	2101      	movs	r1, #1
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 ff22 	bl	8009078 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fb fc99 	bl	8003b74 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008242:	e014      	b.n	800826e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2212      	movs	r2, #18
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008258:	2102      	movs	r1, #2
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 ff0c 	bl	8009078 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7fb fc93 	bl	8003b94 <HAL_I2C_MasterRxCpltCallback>
}
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	e00c      	b.n	80082c4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d007      	beq.n	80082c4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082c2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b29      	cmp	r3, #41	; 0x29
 80082ce:	d112      	bne.n	80082f6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2228      	movs	r2, #40	; 0x28
 80082d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2221      	movs	r2, #33	; 0x21
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80082de:	2101      	movs	r1, #1
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fec9 	bl	8009078 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff f8fd 	bl	80074ee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082f4:	e017      	b.n	8008326 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008300:	d111      	bne.n	8008326 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2228      	movs	r2, #40	; 0x28
 8008306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2222      	movs	r2, #34	; 0x22
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008310:	2102      	movs	r1, #2
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 feb0 	bl	8009078 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff f8ee 	bl	8007502 <HAL_I2C_SlaveRxCpltCallback>
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2220      	movs	r2, #32
 8008344:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b21      	cmp	r3, #33	; 0x21
 8008350:	d107      	bne.n	8008362 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008352:	2101      	movs	r1, #1
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fe8f 	bl	8009078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2211      	movs	r2, #17
 800835e:	631a      	str	r2, [r3, #48]	; 0x30
 8008360:	e00c      	b.n	800837c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b22      	cmp	r3, #34	; 0x22
 800836c:	d106      	bne.n	800837c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800836e:	2102      	movs	r1, #2
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fe81 	bl	8009078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2212      	movs	r2, #18
 800837a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6859      	ldr	r1, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b4c      	ldr	r3, [pc, #304]	; (80084b8 <I2C_ITMasterCplt+0x188>)
 8008388:	400b      	ands	r3, r1
 800838a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a49      	ldr	r2, [pc, #292]	; (80084bc <I2C_ITMasterCplt+0x18c>)
 8008396:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f003 0310 	and.w	r3, r3, #16
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2210      	movs	r2, #16
 80083a8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ae:	f043 0204 	orr.w	r2, r3, #4
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b60      	cmp	r3, #96	; 0x60
 80083c0:	d10a      	bne.n	80083d8 <I2C_ITMasterCplt+0xa8>
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80083d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 faee 	bl	80089ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b60      	cmp	r3, #96	; 0x60
 80083ee:	d002      	beq.n	80083f6 <I2C_ITMasterCplt+0xc6>
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d006      	beq.n	8008404 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f9c5 	bl	800878c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008402:	e054      	b.n	80084ae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b21      	cmp	r3, #33	; 0x21
 800840e:	d124      	bne.n	800845a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d10b      	bne.n	8008442 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff f883 	bl	8007546 <HAL_I2C_MemTxCpltCallback>
}
 8008440:	e035      	b.n	80084ae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7fb fb8e 	bl	8003b74 <HAL_I2C_MasterTxCpltCallback>
}
 8008458:	e029      	b.n	80084ae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b22      	cmp	r3, #34	; 0x22
 8008464:	d123      	bne.n	80084ae <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	d10b      	bne.n	8008498 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff f862 	bl	800755a <HAL_I2C_MemRxCpltCallback>
}
 8008496:	e00a      	b.n	80084ae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7fb fb73 	bl	8003b94 <HAL_I2C_MasterRxCpltCallback>
}
 80084ae:	bf00      	nop
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	fe00e800 	.word	0xfe00e800
 80084bc:	ffff0000 	.word	0xffff0000

080084c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084dc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2220      	movs	r2, #32
 80084e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b21      	cmp	r3, #33	; 0x21
 80084ea:	d002      	beq.n	80084f2 <I2C_ITSlaveCplt+0x32>
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b29      	cmp	r3, #41	; 0x29
 80084f0:	d108      	bne.n	8008504 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80084f2:	f248 0101 	movw	r1, #32769	; 0x8001
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fdbe 	bl	8009078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2221      	movs	r2, #33	; 0x21
 8008500:	631a      	str	r2, [r3, #48]	; 0x30
 8008502:	e019      	b.n	8008538 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	2b22      	cmp	r3, #34	; 0x22
 8008508:	d002      	beq.n	8008510 <I2C_ITSlaveCplt+0x50>
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b2a      	cmp	r3, #42	; 0x2a
 800850e:	d108      	bne.n	8008522 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008510:	f248 0102 	movw	r1, #32770	; 0x8002
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fdaf 	bl	8009078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2222      	movs	r2, #34	; 0x22
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
 8008520:	e00a      	b.n	8008538 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	2b28      	cmp	r3, #40	; 0x28
 8008526:	d107      	bne.n	8008538 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008528:	f248 0103 	movw	r1, #32771	; 0x8003
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fda3 	bl	8009078 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008546:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6859      	ldr	r1, [r3, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b62      	ldr	r3, [pc, #392]	; (80086dc <I2C_ITSlaveCplt+0x21c>)
 8008554:	400b      	ands	r3, r1
 8008556:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fa2e 	bl	80089ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d013      	beq.n	8008590 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008576:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01f      	beq.n	80085c0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	b29a      	uxth	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800858e:	e017      	b.n	80085c0 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d012      	beq.n	80085c0 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d006      	beq.n	80085c0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d020      	beq.n	800860c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f023 0304 	bic.w	r3, r3, #4
 80085d0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00c      	beq.n	800860c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861a:	f043 0204 	orr.w	r2, r3, #4
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008634:	2b00      	cmp	r3, #0
 8008636:	d010      	beq.n	800865a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f8a4 	bl	800878c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b28      	cmp	r3, #40	; 0x28
 800864e:	d141      	bne.n	80086d4 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008650:	6979      	ldr	r1, [r7, #20]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f846 	bl	80086e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008658:	e03c      	b.n	80086d4 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008662:	d014      	beq.n	800868e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff fe06 	bl	8008276 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a1c      	ldr	r2, [pc, #112]	; (80086e0 <I2C_ITSlaveCplt+0x220>)
 800866e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fe ff53 	bl	8007532 <HAL_I2C_ListenCpltCallback>
}
 800868c:	e022      	b.n	80086d4 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b22      	cmp	r3, #34	; 0x22
 8008698:	d10e      	bne.n	80086b8 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fe ff26 	bl	8007502 <HAL_I2C_SlaveRxCpltCallback>
}
 80086b6:	e00d      	b.n	80086d4 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fe ff0d 	bl	80074ee <HAL_I2C_SlaveTxCpltCallback>
}
 80086d4:	bf00      	nop
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	fe00e800 	.word	0xfe00e800
 80086e0:	ffff0000 	.word	0xffff0000

080086e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a25      	ldr	r2, [pc, #148]	; (8008788 <I2C_ITListenCplt+0xa4>)
 80086f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	d022      	beq.n	8008760 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008736:	2b00      	cmp	r3, #0
 8008738:	d012      	beq.n	8008760 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873e:	3b01      	subs	r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874a:	b29b      	uxth	r3, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008758:	f043 0204 	orr.w	r2, r3, #4
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008760:	f248 0103 	movw	r1, #32771	; 0x8003
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fc87 	bl	8009078 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2210      	movs	r2, #16
 8008770:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7fe fed9 	bl	8007532 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	ffff0000 	.word	0xffff0000

0800878c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800879c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a6d      	ldr	r2, [pc, #436]	; (8008960 <I2C_ITError+0x1d4>)
 80087aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	431a      	orrs	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	2b28      	cmp	r3, #40	; 0x28
 80087c2:	d005      	beq.n	80087d0 <I2C_ITError+0x44>
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	2b29      	cmp	r3, #41	; 0x29
 80087c8:	d002      	beq.n	80087d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	2b2a      	cmp	r3, #42	; 0x2a
 80087ce:	d10b      	bne.n	80087e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087d0:	2103      	movs	r1, #3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fc50 	bl	8009078 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2228      	movs	r2, #40	; 0x28
 80087dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a60      	ldr	r2, [pc, #384]	; (8008964 <I2C_ITError+0x1d8>)
 80087e4:	635a      	str	r2, [r3, #52]	; 0x34
 80087e6:	e030      	b.n	800884a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc43 	bl	8009078 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f8e1 	bl	80089ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b60      	cmp	r3, #96	; 0x60
 8008802:	d01f      	beq.n	8008844 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b20      	cmp	r3, #32
 8008818:	d114      	bne.n	8008844 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b10      	cmp	r3, #16
 8008826:	d109      	bne.n	800883c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2210      	movs	r2, #16
 800882e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008834:	f043 0204 	orr.w	r2, r3, #4
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2220      	movs	r2, #32
 8008842:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	2b00      	cmp	r3, #0
 8008856:	d039      	beq.n	80088cc <I2C_ITError+0x140>
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b11      	cmp	r3, #17
 800885c:	d002      	beq.n	8008864 <I2C_ITError+0xd8>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b21      	cmp	r3, #33	; 0x21
 8008862:	d133      	bne.n	80088cc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800886e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008872:	d107      	bne.n	8008884 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008882:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	4618      	mov	r0, r3
 800888a:	f7fd feed 	bl	8006668 <HAL_DMA_GetState>
 800888e:	4603      	mov	r3, r0
 8008890:	2b01      	cmp	r3, #1
 8008892:	d017      	beq.n	80088c4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	4a33      	ldr	r2, [pc, #204]	; (8008968 <I2C_ITError+0x1dc>)
 800889a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fd fded 	bl	8006488 <HAL_DMA_Abort_IT>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d04d      	beq.n	8008950 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088be:	4610      	mov	r0, r2
 80088c0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088c2:	e045      	b.n	8008950 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f851 	bl	800896c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088ca:	e041      	b.n	8008950 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d039      	beq.n	8008948 <I2C_ITError+0x1bc>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b12      	cmp	r3, #18
 80088d8:	d002      	beq.n	80088e0 <I2C_ITError+0x154>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b22      	cmp	r3, #34	; 0x22
 80088de:	d133      	bne.n	8008948 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ee:	d107      	bne.n	8008900 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008904:	4618      	mov	r0, r3
 8008906:	f7fd feaf 	bl	8006668 <HAL_DMA_GetState>
 800890a:	4603      	mov	r3, r0
 800890c:	2b01      	cmp	r3, #1
 800890e:	d017      	beq.n	8008940 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008914:	4a14      	ldr	r2, [pc, #80]	; (8008968 <I2C_ITError+0x1dc>)
 8008916:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008924:	4618      	mov	r0, r3
 8008926:	f7fd fdaf 	bl	8006488 <HAL_DMA_Abort_IT>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d011      	beq.n	8008954 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800893a:	4610      	mov	r0, r2
 800893c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800893e:	e009      	b.n	8008954 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f813 	bl	800896c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008946:	e005      	b.n	8008954 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f80f 	bl	800896c <I2C_TreatErrorCallback>
  }
}
 800894e:	e002      	b.n	8008956 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008950:	bf00      	nop
 8008952:	e000      	b.n	8008956 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008954:	bf00      	nop
}
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	ffff0000 	.word	0xffff0000
 8008964:	080077e5 	.word	0x080077e5
 8008968:	08008b5d 	.word	0x08008b5d

0800896c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b60      	cmp	r3, #96	; 0x60
 800897e:	d10e      	bne.n	800899e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2220      	movs	r2, #32
 8008984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7fe fdf3 	bl	8007582 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800899c:	e009      	b.n	80089b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7fe fdde 	bl	800756e <HAL_I2C_ErrorCallback>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d103      	bne.n	80089d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d007      	beq.n	80089f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699a      	ldr	r2, [r3, #24]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f042 0201 	orr.w	r2, r2, #1
 80089f4:	619a      	str	r2, [r3, #24]
  }
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a1e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d104      	bne.n	8008a34 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008a2a:	2120      	movs	r1, #32
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 fa9f 	bl	8008f70 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008a32:	e02d      	b.n	8008a90 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008a3c:	441a      	add	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	2bff      	cmp	r3, #255	; 0xff
 8008a4a:	d903      	bls.n	8008a54 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	22ff      	movs	r2, #255	; 0xff
 8008a50:	851a      	strh	r2, [r3, #40]	; 0x28
 8008a52:	e004      	b.n	8008a5e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	4619      	mov	r1, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3328      	adds	r3, #40	; 0x28
 8008a6e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008a74:	f7fd fc6a 	bl	800634c <HAL_DMA_Start_IT>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008a7e:	2110      	movs	r1, #16
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7ff fe83 	bl	800878c <I2C_ITError>
}
 8008a86:	e003      	b.n	8008a90 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008a88:	2140      	movs	r1, #64	; 0x40
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 fa70 	bl	8008f70 <I2C_Enable_IRQ>
}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ab4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d104      	bne.n	8008aca <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008ac0:	2120      	movs	r1, #32
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 fa54 	bl	8008f70 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008ac8:	e02d      	b.n	8008b26 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008ad2:	441a      	add	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2bff      	cmp	r3, #255	; 0xff
 8008ae0:	d903      	bls.n	8008aea <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	22ff      	movs	r2, #255	; 0xff
 8008ae6:	851a      	strh	r2, [r3, #40]	; 0x28
 8008ae8:	e004      	b.n	8008af4 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3324      	adds	r3, #36	; 0x24
 8008afe:	4619      	mov	r1, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008b0a:	f7fd fc1f 	bl	800634c <HAL_DMA_Start_IT>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008b14:	2110      	movs	r1, #16
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fe38 	bl	800878c <I2C_ITError>
}
 8008b1c:	e003      	b.n	8008b26 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008b1e:	2140      	movs	r1, #64	; 0x40
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 fa25 	bl	8008f70 <I2C_Enable_IRQ>
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b4a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008b4c:	2110      	movs	r1, #16
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7ff fe1c 	bl	800878c <I2C_ITError>
}
 8008b54:	bf00      	nop
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	2200      	movs	r2, #0
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b86:	2200      	movs	r2, #0
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7ff feee 	bl	800896c <I2C_TreatErrorCallback>
}
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ba8:	e031      	b.n	8008c0e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb0:	d02d      	beq.n	8008c0e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb2:	f7fb fd31 	bl	8004618 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d302      	bcc.n	8008bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d122      	bne.n	8008c0e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2301      	moveq	r3, #1
 8008bda:	2300      	movne	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	461a      	mov	r2, r3
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d113      	bne.n	8008c0e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bea:	f043 0220 	orr.w	r2, r3, #32
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e00f      	b.n	8008c2e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	4013      	ands	r3, r2
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	bf0c      	ite	eq
 8008c1e:	2301      	moveq	r3, #1
 8008c20:	2300      	movne	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d0be      	beq.n	8008baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c42:	e033      	b.n	8008cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 f87f 	bl	8008d4c <I2C_IsErrorOccurred>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e031      	b.n	8008cbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5e:	d025      	beq.n	8008cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c60:	f7fb fcda 	bl	8004618 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d302      	bcc.n	8008c76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d11a      	bne.n	8008cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d013      	beq.n	8008cac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c88:	f043 0220 	orr.w	r2, r3, #32
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e007      	b.n	8008cbc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d1c4      	bne.n	8008c44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cd0:	e02f      	b.n	8008d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f838 	bl	8008d4c <I2C_IsErrorOccurred>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e02d      	b.n	8008d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ce6:	f7fb fc97 	bl	8004618 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d302      	bcc.n	8008cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d11a      	bne.n	8008d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	d013      	beq.n	8008d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0e:	f043 0220 	orr.w	r2, r3, #32
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e007      	b.n	8008d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d1c8      	bne.n	8008cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08a      	sub	sp, #40	; 0x28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f003 0310 	and.w	r3, r3, #16
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d068      	beq.n	8008e4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2210      	movs	r2, #16
 8008d7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d80:	e049      	b.n	8008e16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d88:	d045      	beq.n	8008e16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d8a:	f7fb fc45 	bl	8004618 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d302      	bcc.n	8008da0 <I2C_IsErrorOccurred+0x54>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d13a      	bne.n	8008e16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008daa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008db2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc2:	d121      	bne.n	8008e08 <I2C_IsErrorOccurred+0xbc>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dca:	d01d      	beq.n	8008e08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008dcc:	7cfb      	ldrb	r3, [r7, #19]
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d01a      	beq.n	8008e08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008de0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008de2:	f7fb fc19 	bl	8004618 <HAL_GetTick>
 8008de6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008de8:	e00e      	b.n	8008e08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008dea:	f7fb fc15 	bl	8004618 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b19      	cmp	r3, #25
 8008df6:	d907      	bls.n	8008e08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	f043 0320 	orr.w	r3, r3, #32
 8008dfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008e06:	e006      	b.n	8008e16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	f003 0320 	and.w	r3, r3, #32
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d1e9      	bne.n	8008dea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	f003 0320 	and.w	r3, r3, #32
 8008e20:	2b20      	cmp	r3, #32
 8008e22:	d003      	beq.n	8008e2c <I2C_IsErrorOccurred+0xe0>
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0aa      	beq.n	8008d82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	f043 0304 	orr.w	r3, r3, #4
 8008e42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	f043 0301 	orr.w	r3, r3, #1
 8008e62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00b      	beq.n	8008e96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	f043 0308 	orr.w	r3, r3, #8
 8008e84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	f043 0302 	orr.w	r3, r3, #2
 8008ea6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d01c      	beq.n	8008efa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff fd7a 	bl	80089ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6859      	ldr	r1, [r3, #4]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <I2C_IsErrorOccurred+0x1bc>)
 8008ed2:	400b      	ands	r3, r1
 8008ed4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	431a      	orrs	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3728      	adds	r7, #40	; 0x28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	fe00e800 	.word	0xfe00e800

08008f0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	817b      	strh	r3, [r7, #10]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f1e:	897b      	ldrh	r3, [r7, #10]
 8008f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f24:	7a7b      	ldrb	r3, [r7, #9]
 8008f26:	041b      	lsls	r3, r3, #16
 8008f28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	0d5b      	lsrs	r3, r3, #21
 8008f46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008f4a:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <I2C_TransferConfig+0x60>)
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	43db      	mvns	r3, r3
 8008f50:	ea02 0103 	and.w	r1, r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f5e:	bf00      	nop
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	03ff63ff 	.word	0x03ff63ff

08008f70 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f84:	4a39      	ldr	r2, [pc, #228]	; (800906c <I2C_Enable_IRQ+0xfc>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d032      	beq.n	8008ff0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008f8e:	4a38      	ldr	r2, [pc, #224]	; (8009070 <I2C_Enable_IRQ+0x100>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d02d      	beq.n	8008ff0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008f98:	4a36      	ldr	r2, [pc, #216]	; (8009074 <I2C_Enable_IRQ+0x104>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d028      	beq.n	8008ff0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da03      	bge.n	8008fae <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008fac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008fae:	887b      	ldrh	r3, [r7, #2]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d003      	beq.n	8008fc0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008fbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008fc0:	887b      	ldrh	r3, [r7, #2]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008fd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008fd2:	887b      	ldrh	r3, [r7, #2]
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d103      	bne.n	8008fe0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008fde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fe0:	887b      	ldrh	r3, [r7, #2]
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	d133      	bne.n	800904e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f043 0320 	orr.w	r3, r3, #32
 8008fec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fee:	e02e      	b.n	800904e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da03      	bge.n	8009000 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008ffe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009000:	887b      	ldrh	r3, [r7, #2]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009010:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009012:	887b      	ldrh	r3, [r7, #2]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009022:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009024:	887b      	ldrh	r3, [r7, #2]
 8009026:	2b10      	cmp	r3, #16
 8009028:	d103      	bne.n	8009032 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009030:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009032:	887b      	ldrh	r3, [r7, #2]
 8009034:	2b20      	cmp	r3, #32
 8009036:	d103      	bne.n	8009040 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800903e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009040:	887b      	ldrh	r3, [r7, #2]
 8009042:	2b40      	cmp	r3, #64	; 0x40
 8009044:	d103      	bne.n	800904e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6819      	ldr	r1, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	430a      	orrs	r2, r1
 800905c:	601a      	str	r2, [r3, #0]
}
 800905e:	bf00      	nop
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	080079d5 	.word	0x080079d5
 8009070:	08007df9 	.word	0x08007df9
 8009074:	08007bad 	.word	0x08007bad

08009078 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009088:	887b      	ldrh	r3, [r7, #2]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00f      	beq.n	80090b2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009098:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090a6:	2b28      	cmp	r3, #40	; 0x28
 80090a8:	d003      	beq.n	80090b2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80090b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80090b2:	887b      	ldrh	r3, [r7, #2]
 80090b4:	f003 0302 	and.w	r3, r3, #2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00f      	beq.n	80090dc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80090c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090d0:	2b28      	cmp	r3, #40	; 0x28
 80090d2:	d003      	beq.n	80090dc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80090da:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80090dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da03      	bge.n	80090ec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80090ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80090ec:	887b      	ldrh	r3, [r7, #2]
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	d103      	bne.n	80090fa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80090f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80090fa:	887b      	ldrh	r3, [r7, #2]
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	d103      	bne.n	8009108 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f043 0320 	orr.w	r3, r3, #32
 8009106:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009108:	887b      	ldrh	r3, [r7, #2]
 800910a:	2b40      	cmp	r3, #64	; 0x40
 800910c:	d103      	bne.n	8009116 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009114:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6819      	ldr	r1, [r3, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	43da      	mvns	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	400a      	ands	r2, r1
 8009126:	601a      	str	r2, [r3, #0]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b20      	cmp	r3, #32
 8009148:	d138      	bne.n	80091bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009154:	2302      	movs	r3, #2
 8009156:	e032      	b.n	80091be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2224      	movs	r2, #36	; 0x24
 8009164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0201 	bic.w	r2, r2, #1
 8009176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6819      	ldr	r1, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	e000      	b.n	80091be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091bc:	2302      	movs	r3, #2
  }
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b20      	cmp	r3, #32
 80091de:	d139      	bne.n	8009254 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e033      	b.n	8009256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2224      	movs	r2, #36	; 0x24
 80091fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0201 	bic.w	r2, r2, #1
 800920c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800921c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0201 	orr.w	r2, r2, #1
 800923e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2220      	movs	r2, #32
 8009244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	e000      	b.n	8009256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009254:	2302      	movs	r3, #2
  }
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
	...

08009264 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009268:	4b04      	ldr	r3, [pc, #16]	; (800927c <HAL_PWREx_GetVoltageRange+0x18>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009270:	4618      	mov	r0, r3
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	40007000 	.word	0x40007000

08009280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800928e:	d130      	bne.n	80092f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009290:	4b23      	ldr	r3, [pc, #140]	; (8009320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800929c:	d038      	beq.n	8009310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800929e:	4b20      	ldr	r3, [pc, #128]	; (8009320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80092a6:	4a1e      	ldr	r2, [pc, #120]	; (8009320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80092ae:	4b1d      	ldr	r3, [pc, #116]	; (8009324 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2232      	movs	r2, #50	; 0x32
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
 80092b8:	4a1b      	ldr	r2, [pc, #108]	; (8009328 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80092ba:	fba2 2303 	umull	r2, r3, r2, r3
 80092be:	0c9b      	lsrs	r3, r3, #18
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092c4:	e002      	b.n	80092cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092cc:	4b14      	ldr	r3, [pc, #80]	; (8009320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d8:	d102      	bne.n	80092e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1f2      	bne.n	80092c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80092e0:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ec:	d110      	bne.n	8009310 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e00f      	b.n	8009312 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80092f2:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092fe:	d007      	beq.n	8009310 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009308:	4a05      	ldr	r2, [pc, #20]	; (8009320 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800930a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800930e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	40007000 	.word	0x40007000
 8009324:	2000035c 	.word	0x2000035c
 8009328:	431bde83 	.word	0x431bde83

0800932c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f000 bc08 	b.w	8009b50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009340:	4b96      	ldr	r3, [pc, #600]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f003 030c 	and.w	r3, r3, #12
 8009348:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800934a:	4b94      	ldr	r3, [pc, #592]	; (800959c <HAL_RCC_OscConfig+0x270>)
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0310 	and.w	r3, r3, #16
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80e4 	beq.w	800952a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d007      	beq.n	8009378 <HAL_RCC_OscConfig+0x4c>
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b0c      	cmp	r3, #12
 800936c:	f040 808b 	bne.w	8009486 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2b01      	cmp	r3, #1
 8009374:	f040 8087 	bne.w	8009486 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009378:	4b88      	ldr	r3, [pc, #544]	; (800959c <HAL_RCC_OscConfig+0x270>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d005      	beq.n	8009390 <HAL_RCC_OscConfig+0x64>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e3df      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a1a      	ldr	r2, [r3, #32]
 8009394:	4b81      	ldr	r3, [pc, #516]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <HAL_RCC_OscConfig+0x7e>
 80093a0:	4b7e      	ldr	r3, [pc, #504]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093a8:	e005      	b.n	80093b6 <HAL_RCC_OscConfig+0x8a>
 80093aa:	4b7c      	ldr	r3, [pc, #496]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80093ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093b0:	091b      	lsrs	r3, r3, #4
 80093b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d223      	bcs.n	8009402 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fd92 	bl	8009ee8 <RCC_SetFlashLatencyFromMSIRange>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e3c0      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093ce:	4b73      	ldr	r3, [pc, #460]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a72      	ldr	r2, [pc, #456]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80093d4:	f043 0308 	orr.w	r3, r3, #8
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	4b70      	ldr	r3, [pc, #448]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	496d      	ldr	r1, [pc, #436]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80093ec:	4b6b      	ldr	r3, [pc, #428]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	4968      	ldr	r1, [pc, #416]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	604b      	str	r3, [r1, #4]
 8009400:	e025      	b.n	800944e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009402:	4b66      	ldr	r3, [pc, #408]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a65      	ldr	r2, [pc, #404]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009408:	f043 0308 	orr.w	r3, r3, #8
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	4b63      	ldr	r3, [pc, #396]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	4960      	ldr	r1, [pc, #384]	; (800959c <HAL_RCC_OscConfig+0x270>)
 800941c:	4313      	orrs	r3, r2
 800941e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009420:	4b5e      	ldr	r3, [pc, #376]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	021b      	lsls	r3, r3, #8
 800942e:	495b      	ldr	r1, [pc, #364]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009430:	4313      	orrs	r3, r2
 8009432:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fd52 	bl	8009ee8 <RCC_SetFlashLatencyFromMSIRange>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e380      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800944e:	f000 fc87 	bl	8009d60 <HAL_RCC_GetSysClockFreq>
 8009452:	4602      	mov	r2, r0
 8009454:	4b51      	ldr	r3, [pc, #324]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	091b      	lsrs	r3, r3, #4
 800945a:	f003 030f 	and.w	r3, r3, #15
 800945e:	4950      	ldr	r1, [pc, #320]	; (80095a0 <HAL_RCC_OscConfig+0x274>)
 8009460:	5ccb      	ldrb	r3, [r1, r3]
 8009462:	f003 031f 	and.w	r3, r3, #31
 8009466:	fa22 f303 	lsr.w	r3, r2, r3
 800946a:	4a4e      	ldr	r2, [pc, #312]	; (80095a4 <HAL_RCC_OscConfig+0x278>)
 800946c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800946e:	4b4e      	ldr	r3, [pc, #312]	; (80095a8 <HAL_RCC_OscConfig+0x27c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4618      	mov	r0, r3
 8009474:	f7fb f880 	bl	8004578 <HAL_InitTick>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d052      	beq.n	8009528 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	e364      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d032      	beq.n	80094f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800948e:	4b43      	ldr	r3, [pc, #268]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a42      	ldr	r2, [pc, #264]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009494:	f043 0301 	orr.w	r3, r3, #1
 8009498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800949a:	f7fb f8bd 	bl	8004618 <HAL_GetTick>
 800949e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80094a0:	e008      	b.n	80094b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80094a2:	f7fb f8b9 	bl	8004618 <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d901      	bls.n	80094b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e34d      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80094b4:	4b39      	ldr	r3, [pc, #228]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d0f0      	beq.n	80094a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80094c0:	4b36      	ldr	r3, [pc, #216]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a35      	ldr	r2, [pc, #212]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094c6:	f043 0308 	orr.w	r3, r3, #8
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	4b33      	ldr	r3, [pc, #204]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	4930      	ldr	r1, [pc, #192]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094da:	4313      	orrs	r3, r2
 80094dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80094de:	4b2f      	ldr	r3, [pc, #188]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	021b      	lsls	r3, r3, #8
 80094ec:	492b      	ldr	r1, [pc, #172]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	604b      	str	r3, [r1, #4]
 80094f2:	e01a      	b.n	800952a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80094f4:	4b29      	ldr	r3, [pc, #164]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a28      	ldr	r2, [pc, #160]	; (800959c <HAL_RCC_OscConfig+0x270>)
 80094fa:	f023 0301 	bic.w	r3, r3, #1
 80094fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009500:	f7fb f88a 	bl	8004618 <HAL_GetTick>
 8009504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009506:	e008      	b.n	800951a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009508:	f7fb f886 	bl	8004618 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b02      	cmp	r3, #2
 8009514:	d901      	bls.n	800951a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e31a      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800951a:	4b20      	ldr	r3, [pc, #128]	; (800959c <HAL_RCC_OscConfig+0x270>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1f0      	bne.n	8009508 <HAL_RCC_OscConfig+0x1dc>
 8009526:	e000      	b.n	800952a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	d073      	beq.n	800961e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	2b08      	cmp	r3, #8
 800953a:	d005      	beq.n	8009548 <HAL_RCC_OscConfig+0x21c>
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	2b0c      	cmp	r3, #12
 8009540:	d10e      	bne.n	8009560 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b03      	cmp	r3, #3
 8009546:	d10b      	bne.n	8009560 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009548:	4b14      	ldr	r3, [pc, #80]	; (800959c <HAL_RCC_OscConfig+0x270>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d063      	beq.n	800961c <HAL_RCC_OscConfig+0x2f0>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d15f      	bne.n	800961c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e2f7      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009568:	d106      	bne.n	8009578 <HAL_RCC_OscConfig+0x24c>
 800956a:	4b0c      	ldr	r3, [pc, #48]	; (800959c <HAL_RCC_OscConfig+0x270>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a0b      	ldr	r2, [pc, #44]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	e025      	b.n	80095c4 <HAL_RCC_OscConfig+0x298>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009580:	d114      	bne.n	80095ac <HAL_RCC_OscConfig+0x280>
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a05      	ldr	r2, [pc, #20]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	4b03      	ldr	r3, [pc, #12]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a02      	ldr	r2, [pc, #8]	; (800959c <HAL_RCC_OscConfig+0x270>)
 8009594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	e013      	b.n	80095c4 <HAL_RCC_OscConfig+0x298>
 800959c:	40021000 	.word	0x40021000
 80095a0:	0800c538 	.word	0x0800c538
 80095a4:	2000035c 	.word	0x2000035c
 80095a8:	20000360 	.word	0x20000360
 80095ac:	4ba0      	ldr	r3, [pc, #640]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a9f      	ldr	r2, [pc, #636]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80095b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	4b9d      	ldr	r3, [pc, #628]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a9c      	ldr	r2, [pc, #624]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80095be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d013      	beq.n	80095f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095cc:	f7fb f824 	bl	8004618 <HAL_GetTick>
 80095d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095d2:	e008      	b.n	80095e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095d4:	f7fb f820 	bl	8004618 <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	2b64      	cmp	r3, #100	; 0x64
 80095e0:	d901      	bls.n	80095e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e2b4      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095e6:	4b92      	ldr	r3, [pc, #584]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0f0      	beq.n	80095d4 <HAL_RCC_OscConfig+0x2a8>
 80095f2:	e014      	b.n	800961e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f4:	f7fb f810 	bl	8004618 <HAL_GetTick>
 80095f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80095fa:	e008      	b.n	800960e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095fc:	f7fb f80c 	bl	8004618 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	2b64      	cmp	r3, #100	; 0x64
 8009608:	d901      	bls.n	800960e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e2a0      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800960e:	4b88      	ldr	r3, [pc, #544]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1f0      	bne.n	80095fc <HAL_RCC_OscConfig+0x2d0>
 800961a:	e000      	b.n	800961e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800961c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d060      	beq.n	80096ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b04      	cmp	r3, #4
 800962e:	d005      	beq.n	800963c <HAL_RCC_OscConfig+0x310>
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	2b0c      	cmp	r3, #12
 8009634:	d119      	bne.n	800966a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b02      	cmp	r3, #2
 800963a:	d116      	bne.n	800966a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800963c:	4b7c      	ldr	r3, [pc, #496]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <HAL_RCC_OscConfig+0x328>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d101      	bne.n	8009654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e27d      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009654:	4b76      	ldr	r3, [pc, #472]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	061b      	lsls	r3, r3, #24
 8009662:	4973      	ldr	r1, [pc, #460]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009664:	4313      	orrs	r3, r2
 8009666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009668:	e040      	b.n	80096ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d023      	beq.n	80096ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009672:	4b6f      	ldr	r3, [pc, #444]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a6e      	ldr	r2, [pc, #440]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800967c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800967e:	f7fa ffcb 	bl	8004618 <HAL_GetTick>
 8009682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009684:	e008      	b.n	8009698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009686:	f7fa ffc7 	bl	8004618 <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b02      	cmp	r3, #2
 8009692:	d901      	bls.n	8009698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e25b      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009698:	4b65      	ldr	r3, [pc, #404]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0f0      	beq.n	8009686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096a4:	4b62      	ldr	r3, [pc, #392]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	061b      	lsls	r3, r3, #24
 80096b2:	495f      	ldr	r1, [pc, #380]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	604b      	str	r3, [r1, #4]
 80096b8:	e018      	b.n	80096ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096ba:	4b5d      	ldr	r3, [pc, #372]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a5c      	ldr	r2, [pc, #368]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80096c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c6:	f7fa ffa7 	bl	8004618 <HAL_GetTick>
 80096ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80096cc:	e008      	b.n	80096e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096ce:	f7fa ffa3 	bl	8004618 <HAL_GetTick>
 80096d2:	4602      	mov	r2, r0
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d901      	bls.n	80096e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e237      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80096e0:	4b53      	ldr	r3, [pc, #332]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1f0      	bne.n	80096ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d03c      	beq.n	8009772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01c      	beq.n	800973a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009700:	4b4b      	ldr	r3, [pc, #300]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009706:	4a4a      	ldr	r2, [pc, #296]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009710:	f7fa ff82 	bl	8004618 <HAL_GetTick>
 8009714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009716:	e008      	b.n	800972a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009718:	f7fa ff7e 	bl	8004618 <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	2b02      	cmp	r3, #2
 8009724:	d901      	bls.n	800972a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e212      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800972a:	4b41      	ldr	r3, [pc, #260]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 800972c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0ef      	beq.n	8009718 <HAL_RCC_OscConfig+0x3ec>
 8009738:	e01b      	b.n	8009772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800973a:	4b3d      	ldr	r3, [pc, #244]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 800973c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009740:	4a3b      	ldr	r2, [pc, #236]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009742:	f023 0301 	bic.w	r3, r3, #1
 8009746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800974a:	f7fa ff65 	bl	8004618 <HAL_GetTick>
 800974e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009750:	e008      	b.n	8009764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009752:	f7fa ff61 	bl	8004618 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d901      	bls.n	8009764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e1f5      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009764:	4b32      	ldr	r3, [pc, #200]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1ef      	bne.n	8009752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 80a6 	beq.w	80098cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009780:	2300      	movs	r3, #0
 8009782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009784:	4b2a      	ldr	r3, [pc, #168]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10d      	bne.n	80097ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009790:	4b27      	ldr	r3, [pc, #156]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009794:	4a26      	ldr	r2, [pc, #152]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800979a:	6593      	str	r3, [r2, #88]	; 0x58
 800979c:	4b24      	ldr	r3, [pc, #144]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 800979e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097a4:	60bb      	str	r3, [r7, #8]
 80097a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097a8:	2301      	movs	r3, #1
 80097aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097ac:	4b21      	ldr	r3, [pc, #132]	; (8009834 <HAL_RCC_OscConfig+0x508>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d118      	bne.n	80097ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097b8:	4b1e      	ldr	r3, [pc, #120]	; (8009834 <HAL_RCC_OscConfig+0x508>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a1d      	ldr	r2, [pc, #116]	; (8009834 <HAL_RCC_OscConfig+0x508>)
 80097be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097c4:	f7fa ff28 	bl	8004618 <HAL_GetTick>
 80097c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097ca:	e008      	b.n	80097de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097cc:	f7fa ff24 	bl	8004618 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d901      	bls.n	80097de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e1b8      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80097de:	4b15      	ldr	r3, [pc, #84]	; (8009834 <HAL_RCC_OscConfig+0x508>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0f0      	beq.n	80097cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d108      	bne.n	8009804 <HAL_RCC_OscConfig+0x4d8>
 80097f2:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80097f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f8:	4a0d      	ldr	r2, [pc, #52]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 80097fa:	f043 0301 	orr.w	r3, r3, #1
 80097fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009802:	e029      	b.n	8009858 <HAL_RCC_OscConfig+0x52c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	2b05      	cmp	r3, #5
 800980a:	d115      	bne.n	8009838 <HAL_RCC_OscConfig+0x50c>
 800980c:	4b08      	ldr	r3, [pc, #32]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 800980e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009812:	4a07      	ldr	r2, [pc, #28]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009814:	f043 0304 	orr.w	r3, r3, #4
 8009818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800981c:	4b04      	ldr	r3, [pc, #16]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 800981e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009822:	4a03      	ldr	r2, [pc, #12]	; (8009830 <HAL_RCC_OscConfig+0x504>)
 8009824:	f043 0301 	orr.w	r3, r3, #1
 8009828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800982c:	e014      	b.n	8009858 <HAL_RCC_OscConfig+0x52c>
 800982e:	bf00      	nop
 8009830:	40021000 	.word	0x40021000
 8009834:	40007000 	.word	0x40007000
 8009838:	4b9d      	ldr	r3, [pc, #628]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 800983a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983e:	4a9c      	ldr	r2, [pc, #624]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009840:	f023 0301 	bic.w	r3, r3, #1
 8009844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009848:	4b99      	ldr	r3, [pc, #612]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 800984a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984e:	4a98      	ldr	r2, [pc, #608]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009850:	f023 0304 	bic.w	r3, r3, #4
 8009854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d016      	beq.n	800988e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009860:	f7fa feda 	bl	8004618 <HAL_GetTick>
 8009864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009866:	e00a      	b.n	800987e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009868:	f7fa fed6 	bl	8004618 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	f241 3288 	movw	r2, #5000	; 0x1388
 8009876:	4293      	cmp	r3, r2
 8009878:	d901      	bls.n	800987e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e168      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800987e:	4b8c      	ldr	r3, [pc, #560]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0ed      	beq.n	8009868 <HAL_RCC_OscConfig+0x53c>
 800988c:	e015      	b.n	80098ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800988e:	f7fa fec3 	bl	8004618 <HAL_GetTick>
 8009892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009894:	e00a      	b.n	80098ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009896:	f7fa febf 	bl	8004618 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e151      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80098ac:	4b80      	ldr	r3, [pc, #512]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80098ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1ed      	bne.n	8009896 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098ba:	7ffb      	ldrb	r3, [r7, #31]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d105      	bne.n	80098cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098c0:	4b7b      	ldr	r3, [pc, #492]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80098c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c4:	4a7a      	ldr	r2, [pc, #488]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80098c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0320 	and.w	r3, r3, #32
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d03c      	beq.n	8009952 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01c      	beq.n	800991a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80098e0:	4b73      	ldr	r3, [pc, #460]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80098e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098e6:	4a72      	ldr	r2, [pc, #456]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80098e8:	f043 0301 	orr.w	r3, r3, #1
 80098ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098f0:	f7fa fe92 	bl	8004618 <HAL_GetTick>
 80098f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80098f6:	e008      	b.n	800990a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098f8:	f7fa fe8e 	bl	8004618 <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b02      	cmp	r3, #2
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e122      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800990a:	4b69      	ldr	r3, [pc, #420]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 800990c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d0ef      	beq.n	80098f8 <HAL_RCC_OscConfig+0x5cc>
 8009918:	e01b      	b.n	8009952 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800991a:	4b65      	ldr	r3, [pc, #404]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 800991c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009920:	4a63      	ldr	r2, [pc, #396]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009922:	f023 0301 	bic.w	r3, r3, #1
 8009926:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800992a:	f7fa fe75 	bl	8004618 <HAL_GetTick>
 800992e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009930:	e008      	b.n	8009944 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009932:	f7fa fe71 	bl	8004618 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	2b02      	cmp	r3, #2
 800993e:	d901      	bls.n	8009944 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e105      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009944:	4b5a      	ldr	r3, [pc, #360]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1ef      	bne.n	8009932 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80f9 	beq.w	8009b4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009960:	2b02      	cmp	r3, #2
 8009962:	f040 80cf 	bne.w	8009b04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009966:	4b52      	ldr	r3, [pc, #328]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	f003 0203 	and.w	r2, r3, #3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	429a      	cmp	r2, r3
 8009978:	d12c      	bne.n	80099d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009984:	3b01      	subs	r3, #1
 8009986:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009988:	429a      	cmp	r2, r3
 800998a:	d123      	bne.n	80099d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009996:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009998:	429a      	cmp	r2, r3
 800999a:	d11b      	bne.n	80099d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d113      	bne.n	80099d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	3b01      	subs	r3, #1
 80099ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80099bc:	429a      	cmp	r2, r3
 80099be:	d109      	bne.n	80099d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	085b      	lsrs	r3, r3, #1
 80099cc:	3b01      	subs	r3, #1
 80099ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d071      	beq.n	8009ab8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	2b0c      	cmp	r3, #12
 80099d8:	d068      	beq.n	8009aac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80099da:	4b35      	ldr	r3, [pc, #212]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d105      	bne.n	80099f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80099e6:	4b32      	ldr	r3, [pc, #200]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e0ac      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80099f6:	4b2e      	ldr	r3, [pc, #184]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a2d      	ldr	r2, [pc, #180]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 80099fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a02:	f7fa fe09 	bl	8004618 <HAL_GetTick>
 8009a06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a08:	e008      	b.n	8009a1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a0a:	f7fa fe05 	bl	8004618 <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d901      	bls.n	8009a1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e099      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a1c:	4b24      	ldr	r3, [pc, #144]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f0      	bne.n	8009a0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a28:	4b21      	ldr	r3, [pc, #132]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <HAL_RCC_OscConfig+0x788>)
 8009a2e:	4013      	ands	r3, r2
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a38:	3a01      	subs	r2, #1
 8009a3a:	0112      	lsls	r2, r2, #4
 8009a3c:	4311      	orrs	r1, r2
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a42:	0212      	lsls	r2, r2, #8
 8009a44:	4311      	orrs	r1, r2
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009a4a:	0852      	lsrs	r2, r2, #1
 8009a4c:	3a01      	subs	r2, #1
 8009a4e:	0552      	lsls	r2, r2, #21
 8009a50:	4311      	orrs	r1, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009a56:	0852      	lsrs	r2, r2, #1
 8009a58:	3a01      	subs	r2, #1
 8009a5a:	0652      	lsls	r2, r2, #25
 8009a5c:	4311      	orrs	r1, r2
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a62:	06d2      	lsls	r2, r2, #27
 8009a64:	430a      	orrs	r2, r1
 8009a66:	4912      	ldr	r1, [pc, #72]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009a6c:	4b10      	ldr	r3, [pc, #64]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a0f      	ldr	r2, [pc, #60]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4a0c      	ldr	r2, [pc, #48]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a84:	f7fa fdc8 	bl	8004618 <HAL_GetTick>
 8009a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a8a:	e008      	b.n	8009a9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a8c:	f7fa fdc4 	bl	8004618 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d901      	bls.n	8009a9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e058      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a9e:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <HAL_RCC_OscConfig+0x784>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0f0      	beq.n	8009a8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009aaa:	e050      	b.n	8009b4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e04f      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
 8009ab0:	40021000 	.word	0x40021000
 8009ab4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ab8:	4b27      	ldr	r3, [pc, #156]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d144      	bne.n	8009b4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009ac4:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a23      	ldr	r2, [pc, #140]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ad0:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	4a20      	ldr	r2, [pc, #128]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009adc:	f7fa fd9c 	bl	8004618 <HAL_GetTick>
 8009ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ae2:	e008      	b.n	8009af6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ae4:	f7fa fd98 	bl	8004618 <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e02c      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009af6:	4b18      	ldr	r3, [pc, #96]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0f0      	beq.n	8009ae4 <HAL_RCC_OscConfig+0x7b8>
 8009b02:	e024      	b.n	8009b4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	2b0c      	cmp	r3, #12
 8009b08:	d01f      	beq.n	8009b4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b0a:	4b13      	ldr	r3, [pc, #76]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a12      	ldr	r2, [pc, #72]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b16:	f7fa fd7f 	bl	8004618 <HAL_GetTick>
 8009b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b1c:	e008      	b.n	8009b30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b1e:	f7fa fd7b 	bl	8004618 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d901      	bls.n	8009b30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e00f      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b30:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f0      	bne.n	8009b1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009b3c:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	4905      	ldr	r1, [pc, #20]	; (8009b58 <HAL_RCC_OscConfig+0x82c>)
 8009b42:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <HAL_RCC_OscConfig+0x830>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	60cb      	str	r3, [r1, #12]
 8009b48:	e001      	b.n	8009b4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e000      	b.n	8009b50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40021000 	.word	0x40021000
 8009b5c:	feeefffc 	.word	0xfeeefffc

08009b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e0e7      	b.n	8009d44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b74:	4b75      	ldr	r3, [pc, #468]	; (8009d4c <HAL_RCC_ClockConfig+0x1ec>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d910      	bls.n	8009ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b82:	4b72      	ldr	r3, [pc, #456]	; (8009d4c <HAL_RCC_ClockConfig+0x1ec>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f023 0207 	bic.w	r2, r3, #7
 8009b8a:	4970      	ldr	r1, [pc, #448]	; (8009d4c <HAL_RCC_ClockConfig+0x1ec>)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b92:	4b6e      	ldr	r3, [pc, #440]	; (8009d4c <HAL_RCC_ClockConfig+0x1ec>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d001      	beq.n	8009ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e0cf      	b.n	8009d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d010      	beq.n	8009bd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689a      	ldr	r2, [r3, #8]
 8009bb4:	4b66      	ldr	r3, [pc, #408]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d908      	bls.n	8009bd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bc0:	4b63      	ldr	r3, [pc, #396]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	4960      	ldr	r1, [pc, #384]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d04c      	beq.n	8009c78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d107      	bne.n	8009bf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009be6:	4b5a      	ldr	r3, [pc, #360]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d121      	bne.n	8009c36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e0a6      	b.n	8009d44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d107      	bne.n	8009c0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bfe:	4b54      	ldr	r3, [pc, #336]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d115      	bne.n	8009c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e09a      	b.n	8009d44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d107      	bne.n	8009c26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009c16:	4b4e      	ldr	r3, [pc, #312]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e08e      	b.n	8009d44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c26:	4b4a      	ldr	r3, [pc, #296]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e086      	b.n	8009d44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c36:	4b46      	ldr	r3, [pc, #280]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f023 0203 	bic.w	r2, r3, #3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	4943      	ldr	r1, [pc, #268]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c48:	f7fa fce6 	bl	8004618 <HAL_GetTick>
 8009c4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c4e:	e00a      	b.n	8009c66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c50:	f7fa fce2 	bl	8004618 <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e06e      	b.n	8009d44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c66:	4b3a      	ldr	r3, [pc, #232]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f003 020c 	and.w	r2, r3, #12
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d1eb      	bne.n	8009c50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d010      	beq.n	8009ca6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	4b31      	ldr	r3, [pc, #196]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d208      	bcs.n	8009ca6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c94:	4b2e      	ldr	r3, [pc, #184]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	492b      	ldr	r1, [pc, #172]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ca6:	4b29      	ldr	r3, [pc, #164]	; (8009d4c <HAL_RCC_ClockConfig+0x1ec>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d210      	bcs.n	8009cd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cb4:	4b25      	ldr	r3, [pc, #148]	; (8009d4c <HAL_RCC_ClockConfig+0x1ec>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f023 0207 	bic.w	r2, r3, #7
 8009cbc:	4923      	ldr	r1, [pc, #140]	; (8009d4c <HAL_RCC_ClockConfig+0x1ec>)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cc4:	4b21      	ldr	r3, [pc, #132]	; (8009d4c <HAL_RCC_ClockConfig+0x1ec>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0307 	and.w	r3, r3, #7
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d001      	beq.n	8009cd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e036      	b.n	8009d44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0304 	and.w	r3, r3, #4
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d008      	beq.n	8009cf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ce2:	4b1b      	ldr	r3, [pc, #108]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	4918      	ldr	r1, [pc, #96]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d009      	beq.n	8009d14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d00:	4b13      	ldr	r3, [pc, #76]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	4910      	ldr	r1, [pc, #64]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d14:	f000 f824 	bl	8009d60 <HAL_RCC_GetSysClockFreq>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	4b0d      	ldr	r3, [pc, #52]	; (8009d50 <HAL_RCC_ClockConfig+0x1f0>)
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	091b      	lsrs	r3, r3, #4
 8009d20:	f003 030f 	and.w	r3, r3, #15
 8009d24:	490b      	ldr	r1, [pc, #44]	; (8009d54 <HAL_RCC_ClockConfig+0x1f4>)
 8009d26:	5ccb      	ldrb	r3, [r1, r3]
 8009d28:	f003 031f 	and.w	r3, r3, #31
 8009d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d30:	4a09      	ldr	r2, [pc, #36]	; (8009d58 <HAL_RCC_ClockConfig+0x1f8>)
 8009d32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009d34:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <HAL_RCC_ClockConfig+0x1fc>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fa fc1d 	bl	8004578 <HAL_InitTick>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	72fb      	strb	r3, [r7, #11]

  return status;
 8009d42:	7afb      	ldrb	r3, [r7, #11]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	40022000 	.word	0x40022000
 8009d50:	40021000 	.word	0x40021000
 8009d54:	0800c538 	.word	0x0800c538
 8009d58:	2000035c 	.word	0x2000035c
 8009d5c:	20000360 	.word	0x20000360

08009d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b089      	sub	sp, #36	; 0x24
 8009d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61fb      	str	r3, [r7, #28]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d6e:	4b3e      	ldr	r3, [pc, #248]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 030c 	and.w	r3, r3, #12
 8009d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d78:	4b3b      	ldr	r3, [pc, #236]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f003 0303 	and.w	r3, r3, #3
 8009d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <HAL_RCC_GetSysClockFreq+0x34>
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	2b0c      	cmp	r3, #12
 8009d8c:	d121      	bne.n	8009dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d11e      	bne.n	8009dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009d94:	4b34      	ldr	r3, [pc, #208]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 0308 	and.w	r3, r3, #8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d107      	bne.n	8009db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009da0:	4b31      	ldr	r3, [pc, #196]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009da6:	0a1b      	lsrs	r3, r3, #8
 8009da8:	f003 030f 	and.w	r3, r3, #15
 8009dac:	61fb      	str	r3, [r7, #28]
 8009dae:	e005      	b.n	8009dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009db0:	4b2d      	ldr	r3, [pc, #180]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	091b      	lsrs	r3, r3, #4
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009dbc:	4a2b      	ldr	r2, [pc, #172]	; (8009e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10d      	bne.n	8009de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009dd0:	e00a      	b.n	8009de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d102      	bne.n	8009dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009dd8:	4b25      	ldr	r3, [pc, #148]	; (8009e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8009dda:	61bb      	str	r3, [r7, #24]
 8009ddc:	e004      	b.n	8009de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b08      	cmp	r3, #8
 8009de2:	d101      	bne.n	8009de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009de4:	4b23      	ldr	r3, [pc, #140]	; (8009e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8009de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	2b0c      	cmp	r3, #12
 8009dec:	d134      	bne.n	8009e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009dee:	4b1e      	ldr	r3, [pc, #120]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d003      	beq.n	8009e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d003      	beq.n	8009e0c <HAL_RCC_GetSysClockFreq+0xac>
 8009e04:	e005      	b.n	8009e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009e06:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8009e08:	617b      	str	r3, [r7, #20]
      break;
 8009e0a:	e005      	b.n	8009e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009e0c:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8009e0e:	617b      	str	r3, [r7, #20]
      break;
 8009e10:	e002      	b.n	8009e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	617b      	str	r3, [r7, #20]
      break;
 8009e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e18:	4b13      	ldr	r3, [pc, #76]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	091b      	lsrs	r3, r3, #4
 8009e1e:	f003 0307 	and.w	r3, r3, #7
 8009e22:	3301      	adds	r3, #1
 8009e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009e26:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	0a1b      	lsrs	r3, r3, #8
 8009e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	fb03 f202 	mul.w	r2, r3, r2
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	0e5b      	lsrs	r3, r3, #25
 8009e44:	f003 0303 	and.w	r3, r3, #3
 8009e48:	3301      	adds	r3, #1
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009e58:	69bb      	ldr	r3, [r7, #24]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3724      	adds	r7, #36	; 0x24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	40021000 	.word	0x40021000
 8009e6c:	0800c550 	.word	0x0800c550
 8009e70:	00f42400 	.word	0x00f42400
 8009e74:	007a1200 	.word	0x007a1200

08009e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e7c:	4b03      	ldr	r3, [pc, #12]	; (8009e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	2000035c 	.word	0x2000035c

08009e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009e94:	f7ff fff0 	bl	8009e78 <HAL_RCC_GetHCLKFreq>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	0a1b      	lsrs	r3, r3, #8
 8009ea0:	f003 0307 	and.w	r3, r3, #7
 8009ea4:	4904      	ldr	r1, [pc, #16]	; (8009eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ea6:	5ccb      	ldrb	r3, [r1, r3]
 8009ea8:	f003 031f 	and.w	r3, r3, #31
 8009eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	40021000 	.word	0x40021000
 8009eb8:	0800c548 	.word	0x0800c548

08009ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009ec0:	f7ff ffda 	bl	8009e78 <HAL_RCC_GetHCLKFreq>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	0adb      	lsrs	r3, r3, #11
 8009ecc:	f003 0307 	and.w	r3, r3, #7
 8009ed0:	4904      	ldr	r1, [pc, #16]	; (8009ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009ed2:	5ccb      	ldrb	r3, [r1, r3]
 8009ed4:	f003 031f 	and.w	r3, r3, #31
 8009ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	40021000 	.word	0x40021000
 8009ee4:	0800c548 	.word	0x0800c548

08009ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009ef4:	4b2a      	ldr	r3, [pc, #168]	; (8009fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d003      	beq.n	8009f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009f00:	f7ff f9b0 	bl	8009264 <HAL_PWREx_GetVoltageRange>
 8009f04:	6178      	str	r0, [r7, #20]
 8009f06:	e014      	b.n	8009f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f08:	4b25      	ldr	r3, [pc, #148]	; (8009fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0c:	4a24      	ldr	r2, [pc, #144]	; (8009fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f12:	6593      	str	r3, [r2, #88]	; 0x58
 8009f14:	4b22      	ldr	r3, [pc, #136]	; (8009fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009f20:	f7ff f9a0 	bl	8009264 <HAL_PWREx_GetVoltageRange>
 8009f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009f26:	4b1e      	ldr	r3, [pc, #120]	; (8009fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f2a:	4a1d      	ldr	r2, [pc, #116]	; (8009fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f38:	d10b      	bne.n	8009f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b80      	cmp	r3, #128	; 0x80
 8009f3e:	d919      	bls.n	8009f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2ba0      	cmp	r3, #160	; 0xa0
 8009f44:	d902      	bls.n	8009f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009f46:	2302      	movs	r3, #2
 8009f48:	613b      	str	r3, [r7, #16]
 8009f4a:	e013      	b.n	8009f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	613b      	str	r3, [r7, #16]
 8009f50:	e010      	b.n	8009f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b80      	cmp	r3, #128	; 0x80
 8009f56:	d902      	bls.n	8009f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009f58:	2303      	movs	r3, #3
 8009f5a:	613b      	str	r3, [r7, #16]
 8009f5c:	e00a      	b.n	8009f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b80      	cmp	r3, #128	; 0x80
 8009f62:	d102      	bne.n	8009f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009f64:	2302      	movs	r3, #2
 8009f66:	613b      	str	r3, [r7, #16]
 8009f68:	e004      	b.n	8009f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b70      	cmp	r3, #112	; 0x70
 8009f6e:	d101      	bne.n	8009f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009f70:	2301      	movs	r3, #1
 8009f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009f74:	4b0b      	ldr	r3, [pc, #44]	; (8009fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f023 0207 	bic.w	r2, r3, #7
 8009f7c:	4909      	ldr	r1, [pc, #36]	; (8009fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009f84:	4b07      	ldr	r3, [pc, #28]	; (8009fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0307 	and.w	r3, r3, #7
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d001      	beq.n	8009f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	40021000 	.word	0x40021000
 8009fa4:	40022000 	.word	0x40022000

08009fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d041      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009fcc:	d02a      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009fd2:	d824      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fd8:	d008      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fde:	d81e      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00a      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fe8:	d010      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009fea:	e018      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009fec:	4b86      	ldr	r3, [pc, #536]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	4a85      	ldr	r2, [pc, #532]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009ff8:	e015      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	2100      	movs	r1, #0
 800a000:	4618      	mov	r0, r3
 800a002:	f000 facd 	bl	800a5a0 <RCCEx_PLLSAI1_Config>
 800a006:	4603      	mov	r3, r0
 800a008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a00a:	e00c      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3320      	adds	r3, #32
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f000 fbb6 	bl	800a784 <RCCEx_PLLSAI2_Config>
 800a018:	4603      	mov	r3, r0
 800a01a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a01c:	e003      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	74fb      	strb	r3, [r7, #19]
      break;
 800a022:	e000      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a024:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a026:	7cfb      	ldrb	r3, [r7, #19]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10b      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a02c:	4b76      	ldr	r3, [pc, #472]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a03a:	4973      	ldr	r1, [pc, #460]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a042:	e001      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a044:	7cfb      	ldrb	r3, [r7, #19]
 800a046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d041      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a05c:	d02a      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a05e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a062:	d824      	bhi.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a068:	d008      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a06a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a06e:	d81e      	bhi.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00a      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a078:	d010      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a07a:	e018      	b.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a07c:	4b62      	ldr	r3, [pc, #392]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	4a61      	ldr	r2, [pc, #388]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a086:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a088:	e015      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3304      	adds	r3, #4
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fa85 	bl	800a5a0 <RCCEx_PLLSAI1_Config>
 800a096:	4603      	mov	r3, r0
 800a098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a09a:	e00c      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3320      	adds	r3, #32
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fb6e 	bl	800a784 <RCCEx_PLLSAI2_Config>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a0ac:	e003      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	74fb      	strb	r3, [r7, #19]
      break;
 800a0b2:	e000      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a0b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0b6:	7cfb      	ldrb	r3, [r7, #19]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10b      	bne.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a0bc:	4b52      	ldr	r3, [pc, #328]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ca:	494f      	ldr	r1, [pc, #316]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a0d2:	e001      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d4:	7cfb      	ldrb	r3, [r7, #19]
 800a0d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 80a0 	beq.w	800a226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a0ea:	4b47      	ldr	r3, [pc, #284]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00d      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a100:	4b41      	ldr	r3, [pc, #260]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a104:	4a40      	ldr	r2, [pc, #256]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a10a:	6593      	str	r3, [r2, #88]	; 0x58
 800a10c:	4b3e      	ldr	r3, [pc, #248]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a10e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a114:	60bb      	str	r3, [r7, #8]
 800a116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a118:	2301      	movs	r3, #1
 800a11a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a11c:	4b3b      	ldr	r3, [pc, #236]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a3a      	ldr	r2, [pc, #232]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a128:	f7fa fa76 	bl	8004618 <HAL_GetTick>
 800a12c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a12e:	e009      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a130:	f7fa fa72 	bl	8004618 <HAL_GetTick>
 800a134:	4602      	mov	r2, r0
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d902      	bls.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	74fb      	strb	r3, [r7, #19]
        break;
 800a142:	e005      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a144:	4b31      	ldr	r3, [pc, #196]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d0ef      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a150:	7cfb      	ldrb	r3, [r7, #19]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d15c      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a156:	4b2c      	ldr	r3, [pc, #176]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01f      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	429a      	cmp	r2, r3
 800a172:	d019      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a17a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a17e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a180:	4b21      	ldr	r3, [pc, #132]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a186:	4a20      	ldr	r2, [pc, #128]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a18c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a190:	4b1d      	ldr	r3, [pc, #116]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a196:	4a1c      	ldr	r2, [pc, #112]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a19c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1a0:	4a19      	ldr	r2, [pc, #100]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d016      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b2:	f7fa fa31 	bl	8004618 <HAL_GetTick>
 800a1b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1b8:	e00b      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ba:	f7fa fa2d 	bl	8004618 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d902      	bls.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	74fb      	strb	r3, [r7, #19]
            break;
 800a1d0:	e006      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d0ec      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a1e0:	7cfb      	ldrb	r3, [r7, #19]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10c      	bne.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1e6:	4b08      	ldr	r3, [pc, #32]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f6:	4904      	ldr	r1, [pc, #16]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a1fe:	e009      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a200:	7cfb      	ldrb	r3, [r7, #19]
 800a202:	74bb      	strb	r3, [r7, #18]
 800a204:	e006      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a206:	bf00      	nop
 800a208:	40021000 	.word	0x40021000
 800a20c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a210:	7cfb      	ldrb	r3, [r7, #19]
 800a212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a214:	7c7b      	ldrb	r3, [r7, #17]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d105      	bne.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a21a:	4ba6      	ldr	r3, [pc, #664]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21e:	4aa5      	ldr	r2, [pc, #660]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00a      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a232:	4ba0      	ldr	r3, [pc, #640]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a238:	f023 0203 	bic.w	r2, r3, #3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	499c      	ldr	r1, [pc, #624]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a242:	4313      	orrs	r3, r2
 800a244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00a      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a254:	4b97      	ldr	r3, [pc, #604]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25a:	f023 020c 	bic.w	r2, r3, #12
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a262:	4994      	ldr	r1, [pc, #592]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a264:	4313      	orrs	r3, r2
 800a266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0304 	and.w	r3, r3, #4
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a276:	4b8f      	ldr	r3, [pc, #572]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a284:	498b      	ldr	r1, [pc, #556]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a286:	4313      	orrs	r3, r2
 800a288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0308 	and.w	r3, r3, #8
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00a      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a298:	4b86      	ldr	r3, [pc, #536]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	4983      	ldr	r1, [pc, #524]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0310 	and.w	r3, r3, #16
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a2ba:	4b7e      	ldr	r3, [pc, #504]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c8:	497a      	ldr	r1, [pc, #488]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0320 	and.w	r3, r3, #32
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00a      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2dc:	4b75      	ldr	r3, [pc, #468]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ea:	4972      	ldr	r1, [pc, #456]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2fe:	4b6d      	ldr	r3, [pc, #436]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a30c:	4969      	ldr	r1, [pc, #420]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00a      	beq.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a320:	4b64      	ldr	r3, [pc, #400]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a32e:	4961      	ldr	r1, [pc, #388]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a330:	4313      	orrs	r3, r2
 800a332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a342:	4b5c      	ldr	r3, [pc, #368]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a348:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a350:	4958      	ldr	r1, [pc, #352]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a352:	4313      	orrs	r3, r2
 800a354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00a      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a364:	4b53      	ldr	r3, [pc, #332]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a372:	4950      	ldr	r1, [pc, #320]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a374:	4313      	orrs	r3, r2
 800a376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a386:	4b4b      	ldr	r3, [pc, #300]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a394:	4947      	ldr	r1, [pc, #284]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a396:	4313      	orrs	r3, r2
 800a398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00a      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3a8:	4b42      	ldr	r3, [pc, #264]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3ae:	f023 0203 	bic.w	r2, r3, #3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3b6:	493f      	ldr	r1, [pc, #252]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d028      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a3ca:	4b3a      	ldr	r3, [pc, #232]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d8:	4936      	ldr	r1, [pc, #216]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3e8:	d106      	bne.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3ea:	4b32      	ldr	r3, [pc, #200]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	4a31      	ldr	r2, [pc, #196]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a3f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3f4:	60d3      	str	r3, [r2, #12]
 800a3f6:	e011      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a400:	d10c      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3304      	adds	r3, #4
 800a406:	2101      	movs	r1, #1
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 f8c9 	bl	800a5a0 <RCCEx_PLLSAI1_Config>
 800a40e:	4603      	mov	r3, r0
 800a410:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a412:	7cfb      	ldrb	r3, [r7, #19]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800a418:	7cfb      	ldrb	r3, [r7, #19]
 800a41a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d028      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a428:	4b22      	ldr	r3, [pc, #136]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a436:	491f      	ldr	r1, [pc, #124]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a446:	d106      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a448:	4b1a      	ldr	r3, [pc, #104]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	4a19      	ldr	r2, [pc, #100]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a44e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a452:	60d3      	str	r3, [r2, #12]
 800a454:	e011      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a45a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a45e:	d10c      	bne.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3304      	adds	r3, #4
 800a464:	2101      	movs	r1, #1
 800a466:	4618      	mov	r0, r3
 800a468:	f000 f89a 	bl	800a5a0 <RCCEx_PLLSAI1_Config>
 800a46c:	4603      	mov	r3, r0
 800a46e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a470:	7cfb      	ldrb	r3, [r7, #19]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800a476:	7cfb      	ldrb	r3, [r7, #19]
 800a478:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d02a      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a486:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a48c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a494:	4907      	ldr	r1, [pc, #28]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a496:	4313      	orrs	r3, r2
 800a498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4a4:	d108      	bne.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4a6:	4b03      	ldr	r3, [pc, #12]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	4a02      	ldr	r2, [pc, #8]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800a4ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4b0:	60d3      	str	r3, [r2, #12]
 800a4b2:	e013      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x534>
 800a4b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4c0:	d10c      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 f869 	bl	800a5a0 <RCCEx_PLLSAI1_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a4d2:	7cfb      	ldrb	r3, [r7, #19]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800a4d8:	7cfb      	ldrb	r3, [r7, #19]
 800a4da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d02f      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4e8:	4b2c      	ldr	r3, [pc, #176]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4f6:	4929      	ldr	r1, [pc, #164]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a506:	d10d      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3304      	adds	r3, #4
 800a50c:	2102      	movs	r1, #2
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 f846 	bl	800a5a0 <RCCEx_PLLSAI1_Config>
 800a514:	4603      	mov	r3, r0
 800a516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a518:	7cfb      	ldrb	r3, [r7, #19]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d014      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a51e:	7cfb      	ldrb	r3, [r7, #19]
 800a520:	74bb      	strb	r3, [r7, #18]
 800a522:	e011      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52c:	d10c      	bne.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3320      	adds	r3, #32
 800a532:	2102      	movs	r1, #2
 800a534:	4618      	mov	r0, r3
 800a536:	f000 f925 	bl	800a784 <RCCEx_PLLSAI2_Config>
 800a53a:	4603      	mov	r3, r0
 800a53c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a53e:	7cfb      	ldrb	r3, [r7, #19]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800a544:	7cfb      	ldrb	r3, [r7, #19]
 800a546:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00b      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a554:	4b11      	ldr	r3, [pc, #68]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a564:	490d      	ldr	r1, [pc, #52]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a566:	4313      	orrs	r3, r2
 800a568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a578:	4b08      	ldr	r3, [pc, #32]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a588:	4904      	ldr	r1, [pc, #16]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a590:	7cbb      	ldrb	r3, [r7, #18]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	40021000 	.word	0x40021000

0800a5a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a5ae:	4b74      	ldr	r3, [pc, #464]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	f003 0303 	and.w	r3, r3, #3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d018      	beq.n	800a5ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a5ba:	4b71      	ldr	r3, [pc, #452]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f003 0203 	and.w	r2, r3, #3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d10d      	bne.n	800a5e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
       ||
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d009      	beq.n	800a5e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a5d2:	4b6b      	ldr	r3, [pc, #428]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	091b      	lsrs	r3, r3, #4
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
       ||
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d047      	beq.n	800a676 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	73fb      	strb	r3, [r7, #15]
 800a5ea:	e044      	b.n	800a676 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d018      	beq.n	800a626 <RCCEx_PLLSAI1_Config+0x86>
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d825      	bhi.n	800a644 <RCCEx_PLLSAI1_Config+0xa4>
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d002      	beq.n	800a602 <RCCEx_PLLSAI1_Config+0x62>
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d009      	beq.n	800a614 <RCCEx_PLLSAI1_Config+0x74>
 800a600:	e020      	b.n	800a644 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a602:	4b5f      	ldr	r3, [pc, #380]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d11d      	bne.n	800a64a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a612:	e01a      	b.n	800a64a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a614:	4b5a      	ldr	r3, [pc, #360]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d116      	bne.n	800a64e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a624:	e013      	b.n	800a64e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a626:	4b56      	ldr	r3, [pc, #344]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10f      	bne.n	800a652 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a632:	4b53      	ldr	r3, [pc, #332]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d109      	bne.n	800a652 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a642:	e006      	b.n	800a652 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	73fb      	strb	r3, [r7, #15]
      break;
 800a648:	e004      	b.n	800a654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a64a:	bf00      	nop
 800a64c:	e002      	b.n	800a654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a64e:	bf00      	nop
 800a650:	e000      	b.n	800a654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a652:	bf00      	nop
    }

    if(status == HAL_OK)
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10d      	bne.n	800a676 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a65a:	4b49      	ldr	r3, [pc, #292]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6819      	ldr	r1, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	430b      	orrs	r3, r1
 800a670:	4943      	ldr	r1, [pc, #268]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a672:	4313      	orrs	r3, r2
 800a674:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d17c      	bne.n	800a776 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a67c:	4b40      	ldr	r3, [pc, #256]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a3f      	ldr	r2, [pc, #252]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a682:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a688:	f7f9 ffc6 	bl	8004618 <HAL_GetTick>
 800a68c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a68e:	e009      	b.n	800a6a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a690:	f7f9 ffc2 	bl	8004618 <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d902      	bls.n	800a6a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	73fb      	strb	r3, [r7, #15]
        break;
 800a6a2:	e005      	b.n	800a6b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a6a4:	4b36      	ldr	r3, [pc, #216]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1ef      	bne.n	800a690 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d15f      	bne.n	800a776 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d110      	bne.n	800a6de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a6bc:	4b30      	ldr	r3, [pc, #192]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a6c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6892      	ldr	r2, [r2, #8]
 800a6cc:	0211      	lsls	r1, r2, #8
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	68d2      	ldr	r2, [r2, #12]
 800a6d2:	06d2      	lsls	r2, r2, #27
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	492a      	ldr	r1, [pc, #168]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	610b      	str	r3, [r1, #16]
 800a6dc:	e027      	b.n	800a72e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d112      	bne.n	800a70a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a6e4:	4b26      	ldr	r3, [pc, #152]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a6ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	6892      	ldr	r2, [r2, #8]
 800a6f4:	0211      	lsls	r1, r2, #8
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	6912      	ldr	r2, [r2, #16]
 800a6fa:	0852      	lsrs	r2, r2, #1
 800a6fc:	3a01      	subs	r2, #1
 800a6fe:	0552      	lsls	r2, r2, #21
 800a700:	430a      	orrs	r2, r1
 800a702:	491f      	ldr	r1, [pc, #124]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a704:	4313      	orrs	r3, r2
 800a706:	610b      	str	r3, [r1, #16]
 800a708:	e011      	b.n	800a72e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a70a:	4b1d      	ldr	r3, [pc, #116]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a712:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6892      	ldr	r2, [r2, #8]
 800a71a:	0211      	lsls	r1, r2, #8
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	6952      	ldr	r2, [r2, #20]
 800a720:	0852      	lsrs	r2, r2, #1
 800a722:	3a01      	subs	r2, #1
 800a724:	0652      	lsls	r2, r2, #25
 800a726:	430a      	orrs	r2, r1
 800a728:	4915      	ldr	r1, [pc, #84]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a72e:	4b14      	ldr	r3, [pc, #80]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a13      	ldr	r2, [pc, #76]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a738:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a73a:	f7f9 ff6d 	bl	8004618 <HAL_GetTick>
 800a73e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a740:	e009      	b.n	800a756 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a742:	f7f9 ff69 	bl	8004618 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d902      	bls.n	800a756 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	73fb      	strb	r3, [r7, #15]
          break;
 800a754:	e005      	b.n	800a762 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a756:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0ef      	beq.n	800a742 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d106      	bne.n	800a776 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a76a:	691a      	ldr	r2, [r3, #16]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	4903      	ldr	r1, [pc, #12]	; (800a780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a772:	4313      	orrs	r3, r2
 800a774:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	40021000 	.word	0x40021000

0800a784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a792:	4b69      	ldr	r3, [pc, #420]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d018      	beq.n	800a7d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a79e:	4b66      	ldr	r3, [pc, #408]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f003 0203 	and.w	r2, r3, #3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d10d      	bne.n	800a7ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
       ||
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d009      	beq.n	800a7ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a7b6:	4b60      	ldr	r3, [pc, #384]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	091b      	lsrs	r3, r3, #4
 800a7bc:	f003 0307 	and.w	r3, r3, #7
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
       ||
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d047      	beq.n	800a85a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	73fb      	strb	r3, [r7, #15]
 800a7ce:	e044      	b.n	800a85a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d018      	beq.n	800a80a <RCCEx_PLLSAI2_Config+0x86>
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d825      	bhi.n	800a828 <RCCEx_PLLSAI2_Config+0xa4>
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d002      	beq.n	800a7e6 <RCCEx_PLLSAI2_Config+0x62>
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d009      	beq.n	800a7f8 <RCCEx_PLLSAI2_Config+0x74>
 800a7e4:	e020      	b.n	800a828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a7e6:	4b54      	ldr	r3, [pc, #336]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0302 	and.w	r3, r3, #2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d11d      	bne.n	800a82e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7f6:	e01a      	b.n	800a82e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a7f8:	4b4f      	ldr	r3, [pc, #316]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a800:	2b00      	cmp	r3, #0
 800a802:	d116      	bne.n	800a832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a808:	e013      	b.n	800a832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a80a:	4b4b      	ldr	r3, [pc, #300]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10f      	bne.n	800a836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a816:	4b48      	ldr	r3, [pc, #288]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d109      	bne.n	800a836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a826:	e006      	b.n	800a836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
      break;
 800a82c:	e004      	b.n	800a838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a82e:	bf00      	nop
 800a830:	e002      	b.n	800a838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a832:	bf00      	nop
 800a834:	e000      	b.n	800a838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a836:	bf00      	nop
    }

    if(status == HAL_OK)
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10d      	bne.n	800a85a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a83e:	4b3e      	ldr	r3, [pc, #248]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6819      	ldr	r1, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	3b01      	subs	r3, #1
 800a850:	011b      	lsls	r3, r3, #4
 800a852:	430b      	orrs	r3, r1
 800a854:	4938      	ldr	r1, [pc, #224]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a856:	4313      	orrs	r3, r2
 800a858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d166      	bne.n	800a92e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a860:	4b35      	ldr	r3, [pc, #212]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a34      	ldr	r2, [pc, #208]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a86a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a86c:	f7f9 fed4 	bl	8004618 <HAL_GetTick>
 800a870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a872:	e009      	b.n	800a888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a874:	f7f9 fed0 	bl	8004618 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d902      	bls.n	800a888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	73fb      	strb	r3, [r7, #15]
        break;
 800a886:	e005      	b.n	800a894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a888:	4b2b      	ldr	r3, [pc, #172]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1ef      	bne.n	800a874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d149      	bne.n	800a92e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d110      	bne.n	800a8c2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a8a0:	4b25      	ldr	r3, [pc, #148]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a8a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	6892      	ldr	r2, [r2, #8]
 800a8b0:	0211      	lsls	r1, r2, #8
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	68d2      	ldr	r2, [r2, #12]
 800a8b6:	06d2      	lsls	r2, r2, #27
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	491f      	ldr	r1, [pc, #124]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	614b      	str	r3, [r1, #20]
 800a8c0:	e011      	b.n	800a8e6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a8c2:	4b1d      	ldr	r3, [pc, #116]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a8ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	6892      	ldr	r2, [r2, #8]
 800a8d2:	0211      	lsls	r1, r2, #8
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	6912      	ldr	r2, [r2, #16]
 800a8d8:	0852      	lsrs	r2, r2, #1
 800a8da:	3a01      	subs	r2, #1
 800a8dc:	0652      	lsls	r2, r2, #25
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	4915      	ldr	r1, [pc, #84]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a8e6:	4b14      	ldr	r3, [pc, #80]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a13      	ldr	r2, [pc, #76]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a8ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8f2:	f7f9 fe91 	bl	8004618 <HAL_GetTick>
 800a8f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a8f8:	e009      	b.n	800a90e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a8fa:	f7f9 fe8d 	bl	8004618 <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	2b02      	cmp	r3, #2
 800a906:	d902      	bls.n	800a90e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	73fb      	strb	r3, [r7, #15]
          break;
 800a90c:	e005      	b.n	800a91a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a90e:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0ef      	beq.n	800a8fa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d106      	bne.n	800a92e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a922:	695a      	ldr	r2, [r3, #20]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	695b      	ldr	r3, [r3, #20]
 800a928:	4903      	ldr	r1, [pc, #12]	; (800a938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	40021000 	.word	0x40021000

0800a93c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e049      	b.n	800a9e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a954:	b2db      	uxtb	r3, r3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d106      	bne.n	800a968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7f9 fae6 	bl	8003f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3304      	adds	r3, #4
 800a978:	4619      	mov	r1, r3
 800a97a:	4610      	mov	r0, r2
 800a97c:	f000 f9d0 	bl	800ad20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d001      	beq.n	800aa04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e04f      	b.n	800aaa4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f042 0201 	orr.w	r2, r2, #1
 800aa1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a23      	ldr	r2, [pc, #140]	; (800aab0 <HAL_TIM_Base_Start_IT+0xc4>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d01d      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0x76>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2e:	d018      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0x76>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a1f      	ldr	r2, [pc, #124]	; (800aab4 <HAL_TIM_Base_Start_IT+0xc8>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d013      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0x76>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a1e      	ldr	r2, [pc, #120]	; (800aab8 <HAL_TIM_Base_Start_IT+0xcc>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d00e      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0x76>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a1c      	ldr	r2, [pc, #112]	; (800aabc <HAL_TIM_Base_Start_IT+0xd0>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d009      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0x76>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a1b      	ldr	r2, [pc, #108]	; (800aac0 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d004      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0x76>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a19      	ldr	r2, [pc, #100]	; (800aac4 <HAL_TIM_Base_Start_IT+0xd8>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d115      	bne.n	800aa8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	4b17      	ldr	r3, [pc, #92]	; (800aac8 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b06      	cmp	r3, #6
 800aa72:	d015      	beq.n	800aaa0 <HAL_TIM_Base_Start_IT+0xb4>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa7a:	d011      	beq.n	800aaa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f042 0201 	orr.w	r2, r2, #1
 800aa8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa8c:	e008      	b.n	800aaa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f042 0201 	orr.w	r2, r2, #1
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	e000      	b.n	800aaa2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	40012c00 	.word	0x40012c00
 800aab4:	40000400 	.word	0x40000400
 800aab8:	40000800 	.word	0x40000800
 800aabc:	40000c00 	.word	0x40000c00
 800aac0:	40013400 	.word	0x40013400
 800aac4:	40014000 	.word	0x40014000
 800aac8:	00010007 	.word	0x00010007

0800aacc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f003 0302 	and.w	r3, r3, #2
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d020      	beq.n	800ab30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f003 0302 	and.w	r3, r3, #2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d01b      	beq.n	800ab30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f06f 0202 	mvn.w	r2, #2
 800ab00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	f003 0303 	and.w	r3, r3, #3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f8e4 	bl	800ace4 <HAL_TIM_IC_CaptureCallback>
 800ab1c:	e005      	b.n	800ab2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f8d6 	bl	800acd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f8e7 	bl	800acf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	f003 0304 	and.w	r3, r3, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d020      	beq.n	800ab7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d01b      	beq.n	800ab7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f06f 0204 	mvn.w	r2, #4
 800ab4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2202      	movs	r2, #2
 800ab52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f8be 	bl	800ace4 <HAL_TIM_IC_CaptureCallback>
 800ab68:	e005      	b.n	800ab76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f8b0 	bl	800acd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f8c1 	bl	800acf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f003 0308 	and.w	r3, r3, #8
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d020      	beq.n	800abc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f003 0308 	and.w	r3, r3, #8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d01b      	beq.n	800abc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f06f 0208 	mvn.w	r2, #8
 800ab98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2204      	movs	r2, #4
 800ab9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f898 	bl	800ace4 <HAL_TIM_IC_CaptureCallback>
 800abb4:	e005      	b.n	800abc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f88a 	bl	800acd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f89b 	bl	800acf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	f003 0310 	and.w	r3, r3, #16
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d020      	beq.n	800ac14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f003 0310 	and.w	r3, r3, #16
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01b      	beq.n	800ac14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f06f 0210 	mvn.w	r2, #16
 800abe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2208      	movs	r2, #8
 800abea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f872 	bl	800ace4 <HAL_TIM_IC_CaptureCallback>
 800ac00:	e005      	b.n	800ac0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f864 	bl	800acd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f875 	bl	800acf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00c      	beq.n	800ac38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d007      	beq.n	800ac38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f06f 0201 	mvn.w	r2, #1
 800ac30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7f8 ff88 	bl	8003b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00c      	beq.n	800ac5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d007      	beq.n	800ac5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f98e 	bl	800af78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00c      	beq.n	800ac80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d007      	beq.n	800ac80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f986 	bl	800af8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00c      	beq.n	800aca4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f834 	bl	800ad0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f003 0320 	and.w	r3, r3, #32
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00c      	beq.n	800acc8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f003 0320 	and.w	r3, r3, #32
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d007      	beq.n	800acc8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f06f 0220 	mvn.w	r2, #32
 800acc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f94e 	bl	800af64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acc8:	bf00      	nop
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a40      	ldr	r2, [pc, #256]	; (800ae34 <TIM_Base_SetConfig+0x114>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d013      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad3e:	d00f      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a3d      	ldr	r2, [pc, #244]	; (800ae38 <TIM_Base_SetConfig+0x118>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d00b      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a3c      	ldr	r2, [pc, #240]	; (800ae3c <TIM_Base_SetConfig+0x11c>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d007      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a3b      	ldr	r2, [pc, #236]	; (800ae40 <TIM_Base_SetConfig+0x120>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d003      	beq.n	800ad60 <TIM_Base_SetConfig+0x40>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a3a      	ldr	r2, [pc, #232]	; (800ae44 <TIM_Base_SetConfig+0x124>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d108      	bne.n	800ad72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a2f      	ldr	r2, [pc, #188]	; (800ae34 <TIM_Base_SetConfig+0x114>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d01f      	beq.n	800adba <TIM_Base_SetConfig+0x9a>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad80:	d01b      	beq.n	800adba <TIM_Base_SetConfig+0x9a>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a2c      	ldr	r2, [pc, #176]	; (800ae38 <TIM_Base_SetConfig+0x118>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d017      	beq.n	800adba <TIM_Base_SetConfig+0x9a>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a2b      	ldr	r2, [pc, #172]	; (800ae3c <TIM_Base_SetConfig+0x11c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d013      	beq.n	800adba <TIM_Base_SetConfig+0x9a>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a2a      	ldr	r2, [pc, #168]	; (800ae40 <TIM_Base_SetConfig+0x120>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00f      	beq.n	800adba <TIM_Base_SetConfig+0x9a>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a29      	ldr	r2, [pc, #164]	; (800ae44 <TIM_Base_SetConfig+0x124>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d00b      	beq.n	800adba <TIM_Base_SetConfig+0x9a>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a28      	ldr	r2, [pc, #160]	; (800ae48 <TIM_Base_SetConfig+0x128>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d007      	beq.n	800adba <TIM_Base_SetConfig+0x9a>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a27      	ldr	r2, [pc, #156]	; (800ae4c <TIM_Base_SetConfig+0x12c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d003      	beq.n	800adba <TIM_Base_SetConfig+0x9a>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a26      	ldr	r2, [pc, #152]	; (800ae50 <TIM_Base_SetConfig+0x130>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d108      	bne.n	800adcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	4313      	orrs	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	4313      	orrs	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	689a      	ldr	r2, [r3, #8]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a10      	ldr	r2, [pc, #64]	; (800ae34 <TIM_Base_SetConfig+0x114>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d00f      	beq.n	800ae18 <TIM_Base_SetConfig+0xf8>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a12      	ldr	r2, [pc, #72]	; (800ae44 <TIM_Base_SetConfig+0x124>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00b      	beq.n	800ae18 <TIM_Base_SetConfig+0xf8>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a11      	ldr	r2, [pc, #68]	; (800ae48 <TIM_Base_SetConfig+0x128>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d007      	beq.n	800ae18 <TIM_Base_SetConfig+0xf8>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a10      	ldr	r2, [pc, #64]	; (800ae4c <TIM_Base_SetConfig+0x12c>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d003      	beq.n	800ae18 <TIM_Base_SetConfig+0xf8>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a0f      	ldr	r2, [pc, #60]	; (800ae50 <TIM_Base_SetConfig+0x130>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d103      	bne.n	800ae20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	691a      	ldr	r2, [r3, #16]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	615a      	str	r2, [r3, #20]
}
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	40012c00 	.word	0x40012c00
 800ae38:	40000400 	.word	0x40000400
 800ae3c:	40000800 	.word	0x40000800
 800ae40:	40000c00 	.word	0x40000c00
 800ae44:	40013400 	.word	0x40013400
 800ae48:	40014000 	.word	0x40014000
 800ae4c:	40014400 	.word	0x40014400
 800ae50:	40014800 	.word	0x40014800

0800ae54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d101      	bne.n	800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e068      	b.n	800af3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a2e      	ldr	r2, [pc, #184]	; (800af4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d004      	beq.n	800aea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a2d      	ldr	r2, [pc, #180]	; (800af50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d108      	bne.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a1e      	ldr	r2, [pc, #120]	; (800af4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d01d      	beq.n	800af12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aede:	d018      	beq.n	800af12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a1b      	ldr	r2, [pc, #108]	; (800af54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d013      	beq.n	800af12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a1a      	ldr	r2, [pc, #104]	; (800af58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d00e      	beq.n	800af12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a18      	ldr	r2, [pc, #96]	; (800af5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d009      	beq.n	800af12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a13      	ldr	r2, [pc, #76]	; (800af50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d004      	beq.n	800af12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a14      	ldr	r2, [pc, #80]	; (800af60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d10c      	bne.n	800af2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	4313      	orrs	r3, r2
 800af22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	40012c00 	.word	0x40012c00
 800af50:	40013400 	.word	0x40013400
 800af54:	40000400 	.word	0x40000400
 800af58:	40000800 	.word	0x40000800
 800af5c:	40000c00 	.word	0x40000c00
 800af60:	40014000 	.word	0x40014000

0800af64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e040      	b.n	800b034 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d106      	bne.n	800afc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7f8 ffdc 	bl	8003f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2224      	movs	r2, #36	; 0x24
 800afcc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f022 0201 	bic.w	r2, r2, #1
 800afdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d002      	beq.n	800afec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fe40 	bl	800bc6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fb85 	bl	800b6fc <UART_SetConfig>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d101      	bne.n	800affc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e01b      	b.n	800b034 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b00a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b01a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f042 0201 	orr.w	r2, r2, #1
 800b02a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 febf 	bl	800bdb0 <UART_CheckIdleState>
 800b032:	4603      	mov	r3, r0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08a      	sub	sp, #40	; 0x28
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	4613      	mov	r3, r2
 800b048:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b050:	2b20      	cmp	r3, #32
 800b052:	d137      	bne.n	800b0c4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d002      	beq.n	800b060 <HAL_UART_Receive_DMA+0x24>
 800b05a:	88fb      	ldrh	r3, [r7, #6]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e030      	b.n	800b0c6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <HAL_UART_Receive_DMA+0x94>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d01f      	beq.n	800b0b4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d018      	beq.n	800b0b4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	e853 3f00 	ldrex	r3, [r3]
 800b08e:	613b      	str	r3, [r7, #16]
   return(result);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b096:	627b      	str	r3, [r7, #36]	; 0x24
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	461a      	mov	r2, r3
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	623b      	str	r3, [r7, #32]
 800b0a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	69f9      	ldr	r1, [r7, #28]
 800b0a6:	6a3a      	ldr	r2, [r7, #32]
 800b0a8:	e841 2300 	strex	r3, r2, [r1]
 800b0ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e6      	bne.n	800b082 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b0b4:	88fb      	ldrh	r3, [r7, #6]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 ff88 	bl	800bfd0 <UART_Start_Receive_DMA>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	e000      	b.n	800b0c6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b0c4:	2302      	movs	r3, #2
  }
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3728      	adds	r7, #40	; 0x28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	40008000 	.word	0x40008000

0800b0d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b0ba      	sub	sp, #232	; 0xe8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b0fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b0fe:	f640 030f 	movw	r3, #2063	; 0x80f
 800b102:	4013      	ands	r3, r2
 800b104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d115      	bne.n	800b13c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b114:	f003 0320 	and.w	r3, r3, #32
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00f      	beq.n	800b13c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b120:	f003 0320 	and.w	r3, r3, #32
 800b124:	2b00      	cmp	r3, #0
 800b126:	d009      	beq.n	800b13c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 82ae 	beq.w	800b68e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	4798      	blx	r3
      }
      return;
 800b13a:	e2a8      	b.n	800b68e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b13c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 8117 	beq.w	800b374 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d106      	bne.n	800b160 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b152:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b156:	4b85      	ldr	r3, [pc, #532]	; (800b36c <HAL_UART_IRQHandler+0x298>)
 800b158:	4013      	ands	r3, r2
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 810a 	beq.w	800b374 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d011      	beq.n	800b190 <HAL_UART_IRQHandler+0xbc>
 800b16c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00b      	beq.n	800b190 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2201      	movs	r2, #1
 800b17e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b186:	f043 0201 	orr.w	r2, r3, #1
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d011      	beq.n	800b1c0 <HAL_UART_IRQHandler+0xec>
 800b19c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00b      	beq.n	800b1c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b6:	f043 0204 	orr.w	r2, r3, #4
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1c4:	f003 0304 	and.w	r3, r3, #4
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d011      	beq.n	800b1f0 <HAL_UART_IRQHandler+0x11c>
 800b1cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00b      	beq.n	800b1f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2204      	movs	r2, #4
 800b1de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1e6:	f043 0202 	orr.w	r2, r3, #2
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1f4:	f003 0308 	and.w	r3, r3, #8
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d017      	beq.n	800b22c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b200:	f003 0320 	and.w	r3, r3, #32
 800b204:	2b00      	cmp	r3, #0
 800b206:	d105      	bne.n	800b214 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b20c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00b      	beq.n	800b22c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2208      	movs	r2, #8
 800b21a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b222:	f043 0208 	orr.w	r2, r3, #8
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b234:	2b00      	cmp	r3, #0
 800b236:	d012      	beq.n	800b25e <HAL_UART_IRQHandler+0x18a>
 800b238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b23c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00c      	beq.n	800b25e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b24c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b254:	f043 0220 	orr.w	r2, r3, #32
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 8214 	beq.w	800b692 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26e:	f003 0320 	and.w	r3, r3, #32
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00d      	beq.n	800b292 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b27a:	f003 0320 	and.w	r3, r3, #32
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d007      	beq.n	800b292 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2a6:	2b40      	cmp	r3, #64	; 0x40
 800b2a8:	d005      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b2aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d04f      	beq.n	800b356 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 ff50 	bl	800c15c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c6:	2b40      	cmp	r3, #64	; 0x40
 800b2c8:	d141      	bne.n	800b34e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b2e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b2f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b2fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b30e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1d9      	bne.n	800b2ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d013      	beq.n	800b346 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b322:	4a13      	ldr	r2, [pc, #76]	; (800b370 <HAL_UART_IRQHandler+0x29c>)
 800b324:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fb f8ac 	bl	8006488 <HAL_DMA_Abort_IT>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d017      	beq.n	800b366 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b340:	4610      	mov	r0, r2
 800b342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b344:	e00f      	b.n	800b366 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f9c2 	bl	800b6d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b34c:	e00b      	b.n	800b366 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f9be 	bl	800b6d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b354:	e007      	b.n	800b366 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f9ba 	bl	800b6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b364:	e195      	b.n	800b692 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b366:	bf00      	nop
    return;
 800b368:	e193      	b.n	800b692 <HAL_UART_IRQHandler+0x5be>
 800b36a:	bf00      	nop
 800b36c:	04000120 	.word	0x04000120
 800b370:	0800c40d 	.word	0x0800c40d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b378:	2b01      	cmp	r3, #1
 800b37a:	f040 814e 	bne.w	800b61a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b382:	f003 0310 	and.w	r3, r3, #16
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 8147 	beq.w	800b61a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b390:	f003 0310 	and.w	r3, r3, #16
 800b394:	2b00      	cmp	r3, #0
 800b396:	f000 8140 	beq.w	800b61a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2210      	movs	r2, #16
 800b3a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ac:	2b40      	cmp	r3, #64	; 0x40
 800b3ae:	f040 80b8 	bne.w	800b522 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 8167 	beq.w	800b696 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b3ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	f080 815f 	bcs.w	800b696 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0320 	and.w	r3, r3, #32
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f040 8086 	bne.w	800b500 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b400:	e853 3f00 	ldrex	r3, [r3]
 800b404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b40c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	461a      	mov	r2, r3
 800b41a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b41e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b422:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b426:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b42a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b42e:	e841 2300 	strex	r3, r2, [r1]
 800b432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1da      	bne.n	800b3f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3308      	adds	r3, #8
 800b444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b448:	e853 3f00 	ldrex	r3, [r3]
 800b44c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b44e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b450:	f023 0301 	bic.w	r3, r3, #1
 800b454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3308      	adds	r3, #8
 800b45e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b462:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b466:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b468:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b46a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b46e:	e841 2300 	strex	r3, r2, [r1]
 800b472:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e1      	bne.n	800b43e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3308      	adds	r3, #8
 800b480:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b48a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b48c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3308      	adds	r3, #8
 800b49a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b49e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e3      	bne.n	800b47a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c8:	e853 3f00 	ldrex	r3, [r3]
 800b4cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4d0:	f023 0310 	bic.w	r3, r3, #16
 800b4d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4ea:	e841 2300 	strex	r3, r2, [r1]
 800b4ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1e4      	bne.n	800b4c0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fa ff86 	bl	800640c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2202      	movs	r2, #2
 800b504:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b512:	b29b      	uxth	r3, r3
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	b29b      	uxth	r3, r3
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f8e2 	bl	800b6e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b520:	e0b9      	b.n	800b696 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b52e:	b29b      	uxth	r3, r3
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 80ab 	beq.w	800b69a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800b544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 80a6 	beq.w	800b69a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	e853 3f00 	ldrex	r3, [r3]
 800b55a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b562:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	461a      	mov	r2, r3
 800b56c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b570:	647b      	str	r3, [r7, #68]	; 0x44
 800b572:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b574:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b578:	e841 2300 	strex	r3, r2, [r1]
 800b57c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e4      	bne.n	800b54e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3308      	adds	r3, #8
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	e853 3f00 	ldrex	r3, [r3]
 800b592:	623b      	str	r3, [r7, #32]
   return(result);
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	f023 0301 	bic.w	r3, r3, #1
 800b59a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b5a8:	633a      	str	r2, [r7, #48]	; 0x30
 800b5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e3      	bne.n	800b584 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2220      	movs	r2, #32
 800b5c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	e853 3f00 	ldrex	r3, [r3]
 800b5dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f023 0310 	bic.w	r3, r3, #16
 800b5e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b5f2:	61fb      	str	r3, [r7, #28]
 800b5f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f6:	69b9      	ldr	r1, [r7, #24]
 800b5f8:	69fa      	ldr	r2, [r7, #28]
 800b5fa:	e841 2300 	strex	r3, r2, [r1]
 800b5fe:	617b      	str	r3, [r7, #20]
   return(result);
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1e4      	bne.n	800b5d0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2202      	movs	r2, #2
 800b60a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b60c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f866 	bl	800b6e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b618:	e03f      	b.n	800b69a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b61e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00e      	beq.n	800b644 <HAL_UART_IRQHandler+0x570>
 800b626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b62a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d008      	beq.n	800b644 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b63a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 ff25 	bl	800c48c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b642:	e02d      	b.n	800b6a0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01c      	beq.n	800b69e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	4798      	blx	r3
    }
    return;
 800b66c:	e017      	b.n	800b69e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b676:	2b00      	cmp	r3, #0
 800b678:	d012      	beq.n	800b6a0 <HAL_UART_IRQHandler+0x5cc>
 800b67a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00c      	beq.n	800b6a0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fed6 	bl	800c438 <UART_EndTransmit_IT>
    return;
 800b68c:	e008      	b.n	800b6a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b68e:	bf00      	nop
 800b690:	e006      	b.n	800b6a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b692:	bf00      	nop
 800b694:	e004      	b.n	800b6a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b696:	bf00      	nop
 800b698:	e002      	b.n	800b6a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b69a:	bf00      	nop
 800b69c:	e000      	b.n	800b6a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b69e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b6a0:	37e8      	adds	r7, #232	; 0xe8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop

0800b6a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b700:	b08a      	sub	sp, #40	; 0x28
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	689a      	ldr	r2, [r3, #8]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	431a      	orrs	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	431a      	orrs	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	4313      	orrs	r3, r2
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	4ba4      	ldr	r3, [pc, #656]	; (800b9bc <UART_SetConfig+0x2c0>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b734:	430b      	orrs	r3, r1
 800b736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	68da      	ldr	r2, [r3, #12]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a99      	ldr	r2, [pc, #612]	; (800b9c0 <UART_SetConfig+0x2c4>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d004      	beq.n	800b768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b764:	4313      	orrs	r3, r2
 800b766:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b778:	430a      	orrs	r2, r1
 800b77a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a90      	ldr	r2, [pc, #576]	; (800b9c4 <UART_SetConfig+0x2c8>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d126      	bne.n	800b7d4 <UART_SetConfig+0xd8>
 800b786:	4b90      	ldr	r3, [pc, #576]	; (800b9c8 <UART_SetConfig+0x2cc>)
 800b788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b78c:	f003 0303 	and.w	r3, r3, #3
 800b790:	2b03      	cmp	r3, #3
 800b792:	d81b      	bhi.n	800b7cc <UART_SetConfig+0xd0>
 800b794:	a201      	add	r2, pc, #4	; (adr r2, 800b79c <UART_SetConfig+0xa0>)
 800b796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79a:	bf00      	nop
 800b79c:	0800b7ad 	.word	0x0800b7ad
 800b7a0:	0800b7bd 	.word	0x0800b7bd
 800b7a4:	0800b7b5 	.word	0x0800b7b5
 800b7a8:	0800b7c5 	.word	0x0800b7c5
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7b2:	e116      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7ba:	e112      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b7bc:	2304      	movs	r3, #4
 800b7be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7c2:	e10e      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b7c4:	2308      	movs	r3, #8
 800b7c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7ca:	e10a      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b7cc:	2310      	movs	r3, #16
 800b7ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7d2:	e106      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a7c      	ldr	r2, [pc, #496]	; (800b9cc <UART_SetConfig+0x2d0>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d138      	bne.n	800b850 <UART_SetConfig+0x154>
 800b7de:	4b7a      	ldr	r3, [pc, #488]	; (800b9c8 <UART_SetConfig+0x2cc>)
 800b7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e4:	f003 030c 	and.w	r3, r3, #12
 800b7e8:	2b0c      	cmp	r3, #12
 800b7ea:	d82d      	bhi.n	800b848 <UART_SetConfig+0x14c>
 800b7ec:	a201      	add	r2, pc, #4	; (adr r2, 800b7f4 <UART_SetConfig+0xf8>)
 800b7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f2:	bf00      	nop
 800b7f4:	0800b829 	.word	0x0800b829
 800b7f8:	0800b849 	.word	0x0800b849
 800b7fc:	0800b849 	.word	0x0800b849
 800b800:	0800b849 	.word	0x0800b849
 800b804:	0800b839 	.word	0x0800b839
 800b808:	0800b849 	.word	0x0800b849
 800b80c:	0800b849 	.word	0x0800b849
 800b810:	0800b849 	.word	0x0800b849
 800b814:	0800b831 	.word	0x0800b831
 800b818:	0800b849 	.word	0x0800b849
 800b81c:	0800b849 	.word	0x0800b849
 800b820:	0800b849 	.word	0x0800b849
 800b824:	0800b841 	.word	0x0800b841
 800b828:	2300      	movs	r3, #0
 800b82a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b82e:	e0d8      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b830:	2302      	movs	r3, #2
 800b832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b836:	e0d4      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b838:	2304      	movs	r3, #4
 800b83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b83e:	e0d0      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b840:	2308      	movs	r3, #8
 800b842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b846:	e0cc      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b848:	2310      	movs	r3, #16
 800b84a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b84e:	e0c8      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a5e      	ldr	r2, [pc, #376]	; (800b9d0 <UART_SetConfig+0x2d4>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d125      	bne.n	800b8a6 <UART_SetConfig+0x1aa>
 800b85a:	4b5b      	ldr	r3, [pc, #364]	; (800b9c8 <UART_SetConfig+0x2cc>)
 800b85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b860:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b864:	2b30      	cmp	r3, #48	; 0x30
 800b866:	d016      	beq.n	800b896 <UART_SetConfig+0x19a>
 800b868:	2b30      	cmp	r3, #48	; 0x30
 800b86a:	d818      	bhi.n	800b89e <UART_SetConfig+0x1a2>
 800b86c:	2b20      	cmp	r3, #32
 800b86e:	d00a      	beq.n	800b886 <UART_SetConfig+0x18a>
 800b870:	2b20      	cmp	r3, #32
 800b872:	d814      	bhi.n	800b89e <UART_SetConfig+0x1a2>
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <UART_SetConfig+0x182>
 800b878:	2b10      	cmp	r3, #16
 800b87a:	d008      	beq.n	800b88e <UART_SetConfig+0x192>
 800b87c:	e00f      	b.n	800b89e <UART_SetConfig+0x1a2>
 800b87e:	2300      	movs	r3, #0
 800b880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b884:	e0ad      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b886:	2302      	movs	r3, #2
 800b888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b88c:	e0a9      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b88e:	2304      	movs	r3, #4
 800b890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b894:	e0a5      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b896:	2308      	movs	r3, #8
 800b898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b89c:	e0a1      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b89e:	2310      	movs	r3, #16
 800b8a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b8a4:	e09d      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a4a      	ldr	r2, [pc, #296]	; (800b9d4 <UART_SetConfig+0x2d8>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d125      	bne.n	800b8fc <UART_SetConfig+0x200>
 800b8b0:	4b45      	ldr	r3, [pc, #276]	; (800b9c8 <UART_SetConfig+0x2cc>)
 800b8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b8ba:	2bc0      	cmp	r3, #192	; 0xc0
 800b8bc:	d016      	beq.n	800b8ec <UART_SetConfig+0x1f0>
 800b8be:	2bc0      	cmp	r3, #192	; 0xc0
 800b8c0:	d818      	bhi.n	800b8f4 <UART_SetConfig+0x1f8>
 800b8c2:	2b80      	cmp	r3, #128	; 0x80
 800b8c4:	d00a      	beq.n	800b8dc <UART_SetConfig+0x1e0>
 800b8c6:	2b80      	cmp	r3, #128	; 0x80
 800b8c8:	d814      	bhi.n	800b8f4 <UART_SetConfig+0x1f8>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d002      	beq.n	800b8d4 <UART_SetConfig+0x1d8>
 800b8ce:	2b40      	cmp	r3, #64	; 0x40
 800b8d0:	d008      	beq.n	800b8e4 <UART_SetConfig+0x1e8>
 800b8d2:	e00f      	b.n	800b8f4 <UART_SetConfig+0x1f8>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b8da:	e082      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b8dc:	2302      	movs	r3, #2
 800b8de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b8e2:	e07e      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b8e4:	2304      	movs	r3, #4
 800b8e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b8ea:	e07a      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b8ec:	2308      	movs	r3, #8
 800b8ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b8f2:	e076      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b8fa:	e072      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a35      	ldr	r2, [pc, #212]	; (800b9d8 <UART_SetConfig+0x2dc>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d12a      	bne.n	800b95c <UART_SetConfig+0x260>
 800b906:	4b30      	ldr	r3, [pc, #192]	; (800b9c8 <UART_SetConfig+0x2cc>)
 800b908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b90c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b914:	d01a      	beq.n	800b94c <UART_SetConfig+0x250>
 800b916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b91a:	d81b      	bhi.n	800b954 <UART_SetConfig+0x258>
 800b91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b920:	d00c      	beq.n	800b93c <UART_SetConfig+0x240>
 800b922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b926:	d815      	bhi.n	800b954 <UART_SetConfig+0x258>
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d003      	beq.n	800b934 <UART_SetConfig+0x238>
 800b92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b930:	d008      	beq.n	800b944 <UART_SetConfig+0x248>
 800b932:	e00f      	b.n	800b954 <UART_SetConfig+0x258>
 800b934:	2300      	movs	r3, #0
 800b936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b93a:	e052      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b93c:	2302      	movs	r3, #2
 800b93e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b942:	e04e      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b944:	2304      	movs	r3, #4
 800b946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b94a:	e04a      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b94c:	2308      	movs	r3, #8
 800b94e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b952:	e046      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b954:	2310      	movs	r3, #16
 800b956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b95a:	e042      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a17      	ldr	r2, [pc, #92]	; (800b9c0 <UART_SetConfig+0x2c4>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d13a      	bne.n	800b9dc <UART_SetConfig+0x2e0>
 800b966:	4b18      	ldr	r3, [pc, #96]	; (800b9c8 <UART_SetConfig+0x2cc>)
 800b968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b96c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b974:	d01a      	beq.n	800b9ac <UART_SetConfig+0x2b0>
 800b976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b97a:	d81b      	bhi.n	800b9b4 <UART_SetConfig+0x2b8>
 800b97c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b980:	d00c      	beq.n	800b99c <UART_SetConfig+0x2a0>
 800b982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b986:	d815      	bhi.n	800b9b4 <UART_SetConfig+0x2b8>
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <UART_SetConfig+0x298>
 800b98c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b990:	d008      	beq.n	800b9a4 <UART_SetConfig+0x2a8>
 800b992:	e00f      	b.n	800b9b4 <UART_SetConfig+0x2b8>
 800b994:	2300      	movs	r3, #0
 800b996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b99a:	e022      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b99c:	2302      	movs	r3, #2
 800b99e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9a2:	e01e      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b9a4:	2304      	movs	r3, #4
 800b9a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9aa:	e01a      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b9ac:	2308      	movs	r3, #8
 800b9ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9b2:	e016      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b9b4:	2310      	movs	r3, #16
 800b9b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9ba:	e012      	b.n	800b9e2 <UART_SetConfig+0x2e6>
 800b9bc:	efff69f3 	.word	0xefff69f3
 800b9c0:	40008000 	.word	0x40008000
 800b9c4:	40013800 	.word	0x40013800
 800b9c8:	40021000 	.word	0x40021000
 800b9cc:	40004400 	.word	0x40004400
 800b9d0:	40004800 	.word	0x40004800
 800b9d4:	40004c00 	.word	0x40004c00
 800b9d8:	40005000 	.word	0x40005000
 800b9dc:	2310      	movs	r3, #16
 800b9de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a9f      	ldr	r2, [pc, #636]	; (800bc64 <UART_SetConfig+0x568>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d17a      	bne.n	800bae2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b9ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9f0:	2b08      	cmp	r3, #8
 800b9f2:	d824      	bhi.n	800ba3e <UART_SetConfig+0x342>
 800b9f4:	a201      	add	r2, pc, #4	; (adr r2, 800b9fc <UART_SetConfig+0x300>)
 800b9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fa:	bf00      	nop
 800b9fc:	0800ba21 	.word	0x0800ba21
 800ba00:	0800ba3f 	.word	0x0800ba3f
 800ba04:	0800ba29 	.word	0x0800ba29
 800ba08:	0800ba3f 	.word	0x0800ba3f
 800ba0c:	0800ba2f 	.word	0x0800ba2f
 800ba10:	0800ba3f 	.word	0x0800ba3f
 800ba14:	0800ba3f 	.word	0x0800ba3f
 800ba18:	0800ba3f 	.word	0x0800ba3f
 800ba1c:	0800ba37 	.word	0x0800ba37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba20:	f7fe fa36 	bl	8009e90 <HAL_RCC_GetPCLK1Freq>
 800ba24:	61f8      	str	r0, [r7, #28]
        break;
 800ba26:	e010      	b.n	800ba4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba28:	4b8f      	ldr	r3, [pc, #572]	; (800bc68 <UART_SetConfig+0x56c>)
 800ba2a:	61fb      	str	r3, [r7, #28]
        break;
 800ba2c:	e00d      	b.n	800ba4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba2e:	f7fe f997 	bl	8009d60 <HAL_RCC_GetSysClockFreq>
 800ba32:	61f8      	str	r0, [r7, #28]
        break;
 800ba34:	e009      	b.n	800ba4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba3a:	61fb      	str	r3, [r7, #28]
        break;
 800ba3c:	e005      	b.n	800ba4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ba48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 80fb 	beq.w	800bc48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	4613      	mov	r3, r2
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	4413      	add	r3, r2
 800ba5c:	69fa      	ldr	r2, [r7, #28]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d305      	bcc.n	800ba6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ba68:	69fa      	ldr	r2, [r7, #28]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d903      	bls.n	800ba76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ba74:	e0e8      	b.n	800bc48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	461c      	mov	r4, r3
 800ba7c:	4615      	mov	r5, r2
 800ba7e:	f04f 0200 	mov.w	r2, #0
 800ba82:	f04f 0300 	mov.w	r3, #0
 800ba86:	022b      	lsls	r3, r5, #8
 800ba88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ba8c:	0222      	lsls	r2, r4, #8
 800ba8e:	68f9      	ldr	r1, [r7, #12]
 800ba90:	6849      	ldr	r1, [r1, #4]
 800ba92:	0849      	lsrs	r1, r1, #1
 800ba94:	2000      	movs	r0, #0
 800ba96:	4688      	mov	r8, r1
 800ba98:	4681      	mov	r9, r0
 800ba9a:	eb12 0a08 	adds.w	sl, r2, r8
 800ba9e:	eb43 0b09 	adc.w	fp, r3, r9
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	603b      	str	r3, [r7, #0]
 800baaa:	607a      	str	r2, [r7, #4]
 800baac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab0:	4650      	mov	r0, sl
 800bab2:	4659      	mov	r1, fp
 800bab4:	f7f4 fdde 	bl	8000674 <__aeabi_uldivmod>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	4613      	mov	r3, r2
 800babe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bac6:	d308      	bcc.n	800bada <UART_SetConfig+0x3de>
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bace:	d204      	bcs.n	800bada <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	69ba      	ldr	r2, [r7, #24]
 800bad6:	60da      	str	r2, [r3, #12]
 800bad8:	e0b6      	b.n	800bc48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bae0:	e0b2      	b.n	800bc48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	69db      	ldr	r3, [r3, #28]
 800bae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baea:	d15e      	bne.n	800bbaa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800baec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800baf0:	2b08      	cmp	r3, #8
 800baf2:	d828      	bhi.n	800bb46 <UART_SetConfig+0x44a>
 800baf4:	a201      	add	r2, pc, #4	; (adr r2, 800bafc <UART_SetConfig+0x400>)
 800baf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafa:	bf00      	nop
 800bafc:	0800bb21 	.word	0x0800bb21
 800bb00:	0800bb29 	.word	0x0800bb29
 800bb04:	0800bb31 	.word	0x0800bb31
 800bb08:	0800bb47 	.word	0x0800bb47
 800bb0c:	0800bb37 	.word	0x0800bb37
 800bb10:	0800bb47 	.word	0x0800bb47
 800bb14:	0800bb47 	.word	0x0800bb47
 800bb18:	0800bb47 	.word	0x0800bb47
 800bb1c:	0800bb3f 	.word	0x0800bb3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb20:	f7fe f9b6 	bl	8009e90 <HAL_RCC_GetPCLK1Freq>
 800bb24:	61f8      	str	r0, [r7, #28]
        break;
 800bb26:	e014      	b.n	800bb52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb28:	f7fe f9c8 	bl	8009ebc <HAL_RCC_GetPCLK2Freq>
 800bb2c:	61f8      	str	r0, [r7, #28]
        break;
 800bb2e:	e010      	b.n	800bb52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb30:	4b4d      	ldr	r3, [pc, #308]	; (800bc68 <UART_SetConfig+0x56c>)
 800bb32:	61fb      	str	r3, [r7, #28]
        break;
 800bb34:	e00d      	b.n	800bb52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb36:	f7fe f913 	bl	8009d60 <HAL_RCC_GetSysClockFreq>
 800bb3a:	61f8      	str	r0, [r7, #28]
        break;
 800bb3c:	e009      	b.n	800bb52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb42:	61fb      	str	r3, [r7, #28]
        break;
 800bb44:	e005      	b.n	800bb52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bb50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d077      	beq.n	800bc48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	005a      	lsls	r2, r3, #1
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	085b      	lsrs	r3, r3, #1
 800bb62:	441a      	add	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	2b0f      	cmp	r3, #15
 800bb72:	d916      	bls.n	800bba2 <UART_SetConfig+0x4a6>
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb7a:	d212      	bcs.n	800bba2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	f023 030f 	bic.w	r3, r3, #15
 800bb84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	085b      	lsrs	r3, r3, #1
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	f003 0307 	and.w	r3, r3, #7
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	8afb      	ldrh	r3, [r7, #22]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	8afa      	ldrh	r2, [r7, #22]
 800bb9e:	60da      	str	r2, [r3, #12]
 800bba0:	e052      	b.n	800bc48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bba8:	e04e      	b.n	800bc48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bbae:	2b08      	cmp	r3, #8
 800bbb0:	d827      	bhi.n	800bc02 <UART_SetConfig+0x506>
 800bbb2:	a201      	add	r2, pc, #4	; (adr r2, 800bbb8 <UART_SetConfig+0x4bc>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bbdd 	.word	0x0800bbdd
 800bbbc:	0800bbe5 	.word	0x0800bbe5
 800bbc0:	0800bbed 	.word	0x0800bbed
 800bbc4:	0800bc03 	.word	0x0800bc03
 800bbc8:	0800bbf3 	.word	0x0800bbf3
 800bbcc:	0800bc03 	.word	0x0800bc03
 800bbd0:	0800bc03 	.word	0x0800bc03
 800bbd4:	0800bc03 	.word	0x0800bc03
 800bbd8:	0800bbfb 	.word	0x0800bbfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbdc:	f7fe f958 	bl	8009e90 <HAL_RCC_GetPCLK1Freq>
 800bbe0:	61f8      	str	r0, [r7, #28]
        break;
 800bbe2:	e014      	b.n	800bc0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbe4:	f7fe f96a 	bl	8009ebc <HAL_RCC_GetPCLK2Freq>
 800bbe8:	61f8      	str	r0, [r7, #28]
        break;
 800bbea:	e010      	b.n	800bc0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbec:	4b1e      	ldr	r3, [pc, #120]	; (800bc68 <UART_SetConfig+0x56c>)
 800bbee:	61fb      	str	r3, [r7, #28]
        break;
 800bbf0:	e00d      	b.n	800bc0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbf2:	f7fe f8b5 	bl	8009d60 <HAL_RCC_GetSysClockFreq>
 800bbf6:	61f8      	str	r0, [r7, #28]
        break;
 800bbf8:	e009      	b.n	800bc0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbfe:	61fb      	str	r3, [r7, #28]
        break;
 800bc00:	e005      	b.n	800bc0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bc0c:	bf00      	nop
    }

    if (pclk != 0U)
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d019      	beq.n	800bc48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	085a      	lsrs	r2, r3, #1
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	2b0f      	cmp	r3, #15
 800bc2c:	d909      	bls.n	800bc42 <UART_SetConfig+0x546>
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc34:	d205      	bcs.n	800bc42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60da      	str	r2, [r3, #12]
 800bc40:	e002      	b.n	800bc48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bc54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3728      	adds	r7, #40	; 0x28
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc62:	bf00      	nop
 800bc64:	40008000 	.word	0x40008000
 800bc68:	00f42400 	.word	0x00f42400

0800bc6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	f003 0308 	and.w	r3, r3, #8
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00a      	beq.n	800bc96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	430a      	orrs	r2, r1
 800bc94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00a      	beq.n	800bcb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	f003 0302 	and.w	r3, r3, #2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00a      	beq.n	800bcda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	f003 0304 	and.w	r3, r3, #4
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00a      	beq.n	800bcfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	f003 0310 	and.w	r3, r3, #16
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00a      	beq.n	800bd1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	430a      	orrs	r2, r1
 800bd1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd22:	f003 0320 	and.w	r3, r3, #32
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d01a      	beq.n	800bd82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd6a:	d10a      	bne.n	800bd82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	605a      	str	r2, [r3, #4]
  }
}
 800bda4:	bf00      	nop
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b098      	sub	sp, #96	; 0x60
 800bdb4:	af02      	add	r7, sp, #8
 800bdb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bdc0:	f7f8 fc2a 	bl	8004618 <HAL_GetTick>
 800bdc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0308 	and.w	r3, r3, #8
 800bdd0:	2b08      	cmp	r3, #8
 800bdd2:	d12e      	bne.n	800be32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bddc:	2200      	movs	r2, #0
 800bdde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f88c 	bl	800bf00 <UART_WaitOnFlagUntilTimeout>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d021      	beq.n	800be32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf6:	e853 3f00 	ldrex	r3, [r3]
 800bdfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be02:	653b      	str	r3, [r7, #80]	; 0x50
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	461a      	mov	r2, r3
 800be0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be0c:	647b      	str	r3, [r7, #68]	; 0x44
 800be0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be14:	e841 2300 	strex	r3, r2, [r1]
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1e6      	bne.n	800bdee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2220      	movs	r2, #32
 800be24:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	e062      	b.n	800bef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	d149      	bne.n	800bed4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be48:	2200      	movs	r2, #0
 800be4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f856 	bl	800bf00 <UART_WaitOnFlagUntilTimeout>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d03c      	beq.n	800bed4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	e853 3f00 	ldrex	r3, [r3]
 800be66:	623b      	str	r3, [r7, #32]
   return(result);
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	461a      	mov	r2, r3
 800be76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be78:	633b      	str	r3, [r7, #48]	; 0x30
 800be7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be80:	e841 2300 	strex	r3, r2, [r1]
 800be84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1e6      	bne.n	800be5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3308      	adds	r3, #8
 800be92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	e853 3f00 	ldrex	r3, [r3]
 800be9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f023 0301 	bic.w	r3, r3, #1
 800bea2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	3308      	adds	r3, #8
 800beaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beac:	61fa      	str	r2, [r7, #28]
 800beae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb0:	69b9      	ldr	r1, [r7, #24]
 800beb2:	69fa      	ldr	r2, [r7, #28]
 800beb4:	e841 2300 	strex	r3, r2, [r1]
 800beb8:	617b      	str	r3, [r7, #20]
   return(result);
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1e5      	bne.n	800be8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2220      	movs	r2, #32
 800bec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e011      	b.n	800bef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2220      	movs	r2, #32
 800bed8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2220      	movs	r2, #32
 800bede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3758      	adds	r7, #88	; 0x58
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf10:	e049      	b.n	800bfa6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf18:	d045      	beq.n	800bfa6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf1a:	f7f8 fb7d 	bl	8004618 <HAL_GetTick>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d302      	bcc.n	800bf30 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e048      	b.n	800bfc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 0304 	and.w	r3, r3, #4
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d031      	beq.n	800bfa6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	f003 0308 	and.w	r3, r3, #8
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	d110      	bne.n	800bf72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2208      	movs	r2, #8
 800bf56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f000 f8ff 	bl	800c15c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2208      	movs	r2, #8
 800bf62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e029      	b.n	800bfc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	69db      	ldr	r3, [r3, #28]
 800bf78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf80:	d111      	bne.n	800bfa6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 f8e5 	bl	800c15c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2220      	movs	r2, #32
 800bf96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e00f      	b.n	800bfc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	69da      	ldr	r2, [r3, #28]
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	4013      	ands	r3, r2
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	bf0c      	ite	eq
 800bfb6:	2301      	moveq	r3, #1
 800bfb8:	2300      	movne	r3, #0
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	79fb      	ldrb	r3, [r7, #7]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d0a6      	beq.n	800bf12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b096      	sub	sp, #88	; 0x58
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	88fa      	ldrh	r2, [r7, #6]
 800bfe8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2222      	movs	r2, #34	; 0x22
 800bff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c000:	2b00      	cmp	r3, #0
 800c002:	d028      	beq.n	800c056 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c008:	4a3e      	ldr	r2, [pc, #248]	; (800c104 <UART_Start_Receive_DMA+0x134>)
 800c00a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c010:	4a3d      	ldr	r2, [pc, #244]	; (800c108 <UART_Start_Receive_DMA+0x138>)
 800c012:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c018:	4a3c      	ldr	r2, [pc, #240]	; (800c10c <UART_Start_Receive_DMA+0x13c>)
 800c01a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c020:	2200      	movs	r2, #0
 800c022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3324      	adds	r3, #36	; 0x24
 800c02e:	4619      	mov	r1, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c034:	461a      	mov	r2, r3
 800c036:	88fb      	ldrh	r3, [r7, #6]
 800c038:	f7fa f988 	bl	800634c <HAL_DMA_Start_IT>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2210      	movs	r2, #16
 800c046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2220      	movs	r2, #32
 800c04e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e051      	b.n	800c0fa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d018      	beq.n	800c090 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c066:	e853 3f00 	ldrex	r3, [r3]
 800c06a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c072:	657b      	str	r3, [r7, #84]	; 0x54
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	461a      	mov	r2, r3
 800c07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c07c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c07e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c080:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c084:	e841 2300 	strex	r3, r2, [r1]
 800c088:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e6      	bne.n	800c05e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	3308      	adds	r3, #8
 800c096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	e853 3f00 	ldrex	r3, [r3]
 800c09e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	f043 0301 	orr.w	r3, r3, #1
 800c0a6:	653b      	str	r3, [r7, #80]	; 0x50
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0b0:	637a      	str	r2, [r7, #52]	; 0x34
 800c0b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0b8:	e841 2300 	strex	r3, r2, [r1]
 800c0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1e5      	bne.n	800c090 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	e853 3f00 	ldrex	r3, [r3]
 800c0d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3308      	adds	r3, #8
 800c0e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0e4:	623a      	str	r2, [r7, #32]
 800c0e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e8:	69f9      	ldr	r1, [r7, #28]
 800c0ea:	6a3a      	ldr	r2, [r7, #32]
 800c0ec:	e841 2300 	strex	r3, r2, [r1]
 800c0f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1e5      	bne.n	800c0c4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3758      	adds	r7, #88	; 0x58
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	0800c225 	.word	0x0800c225
 800c108:	0800c351 	.word	0x0800c351
 800c10c:	0800c38f 	.word	0x0800c38f

0800c110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c110:	b480      	push	{r7}
 800c112:	b089      	sub	sp, #36	; 0x24
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	60bb      	str	r3, [r7, #8]
   return(result);
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c12c:	61fb      	str	r3, [r7, #28]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	61bb      	str	r3, [r7, #24]
 800c138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6979      	ldr	r1, [r7, #20]
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	613b      	str	r3, [r7, #16]
   return(result);
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e6      	bne.n	800c118 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2220      	movs	r2, #32
 800c14e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c150:	bf00      	nop
 800c152:	3724      	adds	r7, #36	; 0x24
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b095      	sub	sp, #84	; 0x54
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16c:	e853 3f00 	ldrex	r3, [r3]
 800c170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	461a      	mov	r2, r3
 800c180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c182:	643b      	str	r3, [r7, #64]	; 0x40
 800c184:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e6      	bne.n	800c164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3308      	adds	r3, #8
 800c19c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19e:	6a3b      	ldr	r3, [r7, #32]
 800c1a0:	e853 3f00 	ldrex	r3, [r3]
 800c1a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	f023 0301 	bic.w	r3, r3, #1
 800c1ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1be:	e841 2300 	strex	r3, r2, [r1]
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1e5      	bne.n	800c196 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d118      	bne.n	800c204 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	e853 3f00 	ldrex	r3, [r3]
 800c1de:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f023 0310 	bic.w	r3, r3, #16
 800c1e6:	647b      	str	r3, [r7, #68]	; 0x44
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f0:	61bb      	str	r3, [r7, #24]
 800c1f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f4:	6979      	ldr	r1, [r7, #20]
 800c1f6:	69ba      	ldr	r2, [r7, #24]
 800c1f8:	e841 2300 	strex	r3, r2, [r1]
 800c1fc:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1e6      	bne.n	800c1d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2220      	movs	r2, #32
 800c208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c218:	bf00      	nop
 800c21a:	3754      	adds	r7, #84	; 0x54
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b09c      	sub	sp, #112	; 0x70
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c230:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0320 	and.w	r3, r3, #32
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d171      	bne.n	800c324 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c242:	2200      	movs	r2, #0
 800c244:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c250:	e853 3f00 	ldrex	r3, [r3]
 800c254:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c25c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	461a      	mov	r2, r3
 800c264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c266:	65bb      	str	r3, [r7, #88]	; 0x58
 800c268:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c26c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c26e:	e841 2300 	strex	r3, r2, [r1]
 800c272:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1e6      	bne.n	800c248 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c27a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3308      	adds	r3, #8
 800c280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c284:	e853 3f00 	ldrex	r3, [r3]
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28c:	f023 0301 	bic.w	r3, r3, #1
 800c290:	667b      	str	r3, [r7, #100]	; 0x64
 800c292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	3308      	adds	r3, #8
 800c298:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c29a:	647a      	str	r2, [r7, #68]	; 0x44
 800c29c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c29e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2a2:	e841 2300 	strex	r3, r2, [r1]
 800c2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1e5      	bne.n	800c27a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3308      	adds	r3, #8
 800c2b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b8:	e853 3f00 	ldrex	r3, [r3]
 800c2bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2c4:	663b      	str	r3, [r7, #96]	; 0x60
 800c2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2ce:	633a      	str	r2, [r7, #48]	; 0x30
 800c2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e5      	bne.n	800c2ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d118      	bne.n	800c324 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	e853 3f00 	ldrex	r3, [r3]
 800c2fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f023 0310 	bic.w	r3, r3, #16
 800c306:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	461a      	mov	r2, r3
 800c30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c310:	61fb      	str	r3, [r7, #28]
 800c312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c314:	69b9      	ldr	r1, [r7, #24]
 800c316:	69fa      	ldr	r2, [r7, #28]
 800c318:	e841 2300 	strex	r3, r2, [r1]
 800c31c:	617b      	str	r3, [r7, #20]
   return(result);
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1e6      	bne.n	800c2f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c326:	2200      	movs	r2, #0
 800c328:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c32c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d107      	bne.n	800c342 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c334:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c338:	4619      	mov	r1, r3
 800c33a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c33c:	f7ff f9d2 	bl	800b6e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c340:	e002      	b.n	800c348 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c342:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c344:	f7f7 fbbe 	bl	8003ac4 <HAL_UART_RxCpltCallback>
}
 800c348:	bf00      	nop
 800c34a:	3770      	adds	r7, #112	; 0x70
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2201      	movs	r2, #1
 800c362:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d109      	bne.n	800c380 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c372:	085b      	lsrs	r3, r3, #1
 800c374:	b29b      	uxth	r3, r3
 800c376:	4619      	mov	r1, r3
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff f9b3 	bl	800b6e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c37e:	e002      	b.n	800c386 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f7ff f99b 	bl	800b6bc <HAL_UART_RxHalfCpltCallback>
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b086      	sub	sp, #24
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3b4:	2b80      	cmp	r3, #128	; 0x80
 800c3b6:	d109      	bne.n	800c3cc <UART_DMAError+0x3e>
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	2b21      	cmp	r3, #33	; 0x21
 800c3bc:	d106      	bne.n	800c3cc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c3c6:	6978      	ldr	r0, [r7, #20]
 800c3c8:	f7ff fea2 	bl	800c110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d6:	2b40      	cmp	r3, #64	; 0x40
 800c3d8:	d109      	bne.n	800c3ee <UART_DMAError+0x60>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2b22      	cmp	r3, #34	; 0x22
 800c3de:	d106      	bne.n	800c3ee <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c3e8:	6978      	ldr	r0, [r7, #20]
 800c3ea:	f7ff feb7 	bl	800c15c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3f4:	f043 0210 	orr.w	r2, r3, #16
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3fe:	6978      	ldr	r0, [r7, #20]
 800c400:	f7ff f966 	bl	800b6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c404:	bf00      	nop
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f7ff f950 	bl	800b6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b088      	sub	sp, #32
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	e853 3f00 	ldrex	r3, [r3]
 800c44c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c454:	61fb      	str	r3, [r7, #28]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	61bb      	str	r3, [r7, #24]
 800c460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c462:	6979      	ldr	r1, [r7, #20]
 800c464:	69ba      	ldr	r2, [r7, #24]
 800c466:	e841 2300 	strex	r3, r2, [r1]
 800c46a:	613b      	str	r3, [r7, #16]
   return(result);
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1e6      	bne.n	800c440 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2220      	movs	r2, #32
 800c476:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff f912 	bl	800b6a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c484:	bf00      	nop
 800c486:	3720      	adds	r7, #32
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <memset>:
 800c4a0:	4402      	add	r2, r0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d100      	bne.n	800c4aa <memset+0xa>
 800c4a8:	4770      	bx	lr
 800c4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ae:	e7f9      	b.n	800c4a4 <memset+0x4>

0800c4b0 <__libc_init_array>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	4d0d      	ldr	r5, [pc, #52]	; (800c4e8 <__libc_init_array+0x38>)
 800c4b4:	4c0d      	ldr	r4, [pc, #52]	; (800c4ec <__libc_init_array+0x3c>)
 800c4b6:	1b64      	subs	r4, r4, r5
 800c4b8:	10a4      	asrs	r4, r4, #2
 800c4ba:	2600      	movs	r6, #0
 800c4bc:	42a6      	cmp	r6, r4
 800c4be:	d109      	bne.n	800c4d4 <__libc_init_array+0x24>
 800c4c0:	4d0b      	ldr	r5, [pc, #44]	; (800c4f0 <__libc_init_array+0x40>)
 800c4c2:	4c0c      	ldr	r4, [pc, #48]	; (800c4f4 <__libc_init_array+0x44>)
 800c4c4:	f000 f818 	bl	800c4f8 <_init>
 800c4c8:	1b64      	subs	r4, r4, r5
 800c4ca:	10a4      	asrs	r4, r4, #2
 800c4cc:	2600      	movs	r6, #0
 800c4ce:	42a6      	cmp	r6, r4
 800c4d0:	d105      	bne.n	800c4de <__libc_init_array+0x2e>
 800c4d2:	bd70      	pop	{r4, r5, r6, pc}
 800c4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4d8:	4798      	blx	r3
 800c4da:	3601      	adds	r6, #1
 800c4dc:	e7ee      	b.n	800c4bc <__libc_init_array+0xc>
 800c4de:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e2:	4798      	blx	r3
 800c4e4:	3601      	adds	r6, #1
 800c4e6:	e7f2      	b.n	800c4ce <__libc_init_array+0x1e>
 800c4e8:	0800c588 	.word	0x0800c588
 800c4ec:	0800c588 	.word	0x0800c588
 800c4f0:	0800c588 	.word	0x0800c588
 800c4f4:	0800c5a8 	.word	0x0800c5a8

0800c4f8 <_init>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	bf00      	nop
 800c4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4fe:	bc08      	pop	{r3}
 800c500:	469e      	mov	lr, r3
 800c502:	4770      	bx	lr

0800c504 <_fini>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	bf00      	nop
 800c508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50a:	bc08      	pop	{r3}
 800c50c:	469e      	mov	lr, r3
 800c50e:	4770      	bx	lr
