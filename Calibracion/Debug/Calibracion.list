
Calibracion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be04  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800bfb0  0800bfb0  0000cfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c020  0800c020  0000e36c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c020  0800c020  0000d020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c028  0800c028  0000e36c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800c028  0800c028  0000d028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c048  0800c048  0000d048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0800c04c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de4  2000036c  0800c3b8  0000e36c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  0800c3b8  0000f150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e36c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053b20  00000000  00000000  0000e39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007dfc  00000000  00000000  00061ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  00069cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170c  00000000  00000000  0006ba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033c18  00000000  00000000  0006d184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002df40  00000000  00000000  000a0d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124954  00000000  00000000  000cecdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f3630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e08  00000000  00000000  001f3674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001fb47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000036c 	.word	0x2000036c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800bf98 	.word	0x0800bf98

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000370 	.word	0x20000370
 80001e8:	0800bf98 	.word	0x0800bf98

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__gedf2>:
 8000564:	f04f 3cff 	mov.w	ip, #4294967295
 8000568:	e006      	b.n	8000578 <__cmpdf2+0x4>
 800056a:	bf00      	nop

0800056c <__ledf2>:
 800056c:	f04f 0c01 	mov.w	ip, #1
 8000570:	e002      	b.n	8000578 <__cmpdf2+0x4>
 8000572:	bf00      	nop

08000574 <__cmpdf2>:
 8000574:	f04f 0c01 	mov.w	ip, #1
 8000578:	f84d cd04 	str.w	ip, [sp, #-4]!
 800057c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000588:	bf18      	it	ne
 800058a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800058e:	d01b      	beq.n	80005c8 <__cmpdf2+0x54>
 8000590:	b001      	add	sp, #4
 8000592:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000596:	bf0c      	ite	eq
 8000598:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800059c:	ea91 0f03 	teqne	r1, r3
 80005a0:	bf02      	ittt	eq
 80005a2:	ea90 0f02 	teqeq	r0, r2
 80005a6:	2000      	moveq	r0, #0
 80005a8:	4770      	bxeq	lr
 80005aa:	f110 0f00 	cmn.w	r0, #0
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf58      	it	pl
 80005b4:	4299      	cmppl	r1, r3
 80005b6:	bf08      	it	eq
 80005b8:	4290      	cmpeq	r0, r2
 80005ba:	bf2c      	ite	cs
 80005bc:	17d8      	asrcs	r0, r3, #31
 80005be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005c2:	f040 0001 	orr.w	r0, r0, #1
 80005c6:	4770      	bx	lr
 80005c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005d0:	d102      	bne.n	80005d8 <__cmpdf2+0x64>
 80005d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005d6:	d107      	bne.n	80005e8 <__cmpdf2+0x74>
 80005d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e0:	d1d6      	bne.n	8000590 <__cmpdf2+0x1c>
 80005e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005e6:	d0d3      	beq.n	8000590 <__cmpdf2+0x1c>
 80005e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_cdrcmple>:
 80005f0:	4684      	mov	ip, r0
 80005f2:	4610      	mov	r0, r2
 80005f4:	4662      	mov	r2, ip
 80005f6:	468c      	mov	ip, r1
 80005f8:	4619      	mov	r1, r3
 80005fa:	4663      	mov	r3, ip
 80005fc:	e000      	b.n	8000600 <__aeabi_cdcmpeq>
 80005fe:	bf00      	nop

08000600 <__aeabi_cdcmpeq>:
 8000600:	b501      	push	{r0, lr}
 8000602:	f7ff ffb7 	bl	8000574 <__cmpdf2>
 8000606:	2800      	cmp	r0, #0
 8000608:	bf48      	it	mi
 800060a:	f110 0f00 	cmnmi.w	r0, #0
 800060e:	bd01      	pop	{r0, pc}

08000610 <__aeabi_dcmpeq>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff fff4 	bl	8000600 <__aeabi_cdcmpeq>
 8000618:	bf0c      	ite	eq
 800061a:	2001      	moveq	r0, #1
 800061c:	2000      	movne	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmplt>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffea 	bl	8000600 <__aeabi_cdcmpeq>
 800062c:	bf34      	ite	cc
 800062e:	2001      	movcc	r0, #1
 8000630:	2000      	movcs	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmple>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffe0 	bl	8000600 <__aeabi_cdcmpeq>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpge>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffce 	bl	80005f0 <__aeabi_cdrcmple>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpgt>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffc4 	bl	80005f0 <__aeabi_cdrcmple>
 8000668:	bf34      	ite	cc
 800066a:	2001      	movcc	r0, #1
 800066c:	2000      	movcs	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_uldivmod>:
 8000674:	b953      	cbnz	r3, 800068c <__aeabi_uldivmod+0x18>
 8000676:	b94a      	cbnz	r2, 800068c <__aeabi_uldivmod+0x18>
 8000678:	2900      	cmp	r1, #0
 800067a:	bf08      	it	eq
 800067c:	2800      	cmpeq	r0, #0
 800067e:	bf1c      	itt	ne
 8000680:	f04f 31ff 	movne.w	r1, #4294967295
 8000684:	f04f 30ff 	movne.w	r0, #4294967295
 8000688:	f000 b96a 	b.w	8000960 <__aeabi_idiv0>
 800068c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000690:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000694:	f000 f806 	bl	80006a4 <__udivmoddi4>
 8000698:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a0:	b004      	add	sp, #16
 80006a2:	4770      	bx	lr

080006a4 <__udivmoddi4>:
 80006a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a8:	9d08      	ldr	r5, [sp, #32]
 80006aa:	460c      	mov	r4, r1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d14e      	bne.n	800074e <__udivmoddi4+0xaa>
 80006b0:	4694      	mov	ip, r2
 80006b2:	458c      	cmp	ip, r1
 80006b4:	4686      	mov	lr, r0
 80006b6:	fab2 f282 	clz	r2, r2
 80006ba:	d962      	bls.n	8000782 <__udivmoddi4+0xde>
 80006bc:	b14a      	cbz	r2, 80006d2 <__udivmoddi4+0x2e>
 80006be:	f1c2 0320 	rsb	r3, r2, #32
 80006c2:	4091      	lsls	r1, r2
 80006c4:	fa20 f303 	lsr.w	r3, r0, r3
 80006c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80006cc:	4319      	orrs	r1, r3
 80006ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80006d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006d6:	fa1f f68c 	uxth.w	r6, ip
 80006da:	fbb1 f4f7 	udiv	r4, r1, r7
 80006de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006e2:	fb07 1114 	mls	r1, r7, r4, r1
 80006e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ea:	fb04 f106 	mul.w	r1, r4, r6
 80006ee:	4299      	cmp	r1, r3
 80006f0:	d90a      	bls.n	8000708 <__udivmoddi4+0x64>
 80006f2:	eb1c 0303 	adds.w	r3, ip, r3
 80006f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80006fa:	f080 8112 	bcs.w	8000922 <__udivmoddi4+0x27e>
 80006fe:	4299      	cmp	r1, r3
 8000700:	f240 810f 	bls.w	8000922 <__udivmoddi4+0x27e>
 8000704:	3c02      	subs	r4, #2
 8000706:	4463      	add	r3, ip
 8000708:	1a59      	subs	r1, r3, r1
 800070a:	fa1f f38e 	uxth.w	r3, lr
 800070e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000712:	fb07 1110 	mls	r1, r7, r0, r1
 8000716:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071a:	fb00 f606 	mul.w	r6, r0, r6
 800071e:	429e      	cmp	r6, r3
 8000720:	d90a      	bls.n	8000738 <__udivmoddi4+0x94>
 8000722:	eb1c 0303 	adds.w	r3, ip, r3
 8000726:	f100 31ff 	add.w	r1, r0, #4294967295
 800072a:	f080 80fc 	bcs.w	8000926 <__udivmoddi4+0x282>
 800072e:	429e      	cmp	r6, r3
 8000730:	f240 80f9 	bls.w	8000926 <__udivmoddi4+0x282>
 8000734:	4463      	add	r3, ip
 8000736:	3802      	subs	r0, #2
 8000738:	1b9b      	subs	r3, r3, r6
 800073a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800073e:	2100      	movs	r1, #0
 8000740:	b11d      	cbz	r5, 800074a <__udivmoddi4+0xa6>
 8000742:	40d3      	lsrs	r3, r2
 8000744:	2200      	movs	r2, #0
 8000746:	e9c5 3200 	strd	r3, r2, [r5]
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	428b      	cmp	r3, r1
 8000750:	d905      	bls.n	800075e <__udivmoddi4+0xba>
 8000752:	b10d      	cbz	r5, 8000758 <__udivmoddi4+0xb4>
 8000754:	e9c5 0100 	strd	r0, r1, [r5]
 8000758:	2100      	movs	r1, #0
 800075a:	4608      	mov	r0, r1
 800075c:	e7f5      	b.n	800074a <__udivmoddi4+0xa6>
 800075e:	fab3 f183 	clz	r1, r3
 8000762:	2900      	cmp	r1, #0
 8000764:	d146      	bne.n	80007f4 <__udivmoddi4+0x150>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d302      	bcc.n	8000770 <__udivmoddi4+0xcc>
 800076a:	4290      	cmp	r0, r2
 800076c:	f0c0 80f0 	bcc.w	8000950 <__udivmoddi4+0x2ac>
 8000770:	1a86      	subs	r6, r0, r2
 8000772:	eb64 0303 	sbc.w	r3, r4, r3
 8000776:	2001      	movs	r0, #1
 8000778:	2d00      	cmp	r5, #0
 800077a:	d0e6      	beq.n	800074a <__udivmoddi4+0xa6>
 800077c:	e9c5 6300 	strd	r6, r3, [r5]
 8000780:	e7e3      	b.n	800074a <__udivmoddi4+0xa6>
 8000782:	2a00      	cmp	r2, #0
 8000784:	f040 8090 	bne.w	80008a8 <__udivmoddi4+0x204>
 8000788:	eba1 040c 	sub.w	r4, r1, ip
 800078c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000790:	fa1f f78c 	uxth.w	r7, ip
 8000794:	2101      	movs	r1, #1
 8000796:	fbb4 f6f8 	udiv	r6, r4, r8
 800079a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800079e:	fb08 4416 	mls	r4, r8, r6, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb07 f006 	mul.w	r0, r7, r6
 80007aa:	4298      	cmp	r0, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x11c>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x11a>
 80007b8:	4298      	cmp	r0, r3
 80007ba:	f200 80cd 	bhi.w	8000958 <__udivmoddi4+0x2b4>
 80007be:	4626      	mov	r6, r4
 80007c0:	1a1c      	subs	r4, r3, r0
 80007c2:	fa1f f38e 	uxth.w	r3, lr
 80007c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ca:	fb08 4410 	mls	r4, r8, r0, r4
 80007ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007d2:	fb00 f707 	mul.w	r7, r0, r7
 80007d6:	429f      	cmp	r7, r3
 80007d8:	d908      	bls.n	80007ec <__udivmoddi4+0x148>
 80007da:	eb1c 0303 	adds.w	r3, ip, r3
 80007de:	f100 34ff 	add.w	r4, r0, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0x146>
 80007e4:	429f      	cmp	r7, r3
 80007e6:	f200 80b0 	bhi.w	800094a <__udivmoddi4+0x2a6>
 80007ea:	4620      	mov	r0, r4
 80007ec:	1bdb      	subs	r3, r3, r7
 80007ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007f2:	e7a5      	b.n	8000740 <__udivmoddi4+0x9c>
 80007f4:	f1c1 0620 	rsb	r6, r1, #32
 80007f8:	408b      	lsls	r3, r1
 80007fa:	fa22 f706 	lsr.w	r7, r2, r6
 80007fe:	431f      	orrs	r7, r3
 8000800:	fa20 fc06 	lsr.w	ip, r0, r6
 8000804:	fa04 f301 	lsl.w	r3, r4, r1
 8000808:	ea43 030c 	orr.w	r3, r3, ip
 800080c:	40f4      	lsrs	r4, r6
 800080e:	fa00 f801 	lsl.w	r8, r0, r1
 8000812:	0c38      	lsrs	r0, r7, #16
 8000814:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000818:	fbb4 fef0 	udiv	lr, r4, r0
 800081c:	fa1f fc87 	uxth.w	ip, r7
 8000820:	fb00 441e 	mls	r4, r0, lr, r4
 8000824:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000828:	fb0e f90c 	mul.w	r9, lr, ip
 800082c:	45a1      	cmp	r9, r4
 800082e:	fa02 f201 	lsl.w	r2, r2, r1
 8000832:	d90a      	bls.n	800084a <__udivmoddi4+0x1a6>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f10e 3aff 	add.w	sl, lr, #4294967295
 800083a:	f080 8084 	bcs.w	8000946 <__udivmoddi4+0x2a2>
 800083e:	45a1      	cmp	r9, r4
 8000840:	f240 8081 	bls.w	8000946 <__udivmoddi4+0x2a2>
 8000844:	f1ae 0e02 	sub.w	lr, lr, #2
 8000848:	443c      	add	r4, r7
 800084a:	eba4 0409 	sub.w	r4, r4, r9
 800084e:	fa1f f983 	uxth.w	r9, r3
 8000852:	fbb4 f3f0 	udiv	r3, r4, r0
 8000856:	fb00 4413 	mls	r4, r0, r3, r4
 800085a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800085e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000862:	45a4      	cmp	ip, r4
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x1d2>
 8000866:	193c      	adds	r4, r7, r4
 8000868:	f103 30ff 	add.w	r0, r3, #4294967295
 800086c:	d267      	bcs.n	800093e <__udivmoddi4+0x29a>
 800086e:	45a4      	cmp	ip, r4
 8000870:	d965      	bls.n	800093e <__udivmoddi4+0x29a>
 8000872:	3b02      	subs	r3, #2
 8000874:	443c      	add	r4, r7
 8000876:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800087a:	fba0 9302 	umull	r9, r3, r0, r2
 800087e:	eba4 040c 	sub.w	r4, r4, ip
 8000882:	429c      	cmp	r4, r3
 8000884:	46ce      	mov	lr, r9
 8000886:	469c      	mov	ip, r3
 8000888:	d351      	bcc.n	800092e <__udivmoddi4+0x28a>
 800088a:	d04e      	beq.n	800092a <__udivmoddi4+0x286>
 800088c:	b155      	cbz	r5, 80008a4 <__udivmoddi4+0x200>
 800088e:	ebb8 030e 	subs.w	r3, r8, lr
 8000892:	eb64 040c 	sbc.w	r4, r4, ip
 8000896:	fa04 f606 	lsl.w	r6, r4, r6
 800089a:	40cb      	lsrs	r3, r1
 800089c:	431e      	orrs	r6, r3
 800089e:	40cc      	lsrs	r4, r1
 80008a0:	e9c5 6400 	strd	r6, r4, [r5]
 80008a4:	2100      	movs	r1, #0
 80008a6:	e750      	b.n	800074a <__udivmoddi4+0xa6>
 80008a8:	f1c2 0320 	rsb	r3, r2, #32
 80008ac:	fa20 f103 	lsr.w	r1, r0, r3
 80008b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b4:	fa24 f303 	lsr.w	r3, r4, r3
 80008b8:	4094      	lsls	r4, r2
 80008ba:	430c      	orrs	r4, r1
 80008bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3110 	mls	r1, r8, r0, r3
 80008d0:	0c23      	lsrs	r3, r4, #16
 80008d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008d6:	fb00 f107 	mul.w	r1, r0, r7
 80008da:	4299      	cmp	r1, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x24c>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80008e6:	d22c      	bcs.n	8000942 <__udivmoddi4+0x29e>
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d92a      	bls.n	8000942 <__udivmoddi4+0x29e>
 80008ec:	3802      	subs	r0, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1a5b      	subs	r3, r3, r1
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80008f8:	fb08 3311 	mls	r3, r8, r1, r3
 80008fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000900:	fb01 f307 	mul.w	r3, r1, r7
 8000904:	42a3      	cmp	r3, r4
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x276>
 8000908:	eb1c 0404 	adds.w	r4, ip, r4
 800090c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000910:	d213      	bcs.n	800093a <__udivmoddi4+0x296>
 8000912:	42a3      	cmp	r3, r4
 8000914:	d911      	bls.n	800093a <__udivmoddi4+0x296>
 8000916:	3902      	subs	r1, #2
 8000918:	4464      	add	r4, ip
 800091a:	1ae4      	subs	r4, r4, r3
 800091c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000920:	e739      	b.n	8000796 <__udivmoddi4+0xf2>
 8000922:	4604      	mov	r4, r0
 8000924:	e6f0      	b.n	8000708 <__udivmoddi4+0x64>
 8000926:	4608      	mov	r0, r1
 8000928:	e706      	b.n	8000738 <__udivmoddi4+0x94>
 800092a:	45c8      	cmp	r8, r9
 800092c:	d2ae      	bcs.n	800088c <__udivmoddi4+0x1e8>
 800092e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000932:	eb63 0c07 	sbc.w	ip, r3, r7
 8000936:	3801      	subs	r0, #1
 8000938:	e7a8      	b.n	800088c <__udivmoddi4+0x1e8>
 800093a:	4631      	mov	r1, r6
 800093c:	e7ed      	b.n	800091a <__udivmoddi4+0x276>
 800093e:	4603      	mov	r3, r0
 8000940:	e799      	b.n	8000876 <__udivmoddi4+0x1d2>
 8000942:	4630      	mov	r0, r6
 8000944:	e7d4      	b.n	80008f0 <__udivmoddi4+0x24c>
 8000946:	46d6      	mov	lr, sl
 8000948:	e77f      	b.n	800084a <__udivmoddi4+0x1a6>
 800094a:	4463      	add	r3, ip
 800094c:	3802      	subs	r0, #2
 800094e:	e74d      	b.n	80007ec <__udivmoddi4+0x148>
 8000950:	4606      	mov	r6, r0
 8000952:	4623      	mov	r3, r4
 8000954:	4608      	mov	r0, r1
 8000956:	e70f      	b.n	8000778 <__udivmoddi4+0xd4>
 8000958:	3e02      	subs	r6, #2
 800095a:	4463      	add	r3, ip
 800095c:	e730      	b.n	80007c0 <__udivmoddi4+0x11c>
 800095e:	bf00      	nop

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <_ZN15displayPhysical6enableEb>:

////////////
// ENABLE //
////////////

void displayPhysical::enable( bool onOff ){
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	if ( !onOff ){					//	Si esta apagado
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d003      	beq.n	8000984 <_ZN15displayPhysical6enableEb+0x20>
		this->flagEnable	= 0;	//	Deshabilita
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
	}
	else{							//	Si esta prendido
		this->flagEnable	= 1;	//	Habilita
	}
}
 8000982:	e002      	b.n	800098a <_ZN15displayPhysical6enableEb+0x26>
		this->flagEnable	= 1;	//	Habilita
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80009a6:	88fa      	ldrh	r2, [r7, #6]
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ae:	dc01      	bgt.n	80009b4 <_Z12bytestowritett+0x1e>
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	e003      	b.n	80009bc <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80009ba:	b29b      	uxth	r3, r3
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_Z12EEPROM_WritettPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af04      	add	r7, sp, #16
 80009ce:	60ba      	str	r2, [r7, #8]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	81fb      	strh	r3, [r7, #14]
 80009d6:	460b      	mov	r3, r1
 80009d8:	81bb      	strh	r3, [r7, #12]
 80009da:	4613      	mov	r3, r2
 80009dc:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 80009de:	2306      	movs	r3, #6
 80009e0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80009e6:	88fa      	ldrh	r2, [r7, #6]
 80009e8:	89bb      	ldrh	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da00      	bge.n	80009f2 <_Z12EEPROM_WritettPht+0x2a>
 80009f0:	333f      	adds	r3, #63	@ 0x3f
 80009f2:	119b      	asrs	r3, r3, #6
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	4413      	add	r3, r2
 80009fa:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80009fc:	8b7a      	ldrh	r2, [r7, #26]
 80009fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	3301      	adds	r3, #1
 8000a06:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	e034      	b.n	8000a7c <_Z12EEPROM_WritettPht+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000a12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000a26:	89ba      	ldrh	r2, [r7, #12]
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffb2 	bl	8000996 <_Z12bytestowritett>
 8000a32:	4603      	mov	r3, r0
 8000a34:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	8af9      	ldrh	r1, [r7, #22]
 8000a3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a42:	9202      	str	r2, [sp, #8]
 8000a44:	8aba      	ldrh	r2, [r7, #20]
 8000a46:	9201      	str	r2, [sp, #4]
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	21a0      	movs	r1, #160	@ 0xa0
 8000a50:	480f      	ldr	r0, [pc, #60]	@ (8000a90 <_Z12EEPROM_WritettPht+0xc8>)
 8000a52:	f005 ff27 	bl	80068a4 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a58:	3301      	adds	r3, #1
 8000a5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	8abb      	ldrh	r3, [r7, #20]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000a68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000a6a:	8abb      	ldrh	r3, [r7, #20]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	84bb      	strh	r3, [r7, #36]	@ 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000a70:	2005      	movs	r0, #5
 8000a72:	f003 fa5b 	bl	8003f2c <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	8b3b      	ldrh	r3, [r7, #24]
 8000a7e:	6a3a      	ldr	r2, [r7, #32]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbc6      	blt.n	8000a12 <_Z12EEPROM_WritettPht+0x4a>
	}
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200006d8 	.word	0x200006d8

08000a94 <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af04      	add	r7, sp, #16
 8000a9a:	60ba      	str	r2, [r7, #8]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	81fb      	strh	r3, [r7, #14]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	81bb      	strh	r3, [r7, #12]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000aaa:	2306      	movs	r3, #6
 8000aac:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	89bb      	ldrh	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	da00      	bge.n	8000abe <_Z11EEPROM_ReadttPht+0x2a>
 8000abc:	333f      	adds	r3, #63	@ 0x3f
 8000abe:	119b      	asrs	r3, r3, #6
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000ac8:	8b7a      	ldrh	r2, [r7, #26]
 8000aca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	e031      	b.n	8000b42 <_Z11EEPROM_ReadttPht+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000ade:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000af2:	89ba      	ldrh	r2, [r7, #12]
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff4c 	bl	8000996 <_Z12bytestowritett>
 8000afe:	4603      	mov	r3, r0
 8000b00:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	4413      	add	r3, r2
 8000b08:	8af9      	ldrh	r1, [r7, #22]
 8000b0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b0e:	9202      	str	r2, [sp, #8]
 8000b10:	8aba      	ldrh	r2, [r7, #20]
 8000b12:	9201      	str	r2, [sp, #4]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2302      	movs	r3, #2
 8000b18:	460a      	mov	r2, r1
 8000b1a:	21a0      	movs	r1, #160	@ 0xa0
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <_Z11EEPROM_ReadttPht+0xc0>)
 8000b1e:	f005 ffd5 	bl	8006acc <HAL_I2C_Mem_Read>
		startPage += 1;
 8000b22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b24:	3301      	adds	r3, #1
 8000b26:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000b2c:	88fa      	ldrh	r2, [r7, #6]
 8000b2e:	8abb      	ldrh	r3, [r7, #20]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000b34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000b36:	8abb      	ldrh	r3, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	8b3b      	ldrh	r3, [r7, #24]
 8000b44:	6a3a      	ldr	r2, [r7, #32]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbc9      	blt.n	8000ade <_Z11EEPROM_ReadttPht+0x4a>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200006d8 	.word	0x200006d8

08000b58 <_Z3appv>:

/////////
// APP //
/////////

void app(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	warming();
 8000b5c:	f000 fba0 	bl	80012a0 <_Z7warmingv>
	stability();
 8000b60:	f000 f8e6 	bl	8000d30 <_Z9stabilityv>
	process();
 8000b64:	f000 f9ee 	bl	8000f44 <_Z7processv>
	displayCalib();
 8000b68:	f000 f802 	bl	8000b70 <_Z12displayCalibv>
	//appContent();
	//appLora();
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_Z12displayCalibv>:

void displayCalib(){
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	countDebug++;
 8000b74:	4b68      	ldr	r3, [pc, #416]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a67      	ldr	r2, [pc, #412]	@ (8000d18 <_Z12displayCalibv+0x1a8>)
 8000b7c:	6013      	str	r3, [r2, #0]

	switch(stateProcess){
 8000b7e:	4b67      	ldr	r3, [pc, #412]	@ (8000d1c <_Z12displayCalibv+0x1ac>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	f200 80c1 	bhi.w	8000d0a <_Z12displayCalibv+0x19a>
 8000b88:	a201      	add	r2, pc, #4	@ (adr r2, 8000b90 <_Z12displayCalibv+0x20>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000bb5 	.word	0x08000bb5
 8000b94:	08000bc9 	.word	0x08000bc9
 8000b98:	08000bf5 	.word	0x08000bf5
 8000b9c:	08000c09 	.word	0x08000c09
 8000ba0:	08000c1d 	.word	0x08000c1d
 8000ba4:	08000c49 	.word	0x08000c49
 8000ba8:	08000c75 	.word	0x08000c75
 8000bac:	08000cb3 	.word	0x08000cb3
 8000bb0:	08000cdf 	.word	0x08000cdf
	case 0:
		flagLedOn	= 0;
 8000bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 1;
 8000bba:	4b5a      	ldr	r3, [pc, #360]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000bc0:	4b59      	ldr	r3, [pc, #356]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
		break;
 8000bc6:	e0a1      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	case 1:
		flagLedOn	= 0;
 8000bc8:	4b55      	ldr	r3, [pc, #340]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000bce:	4b55      	ldr	r3, [pc, #340]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000bd4:	4b54      	ldr	r3, [pc, #336]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'H';
 8000bda:	4b54      	ldr	r3, [pc, #336]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000bdc:	2248      	movs	r2, #72	@ 0x48
 8000bde:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'E';
 8000be0:	4b52      	ldr	r3, [pc, #328]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000be2:	2245      	movs	r2, #69	@ 0x45
 8000be4:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'A';
 8000be6:	4b51      	ldr	r3, [pc, #324]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000be8:	2241      	movs	r2, #65	@ 0x41
 8000bea:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'T';
 8000bec:	4b4f      	ldr	r3, [pc, #316]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000bee:	2254      	movs	r2, #84	@ 0x54
 8000bf0:	70da      	strb	r2, [r3, #3]
		break;
 8000bf2:	e08b      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	case 2:
		flagLedOn	= 0;
 8000bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c00:	4b49      	ldr	r3, [pc, #292]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e081      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	case 3:
		flagLedOn	= 0;
 8000c08:	4b45      	ldr	r3, [pc, #276]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c0e:	4b45      	ldr	r3, [pc, #276]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c14:	4b44      	ldr	r3, [pc, #272]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
		break;
 8000c1a:	e077      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	case 4:
		flagLedOn	= 1;
 8000c1c:	4b40      	ldr	r3, [pc, #256]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c22:	4b40      	ldr	r3, [pc, #256]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000c28:	4b3f      	ldr	r3, [pc, #252]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'E';
 8000c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c30:	2245      	movs	r2, #69	@ 0x45
 8000c32:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'R';
 8000c34:	4b3d      	ldr	r3, [pc, #244]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c36:	2252      	movs	r2, #82	@ 0x52
 8000c38:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'R';
 8000c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c3c:	2252      	movs	r2, #82	@ 0x52
 8000c3e:	709a      	strb	r2, [r3, #2]
		calibContent[3] = ' ';
 8000c40:	4b3a      	ldr	r3, [pc, #232]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c42:	2220      	movs	r2, #32
 8000c44:	70da      	strb	r2, [r3, #3]
		break;
 8000c46:	e061      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	case 5:
		flagLedOn	= 0;
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 1;
 8000c4e:	4b35      	ldr	r3, [pc, #212]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'S';
 8000c5a:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c5c:	2253      	movs	r2, #83	@ 0x53
 8000c5e:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'T';
 8000c60:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c62:	2254      	movs	r2, #84	@ 0x54
 8000c64:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'A';
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c68:	2241      	movs	r2, #65	@ 0x41
 8000c6a:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'R';
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c6e:	2252      	movs	r2, #82	@ 0x52
 8000c70:	70da      	strb	r2, [r3, #3]
		break;
 8000c72:	e04b      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	case 6:
		flagLedOn	= 0;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c80:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]

		flagLedOn	= 0;
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000c92:	4b25      	ldr	r3, [pc, #148]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'C';
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000c9a:	2243      	movs	r2, #67	@ 0x43
 8000c9c:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'A';
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000ca0:	2241      	movs	r2, #65	@ 0x41
 8000ca2:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'L';
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000ca6:	224c      	movs	r2, #76	@ 0x4c
 8000ca8:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'I';
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000cac:	2249      	movs	r2, #73	@ 0x49
 8000cae:	70da      	strb	r2, [r3, #3]
		break;
 8000cb0:	e02c      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	case 7:
		flagLedOn	= 0;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 1;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'C';
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000cc6:	2243      	movs	r2, #67	@ 0x43
 8000cc8:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'A';
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000ccc:	2241      	movs	r2, #65	@ 0x41
 8000cce:	705a      	strb	r2, [r3, #1]
		calibContent[2] = 'L';
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000cd2:	224c      	movs	r2, #76	@ 0x4c
 8000cd4:	709a      	strb	r2, [r3, #2]
		calibContent[3] = 'I';
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000cd8:	2249      	movs	r2, #73	@ 0x49
 8000cda:	70da      	strb	r2, [r3, #3]
		break;
 8000cdc:	e016      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	case 8:
		flagLedOn	= 1;
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <_Z12displayCalibv+0x1b0>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
		flagLedOff	= 0;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <_Z12displayCalibv+0x1b4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
		flagLedFreq	= 0;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <_Z12displayCalibv+0x1b8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

		calibContent[0]	= 'O';
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000cf2:	224f      	movs	r2, #79	@ 0x4f
 8000cf4:	701a      	strb	r2, [r3, #0]
		calibContent[1] = 'K';
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000cf8:	224b      	movs	r2, #75	@ 0x4b
 8000cfa:	705a      	strb	r2, [r3, #1]
		calibContent[2] = ' ';
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000cfe:	2220      	movs	r2, #32
 8000d00:	709a      	strb	r2, [r3, #2]
		calibContent[3] = ' ';
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <_Z12displayCalibv+0x1bc>)
 8000d04:	2220      	movs	r2, #32
 8000d06:	70da      	strb	r2, [r3, #3]
		break;
 8000d08:	e000      	b.n	8000d0c <_Z12displayCalibv+0x19c>

	default:
		break;
 8000d0a:	bf00      	nop
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000400 	.word	0x20000400
 8000d1c:	20000396 	.word	0x20000396
 8000d20:	20000514 	.word	0x20000514
 8000d24:	20000515 	.word	0x20000515
 8000d28:	20000516 	.word	0x20000516
 8000d2c:	200003fc 	.word	0x200003fc

08000d30 <_Z9stabilityv>:

///////////////
// STABILITY //
///////////////

void stability(){
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	if ( stateAdc == 5 ){				// Si se toma una muestra
 8000d34:	4b74      	ldr	r3, [pc, #464]	@ (8000f08 <_Z9stabilityv+0x1d8>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b05      	cmp	r3, #5
 8000d3a:	d113      	bne.n	8000d64 <_Z9stabilityv+0x34>
		alphaA_LP	= iir(alphaA);		// Inserta en filtro pasabajos
 8000d3c:	4b73      	ldr	r3, [pc, #460]	@ (8000f0c <_Z9stabilityv+0x1dc>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 faf8 	bl	8001338 <_Z3iirs>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b70      	ldr	r3, [pc, #448]	@ (8000f10 <_Z9stabilityv+0x1e0>)
 8000d4e:	801a      	strh	r2, [r3, #0]
		alphaB_LP	= iir2(alphaB);		//
 8000d50:	4b70      	ldr	r3, [pc, #448]	@ (8000f14 <_Z9stabilityv+0x1e4>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fb70 	bl	800143c <_Z4iir2s>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b6d      	ldr	r3, [pc, #436]	@ (8000f18 <_Z9stabilityv+0x1e8>)
 8000d62:	801a      	strh	r2, [r3, #0]
		//alphaA_BP	= iir3(alphaA);		// Inserta en filtro pasabanda
	}

	switch( stateStability ){
 8000d64:	4b6d      	ldr	r3, [pc, #436]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	f200 80ca 	bhi.w	8000f02 <_Z9stabilityv+0x1d2>
 8000d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d74 <_Z9stabilityv+0x44>)
 8000d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d74:	08000d8d 	.word	0x08000d8d
 8000d78:	08000db1 	.word	0x08000db1
 8000d7c:	08000ddd 	.word	0x08000ddd
 8000d80:	08000e23 	.word	0x08000e23
 8000d84:	08000edb 	.word	0x08000edb
 8000d88:	08000eef 	.word	0x08000eef
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		flagFinishStab	= 0;
 8000d8c:	4b64      	ldr	r3, [pc, #400]	@ (8000f20 <_Z9stabilityv+0x1f0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
		flagStability	= 0;
 8000d92:	4b64      	ldr	r3, [pc, #400]	@ (8000f24 <_Z9stabilityv+0x1f4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		if ( flagStartStability ){	// Si se indica inciar
 8000d98:	4b63      	ldr	r3, [pc, #396]	@ (8000f28 <_Z9stabilityv+0x1f8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <_Z9stabilityv+0x78>
			stateStability	= 1;	// Para a S1
 8000da0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateStability	= 0;	// Queda en S0
		}
		break;
 8000da6:	e0ad      	b.n	8000f04 <_Z9stabilityv+0x1d4>
			stateStability	= 0;	// Queda en S0
 8000da8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
		break;
 8000dae:	e0a9      	b.n	8000f04 <_Z9stabilityv+0x1d4>
	//////////////////////
	// S1 - WAIT A TIME //
	//////////////////////

	case 1:
		countStability++;						//
 8000db0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f2c <_Z9stabilityv+0x1fc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a5d      	ldr	r2, [pc, #372]	@ (8000f2c <_Z9stabilityv+0x1fc>)
 8000db8:	6013      	str	r3, [r2, #0]

		if (countStability >= limitStability ){	//
 8000dba:	4b5c      	ldr	r3, [pc, #368]	@ (8000f2c <_Z9stabilityv+0x1fc>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8000f30 <_Z9stabilityv+0x200>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d306      	bcc.n	8000dd4 <_Z9stabilityv+0xa4>
			countStability	= 0;				//
 8000dc6:	4b59      	ldr	r3, [pc, #356]	@ (8000f2c <_Z9stabilityv+0x1fc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
			stateStability	= 2;				//
 8000dcc:	4b53      	ldr	r3, [pc, #332]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	701a      	strb	r2, [r3, #0]
		}
		else{									//
			stateStability	= 1;				//
		}
		break;
 8000dd2:	e097      	b.n	8000f04 <_Z9stabilityv+0x1d4>
			stateStability	= 1;				//
 8000dd4:	4b51      	ldr	r3, [pc, #324]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
		break;
 8000dda:	e093      	b.n	8000f04 <_Z9stabilityv+0x1d4>

	////////////////////
	// S2 - SAVE DATA //
	////////////////////
	case 2:
		if ( stateAdc == 5 ){							// Si llega un dato
 8000ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8000f08 <_Z9stabilityv+0x1d8>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d10d      	bne.n	8000e00 <_Z9stabilityv+0xd0>
			bufferStabA[ countStability2 ]	= alphaB;	// Guarda valor bruto
 8000de4:	4b53      	ldr	r3, [pc, #332]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b4a      	ldr	r3, [pc, #296]	@ (8000f14 <_Z9stabilityv+0x1e4>)
 8000dec:	8819      	ldrh	r1, [r3, #0]
 8000dee:	4b52      	ldr	r3, [pc, #328]	@ (8000f38 <_Z9stabilityv+0x208>)
 8000df0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			countStability2++;							// Suma 1
 8000df4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000dfe:	701a      	strb	r2, [r3, #0]
		}

		if ( countStability2 >= sizeBufStab ){			// Si pasa limite del buffer
 8000e00:	4b4c      	ldr	r3, [pc, #304]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	4b4d      	ldr	r3, [pc, #308]	@ (8000f3c <_Z9stabilityv+0x20c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d306      	bcc.n	8000e1a <_Z9stabilityv+0xea>
			countStability2	= 0;						// Reinicia contador
 8000e0c:	4b49      	ldr	r3, [pc, #292]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
			stateStability	= 3;						// Pasa a S3
 8000e12:	4b42      	ldr	r3, [pc, #264]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000e14:	2203      	movs	r2, #3
 8000e16:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateStability	= 2;						// Queda en S2
		}

		break;
 8000e18:	e074      	b.n	8000f04 <_Z9stabilityv+0x1d4>
			stateStability	= 2;						// Queda en S2
 8000e1a:	4b40      	ldr	r3, [pc, #256]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]
		break;
 8000e20:	e070      	b.n	8000f04 <_Z9stabilityv+0x1d4>

	case 3:
		for ( countStability2 = 0; countStability2 < sizeBufStab; countStability2++ ){	// Recorre el buffer
 8000e22:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e031      	b.n	8000e8e <_Z9stabilityv+0x15e>
			if ( fabs(bufferStabA[ countStability2 ] - alphaB_LP) < limitStability){	// Si la diferencia entre la muestra y valor Mean es menor al limite de stabilidad
 8000e2a:	4b42      	ldr	r3, [pc, #264]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b41      	ldr	r3, [pc, #260]	@ (8000f38 <_Z9stabilityv+0x208>)
 8000e32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b37      	ldr	r3, [pc, #220]	@ (8000f18 <_Z9stabilityv+0x1e8>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fb7e 	bl	8001540 <_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e44:	ec55 4b10 	vmov	r4, r5, d0
 8000e48:	4b39      	ldr	r3, [pc, #228]	@ (8000f30 <_Z9stabilityv+0x200>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb0f 	bl	8000470 <__aeabi_ui2d>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	2101      	movs	r1, #1
 8000e58:	460e      	mov	r6, r1
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	f7ff fbe1 	bl	8000624 <__aeabi_dcmplt>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <_Z9stabilityv+0x13c>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	461e      	mov	r6, r3
 8000e6c:	b2f3      	uxtb	r3, r6
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <_Z9stabilityv+0x14a>
				flagStability	= 1;													// Marca que es estable
 8000e72:	4b2c      	ldr	r3, [pc, #176]	@ (8000f24 <_Z9stabilityv+0x1f4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e003      	b.n	8000e82 <_Z9stabilityv+0x152>
			}
			else{																		// Si no
				flagStability	= 0;													// Marcaque es inestable
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f24 <_Z9stabilityv+0x1f4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
				break;																	// Sale del ciclo for
 8000e80:	e00b      	b.n	8000e9a <_Z9stabilityv+0x16a>
		for ( countStability2 = 0; countStability2 < sizeBufStab; countStability2++ ){	// Recorre el buffer
 8000e82:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	4b29      	ldr	r3, [pc, #164]	@ (8000f34 <_Z9stabilityv+0x204>)
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <_Z9stabilityv+0x20c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3c7      	bcc.n	8000e2a <_Z9stabilityv+0xfa>
			}
		}

		countStability3++;								// Suma 1 al contador
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <_Z9stabilityv+0x210>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <_Z9stabilityv+0x210>)
 8000ea4:	701a      	strb	r2, [r3, #0]

		if (flagStability){								// Si es estable
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <_Z9stabilityv+0x1f4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d006      	beq.n	8000ebc <_Z9stabilityv+0x18c>
			countStability3	= 0;						// Reinicia contador
 8000eae:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <_Z9stabilityv+0x210>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
			stateStability	= 5;						// Pasa a S5
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	701a      	strb	r2, [r3, #0]
			stateStability	= 4;						// Pasa a S4
		}
		else{											// Si no
			stateStability	= 1;						// Vuelve a S1
		}
		break;
 8000eba:	e023      	b.n	8000f04 <_Z9stabilityv+0x1d4>
		else if ( countStability3 >= limitRetStab ){	// Si lleva muchos reintentos
 8000ebc:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <_Z9stabilityv+0x210>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d906      	bls.n	8000ed2 <_Z9stabilityv+0x1a2>
			countStability3	= 0;						// Reinicia contador
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <_Z9stabilityv+0x210>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
			stateStability	= 4;						// Pasa a S4
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	701a      	strb	r2, [r3, #0]
		break;
 8000ed0:	e018      	b.n	8000f04 <_Z9stabilityv+0x1d4>
			stateStability	= 1;						// Vuelve a S1
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
		break;
 8000ed8:	e014      	b.n	8000f04 <_Z9stabilityv+0x1d4>

	case 4:
		flagFinishStab	= 1;
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <_Z9stabilityv+0x1f0>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
		flagStability	= 0;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <_Z9stabilityv+0x1f4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
		stateStability	= 0;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
		break;
 8000eec:	e00a      	b.n	8000f04 <_Z9stabilityv+0x1d4>

	case 5:
		flagFinishStab	= 1;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <_Z9stabilityv+0x1f0>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
		flagStability	= 1;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <_Z9stabilityv+0x1f4>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
		stateStability	= 0;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_Z9stabilityv+0x1ec>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
		break;
 8000f00:	e000      	b.n	8000f04 <_Z9stabilityv+0x1d4>

	default:
		break;
 8000f02:	bf00      	nop
	}
}
 8000f04:	bf00      	nop
 8000f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f08:	20000454 	.word	0x20000454
 8000f0c:	2000046a 	.word	0x2000046a
 8000f10:	200003a2 	.word	0x200003a2
 8000f14:	2000046c 	.word	0x2000046c
 8000f18:	200003a4 	.word	0x200003a4
 8000f1c:	200003ae 	.word	0x200003ae
 8000f20:	200003bd 	.word	0x200003bd
 8000f24:	200003a0 	.word	0x200003a0
 8000f28:	200003bc 	.word	0x200003bc
 8000f2c:	200003b0 	.word	0x200003b0
 8000f30:	200003b8 	.word	0x200003b8
 8000f34:	200003b4 	.word	0x200003b4
 8000f38:	200003c0 	.word	0x200003c0
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	200003b5 	.word	0x200003b5

08000f44 <_Z7processv>:
 * S7:	SET FINAL POINT
 * S8:	SAVE IN EEPROM
 * S9:	WAIT FOR RESET PROCESS
 */

void process(){
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0


	switch ( stateProcess ){
 8000f48:	4b5e      	ldr	r3, [pc, #376]	@ (80010c4 <_Z7processv+0x180>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	f200 8179 	bhi.w	8001244 <_Z7processv+0x300>
 8000f52:	a201      	add	r2, pc, #4	@ (adr r2, 8000f58 <_Z7processv+0x14>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f7d 	.word	0x08000f7d
 8000f5c:	08000f8b 	.word	0x08000f8b
 8000f60:	08000fa9 	.word	0x08000fa9
 8000f64:	08000feb 	.word	0x08000feb
 8000f68:	08001041 	.word	0x08001041
 8000f6c:	08001059 	.word	0x08001059
 8000f70:	08001071 	.word	0x08001071
 8000f74:	080010f9 	.word	0x080010f9
 8000f78:	08001227 	.word	0x08001227
	////////////////////////
	// S0 - START PROCESS //
	////////////////////////

	case 0:
		flagResetWarming	= 1;	// Indica que empieza el calentaiento del sensor
 8000f7c:	4b52      	ldr	r3, [pc, #328]	@ (80010c8 <_Z7processv+0x184>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
		stateProcess		= 1;	// Pasa a S1
 8000f82:	4b50      	ldr	r3, [pc, #320]	@ (80010c4 <_Z7processv+0x180>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
		break;
 8000f88:	e160      	b.n	800124c <_Z7processv+0x308>
	///////////////////////////
	// S1 - WAIT FOR WARMING //
	///////////////////////////

	case 1:
		flagResetWarming	= 0;	// Reinicia indicador
 8000f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80010c8 <_Z7processv+0x184>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]

		if ( flagWarmingOk ){		// Si indica que se calentó
 8000f90:	4b4e      	ldr	r3, [pc, #312]	@ (80010cc <_Z7processv+0x188>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <_Z7processv+0x5c>
			stateProcess	= 2;	// Pasa a S2
 8000f98:	4b4a      	ldr	r3, [pc, #296]	@ (80010c4 <_Z7processv+0x180>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 1;	// Queda en S1
		}
		break;
 8000f9e:	e155      	b.n	800124c <_Z7processv+0x308>
			stateProcess	= 1;	// Queda en S1
 8000fa0:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <_Z7processv+0x180>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
		break;
 8000fa6:	e151      	b.n	800124c <_Z7processv+0x308>
	/////////////////////
	// S2 - SET GROUND //
	/////////////////////

	case 2:
		countProcess++;							// Suma 1 al contador
 8000fa8:	4b49      	ldr	r3, [pc, #292]	@ (80010d0 <_Z7processv+0x18c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a48      	ldr	r2, [pc, #288]	@ (80010d0 <_Z7processv+0x18c>)
 8000fb0:	6013      	str	r3, [r2, #0]

		if ( countProcess >= limitProcess){		// Si se llega al limite de tiempo
 8000fb2:	4b47      	ldr	r3, [pc, #284]	@ (80010d0 <_Z7processv+0x18c>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b47      	ldr	r3, [pc, #284]	@ (80010d4 <_Z7processv+0x190>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d311      	bcc.n	8000fe2 <_Z7processv+0x9e>
			countProcess		= 0;			// Reinicia contador
 8000fbe:	4b44      	ldr	r3, [pc, #272]	@ (80010d0 <_Z7processv+0x18c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
			meanAlphaA			= alphaA_LP;	// Guarda valor en filtro
 8000fc4:	4b44      	ldr	r3, [pc, #272]	@ (80010d8 <_Z7processv+0x194>)
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	4b44      	ldr	r3, [pc, #272]	@ (80010dc <_Z7processv+0x198>)
 8000fca:	801a      	strh	r2, [r3, #0]
			meanAlphaB			= alphaB_LP;
 8000fcc:	4b44      	ldr	r3, [pc, #272]	@ (80010e0 <_Z7processv+0x19c>)
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b44      	ldr	r3, [pc, #272]	@ (80010e4 <_Z7processv+0x1a0>)
 8000fd2:	801a      	strh	r2, [r3, #0]
			flagStartStability	= 1;			//
 8000fd4:	4b44      	ldr	r3, [pc, #272]	@ (80010e8 <_Z7processv+0x1a4>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
			stateProcess		= 3;			// Pasa a S3
 8000fda:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <_Z7processv+0x180>)
 8000fdc:	2203      	movs	r2, #3
 8000fde:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateProcess	= 2;				// Espera en S2
		}
		break;
 8000fe0:	e134      	b.n	800124c <_Z7processv+0x308>
			stateProcess	= 2;				// Espera en S2
 8000fe2:	4b38      	ldr	r3, [pc, #224]	@ (80010c4 <_Z7processv+0x180>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	701a      	strb	r2, [r3, #0]
		break;
 8000fe8:	e130      	b.n	800124c <_Z7processv+0x308>
	//////////////////////////
	// S3 - CHECK STABILITY //
	//////////////////////////

	case 3:
		flagStartStability	= 0;						//
 8000fea:	4b3f      	ldr	r3, [pc, #252]	@ (80010e8 <_Z7processv+0x1a4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]

		if ( flagFinishStab && flagStability){			// Si es estable
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80010ec <_Z7processv+0x1a8>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00f      	beq.n	8001018 <_Z7processv+0xd4>
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	@ (80010f0 <_Z7processv+0x1ac>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00b      	beq.n	8001018 <_Z7processv+0xd4>
			meanAlphaA		= alphaA_LP;				//
 8001000:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <_Z7processv+0x194>)
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	4b35      	ldr	r3, [pc, #212]	@ (80010dc <_Z7processv+0x198>)
 8001006:	801a      	strh	r2, [r3, #0]
			meanAlphaB		= alphaB_LP;
 8001008:	4b35      	ldr	r3, [pc, #212]	@ (80010e0 <_Z7processv+0x19c>)
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <_Z7processv+0x1a0>)
 800100e:	801a      	strh	r2, [r3, #0]
			stateProcess	= 5;						// Pasa a S5
 8001010:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <_Z7processv+0x180>)
 8001012:	2205      	movs	r2, #5
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	e012      	b.n	800103e <_Z7processv+0xfa>
		}
		else if ( flagFinishStab && !flagStability){	// Si es inestable
 8001018:	4b34      	ldr	r3, [pc, #208]	@ (80010ec <_Z7processv+0x1a8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00a      	beq.n	8001036 <_Z7processv+0xf2>
 8001020:	4b33      	ldr	r3, [pc, #204]	@ (80010f0 <_Z7processv+0x1ac>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <_Z7processv+0xf2>
			stateProcess	= 4;						// Pasa  S4
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <_Z7processv+0x180>)
 8001030:	2204      	movs	r2, #4
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e003      	b.n	800103e <_Z7processv+0xfa>
		}
		else{											// Si no marca
			stateProcess	= 3;						// Espera en S3
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <_Z7processv+0x180>)
 8001038:	2203      	movs	r2, #3
 800103a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800103c:	e106      	b.n	800124c <_Z7processv+0x308>
 800103e:	e105      	b.n	800124c <_Z7processv+0x308>
	////////////////////
	// S4 - SET ERROR //
	////////////////////

	case 4:
		if (flagBoton){				// Si se aprieta boton
 8001040:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <_Z7processv+0x1b0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <_Z7processv+0x10c>
			stateProcess	= 0;	// Reinicia la maquina
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <_Z7processv+0x180>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 4;	// Espera en S4
		}
		break;
 800104e:	e0fd      	b.n	800124c <_Z7processv+0x308>
			stateProcess	= 4;	// Espera en S4
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <_Z7processv+0x180>)
 8001052:	2204      	movs	r2, #4
 8001054:	701a      	strb	r2, [r3, #0]
		break;
 8001056:	e0f9      	b.n	800124c <_Z7processv+0x308>
	///////////////////////////
	// S5 - WAIT INSTRUCTION //
	///////////////////////////

	case 5:
		if (flagBoton){				// Si se aprieta el boton
 8001058:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <_Z7processv+0x1b0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <_Z7processv+0x124>
			stateProcess	= 6;	// Inicia proceso calibracion
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <_Z7processv+0x180>)
 8001062:	2206      	movs	r2, #6
 8001064:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 5;	// Espera en S5
		}
		break;
 8001066:	e0f1      	b.n	800124c <_Z7processv+0x308>
			stateProcess	= 5;	// Espera en S5
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <_Z7processv+0x180>)
 800106a:	2205      	movs	r2, #5
 800106c:	701a      	strb	r2, [r3, #0]
		break;
 800106e:	e0ed      	b.n	800124c <_Z7processv+0x308>
	/////////////////////////
	// S6 - DETECT INCEASE //
	/////////////////////////

	case 6:
		countProcess++;										// Suma 1 al contador
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <_Z7processv+0x18c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a16      	ldr	r2, [pc, #88]	@ (80010d0 <_Z7processv+0x18c>)
 8001078:	6013      	str	r3, [r2, #0]

		if (alphaB_LP - meanAlphaB >= limitGrowHcl ){ 	// Si se detecta increento
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <_Z7processv+0x19c>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <_Z7processv+0x1a0>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800108a:	db09      	blt.n	80010a0 <_Z7processv+0x15c>
			flagStartStability	= 1;
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <_Z7processv+0x1a4>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
			countProcess	= 0;							// Reinicia contador
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <_Z7processv+0x18c>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
			stateProcess	= 7;							// Pasa a S7
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <_Z7processv+0x180>)
 800109a:	2207      	movs	r2, #7
 800109c:	701a      	strb	r2, [r3, #0]
			stateProcess		= 4;						// Pasa a S4 - ERROR
		}
		else{												// Si aun no se cumple el contador
			stateProcess	= 6;							// Queda en S4
		}
		break;
 800109e:	e0d5      	b.n	800124c <_Z7processv+0x308>
		else if ( countProcess >= limitProcess*2 ){			// Si no se detecta crecimiento
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <_Z7processv+0x190>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	005a      	lsls	r2, r3, #1
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <_Z7processv+0x18c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d806      	bhi.n	80010bc <_Z7processv+0x178>
			countProcess		= 0;						// Reinicia contador
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <_Z7processv+0x18c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
			stateProcess		= 4;						// Pasa a S4 - ERROR
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <_Z7processv+0x180>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	701a      	strb	r2, [r3, #0]
		break;
 80010ba:	e0c7      	b.n	800124c <_Z7processv+0x308>
			stateProcess	= 6;							// Queda en S4
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <_Z7processv+0x180>)
 80010be:	2206      	movs	r2, #6
 80010c0:	701a      	strb	r2, [r3, #0]
		break;
 80010c2:	e0c3      	b.n	800124c <_Z7processv+0x308>
 80010c4:	20000396 	.word	0x20000396
 80010c8:	20000395 	.word	0x20000395
 80010cc:	20000394 	.word	0x20000394
 80010d0:	20000398 	.word	0x20000398
 80010d4:	2000039c 	.word	0x2000039c
 80010d8:	200003a2 	.word	0x200003a2
 80010dc:	200003a6 	.word	0x200003a6
 80010e0:	200003a4 	.word	0x200003a4
 80010e4:	200003aa 	.word	0x200003aa
 80010e8:	200003bc 	.word	0x200003bc
 80010ec:	200003bd 	.word	0x200003bd
 80010f0:	200003a0 	.word	0x200003a0
 80010f4:	20000a48 	.word	0x20000a48
	/////////////////////////////
	// S7 - WAIT FOR STABILITY //
	/////////////////////////////

	case 7:
		flagStartStability	= 0;							// Reinicia flag
 80010f8:	4b57      	ldr	r3, [pc, #348]	@ (8001258 <_Z7processv+0x314>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
		countProcess++;										// Suma 1 al proceso
 80010fe:	4b57      	ldr	r3, [pc, #348]	@ (800125c <_Z7processv+0x318>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a55      	ldr	r2, [pc, #340]	@ (800125c <_Z7processv+0x318>)
 8001106:	6013      	str	r3, [r2, #0]

		if ( flagFinishStab && flagStability){				// Si es estable
 8001108:	4b55      	ldr	r3, [pc, #340]	@ (8001260 <_Z7processv+0x31c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d073      	beq.n	80011f8 <_Z7processv+0x2b4>
 8001110:	4b54      	ldr	r3, [pc, #336]	@ (8001264 <_Z7processv+0x320>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d06f      	beq.n	80011f8 <_Z7processv+0x2b4>
			meanAlphaA_2	= (alphaA_LP - meanAlphaA)/50;	//
 8001118:	4b53      	ldr	r3, [pc, #332]	@ (8001268 <_Z7processv+0x324>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b53      	ldr	r3, [pc, #332]	@ (800126c <_Z7processv+0x328>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	4a52      	ldr	r2, [pc, #328]	@ (8001270 <_Z7processv+0x32c>)
 8001126:	fb82 1203 	smull	r1, r2, r2, r3
 800112a:	1112      	asrs	r2, r2, #4
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b50      	ldr	r3, [pc, #320]	@ (8001274 <_Z7processv+0x330>)
 8001134:	801a      	strh	r2, [r3, #0]
			meanAlphaB_2	= (alphaB_LP - meanAlphaB)/50;	//
 8001136:	4b50      	ldr	r3, [pc, #320]	@ (8001278 <_Z7processv+0x334>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4b4f      	ldr	r3, [pc, #316]	@ (800127c <_Z7processv+0x338>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a4b      	ldr	r2, [pc, #300]	@ (8001270 <_Z7processv+0x32c>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1112      	asrs	r2, r2, #4
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b4b      	ldr	r3, [pc, #300]	@ (8001280 <_Z7processv+0x33c>)
 8001152:	801a      	strh	r2, [r3, #0]

			groundSensor0[0]	= meanAlphaB & 0xFF;		//
 8001154:	4b49      	ldr	r3, [pc, #292]	@ (800127c <_Z7processv+0x338>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b4a      	ldr	r3, [pc, #296]	@ (8001284 <_Z7processv+0x340>)
 800115c:	701a      	strb	r2, [r3, #0]
			groundSensor0[1]	= (meanAlphaB >> 8) & 0xFF;	//
 800115e:	4b47      	ldr	r3, [pc, #284]	@ (800127c <_Z7processv+0x338>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	b29b      	uxth	r3, r3
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <_Z7processv+0x340>)
 800116a:	705a      	strb	r2, [r3, #1]
			groundSensor0[2]	= 0;						//
 800116c:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <_Z7processv+0x340>)
 800116e:	2200      	movs	r2, #0
 8001170:	709a      	strb	r2, [r3, #2]
			groundSensor0[3]	= 0;						//
 8001172:	4b44      	ldr	r3, [pc, #272]	@ (8001284 <_Z7processv+0x340>)
 8001174:	2200      	movs	r2, #0
 8001176:	70da      	strb	r2, [r3, #3]

			curveSensor0[0]		= meanAlphaB_2 & 0xFF;			//
 8001178:	4b41      	ldr	r3, [pc, #260]	@ (8001280 <_Z7processv+0x33c>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b42      	ldr	r3, [pc, #264]	@ (8001288 <_Z7processv+0x344>)
 8001180:	701a      	strb	r2, [r3, #0]
			curveSensor0[1]		= (meanAlphaB_2 >> 8) & 0xFF;	//
 8001182:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <_Z7processv+0x33c>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29b      	uxth	r3, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b3e      	ldr	r3, [pc, #248]	@ (8001288 <_Z7processv+0x344>)
 800118e:	705a      	strb	r2, [r3, #1]
			curveSensor0[2]		= 0;							//
 8001190:	4b3d      	ldr	r3, [pc, #244]	@ (8001288 <_Z7processv+0x344>)
 8001192:	2200      	movs	r2, #0
 8001194:	709a      	strb	r2, [r3, #2]
			curveSensor0[3]		= 0;							//
 8001196:	4b3c      	ldr	r3, [pc, #240]	@ (8001288 <_Z7processv+0x344>)
 8001198:	2200      	movs	r2, #0
 800119a:	70da      	strb	r2, [r3, #3]

			groundSensor1[0]	= meanAlphaA & 0xFF;		//
 800119c:	4b33      	ldr	r3, [pc, #204]	@ (800126c <_Z7processv+0x328>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b3a      	ldr	r3, [pc, #232]	@ (800128c <_Z7processv+0x348>)
 80011a4:	701a      	strb	r2, [r3, #0]
			groundSensor1[1]	= (meanAlphaA >> 8) & 0xFF;	//
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <_Z7processv+0x328>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b36      	ldr	r3, [pc, #216]	@ (800128c <_Z7processv+0x348>)
 80011b2:	705a      	strb	r2, [r3, #1]
			groundSensor1[2]	= 0;						//
 80011b4:	4b35      	ldr	r3, [pc, #212]	@ (800128c <_Z7processv+0x348>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	709a      	strb	r2, [r3, #2]
			groundSensor1[3]	= 0;						//
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <_Z7processv+0x348>)
 80011bc:	2200      	movs	r2, #0
 80011be:	70da      	strb	r2, [r3, #3]

			curveSensor1[0]		= meanAlphaA_2 & 0xFF;			//
 80011c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <_Z7processv+0x330>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <_Z7processv+0x34c>)
 80011c8:	701a      	strb	r2, [r3, #0]
			curveSensor1[1]		= (meanAlphaA_2 >> 8) & 0xFF;	//
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <_Z7processv+0x330>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <_Z7processv+0x34c>)
 80011d6:	705a      	strb	r2, [r3, #1]
			curveSensor1[2]		= 0;							//
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <_Z7processv+0x34c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	709a      	strb	r2, [r3, #2]
			curveSensor1[3]		= 0;							//
 80011de:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <_Z7processv+0x34c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	70da      	strb	r2, [r3, #3]

			flagSaveEeprom	= 1;						//
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <_Z7processv+0x350>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
			countProcess	= 0;						//
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <_Z7processv+0x318>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
			stateProcess	= 8;						// Pasa a S5
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <_Z7processv+0x354>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e015      	b.n	8001224 <_Z7processv+0x2e0>
		}
		else if ( flagFinishStab && !flagStability){	// Si es inestable
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <_Z7processv+0x31c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00d      	beq.n	800121c <_Z7processv+0x2d8>
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <_Z7processv+0x320>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <_Z7processv+0x2d8>
			countProcess	= 0;						//
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <_Z7processv+0x318>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
			stateProcess	= 4;						// Pasa  S4
 8001214:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <_Z7processv+0x354>)
 8001216:	2204      	movs	r2, #4
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e003      	b.n	8001224 <_Z7processv+0x2e0>
		}
		else{											// Si no marca
			stateProcess	= 7;						// Espera en S3
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <_Z7processv+0x354>)
 800121e:	2207      	movs	r2, #7
 8001220:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001222:	e013      	b.n	800124c <_Z7processv+0x308>
 8001224:	e012      	b.n	800124c <_Z7processv+0x308>
	////////////////////////
	// S8 - FINISH PROCESS//
	////////////////////////

	case 8:
		flagSaveEeprom		= 0;
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <_Z7processv+0x350>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
		if (flagBoton){				// Si se aprieta el boton
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <_Z7processv+0x358>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <_Z7processv+0x2f8>
			stateProcess	= 0;	// Inicia proceso calibracion
 8001234:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <_Z7processv+0x354>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateProcess	= 8;	// Espera en S5
		}
		break;
 800123a:	e007      	b.n	800124c <_Z7processv+0x308>
			stateProcess	= 8;	// Espera en S5
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <_Z7processv+0x354>)
 800123e:	2208      	movs	r2, #8
 8001240:	701a      	strb	r2, [r3, #0]
		break;
 8001242:	e003      	b.n	800124c <_Z7processv+0x308>

	default:
		stateProcess	= 0;
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <_Z7processv+0x354>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		break;
 800124a:	bf00      	nop
	}

}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200003bc 	.word	0x200003bc
 800125c:	20000398 	.word	0x20000398
 8001260:	200003bd 	.word	0x200003bd
 8001264:	200003a0 	.word	0x200003a0
 8001268:	200003a2 	.word	0x200003a2
 800126c:	200003a6 	.word	0x200003a6
 8001270:	51eb851f 	.word	0x51eb851f
 8001274:	200003a8 	.word	0x200003a8
 8001278:	200003a4 	.word	0x200003a4
 800127c:	200003aa 	.word	0x200003aa
 8001280:	200003ac 	.word	0x200003ac
 8001284:	20000320 	.word	0x20000320
 8001288:	20000328 	.word	0x20000328
 800128c:	20000344 	.word	0x20000344
 8001290:	2000034c 	.word	0x2000034c
 8001294:	20000517 	.word	0x20000517
 8001298:	20000396 	.word	0x20000396
 800129c:	20000a48 	.word	0x20000a48

080012a0 <_Z7warmingv>:

/////////////
// WARMING //
/////////////

void warming(){
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	switch( stateWarming ){
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <_Z7warmingv+0x84>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d02e      	beq.n	800130a <_Z7warmingv+0x6a>
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	dc33      	bgt.n	8001318 <_Z7warmingv+0x78>
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <_Z7warmingv+0x1a>
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d00f      	beq.n	80012d8 <_Z7warmingv+0x38>
	case 2:
		flagWarmingOk	= 1;	//
		stateWarming	= 0;	//
		break;
	}
}
 80012b8:	e02e      	b.n	8001318 <_Z7warmingv+0x78>
		flagWarmingOk	= 0;		//
 80012ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <_Z7warmingv+0x88>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
		if ( flagResetWarming ){	//
 80012c0:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <_Z7warmingv+0x8c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <_Z7warmingv+0x30>
			stateWarming	= 1;	//
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <_Z7warmingv+0x84>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
		break;
 80012ce:	e023      	b.n	8001318 <_Z7warmingv+0x78>
			stateWarming	= 0;	//
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <_Z7warmingv+0x84>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
		break;
 80012d6:	e01f      	b.n	8001318 <_Z7warmingv+0x78>
		countWarming++;							//
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <_Z7warmingv+0x90>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <_Z7warmingv+0x90>)
 80012e0:	6013      	str	r3, [r2, #0]
		flagWarmingOk	= 0;					//
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <_Z7warmingv+0x88>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
		if ( countWarming >= limitWarming ){	//
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <_Z7warmingv+0x90>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <_Z7warmingv+0x94>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d306      	bcc.n	8001302 <_Z7warmingv+0x62>
			countWarming	= 0;				//
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <_Z7warmingv+0x90>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
			stateWarming	= 2;				//
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <_Z7warmingv+0x84>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
		break;
 8001300:	e00a      	b.n	8001318 <_Z7warmingv+0x78>
			stateWarming	= 1;				//
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <_Z7warmingv+0x84>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
		break;
 8001308:	e006      	b.n	8001318 <_Z7warmingv+0x78>
		flagWarmingOk	= 1;	//
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <_Z7warmingv+0x88>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
		stateWarming	= 0;	//
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <_Z7warmingv+0x84>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
		break;
 8001316:	bf00      	nop
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	2000038c 	.word	0x2000038c
 8001328:	20000394 	.word	0x20000394
 800132c:	20000395 	.word	0x20000395
 8001330:	20000390 	.word	0x20000390
 8001334:	20000000 	.word	0x20000000

08001338 <_Z3iirs>:
	}
	return  value;
}


__int16_t iir(__int16_t NewSample) {
 8001338:	b490      	push	{r4, r7}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
    __int16_t ACoef[NCoef+1] = {
 8001342:	4a3a      	ldr	r2, [pc, #232]	@ (800142c <_Z3iirs+0xf4>)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	e892 0003 	ldmia.w	r2, {r0, r1}
 800134c:	6018      	str	r0, [r3, #0]
 800134e:	3304      	adds	r3, #4
 8001350:	8019      	strh	r1, [r3, #0]
         8294,
        16588,
         8294
    };

    __int16_t BCoef[NCoef+1] = {
 8001352:	4a37      	ldr	r2, [pc, #220]	@ (8001430 <_Z3iirs+0xf8>)
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135c:	6018      	str	r0, [r3, #0]
 800135e:	3304      	adds	r3, #4
 8001360:	8019      	strh	r1, [r3, #0]

    static __int16_t x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e014      	b.n	8001392 <_Z3iirs+0x5a>
       x[n] = x[n-1];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	3b01      	subs	r3, #1
 800136c:	4a31      	ldr	r2, [pc, #196]	@ (8001434 <_Z3iirs+0xfc>)
 800136e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001372:	4a30      	ldr	r2, [pc, #192]	@ (8001434 <_Z3iirs+0xfc>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
       y[n] = y[n-1];
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b01      	subs	r3, #1
 800137e:	4a2e      	ldr	r2, [pc, #184]	@ (8001438 <_Z3iirs+0x100>)
 8001380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001384:	492c      	ldr	r1, [pc, #176]	@ (8001438 <_Z3iirs+0x100>)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(n=NCoef; n>0; n--) {
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	3b01      	subs	r3, #1
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dce7      	bgt.n	8001368 <_Z3iirs+0x30>
    }

    //Calculate the new output
    x[0] = NewSample;
 8001398:	4a26      	ldr	r2, [pc, #152]	@ (8001434 <_Z3iirs+0xfc>)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	8013      	strh	r3, [r2, #0]
    y[0] = ACoef[0] * x[0];
 800139e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <_Z3iirs+0xfc>)
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a22      	ldr	r2, [pc, #136]	@ (8001438 <_Z3iirs+0x100>)
 80013b0:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef; n++)
 80013b2:	2301      	movs	r3, #1
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	e022      	b.n	80013fe <_Z3iirs+0xc6>
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <_Z3iirs+0x100>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	3320      	adds	r3, #32
 80013c2:	443b      	add	r3, r7
 80013c4:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80013c8:	4618      	mov	r0, r3
 80013ca:	491a      	ldr	r1, [pc, #104]	@ (8001434 <_Z3iirs+0xfc>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80013d2:	fb03 f100 	mul.w	r1, r3, r0
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	3320      	adds	r3, #32
 80013dc:	443b      	add	r3, r7
 80013de:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80013e2:	461c      	mov	r4, r3
 80013e4:	4814      	ldr	r0, [pc, #80]	@ (8001438 <_Z3iirs+0x100>)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80013ec:	fb04 f303 	mul.w	r3, r4, r3
 80013f0:	1acb      	subs	r3, r1, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	4a10      	ldr	r2, [pc, #64]	@ (8001438 <_Z3iirs+0x100>)
 80013f6:	6013      	str	r3, [r2, #0]
    for(n=1; n<=NCoef; n++)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3301      	adds	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	2b02      	cmp	r3, #2
 8001402:	ddd9      	ble.n	80013b8 <_Z3iirs+0x80>

    y[0] /= BCoef[0];
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <_Z3iirs+0x100>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800140c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001410:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <_Z3iirs+0x100>)
 8001412:	6013      	str	r3, [r2, #0]

    return y[0] / DCgain;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <_Z3iirs+0x100>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	da00      	bge.n	800141e <_Z3iirs+0xe6>
 800141c:	3307      	adds	r3, #7
 800141e:	10db      	asrs	r3, r3, #3
 8001420:	b21b      	sxth	r3, r3
}
 8001422:	4618      	mov	r0, r3
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bc90      	pop	{r4, r7}
 800142a:	4770      	bx	lr
 800142c:	0800bfb0 	.word	0x0800bfb0
 8001430:	0800bfb8 	.word	0x0800bfb8
 8001434:	20000410 	.word	0x20000410
 8001438:	20000404 	.word	0x20000404

0800143c <_Z4iir2s>:

__int16_t iir2(__int16_t NewSample) {
 800143c:	b490      	push	{r4, r7}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
    __int16_t ACoef2[NCoef+1] = {
 8001446:	4a3a      	ldr	r2, [pc, #232]	@ (8001530 <_Z4iir2s+0xf4>)
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001450:	6018      	str	r0, [r3, #0]
 8001452:	3304      	adds	r3, #4
 8001454:	8019      	strh	r1, [r3, #0]
         8294,
        16588,
         8294
    };

    __int16_t BCoef2[NCoef+1] = {
 8001456:	4a37      	ldr	r2, [pc, #220]	@ (8001534 <_Z4iir2s+0xf8>)
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001460:	6018      	str	r0, [r3, #0]
 8001462:	3304      	adds	r3, #4
 8001464:	8019      	strh	r1, [r3, #0]

    static __int16_t x2[NCoef+1]; //input samples
    int n2;

    //shift the old samples
    for(n2=NCoef; n2>0; n2--) {
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e014      	b.n	8001496 <_Z4iir2s+0x5a>
       x2[n2] = x2[n2-1];
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	3b01      	subs	r3, #1
 8001470:	4a31      	ldr	r2, [pc, #196]	@ (8001538 <_Z4iir2s+0xfc>)
 8001472:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001476:	4a30      	ldr	r2, [pc, #192]	@ (8001538 <_Z4iir2s+0xfc>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
       y2[n2] = y2[n2-1];
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b01      	subs	r3, #1
 8001482:	4a2e      	ldr	r2, [pc, #184]	@ (800153c <_Z4iir2s+0x100>)
 8001484:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001488:	492c      	ldr	r1, [pc, #176]	@ (800153c <_Z4iir2s+0x100>)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(n2=NCoef; n2>0; n2--) {
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	3b01      	subs	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	dce7      	bgt.n	800146c <_Z4iir2s+0x30>
    }

    //Calculate the new output
    x2[0] = NewSample;
 800149c:	4a26      	ldr	r2, [pc, #152]	@ (8001538 <_Z4iir2s+0xfc>)
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	8013      	strh	r3, [r2, #0]
    y2[0] = ACoef2[0] * x2[0];
 80014a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <_Z4iir2s+0xfc>)
 80014aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	4a22      	ldr	r2, [pc, #136]	@ (800153c <_Z4iir2s+0x100>)
 80014b4:	6013      	str	r3, [r2, #0]
    for(n2=1; n2<=NCoef; n2++)
 80014b6:	2301      	movs	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e022      	b.n	8001502 <_Z4iir2s+0xc6>
        y2[0] += ACoef2[n2] * x2[n2] - BCoef2[n2] * y2[n2];
 80014bc:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <_Z4iir2s+0x100>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	3320      	adds	r3, #32
 80014c6:	443b      	add	r3, r7
 80014c8:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	491a      	ldr	r1, [pc, #104]	@ (8001538 <_Z4iir2s+0xfc>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80014d6:	fb03 f100 	mul.w	r1, r3, r0
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	3320      	adds	r3, #32
 80014e0:	443b      	add	r3, r7
 80014e2:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80014e6:	461c      	mov	r4, r3
 80014e8:	4814      	ldr	r0, [pc, #80]	@ (800153c <_Z4iir2s+0x100>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014f0:	fb04 f303 	mul.w	r3, r4, r3
 80014f4:	1acb      	subs	r3, r1, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	4a10      	ldr	r2, [pc, #64]	@ (800153c <_Z4iir2s+0x100>)
 80014fa:	6013      	str	r3, [r2, #0]
    for(n2=1; n2<=NCoef; n2++)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3301      	adds	r3, #1
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b02      	cmp	r3, #2
 8001506:	ddd9      	ble.n	80014bc <_Z4iir2s+0x80>

    y2[0] /= BCoef2[0];
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <_Z4iir2s+0x100>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001510:	fb93 f3f2 	sdiv	r3, r3, r2
 8001514:	4a09      	ldr	r2, [pc, #36]	@ (800153c <_Z4iir2s+0x100>)
 8001516:	6013      	str	r3, [r2, #0]

    return y2[0] / DCgain;
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <_Z4iir2s+0x100>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da00      	bge.n	8001522 <_Z4iir2s+0xe6>
 8001520:	3307      	adds	r3, #7
 8001522:	10db      	asrs	r3, r3, #3
 8001524:	b21b      	sxth	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bc90      	pop	{r4, r7}
 800152e:	4770      	bx	lr
 8001530:	0800bfb0 	.word	0x0800bfb0
 8001534:	0800bfb8 	.word	0x0800bfb8
 8001538:	20000424 	.word	0x20000424
 800153c:	20000418 	.word	0x20000418

08001540 <_ZSt4fabsIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7fe ffa1 	bl	8000490 <__aeabi_i2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4614      	mov	r4, r2
 8001554:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001558:	ec45 4b17 	vmov	d7, r4, r5
 800155c:	eeb0 0a47 	vmov.f32	s0, s14
 8001560:	eef0 0a67 	vmov.f32	s1, s15
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800156c <_Z41__static_initialization_and_destruction_0ii>:
        y3[0] += ACoef3[n] * x3[n] - BCoef3[n] * y3[n];

    y3[0] /= BCoef3[0];

    return y3[0] / DCgain2;
}
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d121      	bne.n	80015c0 <_Z41__static_initialization_and_destruction_0ii+0x54>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001582:	4293      	cmp	r3, r2
 8001584:	d11c      	bne.n	80015c0 <_Z41__static_initialization_and_destruction_0ii+0x54>
int limitLoraApp = 5000/superloop;		//
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001590:	fb93 f3f2 	sdiv	r3, r3, r2
 8001594:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001596:	6013      	str	r3, [r2, #0]
const uint32_t limitProcess	= 20000/superloop;	//
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80015aa:	601a      	str	r2, [r3, #0]
const uint32_t limitStability	= 20000/superloop;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	2000035f 	.word	0x2000035f
 80015d0:	20000388 	.word	0x20000388
 80015d4:	2000039c 	.word	0x2000039c
 80015d8:	200003b8 	.word	0x200003b8

080015dc <_GLOBAL__sub_I_stateContent>:
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
 80015e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff ffc1 	bl	800156c <_Z41__static_initialization_and_destruction_0ii>
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZN8fifoUartC1Ev>:
}


/********************/

fifoUart::fifoUart(){
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	this->finalElement = this->elements;	// Cuando se construye la fifo
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f103 020c 	add.w	r2, r3, #12
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	601a      	str	r2, [r3, #0]
											// El puntero de ultimo elemento
											// Apunta al primer elemento de la cadena
}
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_ZN8fifoUart13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

bool fifoUart::insertElement( uint8_t element ){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]

	if (!(this->bussyFifo)){							// Si no está lleno
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	795b      	ldrb	r3, [r3, #5]
 800161c:	f083 0301 	eor.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00d      	beq.n	8001642 <_ZN8fifoUart13insertElementEh+0x36>
		*this->finalElement	= element;					// Inserta elemento
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	701a      	strb	r2, [r3, #0]
		this->finalElement = this->finalElement + 1;	// Suma 1 al puntero
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	601a      	str	r2, [r3, #0]
		this->large++;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	609a      	str	r2, [r3, #8]
	}

	if ( this->finalElement == &this->elements[50] ){	// Si el puntero es el último del array
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	333e      	adds	r3, #62	@ 0x3e
 800164a:	429a      	cmp	r2, r3
 800164c:	d103      	bne.n	8001656 <_ZN8fifoUart13insertElementEh+0x4a>
		this->bussyFifo	= 1;							// Indica que se lleno el buffer
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	715a      	strb	r2, [r3, #5]
 8001654:	e002      	b.n	800165c <_ZN8fifoUart13insertElementEh+0x50>
	}
	else{												// Si no
		this->bussyFifo	= 0;							// Indica que no se ha llenado
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	715a      	strb	r2, [r3, #5]
	}

	return !(this->bussyFifo);							// 1: Se insertó correctamente
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	795b      	ldrb	r3, [r3, #5]
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
														// 0: No se inserto por Fifo llena
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_ZN8fifoUart11readElementEv>:

//////////////////
// READ ELEMENT //
//////////////////

uint8_t fifoUart::readElement(){
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]

	uint8_t elementy	= this->elements[0];							// Copia primer valor en fifo
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b1b      	ldrb	r3, [r3, #12]
 800167e:	72fb      	strb	r3, [r7, #11]

	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	330c      	adds	r3, #12
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e006      	b.n	8001696 <_ZN8fifoUart11readElementEv+0x24>
		*j	= *(j+1);													// Copia el elemento siguiente
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	785a      	ldrb	r2, [r3, #1]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	701a      	strb	r2, [r3, #0]
	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3f3      	bcc.n	8001688 <_ZN8fifoUart11readElementEv+0x16>
	}

	*this->finalElement = 0;											// Rellena el último valor con 0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]

	if (this->finalElement != this->elements){							// Si el último elemento no es el primero
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	330c      	adds	r3, #12
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d00d      	beq.n	80016d0 <_ZN8fifoUart11readElementEv+0x5e>
		this->finalElement	= this->finalElement - 1;					//  Resta una posición al elemento final
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
		this->emptyFifo	= 0;											// Indica que fifo no esta vacia
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	711a      	strb	r2, [r3, #4]
		this->large--;													// Quita 1 al largo
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	e002      	b.n	80016d6 <_ZN8fifoUart11readElementEv+0x64>
	}
	else{																// Si no
		this->emptyFifo	= 1;											// Indica que fifo esta vacia
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	711a      	strb	r2, [r3, #4]
	}

	return elementy;													// Retorna elementos a leer
 80016d6:	7afb      	ldrb	r3, [r7, #11]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN8fifoUart9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoUart::available(){
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	if (this->finalElement == &this->elements[0]){		// Si el puntero está apuntando
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	330c      	adds	r3, #12
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d103      	bne.n	8001700 <_ZN8fifoUart9availableEv+0x1c>
														// al primer elemento de la fifo
		this->emptyFifo	= 1;							// Indica que la fifo esta vacia
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	711a      	strb	r2, [r3, #4]
 80016fe:	e002      	b.n	8001706 <_ZN8fifoUart9availableEv+0x22>
	}
	else{												// Sino
		this->emptyFifo	= 0;							// Indica que la fifo contiene elementos
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	711a      	strb	r2, [r3, #4]
	}
	return !(this->emptyFifo);							// 1: Elementos disponibles
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	f083 0301 	eor.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
}														// 0: Sin elementos
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN8gpsInputC1Ev>:

///////////////////////////
// CONSTRUCTOR GPS INPUT //
///////////////////////////

gpsInput::gpsInput(){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
};
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
	hwBoton();
 8001736:	f000 fa4d 	bl	8001bd4 <_Z7hwBotonv>
	hwSht31();
 800173a:	f000 f8f3 	bl	8001924 <_Z7hwSht31v>
	hwAds1115();
 800173e:	f000 f821 	bl	8001784 <_Z9hwAds1115v>
	hwAnalog();
 8001742:	f000 fabf 	bl	8001cc4 <_Z8hwAnalogv>
	hwEEPROM();
 8001746:	f000 fb1d 	bl	8001d84 <_Z8hwEEPROMv>
	hwGpsIn();
 800174a:	f000 faa5 	bl	8001c98 <_Z7hwGpsInv>
	hwLoraIn();
 800174e:	f000 f803 	bl	8001758 <_Z8hwLoraInv>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <_Z8hwLoraInv>:
 * Traspaso de de loraBus a loraInput
 *
 * loraInput detecta respuesta dentro de bytes entrantes
 */

void hwLoraIn(){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	if ( loraIn.available() ){					// Si hay elementos disponibles en FIFO desde DMA
 800175c:	4807      	ldr	r0, [pc, #28]	@ (800177c <_Z8hwLoraInv+0x24>)
 800175e:	f7ff ffc1 	bl	80016e4 <_ZN8fifoUart9availableEv>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <_Z8hwLoraInv+0x1e>
		loraBus	= loraIn.readElement();			// Guarda el valor
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <_Z8hwLoraInv+0x24>)
 800176a:	f7ff ff82 	bl	8001672 <_ZN8fifoUart11readElementEv>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <_Z8hwLoraInv+0x28>)
 8001774:	701a      	strb	r2, [r3, #0]
		//loraInput.insertElement( loraBus );		// Inserta en Lora Input
	}
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000aec 	.word	0x20000aec
 8001780:	200004f4 	.word	0x200004f4

08001784 <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 8001788:	4b57      	ldr	r3, [pc, #348]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b05      	cmp	r3, #5
 800178e:	f200 80a8 	bhi.w	80018e2 <_Z9hwAds1115v+0x15e>
 8001792:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <_Z9hwAds1115v+0x14>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017e5 	.word	0x080017e5
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	0800184d 	.word	0x0800184d
 80017a8:	08001873 	.word	0x08001873
 80017ac:	080018c7 	.word	0x080018c7
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 80017b0:	4b4e      	ldr	r3, [pc, #312]	@ (80018ec <_Z9hwAds1115v+0x168>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a4d      	ldr	r2, [pc, #308]	@ (80018ec <_Z9hwAds1115v+0x168>)
 80017b8:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 80017ba:	4b4c      	ldr	r3, [pc, #304]	@ (80018ec <_Z9hwAds1115v+0x168>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b4c      	ldr	r3, [pc, #304]	@ (80018f0 <_Z9hwAds1115v+0x16c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	db0a      	blt.n	80017dc <_Z9hwAds1115v+0x58>
 80017c6:	4b4b      	ldr	r3, [pc, #300]	@ (80018f4 <_Z9hwAds1115v+0x170>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 80017ce:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <_Z9hwAds1115v+0x170>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 80017d4:	4b44      	ldr	r3, [pc, #272]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 80017da:	e083      	b.n	80018e4 <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 80017dc:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
		break;
 80017e2:	e07f      	b.n	80018e4 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 80017e4:	4b41      	ldr	r3, [pc, #260]	@ (80018ec <_Z9hwAds1115v+0x168>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 80017ea:	4b43      	ldr	r3, [pc, #268]	@ (80018f8 <_Z9hwAds1115v+0x174>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 80017f2:	2303      	movs	r3, #3
 80017f4:	4a41      	ldr	r2, [pc, #260]	@ (80018fc <_Z9hwAds1115v+0x178>)
 80017f6:	2190      	movs	r1, #144	@ 0x90
 80017f8:	4841      	ldr	r0, [pc, #260]	@ (8001900 <_Z9hwAds1115v+0x17c>)
 80017fa:	f004 fe4f 	bl	800649c <HAL_I2C_Master_Transmit_DMA>
 80017fe:	e005      	b.n	800180c <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 8001800:	2303      	movs	r3, #3
 8001802:	4a40      	ldr	r2, [pc, #256]	@ (8001904 <_Z9hwAds1115v+0x180>)
 8001804:	2190      	movs	r1, #144	@ 0x90
 8001806:	483e      	ldr	r0, [pc, #248]	@ (8001900 <_Z9hwAds1115v+0x17c>)
 8001808:	f004 fe48 	bl	800649c <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 800180c:	4b3e      	ldr	r3, [pc, #248]	@ (8001908 <_Z9hwAds1115v+0x184>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 8001812:	4b35      	ldr	r3, [pc, #212]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 8001814:	2202      	movs	r2, #2
 8001816:	701a      	strb	r2, [r3, #0]

		break;
 8001818:	e064      	b.n	80018e4 <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 800181a:	2301      	movs	r3, #1
 800181c:	4a3b      	ldr	r2, [pc, #236]	@ (800190c <_Z9hwAds1115v+0x188>)
 800181e:	2190      	movs	r1, #144	@ 0x90
 8001820:	4837      	ldr	r0, [pc, #220]	@ (8001900 <_Z9hwAds1115v+0x17c>)
 8001822:	f004 fe3b 	bl	800649c <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 8001826:	4b38      	ldr	r3, [pc, #224]	@ (8001908 <_Z9hwAds1115v+0x184>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	f083 0301 	eor.w	r3, r3, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <_Z9hwAds1115v+0x18c>)
 8001832:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 8001834:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <_Z9hwAds1115v+0x184>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 800183e:	2203      	movs	r2, #3
 8001840:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 8001842:	e04f      	b.n	80018e4 <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 8001844:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 8001846:	2205      	movs	r2, #5
 8001848:	701a      	strb	r2, [r3, #0]
		break;
 800184a:	e04b      	b.n	80018e4 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 800184c:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <_Z9hwAds1115v+0x168>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	4a26      	ldr	r2, [pc, #152]	@ (80018ec <_Z9hwAds1115v+0x168>)
 8001854:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 8001856:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <_Z9hwAds1115v+0x168>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <_Z9hwAds1115v+0x190>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	db03      	blt.n	800186a <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 8001864:	2204      	movs	r2, #4
 8001866:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 8001868:	e03c      	b.n	80018e4 <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 800186c:	2203      	movs	r2, #3
 800186e:	701a      	strb	r2, [r3, #0]
		break;
 8001870:	e038      	b.n	80018e4 <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <_Z9hwAds1115v+0x168>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 8001878:	2302      	movs	r3, #2
 800187a:	4a27      	ldr	r2, [pc, #156]	@ (8001918 <_Z9hwAds1115v+0x194>)
 800187c:	2190      	movs	r1, #144	@ 0x90
 800187e:	4820      	ldr	r0, [pc, #128]	@ (8001900 <_Z9hwAds1115v+0x17c>)
 8001880:	f004 ff20 	bl	80066c4 <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <_Z9hwAds1115v+0x174>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00c      	beq.n	80018a6 <_Z9hwAds1115v+0x122>
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 800188c:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <_Z9hwAds1115v+0x194>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b21a      	sxth	r2, r3
 8001894:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <_Z9hwAds1115v+0x194>)
 8001896:	785b      	ldrb	r3, [r3, #1]
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21b      	sxth	r3, r3
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <_Z9hwAds1115v+0x198>)
 80018a2:	801a      	strh	r2, [r3, #0]
 80018a4:	e00b      	b.n	80018be <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 80018a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <_Z9hwAds1115v+0x194>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <_Z9hwAds1115v+0x194>)
 80018b0:	785b      	ldrb	r3, [r3, #1]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <_Z9hwAds1115v+0x19c>)
 80018bc:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 80018c0:	2205      	movs	r2, #5
 80018c2:	701a      	strb	r2, [r3, #0]
		break;
 80018c4:	e00e      	b.n	80018e4 <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <_Z9hwAds1115v+0x174>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <_Z9hwAds1115v+0x174>)
 80018d2:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <_Z9hwAds1115v+0x170>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 80018da:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <_Z9hwAds1115v+0x164>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
		break;
 80018e0:	e000      	b.n	80018e4 <_Z9hwAds1115v+0x160>

	default:
		break;
 80018e2:	bf00      	nop
	}
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000454 	.word	0x20000454
 80018ec:	20000458 	.word	0x20000458
 80018f0:	2000045c 	.word	0x2000045c
 80018f4:	2000000b 	.word	0x2000000b
 80018f8:	2000046e 	.word	0x2000046e
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	200006d8 	.word	0x200006d8
 8001904:	20000010 	.word	0x20000010
 8001908:	20001093 	.word	0x20001093
 800190c:	20000464 	.word	0x20000464
 8001910:	20000500 	.word	0x20000500
 8001914:	20000460 	.word	0x20000460
 8001918:	20000468 	.word	0x20000468
 800191c:	2000046c 	.word	0x2000046c
 8001920:	2000046a 	.word	0x2000046a

08001924 <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 8001928:	4b98      	ldr	r3, [pc, #608]	@ (8001b8c <_Z7hwSht31v+0x268>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b06      	cmp	r3, #6
 800192e:	f200 8126 	bhi.w	8001b7e <_Z7hwSht31v+0x25a>
 8001932:	a201      	add	r2, pc, #4	@ (adr r2, 8001938 <_Z7hwSht31v+0x14>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001955 	.word	0x08001955
 800193c:	08001989 	.word	0x08001989
 8001940:	080019c7 	.word	0x080019c7
 8001944:	08001a0b 	.word	0x08001a0b
 8001948:	08001a31 	.word	0x08001a31
 800194c:	08001a51 	.word	0x08001a51
 8001950:	08001b4d 	.word	0x08001b4d
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 8001954:	4b8e      	ldr	r3, [pc, #568]	@ (8001b90 <_Z7hwSht31v+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	4a8d      	ldr	r2, [pc, #564]	@ (8001b90 <_Z7hwSht31v+0x26c>)
 800195c:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 800195e:	4b8c      	ldr	r3, [pc, #560]	@ (8001b90 <_Z7hwSht31v+0x26c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b8c      	ldr	r3, [pc, #560]	@ (8001b94 <_Z7hwSht31v+0x270>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	db0a      	blt.n	8001980 <_Z7hwSht31v+0x5c>
 800196a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b98 <_Z7hwSht31v+0x274>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 8001972:	4b89      	ldr	r3, [pc, #548]	@ (8001b98 <_Z7hwSht31v+0x274>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 8001978:	4b84      	ldr	r3, [pc, #528]	@ (8001b8c <_Z7hwSht31v+0x268>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 800197e:	e102      	b.n	8001b86 <_Z7hwSht31v+0x262>
			stateSht31	= 0;					// Espera
 8001980:	4b82      	ldr	r3, [pc, #520]	@ (8001b8c <_Z7hwSht31v+0x268>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
		break;
 8001986:	e0fe      	b.n	8001b86 <_Z7hwSht31v+0x262>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 8001988:	4b81      	ldr	r3, [pc, #516]	@ (8001b90 <_Z7hwSht31v+0x26c>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 800198e:	4b83      	ldr	r3, [pc, #524]	@ (8001b9c <_Z7hwSht31v+0x278>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b81      	ldr	r3, [pc, #516]	@ (8001ba0 <_Z7hwSht31v+0x27c>)
 800199a:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 800199c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b9c <_Z7hwSht31v+0x278>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba0 <_Z7hwSht31v+0x27c>)
 80019a4:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 80019a6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba4 <_Z7hwSht31v+0x280>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 80019ac:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba8 <_Z7hwSht31v+0x284>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	b299      	uxth	r1, r3
 80019b4:	2302      	movs	r3, #2
 80019b6:	4a7a      	ldr	r2, [pc, #488]	@ (8001ba0 <_Z7hwSht31v+0x27c>)
 80019b8:	487c      	ldr	r0, [pc, #496]	@ (8001bac <_Z7hwSht31v+0x288>)
 80019ba:	f004 fd6f 	bl	800649c <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 80019be:	4b73      	ldr	r3, [pc, #460]	@ (8001b8c <_Z7hwSht31v+0x268>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	701a      	strb	r2, [r3, #0]
		break;
 80019c4:	e0df      	b.n	8001b86 <_Z7hwSht31v+0x262>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 80019c6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb0 <_Z7hwSht31v+0x28c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	f083 0301 	eor.w	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <_Z7hwSht31v+0xc0>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 80019d4:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <_Z7hwSht31v+0x280>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	f083 0301 	eor.w	r3, r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b75      	ldr	r3, [pc, #468]	@ (8001bb4 <_Z7hwSht31v+0x290>)
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e006      	b.n	80019f2 <_Z7hwSht31v+0xce>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 80019e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <_Z7hwSht31v+0x280>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f083 0301 	eor.w	r3, r3, #1
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b71      	ldr	r3, [pc, #452]	@ (8001bb4 <_Z7hwSht31v+0x290>)
 80019f0:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 80019f2:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba4 <_Z7hwSht31v+0x280>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <_Z7hwSht31v+0xde>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 80019fa:	4b64      	ldr	r3, [pc, #400]	@ (8001b8c <_Z7hwSht31v+0x268>)
 80019fc:	2203      	movs	r2, #3
 80019fe:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 8001a00:	e0c1      	b.n	8001b86 <_Z7hwSht31v+0x262>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 8001a02:	4b62      	ldr	r3, [pc, #392]	@ (8001b8c <_Z7hwSht31v+0x268>)
 8001a04:	2206      	movs	r2, #6
 8001a06:	701a      	strb	r2, [r3, #0]
		break;
 8001a08:	e0bd      	b.n	8001b86 <_Z7hwSht31v+0x262>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 8001a0a:	4b61      	ldr	r3, [pc, #388]	@ (8001b90 <_Z7hwSht31v+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a5f      	ldr	r2, [pc, #380]	@ (8001b90 <_Z7hwSht31v+0x26c>)
 8001a12:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 8001a14:	4b5e      	ldr	r3, [pc, #376]	@ (8001b90 <_Z7hwSht31v+0x26c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b67      	ldr	r3, [pc, #412]	@ (8001bb8 <_Z7hwSht31v+0x294>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	db03      	blt.n	8001a28 <_Z7hwSht31v+0x104>
			stateSht31	= 4;					// Pasa a S4
 8001a20:	4b5a      	ldr	r3, [pc, #360]	@ (8001b8c <_Z7hwSht31v+0x268>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 8001a26:	e0ae      	b.n	8001b86 <_Z7hwSht31v+0x262>
			stateSht31	= 3;					// Espera en S3
 8001a28:	4b58      	ldr	r3, [pc, #352]	@ (8001b8c <_Z7hwSht31v+0x268>)
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	701a      	strb	r2, [r3, #0]
		break;
 8001a2e:	e0aa      	b.n	8001b86 <_Z7hwSht31v+0x262>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 8001a30:	4b57      	ldr	r3, [pc, #348]	@ (8001b90 <_Z7hwSht31v+0x26c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 8001a36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ba8 <_Z7hwSht31v+0x284>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	2306      	movs	r3, #6
 8001a40:	4a5e      	ldr	r2, [pc, #376]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001a42:	485a      	ldr	r0, [pc, #360]	@ (8001bac <_Z7hwSht31v+0x288>)
 8001a44:	f004 fe3e 	bl	80066c4 <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 8001a48:	4b50      	ldr	r3, [pc, #320]	@ (8001b8c <_Z7hwSht31v+0x268>)
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	701a      	strb	r2, [r3, #0]
		break;
 8001a4e:	e09a      	b.n	8001b86 <_Z7hwSht31v+0x262>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 8001a50:	4b57      	ldr	r3, [pc, #348]	@ (8001bb0 <_Z7hwSht31v+0x28c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f083 0301 	eor.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d039      	beq.n	8001ad2 <_Z7hwSht31v+0x1ae>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8001a5e:	4b57      	ldr	r3, [pc, #348]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4a55      	ldr	r2, [pc, #340]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001a68:	7852      	ldrb	r2, [r2, #1]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b54      	ldr	r3, [pc, #336]	@ (8001bc0 <_Z7hwSht31v+0x29c>)
 8001a70:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 8001a72:	4b53      	ldr	r3, [pc, #332]	@ (8001bc0 <_Z7hwSht31v+0x29c>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	4a50      	ldr	r2, [pc, #320]	@ (8001bc4 <_Z7hwSht31v+0x2a0>)
 8001a82:	fb82 1203 	smull	r1, r2, r2, r3
 8001a86:	441a      	add	r2, r3
 8001a88:	13d2      	asrs	r2, r2, #15
 8001a8a:	17db      	asrs	r3, r3, #31
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc0 <_Z7hwSht31v+0x29c>)
 8001a98:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 8001a9a:	4b48      	ldr	r3, [pc, #288]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001a9c:	78db      	ldrb	r3, [r3, #3]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4a46      	ldr	r2, [pc, #280]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001aa4:	7912      	ldrb	r2, [r2, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b47      	ldr	r3, [pc, #284]	@ (8001bc8 <_Z7hwSht31v+0x2a4>)
 8001aac:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 8001aae:	4b46      	ldr	r3, [pc, #280]	@ (8001bc8 <_Z7hwSht31v+0x2a4>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	4a41      	ldr	r2, [pc, #260]	@ (8001bc4 <_Z7hwSht31v+0x2a0>)
 8001abe:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac2:	441a      	add	r2, r3
 8001ac4:	13d2      	asrs	r2, r2, #15
 8001ac6:	17db      	asrs	r3, r3, #31
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc8 <_Z7hwSht31v+0x2a4>)
 8001ace:	801a      	strh	r2, [r3, #0]
 8001ad0:	e038      	b.n	8001b44 <_Z7hwSht31v+0x220>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4a38      	ldr	r2, [pc, #224]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001adc:	7852      	ldrb	r2, [r2, #1]
 8001ade:	4413      	add	r3, r2
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bcc <_Z7hwSht31v+0x2a8>)
 8001ae4:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 8001ae6:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <_Z7hwSht31v+0x2a8>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	4a33      	ldr	r2, [pc, #204]	@ (8001bc4 <_Z7hwSht31v+0x2a0>)
 8001af6:	fb82 1203 	smull	r1, r2, r2, r3
 8001afa:	441a      	add	r2, r3
 8001afc:	13d2      	asrs	r2, r2, #15
 8001afe:	17db      	asrs	r3, r3, #31
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <_Z7hwSht31v+0x2a8>)
 8001b0c:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001b10:	78db      	ldrb	r3, [r3, #3]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4a29      	ldr	r2, [pc, #164]	@ (8001bbc <_Z7hwSht31v+0x298>)
 8001b18:	7912      	ldrb	r2, [r2, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd0 <_Z7hwSht31v+0x2ac>)
 8001b20:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 8001b22:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <_Z7hwSht31v+0x2ac>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	4a24      	ldr	r2, [pc, #144]	@ (8001bc4 <_Z7hwSht31v+0x2a0>)
 8001b32:	fb82 1203 	smull	r1, r2, r2, r3
 8001b36:	441a      	add	r2, r3
 8001b38:	13d2      	asrs	r2, r2, #15
 8001b3a:	17db      	asrs	r3, r3, #31
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <_Z7hwSht31v+0x2ac>)
 8001b42:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <_Z7hwSht31v+0x268>)
 8001b46:	2206      	movs	r2, #6
 8001b48:	701a      	strb	r2, [r3, #0]
		break;
 8001b4a:	e01c      	b.n	8001b86 <_Z7hwSht31v+0x262>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <_Z7hwSht31v+0x274>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 8001b52:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <_Z7hwSht31v+0x28c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f083 0301 	eor.w	r3, r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <_Z7hwSht31v+0x28c>)
 8001b5e:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <_Z7hwSht31v+0x28c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <_Z7hwSht31v+0x24c>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 8001b68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <_Z7hwSht31v+0x284>)
 8001b6a:	2244      	movs	r2, #68	@ 0x44
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e002      	b.n	8001b76 <_Z7hwSht31v+0x252>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 8001b70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <_Z7hwSht31v+0x284>)
 8001b72:	2245      	movs	r2, #69	@ 0x45
 8001b74:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <_Z7hwSht31v+0x268>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
		break;
 8001b7c:	e003      	b.n	8001b86 <_Z7hwSht31v+0x262>

	default:
		stateSht31	= 0;
 8001b7e:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <_Z7hwSht31v+0x268>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
		break;
 8001b84:	bf00      	nop
	}
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000435 	.word	0x20000435
 8001b90:	20000438 	.word	0x20000438
 8001b94:	2000043c 	.word	0x2000043c
 8001b98:	2000000b 	.word	0x2000000b
 8001b9c:	20000006 	.word	0x20000006
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20001093 	.word	0x20001093
 8001ba8:	2000000a 	.word	0x2000000a
 8001bac:	200006d8 	.word	0x200006d8
 8001bb0:	2000044a 	.word	0x2000044a
 8001bb4:	20000500 	.word	0x20000500
 8001bb8:	20000440 	.word	0x20000440
 8001bbc:	20000444 	.word	0x20000444
 8001bc0:	2000044c 	.word	0x2000044c
 8001bc4:	80008001 	.word	0x80008001
 8001bc8:	2000044e 	.word	0x2000044e
 8001bcc:	20000450 	.word	0x20000450
 8001bd0:	20000452 	.word	0x20000452

08001bd4 <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 8001bd8:	2108      	movs	r1, #8
 8001bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bde:	f004 fb91 	bl	8006304 <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <_Z7hwBotonv+0xb0>)
 8001bf0:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 8001bf2:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <_Z7hwBotonv+0xb4>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d03a      	beq.n	8001c70 <_Z7hwBotonv+0x9c>
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	dc3f      	bgt.n	8001c7e <_Z7hwBotonv+0xaa>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <_Z7hwBotonv+0x34>
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d012      	beq.n	8001c2c <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 8001c06:	e03a      	b.n	8001c7e <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 8001c08:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <_Z7hwBotonv+0xb8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <_Z7hwBotonv+0xbc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 8001c14:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <_Z7hwBotonv+0xb0>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <_Z7hwBotonv+0xb4>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
		break;
 8001c22:	e02d      	b.n	8001c80 <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 8001c24:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <_Z7hwBotonv+0xb4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
		break;
 8001c2a:	e029      	b.n	8001c80 <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 8001c2c:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <_Z7hwBotonv+0xb8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <_Z7hwBotonv+0xb8>)
 8001c34:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <_Z7hwBotonv+0xb0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <_Z7hwBotonv+0x7e>
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_Z7hwBotonv+0xb8>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <_Z7hwBotonv+0xc0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	db03      	blt.n	8001c52 <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <_Z7hwBotonv+0xb4>)
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	701a      	strb	r2, [r3, #0]
		break;
 8001c50:	e016      	b.n	8001c80 <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 8001c52:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <_Z7hwBotonv+0xb0>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	f083 0301 	eor.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <_Z7hwBotonv+0xb4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
		break;
 8001c66:	e00b      	b.n	8001c80 <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <_Z7hwBotonv+0xb4>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
		break;
 8001c6e:	e007      	b.n	8001c80 <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 8001c70:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <_Z7hwBotonv+0xbc>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <_Z7hwBotonv+0xb4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
		break;
 8001c7c:	e000      	b.n	8001c80 <_Z7hwBotonv+0xac>
		break;
 8001c7e:	bf00      	nop
	}
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000042a 	.word	0x2000042a
 8001c88:	20000434 	.word	0x20000434
 8001c8c:	2000042c 	.word	0x2000042c
 8001c90:	20000a48 	.word	0x20000a48
 8001c94:	20000430 	.word	0x20000430

08001c98 <_Z7hwGpsInv>:
 *
 *	INPUT	:	gpsIn.available()
 *	OUTPUT	:	gpsInput.inserValue()
 */

void hwGpsIn(){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	if ( gpsIn.available() ){			// Si hay un elemento en fifo
 8001c9c:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <_Z7hwGpsInv+0x24>)
 8001c9e:	f7ff fd21 	bl	80016e4 <_ZN8fifoUart9availableEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <_Z7hwGpsInv+0x1e>
		gpsBus = gpsIn.readElement();	// Lee valor en fifo
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <_Z7hwGpsInv+0x24>)
 8001caa:	f7ff fce2 	bl	8001672 <_ZN8fifoUart11readElementEv>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <_Z7hwGpsInv+0x28>)
 8001cb4:	701a      	strb	r2, [r3, #0]
		//gpsInput.insertValue( gpsBus );	// Pasa el simbolo al otro metodo
	}
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000aa4 	.word	0x20000aa4
 8001cc0:	200004f3 	.word	0x200004f3

08001cc4 <_Z8hwAnalogv>:
 *
 *	INPUT	:	analog[0],	analog[1], flagAnalog
 *	OUTPUT	:	battery, alphaAnalog_A, alphaAnalog_B
 */

void hwAnalog(){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	switch ( stateAnalog ){
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <_Z8hwAnalogv+0x9c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d025      	beq.n	8001d1c <_Z8hwAnalogv+0x58>
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	dc42      	bgt.n	8001d5a <_Z8hwAnalogv+0x96>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <_Z8hwAnalogv+0x1a>
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d013      	beq.n	8001d04 <_Z8hwAnalogv+0x40>
		else{												// Si no ha guardado
			stateAnalog		= 2;							// Espera en S2
		}
		break;
	}
}
 8001cdc:	e03d      	b.n	8001d5a <_Z8hwAnalogv+0x96>
		countAnalog++;						// Suma 1 al contador
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <_Z8hwAnalogv+0xa0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d64 <_Z8hwAnalogv+0xa0>)
 8001ce6:	6013      	str	r3, [r2, #0]
		if ( countAnalog >= sampleAnalog ){	// Si cumple el tiempo de muestreo
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <_Z8hwAnalogv+0xa0>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <_Z8hwAnalogv+0xa4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	db03      	blt.n	8001cfc <_Z8hwAnalogv+0x38>
			stateAnalog	= 1;				// Pasa a S1
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <_Z8hwAnalogv+0x9c>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
		break;
 8001cfa:	e02e      	b.n	8001d5a <_Z8hwAnalogv+0x96>
			stateAnalog	= 0;				// Espera en S0
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <_Z8hwAnalogv+0x9c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
		break;
 8001d02:	e02a      	b.n	8001d5a <_Z8hwAnalogv+0x96>
		countAnalog	= 0;									// Reinicia contador
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <_Z8hwAnalogv+0xa0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);	// Inicia muestreo
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	4917      	ldr	r1, [pc, #92]	@ (8001d6c <_Z8hwAnalogv+0xa8>)
 8001d0e:	4818      	ldr	r0, [pc, #96]	@ (8001d70 <_Z8hwAnalogv+0xac>)
 8001d10:	f002 fcae 	bl	8004670 <HAL_ADC_Start_DMA>
		stateAnalog	= 2;									// Pasa a S2
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <_Z8hwAnalogv+0x9c>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
		break;
 8001d1a:	e01e      	b.n	8001d5a <_Z8hwAnalogv+0x96>
		if ( flagAnalog ){									// Si guardo correctamente
 8001d1c:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <_Z8hwAnalogv+0xb0>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d016      	beq.n	8001d52 <_Z8hwAnalogv+0x8e>
			battery			= (analog[0] & 0xFFFF);			// Guarda valor bateria
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_Z8hwAnalogv+0xa8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <_Z8hwAnalogv+0xb4>)
 8001d2c:	801a      	strh	r2, [r3, #0]
			alphaAnalog_B	= (analog[0] >> 16 & 0xFFFF);	// Guarda valor Alpha A
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <_Z8hwAnalogv+0xa8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <_Z8hwAnalogv+0xb8>)
 8001d38:	801a      	strh	r2, [r3, #0]
			alphaAnalog_A	= (analog[1] & 0xFFFF);			// Guarda valor Alpha B
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <_Z8hwAnalogv+0xa8>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <_Z8hwAnalogv+0xbc>)
 8001d42:	801a      	strh	r2, [r3, #0]
			flagAnalog		= 0;							// Reinicia flag de medicion analogica
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <_Z8hwAnalogv+0xb0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
			stateAnalog		= 0;							// Vuelve a S0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <_Z8hwAnalogv+0x9c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
		break;
 8001d50:	e002      	b.n	8001d58 <_Z8hwAnalogv+0x94>
			stateAnalog		= 2;							// Espera en S2
 8001d52:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <_Z8hwAnalogv+0x9c>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	701a      	strb	r2, [r3, #0]
		break;
 8001d58:	bf00      	nop
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000480 	.word	0x20000480
 8001d64:	20000478 	.word	0x20000478
 8001d68:	2000047c 	.word	0x2000047c
 8001d6c:	2000112c 	.word	0x2000112c
 8001d70:	20000628 	.word	0x20000628
 8001d74:	20001138 	.word	0x20001138
 8001d78:	20000470 	.word	0x20000470
 8001d7c:	20000474 	.word	0x20000474
 8001d80:	20000472 	.word	0x20000472

08001d84 <_Z8hwEEPROMv>:
 * 1. Indicar cada uno de los pasos de calibracion
 * 2. Guardas datos de forma periodica en EEPROM
 * 3.
 */

void hwEEPROM(){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0

	switch ( stateEEPROM ){
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f08 <_Z8hwEEPROMv+0x184>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	f200 80b0 	bhi.w	8001ef4 <_Z8hwEEPROMv+0x170>
 8001d94:	a201      	add	r2, pc, #4	@ (adr r2, 8001d9c <_Z8hwEEPROMv+0x18>)
 8001d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9a:	bf00      	nop
 8001d9c:	08001db1 	.word	0x08001db1
 8001da0:	08001e19 	.word	0x08001e19
 8001da4:	08001e81 	.word	0x08001e81
 8001da8:	08001e89 	.word	0x08001e89
 8001dac:	08001efd 	.word	0x08001efd
	// S0 - READ PAGE 0 //
	//////////////////////

	case 0:

		EEPROM_Read(0, 0,  nameSensor_0,	sizeof(nameSensor_0));		// Name of sensor
 8001db0:	2314      	movs	r3, #20
 8001db2:	4a56      	ldr	r2, [pc, #344]	@ (8001f0c <_Z8hwEEPROMv+0x188>)
 8001db4:	2100      	movs	r1, #0
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7fe fe6c 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 20, idSensor_0,		sizeof(idSensor_0));		// ID of sensor
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	4a54      	ldr	r2, [pc, #336]	@ (8001f10 <_Z8hwEEPROMv+0x18c>)
 8001dc0:	2114      	movs	r1, #20
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7fe fe66 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 24, rangeSensor_0,	sizeof(rangeSensor_0));		// Range of sensor
 8001dc8:	2304      	movs	r3, #4
 8001dca:	4a52      	ldr	r2, [pc, #328]	@ (8001f14 <_Z8hwEEPROMv+0x190>)
 8001dcc:	2118      	movs	r1, #24
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7fe fe60 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 28, amplifier_10,	sizeof(amplifier_10));		// Amplifier 1 of sensor
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	4a50      	ldr	r2, [pc, #320]	@ (8001f18 <_Z8hwEEPROMv+0x194>)
 8001dd8:	211c      	movs	r1, #28
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7fe fe5a 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 32, amplifier_20,	sizeof(amplifier_20));		// Amplifier 2 of sensor
 8001de0:	2304      	movs	r3, #4
 8001de2:	4a4e      	ldr	r2, [pc, #312]	@ (8001f1c <_Z8hwEEPROMv+0x198>)
 8001de4:	2120      	movs	r1, #32
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7fe fe54 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 36, groundSensor_0,	sizeof(groundSensor_0));	// N of curve
 8001dec:	2304      	movs	r3, #4
 8001dee:	4a4c      	ldr	r2, [pc, #304]	@ (8001f20 <_Z8hwEEPROMv+0x19c>)
 8001df0:	2124      	movs	r1, #36	@ 0x24
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7fe fe4e 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 40, curveSensor_0,	sizeof(curveSensor_0));		// M of curve
 8001df8:	2304      	movs	r3, #4
 8001dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001f24 <_Z8hwEEPROMv+0x1a0>)
 8001dfc:	2128      	movs	r1, #40	@ 0x28
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7fe fe48 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 44, dateCalib_0,		sizeof(dateCalib_0));		// Date of calibration
 8001e04:	230a      	movs	r3, #10
 8001e06:	4a48      	ldr	r2, [pc, #288]	@ (8001f28 <_Z8hwEEPROMv+0x1a4>)
 8001e08:	212c      	movs	r1, #44	@ 0x2c
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7fe fe42 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 1;												// S1 to read page 1
 8001e10:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <_Z8hwEEPROMv+0x184>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
		break;
 8001e16:	e072      	b.n	8001efe <_Z8hwEEPROMv+0x17a>
	//////////////////////
	// S1 - READ PAGE 1 //
	//////////////////////

	case 1:
		EEPROM_Read(1, 0,  nameSensor_1,	sizeof(nameSensor_1));		// Name of sensor
 8001e18:	2314      	movs	r3, #20
 8001e1a:	4a44      	ldr	r2, [pc, #272]	@ (8001f2c <_Z8hwEEPROMv+0x1a8>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7fe fe38 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 20, idSensor_1,		sizeof(idSensor_1));		// ID of sensor
 8001e24:	2304      	movs	r3, #4
 8001e26:	4a42      	ldr	r2, [pc, #264]	@ (8001f30 <_Z8hwEEPROMv+0x1ac>)
 8001e28:	2114      	movs	r1, #20
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7fe fe32 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 24, rangeSensor_1,	sizeof(rangeSensor_1));		// Range of sensor
 8001e30:	2304      	movs	r3, #4
 8001e32:	4a40      	ldr	r2, [pc, #256]	@ (8001f34 <_Z8hwEEPROMv+0x1b0>)
 8001e34:	2118      	movs	r1, #24
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7fe fe2c 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 28, amplifier_11,	sizeof(amplifier_11));		// Amplifier 1 of sensor
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f38 <_Z8hwEEPROMv+0x1b4>)
 8001e40:	211c      	movs	r1, #28
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7fe fe26 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 32, amplifier_21,	sizeof(amplifier_21));		// Amplifier 2 of sensor
 8001e48:	2304      	movs	r3, #4
 8001e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f3c <_Z8hwEEPROMv+0x1b8>)
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f7fe fe20 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 36, groundSensor_1,	sizeof(groundSensor_1));	// N of curve
 8001e54:	2304      	movs	r3, #4
 8001e56:	4a3a      	ldr	r2, [pc, #232]	@ (8001f40 <_Z8hwEEPROMv+0x1bc>)
 8001e58:	2124      	movs	r1, #36	@ 0x24
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7fe fe1a 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 40, curveSensor_1,	sizeof(curveSensor_1));		// M of curve
 8001e60:	2304      	movs	r3, #4
 8001e62:	4a38      	ldr	r2, [pc, #224]	@ (8001f44 <_Z8hwEEPROMv+0x1c0>)
 8001e64:	2128      	movs	r1, #40	@ 0x28
 8001e66:	2001      	movs	r0, #1
 8001e68:	f7fe fe14 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 44, dateCalib_1,		sizeof(dateCalib_1));		// Date of calibration
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	4a36      	ldr	r2, [pc, #216]	@ (8001f48 <_Z8hwEEPROMv+0x1c4>)
 8001e70:	212c      	movs	r1, #44	@ 0x2c
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7fe fe0e 	bl	8000a94 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 2;												// S2 to stop of read
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <_Z8hwEEPROMv+0x184>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	701a      	strb	r2, [r3, #0]
		break;
 8001e7e:	e03e      	b.n	8001efe <_Z8hwEEPROMv+0x17a>
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
		*/
		stateEEPROM	= 3;								// Pasa a S3
 8001e80:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <_Z8hwEEPROMv+0x184>)
 8001e82:	2203      	movs	r2, #3
 8001e84:	701a      	strb	r2, [r3, #0]
		break;
 8001e86:	e03a      	b.n	8001efe <_Z8hwEEPROMv+0x17a>
	// S3 - STOP READING //
	///////////////////////

	case 3:
		uint8_t i;										// Inicia contador
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8001e88:	2300      	movs	r3, #0
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	e012      	b.n	8001eb4 <_Z8hwEEPROMv+0x130>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	4a2e      	ldr	r2, [pc, #184]	@ (8001f4c <_Z8hwEEPROMv+0x1c8>)
 8001e92:	5cd2      	ldrb	r2, [r2, r3]
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	491d      	ldr	r1, [pc, #116]	@ (8001f0c <_Z8hwEEPROMv+0x188>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d103      	bne.n	8001ea6 <_Z8hwEEPROMv+0x122>
				errorHardware[4]	= 0;				// Si son iguales  no hay error
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f50 <_Z8hwEEPROMv+0x1cc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	711a      	strb	r2, [r3, #4]
 8001ea4:	e003      	b.n	8001eae <_Z8hwEEPROMv+0x12a>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <_Z8hwEEPROMv+0x1cc>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8001eac:	e005      	b.n	8001eba <_Z8hwEEPROMv+0x136>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b11      	cmp	r3, #17
 8001eb8:	d9e9      	bls.n	8001e8e <_Z8hwEEPROMv+0x10a>
			}
		}

		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8001eba:	2300      	movs	r3, #0
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	e012      	b.n	8001ee6 <_Z8hwEEPROMv+0x162>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	4a22      	ldr	r2, [pc, #136]	@ (8001f4c <_Z8hwEEPROMv+0x1c8>)
 8001ec4:	5cd2      	ldrb	r2, [r2, r3]
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	4910      	ldr	r1, [pc, #64]	@ (8001f0c <_Z8hwEEPROMv+0x188>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d103      	bne.n	8001ed8 <_Z8hwEEPROMv+0x154>
				errorHardware[4]	= 0;				// Si son iguales no idnica error
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <_Z8hwEEPROMv+0x1cc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	711a      	strb	r2, [r3, #4]
 8001ed6:	e003      	b.n	8001ee0 <_Z8hwEEPROMv+0x15c>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <_Z8hwEEPROMv+0x1cc>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8001ede:	e005      	b.n	8001eec <_Z8hwEEPROMv+0x168>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b11      	cmp	r3, #17
 8001eea:	d9e9      	bls.n	8001ec0 <_Z8hwEEPROMv+0x13c>
			}
		}
		stateEEPROM	= 4;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <_Z8hwEEPROMv+0x184>)
 8001eee:	2204      	movs	r2, #4
 8001ef0:	701a      	strb	r2, [r3, #0]
		break;
 8001ef2:	e004      	b.n	8001efe <_Z8hwEEPROMv+0x17a>

	case 4:
		break;
	default:
		stateEEPROM	= 0;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <_Z8hwEEPROMv+0x184>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
		break;
 8001efa:	e000      	b.n	8001efe <_Z8hwEEPROMv+0x17a>
		break;
 8001efc:	bf00      	nop
	}
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200004f2 	.word	0x200004f2
 8001f0c:	20000484 	.word	0x20000484
 8001f10:	20000498 	.word	0x20000498
 8001f14:	2000049c 	.word	0x2000049c
 8001f18:	200004a0 	.word	0x200004a0
 8001f1c:	200004a4 	.word	0x200004a4
 8001f20:	200004a8 	.word	0x200004a8
 8001f24:	200004ac 	.word	0x200004ac
 8001f28:	200004b0 	.word	0x200004b0
 8001f2c:	200004bc 	.word	0x200004bc
 8001f30:	200004d0 	.word	0x200004d0
 8001f34:	200004d4 	.word	0x200004d4
 8001f38:	200004d8 	.word	0x200004d8
 8001f3c:	200004dc 	.word	0x200004dc
 8001f40:	200004e0 	.word	0x200004e0
 8001f44:	200004e4 	.word	0x200004e4
 8001f48:	200004e8 	.word	0x200004e8
 8001f4c:	20000014 	.word	0x20000014
 8001f50:	20000500 	.word	0x20000500

08001f54 <_Z41__static_initialization_and_destruction_0ii>:
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d137      	bne.n	8001fd4 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d132      	bne.n	8001fd4 <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001f78:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f7c:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001f7e:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f8e:	4a16      	ldr	r2, [pc, #88]	@ (8001fe8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001f90:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 8001f92:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	2332      	movs	r3, #50	@ 0x32
 8001f9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f9e:	4a13      	ldr	r2, [pc, #76]	@ (8001fec <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001fa0:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2364      	movs	r3, #100	@ 0x64
 8001faa:	fb93 f3f2 	sdiv	r3, r3, r2
 8001fae:	4a10      	ldr	r2, [pc, #64]	@ (8001ff0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001fb0:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2314      	movs	r3, #20
 8001fba:	fb93 f3f2 	sdiv	r3, r3, r2
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001fc2:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2332      	movs	r3, #50	@ 0x32
 8001fcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8001fd0:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	2000035f 	.word	0x2000035f
 8001fe4:	20000430 	.word	0x20000430
 8001fe8:	2000043c 	.word	0x2000043c
 8001fec:	20000440 	.word	0x20000440
 8001ff0:	2000045c 	.word	0x2000045c
 8001ff4:	20000460 	.word	0x20000460
 8001ff8:	2000047c 	.word	0x2000047c

08001ffc <_GLOBAL__sub_I_boton>:
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002004:	2001      	movs	r0, #1
 8002006:	f7ff ffa5 	bl	8001f54 <_Z41__static_initialization_and_destruction_0ii>
 800200a:	bd80      	pop	{r7, pc}

0800200c <_Z8hwOutputv>:

extern uint8_t dateCalib1[10];		// Fecha de calibración

/***** OUTPUT	*****/

void hwOutput(){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	//hwDisplay();
	//hwAlarms();
	//hwLoraOut();
	//hwGpsOut();
	hwLedOut();
 8002010:	f000 f87e 	bl	8002110 <_Z8hwLedOutv>
	hwEEPROMOut();
 8002014:	f000 f802 	bl	800201c <_Z11hwEEPROMOutv>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <_Z11hwEEPROMOutv>:

////////////
// EEPROM //
////////////

void hwEEPROMOut(){
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	switch( stateEepromOut ){
 8002020:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <_Z11hwEEPROMOutv+0xcc>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d859      	bhi.n	80020dc <_Z11hwEEPROMOutv+0xc0>
 8002028:	a201      	add	r2, pc, #4	@ (adr r2, 8002030 <_Z11hwEEPROMOutv+0x14>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	08002045 	.word	0x08002045
 8002034:	0800205d 	.word	0x0800205d
 8002038:	08002065 	.word	0x08002065
 800203c:	0800209d 	.word	0x0800209d
 8002040:	080020a5 	.word	0x080020a5
	case 0:
		if (flagSaveEeprom){
 8002044:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <_Z11hwEEPROMOutv+0xd0>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <_Z11hwEEPROMOutv+0x38>
			stateEepromOut	= 1;
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <_Z11hwEEPROMOutv+0xcc>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateEepromOut	= 0;
		}
		break;
 8002052:	e047      	b.n	80020e4 <_Z11hwEEPROMOutv+0xc8>
			stateEepromOut	= 0;
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <_Z11hwEEPROMOutv+0xcc>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
		break;
 800205a:	e043      	b.n	80020e4 <_Z11hwEEPROMOutv+0xc8>
		/*
		EEPROM_Write(0, 0, nameSensor0, sizeof(nameSensor0));
		EEPROM_Write(0, 20, idSensor0, sizeof(idSensor0));
		EEPROM_Write(0, 24, rangeSensor0, sizeof(rangeSensor0));
		EEPROM_Write(0, 28, amplifier1_0, sizeof(amplifier1_0));*/
		stateEepromOut	= 2;
 800205c:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <_Z11hwEEPROMOutv+0xcc>)
 800205e:	2202      	movs	r2, #2
 8002060:	701a      	strb	r2, [r3, #0]

		break;
 8002062:	e03f      	b.n	80020e4 <_Z11hwEEPROMOutv+0xc8>

	case 2:
		EEPROM_Write(0, 32, amplifier2_0, sizeof(amplifier2_0));
 8002064:	2304      	movs	r3, #4
 8002066:	4a22      	ldr	r2, [pc, #136]	@ (80020f0 <_Z11hwEEPROMOutv+0xd4>)
 8002068:	2120      	movs	r1, #32
 800206a:	2000      	movs	r0, #0
 800206c:	f7fe fcac 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 36, groundSensor0, sizeof(groundSensor0));
 8002070:	2304      	movs	r3, #4
 8002072:	4a20      	ldr	r2, [pc, #128]	@ (80020f4 <_Z11hwEEPROMOutv+0xd8>)
 8002074:	2124      	movs	r1, #36	@ 0x24
 8002076:	2000      	movs	r0, #0
 8002078:	f7fe fca6 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 40, curveSensor0, sizeof(curveSensor0));
 800207c:	2304      	movs	r3, #4
 800207e:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <_Z11hwEEPROMOutv+0xdc>)
 8002080:	2128      	movs	r1, #40	@ 0x28
 8002082:	2000      	movs	r0, #0
 8002084:	f7fe fca0 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(0, 44, dateCalib0, sizeof(dateCalib0));
 8002088:	230a      	movs	r3, #10
 800208a:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <_Z11hwEEPROMOutv+0xe0>)
 800208c:	212c      	movs	r1, #44	@ 0x2c
 800208e:	2000      	movs	r0, #0
 8002090:	f7fe fc9a 	bl	80009c8 <_Z12EEPROM_WritettPht>
		stateEepromOut	= 3;
 8002094:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <_Z11hwEEPROMOutv+0xcc>)
 8002096:	2203      	movs	r2, #3
 8002098:	701a      	strb	r2, [r3, #0]
		break;
 800209a:	e023      	b.n	80020e4 <_Z11hwEEPROMOutv+0xc8>
	case 3:/*
		EEPROM_Write(1, 0, nameSensor1, sizeof(nameSensor0));
		EEPROM_Write(1, 20, idSensor1, sizeof(idSensor1));
		EEPROM_Write(1, 24, rangeSensor1, sizeof(rangeSensor0));
		EEPROM_Write(1, 28, amplifier1_1, sizeof(amplifier1_0));*/
		stateEepromOut	= 4;
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <_Z11hwEEPROMOutv+0xcc>)
 800209e:	2204      	movs	r2, #4
 80020a0:	701a      	strb	r2, [r3, #0]
		break;
 80020a2:	e01f      	b.n	80020e4 <_Z11hwEEPROMOutv+0xc8>

	case 4:
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
 80020a4:	2304      	movs	r3, #4
 80020a6:	4a16      	ldr	r2, [pc, #88]	@ (8002100 <_Z11hwEEPROMOutv+0xe4>)
 80020a8:	2120      	movs	r1, #32
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7fe fc8c 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
 80020b0:	2304      	movs	r3, #4
 80020b2:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <_Z11hwEEPROMOutv+0xe8>)
 80020b4:	2124      	movs	r1, #36	@ 0x24
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7fe fc86 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
 80020bc:	2304      	movs	r3, #4
 80020be:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <_Z11hwEEPROMOutv+0xec>)
 80020c0:	2128      	movs	r1, #40	@ 0x28
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7fe fc80 	bl	80009c8 <_Z12EEPROM_WritettPht>
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
 80020c8:	230a      	movs	r3, #10
 80020ca:	4a10      	ldr	r2, [pc, #64]	@ (800210c <_Z11hwEEPROMOutv+0xf0>)
 80020cc:	212c      	movs	r1, #44	@ 0x2c
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7fe fc7a 	bl	80009c8 <_Z12EEPROM_WritettPht>
		stateEepromOut	= 0;
 80020d4:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <_Z11hwEEPROMOutv+0xcc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
		break;
 80020da:	e003      	b.n	80020e4 <_Z11hwEEPROMOutv+0xc8>

	default:
		stateEepromOut	= 0;
 80020dc:	4b02      	ldr	r3, [pc, #8]	@ (80020e8 <_Z11hwEEPROMOutv+0xcc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
		break;
 80020e2:	bf00      	nop
	}
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000518 	.word	0x20000518
 80020ec:	20000517 	.word	0x20000517
 80020f0:	20000318 	.word	0x20000318
 80020f4:	20000320 	.word	0x20000320
 80020f8:	20000328 	.word	0x20000328
 80020fc:	20000330 	.word	0x20000330
 8002100:	2000033c 	.word	0x2000033c
 8002104:	20000344 	.word	0x20000344
 8002108:	2000034c 	.word	0x2000034c
 800210c:	20000354 	.word	0x20000354

08002110 <_Z8hwLedOutv>:

/////////
// LED //
/////////

void hwLedOut(){
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

	switch(stateLed){
 8002114:	4b57      	ldr	r3, [pc, #348]	@ (8002274 <_Z8hwLedOutv+0x164>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b03      	cmp	r3, #3
 800211a:	f200 80a5 	bhi.w	8002268 <_Z8hwLedOutv+0x158>
 800211e:	a201      	add	r2, pc, #4	@ (adr r2, 8002124 <_Z8hwLedOutv+0x14>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	08002169 	.word	0x08002169
 800212c:	0800219d 	.word	0x0800219d
 8002130:	08002203 	.word	0x08002203
	//////////////////
	// S0 - LED OFF //
	//////////////////

	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	2110      	movs	r1, #16
 8002138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213c:	f004 f8fa 	bl	8006334 <HAL_GPIO_WritePin>

		if ( flagLedOn ){			//
 8002140:	4b4d      	ldr	r3, [pc, #308]	@ (8002278 <_Z8hwLedOutv+0x168>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <_Z8hwLedOutv+0x40>
			stateLed	= 1;		//
 8002148:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <_Z8hwLedOutv+0x164>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
			stateLed	= 2;		//
		}
		else{						//
			stateLed	= 0;		//
		}
		break;
 800214e:	e08f      	b.n	8002270 <_Z8hwLedOutv+0x160>
		else if ( flagLedFreq ){	//
 8002150:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <_Z8hwLedOutv+0x16c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <_Z8hwLedOutv+0x50>
			stateLed	= 2;		//
 8002158:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <_Z8hwLedOutv+0x164>)
 800215a:	2202      	movs	r2, #2
 800215c:	701a      	strb	r2, [r3, #0]
		break;
 800215e:	e087      	b.n	8002270 <_Z8hwLedOutv+0x160>
			stateLed	= 0;		//
 8002160:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <_Z8hwLedOutv+0x164>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
		break;
 8002166:	e083      	b.n	8002270 <_Z8hwLedOutv+0x160>
	/////////////////
	// S1 - LED ON //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2110      	movs	r1, #16
 800216c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002170:	f004 f8e0 	bl	8006334 <HAL_GPIO_WritePin>

		if ( flagLedOff ){			//
 8002174:	4b42      	ldr	r3, [pc, #264]	@ (8002280 <_Z8hwLedOutv+0x170>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <_Z8hwLedOutv+0x74>
			stateLed	= 0;		//
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <_Z8hwLedOutv+0x164>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
			stateLed	= 2;		//
		}
		else{						//
			stateLed	= 1;		//
		}
		break;
 8002182:	e075      	b.n	8002270 <_Z8hwLedOutv+0x160>
		else if ( flagLedFreq ){	//
 8002184:	4b3d      	ldr	r3, [pc, #244]	@ (800227c <_Z8hwLedOutv+0x16c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <_Z8hwLedOutv+0x84>
			stateLed	= 2;		//
 800218c:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <_Z8hwLedOutv+0x164>)
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
		break;
 8002192:	e06d      	b.n	8002270 <_Z8hwLedOutv+0x160>
			stateLed	= 1;		//
 8002194:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <_Z8hwLedOutv+0x164>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
		break;
 800219a:	e069      	b.n	8002270 <_Z8hwLedOutv+0x160>
	///////////////////
	// S2 - LED FREQ //
	///////////////////

	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	2110      	movs	r1, #16
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a4:	f004 f8c6 	bl	8006334 <HAL_GPIO_WritePin>

		countLedOut++;							//
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <_Z8hwLedOutv+0x174>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b34      	ldr	r3, [pc, #208]	@ (8002284 <_Z8hwLedOutv+0x174>)
 80021b2:	801a      	strh	r2, [r3, #0]

		if ( flagLedOn ){						//
 80021b4:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <_Z8hwLedOutv+0x168>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <_Z8hwLedOutv+0xba>
			countLedOut	= 0;					//
 80021bc:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <_Z8hwLedOutv+0x174>)
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]
			stateLed	= 1;					//
 80021c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002274 <_Z8hwLedOutv+0x164>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
			stateLed	= 3;					//
		}
		else{									//
			stateLed	= 2;					//
		}
		break;
 80021c8:	e052      	b.n	8002270 <_Z8hwLedOutv+0x160>
		else if ( flagLedOff ){					//
 80021ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002280 <_Z8hwLedOutv+0x170>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <_Z8hwLedOutv+0xd0>
			countLedOut	= 0;					//
 80021d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <_Z8hwLedOutv+0x174>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	801a      	strh	r2, [r3, #0]
			stateLed	= 0;					//
 80021d8:	4b26      	ldr	r3, [pc, #152]	@ (8002274 <_Z8hwLedOutv+0x164>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
		break;
 80021de:	e047      	b.n	8002270 <_Z8hwLedOutv+0x160>
		else if ( countLedOut >= limitLed ){	//
 80021e0:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <_Z8hwLedOutv+0x174>)
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <_Z8hwLedOutv+0x178>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d306      	bcc.n	80021fa <_Z8hwLedOutv+0xea>
			countLedOut	= 0;					//
 80021ec:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <_Z8hwLedOutv+0x174>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	801a      	strh	r2, [r3, #0]
			stateLed	= 3;					//
 80021f2:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <_Z8hwLedOutv+0x164>)
 80021f4:	2203      	movs	r2, #3
 80021f6:	701a      	strb	r2, [r3, #0]
		break;
 80021f8:	e03a      	b.n	8002270 <_Z8hwLedOutv+0x160>
			stateLed	= 2;					//
 80021fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002274 <_Z8hwLedOutv+0x164>)
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
		break;
 8002200:	e036      	b.n	8002270 <_Z8hwLedOutv+0x160>
	///////////////////
	// S3 - LED FREQ //
	///////////////////

	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	2110      	movs	r1, #16
 8002206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220a:	f004 f893 	bl	8006334 <HAL_GPIO_WritePin>

		countLedOut++;							//
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <_Z8hwLedOutv+0x174>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <_Z8hwLedOutv+0x174>)
 8002218:	801a      	strh	r2, [r3, #0]

		if ( flagLedOn ){						//
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <_Z8hwLedOutv+0x168>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <_Z8hwLedOutv+0x120>
			countLedOut	= 0;					//
 8002222:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <_Z8hwLedOutv+0x174>)
 8002224:	2200      	movs	r2, #0
 8002226:	801a      	strh	r2, [r3, #0]
			stateLed	= 1;					//
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <_Z8hwLedOutv+0x164>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
			stateLed	= 3;					//
		}
		else{									//
			stateLed	= 2;					//
		}
		break;
 800222e:	e01f      	b.n	8002270 <_Z8hwLedOutv+0x160>
		else if ( flagLedOff ){					//
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <_Z8hwLedOutv+0x170>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <_Z8hwLedOutv+0x136>
			countLedOut	= 0;					//
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <_Z8hwLedOutv+0x174>)
 800223a:	2200      	movs	r2, #0
 800223c:	801a      	strh	r2, [r3, #0]
			stateLed	= 0;					//
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <_Z8hwLedOutv+0x164>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
		break;
 8002244:	e014      	b.n	8002270 <_Z8hwLedOutv+0x160>
		else if ( countLedOut >= limitLed ){	//
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <_Z8hwLedOutv+0x174>)
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <_Z8hwLedOutv+0x178>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d306      	bcc.n	8002260 <_Z8hwLedOutv+0x150>
			countLedOut	= 0;					//
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <_Z8hwLedOutv+0x174>)
 8002254:	2200      	movs	r2, #0
 8002256:	801a      	strh	r2, [r3, #0]
			stateLed	= 3;					//
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <_Z8hwLedOutv+0x164>)
 800225a:	2203      	movs	r2, #3
 800225c:	701a      	strb	r2, [r3, #0]
		break;
 800225e:	e007      	b.n	8002270 <_Z8hwLedOutv+0x160>
			stateLed	= 2;					//
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <_Z8hwLedOutv+0x164>)
 8002262:	2202      	movs	r2, #2
 8002264:	701a      	strb	r2, [r3, #0]
		break;
 8002266:	e003      	b.n	8002270 <_Z8hwLedOutv+0x160>

	default:
		stateLed	= 0;
 8002268:	4b02      	ldr	r3, [pc, #8]	@ (8002274 <_Z8hwLedOutv+0x164>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
		break;
 800226e:	bf00      	nop
	}
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2000050e 	.word	0x2000050e
 8002278:	20000514 	.word	0x20000514
 800227c:	20000516 	.word	0x20000516
 8002280:	20000515 	.word	0x20000515
 8002284:	20000510 	.word	0x20000510
 8002288:	20000512 	.word	0x20000512

0800228c <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d12c      	bne.n	80022f6 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d127      	bne.n	80022f6 <_Z41__static_initialization_and_destruction_0ii+0x6a>
uint16_t limitGpsAvailable	= 5000/superloop;
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80022b8:	801a      	strh	r2, [r3, #0]
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip
 80022ba:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80022c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80022cc:	801a      	strh	r2, [r3, #0]
uint16_t limitUartGps	= 20000/superloop;	//
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80022d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80022e0:	801a      	strh	r2, [r3, #0]
uint16_t limitLed	= 500/superloop;	//
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80022ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80022f4:	801a      	strh	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	2000035f 	.word	0x2000035f
 8002308:	20000508 	.word	0x20000508
 800230c:	2000050a 	.word	0x2000050a
 8002310:	2000050c 	.word	0x2000050c
 8002314:	20000512 	.word	0x20000512

08002318 <_GLOBAL__sub_I_availableGps>:
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
 800231c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002320:	2001      	movs	r0, #1
 8002322:	f7ff ffb3 	bl	800228c <_Z41__static_initialization_and_destruction_0ii>
 8002326:	bd80      	pop	{r7, pc}

08002328 <_Z9linkInputv>:
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
uint16_t countBat;						// Contador bateria

/***** INPUT *****/

void linkInput(){
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	//linkInGps();
	//linkInLora();
	linkBoton();
 800232c:	f000 f8ca 	bl	80024c4 <_Z9linkBotonv>
	linkAnalog();
 8002330:	f000 f92e 	bl	8002590 <_Z10linkAnalogv>
	linkBattery();
 8002334:	f000 f802 	bl	800233c <_Z11linkBatteryv>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <_Z11linkBatteryv>:
 * Output:
 * 		errorHardware[6]
 *
 */

void linkBattery(){
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

	batScaled = battery *510/10000;		// Escalamiento de bateria
 8002340:	4b58      	ldr	r3, [pc, #352]	@ (80024a4 <_Z11linkBatteryv+0x168>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4a56      	ldr	r2, [pc, #344]	@ (80024a8 <_Z11linkBatteryv+0x16c>)
 8002350:	fb82 1203 	smull	r1, r2, r2, r3
 8002354:	1312      	asrs	r2, r2, #12
 8002356:	17db      	asrs	r3, r3, #31
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	4a54      	ldr	r2, [pc, #336]	@ (80024ac <_Z11linkBatteryv+0x170>)
 800235c:	6013      	str	r3, [r2, #0]

	switch ( stateBattery ){
 800235e:	4b54      	ldr	r3, [pc, #336]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b04      	cmp	r3, #4
 8002364:	f200 8095 	bhi.w	8002492 <_Z11linkBatteryv+0x156>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <_Z11linkBatteryv+0x34>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002385 	.word	0x08002385
 8002374:	080023b3 	.word	0x080023b3
 8002378:	080023d5 	.word	0x080023d5
 800237c:	08002423 	.word	0x08002423
 8002380:	08002445 	.word	0x08002445
	//////////////////////////
	// S0 -  WAIT STABILITY //
	//////////////////////////

	case 0:
		countBat++;						// Suma 1 al contador
 8002384:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b49      	ldr	r3, [pc, #292]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 800238e:	801a      	strh	r2, [r3, #0]

		if ( countBat >= limitBat ){	// Si pasa limite
 8002390:	4b48      	ldr	r3, [pc, #288]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	4b48      	ldr	r3, [pc, #288]	@ (80024b8 <_Z11linkBatteryv+0x17c>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d306      	bcc.n	80023aa <_Z11linkBatteryv+0x6e>
			countBat		= 0;		// Reinicia contador
 800239c:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 800239e:	2200      	movs	r2, #0
 80023a0:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;		// Pasa a S1
 80023a2:	4b43      	ldr	r3, [pc, #268]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateBattery	= 0;		// Queda en S0
		}
		break;
 80023a8:	e077      	b.n	800249a <_Z11linkBatteryv+0x15e>
			stateBattery	= 0;		// Queda en S0
 80023aa:	4b41      	ldr	r3, [pc, #260]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
		break;
 80023b0:	e073      	b.n	800249a <_Z11linkBatteryv+0x15e>
	////////////////////////
	// S1 - CHECK BATTERY //
	////////////////////////

	case 1:
		errorHardware[6]	= 0;			// Sin error
 80023b2:	4b42      	ldr	r3, [pc, #264]	@ (80024bc <_Z11linkBatteryv+0x180>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria baja del limite
 80023b8:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <_Z11linkBatteryv+0x170>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b40      	ldr	r3, [pc, #256]	@ (80024c0 <_Z11linkBatteryv+0x184>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	da03      	bge.n	80023cc <_Z11linkBatteryv+0x90>
			stateBattery	= 2;			// Pasa a S2
 80023c4:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 80023c6:	2202      	movs	r2, #2
 80023c8:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 1;			// Queda en S1
		}
		break;
 80023ca:	e066      	b.n	800249a <_Z11linkBatteryv+0x15e>
			stateBattery	= 1;			// Queda en S1
 80023cc:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
		break;
 80023d2:	e062      	b.n	800249a <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S2 - CHECK STABILITY //
	//////////////////////////

	case 2:
		errorHardware[6]	= 0;			// Sin error
 80023d4:	4b39      	ldr	r3, [pc, #228]	@ (80024bc <_Z11linkBatteryv+0x180>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 80023da:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	3301      	adds	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 80023e4:	801a      	strh	r2, [r3, #0]

		if ( batScaled > thresholdBat ){	// Si la bateria esta Ok
 80023e6:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <_Z11linkBatteryv+0x170>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b35      	ldr	r3, [pc, #212]	@ (80024c0 <_Z11linkBatteryv+0x184>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dd06      	ble.n	8002400 <_Z11linkBatteryv+0xc4>
			countBat		= 0;			// Reinicia contador
 80023f2:	4b30      	ldr	r3, [pc, #192]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Vuelve a S1
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 2;			// Queda en S2
		}
		break;
 80023fe:	e04c      	b.n	800249a <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si el contador pasa limite
 8002400:	4b2c      	ldr	r3, [pc, #176]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	4b2c      	ldr	r3, [pc, #176]	@ (80024b8 <_Z11linkBatteryv+0x17c>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d306      	bcc.n	800241a <_Z11linkBatteryv+0xde>
			countBat		= 0;			// Reinicia contador
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
 8002412:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 8002414:	2203      	movs	r2, #3
 8002416:	701a      	strb	r2, [r3, #0]
		break;
 8002418:	e03f      	b.n	800249a <_Z11linkBatteryv+0x15e>
			stateBattery	= 2;			// Queda en S2
 800241a:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]
		break;
 8002420:	e03b      	b.n	800249a <_Z11linkBatteryv+0x15e>
	///////////////////////////////////
	// S3 - CHECK BATTERY WITH ERROR //
	///////////////////////////////////

	case 3:
		errorHardware[6]	= 1;			// Indica error
 8002422:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <_Z11linkBatteryv+0x180>)
 8002424:	2201      	movs	r2, #1
 8002426:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria esta baja
 8002428:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <_Z11linkBatteryv+0x170>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <_Z11linkBatteryv+0x184>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	da03      	bge.n	800243c <_Z11linkBatteryv+0x100>
			stateBattery	= 3;			// Sigue en S3
 8002434:	4b1e      	ldr	r3, [pc, #120]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 8002436:	2203      	movs	r2, #3
 8002438:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 4;			// Pasa a S4
		}
		break;
 800243a:	e02e      	b.n	800249a <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Pasa a S4
 800243c:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
		break;
 8002442:	e02a      	b.n	800249a <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S4 - CHECK STABILITY //
	//////////////////////////

	case 4:
		errorHardware[6]	= 1;			// Indica error
 8002444:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <_Z11linkBatteryv+0x180>)
 8002446:	2201      	movs	r2, #1
 8002448:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 800244a:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 8002454:	801a      	strh	r2, [r3, #0]

		if ( batScaled < thresholdBat ){	// Si la bateria sigue baja
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <_Z11linkBatteryv+0x170>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <_Z11linkBatteryv+0x184>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	da06      	bge.n	8002470 <_Z11linkBatteryv+0x134>
			countBat		= 0;			// Reinicia contador
 8002462:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 8002464:	2200      	movs	r2, #0
 8002466:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Vuelve a S3
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 800246a:	2203      	movs	r2, #3
 800246c:	701a      	strb	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 4;			// Queda en S4
		}
		break;
 800246e:	e014      	b.n	800249a <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si contador pasa limite
 8002470:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <_Z11linkBatteryv+0x17c>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d306      	bcc.n	800248a <_Z11linkBatteryv+0x14e>
			countBat		= 0;			// Reinicia contador
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <_Z11linkBatteryv+0x178>)
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
		break;
 8002488:	e007      	b.n	800249a <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Queda en S4
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 800248c:	2204      	movs	r2, #4
 800248e:	701a      	strb	r2, [r3, #0]
		break;
 8002490:	e003      	b.n	800249a <_Z11linkBatteryv+0x15e>

	default:
		stateBattery	= 0;
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <_Z11linkBatteryv+0x174>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
		break;
 8002498:	bf00      	nop
	}
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	20000470 	.word	0x20000470
 80024a8:	68db8bad 	.word	0x68db8bad
 80024ac:	2000053c 	.word	0x2000053c
 80024b0:	2000053a 	.word	0x2000053a
 80024b4:	20000542 	.word	0x20000542
 80024b8:	20000540 	.word	0x20000540
 80024bc:	20000500 	.word	0x20000500
 80024c0:	20000028 	.word	0x20000028

080024c4 <_Z9linkBotonv>:
 *	INPUT	:	flagBoton
 *	OUTPUT	:	displayPhy.enable
 */


void linkBoton(){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0

	switch ( stateEnableDisplay ){
 80024c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002538 <_Z9linkBotonv+0x74>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <_Z9linkBotonv+0x12>
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d013      	beq.n	80024fc <_Z9linkBotonv+0x38>
 80024d4:	e029      	b.n	800252a <_Z9linkBotonv+0x66>
	//////////////////////
	// S0 - WAIT BUTTON //
	//////////////////////

	case 0:
		displayPhy.enable(0);			//	Inhabilita display
 80024d6:	2100      	movs	r1, #0
 80024d8:	4818      	ldr	r0, [pc, #96]	@ (800253c <_Z9linkBotonv+0x78>)
 80024da:	f7fe fa43 	bl	8000964 <_ZN15displayPhysical6enableEb>
		countEnableDisplay	= 0;		//	Reinicia contador
 80024de:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <_Z9linkBotonv+0x7c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

		if ( flagBoton ){				//	Si se presiona el boton
 80024e4:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <_Z9linkBotonv+0x80>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <_Z9linkBotonv+0x30>
			stateEnableDisplay	= 1;	//	Pasa a S1
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <_Z9linkBotonv+0x74>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
		}
		else{							//	Si no
			stateEnableDisplay	= 0;	//	Espera en S0
		}
		break;
 80024f2:	e01e      	b.n	8002532 <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 0;	//	Espera en S0
 80024f4:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <_Z9linkBotonv+0x74>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
		break;
 80024fa:	e01a      	b.n	8002532 <_Z9linkBotonv+0x6e>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		displayPhy.enable(1);							// Habilita display
 80024fc:	2101      	movs	r1, #1
 80024fe:	480f      	ldr	r0, [pc, #60]	@ (800253c <_Z9linkBotonv+0x78>)
 8002500:	f7fe fa30 	bl	8000964 <_ZN15displayPhysical6enableEb>

		countEnableDisplay++;							// Suma 1 al contador
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <_Z9linkBotonv+0x7c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <_Z9linkBotonv+0x7c>)
 800250c:	6013      	str	r3, [r2, #0]

		if ( countEnableDisplay > limitEnableDisplay ){	// Si llega al limite
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <_Z9linkBotonv+0x7c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <_Z9linkBotonv+0x84>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	dd03      	ble.n	8002522 <_Z9linkBotonv+0x5e>
			stateEnableDisplay	= 0;					// Vuelve a S0
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <_Z9linkBotonv+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateEnableDisplay	= 1;					// Espera en S1
		}
		break;
 8002520:	e007      	b.n	8002532 <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 1;					// Espera en S1
 8002522:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <_Z9linkBotonv+0x74>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
		break;
 8002528:	e003      	b.n	8002532 <_Z9linkBotonv+0x6e>

	default:
		stateEnableDisplay	= 0;
 800252a:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <_Z9linkBotonv+0x74>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
		break;
 8002530:	bf00      	nop

	}
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000528 	.word	0x20000528
 800253c:	20001084 	.word	0x20001084
 8002540:	20000520 	.word	0x20000520
 8002544:	20000a48 	.word	0x20000a48
 8002548:	20000524 	.word	0x20000524

0800254c <_Z7adc2PPMth>:
 *	MODE 2	:	ADC interno A1
 *	MODE 3	:	ADC externo B1
 *	MODE 4	:	ADC interno B1
 */

uint8_t adc2PPM( uint16_t signal, uint8_t mode){
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	80fb      	strh	r3, [r7, #6]
 8002558:	4613      	mov	r3, r2
 800255a:	717b      	strb	r3, [r7, #5]
	uint8_t result;

	result	= 1;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]

	switch ( mode ){
 8002560:	797b      	ldrb	r3, [r7, #5]
 8002562:	3b01      	subs	r3, #1
 8002564:	2b03      	cmp	r3, #3
 8002566:	d80b      	bhi.n	8002580 <_Z7adc2PPMth+0x34>
 8002568:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <_Z7adc2PPMth+0x24>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002581 	.word	0x08002581
 8002574:	08002581 	.word	0x08002581
 8002578:	08002581 	.word	0x08002581
 800257c:	08002581 	.word	0x08002581

	case 4:
		break;
	}

	return result;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <_Z10linkAnalogv>:
 *				flagAlarm_PPM,
 *				flagAlarm_TEMP
 *				flagAlarm_HUM
 */

void linkAnalog(){
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0

	/////////////////
	// CALIBRATION //
	/////////////////

	switch ( stateCalibration ){
 8002594:	4b6a      	ldr	r3, [pc, #424]	@ (8002740 <_Z10linkAnalogv+0x1b0>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <_Z10linkAnalogv+0x12>
 800259c:	2b01      	cmp	r3, #1
 800259e:	d01d      	beq.n	80025dc <_Z10linkAnalogv+0x4c>
 80025a0:	e018      	b.n	80025d4 <_Z10linkAnalogv+0x44>
	///////////////////////////////
	// S0 - WAIT FOR CALIBRATION //
	///////////////////////////////

	case 0:
		countCalibration++;								// Suma 1 al contador
 80025a2:	4b68      	ldr	r3, [pc, #416]	@ (8002744 <_Z10linkAnalogv+0x1b4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	4a66      	ldr	r2, [pc, #408]	@ (8002744 <_Z10linkAnalogv+0x1b4>)
 80025aa:	6013      	str	r3, [r2, #0]
		enableSensors	= 0;							// Deshabilita sensores
 80025ac:	4b66      	ldr	r3, [pc, #408]	@ (8002748 <_Z10linkAnalogv+0x1b8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]

		if ( countCalibration >= limitCalibration ){	// Si se cumple el tiempo de calibracion
 80025b2:	4b64      	ldr	r3, [pc, #400]	@ (8002744 <_Z10linkAnalogv+0x1b4>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b65      	ldr	r3, [pc, #404]	@ (800274c <_Z10linkAnalogv+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	db06      	blt.n	80025cc <_Z10linkAnalogv+0x3c>
			enableSensors		= 1;					// Habilita sensores
 80025be:	4b62      	ldr	r3, [pc, #392]	@ (8002748 <_Z10linkAnalogv+0x1b8>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
			stateCalibration	= 1;					// Pasa a S1
 80025c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002740 <_Z10linkAnalogv+0x1b0>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateCalibration	= 0;					// Espera en S0
		}
		break;
 80025ca:	e008      	b.n	80025de <_Z10linkAnalogv+0x4e>
			stateCalibration	= 0;					// Espera en S0
 80025cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002740 <_Z10linkAnalogv+0x1b0>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
		break;
 80025d2:	e004      	b.n	80025de <_Z10linkAnalogv+0x4e>
	////////////////////
	case 1:
		break;

	default:
		stateCalibration	= 0;
 80025d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002740 <_Z10linkAnalogv+0x1b0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		break;
 80025da:	e000      	b.n	80025de <_Z10linkAnalogv+0x4e>
		break;
 80025dc:	bf00      	nop

	////////////
	// A1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habilitado el ADC
 80025de:	4b5c      	ldr	r3, [pc, #368]	@ (8002750 <_Z10linkAnalogv+0x1c0>)
 80025e0:	795b      	ldrb	r3, [r3, #5]
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00f      	beq.n	800260c <_Z10linkAnalogv+0x7c>
		alpha_A1_PPM = adc2PPM(alphaA, 1) * enableSensors;			// Convierte en PPM
 80025ec:	4b59      	ldr	r3, [pc, #356]	@ (8002754 <_Z10linkAnalogv+0x1c4>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ffaa 	bl	800254c <_Z7adc2PPMth>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b52      	ldr	r3, [pc, #328]	@ (8002748 <_Z10linkAnalogv+0x1b8>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	fb12 f303 	smulbb	r3, r2, r3
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b54      	ldr	r3, [pc, #336]	@ (8002758 <_Z10linkAnalogv+0x1c8>)
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e00e      	b.n	800262a <_Z10linkAnalogv+0x9a>
	}
	else{															// Si no esta habiltiado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 2) * enableSensors;	// Convierte en PPM
 800260c:	4b53      	ldr	r3, [pc, #332]	@ (800275c <_Z10linkAnalogv+0x1cc>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff9a 	bl	800254c <_Z7adc2PPMth>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	4b4a      	ldr	r3, [pc, #296]	@ (8002748 <_Z10linkAnalogv+0x1b8>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	fb12 f303 	smulbb	r3, r2, r3
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b4c      	ldr	r3, [pc, #304]	@ (8002758 <_Z10linkAnalogv+0x1c8>)
 8002628:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors){		// Si pasa de 5 ppm
 800262a:	4b4b      	ldr	r3, [pc, #300]	@ (8002758 <_Z10linkAnalogv+0x1c8>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b32      	cmp	r3, #50	@ 0x32
 8002630:	d907      	bls.n	8002642 <_Z10linkAnalogv+0xb2>
 8002632:	4b45      	ldr	r3, [pc, #276]	@ (8002748 <_Z10linkAnalogv+0x1b8>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <_Z10linkAnalogv+0xb2>
		flagAlarm_PPM	= 1;						// Indica alarma
 800263a:	4b49      	ldr	r3, [pc, #292]	@ (8002760 <_Z10linkAnalogv+0x1d0>)
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e002      	b.n	8002648 <_Z10linkAnalogv+0xb8>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8002642:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <_Z10linkAnalogv+0x1d0>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]

	////////////
	// B1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habitado el ADC
 8002648:	4b41      	ldr	r3, [pc, #260]	@ (8002750 <_Z10linkAnalogv+0x1c0>)
 800264a:	795b      	ldrb	r3, [r3, #5]
 800264c:	f083 0301 	eor.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00f      	beq.n	8002676 <_Z10linkAnalogv+0xe6>
		alpha_A1_PPM = adc2PPM(alphaA, 3) * enableSensors;			// Convierte en PPM
 8002656:	4b3f      	ldr	r3, [pc, #252]	@ (8002754 <_Z10linkAnalogv+0x1c4>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	2103      	movs	r1, #3
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff75 	bl	800254c <_Z7adc2PPMth>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <_Z10linkAnalogv+0x1b8>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	fb12 f303 	smulbb	r3, r2, r3
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <_Z10linkAnalogv+0x1c8>)
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	e00e      	b.n	8002694 <_Z10linkAnalogv+0x104>
	}
	else{															// Si no esta habilitado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 4) * enableSensors;	// Convierte en PPM
 8002676:	4b39      	ldr	r3, [pc, #228]	@ (800275c <_Z10linkAnalogv+0x1cc>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	2104      	movs	r1, #4
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff65 	bl	800254c <_Z7adc2PPMth>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4b30      	ldr	r3, [pc, #192]	@ (8002748 <_Z10linkAnalogv+0x1b8>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	fb12 f303 	smulbb	r3, r2, r3
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <_Z10linkAnalogv+0x1c8>)
 8002692:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors ){		// Si pasa de 5 ppm
 8002694:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <_Z10linkAnalogv+0x1c8>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b32      	cmp	r3, #50	@ 0x32
 800269a:	d907      	bls.n	80026ac <_Z10linkAnalogv+0x11c>
 800269c:	4b2a      	ldr	r3, [pc, #168]	@ (8002748 <_Z10linkAnalogv+0x1b8>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <_Z10linkAnalogv+0x11c>
		flagAlarm_PPM	= 1;						// Indica alarma
 80026a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002760 <_Z10linkAnalogv+0x1d0>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e002      	b.n	80026b2 <_Z10linkAnalogv+0x122>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 80026ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <_Z10linkAnalogv+0x1d0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

	//////////////
	// TEMP HUM //
	///////////////

	if ( !errorHardware[1] ){			// Si hay sensor externo
 80026b2:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <_Z10linkAnalogv+0x1c0>)
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <_Z10linkAnalogv+0x142>
		tempApp	= tempExtern;			// Copia temperatura
 80026c0:	4b28      	ldr	r3, [pc, #160]	@ (8002764 <_Z10linkAnalogv+0x1d4>)
 80026c2:	881a      	ldrh	r2, [r3, #0]
 80026c4:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <_Z10linkAnalogv+0x1d8>)
 80026c6:	801a      	strh	r2, [r3, #0]
		humApp	= humExtern;			// Copia humedad
 80026c8:	4b28      	ldr	r3, [pc, #160]	@ (800276c <_Z10linkAnalogv+0x1dc>)
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <_Z10linkAnalogv+0x1e0>)
 80026ce:	801a      	strh	r2, [r3, #0]
 80026d0:	e015      	b.n	80026fe <_Z10linkAnalogv+0x16e>
	}
	else if ( !errorHardware[0] ){	// Si hay sensor interno
 80026d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <_Z10linkAnalogv+0x1c0>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <_Z10linkAnalogv+0x162>
		tempApp	= tempIntern;			// Copia temperatura
 80026e0:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <_Z10linkAnalogv+0x1e4>)
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <_Z10linkAnalogv+0x1d8>)
 80026e6:	801a      	strh	r2, [r3, #0]
		humApp	= humIntern;			// Copia humedad
 80026e8:	4b23      	ldr	r3, [pc, #140]	@ (8002778 <_Z10linkAnalogv+0x1e8>)
 80026ea:	881a      	ldrh	r2, [r3, #0]
 80026ec:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <_Z10linkAnalogv+0x1e0>)
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	e005      	b.n	80026fe <_Z10linkAnalogv+0x16e>
	}
	else{								// Si no hay ninguno de ambos sensores
		tempApp	= 0;					// Copia 0
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <_Z10linkAnalogv+0x1d8>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	801a      	strh	r2, [r3, #0]
		humApp	= 0;					// Copia 0
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <_Z10linkAnalogv+0x1e0>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	801a      	strh	r2, [r3, #0]

	////////////
	// ALARMS //
	////////////

	if ( tempApp > 60 || tempApp < 5 ){	// Si pasa limite de sensores
 80026fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <_Z10linkAnalogv+0x1d8>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	2b3c      	cmp	r3, #60	@ 0x3c
 8002704:	d803      	bhi.n	800270e <_Z10linkAnalogv+0x17e>
 8002706:	4b18      	ldr	r3, [pc, #96]	@ (8002768 <_Z10linkAnalogv+0x1d8>)
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	2b04      	cmp	r3, #4
 800270c:	d803      	bhi.n	8002716 <_Z10linkAnalogv+0x186>
		warningHardware[0]	= 1;			// Indica alarma
 800270e:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <_Z10linkAnalogv+0x1ec>)
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e002      	b.n	800271c <_Z10linkAnalogv+0x18c>
	}
	else{								// Si no
		warningHardware[0]	= 0;			// No hay alarma
 8002716:	4b19      	ldr	r3, [pc, #100]	@ (800277c <_Z10linkAnalogv+0x1ec>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
	}

	if ( humApp < 5 || humApp > 90){	// Si pasa limite de sensores
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <_Z10linkAnalogv+0x1e0>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d903      	bls.n	800272c <_Z10linkAnalogv+0x19c>
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <_Z10linkAnalogv+0x1e0>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	2b5a      	cmp	r3, #90	@ 0x5a
 800272a:	d903      	bls.n	8002734 <_Z10linkAnalogv+0x1a4>
		warningHardware[1]	= 1;			// Indica alarma
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <_Z10linkAnalogv+0x1ec>)
 800272e:	2201      	movs	r2, #1
 8002730:	705a      	strb	r2, [r3, #1]
 8002732:	e003      	b.n	800273c <_Z10linkAnalogv+0x1ac>
	}
	else{								// Si no
		warningHardware[1]	= 0;			// No hay alarma
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <_Z10linkAnalogv+0x1ec>)
 8002736:	2200      	movs	r2, #0
 8002738:	705a      	strb	r2, [r3, #1]
	}
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000052e 	.word	0x2000052e
 8002744:	20000530 	.word	0x20000530
 8002748:	20000538 	.word	0x20000538
 800274c:	20000534 	.word	0x20000534
 8002750:	20000500 	.word	0x20000500
 8002754:	2000046a 	.word	0x2000046a
 8002758:	20000529 	.word	0x20000529
 800275c:	20000472 	.word	0x20000472
 8002760:	20000539 	.word	0x20000539
 8002764:	20000450 	.word	0x20000450
 8002768:	2000052a 	.word	0x2000052a
 800276c:	20000452 	.word	0x20000452
 8002770:	2000052c 	.word	0x2000052c
 8002774:	2000044c 	.word	0x2000044c
 8002778:	2000044e 	.word	0x2000044e
 800277c:	200004f8 	.word	0x200004f8

08002780 <_Z41__static_initialization_and_destruction_0ii>:
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d127      	bne.n	80027e0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002796:	4293      	cmp	r3, r2
 8002798:	d122      	bne.n	80027e0 <_Z41__static_initialization_and_destruction_0ii+0x60>
long int limitGpsLink	= 240000/superloop;	// Limite de tiempo esperando mensajes validos
 800279a:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80027a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80027a6:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80027a8:	6013      	str	r3, [r2, #0]
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 80027aa:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80027b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80027b8:	4a0f      	ldr	r2, [pc, #60]	@ (80027f8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80027ba:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 80027bc:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80027c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80027c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002800 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80027ca:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 80027cc:	4b07      	ldr	r3, [pc, #28]	@ (80027ec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80027de:	801a      	strh	r2, [r3, #0]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	2000035f 	.word	0x2000035f
 80027f0:	0003a980 	.word	0x0003a980
 80027f4:	2000051c 	.word	0x2000051c
 80027f8:	20000524 	.word	0x20000524
 80027fc:	000dbba0 	.word	0x000dbba0
 8002800:	20000534 	.word	0x20000534
 8002804:	20000540 	.word	0x20000540

08002808 <_GLOBAL__sub_I_stateGpsLink>:
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
 800280c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002810:	2001      	movs	r0, #1
 8002812:	f7ff ffb5 	bl	8002780 <_Z41__static_initialization_and_destruction_0ii>
 8002816:	bd80      	pop	{r7, pc}

08002818 <_Z10linkOutputv>:
extern wdTimeout loraTimeWd;	// Watchdog de Lorawan
extern bool flagTxLora;			// Indica que se envía un mensaje

/***** OUTPUT *****/

void linkOutput(){
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
	//linkOutLora();
	//linkOutGps();
	//linkOutDisplay();
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <_Z12setupLoraAppv>:

rn2903Command macSetCh8;
rn2903Command macSetCh9;
rn2903Command macSetCh10;

void setupLoraApp(){
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
	///////////////
	// SYS RESET //
	///////////////

	sysReset.command		= sysReset_RN2903;
 800282c:	4b57      	ldr	r3, [pc, #348]	@ (800298c <_Z12setupLoraAppv+0x164>)
 800282e:	4a58      	ldr	r2, [pc, #352]	@ (8002990 <_Z12setupLoraAppv+0x168>)
 8002830:	605a      	str	r2, [r3, #4]
	sysReset.size			= sizeof( sysReset_RN2903 );
 8002832:	4b56      	ldr	r3, [pc, #344]	@ (800298c <_Z12setupLoraAppv+0x164>)
 8002834:	220c      	movs	r2, #12
 8002836:	701a      	strb	r2, [r3, #0]
	sysReset.responseSize	= 1;
 8002838:	4b54      	ldr	r3, [pc, #336]	@ (800298c <_Z12setupLoraAppv+0x164>)
 800283a:	2201      	movs	r2, #1
 800283c:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET MOD //
	///////////////////

	radioSetMod.command		= radioSetMod_RN2903;
 800283e:	4b55      	ldr	r3, [pc, #340]	@ (8002994 <_Z12setupLoraAppv+0x16c>)
 8002840:	4a55      	ldr	r2, [pc, #340]	@ (8002998 <_Z12setupLoraAppv+0x170>)
 8002842:	605a      	str	r2, [r3, #4]
	radioSetMod.size		= sizeof( radioSetMod_RN2903 ) - 1;
 8002844:	4b53      	ldr	r3, [pc, #332]	@ (8002994 <_Z12setupLoraAppv+0x16c>)
 8002846:	2214      	movs	r2, #20
 8002848:	701a      	strb	r2, [r3, #0]
	radioSetMod.responseSize= 3;
 800284a:	4b52      	ldr	r3, [pc, #328]	@ (8002994 <_Z12setupLoraAppv+0x16c>)
 800284c:	2203      	movs	r2, #3
 800284e:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET SF //
	//////////////////

	radioSetSf.command		= radioSetSf_RN2903;
 8002850:	4b52      	ldr	r3, [pc, #328]	@ (800299c <_Z12setupLoraAppv+0x174>)
 8002852:	4a53      	ldr	r2, [pc, #332]	@ (80029a0 <_Z12setupLoraAppv+0x178>)
 8002854:	605a      	str	r2, [r3, #4]
	radioSetSf.size			= sizeof( radioSetSf_RN2903 ) - 1;
 8002856:	4b51      	ldr	r3, [pc, #324]	@ (800299c <_Z12setupLoraAppv+0x174>)
 8002858:	2213      	movs	r2, #19
 800285a:	701a      	strb	r2, [r3, #0]
	radioSetSf.responseSize	= 3;
 800285c:	4b4f      	ldr	r3, [pc, #316]	@ (800299c <_Z12setupLoraAppv+0x174>)
 800285e:	2203      	movs	r2, #3
 8002860:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET BW //
	//////////////////

	radioSetBw.command		= radioSetBw_RN2903;
 8002862:	4b50      	ldr	r3, [pc, #320]	@ (80029a4 <_Z12setupLoraAppv+0x17c>)
 8002864:	4a50      	ldr	r2, [pc, #320]	@ (80029a8 <_Z12setupLoraAppv+0x180>)
 8002866:	605a      	str	r2, [r3, #4]
	radioSetBw.size			= sizeof( radioSetBw_RN2903 ) - 1;
 8002868:	4b4e      	ldr	r3, [pc, #312]	@ (80029a4 <_Z12setupLoraAppv+0x17c>)
 800286a:	2212      	movs	r2, #18
 800286c:	701a      	strb	r2, [r3, #0]
	radioSetBw.responseSize = 3;
 800286e:	4b4d      	ldr	r3, [pc, #308]	@ (80029a4 <_Z12setupLoraAppv+0x17c>)
 8002870:	2203      	movs	r2, #3
 8002872:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET PWR //
	///////////////////

	radioSetPwr.command		= radioSetPwr_RN2903;
 8002874:	4b4d      	ldr	r3, [pc, #308]	@ (80029ac <_Z12setupLoraAppv+0x184>)
 8002876:	4a4e      	ldr	r2, [pc, #312]	@ (80029b0 <_Z12setupLoraAppv+0x188>)
 8002878:	605a      	str	r2, [r3, #4]
	radioSetPwr.size		= sizeof( radioSetPwr_RN2903 ) - 1;
 800287a:	4b4c      	ldr	r3, [pc, #304]	@ (80029ac <_Z12setupLoraAppv+0x184>)
 800287c:	2212      	movs	r2, #18
 800287e:	701a      	strb	r2, [r3, #0]
	radioSetPwr.responseSize= 3;
 8002880:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <_Z12setupLoraAppv+0x184>)
 8002882:	2203      	movs	r2, #3
 8002884:	721a      	strb	r2, [r3, #8]

	////////////////////
	// MAC SET DEVEUI //
	////////////////////

	macSetDeveui.command	= macSetDevEui_RN2903;
 8002886:	4b4b      	ldr	r3, [pc, #300]	@ (80029b4 <_Z12setupLoraAppv+0x18c>)
 8002888:	4a4b      	ldr	r2, [pc, #300]	@ (80029b8 <_Z12setupLoraAppv+0x190>)
 800288a:	605a      	str	r2, [r3, #4]
	macSetDeveui.size		= sizeof( macSetDevEui_RN2903 ) - 1;
 800288c:	4b49      	ldr	r3, [pc, #292]	@ (80029b4 <_Z12setupLoraAppv+0x18c>)
 800288e:	2220      	movs	r2, #32
 8002890:	701a      	strb	r2, [r3, #0]
	macSetDeveui.responseSize	= 3;
 8002892:	4b48      	ldr	r3, [pc, #288]	@ (80029b4 <_Z12setupLoraAppv+0x18c>)
 8002894:	2203      	movs	r2, #3
 8002896:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET NETWORK KEY //
	/////////////////////////

	macSetNwkskey.command	= macSetNwkskey_RN2903;
 8002898:	4b48      	ldr	r3, [pc, #288]	@ (80029bc <_Z12setupLoraAppv+0x194>)
 800289a:	4a49      	ldr	r2, [pc, #292]	@ (80029c0 <_Z12setupLoraAppv+0x198>)
 800289c:	605a      	str	r2, [r3, #4]
	macSetNwkskey.size		= sizeof( macSetNwkskey_RN2903 ) - 1;
 800289e:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <_Z12setupLoraAppv+0x194>)
 80028a0:	2232      	movs	r2, #50	@ 0x32
 80028a2:	701a      	strb	r2, [r3, #0]
	macSetNwkskey.responseSize	= 3;
 80028a4:	4b45      	ldr	r3, [pc, #276]	@ (80029bc <_Z12setupLoraAppv+0x194>)
 80028a6:	2203      	movs	r2, #3
 80028a8:	721a      	strb	r2, [r3, #8]

	//////////////////////
	// MAC SET APPS KEY //
	//////////////////////

	macSetAppskey.command	= macSetAppskey_RN2903;
 80028aa:	4b46      	ldr	r3, [pc, #280]	@ (80029c4 <_Z12setupLoraAppv+0x19c>)
 80028ac:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <_Z12setupLoraAppv+0x1a0>)
 80028ae:	605a      	str	r2, [r3, #4]
	macSetAppskey.size		= sizeof( macSetAppskey_RN2903 ) - 1;
 80028b0:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <_Z12setupLoraAppv+0x19c>)
 80028b2:	2232      	movs	r2, #50	@ 0x32
 80028b4:	701a      	strb	r2, [r3, #0]
	macSetAppskey.responseSize	= 3;
 80028b6:	4b43      	ldr	r3, [pc, #268]	@ (80029c4 <_Z12setupLoraAppv+0x19c>)
 80028b8:	2203      	movs	r2, #3
 80028ba:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET DEV ADDRESS //
	/////////////////////////

	macSetDevAddr.command		= macSetDevAddr_RN2903;
 80028bc:	4b43      	ldr	r3, [pc, #268]	@ (80029cc <_Z12setupLoraAppv+0x1a4>)
 80028be:	4a44      	ldr	r2, [pc, #272]	@ (80029d0 <_Z12setupLoraAppv+0x1a8>)
 80028c0:	605a      	str	r2, [r3, #4]
	macSetDevAddr.size			= sizeof ( macSetDevAddr_RN2903 ) - 1;
 80028c2:	4b42      	ldr	r3, [pc, #264]	@ (80029cc <_Z12setupLoraAppv+0x1a4>)
 80028c4:	221a      	movs	r2, #26
 80028c6:	701a      	strb	r2, [r3, #0]
	macSetDevAddr.responseSize	= 2;
 80028c8:	4b40      	ldr	r3, [pc, #256]	@ (80029cc <_Z12setupLoraAppv+0x1a4>)
 80028ca:	2202      	movs	r2, #2
 80028cc:	721a      	strb	r2, [r3, #8]

	///////////////////
	// MAC JOIN OTAA //
	///////////////////

	macJoinOtaa.command			= macJoinOtaa_RN2903;
 80028ce:	4b41      	ldr	r3, [pc, #260]	@ (80029d4 <_Z12setupLoraAppv+0x1ac>)
 80028d0:	4a41      	ldr	r2, [pc, #260]	@ (80029d8 <_Z12setupLoraAppv+0x1b0>)
 80028d2:	605a      	str	r2, [r3, #4]
	macJoinOtaa.size			= sizeof ( macJoinOtaa_RN2903 ) - 1;
 80028d4:	4b3f      	ldr	r3, [pc, #252]	@ (80029d4 <_Z12setupLoraAppv+0x1ac>)
 80028d6:	220f      	movs	r2, #15
 80028d8:	701a      	strb	r2, [r3, #0]
	macJoinOtaa.responseSize	= 7;
 80028da:	4b3e      	ldr	r3, [pc, #248]	@ (80029d4 <_Z12setupLoraAppv+0x1ac>)
 80028dc:	2207      	movs	r2, #7
 80028de:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC JOIN ABP //
	//////////////////

	macJoinAbp.command		= macJoinAbp_RN2903;
 80028e0:	4b3e      	ldr	r3, [pc, #248]	@ (80029dc <_Z12setupLoraAppv+0x1b4>)
 80028e2:	4a3f      	ldr	r2, [pc, #252]	@ (80029e0 <_Z12setupLoraAppv+0x1b8>)
 80028e4:	605a      	str	r2, [r3, #4]
	macJoinAbp.size			= sizeof( macJoinAbp_RN2903 ) - 1;
 80028e6:	4b3d      	ldr	r3, [pc, #244]	@ (80029dc <_Z12setupLoraAppv+0x1b4>)
 80028e8:	220e      	movs	r2, #14
 80028ea:	701a      	strb	r2, [r3, #0]
	macJoinAbp.responseSize	= 2;
 80028ec:	4b3b      	ldr	r3, [pc, #236]	@ (80029dc <_Z12setupLoraAppv+0x1b4>)
 80028ee:	2202      	movs	r2, #2
 80028f0:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC SET SYNC //
	//////////////////

	macSetSync.command		= macSetSync_RN2903;
 80028f2:	4b3c      	ldr	r3, [pc, #240]	@ (80029e4 <_Z12setupLoraAppv+0x1bc>)
 80028f4:	4a3c      	ldr	r2, [pc, #240]	@ (80029e8 <_Z12setupLoraAppv+0x1c0>)
 80028f6:	605a      	str	r2, [r3, #4]
	macSetSync.size			= sizeof( macSetSync_RN2903 ) - 1;
 80028f8:	4b3a      	ldr	r3, [pc, #232]	@ (80029e4 <_Z12setupLoraAppv+0x1bc>)
 80028fa:	2211      	movs	r2, #17
 80028fc:	701a      	strb	r2, [r3, #0]
	macSetSync.responseSize	= 3;
 80028fe:	4b39      	ldr	r3, [pc, #228]	@ (80029e4 <_Z12setupLoraAppv+0x1bc>)
 8002900:	2203      	movs	r2, #3
 8002902:	721a      	strb	r2, [r3, #8]

	//////////////
	// MAC SAVE //
	//////////////

	macSave.command			= macSave_RN2903;
 8002904:	4b39      	ldr	r3, [pc, #228]	@ (80029ec <_Z12setupLoraAppv+0x1c4>)
 8002906:	4a3a      	ldr	r2, [pc, #232]	@ (80029f0 <_Z12setupLoraAppv+0x1c8>)
 8002908:	605a      	str	r2, [r3, #4]
	macSave.size			= sizeof( macSave_RN2903 ) - 1;
 800290a:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <_Z12setupLoraAppv+0x1c4>)
 800290c:	220a      	movs	r2, #10
 800290e:	701a      	strb	r2, [r3, #0]
	macSave.responseSize	= 3;
 8002910:	4b36      	ldr	r3, [pc, #216]	@ (80029ec <_Z12setupLoraAppv+0x1c4>)
 8002912:	2203      	movs	r2, #3
 8002914:	721a      	strb	r2, [r3, #8]

	/////////////////
	// MAC TX DATA //
	/////////////////

	 macTxData.command		= macTxData_RN2903;
 8002916:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <_Z12setupLoraAppv+0x1cc>)
 8002918:	4a37      	ldr	r2, [pc, #220]	@ (80029f8 <_Z12setupLoraAppv+0x1d0>)
 800291a:	605a      	str	r2, [r3, #4]
	 macTxData.size			= sizeof( macTxData_RN2903 ) - 1;
 800291c:	4b35      	ldr	r3, [pc, #212]	@ (80029f4 <_Z12setupLoraAppv+0x1cc>)
 800291e:	2219      	movs	r2, #25
 8002920:	701a      	strb	r2, [r3, #0]
	 macTxData.responseSize	= 14;
 8002922:	4b34      	ldr	r3, [pc, #208]	@ (80029f4 <_Z12setupLoraAppv+0x1cc>)
 8002924:	220e      	movs	r2, #14
 8002926:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	 macTxGps.command		= macTxGps_RN2903;
 8002928:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <_Z12setupLoraAppv+0x1d4>)
 800292a:	4a35      	ldr	r2, [pc, #212]	@ (8002a00 <_Z12setupLoraAppv+0x1d8>)
 800292c:	605a      	str	r2, [r3, #4]
	 macTxGps.size			= sizeof( macTxGps_RN2903 ) - 1;
 800292e:	4b33      	ldr	r3, [pc, #204]	@ (80029fc <_Z12setupLoraAppv+0x1d4>)
 8002930:	2219      	movs	r2, #25
 8002932:	701a      	strb	r2, [r3, #0]
	 macTxGps.responseSize	= 14;
 8002934:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <_Z12setupLoraAppv+0x1d4>)
 8002936:	220e      	movs	r2, #14
 8002938:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	  macTxSys.command		= macTxSys_RN2903;
 800293a:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <_Z12setupLoraAppv+0x1dc>)
 800293c:	4a32      	ldr	r2, [pc, #200]	@ (8002a08 <_Z12setupLoraAppv+0x1e0>)
 800293e:	605a      	str	r2, [r3, #4]
	  macTxSys.size			= sizeof( macTxSys_RN2903 ) - 1;
 8002940:	4b30      	ldr	r3, [pc, #192]	@ (8002a04 <_Z12setupLoraAppv+0x1dc>)
 8002942:	2215      	movs	r2, #21
 8002944:	701a      	strb	r2, [r3, #0]
	  macTxSys.responseSize	= 14;
 8002946:	4b2f      	ldr	r3, [pc, #188]	@ (8002a04 <_Z12setupLoraAppv+0x1dc>)
 8002948:	220e      	movs	r2, #14
 800294a:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 8 //
	  //////////////////

	  macSetCh8.command		= macSetCh8_RN2903;
 800294c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a0c <_Z12setupLoraAppv+0x1e4>)
 800294e:	4a30      	ldr	r2, [pc, #192]	@ (8002a10 <_Z12setupLoraAppv+0x1e8>)
 8002950:	605a      	str	r2, [r3, #4]
	  macSetCh8.size		= sizeof( macSetCh8_RN2903 ) - 1;
 8002952:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <_Z12setupLoraAppv+0x1e4>)
 8002954:	2219      	movs	r2, #25
 8002956:	701a      	strb	r2, [r3, #0]
	  macSetCh8.responseSize	= 9;
 8002958:	4b2c      	ldr	r3, [pc, #176]	@ (8002a0c <_Z12setupLoraAppv+0x1e4>)
 800295a:	2209      	movs	r2, #9
 800295c:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 9 //
	  //////////////////

	  macSetCh9.command		= macSetCh9_RN2903;
 800295e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a14 <_Z12setupLoraAppv+0x1ec>)
 8002960:	4a2d      	ldr	r2, [pc, #180]	@ (8002a18 <_Z12setupLoraAppv+0x1f0>)
 8002962:	605a      	str	r2, [r3, #4]
	  macSetCh9.size		= sizeof( macSetCh9_RN2903 ) - 1;
 8002964:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <_Z12setupLoraAppv+0x1ec>)
 8002966:	2219      	movs	r2, #25
 8002968:	701a      	strb	r2, [r3, #0]
	  macSetCh9.responseSize	= 9;
 800296a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <_Z12setupLoraAppv+0x1ec>)
 800296c:	2209      	movs	r2, #9
 800296e:	721a      	strb	r2, [r3, #8]

	  ///////////////////
	  // MAC SET CH 10 //
	  ///////////////////
	  macSetCh10.command		= macSetCh10_RN2903;
 8002970:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <_Z12setupLoraAppv+0x1f4>)
 8002972:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <_Z12setupLoraAppv+0x1f8>)
 8002974:	605a      	str	r2, [r3, #4]
	  macSetCh10.size			= sizeof( macSetCh10_RN2903 ) - 1;
 8002976:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <_Z12setupLoraAppv+0x1f4>)
 8002978:	221a      	movs	r2, #26
 800297a:	701a      	strb	r2, [r3, #0]
	  macSetCh10.responseSize	= 9;
 800297c:	4b27      	ldr	r3, [pc, #156]	@ (8002a1c <_Z12setupLoraAppv+0x1f4>)
 800297e:	2209      	movs	r2, #9
 8002980:	721a      	strb	r2, [r3, #8]

}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	20000544 	.word	0x20000544
 8002990:	2000012c 	.word	0x2000012c
 8002994:	20000550 	.word	0x20000550
 8002998:	20000138 	.word	0x20000138
 800299c:	2000055c 	.word	0x2000055c
 80029a0:	20000150 	.word	0x20000150
 80029a4:	20000568 	.word	0x20000568
 80029a8:	20000164 	.word	0x20000164
 80029ac:	20000574 	.word	0x20000574
 80029b0:	20000178 	.word	0x20000178
 80029b4:	20000580 	.word	0x20000580
 80029b8:	2000018c 	.word	0x2000018c
 80029bc:	20000598 	.word	0x20000598
 80029c0:	200001cc 	.word	0x200001cc
 80029c4:	200005a4 	.word	0x200005a4
 80029c8:	20000200 	.word	0x20000200
 80029cc:	2000058c 	.word	0x2000058c
 80029d0:	200001b0 	.word	0x200001b0
 80029d4:	200005b0 	.word	0x200005b0
 80029d8:	20000234 	.word	0x20000234
 80029dc:	200005bc 	.word	0x200005bc
 80029e0:	20000244 	.word	0x20000244
 80029e4:	200005c8 	.word	0x200005c8
 80029e8:	20000254 	.word	0x20000254
 80029ec:	200005d4 	.word	0x200005d4
 80029f0:	20000268 	.word	0x20000268
 80029f4:	200005e0 	.word	0x200005e0
 80029f8:	20000274 	.word	0x20000274
 80029fc:	200005ec 	.word	0x200005ec
 8002a00:	20000290 	.word	0x20000290
 8002a04:	200005f8 	.word	0x200005f8
 8002a08:	200002ac 	.word	0x200002ac
 8002a0c:	20000604 	.word	0x20000604
 8002a10:	200002c4 	.word	0x200002c4
 8002a14:	20000610 	.word	0x20000610
 8002a18:	200002e0 	.word	0x200002e0
 8002a1c:	2000061c 	.word	0x2000061c
 8002a20:	200002fc 	.word	0x200002fc

08002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>:

/////////////////
// ADD COMMAND //
/////////////////

void loraRutine::addCommand ( rn2903Command *command ){
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	this->listCommands[ this->sizeList ]	= command;	// AÑADE PUNTERO A LISTA
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8002a34:	4619      	mov	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	this->sizeList++;									// Suma 1 al largo de lista
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8002a44:	3301      	adds	r3, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <_ZN9wdTimeoutC1El>:
 *		5.- newMessage:	Indica si se recibió un mensaje
 *		6.- timeout:	Indica si hubo un timeout
 *
 */

wdTimeout::wdTimeout( long limit ){	// Constructor
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
	this->limit	= limit;			// Se debe fijar el limite de timeout
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <_ZN9loraCheck18setResponsePointerEPPhh>:

//////////////////////////
// SET RESPONSE POINTER //
//////////////////////////

void loraCheck::setResponsePointer( uint8_t *pointer[], uint8_t sizeIdealResponses ){
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	71fb      	strb	r3, [r7, #7]
	this->idealResponses		= &pointer[0];
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	609a      	str	r2, [r3, #8]
	this->sizeIdealResponses	= sizeIdealResponses;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	79fa      	ldrb	r2, [r7, #7]
 8002a90:	731a      	strb	r2, [r3, #12]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <_ZN9loraInput12insertBufferEPhh>:

///////////////////
// INSERT BUFFER //
///////////////////

void loraInput::insertBuffer(uint8_t *buffer, uint8_t sizeBuffer){
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71fb      	strb	r3, [r7, #7]
	this->buffer		= buffer;		// Guarda puntero inicial del buffer
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	605a      	str	r2, [r3, #4]
	this->sizeBuffer	= sizeBuffer;	// Guarda tamaño del buffer
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	79fa      	ldrb	r2, [r7, #7]
 8002ab6:	721a      	strb	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <_ZN12loraDecision10setRetriesEh>:

//////////////////
// SET RETRIES  //
//////////////////

void loraDecision::setRetries( uint8_t retries ){
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
	this->retries	= retries;					//
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	701a      	strb	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_ZN12fifoCommandsC1Ev>:
////////////////////////
// FIFO COMMAND CLASS //
////////////////////////


class fifoCommands{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f103 0239 	add.w	r2, r3, #57	@ 0x39
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f103 0243 	add.w	r2, r3, #67	@ 0x43
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f103 024d 	add.w	r2, r3, #77	@ 0x4d
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f103 0257 	add.w	r2, r3, #87	@ 0x57
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	615a      	str	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f103 0261 	add.w	r2, r3, #97	@ 0x61
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f103 026b 	add.w	r2, r3, #107	@ 0x6b
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	61da      	str	r2, [r3, #28]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f103 0275 	add.w	r2, r3, #117	@ 0x75
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	621a      	str	r2, [r3, #32]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f103 027f 	add.w	r2, r3, #127	@ 0x7f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f103 0289 	add.w	r2, r3, #137	@ 0x89
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b60:	f001 f96f 	bl	8003e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b64:	f000 f8dc 	bl	8002d20 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b68:	f000 fb56 	bl	8003218 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002b6c:	f000 fafa 	bl	8003164 <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8002b70:	f000 fa90 	bl	8003094 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8002b74:	f000 fac2 	bl	80030fc <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 8002b78:	f000 f9fe 	bl	8002f78 <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 8002b7c:	f000 fa4a 	bl	8003014 <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 8002b80:	f000 f94a 	bl	8002e18 <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 8002b84:	f000 f924 	bl	8002dd0 <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 8002b88:	4845      	ldr	r0, [pc, #276]	@ (8002ca0 <main+0x144>)
 8002b8a:	f007 fc7f 	bl	800a48c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA	(&huart4,	rxLora, sizeof(rxLora));
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4944      	ldr	r1, [pc, #272]	@ (8002ca4 <main+0x148>)
 8002b92:	4845      	ldr	r0, [pc, #276]	@ (8002ca8 <main+0x14c>)
 8002b94:	f007 ffa2 	bl	800aadc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA	(&huart5,	rxGps, sizeof(rxGps));
 8002b98:	2202      	movs	r2, #2
 8002b9a:	4944      	ldr	r1, [pc, #272]	@ (8002cac <main+0x150>)
 8002b9c:	4844      	ldr	r0, [pc, #272]	@ (8002cb0 <main+0x154>)
 8002b9e:	f007 ff9d 	bl	800aadc <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	4943      	ldr	r1, [pc, #268]	@ (8002cb4 <main+0x158>)
 8002ba6:	4844      	ldr	r0, [pc, #272]	@ (8002cb8 <main+0x15c>)
 8002ba8:	f001 fd62 	bl	8004670 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupLoraApp();
 8002bac:	f7ff fe3c 	bl	8002828 <_Z12setupLoraAppv>

  chSetRN2903.addCommand( &macSetCh8 );
 8002bb0:	4942      	ldr	r1, [pc, #264]	@ (8002cbc <main+0x160>)
 8002bb2:	4843      	ldr	r0, [pc, #268]	@ (8002cc0 <main+0x164>)
 8002bb4:	f7ff ff36 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh9 );
 8002bb8:	4942      	ldr	r1, [pc, #264]	@ (8002cc4 <main+0x168>)
 8002bba:	4841      	ldr	r0, [pc, #260]	@ (8002cc0 <main+0x164>)
 8002bbc:	f7ff ff32 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh10 );
 8002bc0:	4941      	ldr	r1, [pc, #260]	@ (8002cc8 <main+0x16c>)
 8002bc2:	483f      	ldr	r0, [pc, #252]	@ (8002cc0 <main+0x164>)
 8002bc4:	f7ff ff2e 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &radioSetMod	);
 8002bc8:	4940      	ldr	r1, [pc, #256]	@ (8002ccc <main+0x170>)
 8002bca:	4841      	ldr	r0, [pc, #260]	@ (8002cd0 <main+0x174>)
 8002bcc:	f7ff ff2a 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetSf 	);
 8002bd0:	4940      	ldr	r1, [pc, #256]	@ (8002cd4 <main+0x178>)
 8002bd2:	483f      	ldr	r0, [pc, #252]	@ (8002cd0 <main+0x174>)
 8002bd4:	f7ff ff26 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetBw 	);
 8002bd8:	493f      	ldr	r1, [pc, #252]	@ (8002cd8 <main+0x17c>)
 8002bda:	483d      	ldr	r0, [pc, #244]	@ (8002cd0 <main+0x174>)
 8002bdc:	f7ff ff22 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetPwr 	);
 8002be0:	493e      	ldr	r1, [pc, #248]	@ (8002cdc <main+0x180>)
 8002be2:	483b      	ldr	r0, [pc, #236]	@ (8002cd0 <main+0x174>)
 8002be4:	f7ff ff1e 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &macSetDeveui );
 8002be8:	493d      	ldr	r1, [pc, #244]	@ (8002ce0 <main+0x184>)
 8002bea:	4839      	ldr	r0, [pc, #228]	@ (8002cd0 <main+0x174>)
 8002bec:	f7ff ff1a 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetDevAddr );
 8002bf0:	493c      	ldr	r1, [pc, #240]	@ (8002ce4 <main+0x188>)
 8002bf2:	4837      	ldr	r0, [pc, #220]	@ (8002cd0 <main+0x174>)
 8002bf4:	f7ff ff16 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetNwkskey );
 8002bf8:	493b      	ldr	r1, [pc, #236]	@ (8002ce8 <main+0x18c>)
 8002bfa:	4835      	ldr	r0, [pc, #212]	@ (8002cd0 <main+0x174>)
 8002bfc:	f7ff ff12 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetAppskey );
 8002c00:	493a      	ldr	r1, [pc, #232]	@ (8002cec <main+0x190>)
 8002c02:	4833      	ldr	r0, [pc, #204]	@ (8002cd0 <main+0x174>)
 8002c04:	f7ff ff0e 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macJoinAbp );
 8002c08:	4939      	ldr	r1, [pc, #228]	@ (8002cf0 <main+0x194>)
 8002c0a:	4831      	ldr	r0, [pc, #196]	@ (8002cd0 <main+0x174>)
 8002c0c:	f7ff ff0a 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetSync );
 8002c10:	4938      	ldr	r1, [pc, #224]	@ (8002cf4 <main+0x198>)
 8002c12:	482f      	ldr	r0, [pc, #188]	@ (8002cd0 <main+0x174>)
 8002c14:	f7ff ff06 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSave );
 8002c18:	4937      	ldr	r1, [pc, #220]	@ (8002cf8 <main+0x19c>)
 8002c1a:	482d      	ldr	r0, [pc, #180]	@ (8002cd0 <main+0x174>)
 8002c1c:	f7ff ff02 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loopRN2903.addCommand( &macTxData );
 8002c20:	4936      	ldr	r1, [pc, #216]	@ (8002cfc <main+0x1a0>)
 8002c22:	4837      	ldr	r0, [pc, #220]	@ (8002d00 <main+0x1a4>)
 8002c24:	f7ff fefe 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>
  loopRN2903.addCommand( &macTxData );
 8002c28:	4934      	ldr	r1, [pc, #208]	@ (8002cfc <main+0x1a0>)
 8002c2a:	4835      	ldr	r0, [pc, #212]	@ (8002d00 <main+0x1a4>)
 8002c2c:	f7ff fefa 	bl	8002a24 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loraCheck.setResponsePointer( rxCommand, 13);
 8002c30:	220d      	movs	r2, #13
 8002c32:	4934      	ldr	r1, [pc, #208]	@ (8002d04 <main+0x1a8>)
 8002c34:	4834      	ldr	r0, [pc, #208]	@ (8002d08 <main+0x1ac>)
 8002c36:	f7ff ff1f 	bl	8002a78 <_ZN9loraCheck18setResponsePointerEPPhh>
  loraDecision.setRetries(3);
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	4833      	ldr	r0, [pc, #204]	@ (8002d0c <main+0x1b0>)
 8002c3e:	f7ff ff41 	bl	8002ac4 <_ZN12loraDecision10setRetriesEh>

  loraInput.insertBuffer( bufferLoraIn, sizeof(bufferLoraIn));
 8002c42:	2232      	movs	r2, #50	@ 0x32
 8002c44:	4932      	ldr	r1, [pc, #200]	@ (8002d10 <main+0x1b4>)
 8002c46:	4833      	ldr	r0, [pc, #204]	@ (8002d14 <main+0x1b8>)
 8002c48:	f7ff ff29 	bl	8002a9e <_ZN9loraInput12insertBufferEPhh>
  //displayLink.inputDisplay(8888, 3);
  //
  HAL_IWDG_Init(&hiwdg);
 8002c4c:	4832      	ldr	r0, [pc, #200]	@ (8002d18 <main+0x1bc>)
 8002c4e:	f005 ff86 	bl	8008b5e <HAL_IWDG_Init>
  while (1)
  {

	  hwInput();
 8002c52:	f7fe fd6e 	bl	8001732 <_Z7hwInputv>
	  linkInput();
 8002c56:	f7ff fb67 	bl	8002328 <_Z9linkInputv>
	  tcpInput();
 8002c5a:	f001 f84b 	bl	8003cf4 <_Z8tcpInputv>
	  app();
 8002c5e:	f7fd ff7b 	bl	8000b58 <_Z3appv>
	  tcpOutput();
 8002c62:	f001 f893 	bl	8003d8c <_Z9tcpOutputv>
	  linkOutput();
 8002c66:	f7ff fdd7 	bl	8002818 <_Z10linkOutputv>
	  hwOutput();
 8002c6a:	f7ff f9cf 	bl	800200c <_Z8hwOutputv>
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */


	  HAL_SuspendTick();
 8002c6e:	f001 f981 	bl	8003f74 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002c72:	2101      	movs	r1, #1
 8002c74:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c78:	f005 ffc8 	bl	8008c0c <HAL_PWR_EnterSLEEPMode>

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 8002c7c:	bf00      	nop
 8002c7e:	4b27      	ldr	r3, [pc, #156]	@ (8002d1c <main+0x1c0>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f8      	bne.n	8002c7e <main+0x122>
	  }							// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 8002c8c:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <main+0x1c0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]

	  HAL_ResumeTick();
 8002c92:	f001 f97f 	bl	8003f94 <HAL_ResumeTick>
	  HAL_IWDG_Refresh(&hiwdg);
 8002c96:	4820      	ldr	r0, [pc, #128]	@ (8002d18 <main+0x1bc>)
 8002c98:	f005 ffa7 	bl	8008bea <HAL_IWDG_Refresh>
	  hwInput();
 8002c9c:	e7d9      	b.n	8002c52 <main+0xf6>
 8002c9e:	bf00      	nop
 8002ca0:	200009ec 	.word	0x200009ec
 8002ca4:	20000ae8 	.word	0x20000ae8
 8002ca8:	200007bc 	.word	0x200007bc
 8002cac:	20000ae4 	.word	0x20000ae4
 8002cb0:	20000844 	.word	0x20000844
 8002cb4:	2000112c 	.word	0x2000112c
 8002cb8:	20000628 	.word	0x20000628
 8002cbc:	20000604 	.word	0x20000604
 8002cc0:	20000d1c 	.word	0x20000d1c
 8002cc4:	20000610 	.word	0x20000610
 8002cc8:	2000061c 	.word	0x2000061c
 8002ccc:	20000550 	.word	0x20000550
 8002cd0:	20000b88 	.word	0x20000b88
 8002cd4:	2000055c 	.word	0x2000055c
 8002cd8:	20000568 	.word	0x20000568
 8002cdc:	20000574 	.word	0x20000574
 8002ce0:	20000580 	.word	0x20000580
 8002ce4:	2000058c 	.word	0x2000058c
 8002ce8:	20000598 	.word	0x20000598
 8002cec:	200005a4 	.word	0x200005a4
 8002cf0:	200005bc 	.word	0x200005bc
 8002cf4:	200005c8 	.word	0x200005c8
 8002cf8:	200005d4 	.word	0x200005d4
 8002cfc:	200005e0 	.word	0x200005e0
 8002d00:	20000eb0 	.word	0x20000eb0
 8002d04:	200000f4 	.word	0x200000f4
 8002d08:	20000b6c 	.word	0x20000b6c
 8002d0c:	20000b80 	.word	0x20000b80
 8002d10:	20001044 	.word	0x20001044
 8002d14:	20000b2c 	.word	0x20000b2c
 8002d18:	20000a38 	.word	0x20000a38
 8002d1c:	20001128 	.word	0x20001128

08002d20 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b096      	sub	sp, #88	@ 0x58
 8002d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	2244      	movs	r2, #68	@ 0x44
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f009 f906 	bl	800bf40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d34:	463b      	mov	r3, r7
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d42:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002d46:	f005 ffa3 	bl	8008c90 <HAL_PWREx_ControlVoltageScaling>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002d5a:	f000 fb8d 	bl	8003478 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d6e:	2340      	movs	r3, #64	@ 0x40
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f006 f826 	bl	8008dcc <HAL_RCC_OscConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8002d90:	f000 fb72 	bl	8003478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d94:	230f      	movs	r3, #15
 8002d96:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002da8:	463b      	mov	r3, r7
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f006 fc27 	bl	8009600 <HAL_RCC_ClockConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8002dc2:	f000 fb59 	bl	8003478 <Error_Handler>
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3758      	adds	r7, #88	@ 0x58
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* Initialize the IWDG peripheral */
  hiwdg.Instance = IWDG;
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <_ZL12MX_IWDG_Initv+0x40>)
 8002dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002e14 <_ZL12MX_IWDG_Initv+0x44>)
 8002dd8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002dda:	4b0d      	ldr	r3, [pc, #52]	@ (8002e10 <_ZL12MX_IWDG_Initv+0x40>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 399;
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <_ZL12MX_IWDG_Initv+0x40>)
 8002de2:	f240 128f 	movw	r2, #399	@ 0x18f
 8002de6:	609a      	str	r2, [r3, #8]
  hiwdg.Init.Window	= 390;
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <_ZL12MX_IWDG_Initv+0x40>)
 8002dea:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8002dee:	60da      	str	r2, [r3, #12]

  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002df0:	4807      	ldr	r0, [pc, #28]	@ (8002e10 <_ZL12MX_IWDG_Initv+0x40>)
 8002df2:	f005 feb4 	bl	8008b5e <HAL_IWDG_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <_ZL12MX_IWDG_Initv+0x3a>
  {
    Error_Handler();
 8002e06:	f000 fb37 	bl	8003478 <Error_Handler>
  }

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000a38 	.word	0x20000a38
 8002e14:	40003000 	.word	0x40003000

08002e18 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8002e1e:	f107 031c 	add.w	r3, r7, #28
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
 8002e38:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f68 <_ZL12MX_ADC1_Initv+0x150>)
 8002e3e:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e40:	4b48      	ldr	r3, [pc, #288]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e46:	4b47      	ldr	r3, [pc, #284]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e4c:	4b45      	ldr	r3, [pc, #276]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e52:	4b44      	ldr	r3, [pc, #272]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e58:	4b42      	ldr	r3, [pc, #264]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e5e:	4b41      	ldr	r3, [pc, #260]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e64:	4b3f      	ldr	r3, [pc, #252]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e70:	4b3c      	ldr	r3, [pc, #240]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e78:	4b3a      	ldr	r3, [pc, #232]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e7e:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e84:	4b37      	ldr	r3, [pc, #220]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e8c:	4b35      	ldr	r3, [pc, #212]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8002e92:	4b34      	ldr	r3, [pc, #208]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e9a:	4832      	ldr	r0, [pc, #200]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002e9c:	f001 fa94 	bl	80043c8 <HAL_ADC_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 8002eb0:	f000 fae2 	bl	8003478 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4829      	ldr	r0, [pc, #164]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002ec0:	f002 fc48 	bl	8005754 <HAL_ADCEx_MultiModeConfigChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 8002ed4:	f000 fad0 	bl	8003478 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8002ed8:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <_ZL12MX_ADC1_Initv+0x154>)
 8002eda:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002edc:	2306      	movs	r3, #6
 8002ede:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ee4:	237f      	movs	r3, #127	@ 0x7f
 8002ee6:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ee8:	2304      	movs	r3, #4
 8002eea:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	481b      	ldr	r0, [pc, #108]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002ef6:	f001 feaf 	bl	8004c58 <HAL_ADC_ConfigChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 8002f0a:	f000 fab5 	bl	8003478 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8002f0e:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <_ZL12MX_ADC1_Initv+0x158>)
 8002f10:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f12:	230c      	movs	r3, #12
 8002f14:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4812      	ldr	r0, [pc, #72]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002f1c:	f001 fe9c 	bl	8004c58 <HAL_ADC_ConfigChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf14      	ite	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	2300      	moveq	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 8002f30:	f000 faa2 	bl	8003478 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8002f34:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <_ZL12MX_ADC1_Initv+0x15c>)
 8002f36:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f38:	2312      	movs	r3, #18
 8002f3a:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4808      	ldr	r0, [pc, #32]	@ (8002f64 <_ZL12MX_ADC1_Initv+0x14c>)
 8002f42:	f001 fe89 	bl	8004c58 <HAL_ADC_ConfigChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 8002f56:	f000 fa8f 	bl	8003478 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 8002f5a:	bf00      	nop
 8002f5c:	3728      	adds	r7, #40	@ 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000628 	.word	0x20000628
 8002f68:	50040000 	.word	0x50040000
 8002f6c:	04300002 	.word	0x04300002
 8002f70:	08600004 	.word	0x08600004
 8002f74:	0c900008 	.word	0x0c900008

08002f78 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f7c:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002f7e:	4a23      	ldr	r2, [pc, #140]	@ (800300c <_ZL12MX_I2C1_Initv+0x94>)
 8002f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002f82:	4b21      	ldr	r3, [pc, #132]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002f84:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <_ZL12MX_I2C1_Initv+0x98>)
 8002f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f88:	4b1f      	ldr	r3, [pc, #124]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f94:	4b1c      	ldr	r3, [pc, #112]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fa0:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa6:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fac:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb2:	4815      	ldr	r0, [pc, #84]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002fb4:	f003 f9d6 	bl	8006364 <HAL_I2C_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8002fc8:	f000 fa56 	bl	8003478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fcc:	2100      	movs	r1, #0
 8002fce:	480e      	ldr	r0, [pc, #56]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002fd0:	f005 fd2e 	bl	8008a30 <HAL_I2CEx_ConfigAnalogFilter>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002fe4:	f000 fa48 	bl	8003478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4807      	ldr	r0, [pc, #28]	@ (8003008 <_ZL12MX_I2C1_Initv+0x90>)
 8002fec:	f005 fd6b 	bl	8008ac6 <HAL_I2CEx_ConfigDigitalFilter>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8003000:	f000 fa3a 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200006d8 	.word	0x200006d8
 800300c:	40005400 	.word	0x40005400
 8003010:	2000090e 	.word	0x2000090e

08003014 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 8003024:	4b19      	ldr	r3, [pc, #100]	@ (800308c <_ZL12MX_TIM6_Initv+0x78>)
 8003026:	4a1a      	ldr	r2, [pc, #104]	@ (8003090 <_ZL12MX_TIM6_Initv+0x7c>)
 8003028:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 800302a:	4b18      	ldr	r3, [pc, #96]	@ (800308c <_ZL12MX_TIM6_Initv+0x78>)
 800302c:	2201      	movs	r2, #1
 800302e:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003030:	4b16      	ldr	r3, [pc, #88]	@ (800308c <_ZL12MX_TIM6_Initv+0x78>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 8003036:	4b15      	ldr	r3, [pc, #84]	@ (800308c <_ZL12MX_TIM6_Initv+0x78>)
 8003038:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800303c:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303e:	4b13      	ldr	r3, [pc, #76]	@ (800308c <_ZL12MX_TIM6_Initv+0x78>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003044:	4811      	ldr	r0, [pc, #68]	@ (800308c <_ZL12MX_TIM6_Initv+0x78>)
 8003046:	f007 f9c9 	bl	800a3dc <HAL_TIM_Base_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 800305a:	f000 fa0d 	bl	8003478 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4808      	ldr	r0, [pc, #32]	@ (800308c <_ZL12MX_TIM6_Initv+0x78>)
 800306c:	f007 fc42 	bl	800a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 8003080:	f000 f9fa 	bl	8003478 <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200009ec 	.word	0x200009ec
 8003090:	40001000 	.word	0x40001000

08003094 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003098:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 800309a:	4a17      	ldr	r2, [pc, #92]	@ (80030f8 <_ZL13MX_UART4_Initv+0x64>)
 800309c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030a0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80030a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ca:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d0:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030d6:	4807      	ldr	r0, [pc, #28]	@ (80030f4 <_ZL13MX_UART4_Initv+0x60>)
 80030d8:	f007 fcb2 	bl	800aa40 <HAL_UART_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 80030ec:	f000 f9c4 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	200007bc 	.word	0x200007bc
 80030f8:	40004c00 	.word	0x40004c00

080030fc <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003100:	4b16      	ldr	r3, [pc, #88]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 8003102:	4a17      	ldr	r2, [pc, #92]	@ (8003160 <_ZL13MX_UART5_Initv+0x64>)
 8003104:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 8003108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800310c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800310e:	4b13      	ldr	r3, [pc, #76]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003120:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 8003122:	220c      	movs	r2, #12
 8003124:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003126:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003132:	4b0a      	ldr	r3, [pc, #40]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003138:	4b08      	ldr	r3, [pc, #32]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800313e:	4807      	ldr	r0, [pc, #28]	@ (800315c <_ZL13MX_UART5_Initv+0x60>)
 8003140:	f007 fc7e 	bl	800aa40 <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8003154:	f000 f990 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003158:	bf00      	nop
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000844 	.word	0x20000844
 8003160:	40005000 	.word	0x40005000

08003164 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800316a:	4b2a      	ldr	r3, [pc, #168]	@ (8003214 <_ZL11MX_DMA_Initv+0xb0>)
 800316c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316e:	4a29      	ldr	r2, [pc, #164]	@ (8003214 <_ZL11MX_DMA_Initv+0xb0>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	6493      	str	r3, [r2, #72]	@ 0x48
 8003176:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <_ZL11MX_DMA_Initv+0xb0>)
 8003178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003182:	4b24      	ldr	r3, [pc, #144]	@ (8003214 <_ZL11MX_DMA_Initv+0xb0>)
 8003184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003186:	4a23      	ldr	r2, [pc, #140]	@ (8003214 <_ZL11MX_DMA_Initv+0xb0>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6493      	str	r3, [r2, #72]	@ 0x48
 800318e:	4b21      	ldr	r3, [pc, #132]	@ (8003214 <_ZL11MX_DMA_Initv+0xb0>)
 8003190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	200b      	movs	r0, #11
 80031a0:	f002 fc63 	bl	8005a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031a4:	200b      	movs	r0, #11
 80031a6:	f002 fc7c 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	2010      	movs	r0, #16
 80031b0:	f002 fc5b 	bl	8005a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80031b4:	2010      	movs	r0, #16
 80031b6:	f002 fc74 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2011      	movs	r0, #17
 80031c0:	f002 fc53 	bl	8005a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80031c4:	2011      	movs	r0, #17
 80031c6:	f002 fc6c 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2038      	movs	r0, #56	@ 0x38
 80031d0:	f002 fc4b 	bl	8005a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80031d4:	2038      	movs	r0, #56	@ 0x38
 80031d6:	f002 fc64 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	2039      	movs	r0, #57	@ 0x39
 80031e0:	f002 fc43 	bl	8005a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80031e4:	2039      	movs	r0, #57	@ 0x39
 80031e6:	f002 fc5c 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	203a      	movs	r0, #58	@ 0x3a
 80031f0:	f002 fc3b 	bl	8005a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80031f4:	203a      	movs	r0, #58	@ 0x3a
 80031f6:	f002 fc54 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	203c      	movs	r0, #60	@ 0x3c
 8003200:	f002 fc33 	bl	8005a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003204:	203c      	movs	r0, #60	@ 0x3c
 8003206:	f002 fc4c 	bl	8005aa2 <HAL_NVIC_EnableIRQ>

}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000

08003218 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	@ 0x30
 800321c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800322e:	4b4b      	ldr	r3, [pc, #300]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003232:	4a4a      	ldr	r2, [pc, #296]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003234:	f043 0310 	orr.w	r3, r3, #16
 8003238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800323a:	4b48      	ldr	r3, [pc, #288]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003246:	4b45      	ldr	r3, [pc, #276]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324a:	4a44      	ldr	r2, [pc, #272]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 800324c:	f043 0304 	orr.w	r3, r3, #4
 8003250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003252:	4b42      	ldr	r3, [pc, #264]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800325e:	4b3f      	ldr	r3, [pc, #252]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003262:	4a3e      	ldr	r2, [pc, #248]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800326a:	4b3c      	ldr	r3, [pc, #240]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	4b39      	ldr	r3, [pc, #228]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327a:	4a38      	ldr	r2, [pc, #224]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003282:	4b36      	ldr	r3, [pc, #216]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800328e:	4b33      	ldr	r3, [pc, #204]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003292:	4a32      	ldr	r2, [pc, #200]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 8003294:	f043 0308 	orr.w	r3, r3, #8
 8003298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800329a:	4b30      	ldr	r3, [pc, #192]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 800329c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a6:	4b2d      	ldr	r3, [pc, #180]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	4a2c      	ldr	r2, [pc, #176]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032b2:	4b2a      	ldr	r3, [pc, #168]	@ (800335c <_ZL12MX_GPIO_Initv+0x144>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80032be:	2200      	movs	r2, #0
 80032c0:	210f      	movs	r1, #15
 80032c2:	4827      	ldr	r0, [pc, #156]	@ (8003360 <_ZL12MX_GPIO_Initv+0x148>)
 80032c4:	f003 f836 	bl	8006334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2174      	movs	r1, #116	@ 0x74
 80032cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032d0:	f003 f830 	bl	8006334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80032d4:	2200      	movs	r2, #0
 80032d6:	f64f 7105 	movw	r1, #65285	@ 0xff05
 80032da:	4822      	ldr	r0, [pc, #136]	@ (8003364 <_ZL12MX_GPIO_Initv+0x14c>)
 80032dc:	f003 f82a 	bl	8006334 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 80032e0:	230f      	movs	r3, #15
 80032e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e4:	2301      	movs	r3, #1
 80032e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	4619      	mov	r1, r3
 80032f6:	481a      	ldr	r0, [pc, #104]	@ (8003360 <_ZL12MX_GPIO_Initv+0x148>)
 80032f8:	f002 fe72 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80032fc:	2374      	movs	r3, #116	@ 0x74
 80032fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003300:	2301      	movs	r3, #1
 8003302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	4619      	mov	r1, r3
 8003312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003316:	f002 fe63 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800331a:	2308      	movs	r3, #8
 800331c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800331e:	2300      	movs	r3, #0
 8003320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	f107 031c 	add.w	r3, r7, #28
 800332a:	4619      	mov	r1, r3
 800332c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003330:	f002 fe56 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003334:	f64f 7301 	movw	r3, #65281	@ 0xff01
 8003338:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333a:	2301      	movs	r3, #1
 800333c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003346:	f107 031c 	add.w	r3, r7, #28
 800334a:	4619      	mov	r1, r3
 800334c:	4805      	ldr	r0, [pc, #20]	@ (8003364 <_ZL12MX_GPIO_Initv+0x14c>)
 800334e:	f002 fe47 	bl	8005fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003352:	bf00      	nop
 8003354:	3730      	adds	r7, #48	@ 0x30
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
 8003360:	48001000 	.word	0x48001000
 8003364:	48000c00 	.word	0x48000c00

08003368 <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a05      	ldr	r2, [pc, #20]	@ (800338c <HAL_ADC_ConvCpltCallback+0x24>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d102      	bne.n	8003380 <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_ADC_ConvCpltCallback+0x28>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	50040000 	.word	0x50040000
 8003390:	20001138 	.word	0x20001138

08003394 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <HAL_UART_RxCpltCallback+0x64>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10a      	bne.n	80033bc <HAL_UART_RxCpltCallback+0x28>
		loraIn.insertElement(rxLora[0]);
 80033a6:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <HAL_UART_RxCpltCallback+0x68>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	4619      	mov	r1, r3
 80033ac:	4814      	ldr	r0, [pc, #80]	@ (8003400 <HAL_UART_RxCpltCallback+0x6c>)
 80033ae:	f7fe f92d 	bl	800160c <_ZN8fifoUart13insertElementEh>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 80033b2:	2201      	movs	r2, #1
 80033b4:	4911      	ldr	r1, [pc, #68]	@ (80033fc <HAL_UART_RxCpltCallback+0x68>)
 80033b6:	4813      	ldr	r0, [pc, #76]	@ (8003404 <HAL_UART_RxCpltCallback+0x70>)
 80033b8:	f007 fb90 	bl	800aadc <HAL_UART_Receive_DMA>
	}

	if(huart->Instance == UART5){
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a11      	ldr	r2, [pc, #68]	@ (8003408 <HAL_UART_RxCpltCallback+0x74>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d114      	bne.n	80033f0 <HAL_UART_RxCpltCallback+0x5c>
		gpsIn.insertElement(rxGps[0]);
 80033c6:	4b11      	ldr	r3, [pc, #68]	@ (800340c <HAL_UART_RxCpltCallback+0x78>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	4810      	ldr	r0, [pc, #64]	@ (8003410 <HAL_UART_RxCpltCallback+0x7c>)
 80033ce:	f7fe f91d 	bl	800160c <_ZN8fifoUart13insertElementEh>
		gpsIn.insertElement(rxGps[1]);
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HAL_UART_RxCpltCallback+0x78>)
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	4619      	mov	r1, r3
 80033d8:	480d      	ldr	r0, [pc, #52]	@ (8003410 <HAL_UART_RxCpltCallback+0x7c>)
 80033da:	f7fe f917 	bl	800160c <_ZN8fifoUart13insertElementEh>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxGps, sizeof(rxGps));
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart5, rxGps, sizeof(rxGps));
 80033de:	2202      	movs	r2, #2
 80033e0:	490a      	ldr	r1, [pc, #40]	@ (800340c <HAL_UART_RxCpltCallback+0x78>)
 80033e2:	480c      	ldr	r0, [pc, #48]	@ (8003414 <HAL_UART_RxCpltCallback+0x80>)
 80033e4:	f007 fb7a 	bl	800aadc <HAL_UART_Receive_DMA>
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <HAL_UART_RxCpltCallback+0x80>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2210      	movs	r2, #16
 80033ee:	621a      	str	r2, [r3, #32]
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
	}
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40004c00 	.word	0x40004c00
 80033fc:	20000ae8 	.word	0x20000ae8
 8003400:	20000aec 	.word	0x20000aec
 8003404:	200007bc 	.word	0x200007bc
 8003408:	40005000 	.word	0x40005000
 800340c:	20000ae4 	.word	0x20000ae4
 8003410:	20000aa4 	.word	0x20000aa4
 8003414:	20000844 	.word	0x20000844

08003418 <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a05      	ldr	r2, [pc, #20]	@ (800343c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d102      	bne.n	8003430 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 800342a:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
	}
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40001000 	.word	0x40001000
 8003440:	20001128 	.word	0x20001128

08003444 <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 800344c:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20001093 	.word	0x20001093

08003464 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800347c:	b672      	cpsid	i
}
 800347e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <Error_Handler+0x8>

08003484 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d115      	bne.n	80034c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800349a:	4293      	cmp	r3, r2
 800349c:	d110      	bne.n	80034c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
gpsInput gpsInput;		// Instancia de gpsInput
 800349e:	480a      	ldr	r0, [pc, #40]	@ (80034c8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80034a0:	f7fe f93c 	bl	800171c <_ZN8gpsInputC1Ev>
fifoUart	gpsIn;		//
 80034a4:	4809      	ldr	r0, [pc, #36]	@ (80034cc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80034a6:	f7fe f8a1 	bl	80015ec <_ZN8fifoUartC1Ev>
fifoUart loraIn;			// FIFO que recibe los datos
 80034aa:	4809      	ldr	r0, [pc, #36]	@ (80034d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80034ac:	f7fe f89e 	bl	80015ec <_ZN8fifoUartC1Ev>
wdTimeout loraTimeWd(4000);
 80034b0:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80034b4:	4807      	ldr	r0, [pc, #28]	@ (80034d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80034b6:	f7ff fad0 	bl	8002a5a <_ZN9wdTimeoutC1El>
fifoCommands fifoContent;
 80034ba:	4807      	ldr	r0, [pc, #28]	@ (80034d8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80034bc:	f7ff fb11 	bl	8002ae2 <_ZN12fifoCommandsC1Ev>
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000a4c 	.word	0x20000a4c
 80034cc:	20000aa4 	.word	0x20000aa4
 80034d0:	20000aec 	.word	0x20000aec
 80034d4:	20001078 	.word	0x20001078
 80034d8:	20001094 	.word	0x20001094

080034dc <_GLOBAL__sub_I_hadc1>:
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
 80034e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80034e4:	2001      	movs	r0, #1
 80034e6:	f7ff ffcd 	bl	8003484 <_Z41__static_initialization_and_destruction_0ii>
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <HAL_MspInit+0x44>)
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003530 <HAL_MspInit+0x44>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80034fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <HAL_MspInit+0x44>)
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_MspInit+0x44>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	4a08      	ldr	r2, [pc, #32]	@ (8003530 <HAL_MspInit+0x44>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003514:	6593      	str	r3, [r2, #88]	@ 0x58
 8003516:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <HAL_MspInit+0x44>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000

08003534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b0ac      	sub	sp, #176	@ 0xb0
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800354c:	f107 0310 	add.w	r3, r7, #16
 8003550:	228c      	movs	r2, #140	@ 0x8c
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f008 fcf3 	bl	800bf40 <memset>
  if(hadc->Instance==ADC1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a40      	ldr	r2, [pc, #256]	@ (8003660 <HAL_ADC_MspInit+0x12c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d179      	bne.n	8003658 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003564:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003568:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800356a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800356e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003572:	2303      	movs	r3, #3
 8003574:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800357a:	2308      	movs	r3, #8
 800357c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800357e:	2302      	movs	r3, #2
 8003580:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003582:	2302      	movs	r3, #2
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003586:	2302      	movs	r3, #2
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800358a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	4618      	mov	r0, r3
 8003596:	f006 fa57 	bl	8009a48 <HAL_RCCEx_PeriphCLKConfig>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80035a0:	f7ff ff6a 	bl	8003478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80035a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003664 <HAL_ADC_MspInit+0x130>)
 80035a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003664 <HAL_ADC_MspInit+0x130>)
 80035aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003664 <HAL_ADC_MspInit+0x130>)
 80035b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035bc:	4b29      	ldr	r3, [pc, #164]	@ (8003664 <HAL_ADC_MspInit+0x130>)
 80035be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c0:	4a28      	ldr	r2, [pc, #160]	@ (8003664 <HAL_ADC_MspInit+0x130>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c8:	4b26      	ldr	r3, [pc, #152]	@ (8003664 <HAL_ADC_MspInit+0x130>)
 80035ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80035d4:	2307      	movs	r3, #7
 80035d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035da:	2303      	movs	r3, #3
 80035dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035ea:	4619      	mov	r1, r3
 80035ec:	481e      	ldr	r0, [pc, #120]	@ (8003668 <HAL_ADC_MspInit+0x134>)
 80035ee:	f002 fcf7 	bl	8005fe0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80035f2:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <HAL_ADC_MspInit+0x138>)
 80035f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003670 <HAL_ADC_MspInit+0x13c>)
 80035f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80035f8:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <HAL_ADC_MspInit+0x138>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035fe:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <HAL_ADC_MspInit+0x138>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003604:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_ADC_MspInit+0x138>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800360a:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_ADC_MspInit+0x138>)
 800360c:	2280      	movs	r2, #128	@ 0x80
 800360e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003610:	4b16      	ldr	r3, [pc, #88]	@ (800366c <HAL_ADC_MspInit+0x138>)
 8003612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003616:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003618:	4b14      	ldr	r3, [pc, #80]	@ (800366c <HAL_ADC_MspInit+0x138>)
 800361a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800361e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003620:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_ADC_MspInit+0x138>)
 8003622:	2220      	movs	r2, #32
 8003624:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003626:	4b11      	ldr	r3, [pc, #68]	@ (800366c <HAL_ADC_MspInit+0x138>)
 8003628:	2200      	movs	r2, #0
 800362a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800362c:	480f      	ldr	r0, [pc, #60]	@ (800366c <HAL_ADC_MspInit+0x138>)
 800362e:	f002 fa53 	bl	8005ad8 <HAL_DMA_Init>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8003638:	f7ff ff1e 	bl	8003478 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a0b      	ldr	r2, [pc, #44]	@ (800366c <HAL_ADC_MspInit+0x138>)
 8003640:	651a      	str	r2, [r3, #80]	@ 0x50
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <HAL_ADC_MspInit+0x138>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003648:	2200      	movs	r2, #0
 800364a:	2100      	movs	r1, #0
 800364c:	2012      	movs	r0, #18
 800364e:	f002 fa0c 	bl	8005a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003652:	2012      	movs	r0, #18
 8003654:	f002 fa25 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003658:	bf00      	nop
 800365a:	37b0      	adds	r7, #176	@ 0xb0
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	50040000 	.word	0x50040000
 8003664:	40021000 	.word	0x40021000
 8003668:	48000800 	.word	0x48000800
 800366c:	20000690 	.word	0x20000690
 8003670:	40020008 	.word	0x40020008

08003674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b0ac      	sub	sp, #176	@ 0xb0
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	228c      	movs	r2, #140	@ 0x8c
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f008 fc53 	bl	800bf40 <memset>
  if(hi2c->Instance==I2C1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a52      	ldr	r2, [pc, #328]	@ (80037e8 <HAL_I2C_MspInit+0x174>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	f040 809d 	bne.w	80037e0 <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036a6:	2340      	movs	r3, #64	@ 0x40
 80036a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80036aa:	2300      	movs	r3, #0
 80036ac:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036ae:	f107 0310 	add.w	r3, r7, #16
 80036b2:	4618      	mov	r0, r3
 80036b4:	f006 f9c8 	bl	8009a48 <HAL_RCCEx_PeriphCLKConfig>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80036be:	f7ff fedb 	bl	8003478 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	4b4a      	ldr	r3, [pc, #296]	@ (80037ec <HAL_I2C_MspInit+0x178>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c6:	4a49      	ldr	r2, [pc, #292]	@ (80037ec <HAL_I2C_MspInit+0x178>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ce:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_I2C_MspInit+0x178>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036da:	23c0      	movs	r3, #192	@ 0xc0
 80036dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036e0:	2312      	movs	r3, #18
 80036e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ec:	2303      	movs	r3, #3
 80036ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036f2:	2304      	movs	r3, #4
 80036f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036fc:	4619      	mov	r1, r3
 80036fe:	483c      	ldr	r0, [pc, #240]	@ (80037f0 <HAL_I2C_MspInit+0x17c>)
 8003700:	f002 fc6e 	bl	8005fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003704:	4b39      	ldr	r3, [pc, #228]	@ (80037ec <HAL_I2C_MspInit+0x178>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003708:	4a38      	ldr	r2, [pc, #224]	@ (80037ec <HAL_I2C_MspInit+0x178>)
 800370a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800370e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003710:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <HAL_I2C_MspInit+0x178>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800371c:	4b35      	ldr	r3, [pc, #212]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 800371e:	4a36      	ldr	r2, [pc, #216]	@ (80037f8 <HAL_I2C_MspInit+0x184>)
 8003720:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8003722:	4b34      	ldr	r3, [pc, #208]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 8003724:	2203      	movs	r2, #3
 8003726:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003728:	4b32      	ldr	r3, [pc, #200]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800372e:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 8003730:	2200      	movs	r2, #0
 8003732:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003734:	4b2f      	ldr	r3, [pc, #188]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800373a:	4b2e      	ldr	r3, [pc, #184]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 800373c:	2200      	movs	r2, #0
 800373e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003740:	4b2c      	ldr	r3, [pc, #176]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 8003742:	2200      	movs	r2, #0
 8003744:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003746:	4b2b      	ldr	r3, [pc, #172]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 8003748:	2200      	movs	r2, #0
 800374a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800374c:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 800374e:	2200      	movs	r2, #0
 8003750:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003752:	4828      	ldr	r0, [pc, #160]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 8003754:	f002 f9c0 	bl	8005ad8 <HAL_DMA_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 800375e:	f7ff fe8b 	bl	8003478 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a23      	ldr	r2, [pc, #140]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 8003766:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003768:	4a22      	ldr	r2, [pc, #136]	@ (80037f4 <HAL_I2C_MspInit+0x180>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800376e:	4b23      	ldr	r3, [pc, #140]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 8003770:	4a23      	ldr	r2, [pc, #140]	@ (8003800 <HAL_I2C_MspInit+0x18c>)
 8003772:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8003774:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 8003776:	2203      	movs	r2, #3
 8003778:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800377a:	4b20      	ldr	r3, [pc, #128]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 800377c:	2210      	movs	r2, #16
 800377e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003780:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003786:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 8003788:	2280      	movs	r2, #128	@ 0x80
 800378a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378c:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003792:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003798:	4b18      	ldr	r3, [pc, #96]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80037a4:	4815      	ldr	r0, [pc, #84]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 80037a6:	f002 f997 	bl	8005ad8 <HAL_DMA_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 80037b0:	f7ff fe62 	bl	8003478 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a11      	ldr	r2, [pc, #68]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 80037b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80037ba:	4a10      	ldr	r2, [pc, #64]	@ (80037fc <HAL_I2C_MspInit+0x188>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	201f      	movs	r0, #31
 80037c6:	f002 f950 	bl	8005a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037ca:	201f      	movs	r0, #31
 80037cc:	f002 f969 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80037d0:	2200      	movs	r2, #0
 80037d2:	2100      	movs	r1, #0
 80037d4:	2020      	movs	r0, #32
 80037d6:	f002 f948 	bl	8005a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80037da:	2020      	movs	r0, #32
 80037dc:	f002 f961 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80037e0:	bf00      	nop
 80037e2:	37b0      	adds	r7, #176	@ 0xb0
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40005400 	.word	0x40005400
 80037ec:	40021000 	.word	0x40021000
 80037f0:	48000400 	.word	0x48000400
 80037f4:	2000072c 	.word	0x2000072c
 80037f8:	40020080 	.word	0x40020080
 80037fc:	20000774 	.word	0x20000774
 8003800:	4002006c 	.word	0x4002006c

08003804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0d      	ldr	r2, [pc, #52]	@ (8003848 <HAL_TIM_Base_MspInit+0x44>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d113      	bne.n	800383e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <HAL_TIM_Base_MspInit+0x48>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	4a0c      	ldr	r2, [pc, #48]	@ (800384c <HAL_TIM_Base_MspInit+0x48>)
 800381c:	f043 0310 	orr.w	r3, r3, #16
 8003820:	6593      	str	r3, [r2, #88]	@ 0x58
 8003822:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <HAL_TIM_Base_MspInit+0x48>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	2036      	movs	r0, #54	@ 0x36
 8003834:	f002 f919 	bl	8005a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003838:	2036      	movs	r0, #54	@ 0x36
 800383a:	f002 f932 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40001000 	.word	0x40001000
 800384c:	40021000 	.word	0x40021000

08003850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b0b0      	sub	sp, #192	@ 0xc0
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003868:	f107 0320 	add.w	r3, r7, #32
 800386c:	228c      	movs	r2, #140	@ 0x8c
 800386e:	2100      	movs	r1, #0
 8003870:	4618      	mov	r0, r3
 8003872:	f008 fb65 	bl	800bf40 <memset>
  if(huart->Instance==UART4)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a4d      	ldr	r2, [pc, #308]	@ (80039b0 <HAL_UART_MspInit+0x160>)
 800387c:	4293      	cmp	r3, r2
 800387e:	f040 80a3 	bne.w	80039c8 <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003882:	2308      	movs	r3, #8
 8003884:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003886:	2300      	movs	r3, #0
 8003888:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800388a:	f107 0320 	add.w	r3, r7, #32
 800388e:	4618      	mov	r0, r3
 8003890:	f006 f8da 	bl	8009a48 <HAL_RCCEx_PeriphCLKConfig>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800389a:	f7ff fded 	bl	8003478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800389e:	4b45      	ldr	r3, [pc, #276]	@ (80039b4 <HAL_UART_MspInit+0x164>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	4a44      	ldr	r2, [pc, #272]	@ (80039b4 <HAL_UART_MspInit+0x164>)
 80038a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038aa:	4b42      	ldr	r3, [pc, #264]	@ (80039b4 <HAL_UART_MspInit+0x164>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b6:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <HAL_UART_MspInit+0x164>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	4a3e      	ldr	r2, [pc, #248]	@ (80039b4 <HAL_UART_MspInit+0x164>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c2:	4b3c      	ldr	r3, [pc, #240]	@ (80039b4 <HAL_UART_MspInit+0x164>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038ce:	2303      	movs	r3, #3
 80038d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e0:	2303      	movs	r3, #3
 80038e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038e6:	2308      	movs	r3, #8
 80038e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80038f0:	4619      	mov	r1, r3
 80038f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038f6:	f002 fb73 	bl	8005fe0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80038fa:	4b2f      	ldr	r3, [pc, #188]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 80038fc:	4a2f      	ldr	r2, [pc, #188]	@ (80039bc <HAL_UART_MspInit+0x16c>)
 80038fe:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8003900:	4b2d      	ldr	r3, [pc, #180]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 8003902:	2202      	movs	r2, #2
 8003904:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003906:	4b2c      	ldr	r3, [pc, #176]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800390c:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003912:	4b29      	ldr	r3, [pc, #164]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003918:	4b27      	ldr	r3, [pc, #156]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 800391a:	2200      	movs	r2, #0
 800391c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800391e:	4b26      	ldr	r3, [pc, #152]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003924:	4b24      	ldr	r3, [pc, #144]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 8003926:	2200      	movs	r2, #0
 8003928:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800392a:	4b23      	ldr	r3, [pc, #140]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 800392c:	2200      	movs	r2, #0
 800392e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003930:	4821      	ldr	r0, [pc, #132]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 8003932:	f002 f8d1 	bl	8005ad8 <HAL_DMA_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800393c:	f7ff fd9c 	bl	8003478 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 8003944:	675a      	str	r2, [r3, #116]	@ 0x74
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <HAL_UART_MspInit+0x168>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 800394c:	4b1c      	ldr	r3, [pc, #112]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 800394e:	4a1d      	ldr	r2, [pc, #116]	@ (80039c4 <HAL_UART_MspInit+0x174>)
 8003950:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8003952:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 8003954:	2202      	movs	r2, #2
 8003956:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003958:	4b19      	ldr	r3, [pc, #100]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 800395a:	2210      	movs	r2, #16
 800395c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800395e:	4b18      	ldr	r3, [pc, #96]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003964:	4b16      	ldr	r3, [pc, #88]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 8003966:	2280      	movs	r2, #128	@ 0x80
 8003968:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003970:	4b13      	ldr	r3, [pc, #76]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003976:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 8003978:	2200      	movs	r2, #0
 800397a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800397c:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 800397e:	2200      	movs	r2, #0
 8003980:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003982:	480f      	ldr	r0, [pc, #60]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 8003984:	f002 f8a8 	bl	8005ad8 <HAL_DMA_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800398e:	f7ff fd73 	bl	8003478 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 8003996:	671a      	str	r2, [r3, #112]	@ 0x70
 8003998:	4a09      	ldr	r2, [pc, #36]	@ (80039c0 <HAL_UART_MspInit+0x170>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	2034      	movs	r0, #52	@ 0x34
 80039a4:	f002 f861 	bl	8005a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80039a8:	2034      	movs	r0, #52	@ 0x34
 80039aa:	f002 f87a 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80039ae:	e0c9      	b.n	8003b44 <HAL_UART_MspInit+0x2f4>
 80039b0:	40004c00 	.word	0x40004c00
 80039b4:	40021000 	.word	0x40021000
 80039b8:	200008cc 	.word	0x200008cc
 80039bc:	40020458 	.word	0x40020458
 80039c0:	20000914 	.word	0x20000914
 80039c4:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5f      	ldr	r2, [pc, #380]	@ (8003b4c <HAL_UART_MspInit+0x2fc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	f040 80b8 	bne.w	8003b44 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80039d4:	2310      	movs	r3, #16
 80039d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 80039d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039de:	f107 0320 	add.w	r3, r7, #32
 80039e2:	4618      	mov	r0, r3
 80039e4:	f006 f830 	bl	8009a48 <HAL_RCCEx_PeriphCLKConfig>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 80039ee:	f7ff fd43 	bl	8003478 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80039f2:	4b57      	ldr	r3, [pc, #348]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	4a56      	ldr	r2, [pc, #344]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 80039f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039fe:	4b54      	ldr	r3, [pc, #336]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0a:	4b51      	ldr	r3, [pc, #324]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0e:	4a50      	ldr	r2, [pc, #320]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a16:	4b4e      	ldr	r3, [pc, #312]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 8003a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a22:	4b4b      	ldr	r3, [pc, #300]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	4a4a      	ldr	r2, [pc, #296]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a2e:	4b48      	ldr	r3, [pc, #288]	@ (8003b50 <HAL_UART_MspInit+0x300>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	2302      	movs	r3, #2
 8003a44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a54:	2308      	movs	r3, #8
 8003a56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a5a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003a5e:	4619      	mov	r1, r3
 8003a60:	483c      	ldr	r0, [pc, #240]	@ (8003b54 <HAL_UART_MspInit+0x304>)
 8003a62:	f002 fabd 	bl	8005fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a66:	2304      	movs	r3, #4
 8003a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4833      	ldr	r0, [pc, #204]	@ (8003b58 <HAL_UART_MspInit+0x308>)
 8003a8c:	f002 faa8 	bl	8005fe0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8003a90:	4b32      	ldr	r3, [pc, #200]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003a92:	4a33      	ldr	r2, [pc, #204]	@ (8003b60 <HAL_UART_MspInit+0x310>)
 8003a94:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 8003a96:	4b31      	ldr	r3, [pc, #196]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003a98:	2202      	movs	r2, #2
 8003a9a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003aaa:	2280      	movs	r2, #128	@ 0x80
 8003aac:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aae:	4b2b      	ldr	r3, [pc, #172]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab4:	4b29      	ldr	r3, [pc, #164]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003aba:	4b28      	ldr	r3, [pc, #160]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ac0:	4b26      	ldr	r3, [pc, #152]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003ac6:	4825      	ldr	r0, [pc, #148]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003ac8:	f002 f806 	bl	8005ad8 <HAL_DMA_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_UART_MspInit+0x286>
      Error_Handler();
 8003ad2:	f7ff fcd1 	bl	8003478 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003ada:	675a      	str	r2, [r3, #116]	@ 0x74
 8003adc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b5c <HAL_UART_MspInit+0x30c>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 8003ae2:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003ae4:	4a20      	ldr	r2, [pc, #128]	@ (8003b68 <HAL_UART_MspInit+0x318>)
 8003ae6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003aea:	2202      	movs	r2, #2
 8003aec:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aee:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003af0:	2210      	movs	r2, #16
 8003af2:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003afa:	4b1a      	ldr	r3, [pc, #104]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003afc:	2280      	movs	r2, #128	@ 0x80
 8003afe:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b00:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b06:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8003b0c:	4b15      	ldr	r3, [pc, #84]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b12:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003b18:	4812      	ldr	r0, [pc, #72]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003b1a:	f001 ffdd 	bl	8005ad8 <HAL_DMA_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8003b24:	f7ff fca8 	bl	8003478 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003b2c:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003b64 <HAL_UART_MspInit+0x314>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003b34:	2200      	movs	r2, #0
 8003b36:	2100      	movs	r1, #0
 8003b38:	2035      	movs	r0, #53	@ 0x35
 8003b3a:	f001 ff96 	bl	8005a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003b3e:	2035      	movs	r0, #53	@ 0x35
 8003b40:	f001 ffaf 	bl	8005aa2 <HAL_NVIC_EnableIRQ>
}
 8003b44:	bf00      	nop
 8003b46:	37c0      	adds	r7, #192	@ 0xc0
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40005000 	.word	0x40005000
 8003b50:	40021000 	.word	0x40021000
 8003b54:	48000800 	.word	0x48000800
 8003b58:	48000c00 	.word	0x48000c00
 8003b5c:	2000095c 	.word	0x2000095c
 8003b60:	4002041c 	.word	0x4002041c
 8003b64:	200009a4 	.word	0x200009a4
 8003b68:	40020408 	.word	0x40020408

08003b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b70:	bf00      	nop
 8003b72:	e7fd      	b.n	8003b70 <NMI_Handler+0x4>

08003b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <HardFault_Handler+0x4>

08003b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <MemManage_Handler+0x4>

08003b84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <BusFault_Handler+0x4>

08003b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <UsageFault_Handler+0x4>

08003b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc2:	f000 f993 	bl	8003eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bd0:	4802      	ldr	r0, [pc, #8]	@ (8003bdc <DMA1_Channel1_IRQHandler+0x10>)
 8003bd2:	f002 f918 	bl	8005e06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000690 	.word	0x20000690

08003be0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003be4:	4802      	ldr	r0, [pc, #8]	@ (8003bf0 <DMA1_Channel6_IRQHandler+0x10>)
 8003be6:	f002 f90e 	bl	8005e06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000774 	.word	0x20000774

08003bf4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003bf8:	4802      	ldr	r0, [pc, #8]	@ (8003c04 <DMA1_Channel7_IRQHandler+0x10>)
 8003bfa:	f002 f904 	bl	8005e06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000072c 	.word	0x2000072c

08003c08 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c0c:	4802      	ldr	r0, [pc, #8]	@ (8003c18 <ADC1_2_IRQHandler+0x10>)
 8003c0e:	f000 fdeb 	bl	80047e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000628 	.word	0x20000628

08003c1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c20:	4802      	ldr	r0, [pc, #8]	@ (8003c2c <I2C1_EV_IRQHandler+0x10>)
 8003c22:	f003 f86d 	bl	8006d00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200006d8 	.word	0x200006d8

08003c30 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c34:	4802      	ldr	r0, [pc, #8]	@ (8003c40 <I2C1_ER_IRQHandler+0x10>)
 8003c36:	f003 f87d 	bl	8006d34 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200006d8 	.word	0x200006d8

08003c44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003c48:	4802      	ldr	r0, [pc, #8]	@ (8003c54 <UART4_IRQHandler+0x10>)
 8003c4a:	f006 ff93 	bl	800ab74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200007bc 	.word	0x200007bc

08003c58 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003c5c:	4802      	ldr	r0, [pc, #8]	@ (8003c68 <UART5_IRQHandler+0x10>)
 8003c5e:	f006 ff89 	bl	800ab74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000844 	.word	0x20000844

08003c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c70:	4802      	ldr	r0, [pc, #8]	@ (8003c7c <TIM6_DAC_IRQHandler+0x10>)
 8003c72:	f006 fc7b 	bl	800a56c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200009ec 	.word	0x200009ec

08003c80 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003c84:	4802      	ldr	r0, [pc, #8]	@ (8003c90 <DMA2_Channel1_IRQHandler+0x10>)
 8003c86:	f002 f8be 	bl	8005e06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200009a4 	.word	0x200009a4

08003c94 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003c98:	4802      	ldr	r0, [pc, #8]	@ (8003ca4 <DMA2_Channel2_IRQHandler+0x10>)
 8003c9a:	f002 f8b4 	bl	8005e06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000095c 	.word	0x2000095c

08003ca8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003cac:	4802      	ldr	r0, [pc, #8]	@ (8003cb8 <DMA2_Channel3_IRQHandler+0x10>)
 8003cae:	f002 f8aa 	bl	8005e06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000914 	.word	0x20000914

08003cbc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003cc0:	4802      	ldr	r0, [pc, #8]	@ (8003ccc <DMA2_Channel5_IRQHandler+0x10>)
 8003cc2:	f002 f8a0 	bl	8005e06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200008cc 	.word	0x200008cc

08003cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <SystemInit+0x20>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cda:	4a05      	ldr	r2, [pc, #20]	@ (8003cf0 <SystemInit+0x20>)
 8003cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <_Z8tcpInputv>:
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
bool flagSetSys;							// Indica que se debe enviar system

/*****	INPUT	*****/

void tcpInput(){
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
	//tcpData();
	//tcpSystem();
	//tcpGps();
	//tcpInLora();
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <_Z41__static_initialization_and_destruction_0ii>:
		break;

	default:
		break;
	}
}
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d11f      	bne.n	8003d54 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d11a      	bne.n	8003d54 <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t limitGpsTcp = 43200000/superloop;// Tiempo que esta apagado GPS
 8003d1e:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d68 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003d2e:	601a      	str	r2, [r3, #0]
uint32_t limitTcpData	= 120000/superloop;	// Limite para fijar datos
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003d40:	601a      	str	r2, [r3, #0]
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
 8003d42:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b0a      	ldr	r3, [pc, #40]	@ (8003d74 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	2000035f 	.word	0x2000035f
 8003d64:	02932e00 	.word	0x02932e00
 8003d68:	2000113c 	.word	0x2000113c
 8003d6c:	0001d4c0 	.word	0x0001d4c0
 8003d70:	20001140 	.word	0x20001140
 8003d74:	01499700 	.word	0x01499700
 8003d78:	20001144 	.word	0x20001144

08003d7c <_GLOBAL__sub_I_stateGpsTcp>:
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7ff ffbd 	bl	8003d04 <_Z41__static_initialization_and_destruction_0ii>
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_Z9tcpOutputv>:
uint16_t countTcpLoraOut;							// Contador para esperar
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando

/*****	OUTPUT	*****/

void tcpOutput(){
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
	//tcpOutLora();
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <_Z41__static_initialization_and_destruction_0ii>:
	default:
		stateTpcLoraOut	= 0;
		break;
	}

}
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d10e      	bne.n	8003dca <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d109      	bne.n	8003dca <_Z41__static_initialization_and_destruction_0ii+0x2e>
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando
 8003db6:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003dc8:	801a      	strh	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	2000035f 	.word	0x2000035f
 8003ddc:	20001148 	.word	0x20001148

08003de0 <_GLOBAL__sub_I_loraTxCommand0>:
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003de8:	2001      	movs	r0, #1
 8003dea:	f7ff ffd7 	bl	8003d9c <_Z41__static_initialization_and_destruction_0ii>
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003df4:	f7ff ff6c 	bl	8003cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003df8:	480c      	ldr	r0, [pc, #48]	@ (8003e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8003dfa:	490d      	ldr	r1, [pc, #52]	@ (8003e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <LoopForever+0xe>)
  movs r3, #0
 8003dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e00:	e002      	b.n	8003e08 <LoopCopyDataInit>

08003e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e06:	3304      	adds	r3, #4

08003e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e0c:	d3f9      	bcc.n	8003e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e10:	4c0a      	ldr	r4, [pc, #40]	@ (8003e3c <LoopForever+0x16>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e14:	e001      	b.n	8003e1a <LoopFillZerobss>

08003e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e18:	3204      	adds	r2, #4

08003e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e1c:	d3fb      	bcc.n	8003e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e1e:	f008 f897 	bl	800bf50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e22:	f7fe fe9b 	bl	8002b5c <main>

08003e26 <LoopForever>:

LoopForever:
    b LoopForever
 8003e26:	e7fe      	b.n	8003e26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e28:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e30:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8003e34:	0800c04c 	.word	0x0800c04c
  ldr r2, =_sbss
 8003e38:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8003e3c:	20001150 	.word	0x20001150

08003e40 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e40:	e7fe      	b.n	8003e40 <ADC3_IRQHandler>

08003e42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e4c:	2003      	movs	r0, #3
 8003e4e:	f001 fe01 	bl	8005a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e52:	200f      	movs	r0, #15
 8003e54:	f000 f80e 	bl	8003e74 <HAL_InitTick>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	71fb      	strb	r3, [r7, #7]
 8003e62:	e001      	b.n	8003e68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e64:	f7ff fb42 	bl	80034ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e68:	79fb      	ldrb	r3, [r7, #7]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e80:	4b17      	ldr	r3, [pc, #92]	@ (8003ee0 <HAL_InitTick+0x6c>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d023      	beq.n	8003ed0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e88:	4b16      	ldr	r3, [pc, #88]	@ (8003ee4 <HAL_InitTick+0x70>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ee0 <HAL_InitTick+0x6c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	4619      	mov	r1, r3
 8003e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fe0d 	bl	8005abe <HAL_SYSTICK_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	d809      	bhi.n	8003ec4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb8:	f001 fdd7 	bl	8005a6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <HAL_InitTick+0x74>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e007      	b.n	8003ed4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e004      	b.n	8003ed4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e001      	b.n	8003ed4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000368 	.word	0x20000368
 8003ee4:	20000360 	.word	0x20000360
 8003ee8:	20000364 	.word	0x20000364

08003eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ef0:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_IncTick+0x20>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_IncTick+0x24>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4413      	add	r3, r2
 8003efc:	4a04      	ldr	r2, [pc, #16]	@ (8003f10 <HAL_IncTick+0x24>)
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000368 	.word	0x20000368
 8003f10:	2000114c 	.word	0x2000114c

08003f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return uwTick;
 8003f18:	4b03      	ldr	r3, [pc, #12]	@ (8003f28 <HAL_GetTick+0x14>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000114c 	.word	0x2000114c

08003f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7ff ffee 	bl	8003f14 <HAL_GetTick>
 8003f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d005      	beq.n	8003f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f46:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <HAL_Delay+0x44>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f52:	bf00      	nop
 8003f54:	f7ff ffde 	bl	8003f14 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d8f7      	bhi.n	8003f54 <HAL_Delay+0x28>
  {
  }
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000368 	.word	0x20000368

08003f74 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_SuspendTick+0x1c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <HAL_SuspendTick+0x1c>)
 8003f7e:	f023 0302 	bic.w	r3, r3, #2
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000e010 	.word	0xe000e010

08003f94 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_ResumeTick+0x1c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <HAL_ResumeTick+0x1c>)
 8003f9e:	f043 0302 	orr.w	r3, r3, #2
 8003fa2:	6013      	str	r3, [r2, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000e010 	.word	0xe000e010

08003fb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	609a      	str	r2, [r3, #8]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3360      	adds	r3, #96	@ 0x60
 800402e:	461a      	mov	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <LL_ADC_SetOffset+0x44>)
 800403e:	4013      	ands	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	4313      	orrs	r3, r2
 800404c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	03fff000 	.word	0x03fff000

08004064 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3360      	adds	r3, #96	@ 0x60
 8004072:	461a      	mov	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3360      	adds	r3, #96	@ 0x60
 80040a0:	461a      	mov	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	615a      	str	r2, [r3, #20]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3330      	adds	r3, #48	@ 0x30
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	4413      	add	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	211f      	movs	r1, #31
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	401a      	ands	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	f003 011f 	and.w	r1, r3, #31
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3314      	adds	r3, #20
 80041a0:	461a      	mov	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	0e5b      	lsrs	r3, r3, #25
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	4413      	add	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	0d1b      	lsrs	r3, r3, #20
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2107      	movs	r1, #7
 80041be:	fa01 f303 	lsl.w	r3, r1, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	401a      	ands	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	0d1b      	lsrs	r3, r3, #20
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	431a      	orrs	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0318 	and.w	r3, r3, #24
 800420a:	4908      	ldr	r1, [pc, #32]	@ (800422c <LL_ADC_SetChannelSingleDiff+0x44>)
 800420c:	40d9      	lsrs	r1, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	400b      	ands	r3, r1
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	431a      	orrs	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	0007ffff 	.word	0x0007ffff

08004230 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 031f 	and.w	r3, r3, #31
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6093      	str	r3, [r2, #8]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800429c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042a0:	d101      	bne.n	80042a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80042c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042f0:	d101      	bne.n	80042f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004314:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004318:	f043 0201 	orr.w	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <LL_ADC_IsEnabled+0x18>
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <LL_ADC_IsEnabled+0x1a>
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004362:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004366:	f043 0204 	orr.w	r2, r3, #4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d101      	bne.n	8004392 <LL_ADC_REG_IsConversionOngoing+0x18>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d101      	bne.n	80043b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	b089      	sub	sp, #36	@ 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e133      	b.n	800464a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff f89f 	bl	8003534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff3f 	bl	800428c <LL_ADC_IsDeepPowerDownEnabled>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff25 	bl	8004268 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff ff5a 	bl	80042dc <LL_ADC_IsInternalRegulatorEnabled>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d115      	bne.n	800445a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ff3e 	bl	80042b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004438:	4b86      	ldr	r3, [pc, #536]	@ (8004654 <HAL_ADC_Init+0x28c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	4a86      	ldr	r2, [pc, #536]	@ (8004658 <HAL_ADC_Init+0x290>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	3301      	adds	r3, #1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800444c:	e002      	b.n	8004454 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b01      	subs	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f9      	bne.n	800444e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff3c 	bl	80042dc <LL_ADC_IsInternalRegulatorEnabled>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10d      	bne.n	8004486 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	f043 0210 	orr.w	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff ff75 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 8004490:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 80cc 	bne.w	8004638 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 80c8 	bne.w	8004638 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80044b0:	f043 0202 	orr.w	r2, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff35 	bl	800432c <LL_ADC_IsEnabled>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d115      	bne.n	80044f4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c8:	4864      	ldr	r0, [pc, #400]	@ (800465c <HAL_ADC_Init+0x294>)
 80044ca:	f7ff ff2f 	bl	800432c <LL_ADC_IsEnabled>
 80044ce:	4604      	mov	r4, r0
 80044d0:	4863      	ldr	r0, [pc, #396]	@ (8004660 <HAL_ADC_Init+0x298>)
 80044d2:	f7ff ff2b 	bl	800432c <LL_ADC_IsEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	431c      	orrs	r4, r3
 80044da:	4862      	ldr	r0, [pc, #392]	@ (8004664 <HAL_ADC_Init+0x29c>)
 80044dc:	f7ff ff26 	bl	800432c <LL_ADC_IsEnabled>
 80044e0:	4603      	mov	r3, r0
 80044e2:	4323      	orrs	r3, r4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4619      	mov	r1, r3
 80044ee:	485e      	ldr	r0, [pc, #376]	@ (8004668 <HAL_ADC_Init+0x2a0>)
 80044f0:	f7ff fd60 	bl	8003fb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7e5b      	ldrb	r3, [r3, #25]
 80044f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004504:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800450a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004512:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d106      	bne.n	8004530 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	3b01      	subs	r3, #1
 8004528:	045b      	lsls	r3, r3, #17
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	4b46      	ldr	r3, [pc, #280]	@ (800466c <HAL_ADC_Init+0x2a4>)
 8004554:	4013      	ands	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	69b9      	ldr	r1, [r7, #24]
 800455c:	430b      	orrs	r3, r1
 800455e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff ff1b 	bl	80043a0 <LL_ADC_INJ_IsConversionOngoing>
 800456a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d140      	bne.n	80045f4 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d13d      	bne.n	80045f4 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	7e1b      	ldrb	r3, [r3, #24]
 8004580:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004582:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800458a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800459a:	f023 0306 	bic.w	r3, r3, #6
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	69b9      	ldr	r1, [r7, #24]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d118      	bne.n	80045e4 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80045c8:	4311      	orrs	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80045ce:	4311      	orrs	r1, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80045d4:	430a      	orrs	r2, r1
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	611a      	str	r2, [r3, #16]
 80045e2:	e007      	b.n	80045f4 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d10c      	bne.n	8004616 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	f023 010f 	bic.w	r1, r3, #15
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	631a      	str	r2, [r3, #48]	@ 0x30
 8004614:	e007      	b.n	8004626 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 020f 	bic.w	r2, r2, #15
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	@ 0x58
 8004636:	e007      	b.n	8004648 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	f043 0210 	orr.w	r2, r3, #16
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004648:	7ffb      	ldrb	r3, [r7, #31]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3724      	adds	r7, #36	@ 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd90      	pop	{r4, r7, pc}
 8004652:	bf00      	nop
 8004654:	20000360 	.word	0x20000360
 8004658:	053e2d63 	.word	0x053e2d63
 800465c:	50040000 	.word	0x50040000
 8004660:	50040100 	.word	0x50040100
 8004664:	50040200 	.word	0x50040200
 8004668:	50040300 	.word	0x50040300
 800466c:	fff0c007 	.word	0xfff0c007

08004670 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800467c:	4853      	ldr	r0, [pc, #332]	@ (80047cc <HAL_ADC_Start_DMA+0x15c>)
 800467e:	f7ff fdd7 	bl	8004230 <LL_ADC_GetMultimode>
 8004682:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fe76 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 8093 	bne.w	80047bc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_Start_DMA+0x34>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e08e      	b.n	80047c2 <HAL_ADC_Start_DMA+0x152>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a47      	ldr	r2, [pc, #284]	@ (80047d0 <HAL_ADC_Start_DMA+0x160>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d008      	beq.n	80046c8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d002      	beq.n	80046c8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	d172      	bne.n	80047ae <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fed1 	bl	8005470 <ADC_Enable>
 80046ce:	4603      	mov	r3, r0
 80046d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d165      	bne.n	80047a4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a38      	ldr	r2, [pc, #224]	@ (80047d4 <HAL_ADC_Start_DMA+0x164>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d002      	beq.n	80046fc <HAL_ADC_Start_DMA+0x8c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	e000      	b.n	80046fe <HAL_ADC_Start_DMA+0x8e>
 80046fc:	4b36      	ldr	r3, [pc, #216]	@ (80047d8 <HAL_ADC_Start_DMA+0x168>)
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	4293      	cmp	r3, r2
 8004704:	d002      	beq.n	800470c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004710:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	f023 0206 	bic.w	r2, r3, #6
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004730:	e002      	b.n	8004738 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800473c:	4a27      	ldr	r2, [pc, #156]	@ (80047dc <HAL_ADC_Start_DMA+0x16c>)
 800473e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <HAL_ADC_Start_DMA+0x170>)
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474c:	4a25      	ldr	r2, [pc, #148]	@ (80047e4 <HAL_ADC_Start_DMA+0x174>)
 800474e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	221c      	movs	r2, #28
 8004756:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0210 	orr.w	r2, r2, #16
 800476e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3340      	adds	r3, #64	@ 0x40
 800478a:	4619      	mov	r1, r3
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f001 fa5a 	bl	8005c48 <HAL_DMA_Start_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fdd8 	bl	8004352 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80047a2:	e00d      	b.n	80047c0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80047ac:	e008      	b.n	80047c0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80047ba:	e001      	b.n	80047c0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
 80047be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	50040300 	.word	0x50040300
 80047d0:	50040200 	.word	0x50040200
 80047d4:	50040100 	.word	0x50040100
 80047d8:	50040000 	.word	0x50040000
 80047dc:	0800557d 	.word	0x0800557d
 80047e0:	08005655 	.word	0x08005655
 80047e4:	08005671 	.word	0x08005671

080047e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	@ 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80047f0:	2300      	movs	r3, #0
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004804:	4882      	ldr	r0, [pc, #520]	@ (8004a10 <HAL_ADC_IRQHandler+0x228>)
 8004806:	f7ff fd13 	bl	8004230 <LL_ADC_GetMultimode>
 800480a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d017      	beq.n	8004846 <HAL_ADC_IRQHandler+0x5e>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d012      	beq.n	8004846 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	d105      	bne.n	8004838 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004830:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 ff81 	bl	8005740 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2202      	movs	r2, #2
 8004844:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <HAL_ADC_IRQHandler+0x72>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8083 	beq.w	800496c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d07d      	beq.n	800496c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004880:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fc2d 	bl	80040ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d062      	beq.n	800495e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a5d      	ldr	r2, [pc, #372]	@ (8004a14 <HAL_ADC_IRQHandler+0x22c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d002      	beq.n	80048a8 <HAL_ADC_IRQHandler+0xc0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	e000      	b.n	80048aa <HAL_ADC_IRQHandler+0xc2>
 80048a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004a18 <HAL_ADC_IRQHandler+0x230>)
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d008      	beq.n	80048c4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d002      	beq.n	80048c4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d104      	bne.n	80048ce <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	623b      	str	r3, [r7, #32]
 80048cc:	e00c      	b.n	80048e8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a50      	ldr	r2, [pc, #320]	@ (8004a14 <HAL_ADC_IRQHandler+0x22c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d002      	beq.n	80048de <HAL_ADC_IRQHandler+0xf6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	e000      	b.n	80048e0 <HAL_ADC_IRQHandler+0xf8>
 80048de:	4b4e      	ldr	r3, [pc, #312]	@ (8004a18 <HAL_ADC_IRQHandler+0x230>)
 80048e0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d135      	bne.n	800495e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d12e      	bne.n	800495e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fd38 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11a      	bne.n	8004946 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 020c 	bic.w	r2, r2, #12
 800491e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d112      	bne.n	800495e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493c:	f043 0201 	orr.w	r2, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	659a      	str	r2, [r3, #88]	@ 0x58
 8004944:	e00b      	b.n	800495e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	f043 0210 	orr.w	r2, r3, #16
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004956:	f043 0201 	orr.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fe fd02 	bl	8003368 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	220c      	movs	r2, #12
 800496a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <HAL_ADC_IRQHandler+0x198>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 809f 	beq.w	8004aca <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8099 	beq.w	8004aca <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fbd8 	bl	800416a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80049ba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fb93 	bl	80040ec <LL_ADC_REG_IsTriggerSourceSWStart>
 80049c6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a11      	ldr	r2, [pc, #68]	@ (8004a14 <HAL_ADC_IRQHandler+0x22c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d002      	beq.n	80049d8 <HAL_ADC_IRQHandler+0x1f0>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	e000      	b.n	80049da <HAL_ADC_IRQHandler+0x1f2>
 80049d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <HAL_ADC_IRQHandler+0x230>)
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	4293      	cmp	r3, r2
 80049e0:	d008      	beq.n	80049f4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d002      	beq.n	80049f4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b07      	cmp	r3, #7
 80049f2:	d104      	bne.n	80049fe <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	623b      	str	r3, [r7, #32]
 80049fc:	e013      	b.n	8004a26 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a04      	ldr	r2, [pc, #16]	@ (8004a14 <HAL_ADC_IRQHandler+0x22c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d009      	beq.n	8004a1c <HAL_ADC_IRQHandler+0x234>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	e007      	b.n	8004a1e <HAL_ADC_IRQHandler+0x236>
 8004a0e:	bf00      	nop
 8004a10:	50040300 	.word	0x50040300
 8004a14:	50040100 	.word	0x50040100
 8004a18:	50040000 	.word	0x50040000
 8004a1c:	4b7d      	ldr	r3, [pc, #500]	@ (8004c14 <HAL_ADC_IRQHandler+0x42c>)
 8004a1e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d047      	beq.n	8004abc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_ADC_IRQHandler+0x25e>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d03f      	beq.n	8004abc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d13a      	bne.n	8004abc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	d133      	bne.n	8004abc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d12e      	bne.n	8004abc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fc9c 	bl	80043a0 <LL_ADC_INJ_IsConversionOngoing>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d11a      	bne.n	8004aa4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a7c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d112      	bne.n	8004abc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004aa2:	e00b      	b.n	8004abc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa8:	f043 0210 	orr.w	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	f043 0201 	orr.w	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fe17 	bl	80056f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2260      	movs	r2, #96	@ 0x60
 8004ac8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d011      	beq.n	8004af8 <HAL_ADC_IRQHandler+0x310>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00c      	beq.n	8004af8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f8a0 	bl	8004c30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2280      	movs	r2, #128	@ 0x80
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <HAL_ADC_IRQHandler+0x340>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b10:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fdfd 	bl	8005718 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <HAL_ADC_IRQHandler+0x370>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00d      	beq.n	8004b58 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fdef 	bl	800572c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d036      	beq.n	8004bd0 <HAL_ADC_IRQHandler+0x3e8>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d031      	beq.n	8004bd0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8004b74:	2301      	movs	r3, #1
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b78:	e014      	b.n	8004ba4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b80:	4825      	ldr	r0, [pc, #148]	@ (8004c18 <HAL_ADC_IRQHandler+0x430>)
 8004b82:	f7ff fb63 	bl	800424c <LL_ADC_GetMultiDMATransfer>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b90:	e008      	b.n	8004ba4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bae:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	f043 0202 	orr.w	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f83e 	bl	8004c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2210      	movs	r2, #16
 8004bce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d018      	beq.n	8004c0c <HAL_ADC_IRQHandler+0x424>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d013      	beq.n	8004c0c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	f043 0208 	orr.w	r2, r3, #8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c04:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fd7c 	bl	8005704 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004c0c:	bf00      	nop
 8004c0e:	3728      	adds	r7, #40	@ 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	50040000 	.word	0x50040000
 8004c18:	50040300 	.word	0x50040300

08004c1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b0b6      	sub	sp, #216	@ 0xd8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x22>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e3e3      	b.n	8005442 <HAL_ADC_ConfigChannel+0x7ea>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fb77 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 83c4 	bne.w	800541c <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	d824      	bhi.n	8004cee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	3b02      	subs	r3, #2
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d81b      	bhi.n	8004ce6 <HAL_ADC_ConfigChannel+0x8e>
 8004cae:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <HAL_ADC_ConfigChannel+0x5c>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004ccd 	.word	0x08004ccd
 8004cbc:	08004cd5 	.word	0x08004cd5
 8004cc0:	08004cdd 	.word	0x08004cdd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004cca:	e010      	b.n	8004cee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004ccc:	2312      	movs	r3, #18
 8004cce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004cd2:	e00c      	b.n	8004cee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004cd4:	2318      	movs	r3, #24
 8004cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004cda:	e008      	b.n	8004cee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004ce4:	e003      	b.n	8004cee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004ce6:	2306      	movs	r3, #6
 8004ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004cec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004cfc:	f7ff fa09 	bl	8004112 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fb38 	bl	800437a <LL_ADC_REG_IsConversionOngoing>
 8004d0a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fb44 	bl	80043a0 <LL_ADC_INJ_IsConversionOngoing>
 8004d18:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 81bf 	bne.w	80050a4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 81ba 	bne.w	80050a4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d38:	d10f      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	4619      	mov	r1, r3
 8004d46:	f7ff fa23 	bl	8004190 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff f9b7 	bl	80040c6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004d58:	e00e      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	461a      	mov	r2, r3
 8004d68:	f7ff fa12 	bl	8004190 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2100      	movs	r1, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff f9a7 	bl	80040c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	08db      	lsrs	r3, r3, #3
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d00a      	beq.n	8004db0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6919      	ldr	r1, [r3, #16]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004daa:	f7ff f937 	bl	800401c <LL_ADC_SetOffset>
 8004dae:	e179      	b.n	80050a4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff f954 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x184>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff f949 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	0e9b      	lsrs	r3, r3, #26
 8004dd6:	f003 021f 	and.w	r2, r3, #31
 8004dda:	e01e      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x1c2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff f93e 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004e0a:	2320      	movs	r3, #32
 8004e0c:	e004      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004e0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e12:	fab3 f383 	clz	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x1da>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	0e9b      	lsrs	r3, r3, #26
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	e018      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x20c>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004e4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8004e56:	2320      	movs	r3, #32
 8004e58:	e004      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004e5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d106      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff f90d 	bl	8004090 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff f8f1 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x24a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff f8e6 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	0e9b      	lsrs	r3, r3, #26
 8004e9c:	f003 021f 	and.w	r2, r3, #31
 8004ea0:	e01e      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x288>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff f8db 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004ec8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	e004      	b.n	8004ede <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004ed4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ed8:	fab3 f383 	clz	r3, r3
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x2a0>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	0e9b      	lsrs	r3, r3, #26
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	e018      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x2d2>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	e004      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f24:	fab3 f383 	clz	r3, r3
 8004f28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d106      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	2101      	movs	r1, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff f8aa 	bl	8004090 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2102      	movs	r1, #2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff f88e 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x310>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2102      	movs	r1, #2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff f883 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	0e9b      	lsrs	r3, r3, #26
 8004f62:	f003 021f 	and.w	r2, r3, #31
 8004f66:	e01e      	b.n	8004fa6 <HAL_ADC_ConfigChannel+0x34e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff f878 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004f96:	2320      	movs	r3, #32
 8004f98:	e004      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f9e:	fab3 f383 	clz	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d105      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x366>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	0e9b      	lsrs	r3, r3, #26
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	e014      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x390>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004fda:	2320      	movs	r3, #32
 8004fdc:	e004      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fe2:	fab3 f383 	clz	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d106      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff f84b 	bl	8004090 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2103      	movs	r1, #3
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff f82f 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8005006:	4603      	mov	r3, r0
 8005008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x3ce>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2103      	movs	r1, #3
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff f824 	bl	8004064 <LL_ADC_GetOffsetChannel>
 800501c:	4603      	mov	r3, r0
 800501e:	0e9b      	lsrs	r3, r3, #26
 8005020:	f003 021f 	and.w	r2, r3, #31
 8005024:	e017      	b.n	8005056 <HAL_ADC_ConfigChannel+0x3fe>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2103      	movs	r1, #3
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff f819 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8005032:	4603      	mov	r3, r0
 8005034:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800503e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005040:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8005048:	2320      	movs	r3, #32
 800504a:	e003      	b.n	8005054 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800504c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <HAL_ADC_ConfigChannel+0x416>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	0e9b      	lsrs	r3, r3, #26
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	e011      	b.n	8005092 <HAL_ADC_ConfigChannel+0x43a>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005076:	fa93 f3a3 	rbit	r3, r3
 800507a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800507c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800507e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005080:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8005086:	2320      	movs	r3, #32
 8005088:	e003      	b.n	8005092 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800508a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800508c:	fab3 f383 	clz	r3, r3
 8005090:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005092:	429a      	cmp	r2, r3
 8005094:	d106      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	2103      	movs	r1, #3
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fff6 	bl	8004090 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff f93f 	bl	800432c <LL_ADC_IsEnabled>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f040 813f 	bne.w	8005334 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6819      	ldr	r1, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f7ff f890 	bl	80041e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a8e      	ldr	r2, [pc, #568]	@ (8005308 <HAL_ADC_ConfigChannel+0x6b0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f040 8130 	bne.w	8005334 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x4a4>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	0e9b      	lsrs	r3, r3, #26
 80050ea:	3301      	adds	r3, #1
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2b09      	cmp	r3, #9
 80050f2:	bf94      	ite	ls
 80050f4:	2301      	movls	r3, #1
 80050f6:	2300      	movhi	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e019      	b.n	8005130 <HAL_ADC_ConfigChannel+0x4d8>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005104:	fa93 f3a3 	rbit	r3, r3
 8005108:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800510a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800510c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800510e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8005114:	2320      	movs	r3, #32
 8005116:	e003      	b.n	8005120 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8005118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800511a:	fab3 f383 	clz	r3, r3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	3301      	adds	r3, #1
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2b09      	cmp	r3, #9
 8005128:	bf94      	ite	ls
 800512a:	2301      	movls	r3, #1
 800512c:	2300      	movhi	r3, #0
 800512e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005130:	2b00      	cmp	r3, #0
 8005132:	d079      	beq.n	8005228 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513c:	2b00      	cmp	r3, #0
 800513e:	d107      	bne.n	8005150 <HAL_ADC_ConfigChannel+0x4f8>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	0e9b      	lsrs	r3, r3, #26
 8005146:	3301      	adds	r3, #1
 8005148:	069b      	lsls	r3, r3, #26
 800514a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800514e:	e015      	b.n	800517c <HAL_ADC_ConfigChannel+0x524>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005158:	fa93 f3a3 	rbit	r3, r3
 800515c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800515e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005160:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8005168:	2320      	movs	r3, #32
 800516a:	e003      	b.n	8005174 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800516c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800516e:	fab3 f383 	clz	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3301      	adds	r3, #1
 8005176:	069b      	lsls	r3, r3, #26
 8005178:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005184:	2b00      	cmp	r3, #0
 8005186:	d109      	bne.n	800519c <HAL_ADC_ConfigChannel+0x544>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	0e9b      	lsrs	r3, r3, #26
 800518e:	3301      	adds	r3, #1
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	2101      	movs	r1, #1
 8005196:	fa01 f303 	lsl.w	r3, r1, r3
 800519a:	e017      	b.n	80051cc <HAL_ADC_ConfigChannel+0x574>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a4:	fa93 f3a3 	rbit	r3, r3
 80051a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80051aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80051ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80051b4:	2320      	movs	r3, #32
 80051b6:	e003      	b.n	80051c0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80051b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ba:	fab3 f383 	clz	r3, r3
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	3301      	adds	r3, #1
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	2101      	movs	r1, #1
 80051c8:	fa01 f303 	lsl.w	r3, r1, r3
 80051cc:	ea42 0103 	orr.w	r1, r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x59a>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	0e9b      	lsrs	r3, r3, #26
 80051e2:	3301      	adds	r3, #1
 80051e4:	f003 021f 	and.w	r2, r3, #31
 80051e8:	4613      	mov	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4413      	add	r3, r2
 80051ee:	051b      	lsls	r3, r3, #20
 80051f0:	e018      	b.n	8005224 <HAL_ADC_ConfigChannel+0x5cc>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800520a:	2320      	movs	r3, #32
 800520c:	e003      	b.n	8005216 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	fab3 f383 	clz	r3, r3
 8005214:	b2db      	uxtb	r3, r3
 8005216:	3301      	adds	r3, #1
 8005218:	f003 021f 	and.w	r2, r3, #31
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005224:	430b      	orrs	r3, r1
 8005226:	e080      	b.n	800532a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005230:	2b00      	cmp	r3, #0
 8005232:	d107      	bne.n	8005244 <HAL_ADC_ConfigChannel+0x5ec>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	0e9b      	lsrs	r3, r3, #26
 800523a:	3301      	adds	r3, #1
 800523c:	069b      	lsls	r3, r3, #26
 800523e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005242:	e015      	b.n	8005270 <HAL_ADC_ConfigChannel+0x618>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	fa93 f3a3 	rbit	r3, r3
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800525c:	2320      	movs	r3, #32
 800525e:	e003      	b.n	8005268 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	fab3 f383 	clz	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	3301      	adds	r3, #1
 800526a:	069b      	lsls	r3, r3, #26
 800526c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005278:	2b00      	cmp	r3, #0
 800527a:	d109      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x638>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	0e9b      	lsrs	r3, r3, #26
 8005282:	3301      	adds	r3, #1
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	e017      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x668>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	fa93 f3a3 	rbit	r3, r3
 800529c:	61bb      	str	r3, [r7, #24]
  return result;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80052a8:	2320      	movs	r3, #32
 80052aa:	e003      	b.n	80052b4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	fab3 f383 	clz	r3, r3
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	3301      	adds	r3, #1
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2101      	movs	r1, #1
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	ea42 0103 	orr.w	r1, r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10d      	bne.n	80052ec <HAL_ADC_ConfigChannel+0x694>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	0e9b      	lsrs	r3, r3, #26
 80052d6:	3301      	adds	r3, #1
 80052d8:	f003 021f 	and.w	r2, r3, #31
 80052dc:	4613      	mov	r3, r2
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4413      	add	r3, r2
 80052e2:	3b1e      	subs	r3, #30
 80052e4:	051b      	lsls	r3, r3, #20
 80052e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	e01d      	b.n	8005328 <HAL_ADC_ConfigChannel+0x6d0>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	fa93 f3a3 	rbit	r3, r3
 80052f8:	60fb      	str	r3, [r7, #12]
  return result;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005304:	2320      	movs	r3, #32
 8005306:	e005      	b.n	8005314 <HAL_ADC_ConfigChannel+0x6bc>
 8005308:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	3301      	adds	r3, #1
 8005316:	f003 021f 	and.w	r2, r3, #31
 800531a:	4613      	mov	r3, r2
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	4413      	add	r3, r2
 8005320:	3b1e      	subs	r3, #30
 8005322:	051b      	lsls	r3, r3, #20
 8005324:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005328:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800532e:	4619      	mov	r1, r3
 8005330:	f7fe ff2e 	bl	8004190 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b44      	ldr	r3, [pc, #272]	@ (800544c <HAL_ADC_ConfigChannel+0x7f4>)
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d07a      	beq.n	8005436 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005340:	4843      	ldr	r0, [pc, #268]	@ (8005450 <HAL_ADC_ConfigChannel+0x7f8>)
 8005342:	f7fe fe5d 	bl	8004000 <LL_ADC_GetCommonPathInternalCh>
 8005346:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a41      	ldr	r2, [pc, #260]	@ (8005454 <HAL_ADC_ConfigChannel+0x7fc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d12c      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d126      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a3c      	ldr	r2, [pc, #240]	@ (8005458 <HAL_ADC_ConfigChannel+0x800>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_ADC_ConfigChannel+0x71c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3b      	ldr	r2, [pc, #236]	@ (800545c <HAL_ADC_ConfigChannel+0x804>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d15d      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005378:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800537c:	4619      	mov	r1, r3
 800537e:	4834      	ldr	r0, [pc, #208]	@ (8005450 <HAL_ADC_ConfigChannel+0x7f8>)
 8005380:	f7fe fe2b 	bl	8003fda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005384:	4b36      	ldr	r3, [pc, #216]	@ (8005460 <HAL_ADC_ConfigChannel+0x808>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	099b      	lsrs	r3, r3, #6
 800538a:	4a36      	ldr	r2, [pc, #216]	@ (8005464 <HAL_ADC_ConfigChannel+0x80c>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	099b      	lsrs	r3, r3, #6
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	4613      	mov	r3, r2
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800539e:	e002      	b.n	80053a6 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f9      	bne.n	80053a0 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053ac:	e040      	b.n	8005430 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005468 <HAL_ADC_ConfigChannel+0x810>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d118      	bne.n	80053ea <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d112      	bne.n	80053ea <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a23      	ldr	r2, [pc, #140]	@ (8005458 <HAL_ADC_ConfigChannel+0x800>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_ADC_ConfigChannel+0x780>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a22      	ldr	r2, [pc, #136]	@ (800545c <HAL_ADC_ConfigChannel+0x804>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d12d      	bne.n	8005434 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053e0:	4619      	mov	r1, r3
 80053e2:	481b      	ldr	r0, [pc, #108]	@ (8005450 <HAL_ADC_ConfigChannel+0x7f8>)
 80053e4:	f7fe fdf9 	bl	8003fda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053e8:	e024      	b.n	8005434 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <HAL_ADC_ConfigChannel+0x814>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d120      	bne.n	8005436 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80053f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d11a      	bne.n	8005436 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a14      	ldr	r2, [pc, #80]	@ (8005458 <HAL_ADC_ConfigChannel+0x800>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d115      	bne.n	8005436 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800540a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800540e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005412:	4619      	mov	r1, r3
 8005414:	480e      	ldr	r0, [pc, #56]	@ (8005450 <HAL_ADC_ConfigChannel+0x7f8>)
 8005416:	f7fe fde0 	bl	8003fda <LL_ADC_SetCommonPathInternalCh>
 800541a:	e00c      	b.n	8005436 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800542e:	e002      	b.n	8005436 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005434:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800543e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005442:	4618      	mov	r0, r3
 8005444:	37d8      	adds	r7, #216	@ 0xd8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	80080000 	.word	0x80080000
 8005450:	50040300 	.word	0x50040300
 8005454:	c7520000 	.word	0xc7520000
 8005458:	50040000 	.word	0x50040000
 800545c:	50040200 	.word	0x50040200
 8005460:	20000360 	.word	0x20000360
 8005464:	053e2d63 	.word	0x053e2d63
 8005468:	cb840000 	.word	0xcb840000
 800546c:	80000001 	.word	0x80000001

08005470 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005478:	2300      	movs	r3, #0
 800547a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe ff53 	bl	800432c <LL_ADC_IsEnabled>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d169      	bne.n	8005560 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	4b36      	ldr	r3, [pc, #216]	@ (800556c <ADC_Enable+0xfc>)
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00d      	beq.n	80054b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549e:	f043 0210 	orr.w	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054aa:	f043 0201 	orr.w	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e055      	b.n	8005562 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe ff22 	bl	8004304 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80054c0:	482b      	ldr	r0, [pc, #172]	@ (8005570 <ADC_Enable+0x100>)
 80054c2:	f7fe fd9d 	bl	8004000 <LL_ADC_GetCommonPathInternalCh>
 80054c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80054c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054d0:	4b28      	ldr	r3, [pc, #160]	@ (8005574 <ADC_Enable+0x104>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	099b      	lsrs	r3, r3, #6
 80054d6:	4a28      	ldr	r2, [pc, #160]	@ (8005578 <ADC_Enable+0x108>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80054ea:	e002      	b.n	80054f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f9      	bne.n	80054ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80054f8:	f7fe fd0c 	bl	8003f14 <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054fe:	e028      	b.n	8005552 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe ff11 	bl	800432c <LL_ADC_IsEnabled>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fef5 	bl	8004304 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800551a:	f7fe fcfb 	bl	8003f14 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d914      	bls.n	8005552 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d00d      	beq.n	8005552 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553a:	f043 0210 	orr.w	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005546:	f043 0201 	orr.w	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e007      	b.n	8005562 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	d1cf      	bne.n	8005500 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	8000003f 	.word	0x8000003f
 8005570:	50040300 	.word	0x50040300
 8005574:	20000360 	.word	0x20000360
 8005578:	053e2d63 	.word	0x053e2d63

0800557c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005588:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005592:	2b00      	cmp	r3, #0
 8005594:	d14b      	bne.n	800562e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d021      	beq.n	80055f4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe fd99 	bl	80040ec <LL_ADC_REG_IsTriggerSourceSWStart>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d032      	beq.n	8005626 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d12b      	bne.n	8005626 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11f      	bne.n	8005626 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ea:	f043 0201 	orr.w	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80055f2:	e018      	b.n	8005626 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d111      	bne.n	8005626 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005606:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005612:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561e:	f043 0201 	orr.w	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7fd fe9e 	bl	8003368 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800562c:	e00e      	b.n	800564c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff fb02 	bl	8004c44 <HAL_ADC_ErrorCallback>
}
 8005640:	e004      	b.n	800564c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005660:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff fada 	bl	8004c1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005682:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800568e:	f043 0204 	orr.w	r2, r3, #4
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fad4 	bl	8004c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <LL_ADC_IsEnabled>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <LL_ADC_IsEnabled+0x18>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <LL_ADC_IsEnabled+0x1a>
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <LL_ADC_REG_IsConversionOngoing>:
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d101      	bne.n	80056e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b0a1      	sub	sp, #132	@ 0x84
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800576e:	2302      	movs	r3, #2
 8005770:	e093      	b.n	800589a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800577a:	2300      	movs	r3, #0
 800577c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800577e:	2300      	movs	r3, #0
 8005780:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a47      	ldr	r2, [pc, #284]	@ (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d102      	bne.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800578c:	4b46      	ldr	r3, [pc, #280]	@ (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e001      	b.n	8005796 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10b      	bne.n	80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e072      	b.n	800589a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff ff87 	bl	80056ca <LL_ADC_REG_IsConversionOngoing>
 80057bc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff ff81 	bl	80056ca <LL_ADC_REG_IsConversionOngoing>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d154      	bne.n	8005878 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80057ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d151      	bne.n	8005878 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057d4:	4b35      	ldr	r3, [pc, #212]	@ (80058ac <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80057d6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02c      	beq.n	800583a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80057e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6859      	ldr	r1, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057f2:	035b      	lsls	r3, r3, #13
 80057f4:	430b      	orrs	r3, r1
 80057f6:	431a      	orrs	r2, r3
 80057f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057fc:	4829      	ldr	r0, [pc, #164]	@ (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80057fe:	f7ff ff51 	bl	80056a4 <LL_ADC_IsEnabled>
 8005802:	4604      	mov	r4, r0
 8005804:	4828      	ldr	r0, [pc, #160]	@ (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005806:	f7ff ff4d 	bl	80056a4 <LL_ADC_IsEnabled>
 800580a:	4603      	mov	r3, r0
 800580c:	431c      	orrs	r4, r3
 800580e:	4828      	ldr	r0, [pc, #160]	@ (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005810:	f7ff ff48 	bl	80056a4 <LL_ADC_IsEnabled>
 8005814:	4603      	mov	r3, r0
 8005816:	4323      	orrs	r3, r4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d137      	bne.n	800588c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800581c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005824:	f023 030f 	bic.w	r3, r3, #15
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	6811      	ldr	r1, [r2, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	6892      	ldr	r2, [r2, #8]
 8005830:	430a      	orrs	r2, r1
 8005832:	431a      	orrs	r2, r3
 8005834:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005836:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005838:	e028      	b.n	800588c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800583a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005844:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005846:	4817      	ldr	r0, [pc, #92]	@ (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005848:	f7ff ff2c 	bl	80056a4 <LL_ADC_IsEnabled>
 800584c:	4604      	mov	r4, r0
 800584e:	4816      	ldr	r0, [pc, #88]	@ (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005850:	f7ff ff28 	bl	80056a4 <LL_ADC_IsEnabled>
 8005854:	4603      	mov	r3, r0
 8005856:	431c      	orrs	r4, r3
 8005858:	4815      	ldr	r0, [pc, #84]	@ (80058b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800585a:	f7ff ff23 	bl	80056a4 <LL_ADC_IsEnabled>
 800585e:	4603      	mov	r3, r0
 8005860:	4323      	orrs	r3, r4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d112      	bne.n	800588c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800586e:	f023 030f 	bic.w	r3, r3, #15
 8005872:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005874:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005876:	e009      	b.n	800588c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800588a:	e000      	b.n	800588e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800588c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005896:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800589a:	4618      	mov	r0, r3
 800589c:	3784      	adds	r7, #132	@ 0x84
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd90      	pop	{r4, r7, pc}
 80058a2:	bf00      	nop
 80058a4:	50040000 	.word	0x50040000
 80058a8:	50040100 	.word	0x50040100
 80058ac:	50040300 	.word	0x50040300
 80058b0:	50040200 	.word	0x50040200

080058b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058c4:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <__NVIC_SetPriorityGrouping+0x44>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058d0:	4013      	ands	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058e6:	4a04      	ldr	r2, [pc, #16]	@ (80058f8 <__NVIC_SetPriorityGrouping+0x44>)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	60d3      	str	r3, [r2, #12]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	e000ed00 	.word	0xe000ed00

080058fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005900:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <__NVIC_GetPriorityGrouping+0x18>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	f003 0307 	and.w	r3, r3, #7
}
 800590a:	4618      	mov	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	e000ed00 	.word	0xe000ed00

08005918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005926:	2b00      	cmp	r3, #0
 8005928:	db0b      	blt.n	8005942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	f003 021f 	and.w	r2, r3, #31
 8005930:	4907      	ldr	r1, [pc, #28]	@ (8005950 <__NVIC_EnableIRQ+0x38>)
 8005932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	2001      	movs	r0, #1
 800593a:	fa00 f202 	lsl.w	r2, r0, r2
 800593e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000e100 	.word	0xe000e100

08005954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	6039      	str	r1, [r7, #0]
 800595e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005964:	2b00      	cmp	r3, #0
 8005966:	db0a      	blt.n	800597e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	490c      	ldr	r1, [pc, #48]	@ (80059a0 <__NVIC_SetPriority+0x4c>)
 800596e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005972:	0112      	lsls	r2, r2, #4
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	440b      	add	r3, r1
 8005978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800597c:	e00a      	b.n	8005994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	4908      	ldr	r1, [pc, #32]	@ (80059a4 <__NVIC_SetPriority+0x50>)
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	3b04      	subs	r3, #4
 800598c:	0112      	lsls	r2, r2, #4
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	440b      	add	r3, r1
 8005992:	761a      	strb	r2, [r3, #24]
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	e000e100 	.word	0xe000e100
 80059a4:	e000ed00 	.word	0xe000ed00

080059a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b089      	sub	sp, #36	@ 0x24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f1c3 0307 	rsb	r3, r3, #7
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	bf28      	it	cs
 80059c6:	2304      	movcs	r3, #4
 80059c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	3304      	adds	r3, #4
 80059ce:	2b06      	cmp	r3, #6
 80059d0:	d902      	bls.n	80059d8 <NVIC_EncodePriority+0x30>
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3b03      	subs	r3, #3
 80059d6:	e000      	b.n	80059da <NVIC_EncodePriority+0x32>
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43da      	mvns	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	401a      	ands	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059f0:	f04f 31ff 	mov.w	r1, #4294967295
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	fa01 f303 	lsl.w	r3, r1, r3
 80059fa:	43d9      	mvns	r1, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a00:	4313      	orrs	r3, r2
         );
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3724      	adds	r7, #36	@ 0x24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a20:	d301      	bcc.n	8005a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a22:	2301      	movs	r3, #1
 8005a24:	e00f      	b.n	8005a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a26:	4a0a      	ldr	r2, [pc, #40]	@ (8005a50 <SysTick_Config+0x40>)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a2e:	210f      	movs	r1, #15
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	f7ff ff8e 	bl	8005954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a38:	4b05      	ldr	r3, [pc, #20]	@ (8005a50 <SysTick_Config+0x40>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a3e:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <SysTick_Config+0x40>)
 8005a40:	2207      	movs	r2, #7
 8005a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	e000e010 	.word	0xe000e010

08005a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff ff29 	bl	80058b4 <__NVIC_SetPriorityGrouping>
}
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	4603      	mov	r3, r0
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a7c:	f7ff ff3e 	bl	80058fc <__NVIC_GetPriorityGrouping>
 8005a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f7ff ff8e 	bl	80059a8 <NVIC_EncodePriority>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff ff5d 	bl	8005954 <__NVIC_SetPriority>
}
 8005a9a:	bf00      	nop
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ff31 	bl	8005918 <__NVIC_EnableIRQ>
}
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff ffa2 	bl	8005a10 <SysTick_Config>
 8005acc:	4603      	mov	r3, r0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e098      	b.n	8005c1c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	4b4d      	ldr	r3, [pc, #308]	@ (8005c28 <HAL_DMA_Init+0x150>)
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d80f      	bhi.n	8005b16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	4b4b      	ldr	r3, [pc, #300]	@ (8005c2c <HAL_DMA_Init+0x154>)
 8005afe:	4413      	add	r3, r2
 8005b00:	4a4b      	ldr	r2, [pc, #300]	@ (8005c30 <HAL_DMA_Init+0x158>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	091b      	lsrs	r3, r3, #4
 8005b08:	009a      	lsls	r2, r3, #2
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a48      	ldr	r2, [pc, #288]	@ (8005c34 <HAL_DMA_Init+0x15c>)
 8005b12:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b14:	e00e      	b.n	8005b34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4b46      	ldr	r3, [pc, #280]	@ (8005c38 <HAL_DMA_Init+0x160>)
 8005b1e:	4413      	add	r3, r2
 8005b20:	4a43      	ldr	r2, [pc, #268]	@ (8005c30 <HAL_DMA_Init+0x158>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	091b      	lsrs	r3, r3, #4
 8005b28:	009a      	lsls	r2, r3, #2
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a42      	ldr	r2, [pc, #264]	@ (8005c3c <HAL_DMA_Init+0x164>)
 8005b32:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b8e:	d039      	beq.n	8005c04 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	4a27      	ldr	r2, [pc, #156]	@ (8005c34 <HAL_DMA_Init+0x15c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d11a      	bne.n	8005bd0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b9a:	4b29      	ldr	r3, [pc, #164]	@ (8005c40 <HAL_DMA_Init+0x168>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba2:	f003 031c 	and.w	r3, r3, #28
 8005ba6:	210f      	movs	r1, #15
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	4924      	ldr	r1, [pc, #144]	@ (8005c40 <HAL_DMA_Init+0x168>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005bb4:	4b22      	ldr	r3, [pc, #136]	@ (8005c40 <HAL_DMA_Init+0x168>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6859      	ldr	r1, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc0:	f003 031c 	and.w	r3, r3, #28
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	491d      	ldr	r1, [pc, #116]	@ (8005c40 <HAL_DMA_Init+0x168>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
 8005bce:	e019      	b.n	8005c04 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8005c44 <HAL_DMA_Init+0x16c>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd8:	f003 031c 	and.w	r3, r3, #28
 8005bdc:	210f      	movs	r1, #15
 8005bde:	fa01 f303 	lsl.w	r3, r1, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	4917      	ldr	r1, [pc, #92]	@ (8005c44 <HAL_DMA_Init+0x16c>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005bea:	4b16      	ldr	r3, [pc, #88]	@ (8005c44 <HAL_DMA_Init+0x16c>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6859      	ldr	r1, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf6:	f003 031c 	and.w	r3, r3, #28
 8005bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfe:	4911      	ldr	r1, [pc, #68]	@ (8005c44 <HAL_DMA_Init+0x16c>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40020407 	.word	0x40020407
 8005c2c:	bffdfff8 	.word	0xbffdfff8
 8005c30:	cccccccd 	.word	0xcccccccd
 8005c34:	40020000 	.word	0x40020000
 8005c38:	bffdfbf8 	.word	0xbffdfbf8
 8005c3c:	40020400 	.word	0x40020400
 8005c40:	400200a8 	.word	0x400200a8
 8005c44:	400204a8 	.word	0x400204a8

08005c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_DMA_Start_IT+0x20>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e04b      	b.n	8005d00 <HAL_DMA_Start_IT+0xb8>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d13a      	bne.n	8005cf2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f96d 	bl	8005f80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 020e 	orr.w	r2, r2, #14
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e00f      	b.n	8005ce0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0204 	bic.w	r2, r2, #4
 8005cce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 020a 	orr.w	r2, r2, #10
 8005cde:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e005      	b.n	8005cfe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d008      	beq.n	8005d32 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2204      	movs	r2, #4
 8005d24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e022      	b.n	8005d78 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 020e 	bic.w	r2, r2, #14
 8005d40:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d56:	f003 021c 	and.w	r2, r3, #28
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	2101      	movs	r1, #1
 8005d60:	fa01 f202 	lsl.w	r2, r1, r2
 8005d64:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d005      	beq.n	8005da8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	e029      	b.n	8005dfc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 020e 	bic.w	r2, r2, #14
 8005db6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dcc:	f003 021c 	and.w	r2, r3, #28
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dda:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3
    }
  }
  return status;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	f003 031c 	and.w	r3, r3, #28
 8005e26:	2204      	movs	r2, #4
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d026      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x7a>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d021      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d107      	bne.n	8005e5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0204 	bic.w	r2, r2, #4
 8005e58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	f003 021c 	and.w	r2, r3, #28
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	2104      	movs	r1, #4
 8005e68:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d071      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005e7e:	e06c      	b.n	8005f5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e84:	f003 031c 	and.w	r3, r3, #28
 8005e88:	2202      	movs	r2, #2
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02e      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xec>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d029      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 020a 	bic.w	r2, r2, #10
 8005eba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec8:	f003 021c 	and.w	r2, r3, #28
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed0:	2102      	movs	r1, #2
 8005ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d038      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ef0:	e033      	b.n	8005f5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef6:	f003 031c 	and.w	r3, r3, #28
 8005efa:	2208      	movs	r2, #8
 8005efc:	409a      	lsls	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4013      	ands	r3, r2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02a      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x156>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d025      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 020e 	bic.w	r2, r2, #14
 8005f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f24:	f003 021c 	and.w	r2, r3, #28
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
}
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f72:	b2db      	uxtb	r3, r3
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f92:	f003 021c 	and.w	r2, r3, #28
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	d108      	bne.n	8005fc4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fc2:	e007      	b.n	8005fd4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fee:	e166      	b.n	80062be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8158 	beq.w	80062b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d005      	beq.n	8006020 <HAL_GPIO_Init+0x40>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d130      	bne.n	8006082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	2203      	movs	r2, #3
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	43db      	mvns	r3, r3
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4013      	ands	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006056:	2201      	movs	r2, #1
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4013      	ands	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0201 	and.w	r2, r3, #1
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b03      	cmp	r3, #3
 800608c:	d017      	beq.n	80060be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	2203      	movs	r2, #3
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4013      	ands	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d123      	bne.n	8006112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	08da      	lsrs	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3208      	adds	r2, #8
 80060d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	220f      	movs	r2, #15
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4013      	ands	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	08da      	lsrs	r2, r3, #3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3208      	adds	r2, #8
 800610c:	6939      	ldr	r1, [r7, #16]
 800610e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	2203      	movs	r2, #3
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	43db      	mvns	r3, r3
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 0203 	and.w	r2, r3, #3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80b2 	beq.w	80062b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006154:	4b61      	ldr	r3, [pc, #388]	@ (80062dc <HAL_GPIO_Init+0x2fc>)
 8006156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006158:	4a60      	ldr	r2, [pc, #384]	@ (80062dc <HAL_GPIO_Init+0x2fc>)
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006160:	4b5e      	ldr	r3, [pc, #376]	@ (80062dc <HAL_GPIO_Init+0x2fc>)
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800616c:	4a5c      	ldr	r2, [pc, #368]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	089b      	lsrs	r3, r3, #2
 8006172:	3302      	adds	r3, #2
 8006174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	220f      	movs	r2, #15
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	43db      	mvns	r3, r3
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4013      	ands	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006196:	d02b      	beq.n	80061f0 <HAL_GPIO_Init+0x210>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a52      	ldr	r2, [pc, #328]	@ (80062e4 <HAL_GPIO_Init+0x304>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d025      	beq.n	80061ec <HAL_GPIO_Init+0x20c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a51      	ldr	r2, [pc, #324]	@ (80062e8 <HAL_GPIO_Init+0x308>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d01f      	beq.n	80061e8 <HAL_GPIO_Init+0x208>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a50      	ldr	r2, [pc, #320]	@ (80062ec <HAL_GPIO_Init+0x30c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d019      	beq.n	80061e4 <HAL_GPIO_Init+0x204>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a4f      	ldr	r2, [pc, #316]	@ (80062f0 <HAL_GPIO_Init+0x310>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_GPIO_Init+0x200>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a4e      	ldr	r2, [pc, #312]	@ (80062f4 <HAL_GPIO_Init+0x314>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00d      	beq.n	80061dc <HAL_GPIO_Init+0x1fc>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a4d      	ldr	r2, [pc, #308]	@ (80062f8 <HAL_GPIO_Init+0x318>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <HAL_GPIO_Init+0x1f8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a4c      	ldr	r2, [pc, #304]	@ (80062fc <HAL_GPIO_Init+0x31c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d101      	bne.n	80061d4 <HAL_GPIO_Init+0x1f4>
 80061d0:	2307      	movs	r3, #7
 80061d2:	e00e      	b.n	80061f2 <HAL_GPIO_Init+0x212>
 80061d4:	2308      	movs	r3, #8
 80061d6:	e00c      	b.n	80061f2 <HAL_GPIO_Init+0x212>
 80061d8:	2306      	movs	r3, #6
 80061da:	e00a      	b.n	80061f2 <HAL_GPIO_Init+0x212>
 80061dc:	2305      	movs	r3, #5
 80061de:	e008      	b.n	80061f2 <HAL_GPIO_Init+0x212>
 80061e0:	2304      	movs	r3, #4
 80061e2:	e006      	b.n	80061f2 <HAL_GPIO_Init+0x212>
 80061e4:	2303      	movs	r3, #3
 80061e6:	e004      	b.n	80061f2 <HAL_GPIO_Init+0x212>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e002      	b.n	80061f2 <HAL_GPIO_Init+0x212>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <HAL_GPIO_Init+0x212>
 80061f0:	2300      	movs	r3, #0
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	f002 0203 	and.w	r2, r2, #3
 80061f8:	0092      	lsls	r2, r2, #2
 80061fa:	4093      	lsls	r3, r2
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006202:	4937      	ldr	r1, [pc, #220]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	3302      	adds	r3, #2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006210:	4b3b      	ldr	r3, [pc, #236]	@ (8006300 <HAL_GPIO_Init+0x320>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	43db      	mvns	r3, r3
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4013      	ands	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006234:	4a32      	ldr	r2, [pc, #200]	@ (8006300 <HAL_GPIO_Init+0x320>)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800623a:	4b31      	ldr	r3, [pc, #196]	@ (8006300 <HAL_GPIO_Init+0x320>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	43db      	mvns	r3, r3
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800625e:	4a28      	ldr	r2, [pc, #160]	@ (8006300 <HAL_GPIO_Init+0x320>)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006264:	4b26      	ldr	r3, [pc, #152]	@ (8006300 <HAL_GPIO_Init+0x320>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	43db      	mvns	r3, r3
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4013      	ands	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006288:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <HAL_GPIO_Init+0x320>)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800628e:	4b1c      	ldr	r3, [pc, #112]	@ (8006300 <HAL_GPIO_Init+0x320>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	43db      	mvns	r3, r3
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4013      	ands	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062b2:	4a13      	ldr	r2, [pc, #76]	@ (8006300 <HAL_GPIO_Init+0x320>)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3301      	adds	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f47f ae91 	bne.w	8005ff0 <HAL_GPIO_Init+0x10>
  }
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40021000 	.word	0x40021000
 80062e0:	40010000 	.word	0x40010000
 80062e4:	48000400 	.word	0x48000400
 80062e8:	48000800 	.word	0x48000800
 80062ec:	48000c00 	.word	0x48000c00
 80062f0:	48001000 	.word	0x48001000
 80062f4:	48001400 	.word	0x48001400
 80062f8:	48001800 	.word	0x48001800
 80062fc:	48001c00 	.word	0x48001c00
 8006300:	40010400 	.word	0x40010400

08006304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	887b      	ldrh	r3, [r7, #2]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
 8006320:	e001      	b.n	8006326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	807b      	strh	r3, [r7, #2]
 8006340:	4613      	mov	r3, r2
 8006342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006344:	787b      	ldrb	r3, [r7, #1]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800634a:	887a      	ldrh	r2, [r7, #2]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006350:	e002      	b.n	8006358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006352:	887a      	ldrh	r2, [r7, #2]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e08d      	b.n	8006492 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fd f972 	bl	8003674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2224      	movs	r2, #36	@ 0x24
 8006394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d107      	bne.n	80063de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	e006      	b.n	80063ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80063ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d108      	bne.n	8006406 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	e007      	b.n	8006416 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006414:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691a      	ldr	r2, [r3, #16]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	69d9      	ldr	r1, [r3, #28]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	@ 0x28
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	461a      	mov	r2, r3
 80064a8:	460b      	mov	r3, r1
 80064aa:	817b      	strh	r3, [r7, #10]
 80064ac:	4613      	mov	r3, r2
 80064ae:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b20      	cmp	r3, #32
 80064be:	f040 80ef 	bne.w	80066a0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d0:	d101      	bne.n	80064d6 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
 80064d4:	e0e5      	b.n	80066a2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_I2C_Master_Transmit_DMA+0x48>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0de      	b.n	80066a2 <HAL_I2C_Master_Transmit_DMA+0x206>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2221      	movs	r2, #33	@ 0x21
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2210      	movs	r2, #16
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	893a      	ldrh	r2, [r7, #8]
 800650c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a66      	ldr	r2, [pc, #408]	@ (80066ac <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006512:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4a66      	ldr	r2, [pc, #408]	@ (80066b0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006518:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	2bff      	cmp	r3, #255	@ 0xff
 8006522:	d906      	bls.n	8006532 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	22ff      	movs	r2, #255	@ 0xff
 8006528:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800652a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	e007      	b.n	8006542 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800653c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006540:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006546:	2b00      	cmp	r3, #0
 8006548:	d01a      	beq.n	8006580 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	781a      	ldrb	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006564:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006584:	2b00      	cmp	r3, #0
 8006586:	d074      	beq.n	8006672 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d022      	beq.n	80065d6 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	4a47      	ldr	r2, [pc, #284]	@ (80066b4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8006596:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	4a46      	ldr	r2, [pc, #280]	@ (80066b8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800659e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	2200      	movs	r2, #0
 80065ae:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80065c0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80065c6:	f7ff fb3f 	bl	8005c48 <HAL_DMA_Start_IT>
 80065ca:	4603      	mov	r3, r0
 80065cc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d13a      	bne.n	800664a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80065d4:	e013      	b.n	80065fe <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e051      	b.n	80066a2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006602:	b2db      	uxtb	r3, r3
 8006604:	3301      	adds	r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	8979      	ldrh	r1, [r7, #10]
 800660a:	4b2c      	ldr	r3, [pc, #176]	@ (80066bc <HAL_I2C_Master_Transmit_DMA+0x220>)
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f002 f8f9 	bl	8008808 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006630:	2110      	movs	r1, #16
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f002 f91a 	bl	800886c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e028      	b.n	800669c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665e:	f043 0210 	orr.w	r2, r3, #16
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e017      	b.n	80066a2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4a12      	ldr	r2, [pc, #72]	@ (80066c0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8006676:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	8979      	ldrh	r1, [r7, #10]
 800667e:	4b0f      	ldr	r3, [pc, #60]	@ (80066bc <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f002 f8be 	bl	8008808 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006694:	2101      	movs	r1, #1
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f002 f8e8 	bl	800886c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e000      	b.n	80066a2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
  }
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	ffff0000 	.word	0xffff0000
 80066b0:	080072d1 	.word	0x080072d1
 80066b4:	080082ff 	.word	0x080082ff
 80066b8:	0800842b 	.word	0x0800842b
 80066bc:	80002000 	.word	0x80002000
 80066c0:	08006e93 	.word	0x08006e93

080066c4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	461a      	mov	r2, r3
 80066d0:	460b      	mov	r3, r1
 80066d2:	817b      	strh	r3, [r7, #10]
 80066d4:	4613      	mov	r3, r2
 80066d6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	f040 80cd 	bne.w	8006880 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066f4:	d101      	bne.n	80066fa <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80066f6:	2302      	movs	r3, #2
 80066f8:	e0c3      	b.n	8006882 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_I2C_Master_Receive_DMA+0x44>
 8006704:	2302      	movs	r3, #2
 8006706:	e0bc      	b.n	8006882 <HAL_I2C_Master_Receive_DMA+0x1be>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2222      	movs	r2, #34	@ 0x22
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2210      	movs	r2, #16
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	893a      	ldrh	r2, [r7, #8]
 8006730:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a55      	ldr	r2, [pc, #340]	@ (800688c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8006736:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4a55      	ldr	r2, [pc, #340]	@ (8006890 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800673c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	2bff      	cmp	r3, #255	@ 0xff
 8006746:	d906      	bls.n	8006756 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	22ff      	movs	r2, #255	@ 0xff
 800674c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800674e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e007      	b.n	8006766 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006760:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006764:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676a:	2b00      	cmp	r3, #0
 800676c:	d070      	beq.n	8006850 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d020      	beq.n	80067b8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677a:	4a46      	ldr	r2, [pc, #280]	@ (8006894 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800677c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006782:	4a45      	ldr	r2, [pc, #276]	@ (8006898 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8006784:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006792:	2200      	movs	r2, #0
 8006794:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3324      	adds	r3, #36	@ 0x24
 80067a0:	4619      	mov	r1, r3
 80067a2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80067a8:	f7ff fa4e 	bl	8005c48 <HAL_DMA_Start_IT>
 80067ac:	4603      	mov	r3, r0
 80067ae:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80067b0:	7cfb      	ldrb	r3, [r7, #19]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d138      	bne.n	8006828 <HAL_I2C_Master_Receive_DMA+0x164>
 80067b6:	e013      	b.n	80067e0 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e050      	b.n	8006882 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	8979      	ldrh	r1, [r7, #10]
 80067e8:	4b2c      	ldr	r3, [pc, #176]	@ (800689c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f002 f80a 	bl	8008808 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800680e:	2110      	movs	r1, #16
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f002 f82b 	bl	800886c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e029      	b.n	800687c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683c:	f043 0210 	orr.w	r2, r3, #16
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e018      	b.n	8006882 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a13      	ldr	r2, [pc, #76]	@ (80068a0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8006854:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800685a:	b2da      	uxtb	r2, r3
 800685c:	8979      	ldrh	r1, [r7, #10]
 800685e:	4b0f      	ldr	r3, [pc, #60]	@ (800689c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f001 ffce 	bl	8008808 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006874:	2102      	movs	r1, #2
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f001 fff8 	bl	800886c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	e000      	b.n	8006882 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8006880:	2302      	movs	r3, #2
  }
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	ffff0000 	.word	0xffff0000
 8006890:	080072d1 	.word	0x080072d1
 8006894:	08008395 	.word	0x08008395
 8006898:	0800842b 	.word	0x0800842b
 800689c:	80002400 	.word	0x80002400
 80068a0:	08006e93 	.word	0x08006e93

080068a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	4608      	mov	r0, r1
 80068ae:	4611      	mov	r1, r2
 80068b0:	461a      	mov	r2, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	817b      	strh	r3, [r7, #10]
 80068b6:	460b      	mov	r3, r1
 80068b8:	813b      	strh	r3, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	f040 80f9 	bne.w	8006abe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <HAL_I2C_Mem_Write+0x34>
 80068d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0ed      	b.n	8006ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_I2C_Mem_Write+0x4e>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e0e6      	b.n	8006ac0 <HAL_I2C_Mem_Write+0x21c>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068fa:	f7fd fb0b 	bl	8003f14 <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2319      	movs	r3, #25
 8006906:	2201      	movs	r2, #1
 8006908:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f001 fdc1 	bl	8008494 <I2C_WaitOnFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0d1      	b.n	8006ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2221      	movs	r2, #33	@ 0x21
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2240      	movs	r2, #64	@ 0x40
 8006928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a3a      	ldr	r2, [r7, #32]
 8006936:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800693c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006944:	88f8      	ldrh	r0, [r7, #6]
 8006946:	893a      	ldrh	r2, [r7, #8]
 8006948:	8979      	ldrh	r1, [r7, #10]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	4603      	mov	r3, r0
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 ffa3 	bl	80078a0 <I2C_RequestMemoryWrite>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0a9      	b.n	8006ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	2bff      	cmp	r3, #255	@ 0xff
 8006974:	d90e      	bls.n	8006994 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	22ff      	movs	r2, #255	@ 0xff
 800697a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006980:	b2da      	uxtb	r2, r3
 8006982:	8979      	ldrh	r1, [r7, #10]
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f001 ff3b 	bl	8008808 <I2C_TransferConfig>
 8006992:	e00f      	b.n	80069b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	8979      	ldrh	r1, [r7, #10]
 80069a6:	2300      	movs	r3, #0
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f001 ff2a 	bl	8008808 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f001 fdba 	bl	8008532 <I2C_WaitOnTXISFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e07b      	b.n	8006ac0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d034      	beq.n	8006a6c <HAL_I2C_Mem_Write+0x1c8>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d130      	bne.n	8006a6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a10:	2200      	movs	r2, #0
 8006a12:	2180      	movs	r1, #128	@ 0x80
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f001 fd3d 	bl	8008494 <I2C_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e04d      	b.n	8006ac0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2bff      	cmp	r3, #255	@ 0xff
 8006a2c:	d90e      	bls.n	8006a4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	22ff      	movs	r2, #255	@ 0xff
 8006a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	8979      	ldrh	r1, [r7, #10]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f001 fedf 	bl	8008808 <I2C_TransferConfig>
 8006a4a:	e00f      	b.n	8006a6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	8979      	ldrh	r1, [r7, #10]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f001 fece 	bl	8008808 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d19e      	bne.n	80069b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 fda0 	bl	80085c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e01a      	b.n	8006ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6859      	ldr	r1, [r3, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac8 <HAL_I2C_Mem_Write+0x224>)
 8006a9e:	400b      	ands	r3, r1
 8006aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e000      	b.n	8006ac0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006abe:	2302      	movs	r3, #2
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	fe00e800 	.word	0xfe00e800

08006acc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	817b      	strh	r3, [r7, #10]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	813b      	strh	r3, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	f040 80fd 	bne.w	8006cee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_I2C_Mem_Read+0x34>
 8006afa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d105      	bne.n	8006b0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0f1      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <HAL_I2C_Mem_Read+0x4e>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e0ea      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x224>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b22:	f7fd f9f7 	bl	8003f14 <HAL_GetTick>
 8006b26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2319      	movs	r3, #25
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f001 fcad 	bl	8008494 <I2C_WaitOnFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e0d5      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2222      	movs	r2, #34	@ 0x22
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2240      	movs	r2, #64	@ 0x40
 8006b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a3a      	ldr	r2, [r7, #32]
 8006b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b6c:	88f8      	ldrh	r0, [r7, #6]
 8006b6e:	893a      	ldrh	r2, [r7, #8]
 8006b70:	8979      	ldrh	r1, [r7, #10]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fee3 	bl	8007948 <I2C_RequestMemoryRead>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0ad      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2bff      	cmp	r3, #255	@ 0xff
 8006b9c:	d90e      	bls.n	8006bbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	22ff      	movs	r2, #255	@ 0xff
 8006ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	8979      	ldrh	r1, [r7, #10]
 8006bac:	4b52      	ldr	r3, [pc, #328]	@ (8006cf8 <HAL_I2C_Mem_Read+0x22c>)
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f001 fe27 	bl	8008808 <I2C_TransferConfig>
 8006bba:	e00f      	b.n	8006bdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	8979      	ldrh	r1, [r7, #10]
 8006bce:	4b4a      	ldr	r3, [pc, #296]	@ (8006cf8 <HAL_I2C_Mem_Read+0x22c>)
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f001 fe16 	bl	8008808 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	2200      	movs	r2, #0
 8006be4:	2104      	movs	r1, #4
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f001 fc54 	bl	8008494 <I2C_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e07c      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d034      	beq.n	8006c9c <HAL_I2C_Mem_Read+0x1d0>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d130      	bne.n	8006c9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	2200      	movs	r2, #0
 8006c42:	2180      	movs	r1, #128	@ 0x80
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f001 fc25 	bl	8008494 <I2C_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e04d      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2bff      	cmp	r3, #255	@ 0xff
 8006c5c:	d90e      	bls.n	8006c7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22ff      	movs	r2, #255	@ 0xff
 8006c62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	8979      	ldrh	r1, [r7, #10]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f001 fdc7 	bl	8008808 <I2C_TransferConfig>
 8006c7a:	e00f      	b.n	8006c9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	8979      	ldrh	r1, [r7, #10]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f001 fdb6 	bl	8008808 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d19a      	bne.n	8006bdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f001 fc88 	bl	80085c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e01a      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6859      	ldr	r1, [r3, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <HAL_I2C_Mem_Read+0x230>)
 8006cce:	400b      	ands	r3, r1
 8006cd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e000      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006cee:	2302      	movs	r3, #2
  }
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	80002400 	.word	0x80002400
 8006cfc:	fe00e800 	.word	0xfe00e800

08006d00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
  }
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00f      	beq.n	8006d76 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d64:	f043 0201 	orr.w	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00f      	beq.n	8006da0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8e:	f043 0208 	orr.w	r2, r3, #8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00f      	beq.n	8006dca <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db8:	f043 0202 	orr.w	r2, r3, #2
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dc8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 030b 	and.w	r3, r3, #11
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006dda:	68f9      	ldr	r1, [r7, #12]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 f953 	bl	8008088 <I2C_ITError>
  }
}
 8006de2:	bf00      	nop
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b088      	sub	sp, #32
 8006e96:	af02      	add	r7, sp, #8
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <I2C_Master_ISR_IT+0x1e>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e113      	b.n	80070d8 <I2C_Master_ISR_IT+0x246>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f003 0310 	and.w	r3, r3, #16
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d012      	beq.n	8006ee8 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00d      	beq.n	8006ee8 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2210      	movs	r2, #16
 8006ed2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed8:	f043 0204 	orr.w	r2, r3, #4
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f001 f9e8 	bl	80082b6 <I2C_Flush_TXDR>
 8006ee6:	e0e4      	b.n	80070b2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d022      	beq.n	8006f38 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01d      	beq.n	8006f38 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f023 0304 	bic.w	r3, r3, #4
 8006f02:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f36:	e0bc      	b.n	80070b2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d128      	bne.n	8006f94 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d023      	beq.n	8006f94 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01e      	beq.n	8006f94 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80a8 	beq.w	80070b2 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006f92:	e08e      	b.n	80070b2 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d05c      	beq.n	8007058 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d057      	beq.n	8007058 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d040      	beq.n	8007034 <I2C_Master_ISR_IT+0x1a2>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d13c      	bne.n	8007034 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2bff      	cmp	r3, #255	@ 0xff
 8006fd0:	d90e      	bls.n	8006ff0 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	22ff      	movs	r2, #255	@ 0xff
 8006fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	8a79      	ldrh	r1, [r7, #18]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f001 fc0d 	bl	8008808 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fee:	e032      	b.n	8007056 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007002:	d00b      	beq.n	800701c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007008:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800700e:	8a79      	ldrh	r1, [r7, #18]
 8007010:	2000      	movs	r0, #0
 8007012:	9000      	str	r0, [sp, #0]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 fbf7 	bl	8008808 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800701a:	e01c      	b.n	8007056 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007020:	b2da      	uxtb	r2, r3
 8007022:	8a79      	ldrh	r1, [r7, #18]
 8007024:	2300      	movs	r3, #0
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f001 fbeb 	bl	8008808 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007032:	e010      	b.n	8007056 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800703e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007042:	d003      	beq.n	800704c <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fd57 	bl	8007af8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800704a:	e032      	b.n	80070b2 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800704c:	2140      	movs	r1, #64	@ 0x40
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 f81a 	bl	8008088 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007054:	e02d      	b.n	80070b2 <I2C_Master_ISR_IT+0x220>
 8007056:	e02c      	b.n	80070b2 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d027      	beq.n	80070b2 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007068:	2b00      	cmp	r3, #0
 800706a:	d022      	beq.n	80070b2 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d119      	bne.n	80070aa <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007084:	d015      	beq.n	80070b2 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800708e:	d108      	bne.n	80070a2 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800709e:	605a      	str	r2, [r3, #4]
 80070a0:	e007      	b.n	80070b2 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 fd28 	bl	8007af8 <I2C_ITMasterSeqCplt>
 80070a8:	e003      	b.n	80070b2 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80070aa:	2140      	movs	r1, #64	@ 0x40
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 ffeb 	bl	8008088 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80070c6:	6979      	ldr	r1, [r7, #20]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fdaf 	bl	8007c2c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <I2C_Slave_ISR_IT+0x24>
 8007100:	2302      	movs	r3, #2
 8007102:	e0e1      	b.n	80072c8 <I2C_Slave_ISR_IT+0x1e8>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007120:	6939      	ldr	r1, [r7, #16]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 fe4a 	bl	8007dbc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b00      	cmp	r3, #0
 8007130:	d04b      	beq.n	80071ca <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007138:	2b00      	cmp	r3, #0
 800713a:	d046      	beq.n	80071ca <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d128      	bne.n	8007198 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b28      	cmp	r3, #40	@ 0x28
 8007150:	d108      	bne.n	8007164 <I2C_Slave_ISR_IT+0x84>
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007158:	d104      	bne.n	8007164 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800715a:	6939      	ldr	r1, [r7, #16]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 ff3f 	bl	8007fe0 <I2C_ITListenCplt>
 8007162:	e031      	b.n	80071c8 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b29      	cmp	r3, #41	@ 0x29
 800716e:	d10e      	bne.n	800718e <I2C_Slave_ISR_IT+0xae>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007176:	d00a      	beq.n	800718e <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2210      	movs	r2, #16
 800717e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f001 f898 	bl	80082b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fcf3 	bl	8007b72 <I2C_ITSlaveSeqCplt>
 800718c:	e01c      	b.n	80071c8 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2210      	movs	r2, #16
 8007194:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007196:	e08f      	b.n	80072b8 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2210      	movs	r2, #16
 800719e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a4:	f043 0204 	orr.w	r2, r3, #4
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <I2C_Slave_ISR_IT+0xda>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071b8:	d17e      	bne.n	80072b8 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071be:	4619      	mov	r1, r3
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 ff61 	bl	8008088 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80071c6:	e077      	b.n	80072b8 <I2C_Slave_ISR_IT+0x1d8>
 80071c8:	e076      	b.n	80072b8 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d02f      	beq.n	8007234 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d02a      	beq.n	8007234 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d018      	beq.n	800721a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007210:	b29b      	uxth	r3, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d14b      	bne.n	80072bc <I2C_Slave_ISR_IT+0x1dc>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800722a:	d047      	beq.n	80072bc <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fca0 	bl	8007b72 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007232:	e043      	b.n	80072bc <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007248:	6939      	ldr	r1, [r7, #16]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 fbd0 	bl	80079f0 <I2C_ITAddrCplt>
 8007250:	e035      	b.n	80072be <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d030      	beq.n	80072be <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007262:	2b00      	cmp	r3, #0
 8007264:	d02b      	beq.n	80072be <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d018      	beq.n	80072a2 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	851a      	strh	r2, [r3, #40]	@ 0x28
 80072a0:	e00d      	b.n	80072be <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072a8:	d002      	beq.n	80072b0 <I2C_Slave_ISR_IT+0x1d0>
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 fc5e 	bl	8007b72 <I2C_ITSlaveSeqCplt>
 80072b6:	e002      	b.n	80072be <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80072b8:	bf00      	nop
 80072ba:	e000      	b.n	80072be <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80072bc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <I2C_Master_ISR_DMA+0x1a>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e0d9      	b.n	800749e <I2C_Master_ISR_DMA+0x1ce>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d016      	beq.n	800732a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007302:	2b00      	cmp	r3, #0
 8007304:	d011      	beq.n	800732a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2210      	movs	r2, #16
 800730c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	f043 0204 	orr.w	r2, r3, #4
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800731a:	2120      	movs	r1, #32
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f001 faa5 	bl	800886c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 ffc7 	bl	80082b6 <I2C_Flush_TXDR>
 8007328:	e0b4      	b.n	8007494 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007330:	2b00      	cmp	r3, #0
 8007332:	d071      	beq.n	8007418 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800733a:	2b00      	cmp	r3, #0
 800733c:	d06c      	beq.n	8007418 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800734c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d04e      	beq.n	80073f6 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b29b      	uxth	r3, r3
 8007360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007364:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	2bff      	cmp	r3, #255	@ 0xff
 800736e:	d906      	bls.n	800737e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	22ff      	movs	r2, #255	@ 0xff
 8007374:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007376:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	e010      	b.n	80073a0 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007390:	d003      	beq.n	800739a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	e002      	b.n	80073a0 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800739a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800739e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	8a79      	ldrh	r1, [r7, #18]
 80073a8:	2300      	movs	r3, #0
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f001 fa2a 	bl	8008808 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b22      	cmp	r3, #34	@ 0x22
 80073d0:	d108      	bne.n	80073e4 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80073e2:	e057      	b.n	8007494 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073f2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80073f4:	e04e      	b.n	8007494 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007400:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007404:	d003      	beq.n	800740e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fb76 	bl	8007af8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800740c:	e042      	b.n	8007494 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800740e:	2140      	movs	r1, #64	@ 0x40
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fe39 	bl	8008088 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007416:	e03d      	b.n	8007494 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d028      	beq.n	8007474 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007428:	2b00      	cmp	r3, #0
 800742a:	d023      	beq.n	8007474 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d119      	bne.n	800746a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007444:	d025      	beq.n	8007492 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800744e:	d108      	bne.n	8007462 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800745e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007460:	e017      	b.n	8007492 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fb48 	bl	8007af8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007468:	e013      	b.n	8007492 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800746a:	2140      	movs	r1, #64	@ 0x40
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fe0b 	bl	8008088 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007472:	e00e      	b.n	8007492 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fbce 	bl	8007c2c <I2C_ITMasterCplt>
 8007490:	e000      	b.n	8007494 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8007492:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80074b4:	4b8d      	ldr	r3, [pc, #564]	@ (80076ec <I2C_Mem_ISR_DMA+0x244>)
 80074b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <I2C_Mem_ISR_DMA+0x1e>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e10e      	b.n	80076e4 <I2C_Mem_ISR_DMA+0x23c>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d016      	beq.n	8007506 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d011      	beq.n	8007506 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2210      	movs	r2, #16
 80074e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ee:	f043 0204 	orr.w	r2, r3, #4
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80074f6:	2120      	movs	r1, #32
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f001 f9b7 	bl	800886c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 fed9 	bl	80082b6 <I2C_Flush_TXDR>
 8007504:	e0e9      	b.n	80076da <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00e      	beq.n	800752e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007522:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f04f 32ff 	mov.w	r2, #4294967295
 800752a:	651a      	str	r2, [r3, #80]	@ 0x50
 800752c:	e0d5      	b.n	80076da <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05f      	beq.n	80075f8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800753e:	2b00      	cmp	r3, #0
 8007540:	d05a      	beq.n	80075f8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007542:	2101      	movs	r1, #1
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f001 fa15 	bl	8008974 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800754a:	2110      	movs	r1, #16
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f001 f98d 	bl	800886c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d048      	beq.n	80075ee <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007560:	b29b      	uxth	r3, r3
 8007562:	2bff      	cmp	r3, #255	@ 0xff
 8007564:	d910      	bls.n	8007588 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	22ff      	movs	r2, #255	@ 0xff
 800756a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007570:	b299      	uxth	r1, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007576:	b2da      	uxtb	r2, r3
 8007578:	2300      	movs	r3, #0
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 f941 	bl	8008808 <I2C_TransferConfig>
 8007586:	e011      	b.n	80075ac <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800758c:	b29a      	uxth	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007596:	b299      	uxth	r1, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800759c:	b2da      	uxtb	r2, r3
 800759e:	2300      	movs	r3, #0
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f001 f92e 	bl	8008808 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b22      	cmp	r3, #34	@ 0x22
 80075c8:	d108      	bne.n	80075dc <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80075da:	e07e      	b.n	80076da <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80075ec:	e075      	b.n	80076da <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80075ee:	2140      	movs	r1, #64	@ 0x40
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fd49 	bl	8008088 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80075f6:	e070      	b.n	80076da <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d05d      	beq.n	80076be <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007608:	2b00      	cmp	r3, #0
 800760a:	d058      	beq.n	80076be <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800760c:	2101      	movs	r1, #1
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f001 f9b0 	bl	8008974 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007614:	2110      	movs	r1, #16
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f001 f928 	bl	800886c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b22      	cmp	r3, #34	@ 0x22
 8007626:	d101      	bne.n	800762c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8007628:	4b31      	ldr	r3, [pc, #196]	@ (80076f0 <I2C_Mem_ISR_DMA+0x248>)
 800762a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	2bff      	cmp	r3, #255	@ 0xff
 8007634:	d910      	bls.n	8007658 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	22ff      	movs	r2, #255	@ 0xff
 800763a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007640:	b299      	uxth	r1, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007646:	b2da      	uxtb	r2, r3
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f001 f8d9 	bl	8008808 <I2C_TransferConfig>
 8007656:	e011      	b.n	800767c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007666:	b299      	uxth	r1, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800766c:	b2da      	uxtb	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f001 f8c6 	bl	8008808 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b22      	cmp	r3, #34	@ 0x22
 8007698:	d108      	bne.n	80076ac <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076a8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076aa:	e016      	b.n	80076da <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076ba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076bc:	e00d      	b.n	80076da <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d008      	beq.n	80076da <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 faa9 	bl	8007c2c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	80002000 	.word	0x80002000
 80076f0:	80002400 	.word	0x80002400

080076f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <I2C_Slave_ISR_DMA+0x24>
 8007714:	2302      	movs	r3, #2
 8007716:	e0bf      	b.n	8007898 <I2C_Slave_ISR_DMA+0x1a4>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d008      	beq.n	800773c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fb40 	bl	8007dbc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8095 	beq.w	8007872 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 808f 	beq.w	8007872 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d104      	bne.n	8007768 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007764:	2b00      	cmp	r3, #0
 8007766:	d07d      	beq.n	8007864 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00c      	beq.n	800778a <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8007786:	2301      	movs	r3, #1
 8007788:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00c      	beq.n	80077ac <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d007      	beq.n	80077ac <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80077a8:	2301      	movs	r3, #1
 80077aa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d128      	bne.n	8007804 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b28      	cmp	r3, #40	@ 0x28
 80077bc:	d108      	bne.n	80077d0 <I2C_Slave_ISR_DMA+0xdc>
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077c4:	d104      	bne.n	80077d0 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 fc09 	bl	8007fe0 <I2C_ITListenCplt>
 80077ce:	e048      	b.n	8007862 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b29      	cmp	r3, #41	@ 0x29
 80077da:	d10e      	bne.n	80077fa <I2C_Slave_ISR_DMA+0x106>
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80077e2:	d00a      	beq.n	80077fa <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2210      	movs	r2, #16
 80077ea:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 fd62 	bl	80082b6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 f9bd 	bl	8007b72 <I2C_ITSlaveSeqCplt>
 80077f8:	e033      	b.n	8007862 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2210      	movs	r2, #16
 8007800:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007802:	e034      	b.n	800786e <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2210      	movs	r2, #16
 800780a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007810:	f043 0204 	orr.w	r2, r3, #4
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800781e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <I2C_Slave_ISR_DMA+0x13a>
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800782c:	d11f      	bne.n	800786e <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	2b21      	cmp	r3, #33	@ 0x21
 8007832:	d002      	beq.n	800783a <I2C_Slave_ISR_DMA+0x146>
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	2b29      	cmp	r3, #41	@ 0x29
 8007838:	d103      	bne.n	8007842 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2221      	movs	r2, #33	@ 0x21
 800783e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007840:	e008      	b.n	8007854 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	2b22      	cmp	r3, #34	@ 0x22
 8007846:	d002      	beq.n	800784e <I2C_Slave_ISR_DMA+0x15a>
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	2b2a      	cmp	r3, #42	@ 0x2a
 800784c:	d102      	bne.n	8007854 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2222      	movs	r2, #34	@ 0x22
 8007852:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007858:	4619      	mov	r1, r3
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fc14 	bl	8008088 <I2C_ITError>
      if (treatdmanack == 1U)
 8007860:	e005      	b.n	800786e <I2C_Slave_ISR_DMA+0x17a>
 8007862:	e004      	b.n	800786e <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2210      	movs	r2, #16
 800786a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800786c:	e00f      	b.n	800788e <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800786e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007870:	e00d      	b.n	800788e <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d008      	beq.n	800788e <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 f8b1 	bl	80079f0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	461a      	mov	r2, r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	817b      	strh	r3, [r7, #10]
 80078b2:	460b      	mov	r3, r1
 80078b4:	813b      	strh	r3, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	8979      	ldrh	r1, [r7, #10]
 80078c0:	4b20      	ldr	r3, [pc, #128]	@ (8007944 <I2C_RequestMemoryWrite+0xa4>)
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 ff9d 	bl	8008808 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	69b9      	ldr	r1, [r7, #24]
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fe2d 	bl	8008532 <I2C_WaitOnTXISFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e02c      	b.n	800793c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d105      	bne.n	80078f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078e8:	893b      	ldrh	r3, [r7, #8]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80078f2:	e015      	b.n	8007920 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80078f4:	893b      	ldrh	r3, [r7, #8]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	69b9      	ldr	r1, [r7, #24]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 fe13 	bl	8008532 <I2C_WaitOnTXISFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e012      	b.n	800793c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007916:	893b      	ldrh	r3, [r7, #8]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	2200      	movs	r2, #0
 8007928:	2180      	movs	r1, #128	@ 0x80
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fdb2 	bl	8008494 <I2C_WaitOnFlagUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	80002000 	.word	0x80002000

08007948 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4603      	mov	r3, r0
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	460b      	mov	r3, r1
 800795c:	813b      	strh	r3, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	8979      	ldrh	r1, [r7, #10]
 8007968:	4b20      	ldr	r3, [pc, #128]	@ (80079ec <I2C_RequestMemoryRead+0xa4>)
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	2300      	movs	r3, #0
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 ff4a 	bl	8008808 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	69b9      	ldr	r1, [r7, #24]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fdda 	bl	8008532 <I2C_WaitOnTXISFlagUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e02c      	b.n	80079e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007988:	88fb      	ldrh	r3, [r7, #6]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d105      	bne.n	800799a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800798e:	893b      	ldrh	r3, [r7, #8]
 8007990:	b2da      	uxtb	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	629a      	str	r2, [r3, #40]	@ 0x28
 8007998:	e015      	b.n	80079c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800799a:	893b      	ldrh	r3, [r7, #8]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	b29b      	uxth	r3, r3
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	69b9      	ldr	r1, [r7, #24]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fdc0 	bl	8008532 <I2C_WaitOnTXISFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e012      	b.n	80079e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079bc:	893b      	ldrh	r3, [r7, #8]
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2200      	movs	r2, #0
 80079ce:	2140      	movs	r1, #64	@ 0x40
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fd5f 	bl	8008494 <I2C_WaitOnFlagUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e000      	b.n	80079e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	80002000 	.word	0x80002000

080079f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a06:	2b28      	cmp	r3, #40	@ 0x28
 8007a08:	d16a      	bne.n	8007ae0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	0c1b      	lsrs	r3, r3, #16
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007a28:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a36:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007a44:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d138      	bne.n	8007ac0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007a4e:	897b      	ldrh	r3, [r7, #10]
 8007a50:	09db      	lsrs	r3, r3, #7
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	89bb      	ldrh	r3, [r7, #12]
 8007a56:	4053      	eors	r3, r2
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	f003 0306 	and.w	r3, r3, #6
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d11c      	bne.n	8007a9c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007a62:	897b      	ldrh	r3, [r7, #10]
 8007a64:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d13b      	bne.n	8007af0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2208      	movs	r2, #8
 8007a84:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007a8e:	89ba      	ldrh	r2, [r7, #12]
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff f9bc 	bl	8006e12 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007a9a:	e029      	b.n	8007af0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007a9c:	893b      	ldrh	r3, [r7, #8]
 8007a9e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 ff65 	bl	8008974 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ab2:	89ba      	ldrh	r2, [r7, #12]
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff f9aa 	bl	8006e12 <HAL_I2C_AddrCallback>
}
 8007abe:	e017      	b.n	8007af0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007ac0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 ff55 	bl	8008974 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ad2:	89ba      	ldrh	r2, [r7, #12]
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff f99a 	bl	8006e12 <HAL_I2C_AddrCallback>
}
 8007ade:	e007      	b.n	8007af0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b21      	cmp	r3, #33	@ 0x21
 8007b12:	d115      	bne.n	8007b40 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2211      	movs	r2, #17
 8007b20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b28:	2101      	movs	r1, #1
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 ff22 	bl	8008974 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fb fc83 	bl	8003444 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b3e:	e014      	b.n	8007b6a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2212      	movs	r2, #18
 8007b4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007b54:	2102      	movs	r1, #2
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 ff0c 	bl	8008974 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7fb fc7d 	bl	8003464 <HAL_I2C_MasterRxCpltCallback>
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e00c      	b.n	8007bc0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d007      	beq.n	8007bc0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bbe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b29      	cmp	r3, #41	@ 0x29
 8007bca:	d112      	bne.n	8007bf2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2228      	movs	r2, #40	@ 0x28
 8007bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2221      	movs	r2, #33	@ 0x21
 8007bd8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007bda:	2101      	movs	r1, #1
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fec9 	bl	8008974 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff f8fd 	bl	8006dea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007bf0:	e017      	b.n	8007c22 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bfc:	d111      	bne.n	8007c22 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2228      	movs	r2, #40	@ 0x28
 8007c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2222      	movs	r2, #34	@ 0x22
 8007c0a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007c0c:	2102      	movs	r1, #2
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 feb0 	bl	8008974 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff f8ee 	bl	8006dfe <HAL_I2C_SlaveRxCpltCallback>
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b21      	cmp	r3, #33	@ 0x21
 8007c4c:	d107      	bne.n	8007c5e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c4e:	2101      	movs	r1, #1
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fe8f 	bl	8008974 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2211      	movs	r2, #17
 8007c5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c5c:	e00c      	b.n	8007c78 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b22      	cmp	r3, #34	@ 0x22
 8007c68:	d106      	bne.n	8007c78 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007c6a:	2102      	movs	r1, #2
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fe81 	bl	8008974 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2212      	movs	r2, #18
 8007c76:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6859      	ldr	r1, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b4c      	ldr	r3, [pc, #304]	@ (8007db4 <I2C_ITMasterCplt+0x188>)
 8007c84:	400b      	ands	r3, r1
 8007c86:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a49      	ldr	r2, [pc, #292]	@ (8007db8 <I2C_ITMasterCplt+0x18c>)
 8007c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2210      	movs	r2, #16
 8007ca4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007caa:	f043 0204 	orr.w	r2, r3, #4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b60      	cmp	r3, #96	@ 0x60
 8007cbc:	d10a      	bne.n	8007cd4 <I2C_ITMasterCplt+0xa8>
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f003 0304 	and.w	r3, r3, #4
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 faee 	bl	80082b6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cde:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b60      	cmp	r3, #96	@ 0x60
 8007cea:	d002      	beq.n	8007cf2 <I2C_ITMasterCplt+0xc6>
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d006      	beq.n	8007d00 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f9c5 	bl	8008088 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007cfe:	e054      	b.n	8007daa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b21      	cmp	r3, #33	@ 0x21
 8007d0a:	d124      	bne.n	8007d56 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b40      	cmp	r3, #64	@ 0x40
 8007d24:	d10b      	bne.n	8007d3e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff f883 	bl	8006e42 <HAL_I2C_MemTxCpltCallback>
}
 8007d3c:	e035      	b.n	8007daa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fb fb78 	bl	8003444 <HAL_I2C_MasterTxCpltCallback>
}
 8007d54:	e029      	b.n	8007daa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b22      	cmp	r3, #34	@ 0x22
 8007d60:	d123      	bne.n	8007daa <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2220      	movs	r2, #32
 8007d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b40      	cmp	r3, #64	@ 0x40
 8007d7a:	d10b      	bne.n	8007d94 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff f862 	bl	8006e56 <HAL_I2C_MemRxCpltCallback>
}
 8007d92:	e00a      	b.n	8007daa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7fb fb5d 	bl	8003464 <HAL_I2C_MasterRxCpltCallback>
}
 8007daa:	bf00      	nop
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	fe00e800 	.word	0xfe00e800
 8007db8:	ffff0000 	.word	0xffff0000

08007dbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2220      	movs	r2, #32
 8007de0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	2b21      	cmp	r3, #33	@ 0x21
 8007de6:	d002      	beq.n	8007dee <I2C_ITSlaveCplt+0x32>
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b29      	cmp	r3, #41	@ 0x29
 8007dec:	d108      	bne.n	8007e00 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007dee:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fdbe 	bl	8008974 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2221      	movs	r2, #33	@ 0x21
 8007dfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8007dfe:	e019      	b.n	8007e34 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b22      	cmp	r3, #34	@ 0x22
 8007e04:	d002      	beq.n	8007e0c <I2C_ITSlaveCplt+0x50>
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e0a:	d108      	bne.n	8007e1e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007e0c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fdaf 	bl	8008974 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2222      	movs	r2, #34	@ 0x22
 8007e1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e1c:	e00a      	b.n	8007e34 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	2b28      	cmp	r3, #40	@ 0x28
 8007e22:	d107      	bne.n	8007e34 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007e24:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fda3 	bl	8008974 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b62      	ldr	r3, [pc, #392]	@ (8007fd8 <I2C_ITSlaveCplt+0x21c>)
 8007e50:	400b      	ands	r3, r1
 8007e52:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fa2e 	bl	80082b6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d013      	beq.n	8007e8c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e72:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01f      	beq.n	8007ebc <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e8a:	e017      	b.n	8007ebc <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d012      	beq.n	8007ebc <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ea4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d006      	beq.n	8007ebc <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d020      	beq.n	8007f08 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f023 0304 	bic.w	r3, r3, #4
 8007ecc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d010      	beq.n	8007f56 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f8a4 	bl	8008088 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b28      	cmp	r3, #40	@ 0x28
 8007f4a:	d141      	bne.n	8007fd0 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007f4c:	6979      	ldr	r1, [r7, #20]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f846 	bl	8007fe0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f54:	e03c      	b.n	8007fd0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f5e:	d014      	beq.n	8007f8a <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fe06 	bl	8007b72 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1c      	ldr	r2, [pc, #112]	@ (8007fdc <I2C_ITSlaveCplt+0x220>)
 8007f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fe ff53 	bl	8006e2e <HAL_I2C_ListenCpltCallback>
}
 8007f88:	e022      	b.n	8007fd0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b22      	cmp	r3, #34	@ 0x22
 8007f94:	d10e      	bne.n	8007fb4 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7fe ff26 	bl	8006dfe <HAL_I2C_SlaveRxCpltCallback>
}
 8007fb2:	e00d      	b.n	8007fd0 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7fe ff0d 	bl	8006dea <HAL_I2C_SlaveTxCpltCallback>
}
 8007fd0:	bf00      	nop
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	fe00e800 	.word	0xfe00e800
 8007fdc:	ffff0000 	.word	0xffff0000

08007fe0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a25      	ldr	r2, [pc, #148]	@ (8008084 <I2C_ITListenCplt+0xa4>)
 8007fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d022      	beq.n	800805c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d012      	beq.n	800805c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008054:	f043 0204 	orr.w	r2, r3, #4
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800805c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fc87 	bl	8008974 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2210      	movs	r2, #16
 800806c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fe fed9 	bl	8006e2e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	ffff0000 	.word	0xffff0000

08008088 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008098:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a6d      	ldr	r2, [pc, #436]	@ (800825c <I2C_ITError+0x1d4>)
 80080a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	2b28      	cmp	r3, #40	@ 0x28
 80080be:	d005      	beq.n	80080cc <I2C_ITError+0x44>
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	2b29      	cmp	r3, #41	@ 0x29
 80080c4:	d002      	beq.n	80080cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ca:	d10b      	bne.n	80080e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80080cc:	2103      	movs	r1, #3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fc50 	bl	8008974 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2228      	movs	r2, #40	@ 0x28
 80080d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a60      	ldr	r2, [pc, #384]	@ (8008260 <I2C_ITError+0x1d8>)
 80080e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80080e2:	e030      	b.n	8008146 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80080e4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fc43 	bl	8008974 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8e1 	bl	80082b6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b60      	cmp	r3, #96	@ 0x60
 80080fe:	d01f      	beq.n	8008140 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b20      	cmp	r3, #32
 8008114:	d114      	bne.n	8008140 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	f003 0310 	and.w	r3, r3, #16
 8008120:	2b10      	cmp	r3, #16
 8008122:	d109      	bne.n	8008138 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2210      	movs	r2, #16
 800812a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008130:	f043 0204 	orr.w	r2, r3, #4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2220      	movs	r2, #32
 800813e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	2b00      	cmp	r3, #0
 8008152:	d039      	beq.n	80081c8 <I2C_ITError+0x140>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b11      	cmp	r3, #17
 8008158:	d002      	beq.n	8008160 <I2C_ITError+0xd8>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b21      	cmp	r3, #33	@ 0x21
 800815e:	d133      	bne.n	80081c8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800816a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800816e:	d107      	bne.n	8008180 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800817e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008184:	4618      	mov	r0, r3
 8008186:	f7fd feed 	bl	8005f64 <HAL_DMA_GetState>
 800818a:	4603      	mov	r3, r0
 800818c:	2b01      	cmp	r3, #1
 800818e:	d017      	beq.n	80081c0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008194:	4a33      	ldr	r2, [pc, #204]	@ (8008264 <I2C_ITError+0x1dc>)
 8008196:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fd fded 	bl	8005d84 <HAL_DMA_Abort_IT>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d04d      	beq.n	800824c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80081ba:	4610      	mov	r0, r2
 80081bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80081be:	e045      	b.n	800824c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f851 	bl	8008268 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80081c6:	e041      	b.n	800824c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d039      	beq.n	8008244 <I2C_ITError+0x1bc>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b12      	cmp	r3, #18
 80081d4:	d002      	beq.n	80081dc <I2C_ITError+0x154>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b22      	cmp	r3, #34	@ 0x22
 80081da:	d133      	bne.n	8008244 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081ea:	d107      	bne.n	80081fc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	4618      	mov	r0, r3
 8008202:	f7fd feaf 	bl	8005f64 <HAL_DMA_GetState>
 8008206:	4603      	mov	r3, r0
 8008208:	2b01      	cmp	r3, #1
 800820a:	d017      	beq.n	800823c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008210:	4a14      	ldr	r2, [pc, #80]	@ (8008264 <I2C_ITError+0x1dc>)
 8008212:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008220:	4618      	mov	r0, r3
 8008222:	f7fd fdaf 	bl	8005d84 <HAL_DMA_Abort_IT>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d011      	beq.n	8008250 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008236:	4610      	mov	r0, r2
 8008238:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800823a:	e009      	b.n	8008250 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f813 	bl	8008268 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008242:	e005      	b.n	8008250 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f80f 	bl	8008268 <I2C_TreatErrorCallback>
  }
}
 800824a:	e002      	b.n	8008252 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800824c:	bf00      	nop
 800824e:	e000      	b.n	8008252 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008250:	bf00      	nop
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	ffff0000 	.word	0xffff0000
 8008260:	080070e1 	.word	0x080070e1
 8008264:	08008459 	.word	0x08008459

08008268 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b60      	cmp	r3, #96	@ 0x60
 800827a:	d10e      	bne.n	800829a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fe fdf3 	bl	8006e7e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008298:	e009      	b.n	80082ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7fe fdde 	bl	8006e6a <HAL_I2C_ErrorCallback>
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d103      	bne.n	80082d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2200      	movs	r2, #0
 80082d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d007      	beq.n	80082f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0201 	orr.w	r2, r2, #1
 80082f0:	619a      	str	r2, [r3, #24]
  }
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800831a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d104      	bne.n	8008330 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008326:	2120      	movs	r1, #32
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 fa9f 	bl	800886c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800832e:	e02d      	b.n	800838c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008338:	441a      	add	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008342:	b29b      	uxth	r3, r3
 8008344:	2bff      	cmp	r3, #255	@ 0xff
 8008346:	d903      	bls.n	8008350 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	22ff      	movs	r2, #255	@ 0xff
 800834c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800834e:	e004      	b.n	800835a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008362:	4619      	mov	r1, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3328      	adds	r3, #40	@ 0x28
 800836a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008370:	f7fd fc6a 	bl	8005c48 <HAL_DMA_Start_IT>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800837a:	2110      	movs	r1, #16
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f7ff fe83 	bl	8008088 <I2C_ITError>
}
 8008382:	e003      	b.n	800838c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008384:	2140      	movs	r1, #64	@ 0x40
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fa70 	bl	800886c <I2C_Enable_IRQ>
}
 800838c:	bf00      	nop
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083b0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80083bc:	2120      	movs	r1, #32
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 fa54 	bl	800886c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80083c4:	e02d      	b.n	8008422 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80083ce:	441a      	add	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2bff      	cmp	r3, #255	@ 0xff
 80083dc:	d903      	bls.n	80083e6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	22ff      	movs	r2, #255	@ 0xff
 80083e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80083e4:	e004      	b.n	80083f0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3324      	adds	r3, #36	@ 0x24
 80083fa:	4619      	mov	r1, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008400:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008406:	f7fd fc1f 	bl	8005c48 <HAL_DMA_Start_IT>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008410:	2110      	movs	r1, #16
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7ff fe38 	bl	8008088 <I2C_ITError>
}
 8008418:	e003      	b.n	8008422 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800841a:	2140      	movs	r1, #64	@ 0x40
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 fa25 	bl	800886c <I2C_Enable_IRQ>
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008436:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008446:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008448:	2110      	movs	r1, #16
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff fe1c 	bl	8008088 <I2C_ITError>
}
 8008450:	bf00      	nop
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008464:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008472:	2200      	movs	r2, #0
 8008474:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008482:	2200      	movs	r2, #0
 8008484:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff feee 	bl	8008268 <I2C_TreatErrorCallback>
}
 800848c:	bf00      	nop
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	4613      	mov	r3, r2
 80084a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084a4:	e031      	b.n	800850a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ac:	d02d      	beq.n	800850a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ae:	f7fb fd31 	bl	8003f14 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d302      	bcc.n	80084c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d122      	bne.n	800850a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4013      	ands	r3, r2
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	bf0c      	ite	eq
 80084d4:	2301      	moveq	r3, #1
 80084d6:	2300      	movne	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d113      	bne.n	800850a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e6:	f043 0220 	orr.w	r2, r3, #32
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e00f      	b.n	800852a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	4013      	ands	r3, r2
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	429a      	cmp	r2, r3
 8008518:	bf0c      	ite	eq
 800851a:	2301      	moveq	r3, #1
 800851c:	2300      	movne	r3, #0
 800851e:	b2db      	uxtb	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	429a      	cmp	r2, r3
 8008526:	d0be      	beq.n	80084a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800853e:	e033      	b.n	80085a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 f87f 	bl	8008648 <I2C_IsErrorOccurred>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e031      	b.n	80085b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	d025      	beq.n	80085a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855c:	f7fb fcda 	bl	8003f14 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	429a      	cmp	r2, r3
 800856a:	d302      	bcc.n	8008572 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d11a      	bne.n	80085a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b02      	cmp	r3, #2
 800857e:	d013      	beq.n	80085a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2220      	movs	r2, #32
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e007      	b.n	80085b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d1c4      	bne.n	8008540 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085cc:	e02f      	b.n	800862e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	68b9      	ldr	r1, [r7, #8]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 f838 	bl	8008648 <I2C_IsErrorOccurred>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e02d      	b.n	800863e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e2:	f7fb fc97 	bl	8003f14 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d302      	bcc.n	80085f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d11a      	bne.n	800862e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b20      	cmp	r3, #32
 8008604:	d013      	beq.n	800862e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860a:	f043 0220 	orr.w	r2, r3, #32
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e007      	b.n	800863e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	f003 0320 	and.w	r3, r3, #32
 8008638:	2b20      	cmp	r3, #32
 800863a:	d1c8      	bne.n	80085ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08a      	sub	sp, #40	@ 0x28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b00      	cmp	r3, #0
 8008672:	d068      	beq.n	8008746 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2210      	movs	r2, #16
 800867a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800867c:	e049      	b.n	8008712 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008684:	d045      	beq.n	8008712 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008686:	f7fb fc45 	bl	8003f14 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <I2C_IsErrorOccurred+0x54>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d13a      	bne.n	8008712 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086be:	d121      	bne.n	8008704 <I2C_IsErrorOccurred+0xbc>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086c6:	d01d      	beq.n	8008704 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80086c8:	7cfb      	ldrb	r3, [r7, #19]
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d01a      	beq.n	8008704 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80086de:	f7fb fc19 	bl	8003f14 <HAL_GetTick>
 80086e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086e4:	e00e      	b.n	8008704 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80086e6:	f7fb fc15 	bl	8003f14 <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b19      	cmp	r3, #25
 80086f2:	d907      	bls.n	8008704 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	f043 0320 	orr.w	r3, r3, #32
 80086fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008702:	e006      	b.n	8008712 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	2b20      	cmp	r3, #32
 8008710:	d1e9      	bne.n	80086e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b20      	cmp	r3, #32
 800871e:	d003      	beq.n	8008728 <I2C_IsErrorOccurred+0xe0>
 8008720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0aa      	beq.n	800867e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2220      	movs	r2, #32
 8008736:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	f043 0304 	orr.w	r3, r3, #4
 800873e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008768:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	f043 0308 	orr.w	r3, r3, #8
 8008780:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800878a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	f043 0302 	orr.w	r3, r3, #2
 80087a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80087b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01c      	beq.n	80087f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff fd7a 	bl	80082b6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6859      	ldr	r1, [r3, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <I2C_IsErrorOccurred+0x1bc>)
 80087ce:	400b      	ands	r3, r1
 80087d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	431a      	orrs	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80087f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3728      	adds	r7, #40	@ 0x28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	fe00e800 	.word	0xfe00e800

08008808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	607b      	str	r3, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	817b      	strh	r3, [r7, #10]
 8008816:	4613      	mov	r3, r2
 8008818:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800881a:	897b      	ldrh	r3, [r7, #10]
 800881c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008820:	7a7b      	ldrb	r3, [r7, #9]
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008828:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	4313      	orrs	r3, r2
 8008832:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008836:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	0d5b      	lsrs	r3, r3, #21
 8008842:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008846:	4b08      	ldr	r3, [pc, #32]	@ (8008868 <I2C_TransferConfig+0x60>)
 8008848:	430b      	orrs	r3, r1
 800884a:	43db      	mvns	r3, r3
 800884c:	ea02 0103 	and.w	r1, r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	03ff63ff 	.word	0x03ff63ff

0800886c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008880:	4a39      	ldr	r2, [pc, #228]	@ (8008968 <I2C_Enable_IRQ+0xfc>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d032      	beq.n	80088ec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800888a:	4a38      	ldr	r2, [pc, #224]	@ (800896c <I2C_Enable_IRQ+0x100>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d02d      	beq.n	80088ec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008894:	4a36      	ldr	r2, [pc, #216]	@ (8008970 <I2C_Enable_IRQ+0x104>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d028      	beq.n	80088ec <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800889a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da03      	bge.n	80088aa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80088a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80088aa:	887b      	ldrh	r3, [r7, #2]
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80088ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80088bc:	887b      	ldrh	r3, [r7, #2]
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80088cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80088ce:	887b      	ldrh	r3, [r7, #2]
 80088d0:	2b10      	cmp	r3, #16
 80088d2:	d103      	bne.n	80088dc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80088da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80088dc:	887b      	ldrh	r3, [r7, #2]
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d133      	bne.n	800894a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f043 0320 	orr.w	r3, r3, #32
 80088e8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80088ea:	e02e      	b.n	800894a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80088ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da03      	bge.n	80088fc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80088fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80088fc:	887b      	ldrh	r3, [r7, #2]
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800890c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800890e:	887b      	ldrh	r3, [r7, #2]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800891e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008920:	887b      	ldrh	r3, [r7, #2]
 8008922:	2b10      	cmp	r3, #16
 8008924:	d103      	bne.n	800892e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800892c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800892e:	887b      	ldrh	r3, [r7, #2]
 8008930:	2b20      	cmp	r3, #32
 8008932:	d103      	bne.n	800893c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800893a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800893c:	887b      	ldrh	r3, [r7, #2]
 800893e:	2b40      	cmp	r3, #64	@ 0x40
 8008940:	d103      	bne.n	800894a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008948:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	430a      	orrs	r2, r1
 8008958:	601a      	str	r2, [r3, #0]
}
 800895a:	bf00      	nop
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	080072d1 	.word	0x080072d1
 800896c:	080076f5 	.word	0x080076f5
 8008970:	080074a9 	.word	0x080074a9

08008974 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008984:	887b      	ldrh	r3, [r7, #2]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00f      	beq.n	80089ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008994:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80089a2:	2b28      	cmp	r3, #40	@ 0x28
 80089a4:	d003      	beq.n	80089ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80089ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80089ae:	887b      	ldrh	r3, [r7, #2]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00f      	beq.n	80089d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80089be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80089cc:	2b28      	cmp	r3, #40	@ 0x28
 80089ce:	d003      	beq.n	80089d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80089d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80089d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da03      	bge.n	80089e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80089e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80089e8:	887b      	ldrh	r3, [r7, #2]
 80089ea:	2b10      	cmp	r3, #16
 80089ec:	d103      	bne.n	80089f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80089f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80089f6:	887b      	ldrh	r3, [r7, #2]
 80089f8:	2b20      	cmp	r3, #32
 80089fa:	d103      	bne.n	8008a04 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f043 0320 	orr.w	r3, r3, #32
 8008a02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008a04:	887b      	ldrh	r3, [r7, #2]
 8008a06:	2b40      	cmp	r3, #64	@ 0x40
 8008a08:	d103      	bne.n	8008a12 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a10:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6819      	ldr	r1, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	43da      	mvns	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	400a      	ands	r2, r1
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d138      	bne.n	8008ab8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e032      	b.n	8008aba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2224      	movs	r2, #36	@ 0x24
 8008a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0201 	bic.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0201 	orr.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e000      	b.n	8008aba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ab8:	2302      	movs	r3, #2
  }
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d139      	bne.n	8008b50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e033      	b.n	8008b52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2224      	movs	r2, #36	@ 0x24
 8008af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f022 0201 	bic.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008b18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0201 	orr.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e000      	b.n	8008b52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008b50:	2302      	movs	r3, #2
  }
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e038      	b.n	8008be2 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8008b78:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8008b82:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6852      	ldr	r2, [r2, #4]
 8008b8c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6892      	ldr	r2, [r2, #8]
 8008b96:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008b98:	f7fb f9bc 	bl	8003f14 <HAL_GetTick>
 8008b9c:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8008b9e:	e008      	b.n	8008bb2 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008ba0:	f7fb f9b8 	bl	8003f14 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b30      	cmp	r3, #48	@ 0x30
 8008bac:	d901      	bls.n	8008bb2 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e017      	b.n	8008be2 <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1f1      	bne.n	8008ba0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	691a      	ldr	r2, [r3, #16]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d005      	beq.n	8008bd6 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	68d2      	ldr	r2, [r2, #12]
 8008bd2:	611a      	str	r2, [r3, #16]
 8008bd4:	e004      	b.n	8008be0 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8008bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8008bfa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
	...

08008c0c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10c      	bne.n	8008c38 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8008c1e:	4b13      	ldr	r3, [pc, #76]	@ (8008c6c <HAL_PWR_EnterSLEEPMode+0x60>)
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c2a:	d10e      	bne.n	8008c4a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8008c2c:	f000 f896 	bl	8008d5c <HAL_PWREx_DisableLowPowerRunMode>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d009      	beq.n	8008c4a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8008c36:	e016      	b.n	8008c66 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8008c38:	4b0c      	ldr	r3, [pc, #48]	@ (8008c6c <HAL_PWR_EnterSLEEPMode+0x60>)
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c44:	d001      	beq.n	8008c4a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008c46:	f000 f879 	bl	8008d3c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008c4a:	4b09      	ldr	r3, [pc, #36]	@ (8008c70 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	4a08      	ldr	r2, [pc, #32]	@ (8008c70 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008c50:	f023 0304 	bic.w	r3, r3, #4
 8008c54:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008c56:	78fb      	ldrb	r3, [r7, #3]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008c5c:	bf30      	wfi
 8008c5e:	e002      	b.n	8008c66 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008c60:	bf40      	sev
    __WFE();
 8008c62:	bf20      	wfe
    __WFE();
 8008c64:	bf20      	wfe
  }

}
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	40007000 	.word	0x40007000
 8008c70:	e000ed00 	.word	0xe000ed00

08008c74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008c74:	b480      	push	{r7}
 8008c76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008c78:	4b04      	ldr	r3, [pc, #16]	@ (8008c8c <HAL_PWREx_GetVoltageRange+0x18>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	40007000 	.word	0x40007000

08008c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c9e:	d130      	bne.n	8008d02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ca0:	4b23      	ldr	r3, [pc, #140]	@ (8008d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cac:	d038      	beq.n	8008d20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008cae:	4b20      	ldr	r3, [pc, #128]	@ (8008d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008cbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8008d34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2232      	movs	r2, #50	@ 0x32
 8008cc4:	fb02 f303 	mul.w	r3, r2, r3
 8008cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008cca:	fba2 2303 	umull	r2, r3, r2, r3
 8008cce:	0c9b      	lsrs	r3, r3, #18
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008cd4:	e002      	b.n	8008cdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008cdc:	4b14      	ldr	r3, [pc, #80]	@ (8008d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ce8:	d102      	bne.n	8008cf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1f2      	bne.n	8008cd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cfc:	d110      	bne.n	8008d20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e00f      	b.n	8008d22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d02:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d0e:	d007      	beq.n	8008d20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008d10:	4b07      	ldr	r3, [pc, #28]	@ (8008d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008d18:	4a05      	ldr	r2, [pc, #20]	@ (8008d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008d1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	40007000 	.word	0x40007000
 8008d34:	20000360 	.word	0x20000360
 8008d38:	431bde83 	.word	0x431bde83

08008d3c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8008d40:	4b05      	ldr	r3, [pc, #20]	@ (8008d58 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a04      	ldr	r2, [pc, #16]	@ (8008d58 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8008d46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d4a:	6013      	str	r3, [r2, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40007000 	.word	0x40007000

08008d5c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8008d62:	4b17      	ldr	r3, [pc, #92]	@ (8008dc0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a16      	ldr	r2, [pc, #88]	@ (8008dc0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d6c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d6e:	4b15      	ldr	r3, [pc, #84]	@ (8008dc4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2232      	movs	r2, #50	@ 0x32
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
 8008d78:	4a13      	ldr	r2, [pc, #76]	@ (8008dc8 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8008d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7e:	0c9b      	lsrs	r3, r3, #18
 8008d80:	3301      	adds	r3, #1
 8008d82:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008d84:	e002      	b.n	8008d8c <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d98:	d102      	bne.n	8008da0 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1f2      	bne.n	8008d86 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8008da0:	4b07      	ldr	r3, [pc, #28]	@ (8008dc0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dac:	d101      	bne.n	8008db2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e000      	b.n	8008db4 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	40007000 	.word	0x40007000
 8008dc4:	20000360 	.word	0x20000360
 8008dc8:	431bde83 	.word	0x431bde83

08008dcc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f000 bc08 	b.w	80095f0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008de0:	4b96      	ldr	r3, [pc, #600]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f003 030c 	and.w	r3, r3, #12
 8008de8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008dea:	4b94      	ldr	r3, [pc, #592]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 80e4 	beq.w	8008fca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d007      	beq.n	8008e18 <HAL_RCC_OscConfig+0x4c>
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	2b0c      	cmp	r3, #12
 8008e0c:	f040 808b 	bne.w	8008f26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	f040 8087 	bne.w	8008f26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e18:	4b88      	ldr	r3, [pc, #544]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <HAL_RCC_OscConfig+0x64>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e3df      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a1a      	ldr	r2, [r3, #32]
 8008e34:	4b81      	ldr	r3, [pc, #516]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <HAL_RCC_OscConfig+0x7e>
 8008e40:	4b7e      	ldr	r3, [pc, #504]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e48:	e005      	b.n	8008e56 <HAL_RCC_OscConfig+0x8a>
 8008e4a:	4b7c      	ldr	r3, [pc, #496]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e50:	091b      	lsrs	r3, r3, #4
 8008e52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d223      	bcs.n	8008ea2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fd92 	bl	8009988 <RCC_SetFlashLatencyFromMSIRange>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e3c0      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e6e:	4b73      	ldr	r3, [pc, #460]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a72      	ldr	r2, [pc, #456]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e74:	f043 0308 	orr.w	r3, r3, #8
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	4b70      	ldr	r3, [pc, #448]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	496d      	ldr	r1, [pc, #436]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	4968      	ldr	r1, [pc, #416]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	604b      	str	r3, [r1, #4]
 8008ea0:	e025      	b.n	8008eee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ea2:	4b66      	ldr	r3, [pc, #408]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a65      	ldr	r2, [pc, #404]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008ea8:	f043 0308 	orr.w	r3, r3, #8
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	4b63      	ldr	r3, [pc, #396]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	4960      	ldr	r1, [pc, #384]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	495b      	ldr	r1, [pc, #364]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d109      	bne.n	8008eee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fd52 	bl	8009988 <RCC_SetFlashLatencyFromMSIRange>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e380      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008eee:	f000 fc87 	bl	8009800 <HAL_RCC_GetSysClockFreq>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b51      	ldr	r3, [pc, #324]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	091b      	lsrs	r3, r3, #4
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	4950      	ldr	r1, [pc, #320]	@ (8009040 <HAL_RCC_OscConfig+0x274>)
 8008f00:	5ccb      	ldrb	r3, [r1, r3]
 8008f02:	f003 031f 	and.w	r3, r3, #31
 8008f06:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8009044 <HAL_RCC_OscConfig+0x278>)
 8008f0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8009048 <HAL_RCC_OscConfig+0x27c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fa ffae 	bl	8003e74 <HAL_InitTick>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d052      	beq.n	8008fc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	e364      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d032      	beq.n	8008f94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008f2e:	4b43      	ldr	r3, [pc, #268]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a42      	ldr	r2, [pc, #264]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f34:	f043 0301 	orr.w	r3, r3, #1
 8008f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008f3a:	f7fa ffeb 	bl	8003f14 <HAL_GetTick>
 8008f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f40:	e008      	b.n	8008f54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008f42:	f7fa ffe7 	bl	8003f14 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d901      	bls.n	8008f54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e34d      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f54:	4b39      	ldr	r3, [pc, #228]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0f0      	beq.n	8008f42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f60:	4b36      	ldr	r3, [pc, #216]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a35      	ldr	r2, [pc, #212]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f66:	f043 0308 	orr.w	r3, r3, #8
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	4b33      	ldr	r3, [pc, #204]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	4930      	ldr	r1, [pc, #192]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	492b      	ldr	r1, [pc, #172]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	604b      	str	r3, [r1, #4]
 8008f92:	e01a      	b.n	8008fca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008f94:	4b29      	ldr	r3, [pc, #164]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a28      	ldr	r2, [pc, #160]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008f9a:	f023 0301 	bic.w	r3, r3, #1
 8008f9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008fa0:	f7fa ffb8 	bl	8003f14 <HAL_GetTick>
 8008fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008fa6:	e008      	b.n	8008fba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008fa8:	f7fa ffb4 	bl	8003f14 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d901      	bls.n	8008fba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e31a      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008fba:	4b20      	ldr	r3, [pc, #128]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1f0      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x1dc>
 8008fc6:	e000      	b.n	8008fca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d073      	beq.n	80090be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d005      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x21c>
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	2b0c      	cmp	r3, #12
 8008fe0:	d10e      	bne.n	8009000 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d10b      	bne.n	8009000 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fe8:	4b14      	ldr	r3, [pc, #80]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d063      	beq.n	80090bc <HAL_RCC_OscConfig+0x2f0>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d15f      	bne.n	80090bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e2f7      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009008:	d106      	bne.n	8009018 <HAL_RCC_OscConfig+0x24c>
 800900a:	4b0c      	ldr	r3, [pc, #48]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a0b      	ldr	r2, [pc, #44]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8009010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	e025      	b.n	8009064 <HAL_RCC_OscConfig+0x298>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009020:	d114      	bne.n	800904c <HAL_RCC_OscConfig+0x280>
 8009022:	4b06      	ldr	r3, [pc, #24]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a05      	ldr	r2, [pc, #20]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8009028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	4b03      	ldr	r3, [pc, #12]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a02      	ldr	r2, [pc, #8]	@ (800903c <HAL_RCC_OscConfig+0x270>)
 8009034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	e013      	b.n	8009064 <HAL_RCC_OscConfig+0x298>
 800903c:	40021000 	.word	0x40021000
 8009040:	0800bfd8 	.word	0x0800bfd8
 8009044:	20000360 	.word	0x20000360
 8009048:	20000364 	.word	0x20000364
 800904c:	4ba0      	ldr	r3, [pc, #640]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a9f      	ldr	r2, [pc, #636]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	4b9d      	ldr	r3, [pc, #628]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a9c      	ldr	r2, [pc, #624]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 800905e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d013      	beq.n	8009094 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800906c:	f7fa ff52 	bl	8003f14 <HAL_GetTick>
 8009070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009072:	e008      	b.n	8009086 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009074:	f7fa ff4e 	bl	8003f14 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	2b64      	cmp	r3, #100	@ 0x64
 8009080:	d901      	bls.n	8009086 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e2b4      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009086:	4b92      	ldr	r3, [pc, #584]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0f0      	beq.n	8009074 <HAL_RCC_OscConfig+0x2a8>
 8009092:	e014      	b.n	80090be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009094:	f7fa ff3e 	bl	8003f14 <HAL_GetTick>
 8009098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800909a:	e008      	b.n	80090ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800909c:	f7fa ff3a 	bl	8003f14 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	2b64      	cmp	r3, #100	@ 0x64
 80090a8:	d901      	bls.n	80090ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e2a0      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80090ae:	4b88      	ldr	r3, [pc, #544]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1f0      	bne.n	800909c <HAL_RCC_OscConfig+0x2d0>
 80090ba:	e000      	b.n	80090be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d060      	beq.n	800918c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d005      	beq.n	80090dc <HAL_RCC_OscConfig+0x310>
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	2b0c      	cmp	r3, #12
 80090d4:	d119      	bne.n	800910a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d116      	bne.n	800910a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090dc:	4b7c      	ldr	r3, [pc, #496]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <HAL_RCC_OscConfig+0x328>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e27d      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090f4:	4b76      	ldr	r3, [pc, #472]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	061b      	lsls	r3, r3, #24
 8009102:	4973      	ldr	r1, [pc, #460]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009104:	4313      	orrs	r3, r2
 8009106:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009108:	e040      	b.n	800918c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d023      	beq.n	800915a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009112:	4b6f      	ldr	r3, [pc, #444]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a6e      	ldr	r2, [pc, #440]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800911c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800911e:	f7fa fef9 	bl	8003f14 <HAL_GetTick>
 8009122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009124:	e008      	b.n	8009138 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009126:	f7fa fef5 	bl	8003f14 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d901      	bls.n	8009138 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e25b      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009138:	4b65      	ldr	r3, [pc, #404]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0f0      	beq.n	8009126 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009144:	4b62      	ldr	r3, [pc, #392]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	061b      	lsls	r3, r3, #24
 8009152:	495f      	ldr	r1, [pc, #380]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009154:	4313      	orrs	r3, r2
 8009156:	604b      	str	r3, [r1, #4]
 8009158:	e018      	b.n	800918c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800915a:	4b5d      	ldr	r3, [pc, #372]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a5c      	ldr	r2, [pc, #368]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009166:	f7fa fed5 	bl	8003f14 <HAL_GetTick>
 800916a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800916c:	e008      	b.n	8009180 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800916e:	f7fa fed1 	bl	8003f14 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	d901      	bls.n	8009180 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e237      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009180:	4b53      	ldr	r3, [pc, #332]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1f0      	bne.n	800916e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d03c      	beq.n	8009212 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	695b      	ldr	r3, [r3, #20]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01c      	beq.n	80091da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091a0:	4b4b      	ldr	r3, [pc, #300]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80091a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091a6:	4a4a      	ldr	r2, [pc, #296]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b0:	f7fa feb0 	bl	8003f14 <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091b8:	f7fa feac 	bl	8003f14 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e212      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091ca:	4b41      	ldr	r3, [pc, #260]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80091cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0ef      	beq.n	80091b8 <HAL_RCC_OscConfig+0x3ec>
 80091d8:	e01b      	b.n	8009212 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091da:	4b3d      	ldr	r3, [pc, #244]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80091dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091e0:	4a3b      	ldr	r2, [pc, #236]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ea:	f7fa fe93 	bl	8003f14 <HAL_GetTick>
 80091ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80091f0:	e008      	b.n	8009204 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091f2:	f7fa fe8f 	bl	8003f14 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d901      	bls.n	8009204 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e1f5      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009204:	4b32      	ldr	r3, [pc, #200]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1ef      	bne.n	80091f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0304 	and.w	r3, r3, #4
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 80a6 	beq.w	800936c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009220:	2300      	movs	r3, #0
 8009222:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009224:	4b2a      	ldr	r3, [pc, #168]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10d      	bne.n	800924c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009230:	4b27      	ldr	r3, [pc, #156]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009234:	4a26      	ldr	r2, [pc, #152]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800923a:	6593      	str	r3, [r2, #88]	@ 0x58
 800923c:	4b24      	ldr	r3, [pc, #144]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 800923e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009244:	60bb      	str	r3, [r7, #8]
 8009246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009248:	2301      	movs	r3, #1
 800924a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800924c:	4b21      	ldr	r3, [pc, #132]	@ (80092d4 <HAL_RCC_OscConfig+0x508>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009254:	2b00      	cmp	r3, #0
 8009256:	d118      	bne.n	800928a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009258:	4b1e      	ldr	r3, [pc, #120]	@ (80092d4 <HAL_RCC_OscConfig+0x508>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a1d      	ldr	r2, [pc, #116]	@ (80092d4 <HAL_RCC_OscConfig+0x508>)
 800925e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009262:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009264:	f7fa fe56 	bl	8003f14 <HAL_GetTick>
 8009268:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800926a:	e008      	b.n	800927e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800926c:	f7fa fe52 	bl	8003f14 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b02      	cmp	r3, #2
 8009278:	d901      	bls.n	800927e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e1b8      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800927e:	4b15      	ldr	r3, [pc, #84]	@ (80092d4 <HAL_RCC_OscConfig+0x508>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0f0      	beq.n	800926c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d108      	bne.n	80092a4 <HAL_RCC_OscConfig+0x4d8>
 8009292:	4b0f      	ldr	r3, [pc, #60]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 8009294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009298:	4a0d      	ldr	r2, [pc, #52]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 800929a:	f043 0301 	orr.w	r3, r3, #1
 800929e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092a2:	e029      	b.n	80092f8 <HAL_RCC_OscConfig+0x52c>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b05      	cmp	r3, #5
 80092aa:	d115      	bne.n	80092d8 <HAL_RCC_OscConfig+0x50c>
 80092ac:	4b08      	ldr	r3, [pc, #32]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80092ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b2:	4a07      	ldr	r2, [pc, #28]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80092b4:	f043 0304 	orr.w	r3, r3, #4
 80092b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092bc:	4b04      	ldr	r3, [pc, #16]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c2:	4a03      	ldr	r2, [pc, #12]	@ (80092d0 <HAL_RCC_OscConfig+0x504>)
 80092c4:	f043 0301 	orr.w	r3, r3, #1
 80092c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092cc:	e014      	b.n	80092f8 <HAL_RCC_OscConfig+0x52c>
 80092ce:	bf00      	nop
 80092d0:	40021000 	.word	0x40021000
 80092d4:	40007000 	.word	0x40007000
 80092d8:	4b9d      	ldr	r3, [pc, #628]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80092da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092de:	4a9c      	ldr	r2, [pc, #624]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80092e0:	f023 0301 	bic.w	r3, r3, #1
 80092e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092e8:	4b99      	ldr	r3, [pc, #612]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ee:	4a98      	ldr	r2, [pc, #608]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80092f0:	f023 0304 	bic.w	r3, r3, #4
 80092f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d016      	beq.n	800932e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009300:	f7fa fe08 	bl	8003f14 <HAL_GetTick>
 8009304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009306:	e00a      	b.n	800931e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009308:	f7fa fe04 	bl	8003f14 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009316:	4293      	cmp	r3, r2
 8009318:	d901      	bls.n	800931e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e168      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800931e:	4b8c      	ldr	r3, [pc, #560]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0ed      	beq.n	8009308 <HAL_RCC_OscConfig+0x53c>
 800932c:	e015      	b.n	800935a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800932e:	f7fa fdf1 	bl	8003f14 <HAL_GetTick>
 8009332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009334:	e00a      	b.n	800934c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009336:	f7fa fded 	bl	8003f14 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009344:	4293      	cmp	r3, r2
 8009346:	d901      	bls.n	800934c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e151      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800934c:	4b80      	ldr	r3, [pc, #512]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 800934e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1ed      	bne.n	8009336 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800935a:	7ffb      	ldrb	r3, [r7, #31]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d105      	bne.n	800936c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009360:	4b7b      	ldr	r3, [pc, #492]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009364:	4a7a      	ldr	r2, [pc, #488]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800936a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b00      	cmp	r3, #0
 8009376:	d03c      	beq.n	80093f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01c      	beq.n	80093ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009380:	4b73      	ldr	r3, [pc, #460]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009386:	4a72      	ldr	r2, [pc, #456]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009390:	f7fa fdc0 	bl	8003f14 <HAL_GetTick>
 8009394:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009396:	e008      	b.n	80093aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009398:	f7fa fdbc 	bl	8003f14 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d901      	bls.n	80093aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e122      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093aa:	4b69      	ldr	r3, [pc, #420]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80093ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0ef      	beq.n	8009398 <HAL_RCC_OscConfig+0x5cc>
 80093b8:	e01b      	b.n	80093f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093ba:	4b65      	ldr	r3, [pc, #404]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80093bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093c0:	4a63      	ldr	r2, [pc, #396]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80093c2:	f023 0301 	bic.w	r3, r3, #1
 80093c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ca:	f7fa fda3 	bl	8003f14 <HAL_GetTick>
 80093ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80093d0:	e008      	b.n	80093e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093d2:	f7fa fd9f 	bl	8003f14 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d901      	bls.n	80093e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e105      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80093e4:	4b5a      	ldr	r3, [pc, #360]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80093e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1ef      	bne.n	80093d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80f9 	beq.w	80095ee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009400:	2b02      	cmp	r3, #2
 8009402:	f040 80cf 	bne.w	80095a4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009406:	4b52      	ldr	r3, [pc, #328]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f003 0203 	and.w	r2, r3, #3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009416:	429a      	cmp	r2, r3
 8009418:	d12c      	bne.n	8009474 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009424:	3b01      	subs	r3, #1
 8009426:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009428:	429a      	cmp	r2, r3
 800942a:	d123      	bne.n	8009474 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009436:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009438:	429a      	cmp	r2, r3
 800943a:	d11b      	bne.n	8009474 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009446:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009448:	429a      	cmp	r2, r3
 800944a:	d113      	bne.n	8009474 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	3b01      	subs	r3, #1
 800945a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800945c:	429a      	cmp	r2, r3
 800945e:	d109      	bne.n	8009474 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946a:	085b      	lsrs	r3, r3, #1
 800946c:	3b01      	subs	r3, #1
 800946e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009470:	429a      	cmp	r2, r3
 8009472:	d071      	beq.n	8009558 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	2b0c      	cmp	r3, #12
 8009478:	d068      	beq.n	800954c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800947a:	4b35      	ldr	r3, [pc, #212]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d105      	bne.n	8009492 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009486:	4b32      	ldr	r3, [pc, #200]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e0ac      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009496:	4b2e      	ldr	r3, [pc, #184]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a2d      	ldr	r2, [pc, #180]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 800949c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80094a2:	f7fa fd37 	bl	8003f14 <HAL_GetTick>
 80094a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094a8:	e008      	b.n	80094bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094aa:	f7fa fd33 	bl	8003f14 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d901      	bls.n	80094bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e099      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094bc:	4b24      	ldr	r3, [pc, #144]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1f0      	bne.n	80094aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094c8:	4b21      	ldr	r3, [pc, #132]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 80094ca:	68da      	ldr	r2, [r3, #12]
 80094cc:	4b21      	ldr	r3, [pc, #132]	@ (8009554 <HAL_RCC_OscConfig+0x788>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80094d8:	3a01      	subs	r2, #1
 80094da:	0112      	lsls	r2, r2, #4
 80094dc:	4311      	orrs	r1, r2
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80094e2:	0212      	lsls	r2, r2, #8
 80094e4:	4311      	orrs	r1, r2
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80094ea:	0852      	lsrs	r2, r2, #1
 80094ec:	3a01      	subs	r2, #1
 80094ee:	0552      	lsls	r2, r2, #21
 80094f0:	4311      	orrs	r1, r2
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80094f6:	0852      	lsrs	r2, r2, #1
 80094f8:	3a01      	subs	r2, #1
 80094fa:	0652      	lsls	r2, r2, #25
 80094fc:	4311      	orrs	r1, r2
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009502:	06d2      	lsls	r2, r2, #27
 8009504:	430a      	orrs	r2, r1
 8009506:	4912      	ldr	r1, [pc, #72]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009508:	4313      	orrs	r3, r2
 800950a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800950c:	4b10      	ldr	r3, [pc, #64]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0f      	ldr	r2, [pc, #60]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009516:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009518:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	4a0c      	ldr	r2, [pc, #48]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 800951e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009522:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009524:	f7fa fcf6 	bl	8003f14 <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800952c:	f7fa fcf2 	bl	8003f14 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e058      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800953e:	4b04      	ldr	r3, [pc, #16]	@ (8009550 <HAL_RCC_OscConfig+0x784>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800954a:	e050      	b.n	80095ee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e04f      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
 8009550:	40021000 	.word	0x40021000
 8009554:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009558:	4b27      	ldr	r3, [pc, #156]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d144      	bne.n	80095ee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009564:	4b24      	ldr	r3, [pc, #144]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a23      	ldr	r2, [pc, #140]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 800956a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800956e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009570:	4b21      	ldr	r3, [pc, #132]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	4a20      	ldr	r2, [pc, #128]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 8009576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800957a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800957c:	f7fa fcca 	bl	8003f14 <HAL_GetTick>
 8009580:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009582:	e008      	b.n	8009596 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009584:	f7fa fcc6 	bl	8003f14 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b02      	cmp	r3, #2
 8009590:	d901      	bls.n	8009596 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e02c      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009596:	4b18      	ldr	r3, [pc, #96]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d0f0      	beq.n	8009584 <HAL_RCC_OscConfig+0x7b8>
 80095a2:	e024      	b.n	80095ee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	2b0c      	cmp	r3, #12
 80095a8:	d01f      	beq.n	80095ea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095aa:	4b13      	ldr	r3, [pc, #76]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a12      	ldr	r2, [pc, #72]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 80095b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b6:	f7fa fcad 	bl	8003f14 <HAL_GetTick>
 80095ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095bc:	e008      	b.n	80095d0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095be:	f7fa fca9 	bl	8003f14 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d901      	bls.n	80095d0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e00f      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095d0:	4b09      	ldr	r3, [pc, #36]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f0      	bne.n	80095be <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80095dc:	4b06      	ldr	r3, [pc, #24]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	4905      	ldr	r1, [pc, #20]	@ (80095f8 <HAL_RCC_OscConfig+0x82c>)
 80095e2:	4b06      	ldr	r3, [pc, #24]	@ (80095fc <HAL_RCC_OscConfig+0x830>)
 80095e4:	4013      	ands	r3, r2
 80095e6:	60cb      	str	r3, [r1, #12]
 80095e8:	e001      	b.n	80095ee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	40021000 	.word	0x40021000
 80095fc:	feeefffc 	.word	0xfeeefffc

08009600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e0e7      	b.n	80097e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009614:	4b75      	ldr	r3, [pc, #468]	@ (80097ec <HAL_RCC_ClockConfig+0x1ec>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d910      	bls.n	8009644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009622:	4b72      	ldr	r3, [pc, #456]	@ (80097ec <HAL_RCC_ClockConfig+0x1ec>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f023 0207 	bic.w	r2, r3, #7
 800962a:	4970      	ldr	r1, [pc, #448]	@ (80097ec <HAL_RCC_ClockConfig+0x1ec>)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	4313      	orrs	r3, r2
 8009630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009632:	4b6e      	ldr	r3, [pc, #440]	@ (80097ec <HAL_RCC_ClockConfig+0x1ec>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d001      	beq.n	8009644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e0cf      	b.n	80097e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0302 	and.w	r3, r3, #2
 800964c:	2b00      	cmp	r3, #0
 800964e:	d010      	beq.n	8009672 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	4b66      	ldr	r3, [pc, #408]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800965c:	429a      	cmp	r2, r3
 800965e:	d908      	bls.n	8009672 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009660:	4b63      	ldr	r3, [pc, #396]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	4960      	ldr	r1, [pc, #384]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 800966e:	4313      	orrs	r3, r2
 8009670:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d04c      	beq.n	8009718 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2b03      	cmp	r3, #3
 8009684:	d107      	bne.n	8009696 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009686:	4b5a      	ldr	r3, [pc, #360]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d121      	bne.n	80096d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e0a6      	b.n	80097e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d107      	bne.n	80096ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800969e:	4b54      	ldr	r3, [pc, #336]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d115      	bne.n	80096d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e09a      	b.n	80097e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d107      	bne.n	80096c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80096b6:	4b4e      	ldr	r3, [pc, #312]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d109      	bne.n	80096d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e08e      	b.n	80097e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096c6:	4b4a      	ldr	r3, [pc, #296]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e086      	b.n	80097e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096d6:	4b46      	ldr	r3, [pc, #280]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f023 0203 	bic.w	r2, r3, #3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	4943      	ldr	r1, [pc, #268]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e8:	f7fa fc14 	bl	8003f14 <HAL_GetTick>
 80096ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ee:	e00a      	b.n	8009706 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096f0:	f7fa fc10 	bl	8003f14 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096fe:	4293      	cmp	r3, r2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e06e      	b.n	80097e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009706:	4b3a      	ldr	r3, [pc, #232]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f003 020c 	and.w	r2, r3, #12
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	429a      	cmp	r2, r3
 8009716:	d1eb      	bne.n	80096f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d010      	beq.n	8009746 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	4b31      	ldr	r3, [pc, #196]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009730:	429a      	cmp	r2, r3
 8009732:	d208      	bcs.n	8009746 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009734:	4b2e      	ldr	r3, [pc, #184]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	492b      	ldr	r1, [pc, #172]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 8009742:	4313      	orrs	r3, r2
 8009744:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009746:	4b29      	ldr	r3, [pc, #164]	@ (80097ec <HAL_RCC_ClockConfig+0x1ec>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0307 	and.w	r3, r3, #7
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	429a      	cmp	r2, r3
 8009752:	d210      	bcs.n	8009776 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009754:	4b25      	ldr	r3, [pc, #148]	@ (80097ec <HAL_RCC_ClockConfig+0x1ec>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f023 0207 	bic.w	r2, r3, #7
 800975c:	4923      	ldr	r1, [pc, #140]	@ (80097ec <HAL_RCC_ClockConfig+0x1ec>)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	4313      	orrs	r3, r2
 8009762:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009764:	4b21      	ldr	r3, [pc, #132]	@ (80097ec <HAL_RCC_ClockConfig+0x1ec>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	429a      	cmp	r2, r3
 8009770:	d001      	beq.n	8009776 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e036      	b.n	80097e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b00      	cmp	r3, #0
 8009780:	d008      	beq.n	8009794 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009782:	4b1b      	ldr	r3, [pc, #108]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	4918      	ldr	r1, [pc, #96]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 8009790:	4313      	orrs	r3, r2
 8009792:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0308 	and.w	r3, r3, #8
 800979c:	2b00      	cmp	r3, #0
 800979e:	d009      	beq.n	80097b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097a0:	4b13      	ldr	r3, [pc, #76]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	4910      	ldr	r1, [pc, #64]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80097b4:	f000 f824 	bl	8009800 <HAL_RCC_GetSysClockFreq>
 80097b8:	4602      	mov	r2, r0
 80097ba:	4b0d      	ldr	r3, [pc, #52]	@ (80097f0 <HAL_RCC_ClockConfig+0x1f0>)
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	091b      	lsrs	r3, r3, #4
 80097c0:	f003 030f 	and.w	r3, r3, #15
 80097c4:	490b      	ldr	r1, [pc, #44]	@ (80097f4 <HAL_RCC_ClockConfig+0x1f4>)
 80097c6:	5ccb      	ldrb	r3, [r1, r3]
 80097c8:	f003 031f 	and.w	r3, r3, #31
 80097cc:	fa22 f303 	lsr.w	r3, r2, r3
 80097d0:	4a09      	ldr	r2, [pc, #36]	@ (80097f8 <HAL_RCC_ClockConfig+0x1f8>)
 80097d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80097d4:	4b09      	ldr	r3, [pc, #36]	@ (80097fc <HAL_RCC_ClockConfig+0x1fc>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fa fb4b 	bl	8003e74 <HAL_InitTick>
 80097de:	4603      	mov	r3, r0
 80097e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80097e2:	7afb      	ldrb	r3, [r7, #11]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	40022000 	.word	0x40022000
 80097f0:	40021000 	.word	0x40021000
 80097f4:	0800bfd8 	.word	0x0800bfd8
 80097f8:	20000360 	.word	0x20000360
 80097fc:	20000364 	.word	0x20000364

08009800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009800:	b480      	push	{r7}
 8009802:	b089      	sub	sp, #36	@ 0x24
 8009804:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	2300      	movs	r3, #0
 800980c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800980e:	4b3e      	ldr	r3, [pc, #248]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f003 030c 	and.w	r3, r3, #12
 8009816:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009818:	4b3b      	ldr	r3, [pc, #236]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f003 0303 	and.w	r3, r3, #3
 8009820:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <HAL_RCC_GetSysClockFreq+0x34>
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b0c      	cmp	r3, #12
 800982c:	d121      	bne.n	8009872 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d11e      	bne.n	8009872 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009834:	4b34      	ldr	r3, [pc, #208]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0308 	and.w	r3, r3, #8
 800983c:	2b00      	cmp	r3, #0
 800983e:	d107      	bne.n	8009850 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009840:	4b31      	ldr	r3, [pc, #196]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 8009842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009846:	0a1b      	lsrs	r3, r3, #8
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	61fb      	str	r3, [r7, #28]
 800984e:	e005      	b.n	800985c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009850:	4b2d      	ldr	r3, [pc, #180]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	091b      	lsrs	r3, r3, #4
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800985c:	4a2b      	ldr	r2, [pc, #172]	@ (800990c <HAL_RCC_GetSysClockFreq+0x10c>)
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009864:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10d      	bne.n	8009888 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009870:	e00a      	b.n	8009888 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	2b04      	cmp	r3, #4
 8009876:	d102      	bne.n	800987e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009878:	4b25      	ldr	r3, [pc, #148]	@ (8009910 <HAL_RCC_GetSysClockFreq+0x110>)
 800987a:	61bb      	str	r3, [r7, #24]
 800987c:	e004      	b.n	8009888 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b08      	cmp	r3, #8
 8009882:	d101      	bne.n	8009888 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009884:	4b23      	ldr	r3, [pc, #140]	@ (8009914 <HAL_RCC_GetSysClockFreq+0x114>)
 8009886:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2b0c      	cmp	r3, #12
 800988c:	d134      	bne.n	80098f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800988e:	4b1e      	ldr	r3, [pc, #120]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d003      	beq.n	80098a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d003      	beq.n	80098ac <HAL_RCC_GetSysClockFreq+0xac>
 80098a4:	e005      	b.n	80098b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80098a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009910 <HAL_RCC_GetSysClockFreq+0x110>)
 80098a8:	617b      	str	r3, [r7, #20]
      break;
 80098aa:	e005      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80098ac:	4b19      	ldr	r3, [pc, #100]	@ (8009914 <HAL_RCC_GetSysClockFreq+0x114>)
 80098ae:	617b      	str	r3, [r7, #20]
      break;
 80098b0:	e002      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	617b      	str	r3, [r7, #20]
      break;
 80098b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098b8:	4b13      	ldr	r3, [pc, #76]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	091b      	lsrs	r3, r3, #4
 80098be:	f003 0307 	and.w	r3, r3, #7
 80098c2:	3301      	adds	r3, #1
 80098c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80098c6:	4b10      	ldr	r3, [pc, #64]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	fb03 f202 	mul.w	r2, r3, r2
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098de:	4b0a      	ldr	r3, [pc, #40]	@ (8009908 <HAL_RCC_GetSysClockFreq+0x108>)
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	0e5b      	lsrs	r3, r3, #25
 80098e4:	f003 0303 	and.w	r3, r3, #3
 80098e8:	3301      	adds	r3, #1
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80098f8:	69bb      	ldr	r3, [r7, #24]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3724      	adds	r7, #36	@ 0x24
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	40021000 	.word	0x40021000
 800990c:	0800bff0 	.word	0x0800bff0
 8009910:	00f42400 	.word	0x00f42400
 8009914:	007a1200 	.word	0x007a1200

08009918 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800991c:	4b03      	ldr	r3, [pc, #12]	@ (800992c <HAL_RCC_GetHCLKFreq+0x14>)
 800991e:	681b      	ldr	r3, [r3, #0]
}
 8009920:	4618      	mov	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	20000360 	.word	0x20000360

08009930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009934:	f7ff fff0 	bl	8009918 <HAL_RCC_GetHCLKFreq>
 8009938:	4602      	mov	r2, r0
 800993a:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	0a1b      	lsrs	r3, r3, #8
 8009940:	f003 0307 	and.w	r3, r3, #7
 8009944:	4904      	ldr	r1, [pc, #16]	@ (8009958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009946:	5ccb      	ldrb	r3, [r1, r3]
 8009948:	f003 031f 	and.w	r3, r3, #31
 800994c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009950:	4618      	mov	r0, r3
 8009952:	bd80      	pop	{r7, pc}
 8009954:	40021000 	.word	0x40021000
 8009958:	0800bfe8 	.word	0x0800bfe8

0800995c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009960:	f7ff ffda 	bl	8009918 <HAL_RCC_GetHCLKFreq>
 8009964:	4602      	mov	r2, r0
 8009966:	4b06      	ldr	r3, [pc, #24]	@ (8009980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	0adb      	lsrs	r3, r3, #11
 800996c:	f003 0307 	and.w	r3, r3, #7
 8009970:	4904      	ldr	r1, [pc, #16]	@ (8009984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009972:	5ccb      	ldrb	r3, [r1, r3]
 8009974:	f003 031f 	and.w	r3, r3, #31
 8009978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800997c:	4618      	mov	r0, r3
 800997e:	bd80      	pop	{r7, pc}
 8009980:	40021000 	.word	0x40021000
 8009984:	0800bfe8 	.word	0x0800bfe8

08009988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009990:	2300      	movs	r3, #0
 8009992:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009994:	4b2a      	ldr	r3, [pc, #168]	@ (8009a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d003      	beq.n	80099a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80099a0:	f7ff f968 	bl	8008c74 <HAL_PWREx_GetVoltageRange>
 80099a4:	6178      	str	r0, [r7, #20]
 80099a6:	e014      	b.n	80099d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80099a8:	4b25      	ldr	r3, [pc, #148]	@ (8009a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ac:	4a24      	ldr	r2, [pc, #144]	@ (8009a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80099b4:	4b22      	ldr	r3, [pc, #136]	@ (8009a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80099c0:	f7ff f958 	bl	8008c74 <HAL_PWREx_GetVoltageRange>
 80099c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80099c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099d8:	d10b      	bne.n	80099f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b80      	cmp	r3, #128	@ 0x80
 80099de:	d919      	bls.n	8009a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80099e4:	d902      	bls.n	80099ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80099e6:	2302      	movs	r3, #2
 80099e8:	613b      	str	r3, [r7, #16]
 80099ea:	e013      	b.n	8009a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80099ec:	2301      	movs	r3, #1
 80099ee:	613b      	str	r3, [r7, #16]
 80099f0:	e010      	b.n	8009a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b80      	cmp	r3, #128	@ 0x80
 80099f6:	d902      	bls.n	80099fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80099f8:	2303      	movs	r3, #3
 80099fa:	613b      	str	r3, [r7, #16]
 80099fc:	e00a      	b.n	8009a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b80      	cmp	r3, #128	@ 0x80
 8009a02:	d102      	bne.n	8009a0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009a04:	2302      	movs	r3, #2
 8009a06:	613b      	str	r3, [r7, #16]
 8009a08:	e004      	b.n	8009a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b70      	cmp	r3, #112	@ 0x70
 8009a0e:	d101      	bne.n	8009a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009a10:	2301      	movs	r3, #1
 8009a12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009a14:	4b0b      	ldr	r3, [pc, #44]	@ (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f023 0207 	bic.w	r2, r3, #7
 8009a1c:	4909      	ldr	r1, [pc, #36]	@ (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009a24:	4b07      	ldr	r3, [pc, #28]	@ (8009a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d001      	beq.n	8009a36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40021000 	.word	0x40021000
 8009a44:	40022000 	.word	0x40022000

08009a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a50:	2300      	movs	r3, #0
 8009a52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a54:	2300      	movs	r3, #0
 8009a56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d041      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009a6c:	d02a      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009a6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009a72:	d824      	bhi.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a78:	d008      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009a7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a7e:	d81e      	bhi.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00a      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009a84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a88:	d010      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009a8a:	e018      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009a8c:	4b86      	ldr	r3, [pc, #536]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	4a85      	ldr	r2, [pc, #532]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009a98:	e015      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 facd 	bl	800a040 <RCCEx_PLLSAI1_Config>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009aaa:	e00c      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3320      	adds	r3, #32
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 fbb6 	bl	800a224 <RCCEx_PLLSAI2_Config>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009abc:	e003      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	74fb      	strb	r3, [r7, #19]
      break;
 8009ac2:	e000      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac6:	7cfb      	ldrb	r3, [r7, #19]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10b      	bne.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009acc:	4b76      	ldr	r3, [pc, #472]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ada:	4973      	ldr	r1, [pc, #460]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009ae2:	e001      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae4:	7cfb      	ldrb	r3, [r7, #19]
 8009ae6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d041      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009afc:	d02a      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009afe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b02:	d824      	bhi.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009b04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b08:	d008      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009b0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b0e:	d81e      	bhi.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00a      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b18:	d010      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009b1a:	e018      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009b1c:	4b62      	ldr	r3, [pc, #392]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	4a61      	ldr	r2, [pc, #388]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b28:	e015      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	2100      	movs	r1, #0
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 fa85 	bl	800a040 <RCCEx_PLLSAI1_Config>
 8009b36:	4603      	mov	r3, r0
 8009b38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b3a:	e00c      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3320      	adds	r3, #32
 8009b40:	2100      	movs	r1, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 fb6e 	bl	800a224 <RCCEx_PLLSAI2_Config>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009b4c:	e003      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	74fb      	strb	r3, [r7, #19]
      break;
 8009b52:	e000      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b56:	7cfb      	ldrb	r3, [r7, #19]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10b      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009b5c:	4b52      	ldr	r3, [pc, #328]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b6a:	494f      	ldr	r1, [pc, #316]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009b72:	e001      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b74:	7cfb      	ldrb	r3, [r7, #19]
 8009b76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 80a0 	beq.w	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b86:	2300      	movs	r3, #0
 8009b88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009b8a:	4b47      	ldr	r3, [pc, #284]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e000      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00d      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ba0:	4b41      	ldr	r3, [pc, #260]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba4:	4a40      	ldr	r2, [pc, #256]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bac:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bb4:	60bb      	str	r3, [r7, #8]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8009cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8009cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bc8:	f7fa f9a4 	bl	8003f14 <HAL_GetTick>
 8009bcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009bce:	e009      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bd0:	f7fa f9a0 	bl	8003f14 <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d902      	bls.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	74fb      	strb	r3, [r7, #19]
        break;
 8009be2:	e005      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009be4:	4b31      	ldr	r3, [pc, #196]	@ (8009cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0ef      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009bf0:	7cfb      	ldrb	r3, [r7, #19]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d15c      	bne.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01f      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d019      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009c14:	4b24      	ldr	r3, [pc, #144]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c20:	4b21      	ldr	r3, [pc, #132]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c26:	4a20      	ldr	r2, [pc, #128]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c30:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c36:	4a1c      	ldr	r2, [pc, #112]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c40:	4a19      	ldr	r2, [pc, #100]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c52:	f7fa f95f 	bl	8003f14 <HAL_GetTick>
 8009c56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c58:	e00b      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c5a:	f7fa f95b 	bl	8003f14 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d902      	bls.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	74fb      	strb	r3, [r7, #19]
            break;
 8009c70:	e006      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c78:	f003 0302 	and.w	r3, r3, #2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0ec      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009c80:	7cfb      	ldrb	r3, [r7, #19]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10c      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c86:	4b08      	ldr	r3, [pc, #32]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c96:	4904      	ldr	r1, [pc, #16]	@ (8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009c9e:	e009      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ca0:	7cfb      	ldrb	r3, [r7, #19]
 8009ca2:	74bb      	strb	r3, [r7, #18]
 8009ca4:	e006      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009ca6:	bf00      	nop
 8009ca8:	40021000 	.word	0x40021000
 8009cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb0:	7cfb      	ldrb	r3, [r7, #19]
 8009cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009cb4:	7c7b      	ldrb	r3, [r7, #17]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d105      	bne.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cba:	4ba6      	ldr	r3, [pc, #664]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cbe:	4aa5      	ldr	r2, [pc, #660]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cd2:	4ba0      	ldr	r3, [pc, #640]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cd8:	f023 0203 	bic.w	r2, r3, #3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce0:	499c      	ldr	r1, [pc, #624]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0302 	and.w	r3, r3, #2
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00a      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009cf4:	4b97      	ldr	r3, [pc, #604]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cfa:	f023 020c 	bic.w	r2, r3, #12
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d02:	4994      	ldr	r1, [pc, #592]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d16:	4b8f      	ldr	r3, [pc, #572]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d24:	498b      	ldr	r1, [pc, #556]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d26:	4313      	orrs	r3, r2
 8009d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0308 	and.w	r3, r3, #8
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00a      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d38:	4b86      	ldr	r3, [pc, #536]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d46:	4983      	ldr	r1, [pc, #524]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00a      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d5a:	4b7e      	ldr	r3, [pc, #504]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d68:	497a      	ldr	r1, [pc, #488]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0320 	and.w	r3, r3, #32
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00a      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d7c:	4b75      	ldr	r3, [pc, #468]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d8a:	4972      	ldr	r1, [pc, #456]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dac:	4969      	ldr	r1, [pc, #420]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00a      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009dc0:	4b64      	ldr	r3, [pc, #400]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dce:	4961      	ldr	r1, [pc, #388]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00a      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009de2:	4b5c      	ldr	r3, [pc, #368]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009df0:	4958      	ldr	r1, [pc, #352]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00a      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009e04:	4b53      	ldr	r3, [pc, #332]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e12:	4950      	ldr	r1, [pc, #320]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e26:	4b4b      	ldr	r3, [pc, #300]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e34:	4947      	ldr	r1, [pc, #284]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00a      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e48:	4b42      	ldr	r3, [pc, #264]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e4e:	f023 0203 	bic.w	r2, r3, #3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e56:	493f      	ldr	r1, [pc, #252]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d028      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e78:	4936      	ldr	r1, [pc, #216]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e88:	d106      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e8a:	4b32      	ldr	r3, [pc, #200]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	4a31      	ldr	r2, [pc, #196]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009e90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e94:	60d3      	str	r3, [r2, #12]
 8009e96:	e011      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ea0:	d10c      	bne.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 f8c9 	bl	800a040 <RCCEx_PLLSAI1_Config>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009eb2:	7cfb      	ldrb	r3, [r7, #19]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8009eb8:	7cfb      	ldrb	r3, [r7, #19]
 8009eba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d028      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ec8:	4b22      	ldr	r3, [pc, #136]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ece:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ed6:	491f      	ldr	r1, [pc, #124]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ee2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ee6:	d106      	bne.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	4a19      	ldr	r2, [pc, #100]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ef2:	60d3      	str	r3, [r2, #12]
 8009ef4:	e011      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009efa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009efe:	d10c      	bne.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3304      	adds	r3, #4
 8009f04:	2101      	movs	r1, #1
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 f89a 	bl	800a040 <RCCEx_PLLSAI1_Config>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f10:	7cfb      	ldrb	r3, [r7, #19]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8009f16:	7cfb      	ldrb	r3, [r7, #19]
 8009f18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d02a      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f26:	4b0b      	ldr	r3, [pc, #44]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f34:	4907      	ldr	r1, [pc, #28]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f44:	d108      	bne.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f46:	4b03      	ldr	r3, [pc, #12]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	4a02      	ldr	r2, [pc, #8]	@ (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8009f4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f50:	60d3      	str	r3, [r2, #12]
 8009f52:	e013      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8009f54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f60:	d10c      	bne.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3304      	adds	r3, #4
 8009f66:	2101      	movs	r1, #1
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 f869 	bl	800a040 <RCCEx_PLLSAI1_Config>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009f72:	7cfb      	ldrb	r3, [r7, #19]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8009f78:	7cfb      	ldrb	r3, [r7, #19]
 8009f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d02f      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f88:	4b2c      	ldr	r3, [pc, #176]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f96:	4929      	ldr	r1, [pc, #164]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fa6:	d10d      	bne.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3304      	adds	r3, #4
 8009fac:	2102      	movs	r1, #2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 f846 	bl	800a040 <RCCEx_PLLSAI1_Config>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009fb8:	7cfb      	ldrb	r3, [r7, #19]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d014      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009fbe:	7cfb      	ldrb	r3, [r7, #19]
 8009fc0:	74bb      	strb	r3, [r7, #18]
 8009fc2:	e011      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fcc:	d10c      	bne.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3320      	adds	r3, #32
 8009fd2:	2102      	movs	r1, #2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 f925 	bl	800a224 <RCCEx_PLLSAI2_Config>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009fde:	7cfb      	ldrb	r3, [r7, #19]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8009fe4:	7cfb      	ldrb	r3, [r7, #19]
 8009fe6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00b      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009ff4:	4b11      	ldr	r3, [pc, #68]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ffa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a004:	490d      	ldr	r1, [pc, #52]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a006:	4313      	orrs	r3, r2
 800a008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00b      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a018:	4b08      	ldr	r3, [pc, #32]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a01e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a028:	4904      	ldr	r1, [pc, #16]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a030:	7cbb      	ldrb	r3, [r7, #18]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	40021000 	.word	0x40021000

0800a040 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a04e:	4b74      	ldr	r3, [pc, #464]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d018      	beq.n	800a08c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a05a:	4b71      	ldr	r3, [pc, #452]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f003 0203 	and.w	r2, r3, #3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d10d      	bne.n	800a086 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
       ||
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a072:	4b6b      	ldr	r3, [pc, #428]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	091b      	lsrs	r3, r3, #4
 800a078:	f003 0307 	and.w	r3, r3, #7
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
       ||
 800a082:	429a      	cmp	r2, r3
 800a084:	d047      	beq.n	800a116 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	73fb      	strb	r3, [r7, #15]
 800a08a:	e044      	b.n	800a116 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b03      	cmp	r3, #3
 800a092:	d018      	beq.n	800a0c6 <RCCEx_PLLSAI1_Config+0x86>
 800a094:	2b03      	cmp	r3, #3
 800a096:	d825      	bhi.n	800a0e4 <RCCEx_PLLSAI1_Config+0xa4>
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d002      	beq.n	800a0a2 <RCCEx_PLLSAI1_Config+0x62>
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d009      	beq.n	800a0b4 <RCCEx_PLLSAI1_Config+0x74>
 800a0a0:	e020      	b.n	800a0e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0a2:	4b5f      	ldr	r3, [pc, #380]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0302 	and.w	r3, r3, #2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d11d      	bne.n	800a0ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0b2:	e01a      	b.n	800a0ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0b4:	4b5a      	ldr	r3, [pc, #360]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d116      	bne.n	800a0ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0c4:	e013      	b.n	800a0ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a0c6:	4b56      	ldr	r3, [pc, #344]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10f      	bne.n	800a0f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a0d2:	4b53      	ldr	r3, [pc, #332]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d109      	bne.n	800a0f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0e2:	e006      	b.n	800a0f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e8:	e004      	b.n	800a0f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0ea:	bf00      	nop
 800a0ec:	e002      	b.n	800a0f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0ee:	bf00      	nop
 800a0f0:	e000      	b.n	800a0f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a0f2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10d      	bne.n	800a116 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a0fa:	4b49      	ldr	r3, [pc, #292]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6819      	ldr	r1, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	430b      	orrs	r3, r1
 800a110:	4943      	ldr	r1, [pc, #268]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a112:	4313      	orrs	r3, r2
 800a114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d17c      	bne.n	800a216 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a11c:	4b40      	ldr	r3, [pc, #256]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a3f      	ldr	r2, [pc, #252]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a128:	f7f9 fef4 	bl	8003f14 <HAL_GetTick>
 800a12c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a12e:	e009      	b.n	800a144 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a130:	f7f9 fef0 	bl	8003f14 <HAL_GetTick>
 800a134:	4602      	mov	r2, r0
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d902      	bls.n	800a144 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	73fb      	strb	r3, [r7, #15]
        break;
 800a142:	e005      	b.n	800a150 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a144:	4b36      	ldr	r3, [pc, #216]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1ef      	bne.n	800a130 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d15f      	bne.n	800a216 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d110      	bne.n	800a17e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a15c:	4b30      	ldr	r3, [pc, #192]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800a164:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	6892      	ldr	r2, [r2, #8]
 800a16c:	0211      	lsls	r1, r2, #8
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68d2      	ldr	r2, [r2, #12]
 800a172:	06d2      	lsls	r2, r2, #27
 800a174:	430a      	orrs	r2, r1
 800a176:	492a      	ldr	r1, [pc, #168]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	610b      	str	r3, [r1, #16]
 800a17c:	e027      	b.n	800a1ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d112      	bne.n	800a1aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a184:	4b26      	ldr	r3, [pc, #152]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800a18c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6892      	ldr	r2, [r2, #8]
 800a194:	0211      	lsls	r1, r2, #8
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	6912      	ldr	r2, [r2, #16]
 800a19a:	0852      	lsrs	r2, r2, #1
 800a19c:	3a01      	subs	r2, #1
 800a19e:	0552      	lsls	r2, r2, #21
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	491f      	ldr	r1, [pc, #124]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	610b      	str	r3, [r1, #16]
 800a1a8:	e011      	b.n	800a1ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a1aa:	4b1d      	ldr	r3, [pc, #116]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a1b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6892      	ldr	r2, [r2, #8]
 800a1ba:	0211      	lsls	r1, r2, #8
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6952      	ldr	r2, [r2, #20]
 800a1c0:	0852      	lsrs	r2, r2, #1
 800a1c2:	3a01      	subs	r2, #1
 800a1c4:	0652      	lsls	r2, r2, #25
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	4915      	ldr	r1, [pc, #84]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a1ce:	4b14      	ldr	r3, [pc, #80]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a13      	ldr	r2, [pc, #76]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a1d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1da:	f7f9 fe9b 	bl	8003f14 <HAL_GetTick>
 800a1de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a1e0:	e009      	b.n	800a1f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a1e2:	f7f9 fe97 	bl	8003f14 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d902      	bls.n	800a1f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	73fb      	strb	r3, [r7, #15]
          break;
 800a1f4:	e005      	b.n	800a202 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0ef      	beq.n	800a1e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d106      	bne.n	800a216 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a208:	4b05      	ldr	r3, [pc, #20]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	4903      	ldr	r1, [pc, #12]	@ (800a220 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a212:	4313      	orrs	r3, r2
 800a214:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a216:	7bfb      	ldrb	r3, [r7, #15]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	40021000 	.word	0x40021000

0800a224 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a232:	4b69      	ldr	r3, [pc, #420]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f003 0303 	and.w	r3, r3, #3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d018      	beq.n	800a270 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a23e:	4b66      	ldr	r3, [pc, #408]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f003 0203 	and.w	r2, r3, #3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d10d      	bne.n	800a26a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
       ||
 800a252:	2b00      	cmp	r3, #0
 800a254:	d009      	beq.n	800a26a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a256:	4b60      	ldr	r3, [pc, #384]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	091b      	lsrs	r3, r3, #4
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
       ||
 800a266:	429a      	cmp	r2, r3
 800a268:	d047      	beq.n	800a2fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	73fb      	strb	r3, [r7, #15]
 800a26e:	e044      	b.n	800a2fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d018      	beq.n	800a2aa <RCCEx_PLLSAI2_Config+0x86>
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d825      	bhi.n	800a2c8 <RCCEx_PLLSAI2_Config+0xa4>
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d002      	beq.n	800a286 <RCCEx_PLLSAI2_Config+0x62>
 800a280:	2b02      	cmp	r3, #2
 800a282:	d009      	beq.n	800a298 <RCCEx_PLLSAI2_Config+0x74>
 800a284:	e020      	b.n	800a2c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a286:	4b54      	ldr	r3, [pc, #336]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d11d      	bne.n	800a2ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a296:	e01a      	b.n	800a2ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a298:	4b4f      	ldr	r3, [pc, #316]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d116      	bne.n	800a2d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2a8:	e013      	b.n	800a2d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a2aa:	4b4b      	ldr	r3, [pc, #300]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10f      	bne.n	800a2d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a2b6:	4b48      	ldr	r3, [pc, #288]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d109      	bne.n	800a2d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2c6:	e006      	b.n	800a2d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a2cc:	e004      	b.n	800a2d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2ce:	bf00      	nop
 800a2d0:	e002      	b.n	800a2d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2d2:	bf00      	nop
 800a2d4:	e000      	b.n	800a2d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a2d6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10d      	bne.n	800a2fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a2de:	4b3e      	ldr	r3, [pc, #248]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6819      	ldr	r1, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	430b      	orrs	r3, r1
 800a2f4:	4938      	ldr	r1, [pc, #224]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d166      	bne.n	800a3ce <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a300:	4b35      	ldr	r3, [pc, #212]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a34      	ldr	r2, [pc, #208]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a30a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a30c:	f7f9 fe02 	bl	8003f14 <HAL_GetTick>
 800a310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a312:	e009      	b.n	800a328 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a314:	f7f9 fdfe 	bl	8003f14 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d902      	bls.n	800a328 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	73fb      	strb	r3, [r7, #15]
        break;
 800a326:	e005      	b.n	800a334 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a328:	4b2b      	ldr	r3, [pc, #172]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1ef      	bne.n	800a314 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d149      	bne.n	800a3ce <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d110      	bne.n	800a362 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a340:	4b25      	ldr	r3, [pc, #148]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800a348:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	6892      	ldr	r2, [r2, #8]
 800a350:	0211      	lsls	r1, r2, #8
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	68d2      	ldr	r2, [r2, #12]
 800a356:	06d2      	lsls	r2, r2, #27
 800a358:	430a      	orrs	r2, r1
 800a35a:	491f      	ldr	r1, [pc, #124]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	614b      	str	r3, [r1, #20]
 800a360:	e011      	b.n	800a386 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a362:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a36a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	6892      	ldr	r2, [r2, #8]
 800a372:	0211      	lsls	r1, r2, #8
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6912      	ldr	r2, [r2, #16]
 800a378:	0852      	lsrs	r2, r2, #1
 800a37a:	3a01      	subs	r2, #1
 800a37c:	0652      	lsls	r2, r2, #25
 800a37e:	430a      	orrs	r2, r1
 800a380:	4915      	ldr	r1, [pc, #84]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a382:	4313      	orrs	r3, r2
 800a384:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a386:	4b14      	ldr	r3, [pc, #80]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a13      	ldr	r2, [pc, #76]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a38c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a390:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a392:	f7f9 fdbf 	bl	8003f14 <HAL_GetTick>
 800a396:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a398:	e009      	b.n	800a3ae <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a39a:	f7f9 fdbb 	bl	8003f14 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d902      	bls.n	800a3ae <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	73fb      	strb	r3, [r7, #15]
          break;
 800a3ac:	e005      	b.n	800a3ba <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0ef      	beq.n	800a39a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d106      	bne.n	800a3ce <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a3c0:	4b05      	ldr	r3, [pc, #20]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a3c2:	695a      	ldr	r2, [r3, #20]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	4903      	ldr	r1, [pc, #12]	@ (800a3d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	40021000 	.word	0x40021000

0800a3dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e049      	b.n	800a482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7f9 f9fe 	bl	8003804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3304      	adds	r3, #4
 800a418:	4619      	mov	r1, r3
 800a41a:	4610      	mov	r0, r2
 800a41c:	f000 f9d0 	bl	800a7c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d001      	beq.n	800a4a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e04f      	b.n	800a544 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68da      	ldr	r2, [r3, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f042 0201 	orr.w	r2, r2, #1
 800a4ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a23      	ldr	r2, [pc, #140]	@ (800a550 <HAL_TIM_Base_Start_IT+0xc4>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d01d      	beq.n	800a502 <HAL_TIM_Base_Start_IT+0x76>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4ce:	d018      	beq.n	800a502 <HAL_TIM_Base_Start_IT+0x76>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a554 <HAL_TIM_Base_Start_IT+0xc8>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d013      	beq.n	800a502 <HAL_TIM_Base_Start_IT+0x76>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a1e      	ldr	r2, [pc, #120]	@ (800a558 <HAL_TIM_Base_Start_IT+0xcc>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d00e      	beq.n	800a502 <HAL_TIM_Base_Start_IT+0x76>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a1c      	ldr	r2, [pc, #112]	@ (800a55c <HAL_TIM_Base_Start_IT+0xd0>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d009      	beq.n	800a502 <HAL_TIM_Base_Start_IT+0x76>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a1b      	ldr	r2, [pc, #108]	@ (800a560 <HAL_TIM_Base_Start_IT+0xd4>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d004      	beq.n	800a502 <HAL_TIM_Base_Start_IT+0x76>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a19      	ldr	r2, [pc, #100]	@ (800a564 <HAL_TIM_Base_Start_IT+0xd8>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d115      	bne.n	800a52e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	4b17      	ldr	r3, [pc, #92]	@ (800a568 <HAL_TIM_Base_Start_IT+0xdc>)
 800a50a:	4013      	ands	r3, r2
 800a50c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b06      	cmp	r3, #6
 800a512:	d015      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0xb4>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a51a:	d011      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f042 0201 	orr.w	r2, r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a52c:	e008      	b.n	800a540 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f042 0201 	orr.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	e000      	b.n	800a542 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a540:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	40012c00 	.word	0x40012c00
 800a554:	40000400 	.word	0x40000400
 800a558:	40000800 	.word	0x40000800
 800a55c:	40000c00 	.word	0x40000c00
 800a560:	40013400 	.word	0x40013400
 800a564:	40014000 	.word	0x40014000
 800a568:	00010007 	.word	0x00010007

0800a56c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d020      	beq.n	800a5d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01b      	beq.n	800a5d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f06f 0202 	mvn.w	r2, #2
 800a5a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f8e4 	bl	800a784 <HAL_TIM_IC_CaptureCallback>
 800a5bc:	e005      	b.n	800a5ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f8d6 	bl	800a770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f8e7 	bl	800a798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f003 0304 	and.w	r3, r3, #4
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d020      	beq.n	800a61c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01b      	beq.n	800a61c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f06f 0204 	mvn.w	r2, #4
 800a5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2202      	movs	r2, #2
 800a5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f8be 	bl	800a784 <HAL_TIM_IC_CaptureCallback>
 800a608:	e005      	b.n	800a616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f8b0 	bl	800a770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f8c1 	bl	800a798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f003 0308 	and.w	r3, r3, #8
 800a622:	2b00      	cmp	r3, #0
 800a624:	d020      	beq.n	800a668 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d01b      	beq.n	800a668 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f06f 0208 	mvn.w	r2, #8
 800a638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2204      	movs	r2, #4
 800a63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f003 0303 	and.w	r3, r3, #3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f898 	bl	800a784 <HAL_TIM_IC_CaptureCallback>
 800a654:	e005      	b.n	800a662 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f88a 	bl	800a770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f89b 	bl	800a798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f003 0310 	and.w	r3, r3, #16
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d020      	beq.n	800a6b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f003 0310 	and.w	r3, r3, #16
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d01b      	beq.n	800a6b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f06f 0210 	mvn.w	r2, #16
 800a684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2208      	movs	r2, #8
 800a68a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f872 	bl	800a784 <HAL_TIM_IC_CaptureCallback>
 800a6a0:	e005      	b.n	800a6ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f864 	bl	800a770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f875 	bl	800a798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00c      	beq.n	800a6d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d007      	beq.n	800a6d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f06f 0201 	mvn.w	r2, #1
 800a6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7f8 fea0 	bl	8003418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00c      	beq.n	800a6fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d007      	beq.n	800a6fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a6f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f98e 	bl	800aa18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00c      	beq.n	800a720 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d007      	beq.n	800a720 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f986 	bl	800aa2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00c      	beq.n	800a744 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a73c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f834 	bl	800a7ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0220 	mvn.w	r2, #32
 800a760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f94e 	bl	800aa04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a768:	bf00      	nop
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a40      	ldr	r2, [pc, #256]	@ (800a8d4 <TIM_Base_SetConfig+0x114>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d013      	beq.n	800a800 <TIM_Base_SetConfig+0x40>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7de:	d00f      	beq.n	800a800 <TIM_Base_SetConfig+0x40>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a3d      	ldr	r2, [pc, #244]	@ (800a8d8 <TIM_Base_SetConfig+0x118>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d00b      	beq.n	800a800 <TIM_Base_SetConfig+0x40>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a3c      	ldr	r2, [pc, #240]	@ (800a8dc <TIM_Base_SetConfig+0x11c>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d007      	beq.n	800a800 <TIM_Base_SetConfig+0x40>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a3b      	ldr	r2, [pc, #236]	@ (800a8e0 <TIM_Base_SetConfig+0x120>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d003      	beq.n	800a800 <TIM_Base_SetConfig+0x40>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a3a      	ldr	r2, [pc, #232]	@ (800a8e4 <TIM_Base_SetConfig+0x124>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d108      	bne.n	800a812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a2f      	ldr	r2, [pc, #188]	@ (800a8d4 <TIM_Base_SetConfig+0x114>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d01f      	beq.n	800a85a <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a820:	d01b      	beq.n	800a85a <TIM_Base_SetConfig+0x9a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a2c      	ldr	r2, [pc, #176]	@ (800a8d8 <TIM_Base_SetConfig+0x118>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d017      	beq.n	800a85a <TIM_Base_SetConfig+0x9a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a2b      	ldr	r2, [pc, #172]	@ (800a8dc <TIM_Base_SetConfig+0x11c>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d013      	beq.n	800a85a <TIM_Base_SetConfig+0x9a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a2a      	ldr	r2, [pc, #168]	@ (800a8e0 <TIM_Base_SetConfig+0x120>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d00f      	beq.n	800a85a <TIM_Base_SetConfig+0x9a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a29      	ldr	r2, [pc, #164]	@ (800a8e4 <TIM_Base_SetConfig+0x124>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d00b      	beq.n	800a85a <TIM_Base_SetConfig+0x9a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a28      	ldr	r2, [pc, #160]	@ (800a8e8 <TIM_Base_SetConfig+0x128>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d007      	beq.n	800a85a <TIM_Base_SetConfig+0x9a>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a27      	ldr	r2, [pc, #156]	@ (800a8ec <TIM_Base_SetConfig+0x12c>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d003      	beq.n	800a85a <TIM_Base_SetConfig+0x9a>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a26      	ldr	r2, [pc, #152]	@ (800a8f0 <TIM_Base_SetConfig+0x130>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d108      	bne.n	800a86c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	4313      	orrs	r3, r2
 800a86a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	689a      	ldr	r2, [r3, #8]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a10      	ldr	r2, [pc, #64]	@ (800a8d4 <TIM_Base_SetConfig+0x114>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00f      	beq.n	800a8b8 <TIM_Base_SetConfig+0xf8>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a12      	ldr	r2, [pc, #72]	@ (800a8e4 <TIM_Base_SetConfig+0x124>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d00b      	beq.n	800a8b8 <TIM_Base_SetConfig+0xf8>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a11      	ldr	r2, [pc, #68]	@ (800a8e8 <TIM_Base_SetConfig+0x128>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d007      	beq.n	800a8b8 <TIM_Base_SetConfig+0xf8>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a10      	ldr	r2, [pc, #64]	@ (800a8ec <TIM_Base_SetConfig+0x12c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d003      	beq.n	800a8b8 <TIM_Base_SetConfig+0xf8>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a0f      	ldr	r2, [pc, #60]	@ (800a8f0 <TIM_Base_SetConfig+0x130>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d103      	bne.n	800a8c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	691a      	ldr	r2, [r3, #16]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	615a      	str	r2, [r3, #20]
}
 800a8c6:	bf00      	nop
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	40012c00 	.word	0x40012c00
 800a8d8:	40000400 	.word	0x40000400
 800a8dc:	40000800 	.word	0x40000800
 800a8e0:	40000c00 	.word	0x40000c00
 800a8e4:	40013400 	.word	0x40013400
 800a8e8:	40014000 	.word	0x40014000
 800a8ec:	40014400 	.word	0x40014400
 800a8f0:	40014800 	.word	0x40014800

0800a8f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a908:	2302      	movs	r3, #2
 800a90a:	e068      	b.n	800a9de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2202      	movs	r2, #2
 800a918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a2e      	ldr	r2, [pc, #184]	@ (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d004      	beq.n	800a940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a2d      	ldr	r2, [pc, #180]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d108      	bne.n	800a952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4313      	orrs	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a1e      	ldr	r2, [pc, #120]	@ (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d01d      	beq.n	800a9b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a97e:	d018      	beq.n	800a9b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a1b      	ldr	r2, [pc, #108]	@ (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d013      	beq.n	800a9b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a1a      	ldr	r2, [pc, #104]	@ (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00e      	beq.n	800a9b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a18      	ldr	r2, [pc, #96]	@ (800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d009      	beq.n	800a9b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a13      	ldr	r2, [pc, #76]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d004      	beq.n	800a9b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a14      	ldr	r2, [pc, #80]	@ (800aa00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d10c      	bne.n	800a9cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	40012c00 	.word	0x40012c00
 800a9f0:	40013400 	.word	0x40013400
 800a9f4:	40000400 	.word	0x40000400
 800a9f8:	40000800 	.word	0x40000800
 800a9fc:	40000c00 	.word	0x40000c00
 800aa00:	40014000 	.word	0x40014000

0800aa04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e040      	b.n	800aad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d106      	bne.n	800aa68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7f8 fef4 	bl	8003850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2224      	movs	r2, #36	@ 0x24
 800aa6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f022 0201 	bic.w	r2, r2, #1
 800aa7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fe40 	bl	800b70c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fb85 	bl	800b19c <UART_SetConfig>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d101      	bne.n	800aa9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e01b      	b.n	800aad4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aaaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689a      	ldr	r2, [r3, #8]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aaba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f042 0201 	orr.w	r2, r2, #1
 800aaca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 febf 	bl	800b850 <UART_CheckIdleState>
 800aad2:	4603      	mov	r3, r0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08a      	sub	sp, #40	@ 0x28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	4613      	mov	r3, r2
 800aae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaf0:	2b20      	cmp	r3, #32
 800aaf2:	d137      	bne.n	800ab64 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <HAL_UART_Receive_DMA+0x24>
 800aafa:	88fb      	ldrh	r3, [r7, #6]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e030      	b.n	800ab66 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a18      	ldr	r2, [pc, #96]	@ (800ab70 <HAL_UART_Receive_DMA+0x94>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d01f      	beq.n	800ab54 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d018      	beq.n	800ab54 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab36:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab40:	623b      	str	r3, [r7, #32]
 800ab42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	69f9      	ldr	r1, [r7, #28]
 800ab46:	6a3a      	ldr	r2, [r7, #32]
 800ab48:	e841 2300 	strex	r3, r2, [r1]
 800ab4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e6      	bne.n	800ab22 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ab54:	88fb      	ldrh	r3, [r7, #6]
 800ab56:	461a      	mov	r2, r3
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 ff88 	bl	800ba70 <UART_Start_Receive_DMA>
 800ab60:	4603      	mov	r3, r0
 800ab62:	e000      	b.n	800ab66 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab64:	2302      	movs	r3, #2
  }
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3728      	adds	r7, #40	@ 0x28
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	40008000 	.word	0x40008000

0800ab74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b0ba      	sub	sp, #232	@ 0xe8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ab9e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aba2:	4013      	ands	r3, r2
 800aba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800abac:	2b00      	cmp	r3, #0
 800abae:	d115      	bne.n	800abdc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800abb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00f      	beq.n	800abdc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800abbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abc0:	f003 0320 	and.w	r3, r3, #32
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d009      	beq.n	800abdc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 82ae 	beq.w	800b12e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	4798      	blx	r3
      }
      return;
 800abda:	e2a8      	b.n	800b12e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800abdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 8117 	beq.w	800ae14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800abe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800abf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800abf6:	4b85      	ldr	r3, [pc, #532]	@ (800ae0c <HAL_UART_IRQHandler+0x298>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 810a 	beq.w	800ae14 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d011      	beq.n	800ac30 <HAL_UART_IRQHandler+0xbc>
 800ac0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00b      	beq.n	800ac30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac26:	f043 0201 	orr.w	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d011      	beq.n	800ac60 <HAL_UART_IRQHandler+0xec>
 800ac3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00b      	beq.n	800ac60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac56:	f043 0204 	orr.w	r2, r3, #4
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac64:	f003 0304 	and.w	r3, r3, #4
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d011      	beq.n	800ac90 <HAL_UART_IRQHandler+0x11c>
 800ac6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00b      	beq.n	800ac90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2204      	movs	r2, #4
 800ac7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac86:	f043 0202 	orr.w	r2, r3, #2
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d017      	beq.n	800accc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ac9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca0:	f003 0320 	and.w	r3, r3, #32
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d105      	bne.n	800acb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00b      	beq.n	800accc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2208      	movs	r2, #8
 800acba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acc2:	f043 0208 	orr.w	r2, r3, #8
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800accc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d012      	beq.n	800acfe <HAL_UART_IRQHandler+0x18a>
 800acd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00c      	beq.n	800acfe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acf4:	f043 0220 	orr.w	r2, r3, #32
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 8214 	beq.w	800b132 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ad0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad0e:	f003 0320 	and.w	r3, r3, #32
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00d      	beq.n	800ad32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ad16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad1a:	f003 0320 	and.w	r3, r3, #32
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d007      	beq.n	800ad32 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad46:	2b40      	cmp	r3, #64	@ 0x40
 800ad48:	d005      	beq.n	800ad56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ad4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d04f      	beq.n	800adf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 ff50 	bl	800bbfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad66:	2b40      	cmp	r3, #64	@ 0x40
 800ad68:	d141      	bne.n	800adee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3308      	adds	r3, #8
 800ad70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ad80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3308      	adds	r3, #8
 800ad92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ad96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ad9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ada2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ada6:	e841 2300 	strex	r3, r2, [r1]
 800adaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800adae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1d9      	bne.n	800ad6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d013      	beq.n	800ade6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adc2:	4a13      	ldr	r2, [pc, #76]	@ (800ae10 <HAL_UART_IRQHandler+0x29c>)
 800adc4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fa ffda 	bl	8005d84 <HAL_DMA_Abort_IT>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d017      	beq.n	800ae06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ade0:	4610      	mov	r0, r2
 800ade2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ade4:	e00f      	b.n	800ae06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f9c2 	bl	800b170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adec:	e00b      	b.n	800ae06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f9be 	bl	800b170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adf4:	e007      	b.n	800ae06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f9ba 	bl	800b170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ae04:	e195      	b.n	800b132 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae06:	bf00      	nop
    return;
 800ae08:	e193      	b.n	800b132 <HAL_UART_IRQHandler+0x5be>
 800ae0a:	bf00      	nop
 800ae0c:	04000120 	.word	0x04000120
 800ae10:	0800bead 	.word	0x0800bead

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	f040 814e 	bne.w	800b0ba <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ae1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae22:	f003 0310 	and.w	r3, r3, #16
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 8147 	beq.w	800b0ba <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ae2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae30:	f003 0310 	and.w	r3, r3, #16
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 8140 	beq.w	800b0ba <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2210      	movs	r2, #16
 800ae40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae4c:	2b40      	cmp	r3, #64	@ 0x40
 800ae4e:	f040 80b8 	bne.w	800afc2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f000 8167 	beq.w	800b136 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ae6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae72:	429a      	cmp	r2, r3
 800ae74:	f080 815f 	bcs.w	800b136 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 0320 	and.w	r3, r3, #32
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f040 8086 	bne.w	800afa0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aea0:	e853 3f00 	ldrex	r3, [r3]
 800aea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aeac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aeb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aec2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aeca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aece:	e841 2300 	strex	r3, r2, [r1]
 800aed2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1da      	bne.n	800ae94 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3308      	adds	r3, #8
 800aee4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aee8:	e853 3f00 	ldrex	r3, [r3]
 800aeec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aeee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aef0:	f023 0301 	bic.w	r3, r3, #1
 800aef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3308      	adds	r3, #8
 800aefe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800af06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e1      	bne.n	800aede <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3308      	adds	r3, #8
 800af20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3308      	adds	r3, #8
 800af3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800af3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800af44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af46:	e841 2300 	strex	r3, r2, [r1]
 800af4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800af4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1e3      	bne.n	800af1a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2220      	movs	r2, #32
 800af56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af70:	f023 0310 	bic.w	r3, r3, #16
 800af74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e4      	bne.n	800af60 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fa feb4 	bl	8005d08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f8e2 	bl	800b184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afc0:	e0b9      	b.n	800b136 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800afce:	b29b      	uxth	r3, r3
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800afdc:	b29b      	uxth	r3, r3
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 80ab 	beq.w	800b13a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800afe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 80a6 	beq.w	800b13a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	e853 3f00 	ldrex	r3, [r3]
 800affa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800affc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800affe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b002:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b010:	647b      	str	r3, [r7, #68]	@ 0x44
 800b012:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b018:	e841 2300 	strex	r3, r2, [r1]
 800b01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e4      	bne.n	800afee <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	3308      	adds	r3, #8
 800b02a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02e:	e853 3f00 	ldrex	r3, [r3]
 800b032:	623b      	str	r3, [r7, #32]
   return(result);
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	f023 0301 	bic.w	r3, r3, #1
 800b03a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3308      	adds	r3, #8
 800b044:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b048:	633a      	str	r2, [r7, #48]	@ 0x30
 800b04a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b04e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b050:	e841 2300 	strex	r3, r2, [r1]
 800b054:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e3      	bne.n	800b024 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2220      	movs	r2, #32
 800b060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	e853 3f00 	ldrex	r3, [r3]
 800b07c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f023 0310 	bic.w	r3, r3, #16
 800b084:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	461a      	mov	r2, r3
 800b08e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b096:	69b9      	ldr	r1, [r7, #24]
 800b098:	69fa      	ldr	r2, [r7, #28]
 800b09a:	e841 2300 	strex	r3, r2, [r1]
 800b09e:	617b      	str	r3, [r7, #20]
   return(result);
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1e4      	bne.n	800b070 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2202      	movs	r2, #2
 800b0aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b0ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f866 	bl	800b184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0b8:	e03f      	b.n	800b13a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00e      	beq.n	800b0e4 <HAL_UART_IRQHandler+0x570>
 800b0c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d008      	beq.n	800b0e4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b0da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 ff25 	bl	800bf2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0e2:	e02d      	b.n	800b140 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00e      	beq.n	800b10e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d008      	beq.n	800b10e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b100:	2b00      	cmp	r3, #0
 800b102:	d01c      	beq.n	800b13e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	4798      	blx	r3
    }
    return;
 800b10c:	e017      	b.n	800b13e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b116:	2b00      	cmp	r3, #0
 800b118:	d012      	beq.n	800b140 <HAL_UART_IRQHandler+0x5cc>
 800b11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b11e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00c      	beq.n	800b140 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fed6 	bl	800bed8 <UART_EndTransmit_IT>
    return;
 800b12c:	e008      	b.n	800b140 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b12e:	bf00      	nop
 800b130:	e006      	b.n	800b140 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b132:	bf00      	nop
 800b134:	e004      	b.n	800b140 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b136:	bf00      	nop
 800b138:	e002      	b.n	800b140 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b13a:	bf00      	nop
 800b13c:	e000      	b.n	800b140 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b13e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b140:	37e8      	adds	r7, #232	@ 0xe8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop

0800b148 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1a0:	b08a      	sub	sp, #40	@ 0x28
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	689a      	ldr	r2, [r3, #8]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	4ba4      	ldr	r3, [pc, #656]	@ (800b45c <UART_SetConfig+0x2c0>)
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	6812      	ldr	r2, [r2, #0]
 800b1d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	68da      	ldr	r2, [r3, #12]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	430a      	orrs	r2, r1
 800b1ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a99      	ldr	r2, [pc, #612]	@ (800b460 <UART_SetConfig+0x2c4>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d004      	beq.n	800b208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b204:	4313      	orrs	r3, r2
 800b206:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b218:	430a      	orrs	r2, r1
 800b21a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a90      	ldr	r2, [pc, #576]	@ (800b464 <UART_SetConfig+0x2c8>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d126      	bne.n	800b274 <UART_SetConfig+0xd8>
 800b226:	4b90      	ldr	r3, [pc, #576]	@ (800b468 <UART_SetConfig+0x2cc>)
 800b228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b22c:	f003 0303 	and.w	r3, r3, #3
 800b230:	2b03      	cmp	r3, #3
 800b232:	d81b      	bhi.n	800b26c <UART_SetConfig+0xd0>
 800b234:	a201      	add	r2, pc, #4	@ (adr r2, 800b23c <UART_SetConfig+0xa0>)
 800b236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23a:	bf00      	nop
 800b23c:	0800b24d 	.word	0x0800b24d
 800b240:	0800b25d 	.word	0x0800b25d
 800b244:	0800b255 	.word	0x0800b255
 800b248:	0800b265 	.word	0x0800b265
 800b24c:	2301      	movs	r3, #1
 800b24e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b252:	e116      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b254:	2302      	movs	r3, #2
 800b256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b25a:	e112      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b25c:	2304      	movs	r3, #4
 800b25e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b262:	e10e      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b264:	2308      	movs	r3, #8
 800b266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b26a:	e10a      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b26c:	2310      	movs	r3, #16
 800b26e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b272:	e106      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a7c      	ldr	r2, [pc, #496]	@ (800b46c <UART_SetConfig+0x2d0>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d138      	bne.n	800b2f0 <UART_SetConfig+0x154>
 800b27e:	4b7a      	ldr	r3, [pc, #488]	@ (800b468 <UART_SetConfig+0x2cc>)
 800b280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b284:	f003 030c 	and.w	r3, r3, #12
 800b288:	2b0c      	cmp	r3, #12
 800b28a:	d82d      	bhi.n	800b2e8 <UART_SetConfig+0x14c>
 800b28c:	a201      	add	r2, pc, #4	@ (adr r2, 800b294 <UART_SetConfig+0xf8>)
 800b28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b292:	bf00      	nop
 800b294:	0800b2c9 	.word	0x0800b2c9
 800b298:	0800b2e9 	.word	0x0800b2e9
 800b29c:	0800b2e9 	.word	0x0800b2e9
 800b2a0:	0800b2e9 	.word	0x0800b2e9
 800b2a4:	0800b2d9 	.word	0x0800b2d9
 800b2a8:	0800b2e9 	.word	0x0800b2e9
 800b2ac:	0800b2e9 	.word	0x0800b2e9
 800b2b0:	0800b2e9 	.word	0x0800b2e9
 800b2b4:	0800b2d1 	.word	0x0800b2d1
 800b2b8:	0800b2e9 	.word	0x0800b2e9
 800b2bc:	0800b2e9 	.word	0x0800b2e9
 800b2c0:	0800b2e9 	.word	0x0800b2e9
 800b2c4:	0800b2e1 	.word	0x0800b2e1
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b2ce:	e0d8      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b2d6:	e0d4      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b2d8:	2304      	movs	r3, #4
 800b2da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b2de:	e0d0      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b2e0:	2308      	movs	r3, #8
 800b2e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b2e6:	e0cc      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b2e8:	2310      	movs	r3, #16
 800b2ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b2ee:	e0c8      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a5e      	ldr	r2, [pc, #376]	@ (800b470 <UART_SetConfig+0x2d4>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d125      	bne.n	800b346 <UART_SetConfig+0x1aa>
 800b2fa:	4b5b      	ldr	r3, [pc, #364]	@ (800b468 <UART_SetConfig+0x2cc>)
 800b2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b300:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b304:	2b30      	cmp	r3, #48	@ 0x30
 800b306:	d016      	beq.n	800b336 <UART_SetConfig+0x19a>
 800b308:	2b30      	cmp	r3, #48	@ 0x30
 800b30a:	d818      	bhi.n	800b33e <UART_SetConfig+0x1a2>
 800b30c:	2b20      	cmp	r3, #32
 800b30e:	d00a      	beq.n	800b326 <UART_SetConfig+0x18a>
 800b310:	2b20      	cmp	r3, #32
 800b312:	d814      	bhi.n	800b33e <UART_SetConfig+0x1a2>
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <UART_SetConfig+0x182>
 800b318:	2b10      	cmp	r3, #16
 800b31a:	d008      	beq.n	800b32e <UART_SetConfig+0x192>
 800b31c:	e00f      	b.n	800b33e <UART_SetConfig+0x1a2>
 800b31e:	2300      	movs	r3, #0
 800b320:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b324:	e0ad      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b326:	2302      	movs	r3, #2
 800b328:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b32c:	e0a9      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b32e:	2304      	movs	r3, #4
 800b330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b334:	e0a5      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b336:	2308      	movs	r3, #8
 800b338:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b33c:	e0a1      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b33e:	2310      	movs	r3, #16
 800b340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b344:	e09d      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a4a      	ldr	r2, [pc, #296]	@ (800b474 <UART_SetConfig+0x2d8>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d125      	bne.n	800b39c <UART_SetConfig+0x200>
 800b350:	4b45      	ldr	r3, [pc, #276]	@ (800b468 <UART_SetConfig+0x2cc>)
 800b352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b356:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b35a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b35c:	d016      	beq.n	800b38c <UART_SetConfig+0x1f0>
 800b35e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b360:	d818      	bhi.n	800b394 <UART_SetConfig+0x1f8>
 800b362:	2b80      	cmp	r3, #128	@ 0x80
 800b364:	d00a      	beq.n	800b37c <UART_SetConfig+0x1e0>
 800b366:	2b80      	cmp	r3, #128	@ 0x80
 800b368:	d814      	bhi.n	800b394 <UART_SetConfig+0x1f8>
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <UART_SetConfig+0x1d8>
 800b36e:	2b40      	cmp	r3, #64	@ 0x40
 800b370:	d008      	beq.n	800b384 <UART_SetConfig+0x1e8>
 800b372:	e00f      	b.n	800b394 <UART_SetConfig+0x1f8>
 800b374:	2300      	movs	r3, #0
 800b376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b37a:	e082      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b37c:	2302      	movs	r3, #2
 800b37e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b382:	e07e      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b38a:	e07a      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b392:	e076      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b39a:	e072      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a35      	ldr	r2, [pc, #212]	@ (800b478 <UART_SetConfig+0x2dc>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d12a      	bne.n	800b3fc <UART_SetConfig+0x260>
 800b3a6:	4b30      	ldr	r3, [pc, #192]	@ (800b468 <UART_SetConfig+0x2cc>)
 800b3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3b4:	d01a      	beq.n	800b3ec <UART_SetConfig+0x250>
 800b3b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3ba:	d81b      	bhi.n	800b3f4 <UART_SetConfig+0x258>
 800b3bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3c0:	d00c      	beq.n	800b3dc <UART_SetConfig+0x240>
 800b3c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3c6:	d815      	bhi.n	800b3f4 <UART_SetConfig+0x258>
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <UART_SetConfig+0x238>
 800b3cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3d0:	d008      	beq.n	800b3e4 <UART_SetConfig+0x248>
 800b3d2:	e00f      	b.n	800b3f4 <UART_SetConfig+0x258>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b3da:	e052      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b3e2:	e04e      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b3e4:	2304      	movs	r3, #4
 800b3e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b3ea:	e04a      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b3ec:	2308      	movs	r3, #8
 800b3ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b3f2:	e046      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b3f4:	2310      	movs	r3, #16
 800b3f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b3fa:	e042      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a17      	ldr	r2, [pc, #92]	@ (800b460 <UART_SetConfig+0x2c4>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d13a      	bne.n	800b47c <UART_SetConfig+0x2e0>
 800b406:	4b18      	ldr	r3, [pc, #96]	@ (800b468 <UART_SetConfig+0x2cc>)
 800b408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b40c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b410:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b414:	d01a      	beq.n	800b44c <UART_SetConfig+0x2b0>
 800b416:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b41a:	d81b      	bhi.n	800b454 <UART_SetConfig+0x2b8>
 800b41c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b420:	d00c      	beq.n	800b43c <UART_SetConfig+0x2a0>
 800b422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b426:	d815      	bhi.n	800b454 <UART_SetConfig+0x2b8>
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <UART_SetConfig+0x298>
 800b42c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b430:	d008      	beq.n	800b444 <UART_SetConfig+0x2a8>
 800b432:	e00f      	b.n	800b454 <UART_SetConfig+0x2b8>
 800b434:	2300      	movs	r3, #0
 800b436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b43a:	e022      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b43c:	2302      	movs	r3, #2
 800b43e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b442:	e01e      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b444:	2304      	movs	r3, #4
 800b446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b44a:	e01a      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b44c:	2308      	movs	r3, #8
 800b44e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b452:	e016      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b454:	2310      	movs	r3, #16
 800b456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b45a:	e012      	b.n	800b482 <UART_SetConfig+0x2e6>
 800b45c:	efff69f3 	.word	0xefff69f3
 800b460:	40008000 	.word	0x40008000
 800b464:	40013800 	.word	0x40013800
 800b468:	40021000 	.word	0x40021000
 800b46c:	40004400 	.word	0x40004400
 800b470:	40004800 	.word	0x40004800
 800b474:	40004c00 	.word	0x40004c00
 800b478:	40005000 	.word	0x40005000
 800b47c:	2310      	movs	r3, #16
 800b47e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a9f      	ldr	r2, [pc, #636]	@ (800b704 <UART_SetConfig+0x568>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d17a      	bne.n	800b582 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b48c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b490:	2b08      	cmp	r3, #8
 800b492:	d824      	bhi.n	800b4de <UART_SetConfig+0x342>
 800b494:	a201      	add	r2, pc, #4	@ (adr r2, 800b49c <UART_SetConfig+0x300>)
 800b496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49a:	bf00      	nop
 800b49c:	0800b4c1 	.word	0x0800b4c1
 800b4a0:	0800b4df 	.word	0x0800b4df
 800b4a4:	0800b4c9 	.word	0x0800b4c9
 800b4a8:	0800b4df 	.word	0x0800b4df
 800b4ac:	0800b4cf 	.word	0x0800b4cf
 800b4b0:	0800b4df 	.word	0x0800b4df
 800b4b4:	0800b4df 	.word	0x0800b4df
 800b4b8:	0800b4df 	.word	0x0800b4df
 800b4bc:	0800b4d7 	.word	0x0800b4d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4c0:	f7fe fa36 	bl	8009930 <HAL_RCC_GetPCLK1Freq>
 800b4c4:	61f8      	str	r0, [r7, #28]
        break;
 800b4c6:	e010      	b.n	800b4ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4c8:	4b8f      	ldr	r3, [pc, #572]	@ (800b708 <UART_SetConfig+0x56c>)
 800b4ca:	61fb      	str	r3, [r7, #28]
        break;
 800b4cc:	e00d      	b.n	800b4ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4ce:	f7fe f997 	bl	8009800 <HAL_RCC_GetSysClockFreq>
 800b4d2:	61f8      	str	r0, [r7, #28]
        break;
 800b4d4:	e009      	b.n	800b4ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4da:	61fb      	str	r3, [r7, #28]
        break;
 800b4dc:	e005      	b.n	800b4ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b4e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 80fb 	beq.w	800b6e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	005b      	lsls	r3, r3, #1
 800b4fa:	4413      	add	r3, r2
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d305      	bcc.n	800b50e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b508:	69fa      	ldr	r2, [r7, #28]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d903      	bls.n	800b516 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b514:	e0e8      	b.n	800b6e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	2200      	movs	r2, #0
 800b51a:	461c      	mov	r4, r3
 800b51c:	4615      	mov	r5, r2
 800b51e:	f04f 0200 	mov.w	r2, #0
 800b522:	f04f 0300 	mov.w	r3, #0
 800b526:	022b      	lsls	r3, r5, #8
 800b528:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b52c:	0222      	lsls	r2, r4, #8
 800b52e:	68f9      	ldr	r1, [r7, #12]
 800b530:	6849      	ldr	r1, [r1, #4]
 800b532:	0849      	lsrs	r1, r1, #1
 800b534:	2000      	movs	r0, #0
 800b536:	4688      	mov	r8, r1
 800b538:	4681      	mov	r9, r0
 800b53a:	eb12 0a08 	adds.w	sl, r2, r8
 800b53e:	eb43 0b09 	adc.w	fp, r3, r9
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	603b      	str	r3, [r7, #0]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b550:	4650      	mov	r0, sl
 800b552:	4659      	mov	r1, fp
 800b554:	f7f5 f88e 	bl	8000674 <__aeabi_uldivmod>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4613      	mov	r3, r2
 800b55e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b566:	d308      	bcc.n	800b57a <UART_SetConfig+0x3de>
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b56e:	d204      	bcs.n	800b57a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	60da      	str	r2, [r3, #12]
 800b578:	e0b6      	b.n	800b6e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b580:	e0b2      	b.n	800b6e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b58a:	d15e      	bne.n	800b64a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b58c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b590:	2b08      	cmp	r3, #8
 800b592:	d828      	bhi.n	800b5e6 <UART_SetConfig+0x44a>
 800b594:	a201      	add	r2, pc, #4	@ (adr r2, 800b59c <UART_SetConfig+0x400>)
 800b596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59a:	bf00      	nop
 800b59c:	0800b5c1 	.word	0x0800b5c1
 800b5a0:	0800b5c9 	.word	0x0800b5c9
 800b5a4:	0800b5d1 	.word	0x0800b5d1
 800b5a8:	0800b5e7 	.word	0x0800b5e7
 800b5ac:	0800b5d7 	.word	0x0800b5d7
 800b5b0:	0800b5e7 	.word	0x0800b5e7
 800b5b4:	0800b5e7 	.word	0x0800b5e7
 800b5b8:	0800b5e7 	.word	0x0800b5e7
 800b5bc:	0800b5df 	.word	0x0800b5df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5c0:	f7fe f9b6 	bl	8009930 <HAL_RCC_GetPCLK1Freq>
 800b5c4:	61f8      	str	r0, [r7, #28]
        break;
 800b5c6:	e014      	b.n	800b5f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5c8:	f7fe f9c8 	bl	800995c <HAL_RCC_GetPCLK2Freq>
 800b5cc:	61f8      	str	r0, [r7, #28]
        break;
 800b5ce:	e010      	b.n	800b5f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5d0:	4b4d      	ldr	r3, [pc, #308]	@ (800b708 <UART_SetConfig+0x56c>)
 800b5d2:	61fb      	str	r3, [r7, #28]
        break;
 800b5d4:	e00d      	b.n	800b5f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5d6:	f7fe f913 	bl	8009800 <HAL_RCC_GetSysClockFreq>
 800b5da:	61f8      	str	r0, [r7, #28]
        break;
 800b5dc:	e009      	b.n	800b5f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5e2:	61fb      	str	r3, [r7, #28]
        break;
 800b5e4:	e005      	b.n	800b5f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b5f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d077      	beq.n	800b6e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	005a      	lsls	r2, r3, #1
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	085b      	lsrs	r3, r3, #1
 800b602:	441a      	add	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	fbb2 f3f3 	udiv	r3, r2, r3
 800b60c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	2b0f      	cmp	r3, #15
 800b612:	d916      	bls.n	800b642 <UART_SetConfig+0x4a6>
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b61a:	d212      	bcs.n	800b642 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	f023 030f 	bic.w	r3, r3, #15
 800b624:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	085b      	lsrs	r3, r3, #1
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	f003 0307 	and.w	r3, r3, #7
 800b630:	b29a      	uxth	r2, r3
 800b632:	8afb      	ldrh	r3, [r7, #22]
 800b634:	4313      	orrs	r3, r2
 800b636:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	8afa      	ldrh	r2, [r7, #22]
 800b63e:	60da      	str	r2, [r3, #12]
 800b640:	e052      	b.n	800b6e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b648:	e04e      	b.n	800b6e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b64a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b64e:	2b08      	cmp	r3, #8
 800b650:	d827      	bhi.n	800b6a2 <UART_SetConfig+0x506>
 800b652:	a201      	add	r2, pc, #4	@ (adr r2, 800b658 <UART_SetConfig+0x4bc>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b67d 	.word	0x0800b67d
 800b65c:	0800b685 	.word	0x0800b685
 800b660:	0800b68d 	.word	0x0800b68d
 800b664:	0800b6a3 	.word	0x0800b6a3
 800b668:	0800b693 	.word	0x0800b693
 800b66c:	0800b6a3 	.word	0x0800b6a3
 800b670:	0800b6a3 	.word	0x0800b6a3
 800b674:	0800b6a3 	.word	0x0800b6a3
 800b678:	0800b69b 	.word	0x0800b69b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b67c:	f7fe f958 	bl	8009930 <HAL_RCC_GetPCLK1Freq>
 800b680:	61f8      	str	r0, [r7, #28]
        break;
 800b682:	e014      	b.n	800b6ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b684:	f7fe f96a 	bl	800995c <HAL_RCC_GetPCLK2Freq>
 800b688:	61f8      	str	r0, [r7, #28]
        break;
 800b68a:	e010      	b.n	800b6ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b68c:	4b1e      	ldr	r3, [pc, #120]	@ (800b708 <UART_SetConfig+0x56c>)
 800b68e:	61fb      	str	r3, [r7, #28]
        break;
 800b690:	e00d      	b.n	800b6ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b692:	f7fe f8b5 	bl	8009800 <HAL_RCC_GetSysClockFreq>
 800b696:	61f8      	str	r0, [r7, #28]
        break;
 800b698:	e009      	b.n	800b6ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b69a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b69e:	61fb      	str	r3, [r7, #28]
        break;
 800b6a0:	e005      	b.n	800b6ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b6ac:	bf00      	nop
    }

    if (pclk != 0U)
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d019      	beq.n	800b6e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	085a      	lsrs	r2, r3, #1
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	441a      	add	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	2b0f      	cmp	r3, #15
 800b6cc:	d909      	bls.n	800b6e2 <UART_SetConfig+0x546>
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6d4:	d205      	bcs.n	800b6e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	60da      	str	r2, [r3, #12]
 800b6e0:	e002      	b.n	800b6e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b6f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3728      	adds	r7, #40	@ 0x28
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b702:	bf00      	nop
 800b704:	40008000 	.word	0x40008000
 800b708:	00f42400 	.word	0x00f42400

0800b70c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b718:	f003 0308 	and.w	r3, r3, #8
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00a      	beq.n	800b736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00a      	beq.n	800b758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	430a      	orrs	r2, r1
 800b756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00a      	beq.n	800b77a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	430a      	orrs	r2, r1
 800b778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b77e:	f003 0304 	and.w	r3, r3, #4
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	430a      	orrs	r2, r1
 800b79a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a0:	f003 0310 	and.w	r3, r3, #16
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00a      	beq.n	800b7be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00a      	beq.n	800b7e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01a      	beq.n	800b822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	430a      	orrs	r2, r1
 800b800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b80a:	d10a      	bne.n	800b822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00a      	beq.n	800b844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	430a      	orrs	r2, r1
 800b842:	605a      	str	r2, [r3, #4]
  }
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b098      	sub	sp, #96	@ 0x60
 800b854:	af02      	add	r7, sp, #8
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b860:	f7f8 fb58 	bl	8003f14 <HAL_GetTick>
 800b864:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0308 	and.w	r3, r3, #8
 800b870:	2b08      	cmp	r3, #8
 800b872:	d12e      	bne.n	800b8d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b87c:	2200      	movs	r2, #0
 800b87e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f88c 	bl	800b9a0 <UART_WaitOnFlagUntilTimeout>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d021      	beq.n	800b8d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b896:	e853 3f00 	ldrex	r3, [r3]
 800b89a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b89e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8b4:	e841 2300 	strex	r3, r2, [r1]
 800b8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1e6      	bne.n	800b88e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e062      	b.n	800b998 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 0304 	and.w	r3, r3, #4
 800b8dc:	2b04      	cmp	r3, #4
 800b8de:	d149      	bne.n	800b974 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f856 	bl	800b9a0 <UART_WaitOnFlagUntilTimeout>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d03c      	beq.n	800b974 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b902:	e853 3f00 	ldrex	r3, [r3]
 800b906:	623b      	str	r3, [r7, #32]
   return(result);
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b90e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	461a      	mov	r2, r3
 800b916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b918:	633b      	str	r3, [r7, #48]	@ 0x30
 800b91a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b920:	e841 2300 	strex	r3, r2, [r1]
 800b924:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1e6      	bne.n	800b8fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3308      	adds	r3, #8
 800b932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	e853 3f00 	ldrex	r3, [r3]
 800b93a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f023 0301 	bic.w	r3, r3, #1
 800b942:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	3308      	adds	r3, #8
 800b94a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b94c:	61fa      	str	r2, [r7, #28]
 800b94e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b950:	69b9      	ldr	r1, [r7, #24]
 800b952:	69fa      	ldr	r2, [r7, #28]
 800b954:	e841 2300 	strex	r3, r2, [r1]
 800b958:	617b      	str	r3, [r7, #20]
   return(result);
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1e5      	bne.n	800b92c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2220      	movs	r2, #32
 800b964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e011      	b.n	800b998 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2220      	movs	r2, #32
 800b978:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3758      	adds	r7, #88	@ 0x58
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9b0:	e049      	b.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b8:	d045      	beq.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ba:	f7f8 faab 	bl	8003f14 <HAL_GetTick>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	69ba      	ldr	r2, [r7, #24]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d302      	bcc.n	800b9d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e048      	b.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d031      	beq.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	f003 0308 	and.w	r3, r3, #8
 800b9ec:	2b08      	cmp	r3, #8
 800b9ee:	d110      	bne.n	800ba12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2208      	movs	r2, #8
 800b9f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 f8ff 	bl	800bbfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2208      	movs	r2, #8
 800ba02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e029      	b.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba20:	d111      	bne.n	800ba46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f000 f8e5 	bl	800bbfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2220      	movs	r2, #32
 800ba36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ba42:	2303      	movs	r3, #3
 800ba44:	e00f      	b.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	69da      	ldr	r2, [r3, #28]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	4013      	ands	r3, r2
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	bf0c      	ite	eq
 800ba56:	2301      	moveq	r3, #1
 800ba58:	2300      	movne	r3, #0
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d0a6      	beq.n	800b9b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b096      	sub	sp, #88	@ 0x58
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	88fa      	ldrh	r2, [r7, #6]
 800ba88:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2222      	movs	r2, #34	@ 0x22
 800ba98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d028      	beq.n	800baf6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baa8:	4a3e      	ldr	r2, [pc, #248]	@ (800bba4 <UART_Start_Receive_DMA+0x134>)
 800baaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bab0:	4a3d      	ldr	r2, [pc, #244]	@ (800bba8 <UART_Start_Receive_DMA+0x138>)
 800bab2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bab8:	4a3c      	ldr	r2, [pc, #240]	@ (800bbac <UART_Start_Receive_DMA+0x13c>)
 800baba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bac0:	2200      	movs	r2, #0
 800bac2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3324      	adds	r3, #36	@ 0x24
 800bace:	4619      	mov	r1, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bad4:	461a      	mov	r2, r3
 800bad6:	88fb      	ldrh	r3, [r7, #6]
 800bad8:	f7fa f8b6 	bl	8005c48 <HAL_DMA_Start_IT>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d009      	beq.n	800baf6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2210      	movs	r2, #16
 800bae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2220      	movs	r2, #32
 800baee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e051      	b.n	800bb9a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d018      	beq.n	800bb30 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb06:	e853 3f00 	ldrex	r3, [r3]
 800bb0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb12:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb1e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bb22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb24:	e841 2300 	strex	r3, r2, [r1]
 800bb28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bb2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e6      	bne.n	800bafe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3308      	adds	r3, #8
 800bb36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3a:	e853 3f00 	ldrex	r3, [r3]
 800bb3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb42:	f043 0301 	orr.w	r3, r3, #1
 800bb46:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb50:	637a      	str	r2, [r7, #52]	@ 0x34
 800bb52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb58:	e841 2300 	strex	r3, r2, [r1]
 800bb5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e5      	bne.n	800bb30 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	3308      	adds	r3, #8
 800bb6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	e853 3f00 	ldrex	r3, [r3]
 800bb72:	613b      	str	r3, [r7, #16]
   return(result);
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3308      	adds	r3, #8
 800bb82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb84:	623a      	str	r2, [r7, #32]
 800bb86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb88:	69f9      	ldr	r1, [r7, #28]
 800bb8a:	6a3a      	ldr	r2, [r7, #32]
 800bb8c:	e841 2300 	strex	r3, r2, [r1]
 800bb90:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e5      	bne.n	800bb64 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3758      	adds	r7, #88	@ 0x58
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	0800bcc5 	.word	0x0800bcc5
 800bba8:	0800bdf1 	.word	0x0800bdf1
 800bbac:	0800be2f 	.word	0x0800be2f

0800bbb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b089      	sub	sp, #36	@ 0x24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bbcc:	61fb      	str	r3, [r7, #28]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	61bb      	str	r3, [r7, #24]
 800bbd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6979      	ldr	r1, [r7, #20]
 800bbdc:	69ba      	ldr	r2, [r7, #24]
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e6      	bne.n	800bbb8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2220      	movs	r2, #32
 800bbee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800bbf0:	bf00      	nop
 800bbf2:	3724      	adds	r7, #36	@ 0x24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b095      	sub	sp, #84	@ 0x54
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0c:	e853 3f00 	ldrex	r3, [r3]
 800bc10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc22:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e6      	bne.n	800bc04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	e853 3f00 	ldrex	r3, [r3]
 800bc44:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	f023 0301 	bic.w	r3, r3, #1
 800bc4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3308      	adds	r3, #8
 800bc54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e5      	bne.n	800bc36 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d118      	bne.n	800bca4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	e853 3f00 	ldrex	r3, [r3]
 800bc7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f023 0310 	bic.w	r3, r3, #16
 800bc86:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc90:	61bb      	str	r3, [r7, #24]
 800bc92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc94:	6979      	ldr	r1, [r7, #20]
 800bc96:	69ba      	ldr	r2, [r7, #24]
 800bc98:	e841 2300 	strex	r3, r2, [r1]
 800bc9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1e6      	bne.n	800bc72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2220      	movs	r2, #32
 800bca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bcb8:	bf00      	nop
 800bcba:	3754      	adds	r7, #84	@ 0x54
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b09c      	sub	sp, #112	@ 0x70
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0320 	and.w	r3, r3, #32
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d171      	bne.n	800bdc4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bce2:	2200      	movs	r2, #0
 800bce4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcf0:	e853 3f00 	ldrex	r3, [r3]
 800bcf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bcf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bcfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e6      	bne.n	800bce8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd24:	e853 3f00 	ldrex	r3, [r3]
 800bd28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd2c:	f023 0301 	bic.w	r3, r3, #1
 800bd30:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3308      	adds	r3, #8
 800bd38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bd3a:	647a      	str	r2, [r7, #68]	@ 0x44
 800bd3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e5      	bne.n	800bd1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3308      	adds	r3, #8
 800bd54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	623b      	str	r3, [r7, #32]
   return(result);
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd64:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3308      	adds	r3, #8
 800bd6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bd6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd76:	e841 2300 	strex	r3, r2, [r1]
 800bd7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1e5      	bne.n	800bd4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd84:	2220      	movs	r2, #32
 800bd86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d118      	bne.n	800bdc4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	e853 3f00 	ldrex	r3, [r3]
 800bd9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f023 0310 	bic.w	r3, r3, #16
 800bda6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bda8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	461a      	mov	r2, r3
 800bdae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdb0:	61fb      	str	r3, [r7, #28]
 800bdb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb4:	69b9      	ldr	r1, [r7, #24]
 800bdb6:	69fa      	ldr	r2, [r7, #28]
 800bdb8:	e841 2300 	strex	r3, r2, [r1]
 800bdbc:	617b      	str	r3, [r7, #20]
   return(result);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1e6      	bne.n	800bd92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bdc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d107      	bne.n	800bde2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bddc:	f7ff f9d2 	bl	800b184 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bde0:	e002      	b.n	800bde8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bde2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bde4:	f7f7 fad6 	bl	8003394 <HAL_UART_RxCpltCallback>
}
 800bde8:	bf00      	nop
 800bdea:	3770      	adds	r7, #112	@ 0x70
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdfc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2201      	movs	r2, #1
 800be02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d109      	bne.n	800be20 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800be12:	085b      	lsrs	r3, r3, #1
 800be14:	b29b      	uxth	r3, r3
 800be16:	4619      	mov	r1, r3
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7ff f9b3 	bl	800b184 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be1e:	e002      	b.n	800be26 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff f99b 	bl	800b15c <HAL_UART_RxHalfCpltCallback>
}
 800be26:	bf00      	nop
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b086      	sub	sp, #24
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be40:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be48:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be54:	2b80      	cmp	r3, #128	@ 0x80
 800be56:	d109      	bne.n	800be6c <UART_DMAError+0x3e>
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	2b21      	cmp	r3, #33	@ 0x21
 800be5c:	d106      	bne.n	800be6c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2200      	movs	r2, #0
 800be62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800be66:	6978      	ldr	r0, [r7, #20]
 800be68:	f7ff fea2 	bl	800bbb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be76:	2b40      	cmp	r3, #64	@ 0x40
 800be78:	d109      	bne.n	800be8e <UART_DMAError+0x60>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b22      	cmp	r3, #34	@ 0x22
 800be7e:	d106      	bne.n	800be8e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	2200      	movs	r2, #0
 800be84:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800be88:	6978      	ldr	r0, [r7, #20]
 800be8a:	f7ff feb7 	bl	800bbfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be94:	f043 0210 	orr.w	r2, r3, #16
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be9e:	6978      	ldr	r0, [r7, #20]
 800bea0:	f7ff f966 	bl	800b170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bea4:	bf00      	nop
 800bea6:	3718      	adds	r7, #24
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f7ff f950 	bl	800b170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bed0:	bf00      	nop
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	e853 3f00 	ldrex	r3, [r3]
 800beec:	60bb      	str	r3, [r7, #8]
   return(result);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bef4:	61fb      	str	r3, [r7, #28]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	61bb      	str	r3, [r7, #24]
 800bf00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf02:	6979      	ldr	r1, [r7, #20]
 800bf04:	69ba      	ldr	r2, [r7, #24]
 800bf06:	e841 2300 	strex	r3, r2, [r1]
 800bf0a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1e6      	bne.n	800bee0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2220      	movs	r2, #32
 800bf16:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7ff f912 	bl	800b148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf24:	bf00      	nop
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <memset>:
 800bf40:	4402      	add	r2, r0
 800bf42:	4603      	mov	r3, r0
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d100      	bne.n	800bf4a <memset+0xa>
 800bf48:	4770      	bx	lr
 800bf4a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf4e:	e7f9      	b.n	800bf44 <memset+0x4>

0800bf50 <__libc_init_array>:
 800bf50:	b570      	push	{r4, r5, r6, lr}
 800bf52:	4d0d      	ldr	r5, [pc, #52]	@ (800bf88 <__libc_init_array+0x38>)
 800bf54:	4c0d      	ldr	r4, [pc, #52]	@ (800bf8c <__libc_init_array+0x3c>)
 800bf56:	1b64      	subs	r4, r4, r5
 800bf58:	10a4      	asrs	r4, r4, #2
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	42a6      	cmp	r6, r4
 800bf5e:	d109      	bne.n	800bf74 <__libc_init_array+0x24>
 800bf60:	4d0b      	ldr	r5, [pc, #44]	@ (800bf90 <__libc_init_array+0x40>)
 800bf62:	4c0c      	ldr	r4, [pc, #48]	@ (800bf94 <__libc_init_array+0x44>)
 800bf64:	f000 f818 	bl	800bf98 <_init>
 800bf68:	1b64      	subs	r4, r4, r5
 800bf6a:	10a4      	asrs	r4, r4, #2
 800bf6c:	2600      	movs	r6, #0
 800bf6e:	42a6      	cmp	r6, r4
 800bf70:	d105      	bne.n	800bf7e <__libc_init_array+0x2e>
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf78:	4798      	blx	r3
 800bf7a:	3601      	adds	r6, #1
 800bf7c:	e7ee      	b.n	800bf5c <__libc_init_array+0xc>
 800bf7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf82:	4798      	blx	r3
 800bf84:	3601      	adds	r6, #1
 800bf86:	e7f2      	b.n	800bf6e <__libc_init_array+0x1e>
 800bf88:	0800c028 	.word	0x0800c028
 800bf8c:	0800c028 	.word	0x0800c028
 800bf90:	0800c028 	.word	0x0800c028
 800bf94:	0800c048 	.word	0x0800c048

0800bf98 <_init>:
 800bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9a:	bf00      	nop
 800bf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9e:	bc08      	pop	{r3}
 800bfa0:	469e      	mov	lr, r3
 800bfa2:	4770      	bx	lr

0800bfa4 <_fini>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	bf00      	nop
 800bfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfaa:	bc08      	pop	{r3}
 800bfac:	469e      	mov	lr, r3
 800bfae:	4770      	bx	lr
