
KM3000_V1R0_A0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d594  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800d740  0800d740  0000e740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d790  0800d790  0000f3a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d790  0800d790  0000e790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d798  0800d798  0000f3a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800d798  0800d798  0000e798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7b8  0800d7b8  0000e7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0800d7bc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dcc  200003a8  0800db64  0000f3a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001174  0800db64  00010174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f3a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052302  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d6b  00000000  00000000  000616da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00069448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c6  00000000  00000000  0006b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033bd0  00000000  00000000  0006c87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d82b  00000000  00000000  000a044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001245a3  00000000  00000000  000cdc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f221c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b20  00000000  00000000  001f2260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001f9d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200003a8 	.word	0x200003a8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800d728 	.word	0x0800d728

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200003ac 	.word	0x200003ac
 80001e8:	0800d728 	.word	0x0800d728

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZN15displayPhysical6enableEb>:

////////////
// ENABLE //
////////////

void displayPhysical::enable( bool onOff ){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
	if ( !onOff ){					//	Si esta apagado
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	f083 0301 	eor.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d003      	beq.n	80004fc <_ZN15displayPhysical6enableEb+0x20>
		this->flagEnable	= 0;	//	Deshabilita
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
	}
	else{							//	Si esta prendido
		this->flagEnable	= 1;	//	Habilita
	}
}
 80004fa:	e002      	b.n	8000502 <_ZN15displayPhysical6enableEb+0x26>
		this->flagEnable	= 1;	//	Habilita
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	460a      	mov	r2, r1
 8000518:	80fb      	strh	r3, [r7, #6]
 800051a:	4613      	mov	r3, r2
 800051c:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800051e:	88fa      	ldrh	r2, [r7, #6]
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	2b3f      	cmp	r3, #63	@ 0x3f
 8000526:	dc01      	bgt.n	800052c <_Z12bytestowritett+0x1e>
 8000528:	88fb      	ldrh	r3, [r7, #6]
 800052a:	e003      	b.n	8000534 <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 800052c:	88bb      	ldrh	r3, [r7, #4]
 800052e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000532:	b29b      	uxth	r3, r3
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08e      	sub	sp, #56	@ 0x38
 8000544:	af04      	add	r7, sp, #16
 8000546:	60ba      	str	r2, [r7, #8]
 8000548:	461a      	mov	r2, r3
 800054a:	4603      	mov	r3, r0
 800054c:	81fb      	strh	r3, [r7, #14]
 800054e:	460b      	mov	r3, r1
 8000550:	81bb      	strh	r3, [r7, #12]
 8000552:	4613      	mov	r3, r2
 8000554:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000556:	2306      	movs	r3, #6
 8000558:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800055e:	88fa      	ldrh	r2, [r7, #6]
 8000560:	89bb      	ldrh	r3, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <_Z11EEPROM_ReadttPht+0x2a>
 8000568:	333f      	adds	r3, #63	@ 0x3f
 800056a:	119b      	asrs	r3, r3, #6
 800056c:	b29a      	uxth	r2, r3
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	4413      	add	r3, r2
 8000572:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000574:	8b7a      	ldrh	r2, [r7, #26]
 8000576:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	b29b      	uxth	r3, r3
 800057c:	3301      	adds	r3, #1
 800057e:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000580:	2300      	movs	r3, #0
 8000582:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
 8000588:	e031      	b.n	80005ee <_Z11EEPROM_ReadttPht+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800058a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000598:	4313      	orrs	r3, r2
 800059a:	b21b      	sxth	r3, r3
 800059c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800059e:	89ba      	ldrh	r2, [r7, #12]
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffb2 	bl	800050e <_Z12bytestowritett>
 80005aa:	4603      	mov	r3, r0
 80005ac:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80005ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	4413      	add	r3, r2
 80005b4:	8af9      	ldrh	r1, [r7, #22]
 80005b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ba:	9202      	str	r2, [sp, #8]
 80005bc:	8aba      	ldrh	r2, [r7, #20]
 80005be:	9201      	str	r2, [sp, #4]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2302      	movs	r3, #2
 80005c4:	460a      	mov	r2, r1
 80005c6:	21a0      	movs	r1, #160	@ 0xa0
 80005c8:	480d      	ldr	r0, [pc, #52]	@ (8000600 <_Z11EEPROM_ReadttPht+0xc0>)
 80005ca:	f007 fd7b 	bl	80080c4 <HAL_I2C_Mem_Read>
		startPage += 1;
 80005ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005d0:	3301      	adds	r3, #1
 80005d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	8abb      	ldrh	r3, [r7, #20]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80005e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80005e2:	8abb      	ldrh	r3, [r7, #20]
 80005e4:	4413      	add	r3, r2
 80005e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 80005e8:	6a3b      	ldr	r3, [r7, #32]
 80005ea:	3301      	adds	r3, #1
 80005ec:	623b      	str	r3, [r7, #32]
 80005ee:	8b3b      	ldrh	r3, [r7, #24]
 80005f0:	6a3a      	ldr	r2, [r7, #32]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbc9      	blt.n	800058a <_Z11EEPROM_ReadttPht+0x4a>
	}
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	@ 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200006c8 	.word	0x200006c8

08000604 <_Z3appv>:

/////////
// APP //
/////////

void app(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	appContent();
 8000608:	f000 f804 	bl	8000614 <_Z10appContentv>
	appLora();
 800060c:	f000 fb3a 	bl	8000c84 <_Z7appLorav>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <_Z10appContentv>:
 * 			- Calcular valores a enviar
 * 			- Agregar comandos a Fifo
 * 			- Esperar relojes de TCP
 */

void appContent(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

	switch ( stateContent ){
 8000618:	4b6c      	ldr	r3, [pc, #432]	@ (80007cc <_Z10appContentv+0x1b8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b06      	cmp	r3, #6
 800061e:	f200 830d 	bhi.w	8000c3c <_Z10appContentv+0x628>
 8000622:	a201      	add	r2, pc, #4	@ (adr r2, 8000628 <_Z10appContentv+0x14>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000645 	.word	0x08000645
 800062c:	08000661 	.word	0x08000661
 8000630:	080006e5 	.word	0x080006e5
 8000634:	0800080d 	.word	0x0800080d
 8000638:	08000a15 	.word	0x08000a15
 800063c:	08000bab 	.word	0x08000bab
 8000640:	08000c0b 	.word	0x08000c0b
	//////////////////////////
	// S0 - WAIT FOR ENABLE //
	//////////////////////////

	case 0:
		if ( loraDecision.enable() ){	// Si el chip esta habilitado
 8000644:	4862      	ldr	r0, [pc, #392]	@ (80007d0 <_Z10appContentv+0x1bc>)
 8000646:	f003 faef 	bl	8003c28 <_ZN12loraDecision6enableEv>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <_Z10appContentv+0x44>
			stateContent	= 1;		// Pasa a S1
 8000650:	4b5e      	ldr	r3, [pc, #376]	@ (80007cc <_Z10appContentv+0x1b8>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateContent	= 0;		// Espera en S0
		}
		break;
 8000656:	e2f5      	b.n	8000c44 <_Z10appContentv+0x630>
			stateContent	= 0;		// Espera en S0
 8000658:	4b5c      	ldr	r3, [pc, #368]	@ (80007cc <_Z10appContentv+0x1b8>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e2f1      	b.n	8000c44 <_Z10appContentv+0x630>
	////////////////////////
	// S1 - WAIT FOR FLAG //
	////////////////////////

	case 1:
		bussyRN2903	= 0;
 8000660:	4b5c      	ldr	r3, [pc, #368]	@ (80007d4 <_Z10appContentv+0x1c0>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

		if ( !loraDecision.enable() ){			// Si no está habilitado
 8000666:	485a      	ldr	r0, [pc, #360]	@ (80007d0 <_Z10appContentv+0x1bc>)
 8000668:	f003 fade 	bl	8003c28 <_ZN12loraDecision6enableEv>
 800066c:	4603      	mov	r3, r0
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <_Z10appContentv+0x6c>
			stateContent	= 0;				// Vuelve a S0
 8000678:	4b54      	ldr	r3, [pc, #336]	@ (80007cc <_Z10appContentv+0x1b8>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			stateContent	= 4;				// Pasa a S4
		}
		else{									// Si no pasa nada
			stateContent	= 1;				// Espera en S1
		}
		break;
 800067e:	e2e1      	b.n	8000c44 <_Z10appContentv+0x630>
		else if ( fifoContent.available() ){	// Si hay
 8000680:	4855      	ldr	r0, [pc, #340]	@ (80007d8 <_Z10appContentv+0x1c4>)
 8000682:	f000 fde9 	bl	8001258 <_ZN12fifoCommands9availableEv>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <_Z10appContentv+0x80>
			stateContent	= 5;				//
 800068c:	4b4f      	ldr	r3, [pc, #316]	@ (80007cc <_Z10appContentv+0x1b8>)
 800068e:	2205      	movs	r2, #5
 8000690:	701a      	strb	r2, [r3, #0]
		break;
 8000692:	e2d7      	b.n	8000c44 <_Z10appContentv+0x630>
		else if ( flagSetData ){				// Si se guardó datos de GPS
 8000694:	4b51      	ldr	r3, [pc, #324]	@ (80007dc <_Z10appContentv+0x1c8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d009      	beq.n	80006b0 <_Z10appContentv+0x9c>
			count_1_data++;
 800069c:	4b50      	ldr	r3, [pc, #320]	@ (80007e0 <_Z10appContentv+0x1cc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b4e      	ldr	r3, [pc, #312]	@ (80007e0 <_Z10appContentv+0x1cc>)
 80006a6:	701a      	strb	r2, [r3, #0]
			stateContent	= 2;				// Pasa a S3
 80006a8:	4b48      	ldr	r3, [pc, #288]	@ (80007cc <_Z10appContentv+0x1b8>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
		break;
 80006ae:	e2c9      	b.n	8000c44 <_Z10appContentv+0x630>
		else if ( flagGpsSaved ){				// Si pide guardar datos
 80006b0:	4b4c      	ldr	r3, [pc, #304]	@ (80007e4 <_Z10appContentv+0x1d0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d009      	beq.n	80006cc <_Z10appContentv+0xb8>
			count_0_gps++;
 80006b8:	4b4b      	ldr	r3, [pc, #300]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80006c2:	701a      	strb	r2, [r3, #0]
			stateContent	= 3;				// Pasa a S2
 80006c4:	4b41      	ldr	r3, [pc, #260]	@ (80007cc <_Z10appContentv+0x1b8>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	701a      	strb	r2, [r3, #0]
		break;
 80006ca:	e2bb      	b.n	8000c44 <_Z10appContentv+0x630>
		else if ( flagSetSys ){					// Si se guardan datos de sistema
 80006cc:	4b47      	ldr	r3, [pc, #284]	@ (80007ec <_Z10appContentv+0x1d8>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d003      	beq.n	80006dc <_Z10appContentv+0xc8>
			stateContent	= 4;				// Pasa a S4
 80006d4:	4b3d      	ldr	r3, [pc, #244]	@ (80007cc <_Z10appContentv+0x1b8>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	701a      	strb	r2, [r3, #0]
		break;
 80006da:	e2b3      	b.n	8000c44 <_Z10appContentv+0x630>
			stateContent	= 1;				// Espera en S1
 80006dc:	4b3b      	ldr	r3, [pc, #236]	@ (80007cc <_Z10appContentv+0x1b8>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
		break;
 80006e2:	e2af      	b.n	8000c44 <_Z10appContentv+0x630>
	////////////////////////////
	// S2 - SAVE SENSORS DATA //
	////////////////////////////

	case 2:
		flagSetData	= 0;					// Reinicia indicador de enviar datos
 80006e4:	4b3d      	ldr	r3, [pc, #244]	@ (80007dc <_Z10appContentv+0x1c8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]

		tempApp		= tempApp/10;			// Reduce resolucion de temperatura
 80006ea:	4b41      	ldr	r3, [pc, #260]	@ (80007f0 <_Z10appContentv+0x1dc>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4a41      	ldr	r2, [pc, #260]	@ (80007f4 <_Z10appContentv+0x1e0>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	08db      	lsrs	r3, r3, #3
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <_Z10appContentv+0x1dc>)
 80006fa:	801a      	strh	r2, [r3, #0]
		humApp		= humApp/10;			// Reduce resolucion de humedad
 80006fc:	4b3e      	ldr	r3, [pc, #248]	@ (80007f8 <_Z10appContentv+0x1e4>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	4a3c      	ldr	r2, [pc, #240]	@ (80007f4 <_Z10appContentv+0x1e0>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b3b      	ldr	r3, [pc, #236]	@ (80007f8 <_Z10appContentv+0x1e4>)
 800070c:	801a      	strh	r2, [r3, #0]

		content[0]	= '1';					// Indica que los datos van sobre puerto 1
 800070e:	4b3b      	ldr	r3, [pc, #236]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000710:	2231      	movs	r2, #49	@ 0x31
 8000712:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(b1_HCL);	// Guarda primeros 4 bits de B1 HCL
 8000714:	4b3a      	ldr	r3, [pc, #232]	@ (8000800 <_Z10appContentv+0x1ec>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fca7 	bl	800106c <_Z10uint2hex_Ah>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000724:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(b1_HCL);	// Guarda segundos 4 bits de B1 HCL
 8000726:	4b36      	ldr	r3, [pc, #216]	@ (8000800 <_Z10appContentv+0x1ec>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fd04 	bl	8001138 <_Z10uint2hex_Bh>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000736:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(a1_HCL);	// Guarda primeros 4 bits de A1 HCL
 8000738:	4b32      	ldr	r3, [pc, #200]	@ (8000804 <_Z10appContentv+0x1f0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fc95 	bl	800106c <_Z10uint2hex_Ah>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000748:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(a1_HCL);	// Guarda segundos 4 bits de A1 HCL
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <_Z10appContentv+0x1f0>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fcf2 	bl	8001138 <_Z10uint2hex_Bh>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <_Z10appContentv+0x1e8>)
 800075a:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(tempApp);	// Guarda primeros 4 bits de Temperatura
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <_Z10appContentv+0x1dc>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fc82 	bl	800106c <_Z10uint2hex_Ah>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <_Z10appContentv+0x1e8>)
 800076e:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(tempApp);	// Guarda segundos 4 bits de Temperatura
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <_Z10appContentv+0x1dc>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fcde 	bl	8001138 <_Z10uint2hex_Bh>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000782:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(humApp);	// Guarda primeros 4 bits de Humedad
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <_Z10appContentv+0x1e4>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fc6e 	bl	800106c <_Z10uint2hex_Ah>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000796:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(humApp);	// Guarda segundos 4 bits de Humedad
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <_Z10appContentv+0x1e4>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fcca 	bl	8001138 <_Z10uint2hex_Bh>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <_Z10appContentv+0x1e8>)
 80007aa:	721a      	strb	r2, [r3, #8]

		qttyMsgData++;
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <_Z10appContentv+0x1f4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <_Z10appContentv+0x1f4>)
 80007b6:	701a      	strb	r2, [r3, #0]

		fifoContent.add(content, sizeof(content));	// Envia paquete a la FIFO
 80007b8:	2209      	movs	r2, #9
 80007ba:	4910      	ldr	r1, [pc, #64]	@ (80007fc <_Z10appContentv+0x1e8>)
 80007bc:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <_Z10appContentv+0x1c4>)
 80007be:	f000 fd58 	bl	8001272 <_ZN12fifoCommands3addEPhh>
		stateContent 	= 5;						// Pasa a S5
 80007c2:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <_Z10appContentv+0x1b8>)
 80007c4:	2205      	movs	r2, #5
 80007c6:	701a      	strb	r2, [r3, #0]
		break;
 80007c8:	e23c      	b.n	8000c44 <_Z10appContentv+0x630>
 80007ca:	bf00      	nop
 80007cc:	200003c4 	.word	0x200003c4
 80007d0:	20000b7c 	.word	0x20000b7c
 80007d4:	200003c8 	.word	0x200003c8
 80007d8:	20001098 	.word	0x20001098
 80007dc:	20001154 	.word	0x20001154
 80007e0:	200003c6 	.word	0x200003c6
 80007e4:	2000113e 	.word	0x2000113e
 80007e8:	200003c5 	.word	0x200003c5
 80007ec:	20001160 	.word	0x20001160
 80007f0:	20000516 	.word	0x20000516
 80007f4:	cccccccd 	.word	0xcccccccd
 80007f8:	20000518 	.word	0x20000518
 80007fc:	200003cc 	.word	0x200003cc
 8000800:	20000000 	.word	0x20000000
 8000804:	200003e1 	.word	0x200003e1
 8000808:	200003ee 	.word	0x200003ee
	////////////////////////
	// S3 - SAVE LAT/LONG //
	////////////////////////

	case 3:
		flagGpsSaved	= 0;						// Reinicia indicado de enviar GPS
 800080c:	4b76      	ldr	r3, [pc, #472]	@ (80009e8 <_Z10appContentv+0x3d4>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]

		latitudSend		= latitud;					// Copia valor de latitud
 8000812:	4b76      	ldr	r3, [pc, #472]	@ (80009ec <_Z10appContentv+0x3d8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a76      	ldr	r2, [pc, #472]	@ (80009f0 <_Z10appContentv+0x3dc>)
 8000818:	6013      	str	r3, [r2, #0]
		longitudSend	= longitud;					// Copia valor de longitud
 800081a:	4b76      	ldr	r3, [pc, #472]	@ (80009f4 <_Z10appContentv+0x3e0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a76      	ldr	r2, [pc, #472]	@ (80009f8 <_Z10appContentv+0x3e4>)
 8000820:	6013      	str	r3, [r2, #0]

		content[0]	= '2';							// Indica que latitud va en puerto 2
 8000822:	4b76      	ldr	r3, [pc, #472]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000824:	2232      	movs	r2, #50	@ 0x32
 8000826:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(ptrFloat_Lat[0]);	// Guarda primeros 4 bits de latitud - 1byte
 8000828:	4b75      	ldr	r3, [pc, #468]	@ (8000a00 <_Z10appContentv+0x3ec>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fc1c 	bl	800106c <_Z10uint2hex_Ah>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b70      	ldr	r3, [pc, #448]	@ (80009fc <_Z10appContentv+0x3e8>)
 800083a:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(ptrFloat_Lat[0]);	// Guarda segundos 4 bits de latitud - 1byte
 800083c:	4b70      	ldr	r3, [pc, #448]	@ (8000a00 <_Z10appContentv+0x3ec>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fc78 	bl	8001138 <_Z10uint2hex_Bh>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b6b      	ldr	r3, [pc, #428]	@ (80009fc <_Z10appContentv+0x3e8>)
 800084e:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(ptrFloat_Lat[1]);	// Guarda terceros 4 bits de latitud - 2byte
 8000850:	4b6b      	ldr	r3, [pc, #428]	@ (8000a00 <_Z10appContentv+0x3ec>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fc07 	bl	800106c <_Z10uint2hex_Ah>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b66      	ldr	r3, [pc, #408]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000864:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(ptrFloat_Lat[1]);	// Guarda cuartos 4 bits de latitud  - 2byte
 8000866:	4b66      	ldr	r3, [pc, #408]	@ (8000a00 <_Z10appContentv+0x3ec>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fc62 	bl	8001138 <_Z10uint2hex_Bh>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b60      	ldr	r3, [pc, #384]	@ (80009fc <_Z10appContentv+0x3e8>)
 800087a:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(ptrFloat_Lat[2]);	// Guarda quintos 4 bits de latitud  - 3byte
 800087c:	4b60      	ldr	r3, [pc, #384]	@ (8000a00 <_Z10appContentv+0x3ec>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3302      	adds	r3, #2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fbf1 	bl	800106c <_Z10uint2hex_Ah>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b5b      	ldr	r3, [pc, #364]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000890:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(ptrFloat_Lat[2]);	// Guarda sextos 4 bits de latitud   - 3byte
 8000892:	4b5b      	ldr	r3, [pc, #364]	@ (8000a00 <_Z10appContentv+0x3ec>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3302      	adds	r3, #2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fc4c 	bl	8001138 <_Z10uint2hex_Bh>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b55      	ldr	r3, [pc, #340]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008a6:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(ptrFloat_Lat[3]);	// Guarda septimos 4 bits de latitud - 4byte
 80008a8:	4b55      	ldr	r3, [pc, #340]	@ (8000a00 <_Z10appContentv+0x3ec>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3303      	adds	r3, #3
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fbdb 	bl	800106c <_Z10uint2hex_Ah>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b50      	ldr	r3, [pc, #320]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008bc:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(ptrFloat_Lat[3]);	// Guarda octavos 4 bits de latitud  - 4byte
 80008be:	4b50      	ldr	r3, [pc, #320]	@ (8000a00 <_Z10appContentv+0x3ec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3303      	adds	r3, #3
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fc36 	bl	8001138 <_Z10uint2hex_Bh>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b4a      	ldr	r3, [pc, #296]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008d2:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Añade contenido de latitud a FIFO
 80008d4:	2209      	movs	r2, #9
 80008d6:	4949      	ldr	r1, [pc, #292]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008d8:	484a      	ldr	r0, [pc, #296]	@ (8000a04 <_Z10appContentv+0x3f0>)
 80008da:	f000 fcca 	bl	8001272 <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Repite contenido para enviar 2 veces
 80008de:	2209      	movs	r2, #9
 80008e0:	4946      	ldr	r1, [pc, #280]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008e2:	4848      	ldr	r0, [pc, #288]	@ (8000a04 <_Z10appContentv+0x3f0>)
 80008e4:	f000 fcc5 	bl	8001272 <_ZN12fifoCommands3addEPhh>

		content[0]	= '3';							// Indica que longitud va en puerto 3
 80008e8:	4b44      	ldr	r3, [pc, #272]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008ea:	2233      	movs	r2, #51	@ 0x33
 80008ec:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(ptrFloat_Lon[3]);	// Guarda primeros 4 bits de longitud - 1byte
 80008ee:	4b46      	ldr	r3, [pc, #280]	@ (8000a08 <_Z10appContentv+0x3f4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3303      	adds	r3, #3
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fbb8 	bl	800106c <_Z10uint2hex_Ah>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b3e      	ldr	r3, [pc, #248]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000902:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(ptrFloat_Lon[3]);	// Guarda segundos 4 bits de longitud - 1byte
 8000904:	4b40      	ldr	r3, [pc, #256]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3303      	adds	r3, #3
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fc13 	bl	8001138 <_Z10uint2hex_Bh>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b39      	ldr	r3, [pc, #228]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000918:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(ptrFloat_Lon[2]);	// Guarda terceros 4 bits de longitud - 2byte
 800091a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a08 <_Z10appContentv+0x3f4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3302      	adds	r3, #2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fba2 	bl	800106c <_Z10uint2hex_Ah>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	4b33      	ldr	r3, [pc, #204]	@ (80009fc <_Z10appContentv+0x3e8>)
 800092e:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(ptrFloat_Lon[2]);	// Guarda cuartos 4 bits de longitud  - 2byte
 8000930:	4b35      	ldr	r3, [pc, #212]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3302      	adds	r3, #2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fbfd 	bl	8001138 <_Z10uint2hex_Bh>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000944:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(ptrFloat_Lon[1]);	// Guarda quintos 4 bits de longitud  - 3byte
 8000946:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fb8c 	bl	800106c <_Z10uint2hex_Ah>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <_Z10appContentv+0x3e8>)
 800095a:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(ptrFloat_Lon[1]);	// Guarda sextos 4 bits de longitud   - 3byte
 800095c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <_Z10appContentv+0x3f4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fbe7 	bl	8001138 <_Z10uint2hex_Bh>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000970:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(ptrFloat_Lon[0]);	// Guarda septimos 4 bits de longitud - 4byte
 8000972:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fb77 	bl	800106c <_Z10uint2hex_Ah>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000984:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(ptrFloat_Lon[0]);	// Guarda octavos 4 bits de longitud  - 4byte
 8000986:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fbd3 	bl	8001138 <_Z10uint2hex_Bh>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000998:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Añade contenido de longitud de la FIFO
 800099a:	2209      	movs	r2, #9
 800099c:	4917      	ldr	r1, [pc, #92]	@ (80009fc <_Z10appContentv+0x3e8>)
 800099e:	4819      	ldr	r0, [pc, #100]	@ (8000a04 <_Z10appContentv+0x3f0>)
 80009a0:	f000 fc67 	bl	8001272 <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Repite contenido para enviar 2 veces
 80009a4:	2209      	movs	r2, #9
 80009a6:	4915      	ldr	r1, [pc, #84]	@ (80009fc <_Z10appContentv+0x3e8>)
 80009a8:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <_Z10appContentv+0x3f0>)
 80009aa:	f000 fc62 	bl	8001272 <_ZN12fifoCommands3addEPhh>

		qttyMsgGps++;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009b8:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009c4:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009d0:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009dc:	701a      	strb	r2, [r3, #0]

		stateContent	= 5;						// Pasa a S5
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <_Z10appContentv+0x3fc>)
 80009e0:	2205      	movs	r2, #5
 80009e2:	701a      	strb	r2, [r3, #0]
		break;
 80009e4:	e12e      	b.n	8000c44 <_Z10appContentv+0x630>
 80009e6:	bf00      	nop
 80009e8:	2000113e 	.word	0x2000113e
 80009ec:	20000ad8 	.word	0x20000ad8
 80009f0:	200003e4 	.word	0x200003e4
 80009f4:	20000adc 	.word	0x20000adc
 80009f8:	200003e8 	.word	0x200003e8
 80009fc:	200003cc 	.word	0x200003cc
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20001098 	.word	0x20001098
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	200003ef 	.word	0x200003ef
 8000a10:	200003c4 	.word	0x200003c4
	////////////////////////
	// S4 - SAVE SYS DATA //
	////////////////////////

	case 4:
		warnings	= warningHardware[0]	+ warningHardware[1]*2;			// Multiplexa warning 0 y 1
 8000a14:	4b8c      	ldr	r3, [pc, #560]	@ (8000c48 <_Z10appContentv+0x634>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8000c48 <_Z10appContentv+0x634>)
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b89      	ldr	r3, [pc, #548]	@ (8000c4c <_Z10appContentv+0x638>)
 8000a28:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[2]*4	+ warningHardware[3]*8;			// Multiplexa warning 2 y 3
 8000a2a:	4b87      	ldr	r3, [pc, #540]	@ (8000c48 <_Z10appContentv+0x634>)
 8000a2c:	789b      	ldrb	r3, [r3, #2]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b85      	ldr	r3, [pc, #532]	@ (8000c48 <_Z10appContentv+0x634>)
 8000a32:	78db      	ldrb	r3, [r3, #3]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b83      	ldr	r3, [pc, #524]	@ (8000c4c <_Z10appContentv+0x638>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b81      	ldr	r3, [pc, #516]	@ (8000c4c <_Z10appContentv+0x638>)
 8000a48:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[4]*16	+ warningHardware[5]*32;	// Multiplexa warning 4 y 5
 8000a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8000c48 <_Z10appContentv+0x634>)
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b7d      	ldr	r3, [pc, #500]	@ (8000c48 <_Z10appContentv+0x634>)
 8000a52:	795b      	ldrb	r3, [r3, #5]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	011b      	lsls	r3, r3, #4
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8000c4c <_Z10appContentv+0x638>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b79      	ldr	r3, [pc, #484]	@ (8000c4c <_Z10appContentv+0x638>)
 8000a68:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[6]*64	+ warningHardware[7]*128;	// Multiplexa warning 6 y 7
 8000a6a:	4b77      	ldr	r3, [pc, #476]	@ (8000c48 <_Z10appContentv+0x634>)
 8000a6c:	799b      	ldrb	r3, [r3, #6]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b75      	ldr	r3, [pc, #468]	@ (8000c48 <_Z10appContentv+0x634>)
 8000a72:	79db      	ldrb	r3, [r3, #7]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	019b      	lsls	r3, r3, #6
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b73      	ldr	r3, [pc, #460]	@ (8000c4c <_Z10appContentv+0x638>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b71      	ldr	r3, [pc, #452]	@ (8000c4c <_Z10appContentv+0x638>)
 8000a88:	701a      	strb	r2, [r3, #0]

		errorHw	= errorHardware[0] 		+ errorHardware[1]*2;				// Multiplexa error 0 y 1
 8000a8a:	4b71      	ldr	r3, [pc, #452]	@ (8000c50 <_Z10appContentv+0x63c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b6f      	ldr	r3, [pc, #444]	@ (8000c50 <_Z10appContentv+0x63c>)
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b6d      	ldr	r3, [pc, #436]	@ (8000c54 <_Z10appContentv+0x640>)
 8000a9e:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[2]*4 	+ errorHardware[3]*8;				// Multiplexa error 2 y 3
 8000aa0:	4b6b      	ldr	r3, [pc, #428]	@ (8000c50 <_Z10appContentv+0x63c>)
 8000aa2:	789b      	ldrb	r3, [r3, #2]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c50 <_Z10appContentv+0x63c>)
 8000aa8:	78db      	ldrb	r3, [r3, #3]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b67      	ldr	r3, [pc, #412]	@ (8000c54 <_Z10appContentv+0x640>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b65      	ldr	r3, [pc, #404]	@ (8000c54 <_Z10appContentv+0x640>)
 8000abe:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[4]*16 	+ errorHardware[5]*32;				// Multiplexa error 4 y 5
 8000ac0:	4b63      	ldr	r3, [pc, #396]	@ (8000c50 <_Z10appContentv+0x63c>)
 8000ac2:	791b      	ldrb	r3, [r3, #4]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b62      	ldr	r3, [pc, #392]	@ (8000c50 <_Z10appContentv+0x63c>)
 8000ac8:	795b      	ldrb	r3, [r3, #5]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	011b      	lsls	r3, r3, #4
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8000c54 <_Z10appContentv+0x640>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b5d      	ldr	r3, [pc, #372]	@ (8000c54 <_Z10appContentv+0x640>)
 8000ade:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[6]*64;										// Multiplexa error 6
 8000ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8000c50 <_Z10appContentv+0x63c>)
 8000ae2:	799b      	ldrb	r3, [r3, #6]
 8000ae4:	019b      	lsls	r3, r3, #6
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8000c54 <_Z10appContentv+0x640>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b58      	ldr	r3, [pc, #352]	@ (8000c54 <_Z10appContentv+0x640>)
 8000af2:	701a      	strb	r2, [r3, #0]

		content[0]	= '4';						// Indica que longitud va en puerto 3
 8000af4:	4b58      	ldr	r3, [pc, #352]	@ (8000c58 <_Z10appContentv+0x644>)
 8000af6:	2234      	movs	r2, #52	@ 0x34
 8000af8:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(warnings);		// Guarda primeros 4 bits de warnings
 8000afa:	4b54      	ldr	r3, [pc, #336]	@ (8000c4c <_Z10appContentv+0x638>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fab4 	bl	800106c <_Z10uint2hex_Ah>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b53      	ldr	r3, [pc, #332]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b0a:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_A(warnings);		// Guarda segundos 4 bits de warnings
 8000b0c:	4b4f      	ldr	r3, [pc, #316]	@ (8000c4c <_Z10appContentv+0x638>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 faab 	bl	800106c <_Z10uint2hex_Ah>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b1c:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(errorHw);		// Guarda primeros 4 bits de errores
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000c54 <_Z10appContentv+0x640>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 faa2 	bl	800106c <_Z10uint2hex_Ah>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b2e:	70da      	strb	r2, [r3, #3]
		content[4]	= uint2hex_B(errorHw);		// Guarda segundos 4 bits de errores
 8000b30:	4b48      	ldr	r3, [pc, #288]	@ (8000c54 <_Z10appContentv+0x640>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 faff 	bl	8001138 <_Z10uint2hex_Bh>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b46      	ldr	r3, [pc, #280]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b40:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(batScaled);	// Guarda primeros 4 bits de bateria escalada
 8000b42:	4b46      	ldr	r3, [pc, #280]	@ (8000c5c <_Z10appContentv+0x648>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fa8f 	bl	800106c <_Z10uint2hex_Ah>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b41      	ldr	r3, [pc, #260]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b54:	715a      	strb	r2, [r3, #5]
		content[6]	= uint2hex_A(batScaled);	// Guarda segundos 4 bits de bateria escalada
 8000b56:	4b41      	ldr	r3, [pc, #260]	@ (8000c5c <_Z10appContentv+0x648>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fa85 	bl	800106c <_Z10uint2hex_Ah>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b3c      	ldr	r3, [pc, #240]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b68:	719a      	strb	r2, [r3, #6]

		content[7]	= uint2hex_A(0);			// Futuro uso
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 fa7e 	bl	800106c <_Z10uint2hex_Ah>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b38      	ldr	r3, [pc, #224]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b76:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_A(0);			// Futuro iso
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fa77 	bl	800106c <_Z10uint2hex_Ah>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b35      	ldr	r3, [pc, #212]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b84:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Agrega contenido a la fifo
 8000b86:	2209      	movs	r2, #9
 8000b88:	4933      	ldr	r1, [pc, #204]	@ (8000c58 <_Z10appContentv+0x644>)
 8000b8a:	4835      	ldr	r0, [pc, #212]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000b8c:	f000 fb71 	bl	8001272 <_ZN12fifoCommands3addEPhh>

		qttyMsgSys++;
 8000b90:	4b34      	ldr	r3, [pc, #208]	@ (8000c64 <_Z10appContentv+0x650>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b32      	ldr	r3, [pc, #200]	@ (8000c64 <_Z10appContentv+0x650>)
 8000b9a:	701a      	strb	r2, [r3, #0]

		flagSetSys		= 0;						// Reinicia indicador de datos de sistema
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <_Z10appContentv+0x654>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
		stateContent	= 5;						// Pasa a  S5
 8000ba2:	4b32      	ldr	r3, [pc, #200]	@ (8000c6c <_Z10appContentv+0x658>)
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	701a      	strb	r2, [r3, #0]
		break;
 8000ba8:	e04c      	b.n	8000c44 <_Z10appContentv+0x630>
	///////////////////
	// S5 - SET DATA //
	///////////////////

	case 5:
		fifoContent.read(content2, sizeof(content2));	// Lee contenido disponible en FIFO
 8000baa:	2209      	movs	r2, #9
 8000bac:	4930      	ldr	r1, [pc, #192]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bae:	482c      	ldr	r0, [pc, #176]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000bb0:	f000 fba2 	bl	80012f8 <_ZN12fifoCommands4readEPhh>

		macTxData_RN2903[13] = content2[0];			// Copia PUERTO
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c74 <_Z10appContentv+0x660>)
 8000bba:	735a      	strb	r2, [r3, #13]
		macTxData_RN2903[15] = content2[1];			// 0 Byte
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bbe:	785a      	ldrb	r2, [r3, #1]
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <_Z10appContentv+0x660>)
 8000bc2:	73da      	strb	r2, [r3, #15]
		macTxData_RN2903[16] = content2[2];			// 0 Byte
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bc6:	789a      	ldrb	r2, [r3, #2]
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <_Z10appContentv+0x660>)
 8000bca:	741a      	strb	r2, [r3, #16]
		macTxData_RN2903[17] = content2[3];			// 1 Byte
 8000bcc:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bce:	78da      	ldrb	r2, [r3, #3]
 8000bd0:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <_Z10appContentv+0x660>)
 8000bd2:	745a      	strb	r2, [r3, #17]
		macTxData_RN2903[18] = content2[4];			// 1 Byte
 8000bd4:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bd6:	791a      	ldrb	r2, [r3, #4]
 8000bd8:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <_Z10appContentv+0x660>)
 8000bda:	749a      	strb	r2, [r3, #18]
		macTxData_RN2903[19] = content2[5];			// 2 Byte
 8000bdc:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bde:	795a      	ldrb	r2, [r3, #5]
 8000be0:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <_Z10appContentv+0x660>)
 8000be2:	74da      	strb	r2, [r3, #19]
		macTxData_RN2903[20] = content2[6];			// 2 Byte
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000be6:	799a      	ldrb	r2, [r3, #6]
 8000be8:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <_Z10appContentv+0x660>)
 8000bea:	751a      	strb	r2, [r3, #20]
		macTxData_RN2903[21] = content2[7];			// 3 Byte
 8000bec:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bee:	79da      	ldrb	r2, [r3, #7]
 8000bf0:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <_Z10appContentv+0x660>)
 8000bf2:	755a      	strb	r2, [r3, #21]
		macTxData_RN2903[22] = content2[8];			// 3 Byte
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000bf6:	7a1a      	ldrb	r2, [r3, #8]
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <_Z10appContentv+0x660>)
 8000bfa:	759a      	strb	r2, [r3, #22]

		savedData		= 1;						// Indica que se guardaron los datos		stateContent	= 6;						// Pasa a S
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <_Z10appContentv+0x664>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
		stateContent	= 6;						// Pasa a S6
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <_Z10appContentv+0x658>)
 8000c04:	2206      	movs	r2, #6
 8000c06:	701a      	strb	r2, [r3, #0]
		break;
 8000c08:	e01c      	b.n	8000c44 <_Z10appContentv+0x630>
	//////////////////////////
	// S6 - WAIT FOR ENABLE //
	//////////////////////////

	case 6:
		if ( !loraDecision.enable() ){	// Si no está habilitado
 8000c0a:	481c      	ldr	r0, [pc, #112]	@ (8000c7c <_Z10appContentv+0x668>)
 8000c0c:	f003 f80c 	bl	8003c28 <_ZN12loraDecision6enableEv>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f083 0301 	eor.w	r3, r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <_Z10appContentv+0x610>
			stateContent	= 0;		// Vuelve a S0
 8000c1c:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <_Z10appContentv+0x658>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
			stateContent	= 1;		// Vuelve a S1
		}
		else{							// Si no
			stateContent	= 6;		// Espera en S6
		}
		break;
 8000c22:	e00f      	b.n	8000c44 <_Z10appContentv+0x630>
		else if (bussyRN2903){			// Si se habilita
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <_Z10appContentv+0x66c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <_Z10appContentv+0x620>
			stateContent	= 1;		// Vuelve a S1
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <_Z10appContentv+0x658>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e007      	b.n	8000c44 <_Z10appContentv+0x630>
			stateContent	= 6;		// Espera en S6
 8000c34:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <_Z10appContentv+0x658>)
 8000c36:	2206      	movs	r2, #6
 8000c38:	701a      	strb	r2, [r3, #0]
		break;
 8000c3a:	e003      	b.n	8000c44 <_Z10appContentv+0x630>

	default:
		stateContent	= 0;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <_Z10appContentv+0x658>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
		break;
 8000c42:	bf00      	nop
	}
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200004d0 	.word	0x200004d0
 8000c4c:	200003ed 	.word	0x200003ed
 8000c50:	200004d8 	.word	0x200004d8
 8000c54:	200003ec 	.word	0x200003ec
 8000c58:	200003cc 	.word	0x200003cc
 8000c5c:	20000528 	.word	0x20000528
 8000c60:	20001098 	.word	0x20001098
 8000c64:	200003f0 	.word	0x200003f0
 8000c68:	20001160 	.word	0x20001160
 8000c6c:	200003c4 	.word	0x200003c4
 8000c70:	200003d8 	.word	0x200003d8
 8000c74:	200002f4 	.word	0x200002f4
 8000c78:	200003c7 	.word	0x200003c7
 8000c7c:	20000b7c 	.word	0x20000b7c
 8000c80:	200003c8 	.word	0x200003c8

08000c84 <_Z7appLorav>:
 * 	chSetRN2903:	Fija configuracion de canales del chip
 * 	loopRN2903:		Fija comandos de transmision en el chip
 *
 */

void appLora(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

	switch ( stateLoraApp ){
 8000c88:	4ba7      	ldr	r3, [pc, #668]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b0a      	cmp	r3, #10
 8000c8e:	f200 81d8 	bhi.w	8001042 <_Z7appLorav+0x3be>
 8000c92:	a201      	add	r2, pc, #4	@ (adr r2, 8000c98 <_Z7appLorav+0x14>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000cc5 	.word	0x08000cc5
 8000c9c:	08000ceb 	.word	0x08000ceb
 8000ca0:	08000d1d 	.word	0x08000d1d
 8000ca4:	08000d7d 	.word	0x08000d7d
 8000ca8:	08000dd1 	.word	0x08000dd1
 8000cac:	08000e2d 	.word	0x08000e2d
 8000cb0:	08000e7f 	.word	0x08000e7f
 8000cb4:	08000e99 	.word	0x08000e99
 8000cb8:	08000ecb 	.word	0x08000ecb
 8000cbc:	08000f6d 	.word	0x08000f6d
 8000cc0:	08000fc9 	.word	0x08000fc9
	//////////////////////////
	// S0 - WAIT FOR ENABLE //
	//////////////////////////

	case 0:
		if ( loraDecision.enable() ){						// Si el chip esta habilitado por SW
 8000cc4:	4899      	ldr	r0, [pc, #612]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000cc6:	f002 ffaf 	bl	8003c28 <_ZN12loraDecision6enableEv>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d008      	beq.n	8000ce2 <_Z7appLorav+0x5e>
			loraCheck.setResponsePointer( rxCommand, 14);	//
 8000cd0:	220e      	movs	r2, #14
 8000cd2:	4997      	ldr	r1, [pc, #604]	@ (8000f30 <_Z7appLorav+0x2ac>)
 8000cd4:	4897      	ldr	r0, [pc, #604]	@ (8000f34 <_Z7appLorav+0x2b0>)
 8000cd6:	f002 fd7f 	bl	80037d8 <_ZN9loraCheck18setResponsePointerEPPhh>
			stateLoraApp	= 7;							// Pasa a S1
 8000cda:	4b93      	ldr	r3, [pc, #588]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateLoraApp	= 0;							// Espera en S0
		}
		break;
 8000ce0:	e1b3      	b.n	800104a <_Z7appLorav+0x3c6>
			stateLoraApp	= 0;							// Espera en S0
 8000ce2:	4b91      	ldr	r3, [pc, #580]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
		break;
 8000ce8:	e1af      	b.n	800104a <_Z7appLorav+0x3c6>
	////////////////////////////
	// S1 - SET SETUP COMMAND //
	////////////////////////////

	case 1:
		loraDecision.reset();
 8000cea:	4890      	ldr	r0, [pc, #576]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000cec:	f002 ff79 	bl	8003be2 <_ZN12loraDecision5resetEv>
		txCommandPointer	= setupRN2903.command();		// Solicita comando
 8000cf0:	4891      	ldr	r0, [pc, #580]	@ (8000f38 <_Z7appLorav+0x2b4>)
 8000cf2:	f002 fcc4 	bl	800367e <_ZN10loraRutine7commandEv>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a90      	ldr	r2, [pc, #576]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000cfa:	6013      	str	r3, [r2, #0]
		loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6859      	ldr	r1, [r3, #4]
 8000d02:	4b8e      	ldr	r3, [pc, #568]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b8c      	ldr	r3, [pc, #560]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	7a1b      	ldrb	r3, [r3, #8]
 8000d0e:	488c      	ldr	r0, [pc, #560]	@ (8000f40 <_Z7appLorav+0x2bc>)
 8000d10:	f002 fe8c 	bl	8003a2c <_ZN10loraSelect10setCommandEPhhh>
			txCommandPointer->size,							// Inserta tamañp del comando
			txCommandPointer->responseSize);				// Inserta tamaño de respuesta
		stateLoraApp	= 2;								// Pasa a S2
 8000d14:	4b84      	ldr	r3, [pc, #528]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	701a      	strb	r2, [r3, #0]
		break;
 8000d1a:	e196      	b.n	800104a <_Z7appLorav+0x3c6>
	// S2 - WAIT FOR NEXT //
	////////////////////////

	case 2:

		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000d1c:	4883      	ldr	r0, [pc, #524]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000d1e:	f002 ff83 	bl	8003c28 <_ZN12loraDecision6enableEv>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f083 0301 	eor.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <_Z7appLorav+0xb2>
			stateLoraApp	= 6;										// Pasa a S6
 8000d2e:	4b7e      	ldr	r3, [pc, #504]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000d30:	2206      	movs	r2, #6
 8000d32:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;										// Vuelve a S1
		}
		else{															// Si no
			stateLoraApp	= 2;										// Se queda en S2
		}
		break;
 8000d34:	e189      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && setupRN2903.finish() ){		// Si llegó la respuesta correcta y es la ultima
 8000d36:	487d      	ldr	r0, [pc, #500]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000d38:	f002 ff82 	bl	8003c40 <_ZN12loraDecision7correctEv>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d007      	beq.n	8000d52 <_Z7appLorav+0xce>
 8000d42:	487d      	ldr	r0, [pc, #500]	@ (8000f38 <_Z7appLorav+0x2b4>)
 8000d44:	f002 fcd7 	bl	80036f6 <_ZN10loraRutine6finishEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <_Z7appLorav+0xce>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <_Z7appLorav+0xd0>
 8000d52:	2300      	movs	r3, #0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <_Z7appLorav+0xdc>
			stateLoraApp	= 3;										// Pasa a  S3
 8000d58:	4b73      	ldr	r3, [pc, #460]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	701a      	strb	r2, [r3, #0]
		break;
 8000d5e:	e174      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8000d60:	4872      	ldr	r0, [pc, #456]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000d62:	f002 ff6d 	bl	8003c40 <_ZN12loraDecision7correctEv>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <_Z7appLorav+0xf0>
			stateLoraApp	= 1;										// Vuelve a S1
 8000d6c:	4b6e      	ldr	r3, [pc, #440]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
		break;
 8000d72:	e16a      	b.n	800104a <_Z7appLorav+0x3c6>
			stateLoraApp	= 2;										// Se queda en S2
 8000d74:	4b6c      	ldr	r3, [pc, #432]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	701a      	strb	r2, [r3, #0]
		break;
 8000d7a:	e166      	b.n	800104a <_Z7appLorav+0x3c6>
	// S3 - GET TX COMMAND //
	/////////////////////////

	case 3:

		if ( savedData ){										//
 8000d7c:	4b71      	ldr	r3, [pc, #452]	@ (8000f44 <_Z7appLorav+0x2c0>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d021      	beq.n	8000dc8 <_Z7appLorav+0x144>
			qttyMessagesInputs2++;
 8000d84:	4b70      	ldr	r3, [pc, #448]	@ (8000f48 <_Z7appLorav+0x2c4>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b6e      	ldr	r3, [pc, #440]	@ (8000f48 <_Z7appLorav+0x2c4>)
 8000d8e:	701a      	strb	r2, [r3, #0]
			loraDecision.reset();								//
 8000d90:	4866      	ldr	r0, [pc, #408]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000d92:	f002 ff26 	bl	8003be2 <_ZN12loraDecision5resetEv>
			loopRN2903.reset();									//
 8000d96:	486d      	ldr	r0, [pc, #436]	@ (8000f4c <_Z7appLorav+0x2c8>)
 8000d98:	f002 fc9b 	bl	80036d2 <_ZN10loraRutine5resetEv>
			txCommandPointer	= loopRN2903.command();			// Solicita comando
 8000d9c:	486b      	ldr	r0, [pc, #428]	@ (8000f4c <_Z7appLorav+0x2c8>)
 8000d9e:	f002 fc6e 	bl	800367e <_ZN10loraRutine7commandEv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a65      	ldr	r2, [pc, #404]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000da6:	6013      	str	r3, [r2, #0]

			loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000da8:	4b64      	ldr	r3, [pc, #400]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6859      	ldr	r1, [r3, #4]
 8000dae:	4b63      	ldr	r3, [pc, #396]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	4b61      	ldr	r3, [pc, #388]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	7a1b      	ldrb	r3, [r3, #8]
 8000dba:	4861      	ldr	r0, [pc, #388]	@ (8000f40 <_Z7appLorav+0x2bc>)
 8000dbc:	f002 fe36 	bl	8003a2c <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,							// Inserta tamañp del comando
				txCommandPointer->responseSize);				// Inserta tamaño de respuesta
			stateLoraApp	= 4;								// Pasa a S4
 8000dc0:	4b59      	ldr	r3, [pc, #356]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateLoraApp	= 3;								// Espera en S3
		}
		break;
 8000dc6:	e140      	b.n	800104a <_Z7appLorav+0x3c6>
			stateLoraApp	= 3;								// Espera en S3
 8000dc8:	4b57      	ldr	r3, [pc, #348]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	701a      	strb	r2, [r3, #0]
		break;
 8000dce:	e13c      	b.n	800104a <_Z7appLorav+0x3c6>
	////////////////////////////
	// S4 - WAIT FOR RESPONSE //
	////////////////////////////

	case 4:
		if ( !loraDecision.enable() ){			// Si el chip esta habilitado
 8000dd0:	4856      	ldr	r0, [pc, #344]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000dd2:	f002 ff29 	bl	8003c28 <_ZN12loraDecision6enableEv>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f083 0301 	eor.w	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <_Z7appLorav+0x166>
			stateLoraApp	= 6;				// Pasa a S6
 8000de2:	4b51      	ldr	r3, [pc, #324]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000de4:	2206      	movs	r2, #6
 8000de6:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;
		}
		else{									// Si no
			stateLoraApp	= 4;				// Se queda en S4
		}
		break;
 8000de8:	e12f      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){		// Si es correcto
 8000dea:	4850      	ldr	r0, [pc, #320]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000dec:	f002 ff28 	bl	8003c40 <_ZN12loraDecision7correctEv>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <_Z7appLorav+0x17a>
			stateLoraApp	= 5;				// Vuelve a S5
 8000df6:	4b4c      	ldr	r3, [pc, #304]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000df8:	2205      	movs	r2, #5
 8000dfa:	701a      	strb	r2, [r3, #0]
		break;
 8000dfc:	e125      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( loraDecision.burn()){
 8000dfe:	484b      	ldr	r0, [pc, #300]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000e00:	f002 ff2a 	bl	8003c58 <_ZN12loraDecision4burnEv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00c      	beq.n	8000e24 <_Z7appLorav+0x1a0>
			setupRN2903.reset();	// Reinicia rutina
 8000e0a:	484b      	ldr	r0, [pc, #300]	@ (8000f38 <_Z7appLorav+0x2b4>)
 8000e0c:	f002 fc61 	bl	80036d2 <_ZN10loraRutine5resetEv>
			chSetRN2903.reset();	// Reinicia rutina
 8000e10:	484f      	ldr	r0, [pc, #316]	@ (8000f50 <_Z7appLorav+0x2cc>)
 8000e12:	f002 fc5e 	bl	80036d2 <_ZN10loraRutine5resetEv>
			loopRN2903.reset();		// Reinicia rutina
 8000e16:	484d      	ldr	r0, [pc, #308]	@ (8000f4c <_Z7appLorav+0x2c8>)
 8000e18:	f002 fc5b 	bl	80036d2 <_ZN10loraRutine5resetEv>
			stateLoraApp	= 1;
 8000e1c:	4b42      	ldr	r3, [pc, #264]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
		break;
 8000e22:	e112      	b.n	800104a <_Z7appLorav+0x3c6>
			stateLoraApp	= 4;				// Se queda en S4
 8000e24:	4b40      	ldr	r3, [pc, #256]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000e26:	2204      	movs	r2, #4
 8000e28:	701a      	strb	r2, [r3, #0]
		break;
 8000e2a:	e10e      	b.n	800104a <_Z7appLorav+0x3c6>
	////////////////////////////////
	// S5 - WAIT FOR NEXT MESSAGE //
	////////////////////////////////

	case 5:
		savedData = 0;								// Indica que se envia
 8000e2c:	4b45      	ldr	r3, [pc, #276]	@ (8000f44 <_Z7appLorav+0x2c0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
		countLoraApp++;								// Suma 1 al contador
 8000e32:	4b48      	ldr	r3, [pc, #288]	@ (8000f54 <_Z7appLorav+0x2d0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a46      	ldr	r2, [pc, #280]	@ (8000f54 <_Z7appLorav+0x2d0>)
 8000e3a:	6013      	str	r3, [r2, #0]

		if ( !loraDecision.enable() ){				// Si el chip esta habilitado
 8000e3c:	483b      	ldr	r0, [pc, #236]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000e3e:	f002 fef3 	bl	8003c28 <_ZN12loraDecision6enableEv>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f083 0301 	eor.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <_Z7appLorav+0x1d2>
			stateLoraApp	= 6;					// Pasa a S6
 8000e4e:	4b36      	ldr	r3, [pc, #216]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000e50:	2206      	movs	r2, #6
 8000e52:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateLoraApp	= 5;					// Espera
		}

		break;
 8000e54:	e0f9      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( countLoraApp >= limitLoraApp ){	// Si pasa el limite
 8000e56:	4b3f      	ldr	r3, [pc, #252]	@ (8000f54 <_Z7appLorav+0x2d0>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f58 <_Z7appLorav+0x2d4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	db09      	blt.n	8000e76 <_Z7appLorav+0x1f2>
			bussyRN2903		= 1;					// Habilita
 8000e62:	4b3e      	ldr	r3, [pc, #248]	@ (8000f5c <_Z7appLorav+0x2d8>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
			countLoraApp	= 0;					// Reinicia contador
 8000e68:	4b3a      	ldr	r3, [pc, #232]	@ (8000f54 <_Z7appLorav+0x2d0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
			stateLoraApp	= 3;					// Pasa a S3
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000e70:	2203      	movs	r2, #3
 8000e72:	701a      	strb	r2, [r3, #0]
		break;
 8000e74:	e0e9      	b.n	800104a <_Z7appLorav+0x3c6>
			stateLoraApp	= 5;					// Espera
 8000e76:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000e78:	2205      	movs	r2, #5
 8000e7a:	701a      	strb	r2, [r3, #0]
		break;
 8000e7c:	e0e5      	b.n	800104a <_Z7appLorav+0x3c6>
	////////////////////////
	// S6 - RESET RUTINES //
	////////////////////////

	case 6:
		setupRN2903.reset();	// Reinicia rutina
 8000e7e:	482e      	ldr	r0, [pc, #184]	@ (8000f38 <_Z7appLorav+0x2b4>)
 8000e80:	f002 fc27 	bl	80036d2 <_ZN10loraRutine5resetEv>
		chSetRN2903.reset();	// Reinicia rutina
 8000e84:	4832      	ldr	r0, [pc, #200]	@ (8000f50 <_Z7appLorav+0x2cc>)
 8000e86:	f002 fc24 	bl	80036d2 <_ZN10loraRutine5resetEv>
		loopRN2903.reset();		// Reinicia rutina
 8000e8a:	4830      	ldr	r0, [pc, #192]	@ (8000f4c <_Z7appLorav+0x2c8>)
 8000e8c:	f002 fc21 	bl	80036d2 <_ZN10loraRutine5resetEv>

		stateLoraApp	= 0;	// Vuelve a S0
 8000e90:	4b25      	ldr	r3, [pc, #148]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
		break;
 8000e96:	e0d8      	b.n	800104a <_Z7appLorav+0x3c6>
	/////////////////////////
	// S7 - SET CH COMMAND //
	/////////////////////////

	case 7:
		loraDecision.reset();								// Reinicia decisiones
 8000e98:	4824      	ldr	r0, [pc, #144]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000e9a:	f002 fea2 	bl	8003be2 <_ZN12loraDecision5resetEv>
		txCommandPointer	= chSetRN2903.command();		// Solicita comando
 8000e9e:	482c      	ldr	r0, [pc, #176]	@ (8000f50 <_Z7appLorav+0x2cc>)
 8000ea0:	f002 fbed 	bl	800367e <_ZN10loraRutine7commandEv>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a25      	ldr	r2, [pc, #148]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000ea8:	6013      	str	r3, [r2, #0]
		loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000eaa:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6859      	ldr	r1, [r3, #4]
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <_Z7appLorav+0x2b8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	7a1b      	ldrb	r3, [r3, #8]
 8000ebc:	4820      	ldr	r0, [pc, #128]	@ (8000f40 <_Z7appLorav+0x2bc>)
 8000ebe:	f002 fdb5 	bl	8003a2c <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,						// Inserta tamañp del comando
				txCommandPointer->responseSize );			// Inserta tamaño de respuesta
		stateLoraApp	= 8;								// Pasa a S2
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	701a      	strb	r2, [r3, #0]
		break;
 8000ec8:	e0bf      	b.n	800104a <_Z7appLorav+0x3c6>
	/////////////////////////
	// S8 - CHECK RESPONSE //
	/////////////////////////

	case 8:
		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000eca:	4818      	ldr	r0, [pc, #96]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000ecc:	f002 feac 	bl	8003c28 <_ZN12loraDecision6enableEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f083 0301 	eor.w	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <_Z7appLorav+0x260>
			stateLoraApp	= 6;										// Pasa a S6
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000ede:	2206      	movs	r2, #6
 8000ee0:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 7;										// Vuelve a S7
		}
		else{															// Si no
			stateLoraApp	= 8;										// Se queda en S8
		}
		break;
 8000ee2:	e0b2      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && chSetRN2903.finish() ){		// Si llegó la respuesta correcta y es la ultima
 8000ee4:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000ee6:	f002 feab 	bl	8003c40 <_ZN12loraDecision7correctEv>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <_Z7appLorav+0x27c>
 8000ef0:	4817      	ldr	r0, [pc, #92]	@ (8000f50 <_Z7appLorav+0x2cc>)
 8000ef2:	f002 fc00 	bl	80036f6 <_ZN10loraRutine6finishEv>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <_Z7appLorav+0x27c>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <_Z7appLorav+0x27e>
 8000f00:	2300      	movs	r3, #0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <_Z7appLorav+0x290>
			countChSet		= 10;										// Inicia contador en 10
 8000f06:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <_Z7appLorav+0x2dc>)
 8000f08:	220a      	movs	r2, #10
 8000f0a:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Pasa a  S9
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000f0e:	2209      	movs	r2, #9
 8000f10:	701a      	strb	r2, [r3, #0]
		break;
 8000f12:	e09a      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <_Z7appLorav+0x2a8>)
 8000f16:	f002 fe93 	bl	8003c40 <_ZN12loraDecision7correctEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d021      	beq.n	8000f64 <_Z7appLorav+0x2e0>
			stateLoraApp	= 7;										// Vuelve a S7
 8000f20:	4b01      	ldr	r3, [pc, #4]	@ (8000f28 <_Z7appLorav+0x2a4>)
 8000f22:	2207      	movs	r2, #7
 8000f24:	701a      	strb	r2, [r3, #0]
		break;
 8000f26:	e090      	b.n	800104a <_Z7appLorav+0x3c6>
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	20000b7c 	.word	0x20000b7c
 8000f30:	20000174 	.word	0x20000174
 8000f34:	20000b68 	.word	0x20000b68
 8000f38:	20000b8c 	.word	0x20000b8c
 8000f3c:	200003f4 	.word	0x200003f4
 8000f40:	20000b84 	.word	0x20000b84
 8000f44:	200003c7 	.word	0x200003c7
 8000f48:	2000050a 	.word	0x2000050a
 8000f4c:	20000eb4 	.word	0x20000eb4
 8000f50:	20000d20 	.word	0x20000d20
 8000f54:	200003f8 	.word	0x200003f8
 8000f58:	200003fc 	.word	0x200003fc
 8000f5c:	200003c8 	.word	0x200003c8
 8000f60:	20000400 	.word	0x20000400
			stateLoraApp	= 8;										// Se queda en S8
 8000f64:	4b3a      	ldr	r3, [pc, #232]	@ (8001050 <_Z7appLorav+0x3cc>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	701a      	strb	r2, [r3, #0]
		break;
 8000f6a:	e06e      	b.n	800104a <_Z7appLorav+0x3c6>
	///////////////////////////
	// S9 - GET LAST COMMAND //
	///////////////////////////

	case 9:
		loraDecision.reset();										// Reinicia decisiones
 8000f6c:	4839      	ldr	r0, [pc, #228]	@ (8001054 <_Z7appLorav+0x3d0>)
 8000f6e:	f002 fe38 	bl	8003be2 <_ZN12loraDecision5resetEv>
		macSetCh10_RN2903[18]	= uint8_t(countChSet/10) + '0';		// Inserta decena del contador
 8000f72:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <_Z7appLorav+0x3d4>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4a39      	ldr	r2, [pc, #228]	@ (800105c <_Z7appLorav+0x3d8>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	3330      	adds	r3, #48	@ 0x30
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b36      	ldr	r3, [pc, #216]	@ (8001060 <_Z7appLorav+0x3dc>)
 8000f86:	749a      	strb	r2, [r3, #18]
		macSetCh10_RN2903[19]	= countChSet%10 + '0';				// Inserta unidad de contador
 8000f88:	4b33      	ldr	r3, [pc, #204]	@ (8001058 <_Z7appLorav+0x3d4>)
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	4b33      	ldr	r3, [pc, #204]	@ (800105c <_Z7appLorav+0x3d8>)
 8000f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f92:	08d9      	lsrs	r1, r3, #3
 8000f94:	460b      	mov	r3, r1
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3330      	adds	r3, #48	@ 0x30
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <_Z7appLorav+0x3dc>)
 8000fa6:	74da      	strb	r2, [r3, #19]
		loraSelect.setCommand( txCommandPointer->command,			// Fija comando en la salida
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <_Z7appLorav+0x3e0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6859      	ldr	r1, [r3, #4]
 8000fae:	4b2d      	ldr	r3, [pc, #180]	@ (8001064 <_Z7appLorav+0x3e0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <_Z7appLorav+0x3e0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	7a1b      	ldrb	r3, [r3, #8]
 8000fba:	482b      	ldr	r0, [pc, #172]	@ (8001068 <_Z7appLorav+0x3e4>)
 8000fbc:	f002 fd36 	bl	8003a2c <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,								// Inserta tamañp del comando
				txCommandPointer->responseSize);					// Inserta tamaño de respuesta
		stateLoraApp	= 10;										// Pasa a S10
 8000fc0:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <_Z7appLorav+0x3cc>)
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	701a      	strb	r2, [r3, #0]
		break;
 8000fc6:	e040      	b.n	800104a <_Z7appLorav+0x3c6>
	//////////////////////////
	// S10 - CHECK RESPONSE //
	//////////////////////////

	case 10:
		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000fc8:	4822      	ldr	r0, [pc, #136]	@ (8001054 <_Z7appLorav+0x3d0>)
 8000fca:	f002 fe2d 	bl	8003c28 <_ZN12loraDecision6enableEv>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <_Z7appLorav+0x35e>
			stateLoraApp	= 6;										// Pasa a S6
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <_Z7appLorav+0x3cc>)
 8000fdc:	2206      	movs	r2, #6
 8000fde:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Vuelve a S9
		}
		else{															// Si no
			stateLoraApp	= 10;										// Se queda en S10
		}
		break;
 8000fe0:	e033      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && countChSet == 71 ){			// Si llegó la respuesta correcta y es la ultima
 8000fe2:	481c      	ldr	r0, [pc, #112]	@ (8001054 <_Z7appLorav+0x3d0>)
 8000fe4:	f002 fe2c 	bl	8003c40 <_ZN12loraDecision7correctEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <_Z7appLorav+0x376>
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <_Z7appLorav+0x3d4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b47      	cmp	r3, #71	@ 0x47
 8000ff4:	d101      	bne.n	8000ffa <_Z7appLorav+0x376>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <_Z7appLorav+0x378>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00c      	beq.n	800101a <_Z7appLorav+0x396>
			macSetCh10_RN2903[18]	= '1';								// Fija comando en valor original '1'
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <_Z7appLorav+0x3dc>)
 8001002:	2231      	movs	r2, #49	@ 0x31
 8001004:	749a      	strb	r2, [r3, #18]
			macSetCh10_RN2903[19]	= '0';								// Fija comando en valor original '0'
 8001006:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <_Z7appLorav+0x3dc>)
 8001008:	2230      	movs	r2, #48	@ 0x30
 800100a:	74da      	strb	r2, [r3, #19]
			countChSet		= 10;										// Reinicia contador en 10
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <_Z7appLorav+0x3d4>)
 800100e:	220a      	movs	r2, #10
 8001010:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;										// Pasa a  S3
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <_Z7appLorav+0x3cc>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
		break;
 8001018:	e017      	b.n	800104a <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 800101a:	480e      	ldr	r0, [pc, #56]	@ (8001054 <_Z7appLorav+0x3d0>)
 800101c:	f002 fe10 	bl	8003c40 <_ZN12loraDecision7correctEv>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d009      	beq.n	800103a <_Z7appLorav+0x3b6>
			countChSet++;												// Suma 1 al contador
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <_Z7appLorav+0x3d4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <_Z7appLorav+0x3d4>)
 8001030:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Vuelve a S9
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <_Z7appLorav+0x3cc>)
 8001034:	2209      	movs	r2, #9
 8001036:	701a      	strb	r2, [r3, #0]
		break;
 8001038:	e007      	b.n	800104a <_Z7appLorav+0x3c6>
			stateLoraApp	= 10;										// Se queda en S10
 800103a:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <_Z7appLorav+0x3cc>)
 800103c:	220a      	movs	r2, #10
 800103e:	701a      	strb	r2, [r3, #0]
		break;
 8001040:	e003      	b.n	800104a <_Z7appLorav+0x3c6>

	default:
		stateLoraApp	= 0;
 8001042:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <_Z7appLorav+0x3cc>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
		break;
 8001048:	bf00      	nop
	}
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	20000b7c 	.word	0x20000b7c
 8001058:	20000400 	.word	0x20000400
 800105c:	cccccccd 	.word	0xcccccccd
 8001060:	2000037c 	.word	0x2000037c
 8001064:	200003f4 	.word	0x200003f4
 8001068:	20000b84 	.word	0x20000b84

0800106c <_Z10uint2hex_Ah>:

uint8_t uint2hex_A( uint8_t number ){
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	uint8_t value = (number >> 4 & 0x0F);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	73fb      	strb	r3, [r7, #15]

	switch ( value ){
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	d852      	bhi.n	8001128 <_Z10uint2hex_Ah+0xbc>
 8001082:	a201      	add	r2, pc, #4	@ (adr r2, 8001088 <_Z10uint2hex_Ah+0x1c>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	080010c9 	.word	0x080010c9
 800108c:	080010cf 	.word	0x080010cf
 8001090:	080010d5 	.word	0x080010d5
 8001094:	080010db 	.word	0x080010db
 8001098:	080010e1 	.word	0x080010e1
 800109c:	080010e7 	.word	0x080010e7
 80010a0:	080010ed 	.word	0x080010ed
 80010a4:	080010f3 	.word	0x080010f3
 80010a8:	080010f9 	.word	0x080010f9
 80010ac:	080010ff 	.word	0x080010ff
 80010b0:	08001105 	.word	0x08001105
 80010b4:	0800110b 	.word	0x0800110b
 80010b8:	08001111 	.word	0x08001111
 80010bc:	08001117 	.word	0x08001117
 80010c0:	0800111d 	.word	0x0800111d
 80010c4:	08001123 	.word	0x08001123
	case 0:
		value = '0';
 80010c8:	2330      	movs	r3, #48	@ 0x30
 80010ca:	73fb      	strb	r3, [r7, #15]
		break;
 80010cc:	e02c      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 1:
		value = '1';
 80010ce:	2331      	movs	r3, #49	@ 0x31
 80010d0:	73fb      	strb	r3, [r7, #15]
		break;
 80010d2:	e029      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 2:
		value = '2';
 80010d4:	2332      	movs	r3, #50	@ 0x32
 80010d6:	73fb      	strb	r3, [r7, #15]
		break;
 80010d8:	e026      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 3:
		value = '3';
 80010da:	2333      	movs	r3, #51	@ 0x33
 80010dc:	73fb      	strb	r3, [r7, #15]
		break;
 80010de:	e023      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 4:
		value = '4';
 80010e0:	2334      	movs	r3, #52	@ 0x34
 80010e2:	73fb      	strb	r3, [r7, #15]
		break;
 80010e4:	e020      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 5:
		value = '5';
 80010e6:	2335      	movs	r3, #53	@ 0x35
 80010e8:	73fb      	strb	r3, [r7, #15]
		break;
 80010ea:	e01d      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 6:
		value = '6';
 80010ec:	2336      	movs	r3, #54	@ 0x36
 80010ee:	73fb      	strb	r3, [r7, #15]
		break;
 80010f0:	e01a      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 7:
		value = '7';
 80010f2:	2337      	movs	r3, #55	@ 0x37
 80010f4:	73fb      	strb	r3, [r7, #15]
		break;
 80010f6:	e017      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 8:
		value = '8';
 80010f8:	2338      	movs	r3, #56	@ 0x38
 80010fa:	73fb      	strb	r3, [r7, #15]
		break;
 80010fc:	e014      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 9:
		value = '9';
 80010fe:	2339      	movs	r3, #57	@ 0x39
 8001100:	73fb      	strb	r3, [r7, #15]
		break;
 8001102:	e011      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 10:
		value = 'A';
 8001104:	2341      	movs	r3, #65	@ 0x41
 8001106:	73fb      	strb	r3, [r7, #15]
		break;
 8001108:	e00e      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 11:
		value = 'B';
 800110a:	2342      	movs	r3, #66	@ 0x42
 800110c:	73fb      	strb	r3, [r7, #15]
		break;
 800110e:	e00b      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 12:
		value = 'C';
 8001110:	2343      	movs	r3, #67	@ 0x43
 8001112:	73fb      	strb	r3, [r7, #15]
		break;
 8001114:	e008      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 13:
		value = 'D';
 8001116:	2344      	movs	r3, #68	@ 0x44
 8001118:	73fb      	strb	r3, [r7, #15]
		break;
 800111a:	e005      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 14:
		value = 'E';
 800111c:	2345      	movs	r3, #69	@ 0x45
 800111e:	73fb      	strb	r3, [r7, #15]
		break;
 8001120:	e002      	b.n	8001128 <_Z10uint2hex_Ah+0xbc>

	case 15:
		value = 'F';
 8001122:	2346      	movs	r3, #70	@ 0x46
 8001124:	73fb      	strb	r3, [r7, #15]
		break;
 8001126:	bf00      	nop
	}
	return  value;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <_Z10uint2hex_Bh>:

uint8_t uint2hex_B( uint8_t number ){
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	uint8_t value = (number & 0x0F);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	73fb      	strb	r3, [r7, #15]

	switch ( value ){
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d853      	bhi.n	80011f8 <_Z10uint2hex_Bh+0xc0>
 8001150:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <_Z10uint2hex_Bh+0x20>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001199 	.word	0x08001199
 800115c:	0800119f 	.word	0x0800119f
 8001160:	080011a5 	.word	0x080011a5
 8001164:	080011ab 	.word	0x080011ab
 8001168:	080011b1 	.word	0x080011b1
 800116c:	080011b7 	.word	0x080011b7
 8001170:	080011bd 	.word	0x080011bd
 8001174:	080011c3 	.word	0x080011c3
 8001178:	080011c9 	.word	0x080011c9
 800117c:	080011cf 	.word	0x080011cf
 8001180:	080011d5 	.word	0x080011d5
 8001184:	080011db 	.word	0x080011db
 8001188:	080011e1 	.word	0x080011e1
 800118c:	080011e7 	.word	0x080011e7
 8001190:	080011ed 	.word	0x080011ed
 8001194:	080011f3 	.word	0x080011f3
	case 0:
		value = '0';
 8001198:	2330      	movs	r3, #48	@ 0x30
 800119a:	73fb      	strb	r3, [r7, #15]
		break;
 800119c:	e02c      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 1:
		value = '1';
 800119e:	2331      	movs	r3, #49	@ 0x31
 80011a0:	73fb      	strb	r3, [r7, #15]
		break;
 80011a2:	e029      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 2:
		value = '2';
 80011a4:	2332      	movs	r3, #50	@ 0x32
 80011a6:	73fb      	strb	r3, [r7, #15]
		break;
 80011a8:	e026      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 3:
		value = '3';
 80011aa:	2333      	movs	r3, #51	@ 0x33
 80011ac:	73fb      	strb	r3, [r7, #15]
		break;
 80011ae:	e023      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 4:
		value = '4';
 80011b0:	2334      	movs	r3, #52	@ 0x34
 80011b2:	73fb      	strb	r3, [r7, #15]
		break;
 80011b4:	e020      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 5:
		value = '5';
 80011b6:	2335      	movs	r3, #53	@ 0x35
 80011b8:	73fb      	strb	r3, [r7, #15]
		break;
 80011ba:	e01d      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 6:
		value = '6';
 80011bc:	2336      	movs	r3, #54	@ 0x36
 80011be:	73fb      	strb	r3, [r7, #15]
		break;
 80011c0:	e01a      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 7:
		value = '7';
 80011c2:	2337      	movs	r3, #55	@ 0x37
 80011c4:	73fb      	strb	r3, [r7, #15]
		break;
 80011c6:	e017      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 8:
		value = '8';
 80011c8:	2338      	movs	r3, #56	@ 0x38
 80011ca:	73fb      	strb	r3, [r7, #15]
		break;
 80011cc:	e014      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 9:
		value = '9';
 80011ce:	2339      	movs	r3, #57	@ 0x39
 80011d0:	73fb      	strb	r3, [r7, #15]
		break;
 80011d2:	e011      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 10:
		value = 'A';
 80011d4:	2341      	movs	r3, #65	@ 0x41
 80011d6:	73fb      	strb	r3, [r7, #15]
		break;
 80011d8:	e00e      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 11:
		value = 'B';
 80011da:	2342      	movs	r3, #66	@ 0x42
 80011dc:	73fb      	strb	r3, [r7, #15]
		break;
 80011de:	e00b      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 12:
		value = 'C';
 80011e0:	2343      	movs	r3, #67	@ 0x43
 80011e2:	73fb      	strb	r3, [r7, #15]
		break;
 80011e4:	e008      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 13:
		value = 'D';
 80011e6:	2344      	movs	r3, #68	@ 0x44
 80011e8:	73fb      	strb	r3, [r7, #15]
		break;
 80011ea:	e005      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 14:
		value = 'E';
 80011ec:	2345      	movs	r3, #69	@ 0x45
 80011ee:	73fb      	strb	r3, [r7, #15]
		break;
 80011f0:	e002      	b.n	80011f8 <_Z10uint2hex_Bh+0xc0>

	case 15:
		value = 'F';
 80011f2:	2346      	movs	r3, #70	@ 0x46
 80011f4:	73fb      	strb	r3, [r7, #15]
		break;
 80011f6:	bf00      	nop
	}
	return  value;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <_Z41__static_initialization_and_destruction_0ii>:
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10d      	bne.n	8001234 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800121e:	4293      	cmp	r3, r2
 8001220:	d108      	bne.n	8001234 <_Z41__static_initialization_and_destruction_0ii+0x2c>
int limitLoraApp = 5000/superloop;
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	f241 3388 	movw	r3, #5000	@ 0x1388
 800122c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	20000399 	.word	0x20000399
 8001244:	200003fc 	.word	0x200003fc

08001248 <_GLOBAL__sub_I_stateContent>:
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
 800124c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ffd9 	bl	8001208 <_Z41__static_initialization_and_destruction_0ii>
 8001256:	bd80      	pop	{r7, pc}

08001258 <_ZN12fifoCommands9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoCommands::available(){		// Indica si hay elementos en Fifo
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	return this->bussy;				// Retorna flag
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_ZN12fifoCommands3addEPhh>:

/////////////////
// ADD COMMAND //
/////////////////

void fifoCommands::add( uint8_t *command, uint8_t size ){
 8001272:	b480      	push	{r7}
 8001274:	b087      	sub	sp, #28
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	4613      	mov	r3, r2
 800127e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;															// Crea variable

	if ( this->index < 10 ){											// Si el indice es menor a 10
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001286:	2b09      	cmp	r3, #9
 8001288:	d828      	bhi.n	80012dc <_ZN12fifoCommands3addEPhh+0x6a>
		for( i = 0; i < size ; i++){									// Recorre el largo del comando
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]
 800128e:	e010      	b.n	80012b2 <_ZN12fifoCommands3addEPhh+0x40>
			*(this->rxCommand[this->index] + i)  = *(command + i);		// Copia valores del comando
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	441a      	add	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800129c:	68f9      	ldr	r1, [r7, #12]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	440b      	add	r3, r1
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	701a      	strb	r2, [r3, #0]
		for( i = 0; i < size ; i++){									// Recorre el largo del comando
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	3301      	adds	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	7dfa      	ldrb	r2, [r7, #23]
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3ea      	bcc.n	8001290 <_ZN12fifoCommands3addEPhh+0x1e>
		}
		this->index++;													// Suma 1 al indice
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		this->full 	= 0;												// Indica que no está full
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		this->bussy	= 1;												// Indica que hay elementos
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
	else{																// Si no
		this->bussy	= 1;												// Indica que hay elementos
		this->full 	= 1;												// Indica que esta full
	}
}
 80012da:	e007      	b.n	80012ec <_ZN12fifoCommands3addEPhh+0x7a>
		this->bussy	= 1;												// Indica que hay elementos
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		this->full 	= 1;												// Indica que esta full
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_ZN12fifoCommands4readEPhh>:
//////////////////

/*
 * El output de esta operacion es la variable *buffer que a su vez es una entrada
 */
void fifoCommands::read( uint8_t *buffer, uint8_t size ){
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	4613      	mov	r3, r2
 8001304:	71fb      	strb	r3, [r7, #7]
	uint8_t i;																// Crea variable
	uint8_t j;																// Crea variable

	if ( this->index > 0 ){													// Si el indice es mayo a 0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	d040      	beq.n	8001392 <_ZN12fifoCommands4readEPhh+0x9a>
		for (i = 0; i < size; i++){											// Recorre largo del comando
 8001310:	2300      	movs	r3, #0
 8001312:	75fb      	strb	r3, [r7, #23]
 8001314:	e00b      	b.n	800132e <_ZN12fifoCommands4readEPhh+0x36>
			buffer[i]	= this->rxCommand_0[i];								// Copia comando en buffer
 8001316:	7dfa      	ldrb	r2, [r7, #23]
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	440b      	add	r3, r1
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	440a      	add	r2, r1
 8001322:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8001326:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; i++){											// Recorre largo del comando
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	3301      	adds	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
 800132e:	7dfa      	ldrb	r2, [r7, #23]
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3ef      	bcc.n	8001316 <_ZN12fifoCommands4readEPhh+0x1e>
		}

		for (i = 0; i < this->index; i++){									// Recorre Fifo ocupada
 8001336:	2300      	movs	r3, #0
 8001338:	75fb      	strb	r3, [r7, #23]
 800133a:	e01c      	b.n	8001376 <_ZN12fifoCommands4readEPhh+0x7e>
			for (j = 0; j < 10; j++){										// Recorre elementos de comando
 800133c:	2300      	movs	r3, #0
 800133e:	75bb      	strb	r3, [r7, #22]
 8001340:	e013      	b.n	800136a <_ZN12fifoCommands4readEPhh+0x72>
				*(this->rxCommand[i] + j) = *(this->rxCommand[i + 1] + j);	// Realiza un shift de los comandos en fifo
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	3301      	adds	r3, #1
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	7dbb      	ldrb	r3, [r7, #22]
 8001350:	441a      	add	r2, r3
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	68f9      	ldr	r1, [r7, #12]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	6859      	ldr	r1, [r3, #4]
 800135c:	7dbb      	ldrb	r3, [r7, #22]
 800135e:	440b      	add	r3, r1
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++){										// Recorre elementos de comando
 8001364:	7dbb      	ldrb	r3, [r7, #22]
 8001366:	3301      	adds	r3, #1
 8001368:	75bb      	strb	r3, [r7, #22]
 800136a:	7dbb      	ldrb	r3, [r7, #22]
 800136c:	2b09      	cmp	r3, #9
 800136e:	d9e8      	bls.n	8001342 <_ZN12fifoCommands4readEPhh+0x4a>
		for (i = 0; i < this->index; i++){									// Recorre Fifo ocupada
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	3301      	adds	r3, #1
 8001374:	75fb      	strb	r3, [r7, #23]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800137c:	7dfa      	ldrb	r2, [r7, #23]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3dc      	bcc.n	800133c <_ZN12fifoCommands4readEPhh+0x44>
			}
		}
		this->index--;														// Resta 1 en largo de fifo ocupada
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001388:	3b01      	subs	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	if ( this->index == 0){													// Si el largo es 0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <_ZN12fifoCommands4readEPhh+0xac>
		this->bussy	= 0;													// Indica que no está ocupada
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_ZN8fifoUartC1Ev>:


/********************/

fifoUart::fifoUart(){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	this->finalElement = this->elements;	// Cuando se construye la fifo
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f103 020c 	add.w	r2, r3, #12
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
											// El puntero de ultimo elemento
											// Apunta al primer elemento de la cadena
}
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_ZN8fifoUart13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

bool fifoUart::insertElement( uint8_t element ){
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]

	if (!(this->bussyFifo)){							// Si no está lleno
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	795b      	ldrb	r3, [r3, #5]
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00d      	beq.n	8001406 <_ZN8fifoUart13insertElementEh+0x36>
		*this->finalElement	= element;					// Inserta elemento
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	701a      	strb	r2, [r3, #0]
		this->finalElement = this->finalElement + 1;	// Suma 1 al puntero
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]
		this->large++;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
	}

	if ( this->finalElement == &this->elements[50] ){	// Si el puntero es el último del array
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	333e      	adds	r3, #62	@ 0x3e
 800140e:	429a      	cmp	r2, r3
 8001410:	d103      	bne.n	800141a <_ZN8fifoUart13insertElementEh+0x4a>
		this->bussyFifo	= 1;							// Indica que se lleno el buffer
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	715a      	strb	r2, [r3, #5]
 8001418:	e002      	b.n	8001420 <_ZN8fifoUart13insertElementEh+0x50>
	}
	else{												// Si no
		this->bussyFifo	= 0;							// Indica que no se ha llenado
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	715a      	strb	r2, [r3, #5]
	}

	return !(this->bussyFifo);							// 1: Se insertó correctamente
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	795b      	ldrb	r3, [r3, #5]
 8001424:	f083 0301 	eor.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
														// 0: No se inserto por Fifo llena
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_ZN8fifoUart11readElementEv>:

//////////////////
// READ ELEMENT //
//////////////////

uint8_t fifoUart::readElement(){
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]

	uint8_t elementy	= this->elements[0];							// Copia primer valor en fifo
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7b1b      	ldrb	r3, [r3, #12]
 8001442:	72fb      	strb	r3, [r7, #11]

	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	330c      	adds	r3, #12
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e006      	b.n	800145a <_ZN8fifoUart11readElementEv+0x24>
		*j	= *(j+1);													// Copia el elemento siguiente
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	785a      	ldrb	r2, [r3, #1]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	701a      	strb	r2, [r3, #0]
	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3f3      	bcc.n	800144c <_ZN8fifoUart11readElementEv+0x16>
	}

	*this->finalElement = 0;											// Rellena el último valor con 0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]

	if (this->finalElement != this->elements){							// Si el último elemento no es el primero
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	330c      	adds	r3, #12
 8001474:	429a      	cmp	r2, r3
 8001476:	d00d      	beq.n	8001494 <_ZN8fifoUart11readElementEv+0x5e>
		this->finalElement	= this->finalElement - 1;					//  Resta una posición al elemento final
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1e5a      	subs	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
		this->emptyFifo	= 0;											// Indica que fifo no esta vacia
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	711a      	strb	r2, [r3, #4]
		this->large--;													// Quita 1 al largo
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	e002      	b.n	800149a <_ZN8fifoUart11readElementEv+0x64>
	}
	else{																// Si no
		this->emptyFifo	= 1;											// Indica que fifo esta vacia
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	711a      	strb	r2, [r3, #4]
	}

	return elementy;													// Retorna elementos a leer
 800149a:	7afb      	ldrb	r3, [r7, #11]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN8fifoUart9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoUart::available(){
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	if (this->finalElement == &this->elements[0]){		// Si el puntero está apuntando
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	330c      	adds	r3, #12
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d103      	bne.n	80014c4 <_ZN8fifoUart9availableEv+0x1c>
														// al primer elemento de la fifo
		this->emptyFifo	= 1;							// Indica que la fifo esta vacia
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	711a      	strb	r2, [r3, #4]
 80014c2:	e002      	b.n	80014ca <_ZN8fifoUart9availableEv+0x22>
	}
	else{												// Sino
		this->emptyFifo	= 0;							// Indica que la fifo contiene elementos
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	711a      	strb	r2, [r3, #4]
	}
	return !(this->emptyFifo);							// 1: Elementos disponibles
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	f083 0301 	eor.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
}														// 0: Sin elementos
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN8gpsInputC1Ev>:

///////////////////////////
// CONSTRUCTOR GPS INPUT //
///////////////////////////

gpsInput::gpsInput(){
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
};
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <_ZN8gpsInput11insertValueEh>:

//////////////////
// INSERT VALUE //
//////////////////

void gpsInput::insertValue(uint8_t symbol){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]

	uint8_t *state	= &this->stateInsert;	// El estado apunta al registro del objeto
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3356      	adds	r3, #86	@ 0x56
 8001508:	60fb      	str	r3, [r7, #12]

	this->lapsCounter++;			// Aumenta una vuelta
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	60da      	str	r2, [r3, #12]

	switch ( *state ){
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b3c      	cmp	r3, #60	@ 0x3c
 800151a:	f200 829e 	bhi.w	8001a5a <_ZN8gpsInput11insertValueEh+0x562>
 800151e:	a201      	add	r2, pc, #4	@ (adr r2, 8001524 <_ZN8gpsInput11insertValueEh+0x2c>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001619 	.word	0x08001619
 8001528:	08001643 	.word	0x08001643
 800152c:	08001659 	.word	0x08001659
 8001530:	0800166f 	.word	0x0800166f
 8001534:	080016a1 	.word	0x080016a1
 8001538:	080016b7 	.word	0x080016b7
 800153c:	080016cd 	.word	0x080016cd
 8001540:	08001707 	.word	0x08001707
 8001544:	08001765 	.word	0x08001765
 8001548:	08001785 	.word	0x08001785
 800154c:	080017df 	.word	0x080017df
 8001550:	080017fb 	.word	0x080017fb
 8001554:	08001855 	.word	0x08001855
 8001558:	08001871 	.word	0x08001871
 800155c:	080018cb 	.word	0x080018cb
 8001560:	08001925 	.word	0x08001925
 8001564:	08001a5b 	.word	0x08001a5b
 8001568:	08001a5b 	.word	0x08001a5b
 800156c:	08001a5b 	.word	0x08001a5b
 8001570:	08001a5b 	.word	0x08001a5b
 8001574:	08001a5b 	.word	0x08001a5b
 8001578:	08001a5b 	.word	0x08001a5b
 800157c:	08001a5b 	.word	0x08001a5b
 8001580:	08001a5b 	.word	0x08001a5b
 8001584:	08001a5b 	.word	0x08001a5b
 8001588:	08001a5b 	.word	0x08001a5b
 800158c:	08001a5b 	.word	0x08001a5b
 8001590:	08001a5b 	.word	0x08001a5b
 8001594:	08001a5b 	.word	0x08001a5b
 8001598:	08001a5b 	.word	0x08001a5b
 800159c:	08001a5b 	.word	0x08001a5b
 80015a0:	08001a5b 	.word	0x08001a5b
 80015a4:	08001a5b 	.word	0x08001a5b
 80015a8:	08001a5b 	.word	0x08001a5b
 80015ac:	08001a5b 	.word	0x08001a5b
 80015b0:	08001a5b 	.word	0x08001a5b
 80015b4:	08001a5b 	.word	0x08001a5b
 80015b8:	08001a5b 	.word	0x08001a5b
 80015bc:	08001a5b 	.word	0x08001a5b
 80015c0:	08001a5b 	.word	0x08001a5b
 80015c4:	08001a5b 	.word	0x08001a5b
 80015c8:	08001a5b 	.word	0x08001a5b
 80015cc:	08001a5b 	.word	0x08001a5b
 80015d0:	08001a5b 	.word	0x08001a5b
 80015d4:	08001a5b 	.word	0x08001a5b
 80015d8:	08001a5b 	.word	0x08001a5b
 80015dc:	08001a5b 	.word	0x08001a5b
 80015e0:	08001a5b 	.word	0x08001a5b
 80015e4:	08001a5b 	.word	0x08001a5b
 80015e8:	08001a5b 	.word	0x08001a5b
 80015ec:	0800195d 	.word	0x0800195d
 80015f0:	08001973 	.word	0x08001973
 80015f4:	08001989 	.word	0x08001989
 80015f8:	08001999 	.word	0x08001999
 80015fc:	080019cb 	.word	0x080019cb
 8001600:	080019ef 	.word	0x080019ef
 8001604:	080019ff 	.word	0x080019ff
 8001608:	08001a0f 	.word	0x08001a0f
 800160c:	08001a25 	.word	0x08001a25
 8001610:	08001a35 	.word	0x08001a35
 8001614:	08001a4b 	.word	0x08001a4b

		///////////////////////
		// S0 - FIRST SYMBOL //
		///////////////////////
		case 0:
			this->flagNew	= 0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	749a      	strb	r2, [r3, #18]

			if ( symbol == '$' ){	// Si el simbolo es $
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	2b24      	cmp	r3, #36	@ 0x24
 8001622:	d103      	bne.n	800162c <_ZN8gpsInput11insertValueEh+0x134>
				*state	=	1;		// Pasa a S1
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
				*state	= 2;
			}
			else{					// Si no
				*state	= 	0;		// Se queda en S0
			}
		break;
 800162a:	e21a      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if( symbol == 'G' ){
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	2b47      	cmp	r3, #71	@ 0x47
 8001630:	d103      	bne.n	800163a <_ZN8gpsInput11insertValueEh+0x142>
				*state	= 2;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2202      	movs	r2, #2
 8001636:	701a      	strb	r2, [r3, #0]
		break;
 8001638:	e213      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 	0;		// Se queda en S0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
		break;
 8001640:	e20f      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		// S1 - SECOND SYMBOL //
		////////////////////////

		case 1:

			if ( symbol ==  'G' ){		// Si el simbolo es G
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	2b47      	cmp	r3, #71	@ 0x47
 8001646:	d103      	bne.n	8001650 <_ZN8gpsInput11insertValueEh+0x158>
				*state	= 2;			// Pasa a S2
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
			}
			else{						// Si no
				*state	= 0;			// Vuelve a S0
			}
			break;
 800164e:	e208      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a S0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
			break;
 8001656:	e204      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		// S2 - THIRD SYMBOL //
		///////////////////////

		case 2:

			if ( symbol	== 'P'){		// Si el simbolo es P
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	2b50      	cmp	r3, #80	@ 0x50
 800165c:	d103      	bne.n	8001666 <_ZN8gpsInput11insertValueEh+0x16e>
				*state	= 3;			// Pasa a S3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2203      	movs	r2, #3
 8001662:	701a      	strb	r2, [r3, #0]
			}
			else{						// Si no
				*state	= 0;			// Vuelve a s0
			}
			break;
 8001664:	e1fd      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a s0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
			break;
 800166c:	e1f9      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S3 - FOURTH SYMBOL //
		////////////////////////

		case 3:
			if ( symbol == 'R'){		// Si el simbolo es R
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	2b52      	cmp	r3, #82	@ 0x52
 8001672:	d103      	bne.n	800167c <_ZN8gpsInput11insertValueEh+0x184>
				*state	= 4;			// Pasa a S4
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2204      	movs	r2, #4
 8001678:	701a      	strb	r2, [r3, #0]
				*state = 53;			// Pasa a S53 - DETECTA GPGSV
			}
			else{						// Si no
				*state	= 0;			// Vuelve a S0
			}
			break;
 800167a:	e1f2      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( symbol == 'V'){	// Si el simbolo es T
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b56      	cmp	r3, #86	@ 0x56
 8001680:	d103      	bne.n	800168a <_ZN8gpsInput11insertValueEh+0x192>
				*state	= 50;			// Pasa a S50 - DETECTA SI ES MODO GPTVG
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2232      	movs	r2, #50	@ 0x32
 8001686:	701a      	strb	r2, [r3, #0]
			break;
 8001688:	e1eb      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( symbol == 'G'){	// Si simboolo es G
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	2b47      	cmp	r3, #71	@ 0x47
 800168e:	d103      	bne.n	8001698 <_ZN8gpsInput11insertValueEh+0x1a0>
				*state = 53;			// Pasa a S53 - DETECTA GPGSV
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2235      	movs	r2, #53	@ 0x35
 8001694:	701a      	strb	r2, [r3, #0]
			break;
 8001696:	e1e4      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a S0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
			break;
 800169e:	e1e0      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		// S4 - FIFTH SYMBOL //
		///////////////////////

		case 4:

			if ( symbol == 'M'){	// Si el simbolo es M
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b4d      	cmp	r3, #77	@ 0x4d
 80016a4:	d103      	bne.n	80016ae <_ZN8gpsInput11insertValueEh+0x1b6>
				*state	= 5;		// Pasa a S5
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2205      	movs	r2, #5
 80016aa:	701a      	strb	r2, [r3, #0]
			}
			else{					// Si no
				*state	= 0;		// Vieñve a S0
			}
			break;
 80016ac:	e1d9      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;		// Vieñve a S0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
			break;
 80016b4:	e1d5      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		// S5 - SIXTH SYMBOL //
		///////////////////////

		case 5:

			if ( symbol == 'C'){	// Si el simbolo es M
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	2b43      	cmp	r3, #67	@ 0x43
 80016ba:	d103      	bne.n	80016c4 <_ZN8gpsInput11insertValueEh+0x1cc>
				*state	= 6;		// Pasa a S6
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2206      	movs	r2, #6
 80016c0:	701a      	strb	r2, [r3, #0]
			}
			else{					// Si no
				*state	= 0;		// Vieñve a S0
			}
			break;
 80016c2:	e1ce      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;		// Vieñve a S0
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
			break;
 80016ca:	e1ca      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		///////////////////////
		// S6 - GPRMC PACKET //
		///////////////////////

		case 6:
			this->lapsBetween	= this->lapsCounter;	//Guarda valor de contador
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
			this->lapsCounter	= 0;					// Reinicia contador
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
			this->flagNew		= 1;					// Indica que llego mensaje
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	749a      	strb	r2, [r3, #18]

			this->setMode(1);							// Inserta el valor de mensaje tipo GPRMC
 80016e0:	2101      	movs	r1, #1
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f9c2 	bl	8001a6c <_ZN8gpsInput7setModeEh>
			this->countGprmc	= 0;					// Reinicia el contador que guarda elementos
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

			if ( symbol == ','){						// Si el simbolo es , y confirma el formato del paquete
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b2c      	cmp	r3, #44	@ 0x2c
 80016f4:	d103      	bne.n	80016fe <_ZN8gpsInput11insertValueEh+0x206>
				*state	= 7;							// Pasa a S7
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2207      	movs	r2, #7
 80016fa:	701a      	strb	r2, [r3, #0]
			}
			else{										// Si no
				*state	= 0;							// Vieñve a S0
			}
			break;
 80016fc:	e1b1      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;							// Vieñve a S0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
			break;
 8001704:	e1ad      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S7 - SAVE TIME //
		////////////////////

		case 7:
			this->flagNew		= 0;				// Indica que llego mensaje
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	749a      	strb	r2, [r3, #18]

			if ( symbol == ',' ){					// Si el simbolo es ,
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001710:	d107      	bne.n	8001722 <_ZN8gpsInput11insertValueEh+0x22a>
				this->countGprmc	= 0;			// Reinicia contador
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 8;						// Pasa a S8
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2208      	movs	r2, #8
 800171e:	701a      	strb	r2, [r3, #0]
				this->time[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;						// Suma uno al indice
				*state	= 7;							// Se queda en S7
			}

			break;
 8001720:	e19f      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001728:	2b09      	cmp	r3, #9
 800172a:	d907      	bls.n	800173c <_ZN8gpsInput11insertValueEh+0x244>
				this->countGprmc	= 0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
			break;
 800173a:	e192      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->time[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	751a      	strb	r2, [r3, #20]
				this->countGprmc++;						// Suma uno al indice
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001752:	3301      	adds	r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 7;							// Se queda en S7
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2207      	movs	r2, #7
 8001760:	701a      	strb	r2, [r3, #0]
			break;
 8001762:	e17e      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			 *
			 * 	,A,
			 *
			 * 	Fija VALID hasta que encuentre ,
			 */
			if( symbol == ',' ){			// Si es ,
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	2b2c      	cmp	r3, #44	@ 0x2c
 8001768:	d103      	bne.n	8001772 <_ZN8gpsInput11insertValueEh+0x27a>
				*state	= 9;				// Pasa a S9
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2209      	movs	r2, #9
 800176e:	701a      	strb	r2, [r3, #0]
			}
			else{							// Si no
				this->setValid(symbol);		// Fija simbolo de valido
				*state	= 8;				// Se queda en S8
			}
			break;
 8001770:	e177      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->setValid(symbol);		// Fija simbolo de valido
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fa28 	bl	8001bcc <_ZN8gpsInput8setValidEc>
				*state	= 8;				// Se queda en S8
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2208      	movs	r2, #8
 8001780:	701a      	strb	r2, [r3, #0]
			break;
 8001782:	e16e      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S9 - SAVE LONGITUD //
		////////////////////////

		case 9:
			if ( symbol == ',' ){							// Si es ,
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	2b2c      	cmp	r3, #44	@ 0x2c
 8001788:	d107      	bne.n	800179a <_ZN8gpsInput11insertValueEh+0x2a2>
				this->countGprmc	= 0;					// Reinicia contador
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state 	= 10;								// Pasa a S10
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	220a      	movs	r2, #10
 8001796:	701a      	strb	r2, [r3, #0]
			else{											// Si no
				this->latitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 9;								// Se queda en S9
			}
			break;
 8001798:	e163      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d907      	bls.n	80017b4 <_ZN8gpsInput11insertValueEh+0x2bc>
				this->countGprmc	= 0;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
			break;
 80017b2:	e156      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->latitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017ba:	461a      	mov	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				this->countGprmc++;							// Suma uno al indice
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 9;								// Se queda en S9
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2209      	movs	r2, #9
 80017da:	701a      	strb	r2, [r3, #0]
			break;
 80017dc:	e141      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		///////////////////////////////////
		// S10 - SAVE LONGITUD DIRECTION //
		///////////////////////////////////

		case 10:
			if ( symbol == ',' ){			// Si es ,
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	2b2c      	cmp	r3, #44	@ 0x2c
 80017e2:	d103      	bne.n	80017ec <_ZN8gpsInput11insertValueEh+0x2f4>
				*state	= 11;				// Pasa a S11
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	220b      	movs	r2, #11
 80017e8:	701a      	strb	r2, [r3, #0]
			}
			else{							// Si no
				this->latDirect	= symbol;	// Guarda el simbolo
				*state	= 10;				// Pasa a S10
			}
			break;
 80017ea:	e13a      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->latDirect	= symbol;	// Guarda el simbolo
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	77da      	strb	r2, [r3, #31]
				*state	= 10;				// Pasa a S10
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	220a      	movs	r2, #10
 80017f6:	701a      	strb	r2, [r3, #0]
			break;
 80017f8:	e133      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S11 - SAVE LATITUD //
		////////////////////////

		case 11:
			if ( symbol == ',' ){							// Si el simbolo es ,
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b2c      	cmp	r3, #44	@ 0x2c
 80017fe:	d107      	bne.n	8001810 <_ZN8gpsInput11insertValueEh+0x318>
				this->countGprmc	= 0;					// Reinicia contador
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 12;								// Pasa a S12
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	220c      	movs	r2, #12
 800180c:	701a      	strb	r2, [r3, #0]
			else{											// Si no
				this->longitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 11;								// Queda en S11
			}
			break;
 800180e:	e128      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001816:	2b09      	cmp	r3, #9
 8001818:	d907      	bls.n	800182a <_ZN8gpsInput11insertValueEh+0x332>
				this->countGprmc	= 0;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
			break;
 8001828:	e11b      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->longitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001830:	461a      	mov	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				this->countGprmc++;							// Suma uno al indice
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001842:	3301      	adds	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 11;								// Queda en S11
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	220b      	movs	r2, #11
 8001850:	701a      	strb	r2, [r3, #0]
			break;
 8001852:	e106      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		//////////////////////////////////
		// S12 - SAVE DIRECTION LATITUD //
		//////////////////////////////////

		case 12:
			if ( symbol == ',' ){
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	2b2c      	cmp	r3, #44	@ 0x2c
 8001858:	d103      	bne.n	8001862 <_ZN8gpsInput11insertValueEh+0x36a>
				*state = 13;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	220d      	movs	r2, #13
 800185e:	701a      	strb	r2, [r3, #0]

			else{
				this->longDirect	= symbol;
				*state = 12;
			}
			break;
 8001860:	e0ff      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->longDirect	= symbol;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	779a      	strb	r2, [r3, #30]
				*state = 12;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	220c      	movs	r2, #12
 800186c:	701a      	strb	r2, [r3, #0]
			break;
 800186e:	e0f8      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S13 - VELOCITY //
		////////////////////

		case 13:
			if ( symbol == ',' ){							//
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	2b2c      	cmp	r3, #44	@ 0x2c
 8001874:	d107      	bne.n	8001886 <_ZN8gpsInput11insertValueEh+0x38e>
				this->countGprmc	= 0;					// Reinicia contador
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 14;								//
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	220e      	movs	r2, #14
 8001882:	701a      	strb	r2, [r3, #0]
			else{											//
				this->velocity[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state 	= 13;								//
			}
			break;
 8001884:	e0ed      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800188c:	2b09      	cmp	r3, #9
 800188e:	d907      	bls.n	80018a0 <_ZN8gpsInput11insertValueEh+0x3a8>
				this->countGprmc	= 0;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
			break;
 800189e:	e0e0      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->velocity[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	f883 2020 	strb.w	r2, [r3, #32]
				this->countGprmc++;							// Suma uno al indice
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state 	= 13;								//
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	220d      	movs	r2, #13
 80018c6:	701a      	strb	r2, [r3, #0]
			break;
 80018c8:	e0cb      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////
		// S14 - ANGLE //
		/////////////////

		case 14:
			if ( symbol == ',' ){							//
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	2b2c      	cmp	r3, #44	@ 0x2c
 80018ce:	d107      	bne.n	80018e0 <_ZN8gpsInput11insertValueEh+0x3e8>
				this->countGprmc	= 0;					// Reinicia contador
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 15;								//
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	220f      	movs	r2, #15
 80018dc:	701a      	strb	r2, [r3, #0]
			else{											//
				this->angle[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 14;								//
			}
			break;
 80018de:	e0c0      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018e6:	2b09      	cmp	r3, #9
 80018e8:	d907      	bls.n	80018fa <_ZN8gpsInput11insertValueEh+0x402>
				this->countGprmc	= 0;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
			break;
 80018f8:	e0b3      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->angle[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001900:	461a      	mov	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				this->countGprmc++;							// Suma uno al indice
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001912:	3301      	adds	r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 14;								//
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	220e      	movs	r2, #14
 8001920:	701a      	strb	r2, [r3, #0]
			break;
 8001922:	e09e      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////
		// S15 - DATE //
		////////////////

		case 15:
			if ( symbol == ','){						// Si es una ,
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b2c      	cmp	r3, #44	@ 0x2c
 8001928:	d103      	bne.n	8001932 <_ZN8gpsInput11insertValueEh+0x43a>
				*state	= 0;							// Cierra la maquina
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
			else{										// Si no
				this->date[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;						// Suma uno al indice
				*state	= 15;
			}
			break;
 8001930:	e097      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				this->date[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001938:	461a      	mov	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				this->countGprmc++;						// Suma uno al indice
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800194a:	3301      	adds	r3, #1
 800194c:	b2da      	uxtb	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 15;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	220f      	movs	r2, #15
 8001958:	701a      	strb	r2, [r3, #0]
			break;
 800195a:	e082      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S50 - DETECT V //
		////////////////////

		case 50:
			if (symbol == 'T'){	// Si detecta V
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	2b54      	cmp	r3, #84	@ 0x54
 8001960:	d103      	bne.n	800196a <_ZN8gpsInput11insertValueEh+0x472>
				*state	= 51;	// Pasa a S51
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2233      	movs	r2, #51	@ 0x33
 8001966:	701a      	strb	r2, [r3, #0]
			}
			else{				// Si no
				*state	= 0;	// Vuelve a S0
			}
			break;
 8001968:	e07b      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;	// Vuelve a S0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
			break;
 8001970:	e077      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////////
		// S51	- DETECT G //
		/////////////////////

		case 51:
			if (symbol == 'G'){	// Si detecta G
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	2b47      	cmp	r3, #71	@ 0x47
 8001976:	d103      	bne.n	8001980 <_ZN8gpsInput11insertValueEh+0x488>
				*state	= 52;	// Pasa a S51
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2234      	movs	r2, #52	@ 0x34
 800197c:	701a      	strb	r2, [r3, #0]
			}
			else{				// Si no
				*state	= 0;	// Vuelve a S0
				break;
			}
			break;
 800197e:	e070      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;	// Vuelve a S0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
				break;
 8001986:	e06c      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////////////////////
		// S52 - DETECT A GPTVG PACKET //
		/////////////////////////////////

		case 52:
			this->setMode(2);
 8001988:	2102      	movs	r1, #2
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f86e 	bl	8001a6c <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
			break;
 8001996:	e064      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		// S53 - DETECT A S //
		//////////////////////

		case 53:

			if (symbol == 'G'){
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	2b47      	cmp	r3, #71	@ 0x47
 800199c:	d103      	bne.n	80019a6 <_ZN8gpsInput11insertValueEh+0x4ae>
				*state = 54;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2236      	movs	r2, #54	@ 0x36
 80019a2:	701a      	strb	r2, [r3, #0]
				*state	= 59;
			}
			else{
				*state = 0;
			}
			break;
 80019a4:	e05d      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'L'){
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	2b4c      	cmp	r3, #76	@ 0x4c
 80019aa:	d103      	bne.n	80019b4 <_ZN8gpsInput11insertValueEh+0x4bc>
				*state	= 57;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2239      	movs	r2, #57	@ 0x39
 80019b0:	701a      	strb	r2, [r3, #0]
			break;
 80019b2:	e056      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'S'){
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	2b53      	cmp	r3, #83	@ 0x53
 80019b8:	d103      	bne.n	80019c2 <_ZN8gpsInput11insertValueEh+0x4ca>
				*state	= 59;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	223b      	movs	r2, #59	@ 0x3b
 80019be:	701a      	strb	r2, [r3, #0]
			break;
 80019c0:	e04f      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state = 0;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
			break;
 80019c8:	e04b      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		//////////////////////
		// S54 - DETECT A V //
		//////////////////////

		case 54:
			if (symbol == 'A'){
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	2b41      	cmp	r3, #65	@ 0x41
 80019ce:	d103      	bne.n	80019d8 <_ZN8gpsInput11insertValueEh+0x4e0>
				*state	= 55;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2237      	movs	r2, #55	@ 0x37
 80019d4:	701a      	strb	r2, [r3, #0]
				*state = 56;
			}
			else{
				*state	= 0;
			}
			break;
 80019d6:	e044      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'V'){
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	2b56      	cmp	r3, #86	@ 0x56
 80019dc:	d103      	bne.n	80019e6 <_ZN8gpsInput11insertValueEh+0x4ee>
				*state = 56;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2238      	movs	r2, #56	@ 0x38
 80019e2:	701a      	strb	r2, [r3, #0]
			break;
 80019e4:	e03d      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
			break;
 80019ec:	e039      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S55 - DETECT GPGSA //
		////////////////////////

		case 55:
			this->setMode(32);
 80019ee:	2120      	movs	r1, #32
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f83b 	bl	8001a6c <_ZN8gpsInput7setModeEh>
			*state	= 0;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
			break;
 80019fc:	e031      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S56 - DETECT GPGSV //
		////////////////////////

		case 56:
			this->setMode(4);
 80019fe:	2104      	movs	r1, #4
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f833 	bl	8001a6c <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
			break;
 8001a0c:	e029      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S57 - DETECT L //
		////////////////////

		case 57:
			if (symbol == 'L'){
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	2b4c      	cmp	r3, #76	@ 0x4c
 8001a12:	d103      	bne.n	8001a1c <_ZN8gpsInput11insertValueEh+0x524>
				*state	= 58;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	223a      	movs	r2, #58	@ 0x3a
 8001a18:	701a      	strb	r2, [r3, #0]
			}
			else{
				*state	= 0;
			}
			break;
 8001a1a:	e022      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
			break;
 8001a22:	e01e      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S58 - DETECT GPGLL //
		////////////////////////

		case 58:
			this->setMode(8);
 8001a24:	2108      	movs	r1, #8
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f820 	bl	8001a6c <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
			break;
 8001a32:	e016      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S59 - DETECT A //
		////////////////////

		case 59:
			if (symbol == 'V'){
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	2b56      	cmp	r3, #86	@ 0x56
 8001a38:	d103      	bne.n	8001a42 <_ZN8gpsInput11insertValueEh+0x54a>
				*state	= 60;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	223c      	movs	r2, #60	@ 0x3c
 8001a3e:	701a      	strb	r2, [r3, #0]
			}
			else{
				*state	= 0;
			}
			break;
 8001a40:	e00f      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
			break;
 8001a48:	e00b      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S60 - DETECT GPGGA //
		////////////////////////

		case 60:
			this->setMode(16);
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f80d 	bl	8001a6c <_ZN8gpsInput7setModeEh>
			*state = 0;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
			break;
 8001a58:	e003      	b.n	8001a62 <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////
		// DEFAULT //
		/////////////

		default:
			*state	= 0;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
			break;
 8001a60:	bf00      	nop
	}
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop

08001a6c <_ZN8gpsInput7setModeEh>:

//////////////
// SET MODE //
//////////////

void gpsInput::setMode(uint8_t mode){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
	this->limitMsgModes	= 15;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	74da      	strb	r2, [r3, #19]
	uint8_t output	= 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]
	uint8_t pot2[6]	= {1, 2, 4, 8, 16, 32};
 8001a82:	4a51      	ldr	r2, [pc, #324]	@ (8001bc8 <_ZN8gpsInput7setModeEh+0x15c>)
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8c:	6018      	str	r0, [r3, #0]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	8019      	strh	r1, [r3, #0]

	switch (mode){
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	d866      	bhi.n	8001b68 <_ZN8gpsInput7setModeEh+0xfc>
 8001a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa0 <_ZN8gpsInput7setModeEh+0x34>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001b21 	.word	0x08001b21
 8001aa4:	08001b2d 	.word	0x08001b2d
 8001aa8:	08001b69 	.word	0x08001b69
 8001aac:	08001b39 	.word	0x08001b39
 8001ab0:	08001b69 	.word	0x08001b69
 8001ab4:	08001b69 	.word	0x08001b69
 8001ab8:	08001b69 	.word	0x08001b69
 8001abc:	08001b45 	.word	0x08001b45
 8001ac0:	08001b69 	.word	0x08001b69
 8001ac4:	08001b69 	.word	0x08001b69
 8001ac8:	08001b69 	.word	0x08001b69
 8001acc:	08001b69 	.word	0x08001b69
 8001ad0:	08001b69 	.word	0x08001b69
 8001ad4:	08001b69 	.word	0x08001b69
 8001ad8:	08001b69 	.word	0x08001b69
 8001adc:	08001b51 	.word	0x08001b51
 8001ae0:	08001b69 	.word	0x08001b69
 8001ae4:	08001b69 	.word	0x08001b69
 8001ae8:	08001b69 	.word	0x08001b69
 8001aec:	08001b69 	.word	0x08001b69
 8001af0:	08001b69 	.word	0x08001b69
 8001af4:	08001b69 	.word	0x08001b69
 8001af8:	08001b69 	.word	0x08001b69
 8001afc:	08001b69 	.word	0x08001b69
 8001b00:	08001b69 	.word	0x08001b69
 8001b04:	08001b69 	.word	0x08001b69
 8001b08:	08001b69 	.word	0x08001b69
 8001b0c:	08001b69 	.word	0x08001b69
 8001b10:	08001b69 	.word	0x08001b69
 8001b14:	08001b69 	.word	0x08001b69
 8001b18:	08001b69 	.word	0x08001b69
 8001b1c:	08001b5d 	.word	0x08001b5d

	///////////
	// GPRMC //
	///////////
	case 1:
		this->countModes[0]	= this->limitMsgModes;	// Asigna valor maximo
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7cda      	ldrb	r2, [r3, #19]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		break;
 8001b2a:	e01e      	b.n	8001b6a <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPTVG //
	///////////
	case 2:
		this->countModes[1]	= this->limitMsgModes;	// Asigna valor maximo
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7cda      	ldrb	r2, [r3, #19]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		break;
 8001b36:	e018      	b.n	8001b6a <_ZN8gpsInput7setModeEh+0xfe>
	///////////
	// GPGGV //
	///////////

	case 4:
		this->countModes[2]	= this->limitMsgModes;	// Asigna valor maximo
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7cda      	ldrb	r2, [r3, #19]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		break;
 8001b42:	e012      	b.n	8001b6a <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGLL //
	///////////
	case 8:
		this->countModes[3]	= this->limitMsgModes;	// Asigna valor maximo
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7cda      	ldrb	r2, [r3, #19]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		break;
 8001b4e:	e00c      	b.n	8001b6a <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGSV //
	///////////
	case 16:
		this->countModes[4]	= this->limitMsgModes;	// Asigna valor maximo
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7cda      	ldrb	r2, [r3, #19]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		break;
 8001b5a:	e006      	b.n	8001b6a <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGGA //
	///////////
	case 32:
		this->countModes[5]	= this->limitMsgModes;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7cda      	ldrb	r2, [r3, #19]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		break;
 8001b66:	e000      	b.n	8001b6a <_ZN8gpsInput7setModeEh+0xfe>

	default:
		break;
 8001b68:	bf00      	nop
	}

	for (int i = 0; i<6; i++){			// Recorre array de count
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	e01e      	b.n	8001bae <_ZN8gpsInput7setModeEh+0x142>
		if (this->countModes[i] > 0){	// Si el contador >0
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4413      	add	r3, r2
 8001b76:	333c      	adds	r3, #60	@ 0x3c
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d014      	beq.n	8001ba8 <_ZN8gpsInput7setModeEh+0x13c>
			this->countModes[i]--;		// Resta 1
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	333c      	adds	r3, #60	@ 0x3c
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b2d9      	uxtb	r1, r3
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	333c      	adds	r3, #60	@ 0x3c
 8001b94:	460a      	mov	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
			output = output + pot2[i];		// Suma un exponente de 2
 8001b98:	f107 0208 	add.w	r2, r7, #8
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i<6; i++){			// Recorre array de count
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	3301      	adds	r3, #1
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	dddd      	ble.n	8001b70 <_ZN8gpsInput7setModeEh+0x104>
		}								// Genera numero unico
		else{							// Si no
			//this->countModes[i]	= 0;	// Asigna 0
		}
	}
	this->mode	= output;	// Asigna modo
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7dfa      	ldrb	r2, [r7, #23]
 8001bb8:	711a      	strb	r2, [r3, #4]
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	0800d740 	.word	0x0800d740

08001bcc <_ZN8gpsInput8setValidEc>:

///////////////
// SET VALID //
///////////////

void gpsInput::setValid(char valid){
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
	this->flagValid	= valid;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	741a      	strb	r2, [r3, #16]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_ZN8gpsInput8getValidEv>:

///////////////////////
// GET VALID MESSAGE //
///////////////////////

bool gpsInput::getValid(){
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
	bool flag	= 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]

	if (this->flagValid == 'A'){
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7c1b      	ldrb	r3, [r3, #16]
 8001bfa:	2b41      	cmp	r3, #65	@ 0x41
 8001bfc:	d102      	bne.n	8001c04 <_ZN8gpsInput8getValidEv+0x1a>
		flag = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e001      	b.n	8001c08 <_ZN8gpsInput8getValidEv+0x1e>
	}
	else{
		flag = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
	}

	return flag;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_ZN8gpsInput13getNewMessageEv>:

//////////////////////////
// GET NEW MESSAGE FLAG //
//////////////////////////

bool gpsInput::getNewMessage(){
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	return	this->flagNew;	// Guarda el valor de flagNew
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7c9b      	ldrb	r3, [r3, #18]

}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0
	hwBoton();
 8001c32:	f000 fa55 	bl	80020e0 <_Z7hwBotonv>
	hwSht31();
 8001c36:	f000 f8fb 	bl	8001e30 <_Z7hwSht31v>
	hwAds1115();
 8001c3a:	f000 f829 	bl	8001c90 <_Z9hwAds1115v>
	hwAnalog();
 8001c3e:	f000 fad7 	bl	80021f0 <_Z8hwAnalogv>
	hwEEPROM();
 8001c42:	f000 fb35 	bl	80022b0 <_Z8hwEEPROMv>
	hwGpsIn();
 8001c46:	f000 faad 	bl	80021a4 <_Z7hwGpsInv>
	hwLoraIn();
 8001c4a:	f000 f803 	bl	8001c54 <_Z8hwLoraInv>
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <_Z8hwLoraInv>:
 * Traspaso de de loraBus a loraInput
 *
 * loraInput detecta respuesta dentro de bytes entrantes
 */

void hwLoraIn(){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	if ( loraIn.available() ){					// Si hay elementos disponibles en FIFO desde DMA
 8001c58:	480a      	ldr	r0, [pc, #40]	@ (8001c84 <_Z8hwLoraInv+0x30>)
 8001c5a:	f7ff fc25 	bl	80014a8 <_ZN8fifoUart9availableEv>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <_Z8hwLoraInv+0x2a>
		loraBus	= loraIn.readElement();			// Guarda el valor
 8001c64:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <_Z8hwLoraInv+0x30>)
 8001c66:	f7ff fbe6 	bl	8001436 <_ZN8fifoUart11readElementEv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <_Z8hwLoraInv+0x34>)
 8001c70:	701a      	strb	r2, [r3, #0]
		loraInput.insertElement( loraBus );		// Inserta en Lora Input
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <_Z8hwLoraInv+0x34>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4804      	ldr	r0, [pc, #16]	@ (8001c8c <_Z8hwLoraInv+0x38>)
 8001c7a:	f001 fe79 	bl	8003970 <_ZN9loraInput13insertElementEh>
	}
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000ae8 	.word	0x20000ae8
 8001c88:	200004cc 	.word	0x200004cc
 8001c8c:	20000b28 	.word	0x20000b28

08001c90 <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 8001c94:	4b57      	ldr	r3, [pc, #348]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	f200 80a8 	bhi.w	8001dee <_Z9hwAds1115v+0x15e>
 8001c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca4 <_Z9hwAds1115v+0x14>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001cbd 	.word	0x08001cbd
 8001ca8:	08001cf1 	.word	0x08001cf1
 8001cac:	08001d27 	.word	0x08001d27
 8001cb0:	08001d59 	.word	0x08001d59
 8001cb4:	08001d7f 	.word	0x08001d7f
 8001cb8:	08001dd3 	.word	0x08001dd3
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 8001cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8001df8 <_Z9hwAds1115v+0x168>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	4a4d      	ldr	r2, [pc, #308]	@ (8001df8 <_Z9hwAds1115v+0x168>)
 8001cc4:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8001df8 <_Z9hwAds1115v+0x168>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b4c      	ldr	r3, [pc, #304]	@ (8001dfc <_Z9hwAds1115v+0x16c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	db0a      	blt.n	8001ce8 <_Z9hwAds1115v+0x58>
 8001cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001e00 <_Z9hwAds1115v+0x170>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 8001cda:	4b49      	ldr	r3, [pc, #292]	@ (8001e00 <_Z9hwAds1115v+0x170>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 8001ce0:	4b44      	ldr	r3, [pc, #272]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 8001ce6:	e083      	b.n	8001df0 <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 8001ce8:	4b42      	ldr	r3, [pc, #264]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
		break;
 8001cee:	e07f      	b.n	8001df0 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 8001cf0:	4b41      	ldr	r3, [pc, #260]	@ (8001df8 <_Z9hwAds1115v+0x168>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001cf6:	4b43      	ldr	r3, [pc, #268]	@ (8001e04 <_Z9hwAds1115v+0x174>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 8001cfe:	2303      	movs	r3, #3
 8001d00:	4a41      	ldr	r2, [pc, #260]	@ (8001e08 <_Z9hwAds1115v+0x178>)
 8001d02:	2190      	movs	r1, #144	@ 0x90
 8001d04:	4841      	ldr	r0, [pc, #260]	@ (8001e0c <_Z9hwAds1115v+0x17c>)
 8001d06:	f005 ffd9 	bl	8007cbc <HAL_I2C_Master_Transmit_DMA>
 8001d0a:	e005      	b.n	8001d18 <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	4a40      	ldr	r2, [pc, #256]	@ (8001e10 <_Z9hwAds1115v+0x180>)
 8001d10:	2190      	movs	r1, #144	@ 0x90
 8001d12:	483e      	ldr	r0, [pc, #248]	@ (8001e0c <_Z9hwAds1115v+0x17c>)
 8001d14:	f005 ffd2 	bl	8007cbc <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 8001d18:	4b3e      	ldr	r3, [pc, #248]	@ (8001e14 <_Z9hwAds1115v+0x184>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001d20:	2202      	movs	r2, #2
 8001d22:	701a      	strb	r2, [r3, #0]

		break;
 8001d24:	e064      	b.n	8001df0 <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 8001d26:	2301      	movs	r3, #1
 8001d28:	4a3b      	ldr	r2, [pc, #236]	@ (8001e18 <_Z9hwAds1115v+0x188>)
 8001d2a:	2190      	movs	r1, #144	@ 0x90
 8001d2c:	4837      	ldr	r0, [pc, #220]	@ (8001e0c <_Z9hwAds1115v+0x17c>)
 8001d2e:	f005 ffc5 	bl	8007cbc <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 8001d32:	4b38      	ldr	r3, [pc, #224]	@ (8001e14 <_Z9hwAds1115v+0x184>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	f083 0301 	eor.w	r3, r3, #1
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <_Z9hwAds1115v+0x18c>)
 8001d3e:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 8001d40:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <_Z9hwAds1115v+0x184>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 8001d48:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 8001d4e:	e04f      	b.n	8001df0 <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 8001d50:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001d52:	2205      	movs	r2, #5
 8001d54:	701a      	strb	r2, [r3, #0]
		break;
 8001d56:	e04b      	b.n	8001df0 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <_Z9hwAds1115v+0x168>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	4a26      	ldr	r2, [pc, #152]	@ (8001df8 <_Z9hwAds1115v+0x168>)
 8001d60:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 8001d62:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <_Z9hwAds1115v+0x168>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b2e      	ldr	r3, [pc, #184]	@ (8001e20 <_Z9hwAds1115v+0x190>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	db03      	blt.n	8001d76 <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 8001d6e:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001d70:	2204      	movs	r2, #4
 8001d72:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 8001d74:	e03c      	b.n	8001df0 <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 8001d76:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001d78:	2203      	movs	r2, #3
 8001d7a:	701a      	strb	r2, [r3, #0]
		break;
 8001d7c:	e038      	b.n	8001df0 <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <_Z9hwAds1115v+0x168>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 8001d84:	2302      	movs	r3, #2
 8001d86:	4a27      	ldr	r2, [pc, #156]	@ (8001e24 <_Z9hwAds1115v+0x194>)
 8001d88:	2190      	movs	r1, #144	@ 0x90
 8001d8a:	4820      	ldr	r0, [pc, #128]	@ (8001e0c <_Z9hwAds1115v+0x17c>)
 8001d8c:	f006 f8aa 	bl	8007ee4 <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <_Z9hwAds1115v+0x174>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00c      	beq.n	8001db2 <_Z9hwAds1115v+0x122>
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <_Z9hwAds1115v+0x194>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <_Z9hwAds1115v+0x194>)
 8001da2:	785b      	ldrb	r3, [r3, #1]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <_Z9hwAds1115v+0x198>)
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e00b      	b.n	8001dca <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <_Z9hwAds1115v+0x194>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <_Z9hwAds1115v+0x194>)
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <_Z9hwAds1115v+0x19c>)
 8001dc8:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 8001dca:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001dcc:	2205      	movs	r2, #5
 8001dce:	701a      	strb	r2, [r3, #0]
		break;
 8001dd0:	e00e      	b.n	8001df0 <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <_Z9hwAds1115v+0x174>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	f083 0301 	eor.w	r3, r3, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <_Z9hwAds1115v+0x174>)
 8001dde:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <_Z9hwAds1115v+0x170>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 8001de6:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <_Z9hwAds1115v+0x164>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
		break;
 8001dec:	e000      	b.n	8001df0 <_Z9hwAds1115v+0x160>

	default:
		break;
 8001dee:	bf00      	nop
	}
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000042c 	.word	0x2000042c
 8001df8:	20000430 	.word	0x20000430
 8001dfc:	20000434 	.word	0x20000434
 8001e00:	20000013 	.word	0x20000013
 8001e04:	20000446 	.word	0x20000446
 8001e08:	20000014 	.word	0x20000014
 8001e0c:	200006c8 	.word	0x200006c8
 8001e10:	20000018 	.word	0x20000018
 8001e14:	20001097 	.word	0x20001097
 8001e18:	2000043c 	.word	0x2000043c
 8001e1c:	200004d8 	.word	0x200004d8
 8001e20:	20000438 	.word	0x20000438
 8001e24:	20000440 	.word	0x20000440
 8001e28:	20000442 	.word	0x20000442
 8001e2c:	20000444 	.word	0x20000444

08001e30 <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 8001e34:	4b98      	ldr	r3, [pc, #608]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	f200 8126 	bhi.w	800208a <_Z7hwSht31v+0x25a>
 8001e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <_Z7hwSht31v+0x14>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001e61 	.word	0x08001e61
 8001e48:	08001e95 	.word	0x08001e95
 8001e4c:	08001ed3 	.word	0x08001ed3
 8001e50:	08001f17 	.word	0x08001f17
 8001e54:	08001f3d 	.word	0x08001f3d
 8001e58:	08001f5d 	.word	0x08001f5d
 8001e5c:	08002059 	.word	0x08002059
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 8001e60:	4b8e      	ldr	r3, [pc, #568]	@ (800209c <_Z7hwSht31v+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a8d      	ldr	r2, [pc, #564]	@ (800209c <_Z7hwSht31v+0x26c>)
 8001e68:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 8001e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800209c <_Z7hwSht31v+0x26c>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b8c      	ldr	r3, [pc, #560]	@ (80020a0 <_Z7hwSht31v+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	db0a      	blt.n	8001e8c <_Z7hwSht31v+0x5c>
 8001e76:	4b8b      	ldr	r3, [pc, #556]	@ (80020a4 <_Z7hwSht31v+0x274>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <_Z7hwSht31v+0x274>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 8001e84:	4b84      	ldr	r3, [pc, #528]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 8001e8a:	e102      	b.n	8002092 <_Z7hwSht31v+0x262>
			stateSht31	= 0;					// Espera
 8001e8c:	4b82      	ldr	r3, [pc, #520]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
		break;
 8001e92:	e0fe      	b.n	8002092 <_Z7hwSht31v+0x262>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 8001e94:	4b81      	ldr	r3, [pc, #516]	@ (800209c <_Z7hwSht31v+0x26c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 8001e9a:	4b83      	ldr	r3, [pc, #524]	@ (80020a8 <_Z7hwSht31v+0x278>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b81      	ldr	r3, [pc, #516]	@ (80020ac <_Z7hwSht31v+0x27c>)
 8001ea6:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 8001ea8:	4b7f      	ldr	r3, [pc, #508]	@ (80020a8 <_Z7hwSht31v+0x278>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b7f      	ldr	r3, [pc, #508]	@ (80020ac <_Z7hwSht31v+0x27c>)
 8001eb0:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80020b0 <_Z7hwSht31v+0x280>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 8001eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80020b4 <_Z7hwSht31v+0x284>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	b299      	uxth	r1, r3
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	4a7a      	ldr	r2, [pc, #488]	@ (80020ac <_Z7hwSht31v+0x27c>)
 8001ec4:	487c      	ldr	r0, [pc, #496]	@ (80020b8 <_Z7hwSht31v+0x288>)
 8001ec6:	f005 fef9 	bl	8007cbc <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 8001eca:	4b73      	ldr	r3, [pc, #460]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001ecc:	2202      	movs	r2, #2
 8001ece:	701a      	strb	r2, [r3, #0]
		break;
 8001ed0:	e0df      	b.n	8002092 <_Z7hwSht31v+0x262>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 8001ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80020bc <_Z7hwSht31v+0x28c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <_Z7hwSht31v+0xc0>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 8001ee0:	4b73      	ldr	r3, [pc, #460]	@ (80020b0 <_Z7hwSht31v+0x280>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b75      	ldr	r3, [pc, #468]	@ (80020c0 <_Z7hwSht31v+0x290>)
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e006      	b.n	8001efe <_Z7hwSht31v+0xce>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 8001ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80020b0 <_Z7hwSht31v+0x280>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b71      	ldr	r3, [pc, #452]	@ (80020c0 <_Z7hwSht31v+0x290>)
 8001efc:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 8001efe:	4b6c      	ldr	r3, [pc, #432]	@ (80020b0 <_Z7hwSht31v+0x280>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <_Z7hwSht31v+0xde>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 8001f06:	4b64      	ldr	r3, [pc, #400]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001f08:	2203      	movs	r2, #3
 8001f0a:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 8001f0c:	e0c1      	b.n	8002092 <_Z7hwSht31v+0x262>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 8001f0e:	4b62      	ldr	r3, [pc, #392]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001f10:	2206      	movs	r2, #6
 8001f12:	701a      	strb	r2, [r3, #0]
		break;
 8001f14:	e0bd      	b.n	8002092 <_Z7hwSht31v+0x262>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 8001f16:	4b61      	ldr	r3, [pc, #388]	@ (800209c <_Z7hwSht31v+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	4a5f      	ldr	r2, [pc, #380]	@ (800209c <_Z7hwSht31v+0x26c>)
 8001f1e:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 8001f20:	4b5e      	ldr	r3, [pc, #376]	@ (800209c <_Z7hwSht31v+0x26c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b67      	ldr	r3, [pc, #412]	@ (80020c4 <_Z7hwSht31v+0x294>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	db03      	blt.n	8001f34 <_Z7hwSht31v+0x104>
			stateSht31	= 4;					// Pasa a S4
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001f2e:	2204      	movs	r2, #4
 8001f30:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 8001f32:	e0ae      	b.n	8002092 <_Z7hwSht31v+0x262>
			stateSht31	= 3;					// Espera en S3
 8001f34:	4b58      	ldr	r3, [pc, #352]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001f36:	2203      	movs	r2, #3
 8001f38:	701a      	strb	r2, [r3, #0]
		break;
 8001f3a:	e0aa      	b.n	8002092 <_Z7hwSht31v+0x262>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 8001f3c:	4b57      	ldr	r3, [pc, #348]	@ (800209c <_Z7hwSht31v+0x26c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 8001f42:	4b5c      	ldr	r3, [pc, #368]	@ (80020b4 <_Z7hwSht31v+0x284>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	4a5e      	ldr	r2, [pc, #376]	@ (80020c8 <_Z7hwSht31v+0x298>)
 8001f4e:	485a      	ldr	r0, [pc, #360]	@ (80020b8 <_Z7hwSht31v+0x288>)
 8001f50:	f005 ffc8 	bl	8007ee4 <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 8001f54:	4b50      	ldr	r3, [pc, #320]	@ (8002098 <_Z7hwSht31v+0x268>)
 8001f56:	2205      	movs	r2, #5
 8001f58:	701a      	strb	r2, [r3, #0]
		break;
 8001f5a:	e09a      	b.n	8002092 <_Z7hwSht31v+0x262>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 8001f5c:	4b57      	ldr	r3, [pc, #348]	@ (80020bc <_Z7hwSht31v+0x28c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f083 0301 	eor.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d039      	beq.n	8001fde <_Z7hwSht31v+0x1ae>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8001f6a:	4b57      	ldr	r3, [pc, #348]	@ (80020c8 <_Z7hwSht31v+0x298>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4a55      	ldr	r2, [pc, #340]	@ (80020c8 <_Z7hwSht31v+0x298>)
 8001f74:	7852      	ldrb	r2, [r2, #1]
 8001f76:	4413      	add	r3, r2
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b54      	ldr	r3, [pc, #336]	@ (80020cc <_Z7hwSht31v+0x29c>)
 8001f7c:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 8001f7e:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <_Z7hwSht31v+0x29c>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	4a50      	ldr	r2, [pc, #320]	@ (80020d0 <_Z7hwSht31v+0x2a0>)
 8001f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f92:	441a      	add	r2, r3
 8001f94:	13d2      	asrs	r2, r2, #15
 8001f96:	17db      	asrs	r3, r3, #31
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80020cc <_Z7hwSht31v+0x29c>)
 8001fa4:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 8001fa6:	4b48      	ldr	r3, [pc, #288]	@ (80020c8 <_Z7hwSht31v+0x298>)
 8001fa8:	78db      	ldrb	r3, [r3, #3]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4a46      	ldr	r2, [pc, #280]	@ (80020c8 <_Z7hwSht31v+0x298>)
 8001fb0:	7912      	ldrb	r2, [r2, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <_Z7hwSht31v+0x2a4>)
 8001fb8:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 8001fba:	4b46      	ldr	r3, [pc, #280]	@ (80020d4 <_Z7hwSht31v+0x2a4>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	4a41      	ldr	r2, [pc, #260]	@ (80020d0 <_Z7hwSht31v+0x2a0>)
 8001fca:	fb82 1203 	smull	r1, r2, r2, r3
 8001fce:	441a      	add	r2, r3
 8001fd0:	13d2      	asrs	r2, r2, #15
 8001fd2:	17db      	asrs	r3, r3, #31
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <_Z7hwSht31v+0x2a4>)
 8001fda:	801a      	strh	r2, [r3, #0]
 8001fdc:	e038      	b.n	8002050 <_Z7hwSht31v+0x220>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 8001fde:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <_Z7hwSht31v+0x298>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4a38      	ldr	r2, [pc, #224]	@ (80020c8 <_Z7hwSht31v+0x298>)
 8001fe8:	7852      	ldrb	r2, [r2, #1]
 8001fea:	4413      	add	r3, r2
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b3a      	ldr	r3, [pc, #232]	@ (80020d8 <_Z7hwSht31v+0x2a8>)
 8001ff0:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 8001ff2:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <_Z7hwSht31v+0x2a8>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	4a33      	ldr	r2, [pc, #204]	@ (80020d0 <_Z7hwSht31v+0x2a0>)
 8002002:	fb82 1203 	smull	r1, r2, r2, r3
 8002006:	441a      	add	r2, r3
 8002008:	13d2      	asrs	r2, r2, #15
 800200a:	17db      	asrs	r3, r3, #31
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	b29b      	uxth	r3, r3
 8002010:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b30      	ldr	r3, [pc, #192]	@ (80020d8 <_Z7hwSht31v+0x2a8>)
 8002018:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <_Z7hwSht31v+0x298>)
 800201c:	78db      	ldrb	r3, [r3, #3]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b29b      	uxth	r3, r3
 8002022:	4a29      	ldr	r2, [pc, #164]	@ (80020c8 <_Z7hwSht31v+0x298>)
 8002024:	7912      	ldrb	r2, [r2, #4]
 8002026:	4413      	add	r3, r2
 8002028:	b29a      	uxth	r2, r3
 800202a:	4b2c      	ldr	r3, [pc, #176]	@ (80020dc <_Z7hwSht31v+0x2ac>)
 800202c:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 800202e:	4b2b      	ldr	r3, [pc, #172]	@ (80020dc <_Z7hwSht31v+0x2ac>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	4a24      	ldr	r2, [pc, #144]	@ (80020d0 <_Z7hwSht31v+0x2a0>)
 800203e:	fb82 1203 	smull	r1, r2, r2, r3
 8002042:	441a      	add	r2, r3
 8002044:	13d2      	asrs	r2, r2, #15
 8002046:	17db      	asrs	r3, r3, #31
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <_Z7hwSht31v+0x2ac>)
 800204e:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <_Z7hwSht31v+0x268>)
 8002052:	2206      	movs	r2, #6
 8002054:	701a      	strb	r2, [r3, #0]
		break;
 8002056:	e01c      	b.n	8002092 <_Z7hwSht31v+0x262>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <_Z7hwSht31v+0x274>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 800205e:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <_Z7hwSht31v+0x28c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <_Z7hwSht31v+0x28c>)
 800206a:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 800206c:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <_Z7hwSht31v+0x28c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <_Z7hwSht31v+0x24c>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 8002074:	4b0f      	ldr	r3, [pc, #60]	@ (80020b4 <_Z7hwSht31v+0x284>)
 8002076:	2244      	movs	r2, #68	@ 0x44
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e002      	b.n	8002082 <_Z7hwSht31v+0x252>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 800207c:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <_Z7hwSht31v+0x284>)
 800207e:	2245      	movs	r2, #69	@ 0x45
 8002080:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 8002082:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <_Z7hwSht31v+0x268>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
		break;
 8002088:	e003      	b.n	8002092 <_Z7hwSht31v+0x262>

	default:
		stateSht31	= 0;
 800208a:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <_Z7hwSht31v+0x268>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
		break;
 8002090:	bf00      	nop
	}
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000040d 	.word	0x2000040d
 800209c:	20000410 	.word	0x20000410
 80020a0:	20000414 	.word	0x20000414
 80020a4:	20000013 	.word	0x20000013
 80020a8:	2000000e 	.word	0x2000000e
 80020ac:	20000010 	.word	0x20000010
 80020b0:	20001097 	.word	0x20001097
 80020b4:	20000012 	.word	0x20000012
 80020b8:	200006c8 	.word	0x200006c8
 80020bc:	20000422 	.word	0x20000422
 80020c0:	200004d8 	.word	0x200004d8
 80020c4:	20000418 	.word	0x20000418
 80020c8:	2000041c 	.word	0x2000041c
 80020cc:	20000424 	.word	0x20000424
 80020d0:	80008001 	.word	0x80008001
 80020d4:	20000426 	.word	0x20000426
 80020d8:	20000428 	.word	0x20000428
 80020dc:	2000042a 	.word	0x2000042a

080020e0 <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 80020e4:	2108      	movs	r1, #8
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ea:	f005 fd1b 	bl	8007b24 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <_Z7hwBotonv+0xb0>)
 80020fc:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <_Z7hwBotonv+0xb4>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d03a      	beq.n	800217c <_Z7hwBotonv+0x9c>
 8002106:	2b02      	cmp	r3, #2
 8002108:	dc3f      	bgt.n	800218a <_Z7hwBotonv+0xaa>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <_Z7hwBotonv+0x34>
 800210e:	2b01      	cmp	r3, #1
 8002110:	d012      	beq.n	8002138 <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 8002112:	e03a      	b.n	800218a <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 8002114:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <_Z7hwBotonv+0xb8>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <_Z7hwBotonv+0xbc>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <_Z7hwBotonv+0xb0>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 8002128:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <_Z7hwBotonv+0xb4>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
		break;
 800212e:	e02d      	b.n	800218c <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <_Z7hwBotonv+0xb4>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
		break;
 8002136:	e029      	b.n	800218c <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 8002138:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <_Z7hwBotonv+0xb8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a16      	ldr	r2, [pc, #88]	@ (8002198 <_Z7hwBotonv+0xb8>)
 8002140:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <_Z7hwBotonv+0xb0>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <_Z7hwBotonv+0x7e>
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <_Z7hwBotonv+0xb8>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <_Z7hwBotonv+0xc0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	db03      	blt.n	800215e <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 8002156:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <_Z7hwBotonv+0xb4>)
 8002158:	2202      	movs	r2, #2
 800215a:	701a      	strb	r2, [r3, #0]
		break;
 800215c:	e016      	b.n	800218c <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 800215e:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <_Z7hwBotonv+0xb0>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	f083 0301 	eor.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <_Z7hwBotonv+0xb4>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
		break;
 8002172:	e00b      	b.n	800218c <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <_Z7hwBotonv+0xb4>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
		break;
 800217a:	e007      	b.n	800218c <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 800217c:	4b07      	ldr	r3, [pc, #28]	@ (800219c <_Z7hwBotonv+0xbc>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <_Z7hwBotonv+0xb4>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
		break;
 8002188:	e000      	b.n	800218c <_Z7hwBotonv+0xac>
		break;
 800218a:	bf00      	nop
	}
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000401 	.word	0x20000401
 8002194:	2000040c 	.word	0x2000040c
 8002198:	20000404 	.word	0x20000404
 800219c:	20000a38 	.word	0x20000a38
 80021a0:	20000408 	.word	0x20000408

080021a4 <_Z7hwGpsInv>:
 *
 *	INPUT	:	gpsIn.available()
 *	OUTPUT	:	gpsInput.inserValue()
 */

void hwGpsIn(){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	if ( gpsIn.available() ){			// Si hay un elemento en fifo
 80021a8:	480e      	ldr	r0, [pc, #56]	@ (80021e4 <_Z7hwGpsInv+0x40>)
 80021aa:	f7ff f97d 	bl	80014a8 <_ZN8fifoUart9availableEv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <_Z7hwGpsInv+0x3c>
		gpsBus = gpsIn.readElement();	// Lee valor en fifo
 80021b4:	480b      	ldr	r0, [pc, #44]	@ (80021e4 <_Z7hwGpsInv+0x40>)
 80021b6:	f7ff f93e 	bl	8001436 <_ZN8fifoUart11readElementEv>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <_Z7hwGpsInv+0x44>)
 80021c0:	701a      	strb	r2, [r3, #0]
		gpsInput.insertValue( gpsBus );	// Pasa el simbolo al otro metodo
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <_Z7hwGpsInv+0x44>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	4808      	ldr	r0, [pc, #32]	@ (80021ec <_Z7hwGpsInv+0x48>)
 80021ca:	f7ff f995 	bl	80014f8 <_ZN8gpsInput11insertValueEh>

		if ( gpsInput.stateInsert == 7){
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <_Z7hwGpsInv+0x48>)
 80021d0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80021d4:	2b07      	cmp	r3, #7
 80021d6:	d103      	bne.n	80021e0 <_Z7hwGpsInv+0x3c>
			gpsBus = gpsBus;
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <_Z7hwGpsInv+0x44>)
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	4b02      	ldr	r3, [pc, #8]	@ (80021e8 <_Z7hwGpsInv+0x44>)
 80021de:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000a94 	.word	0x20000a94
 80021e8:	200004cb 	.word	0x200004cb
 80021ec:	20000a3c 	.word	0x20000a3c

080021f0 <_Z8hwAnalogv>:
 *
 *	INPUT	:	analog[0],	analog[1], flagAnalog
 *	OUTPUT	:	battery, alphaAnalog_A, alphaAnalog_B
 */

void hwAnalog(){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	switch ( stateAnalog ){
 80021f4:	4b25      	ldr	r3, [pc, #148]	@ (800228c <_Z8hwAnalogv+0x9c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d025      	beq.n	8002248 <_Z8hwAnalogv+0x58>
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	dc42      	bgt.n	8002286 <_Z8hwAnalogv+0x96>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <_Z8hwAnalogv+0x1a>
 8002204:	2b01      	cmp	r3, #1
 8002206:	d013      	beq.n	8002230 <_Z8hwAnalogv+0x40>
		else{												// Si no ha guardado
			stateAnalog		= 2;							// Espera en S2
		}
		break;
	}
}
 8002208:	e03d      	b.n	8002286 <_Z8hwAnalogv+0x96>
		countAnalog++;						// Suma 1 al contador
 800220a:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <_Z8hwAnalogv+0xa0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	4a1f      	ldr	r2, [pc, #124]	@ (8002290 <_Z8hwAnalogv+0xa0>)
 8002212:	6013      	str	r3, [r2, #0]
		if ( countAnalog >= sampleAnalog ){	// Si cumple el tiempo de muestreo
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <_Z8hwAnalogv+0xa0>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <_Z8hwAnalogv+0xa4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	db03      	blt.n	8002228 <_Z8hwAnalogv+0x38>
			stateAnalog	= 1;				// Pasa a S1
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <_Z8hwAnalogv+0x9c>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
		break;
 8002226:	e02e      	b.n	8002286 <_Z8hwAnalogv+0x96>
			stateAnalog	= 0;				// Espera en S0
 8002228:	4b18      	ldr	r3, [pc, #96]	@ (800228c <_Z8hwAnalogv+0x9c>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
		break;
 800222e:	e02a      	b.n	8002286 <_Z8hwAnalogv+0x96>
		countAnalog	= 0;									// Reinicia contador
 8002230:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <_Z8hwAnalogv+0xa0>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);	// Inicia muestreo
 8002236:	2203      	movs	r2, #3
 8002238:	4917      	ldr	r1, [pc, #92]	@ (8002298 <_Z8hwAnalogv+0xa8>)
 800223a:	4818      	ldr	r0, [pc, #96]	@ (800229c <_Z8hwAnalogv+0xac>)
 800223c:	f003 fc72 	bl	8005b24 <HAL_ADC_Start_DMA>
		stateAnalog	= 2;									// Pasa a S2
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <_Z8hwAnalogv+0x9c>)
 8002242:	2202      	movs	r2, #2
 8002244:	701a      	strb	r2, [r3, #0]
		break;
 8002246:	e01e      	b.n	8002286 <_Z8hwAnalogv+0x96>
		if ( flagAnalog ){									// Si guardo correctamente
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <_Z8hwAnalogv+0xb0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d016      	beq.n	800227e <_Z8hwAnalogv+0x8e>
			battery			= (analog[0] & 0xFFFF);			// Guarda valor bateria
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <_Z8hwAnalogv+0xa8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <_Z8hwAnalogv+0xb4>)
 8002258:	801a      	strh	r2, [r3, #0]
			alphaAnalog_A	= (analog[0] >> 16 & 0xFFFF);	// Guarda valor Alpha A
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <_Z8hwAnalogv+0xa8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	b29a      	uxth	r2, r3
 8002262:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <_Z8hwAnalogv+0xb8>)
 8002264:	801a      	strh	r2, [r3, #0]
			alphaAnalog_B	= (analog[1] & 0xFFFF);			// Guarda valor Alpha B
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <_Z8hwAnalogv+0xa8>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <_Z8hwAnalogv+0xbc>)
 800226e:	801a      	strh	r2, [r3, #0]
			flagAnalog		= 0;							// Reinicia flag de medicion analogica
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <_Z8hwAnalogv+0xb0>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
			stateAnalog		= 0;							// Vuelve a S0
 8002276:	4b05      	ldr	r3, [pc, #20]	@ (800228c <_Z8hwAnalogv+0x9c>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
		break;
 800227c:	e002      	b.n	8002284 <_Z8hwAnalogv+0x94>
			stateAnalog		= 2;							// Espera en S2
 800227e:	4b03      	ldr	r3, [pc, #12]	@ (800228c <_Z8hwAnalogv+0x9c>)
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
		break;
 8002284:	bf00      	nop
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000458 	.word	0x20000458
 8002290:	20000450 	.word	0x20000450
 8002294:	20000454 	.word	0x20000454
 8002298:	20001130 	.word	0x20001130
 800229c:	20000618 	.word	0x20000618
 80022a0:	2000113c 	.word	0x2000113c
 80022a4:	20000448 	.word	0x20000448
 80022a8:	2000044a 	.word	0x2000044a
 80022ac:	2000044c 	.word	0x2000044c

080022b0 <_Z8hwEEPROMv>:
 * 1. Indicar cada uno de los pasos de calibracion
 * 2. Guardas datos de forma periodica en EEPROM
 * 3.
 */

void hwEEPROM(){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0

	switch ( stateEEPROM ){
 80022b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002434 <_Z8hwEEPROMv+0x184>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	f200 80b0 	bhi.w	8002420 <_Z8hwEEPROMv+0x170>
 80022c0:	a201      	add	r2, pc, #4	@ (adr r2, 80022c8 <_Z8hwEEPROMv+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022dd 	.word	0x080022dd
 80022cc:	08002345 	.word	0x08002345
 80022d0:	080023ad 	.word	0x080023ad
 80022d4:	080023b5 	.word	0x080023b5
 80022d8:	08002429 	.word	0x08002429
	// S0 - READ PAGE 0 //
	//////////////////////

	case 0:

		EEPROM_Read(0, 0,  nameSensor_0,	sizeof(nameSensor_0));		// Name of sensor
 80022dc:	2314      	movs	r3, #20
 80022de:	4a56      	ldr	r2, [pc, #344]	@ (8002438 <_Z8hwEEPROMv+0x188>)
 80022e0:	2100      	movs	r1, #0
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe f92c 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 20, idSensor_0,		sizeof(idSensor_0));		// ID of sensor
 80022e8:	2304      	movs	r3, #4
 80022ea:	4a54      	ldr	r2, [pc, #336]	@ (800243c <_Z8hwEEPROMv+0x18c>)
 80022ec:	2114      	movs	r1, #20
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7fe f926 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 24, rangeSensor_0,	sizeof(rangeSensor_0));		// Range of sensor
 80022f4:	2304      	movs	r3, #4
 80022f6:	4a52      	ldr	r2, [pc, #328]	@ (8002440 <_Z8hwEEPROMv+0x190>)
 80022f8:	2118      	movs	r1, #24
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7fe f920 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 28, amplifier_10,	sizeof(amplifier_10));		// Amplifier 1 of sensor
 8002300:	2304      	movs	r3, #4
 8002302:	4a50      	ldr	r2, [pc, #320]	@ (8002444 <_Z8hwEEPROMv+0x194>)
 8002304:	211c      	movs	r1, #28
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe f91a 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 32, amplifier_20,	sizeof(amplifier_20));		// Amplifier 2 of sensor
 800230c:	2304      	movs	r3, #4
 800230e:	4a4e      	ldr	r2, [pc, #312]	@ (8002448 <_Z8hwEEPROMv+0x198>)
 8002310:	2120      	movs	r1, #32
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe f914 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 36, groundSensor_0,	sizeof(groundSensor_0));	// N of curve
 8002318:	2304      	movs	r3, #4
 800231a:	4a4c      	ldr	r2, [pc, #304]	@ (800244c <_Z8hwEEPROMv+0x19c>)
 800231c:	2124      	movs	r1, #36	@ 0x24
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe f90e 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 40, curveSensor_0,	sizeof(curveSensor_0));		// M of curve
 8002324:	2304      	movs	r3, #4
 8002326:	4a4a      	ldr	r2, [pc, #296]	@ (8002450 <_Z8hwEEPROMv+0x1a0>)
 8002328:	2128      	movs	r1, #40	@ 0x28
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe f908 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 44, dateCalib_0,		sizeof(dateCalib_0));		// Date of calibration
 8002330:	230a      	movs	r3, #10
 8002332:	4a48      	ldr	r2, [pc, #288]	@ (8002454 <_Z8hwEEPROMv+0x1a4>)
 8002334:	212c      	movs	r1, #44	@ 0x2c
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe f902 	bl	8000540 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 1;												// S1 to read page 1
 800233c:	4b3d      	ldr	r3, [pc, #244]	@ (8002434 <_Z8hwEEPROMv+0x184>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
		break;
 8002342:	e072      	b.n	800242a <_Z8hwEEPROMv+0x17a>
	//////////////////////
	// S1 - READ PAGE 1 //
	//////////////////////

	case 1:
		EEPROM_Read(1, 0,  nameSensor_1,	sizeof(nameSensor_1));		// Name of sensor
 8002344:	2314      	movs	r3, #20
 8002346:	4a44      	ldr	r2, [pc, #272]	@ (8002458 <_Z8hwEEPROMv+0x1a8>)
 8002348:	2100      	movs	r1, #0
 800234a:	2001      	movs	r0, #1
 800234c:	f7fe f8f8 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 20, idSensor_1,		sizeof(idSensor_1));		// ID of sensor
 8002350:	2304      	movs	r3, #4
 8002352:	4a42      	ldr	r2, [pc, #264]	@ (800245c <_Z8hwEEPROMv+0x1ac>)
 8002354:	2114      	movs	r1, #20
 8002356:	2001      	movs	r0, #1
 8002358:	f7fe f8f2 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 24, rangeSensor_1,	sizeof(rangeSensor_1));		// Range of sensor
 800235c:	2304      	movs	r3, #4
 800235e:	4a40      	ldr	r2, [pc, #256]	@ (8002460 <_Z8hwEEPROMv+0x1b0>)
 8002360:	2118      	movs	r1, #24
 8002362:	2001      	movs	r0, #1
 8002364:	f7fe f8ec 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 28, amplifier_11,	sizeof(amplifier_11));		// Amplifier 1 of sensor
 8002368:	2304      	movs	r3, #4
 800236a:	4a3e      	ldr	r2, [pc, #248]	@ (8002464 <_Z8hwEEPROMv+0x1b4>)
 800236c:	211c      	movs	r1, #28
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe f8e6 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 32, amplifier_21,	sizeof(amplifier_21));		// Amplifier 2 of sensor
 8002374:	2304      	movs	r3, #4
 8002376:	4a3c      	ldr	r2, [pc, #240]	@ (8002468 <_Z8hwEEPROMv+0x1b8>)
 8002378:	2120      	movs	r1, #32
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe f8e0 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 36, groundSensor_1,	sizeof(groundSensor_1));	// N of curve
 8002380:	2304      	movs	r3, #4
 8002382:	4a3a      	ldr	r2, [pc, #232]	@ (800246c <_Z8hwEEPROMv+0x1bc>)
 8002384:	2124      	movs	r1, #36	@ 0x24
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe f8da 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 40, curveSensor_1,	sizeof(curveSensor_1));		// M of curve
 800238c:	2304      	movs	r3, #4
 800238e:	4a38      	ldr	r2, [pc, #224]	@ (8002470 <_Z8hwEEPROMv+0x1c0>)
 8002390:	2128      	movs	r1, #40	@ 0x28
 8002392:	2001      	movs	r0, #1
 8002394:	f7fe f8d4 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 44, dateCalib_1,		sizeof(dateCalib_1));		// Date of calibration
 8002398:	230a      	movs	r3, #10
 800239a:	4a36      	ldr	r2, [pc, #216]	@ (8002474 <_Z8hwEEPROMv+0x1c4>)
 800239c:	212c      	movs	r1, #44	@ 0x2c
 800239e:	2001      	movs	r0, #1
 80023a0:	f7fe f8ce 	bl	8000540 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 2;												// S2 to stop of read
 80023a4:	4b23      	ldr	r3, [pc, #140]	@ (8002434 <_Z8hwEEPROMv+0x184>)
 80023a6:	2202      	movs	r2, #2
 80023a8:	701a      	strb	r2, [r3, #0]
		break;
 80023aa:	e03e      	b.n	800242a <_Z8hwEEPROMv+0x17a>
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
		*/
		stateEEPROM	= 3;								// Pasa a S3
 80023ac:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <_Z8hwEEPROMv+0x184>)
 80023ae:	2203      	movs	r2, #3
 80023b0:	701a      	strb	r2, [r3, #0]
		break;
 80023b2:	e03a      	b.n	800242a <_Z8hwEEPROMv+0x17a>
	// S3 - STOP READING //
	///////////////////////

	case 3:
		uint8_t i;										// Inicia contador
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 80023b4:	2300      	movs	r3, #0
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	e012      	b.n	80023e0 <_Z8hwEEPROMv+0x130>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002478 <_Z8hwEEPROMv+0x1c8>)
 80023be:	5cd2      	ldrb	r2, [r2, r3]
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	491d      	ldr	r1, [pc, #116]	@ (8002438 <_Z8hwEEPROMv+0x188>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d103      	bne.n	80023d2 <_Z8hwEEPROMv+0x122>
				errorHardware[4]	= 0;				// Si son iguales  no hay error
 80023ca:	4b2c      	ldr	r3, [pc, #176]	@ (800247c <_Z8hwEEPROMv+0x1cc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	711a      	strb	r2, [r3, #4]
 80023d0:	e003      	b.n	80023da <_Z8hwEEPROMv+0x12a>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <_Z8hwEEPROMv+0x1cc>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 80023d8:	e005      	b.n	80023e6 <_Z8hwEEPROMv+0x136>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	3301      	adds	r3, #1
 80023de:	71fb      	strb	r3, [r7, #7]
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	2b11      	cmp	r3, #17
 80023e4:	d9e9      	bls.n	80023ba <_Z8hwEEPROMv+0x10a>
			}
		}

		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 80023e6:	2300      	movs	r3, #0
 80023e8:	71fb      	strb	r3, [r7, #7]
 80023ea:	e012      	b.n	8002412 <_Z8hwEEPROMv+0x162>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	4a22      	ldr	r2, [pc, #136]	@ (8002478 <_Z8hwEEPROMv+0x1c8>)
 80023f0:	5cd2      	ldrb	r2, [r2, r3]
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4910      	ldr	r1, [pc, #64]	@ (8002438 <_Z8hwEEPROMv+0x188>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d103      	bne.n	8002404 <_Z8hwEEPROMv+0x154>
				errorHardware[4]	= 0;				// Si son iguales no idnica error
 80023fc:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <_Z8hwEEPROMv+0x1cc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	711a      	strb	r2, [r3, #4]
 8002402:	e003      	b.n	800240c <_Z8hwEEPROMv+0x15c>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8002404:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <_Z8hwEEPROMv+0x1cc>)
 8002406:	2201      	movs	r2, #1
 8002408:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 800240a:	e005      	b.n	8002418 <_Z8hwEEPROMv+0x168>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	3301      	adds	r3, #1
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	2b11      	cmp	r3, #17
 8002416:	d9e9      	bls.n	80023ec <_Z8hwEEPROMv+0x13c>
			}
		}
		stateEEPROM	= 4;
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <_Z8hwEEPROMv+0x184>)
 800241a:	2204      	movs	r2, #4
 800241c:	701a      	strb	r2, [r3, #0]
		break;
 800241e:	e004      	b.n	800242a <_Z8hwEEPROMv+0x17a>

	case 4:
		break;
	default:
		stateEEPROM	= 0;
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <_Z8hwEEPROMv+0x184>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
		break;
 8002426:	e000      	b.n	800242a <_Z8hwEEPROMv+0x17a>
		break;
 8002428:	bf00      	nop
	}
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200004ca 	.word	0x200004ca
 8002438:	2000045c 	.word	0x2000045c
 800243c:	20000470 	.word	0x20000470
 8002440:	20000474 	.word	0x20000474
 8002444:	20000478 	.word	0x20000478
 8002448:	2000047c 	.word	0x2000047c
 800244c:	20000480 	.word	0x20000480
 8002450:	20000484 	.word	0x20000484
 8002454:	20000488 	.word	0x20000488
 8002458:	20000494 	.word	0x20000494
 800245c:	200004a8 	.word	0x200004a8
 8002460:	200004ac 	.word	0x200004ac
 8002464:	200004b0 	.word	0x200004b0
 8002468:	200004b4 	.word	0x200004b4
 800246c:	200004b8 	.word	0x200004b8
 8002470:	200004bc 	.word	0x200004bc
 8002474:	200004c0 	.word	0x200004c0
 8002478:	2000001c 	.word	0x2000001c
 800247c:	200004d8 	.word	0x200004d8

08002480 <_Z41__static_initialization_and_destruction_0ii>:
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d137      	bne.n	8002500 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002496:	4293      	cmp	r3, r2
 8002498:	d132      	bne.n	8002500 <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 800249a:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80024a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80024a8:	4a19      	ldr	r2, [pc, #100]	@ (8002510 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80024aa:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 80024ac:	4b17      	ldr	r3, [pc, #92]	@ (800250c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80024b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80024ba:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80024bc:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	2332      	movs	r3, #50	@ 0x32
 80024c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80024ca:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80024cc:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 80024ce:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	2364      	movs	r3, #100	@ 0x64
 80024d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80024da:	4a10      	ldr	r2, [pc, #64]	@ (800251c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80024dc:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	2314      	movs	r3, #20
 80024e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80024ea:	3b01      	subs	r3, #1
 80024ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002520 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80024ee:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	2332      	movs	r3, #50	@ 0x32
 80024f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80024fc:	4a09      	ldr	r2, [pc, #36]	@ (8002524 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	20000399 	.word	0x20000399
 8002510:	20000408 	.word	0x20000408
 8002514:	20000414 	.word	0x20000414
 8002518:	20000418 	.word	0x20000418
 800251c:	20000434 	.word	0x20000434
 8002520:	20000438 	.word	0x20000438
 8002524:	20000454 	.word	0x20000454

08002528 <_GLOBAL__sub_I_boton>:
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
 800252c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002530:	2001      	movs	r0, #1
 8002532:	f7ff ffa5 	bl	8002480 <_Z41__static_initialization_and_destruction_0ii>
 8002536:	bd80      	pop	{r7, pc}

08002538 <_Z8hwOutputv>:
uint16_t limitUartGps	= 20000/superloop;


/***** OUTPUT	*****/

void hwOutput(){
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	//hwDisplay();
	//hwAlarms();
	hwLoraOut();
 800253c:	f000 f966 	bl	800280c <_Z9hwLoraOutv>
	hwGpsOut();
 8002540:	f000 f802 	bl	8002548 <_Z8hwGpsOutv>
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <_Z8hwGpsOutv>:

/////////
// GPS //
/////////

void hwGpsOut(){
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0

	////////////
	// ENABLE //
	////////////

	switch ( stateUartGps ){
 800254c:	4b9d      	ldr	r3, [pc, #628]	@ (80027c4 <_Z8hwGpsOutv+0x27c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d03d      	beq.n	80025d0 <_Z8hwGpsOutv+0x88>
 8002554:	2b02      	cmp	r3, #2
 8002556:	dc4a      	bgt.n	80025ee <_Z8hwGpsOutv+0xa6>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <_Z8hwGpsOutv+0x1a>
 800255c:	2b01      	cmp	r3, #1
 800255e:	d011      	beq.n	8002584 <_Z8hwGpsOutv+0x3c>
 8002560:	e045      	b.n	80025ee <_Z8hwGpsOutv+0xa6>
	/////////////////////////
	// S0 - WAIT AVAILABLE //
	/////////////////////////

	case 0:
		if ( availableGps ){										// Si
 8002562:	4b99      	ldr	r3, [pc, #612]	@ (80027c8 <_Z8hwGpsOutv+0x280>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <_Z8hwGpsOutv+0x34>
			HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));	//
 800256a:	2202      	movs	r2, #2
 800256c:	4997      	ldr	r1, [pc, #604]	@ (80027cc <_Z8hwGpsOutv+0x284>)
 800256e:	4898      	ldr	r0, [pc, #608]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 8002570:	f009 fe16 	bl	800c1a0 <HAL_UART_Receive_DMA>
			stateUartGps	= 1;									//
 8002574:	4b93      	ldr	r3, [pc, #588]	@ (80027c4 <_Z8hwGpsOutv+0x27c>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
		}
		else{														//
			stateUartGps	= 0;									//
		}
		break;
 800257a:	e03c      	b.n	80025f6 <_Z8hwGpsOutv+0xae>
			stateUartGps	= 0;									//
 800257c:	4b91      	ldr	r3, [pc, #580]	@ (80027c4 <_Z8hwGpsOutv+0x27c>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
		break;
 8002582:	e038      	b.n	80025f6 <_Z8hwGpsOutv+0xae>

	case 1:
		countUartGps++;
 8002584:	4b93      	ldr	r3, [pc, #588]	@ (80027d4 <_Z8hwGpsOutv+0x28c>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b91      	ldr	r3, [pc, #580]	@ (80027d4 <_Z8hwGpsOutv+0x28c>)
 800258e:	801a      	strh	r2, [r3, #0]

		if ( !availableGps ){
 8002590:	4b8d      	ldr	r3, [pc, #564]	@ (80027c8 <_Z8hwGpsOutv+0x280>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <_Z8hwGpsOutv+0x64>
			countUartGps	= 0;
 800259e:	4b8d      	ldr	r3, [pc, #564]	@ (80027d4 <_Z8hwGpsOutv+0x28c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	801a      	strh	r2, [r3, #0]
			stateUartGps	= 0;
 80025a4:	4b87      	ldr	r3, [pc, #540]	@ (80027c4 <_Z8hwGpsOutv+0x27c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
			stateUartGps	= 2;
		}
		else{
			stateUartGps	= 1;
		}
		break;
 80025aa:	e024      	b.n	80025f6 <_Z8hwGpsOutv+0xae>
		else if ( (countUartGps >= limitUartGps || flagUartGps)){
 80025ac:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <_Z8hwGpsOutv+0x28c>)
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	4b89      	ldr	r3, [pc, #548]	@ (80027d8 <_Z8hwGpsOutv+0x290>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d203      	bcs.n	80025c0 <_Z8hwGpsOutv+0x78>
 80025b8:	4b88      	ldr	r3, [pc, #544]	@ (80027dc <_Z8hwGpsOutv+0x294>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <_Z8hwGpsOutv+0x80>
			stateUartGps	= 2;
 80025c0:	4b80      	ldr	r3, [pc, #512]	@ (80027c4 <_Z8hwGpsOutv+0x27c>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
		break;
 80025c6:	e016      	b.n	80025f6 <_Z8hwGpsOutv+0xae>
			stateUartGps	= 1;
 80025c8:	4b7e      	ldr	r3, [pc, #504]	@ (80027c4 <_Z8hwGpsOutv+0x27c>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
		break;
 80025ce:	e012      	b.n	80025f6 <_Z8hwGpsOutv+0xae>

	case 2:
		flagUartGps		= 0;
 80025d0:	4b82      	ldr	r3, [pc, #520]	@ (80027dc <_Z8hwGpsOutv+0x294>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
		countUartGps	= 0;
 80025d6:	4b7f      	ldr	r3, [pc, #508]	@ (80027d4 <_Z8hwGpsOutv+0x28c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
 80025dc:	2202      	movs	r2, #2
 80025de:	497b      	ldr	r1, [pc, #492]	@ (80027cc <_Z8hwGpsOutv+0x284>)
 80025e0:	487b      	ldr	r0, [pc, #492]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 80025e2:	f009 fddd 	bl	800c1a0 <HAL_UART_Receive_DMA>
		stateUartGps	= 1;
 80025e6:	4b77      	ldr	r3, [pc, #476]	@ (80027c4 <_Z8hwGpsOutv+0x27c>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
		break;
 80025ec:	e003      	b.n	80025f6 <_Z8hwGpsOutv+0xae>
	default:
		stateUartGps	= 0;
 80025ee:	4b75      	ldr	r3, [pc, #468]	@ (80027c4 <_Z8hwGpsOutv+0x27c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
		break;
 80025f4:	bf00      	nop

	/////////////
	// MESSAGE //
	/////////////

	switch ( stateHwGpsEnable ){
 80025f6:	4b7a      	ldr	r3, [pc, #488]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d869      	bhi.n	80026d2 <_Z8hwGpsOutv+0x18a>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <_Z8hwGpsOutv+0xbc>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	08002643 	.word	0x08002643
 800260c:	08002677 	.word	0x08002677
 8002610:	080026b5 	.word	0x080026b5

		case 0:
			availableGps	= 0;
 8002614:	4b6c      	ldr	r3, [pc, #432]	@ (80027c8 <_Z8hwGpsOutv+0x280>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	2101      	movs	r1, #1
 800261e:	4871      	ldr	r0, [pc, #452]	@ (80027e4 <_Z8hwGpsOutv+0x29c>)
 8002620:	f005 fa98 	bl	8007b54 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
			if ( enableGps ){
 8002624:	4b70      	ldr	r3, [pc, #448]	@ (80027e8 <_Z8hwGpsOutv+0x2a0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <_Z8hwGpsOutv+0xf2>
				HAL_UART_Init(&huart5);
 800262c:	4868      	ldr	r0, [pc, #416]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 800262e:	f009 fcaf 	bl	800bf90 <HAL_UART_Init>
				stateHwGpsEnable	= 1;
 8002632:	4b6b      	ldr	r3, [pc, #428]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 0;
			}
			break;
 8002638:	e04f      	b.n	80026da <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 0;
 800263a:	4b69      	ldr	r3, [pc, #420]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
			break;
 8002640:	e04b      	b.n	80026da <_Z8hwGpsOutv+0x192>

		case 1:
			availableGps	= 0;
 8002642:	4b61      	ldr	r3, [pc, #388]	@ (80027c8 <_Z8hwGpsOutv+0x280>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
			countGpsAvailable++;
 8002648:	4b68      	ldr	r3, [pc, #416]	@ (80027ec <_Z8hwGpsOutv+0x2a4>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b66      	ldr	r3, [pc, #408]	@ (80027ec <_Z8hwGpsOutv+0x2a4>)
 8002652:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 8002654:	4b65      	ldr	r3, [pc, #404]	@ (80027ec <_Z8hwGpsOutv+0x2a4>)
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	4b65      	ldr	r3, [pc, #404]	@ (80027f0 <_Z8hwGpsOutv+0x2a8>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d306      	bcc.n	800266e <_Z8hwGpsOutv+0x126>
				countGpsAvailable	= 0;
 8002660:	4b62      	ldr	r3, [pc, #392]	@ (80027ec <_Z8hwGpsOutv+0x2a4>)
 8002662:	2200      	movs	r2, #0
 8002664:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 2;
 8002666:	4b5e      	ldr	r3, [pc, #376]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 8002668:	2202      	movs	r2, #2
 800266a:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 1;
			}
			break;
 800266c:	e035      	b.n	80026da <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 1;
 800266e:	4b5c      	ldr	r3, [pc, #368]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
			break;
 8002674:	e031      	b.n	80026da <_Z8hwGpsOutv+0x192>

		case 2:
			availableGps	= 1;
 8002676:	4b54      	ldr	r3, [pc, #336]	@ (80027c8 <_Z8hwGpsOutv+0x280>)
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800267c:	2201      	movs	r2, #1
 800267e:	2101      	movs	r1, #1
 8002680:	4858      	ldr	r0, [pc, #352]	@ (80027e4 <_Z8hwGpsOutv+0x29c>)
 8002682:	f005 fa67 	bl	8007b54 <HAL_GPIO_WritePin>
			countGpsAvailable++;
 8002686:	4b59      	ldr	r3, [pc, #356]	@ (80027ec <_Z8hwGpsOutv+0x2a4>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	4b57      	ldr	r3, [pc, #348]	@ (80027ec <_Z8hwGpsOutv+0x2a4>)
 8002690:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 8002692:	4b56      	ldr	r3, [pc, #344]	@ (80027ec <_Z8hwGpsOutv+0x2a4>)
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <_Z8hwGpsOutv+0x2a8>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d306      	bcc.n	80026ac <_Z8hwGpsOutv+0x164>
				countGpsAvailable	= 0;
 800269e:	4b53      	ldr	r3, [pc, #332]	@ (80027ec <_Z8hwGpsOutv+0x2a4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 3;
 80026a4:	4b4e      	ldr	r3, [pc, #312]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 80026a6:	2203      	movs	r2, #3
 80026a8:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 2;
			}
			break;
 80026aa:	e016      	b.n	80026da <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 2;
 80026ac:	4b4c      	ldr	r3, [pc, #304]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]
			break;
 80026b2:	e012      	b.n	80026da <_Z8hwGpsOutv+0x192>

		case 3:
			if ( enableGps ){
 80026b4:	4b4c      	ldr	r3, [pc, #304]	@ (80027e8 <_Z8hwGpsOutv+0x2a0>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <_Z8hwGpsOutv+0x17c>
				stateHwGpsEnable	= 3;
 80026bc:	4b48      	ldr	r3, [pc, #288]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 80026be:	2203      	movs	r2, #3
 80026c0:	701a      	strb	r2, [r3, #0]
			else{

				HAL_UART_DeInit(&huart5);
				stateHwGpsEnable	= 0;
			}
			break;
 80026c2:	e00a      	b.n	80026da <_Z8hwGpsOutv+0x192>
				HAL_UART_DeInit(&huart5);
 80026c4:	4842      	ldr	r0, [pc, #264]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 80026c6:	f009 fcb1 	bl	800c02c <HAL_UART_DeInit>
				stateHwGpsEnable	= 0;
 80026ca:	4b45      	ldr	r3, [pc, #276]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
			break;
 80026d0:	e003      	b.n	80026da <_Z8hwGpsOutv+0x192>
		default:
			stateHwGpsEnable	= 0;
 80026d2:	4b43      	ldr	r3, [pc, #268]	@ (80027e0 <_Z8hwGpsOutv+0x298>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
			break;
 80026d8:	bf00      	nop
		}

	switch( stateConfigGps ){
 80026da:	4b46      	ldr	r3, [pc, #280]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b0a      	cmp	r3, #10
 80026e0:	d86d      	bhi.n	80027be <_Z8hwGpsOutv+0x276>
 80026e2:	a201      	add	r2, pc, #4	@ (adr r2, 80026e8 <_Z8hwGpsOutv+0x1a0>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	08002715 	.word	0x08002715
 80026ec:	0800272d 	.word	0x0800272d
 80026f0:	0800273f 	.word	0x0800273f
 80026f4:	08002747 	.word	0x08002747
 80026f8:	08002759 	.word	0x08002759
 80026fc:	08002761 	.word	0x08002761
 8002700:	08002773 	.word	0x08002773
 8002704:	0800277b 	.word	0x0800277b
 8002708:	0800278d 	.word	0x0800278d
 800270c:	08002795 	.word	0x08002795
 8002710:	080027a7 	.word	0x080027a7
	case 0:
		if ( availableGps ){
 8002714:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <_Z8hwGpsOutv+0x280>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <_Z8hwGpsOutv+0x1dc>
			//HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
			stateConfigGps	= 1;
 800271c:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 8002722:	e04c      	b.n	80027be <_Z8hwGpsOutv+0x276>
			stateConfigGps	= 0;
 8002724:	4b33      	ldr	r3, [pc, #204]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
		break;
 800272a:	e048      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 1:
		HAL_UART_Transmit_DMA(&huart5, commandUart, sizeof(commandUart) - 1);
 800272c:	2219      	movs	r2, #25
 800272e:	4932      	ldr	r1, [pc, #200]	@ (80027f8 <_Z8hwGpsOutv+0x2b0>)
 8002730:	4827      	ldr	r0, [pc, #156]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 8002732:	f009 fcb9 	bl	800c0a8 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 2;
 8002736:	4b2f      	ldr	r3, [pc, #188]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 8002738:	2202      	movs	r2, #2
 800273a:	701a      	strb	r2, [r3, #0]
		break;
 800273c:	e03f      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 2:

		stateConfigGps	= 3;
 800273e:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 8002740:	2203      	movs	r2, #3
 8002742:	701a      	strb	r2, [r3, #0]
		break;
 8002744:	e03b      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 3:
		HAL_UART_Transmit_DMA(&huart5, commandUart3, sizeof(commandUart2) - 1);
 8002746:	2219      	movs	r2, #25
 8002748:	492c      	ldr	r1, [pc, #176]	@ (80027fc <_Z8hwGpsOutv+0x2b4>)
 800274a:	4821      	ldr	r0, [pc, #132]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 800274c:	f009 fcac 	bl	800c0a8 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 4;
 8002750:	4b28      	ldr	r3, [pc, #160]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 8002752:	2204      	movs	r2, #4
 8002754:	701a      	strb	r2, [r3, #0]
		break;
 8002756:	e032      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 4:
		//HAL_UART_Transmit_DMA(&huart5, commandUart4, sizeof(commandUart4) - 1);
		stateConfigGps	= 5;
 8002758:	4b26      	ldr	r3, [pc, #152]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 800275a:	2205      	movs	r2, #5
 800275c:	701a      	strb	r2, [r3, #0]
		break;
 800275e:	e02e      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 5:
		HAL_UART_Transmit_DMA(&huart5, commandUart2, sizeof(commandUart3) - 1);
 8002760:	2219      	movs	r2, #25
 8002762:	4927      	ldr	r1, [pc, #156]	@ (8002800 <_Z8hwGpsOutv+0x2b8>)
 8002764:	481a      	ldr	r0, [pc, #104]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 8002766:	f009 fc9f 	bl	800c0a8 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart5, sizeof(commandUart5) - 1);
		stateConfigGps	= 6;
 800276a:	4b22      	ldr	r3, [pc, #136]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 800276c:	2206      	movs	r2, #6
 800276e:	701a      	strb	r2, [r3, #0]
		break;
 8002770:	e025      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 6:
		//HAL_UART_Transmit_DMA(&huart5, commandUart6, sizeof(commandUart6) - 1);
		stateConfigGps	= 7;
 8002772:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 8002774:	2207      	movs	r2, #7
 8002776:	701a      	strb	r2, [r3, #0]
		break;
 8002778:	e021      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 7:
		HAL_UART_Transmit_DMA(&huart5, commandUart8, sizeof(commandUart8) - 1);
 800277a:	2211      	movs	r2, #17
 800277c:	4921      	ldr	r1, [pc, #132]	@ (8002804 <_Z8hwGpsOutv+0x2bc>)
 800277e:	4814      	ldr	r0, [pc, #80]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 8002780:	f009 fc92 	bl	800c0a8 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart7, sizeof(commandUart7) - 1);
		stateConfigGps	= 8;
 8002784:	4b1b      	ldr	r3, [pc, #108]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 8002786:	2208      	movs	r2, #8
 8002788:	701a      	strb	r2, [r3, #0]
		break;
 800278a:	e018      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 8:

		stateConfigGps	= 9;
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 800278e:	2209      	movs	r2, #9
 8002790:	701a      	strb	r2, [r3, #0]
		break;
 8002792:	e014      	b.n	80027be <_Z8hwGpsOutv+0x276>

	case 9:
		HAL_UART_Transmit_DMA(&huart5, commandUart9, sizeof(commandUart9) - 1);
 8002794:	220d      	movs	r2, #13
 8002796:	491c      	ldr	r1, [pc, #112]	@ (8002808 <_Z8hwGpsOutv+0x2c0>)
 8002798:	480d      	ldr	r0, [pc, #52]	@ (80027d0 <_Z8hwGpsOutv+0x288>)
 800279a:	f009 fc85 	bl	800c0a8 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 10;
 800279e:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 80027a0:	220a      	movs	r2, #10
 80027a2:	701a      	strb	r2, [r3, #0]
		break;
 80027a4:	e00b      	b.n	80027be <_Z8hwGpsOutv+0x276>
	case 10:
		if ( enableGps ){
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <_Z8hwGpsOutv+0x2a0>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <_Z8hwGpsOutv+0x26e>
			stateConfigGps	= 10;
 80027ae:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 80027b0:	220a      	movs	r2, #10
 80027b2:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 80027b4:	e002      	b.n	80027bc <_Z8hwGpsOutv+0x274>
			stateConfigGps	= 0;
 80027b6:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <_Z8hwGpsOutv+0x2ac>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
		break;
 80027bc:	bf00      	nop
	}
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200004f1 	.word	0x200004f1
 80027c8:	200004e0 	.word	0x200004e0
 80027cc:	20000ad4 	.word	0x20000ad4
 80027d0:	20000834 	.word	0x20000834
 80027d4:	200004f2 	.word	0x200004f2
 80027d8:	200004f4 	.word	0x200004f4
 80027dc:	200004e8 	.word	0x200004e8
 80027e0:	200004e6 	.word	0x200004e6
 80027e4:	48000c00 	.word	0x48000c00
 80027e8:	20000398 	.word	0x20000398
 80027ec:	200004e2 	.word	0x200004e2
 80027f0:	200004e4 	.word	0x200004e4
 80027f4:	200004e7 	.word	0x200004e7
 80027f8:	20000030 	.word	0x20000030
 80027fc:	20000068 	.word	0x20000068
 8002800:	2000004c 	.word	0x2000004c
 8002804:	20000084 	.word	0x20000084
 8002808:	20000098 	.word	0x20000098

0800280c <_Z9hwLoraOutv>:

//////////
// LORA //
//////////

void hwLoraOut(){
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	 *
	 * Transmite un comando por hardware
	 *
	 */

	if ( flagTxLora ){													// Si hay una señal de transmision
 8002810:	4b33      	ldr	r3, [pc, #204]	@ (80028e0 <_Z9hwLoraOutv+0xd4>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <_Z9hwLoraOutv+0x32>
		flagTxLora	= 0;												// Reinicia señal
 8002818:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <_Z9hwLoraOutv+0xd4>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, loraTxCommand0, sizeTxCommand0);	// Transmite por DMA para no estancar procesamiento
 800281e:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <_Z9hwLoraOutv+0xd8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a31      	ldr	r2, [pc, #196]	@ (80028e8 <_Z9hwLoraOutv+0xdc>)
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4830      	ldr	r0, [pc, #192]	@ (80028ec <_Z9hwLoraOutv+0xe0>)
 800282a:	f009 fc3d 	bl	800c0a8 <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));			// Inicia recepcion por DMA
 800282e:	2201      	movs	r2, #1
 8002830:	492f      	ldr	r1, [pc, #188]	@ (80028f0 <_Z9hwLoraOutv+0xe4>)
 8002832:	482e      	ldr	r0, [pc, #184]	@ (80028ec <_Z9hwLoraOutv+0xe0>)
 8002834:	f009 fcb4 	bl	800c1a0 <HAL_UART_Receive_DMA>
		flagUartGps	= 1;
 8002838:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <_Z9hwLoraOutv+0xe8>)
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
	 * S0: Espera 500ms, indica que esta deshabilitado
	 * S1: Indica que esta deshabiltiado, espera señal de RESET
	 *
	 */

	switch ( stateResetHwLora ){
 800283e:	4b2e      	ldr	r3, [pc, #184]	@ (80028f8 <_Z9hwLoraOutv+0xec>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <_Z9hwLoraOutv+0x40>
 8002846:	2b01      	cmp	r3, #1
 8002848:	d020      	beq.n	800288c <_Z9hwLoraOutv+0x80>
 800284a:	e042      	b.n	80028d2 <_Z9hwLoraOutv+0xc6>
	// S0 - DISABLE //
	//////////////////

	case 0:

		countResetHwLora++;										// Suma 1 al contador
 800284c:	4b2b      	ldr	r3, [pc, #172]	@ (80028fc <_Z9hwLoraOutv+0xf0>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b29      	ldr	r3, [pc, #164]	@ (80028fc <_Z9hwLoraOutv+0xf0>)
 8002856:	801a      	strh	r2, [r3, #0]
		flagEnableHwLora	= 0;								// Indica que el chip esta deshabilitado
 8002858:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <_Z9hwLoraOutv+0xf4>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	// Pin en RESET
 800285e:	2200      	movs	r2, #0
 8002860:	2104      	movs	r1, #4
 8002862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002866:	f005 f975 	bl	8007b54 <HAL_GPIO_WritePin>

		if ( countResetHwLora >= resetHwLora ){					// Si pasa el limite de reset
 800286a:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <_Z9hwLoraOutv+0xf0>)
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <_Z9hwLoraOutv+0xf8>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d306      	bcc.n	8002884 <_Z9hwLoraOutv+0x78>
			countResetHwLora	= 0;							// Reinicia contador
 8002876:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <_Z9hwLoraOutv+0xf0>)
 8002878:	2200      	movs	r2, #0
 800287a:	801a      	strh	r2, [r3, #0]
			stateResetHwLora	= 1;							// Pasa a S1
 800287c:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <_Z9hwLoraOutv+0xec>)
 800287e:	2201      	movs	r2, #1
 8002880:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateResetHwLora	= 0;							// Espera en S0
		}
		break;
 8002882:	e02a      	b.n	80028da <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 0;							// Espera en S0
 8002884:	4b1c      	ldr	r3, [pc, #112]	@ (80028f8 <_Z9hwLoraOutv+0xec>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
		break;
 800288a:	e026      	b.n	80028da <_Z9hwLoraOutv+0xce>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);	// Pin en SET
 800288c:	2201      	movs	r2, #1
 800288e:	2104      	movs	r1, #4
 8002890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002894:	f005 f95e 	bl	8007b54 <HAL_GPIO_WritePin>
		flagEnableHwLora	= 1;							// Indica que el chip esta habilitado
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <_Z9hwLoraOutv+0xf4>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]

		if ( flagResetHwLora ){								// Si se da la señal de reinicio
 800289e:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <_Z9hwLoraOutv+0xfc>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d011      	beq.n	80028ca <_Z9hwLoraOutv+0xbe>
			flagResetHwLora		= 0;						// Apaga señal
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <_Z9hwLoraOutv+0xfc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 80028ac:	2201      	movs	r2, #1
 80028ae:	4910      	ldr	r1, [pc, #64]	@ (80028f0 <_Z9hwLoraOutv+0xe4>)
 80028b0:	480e      	ldr	r0, [pc, #56]	@ (80028ec <_Z9hwLoraOutv+0xe0>)
 80028b2:	f009 fc75 	bl	800c1a0 <HAL_UART_Receive_DMA>
			countResetHwLora2++;
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <_Z9hwLoraOutv+0x100>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b13      	ldr	r3, [pc, #76]	@ (800290c <_Z9hwLoraOutv+0x100>)
 80028c0:	701a      	strb	r2, [r3, #0]
			stateResetHwLora	= 0;						// Pasa  S0
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <_Z9hwLoraOutv+0xec>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateResetHwLora	= 1;						// Espera en S1
		}
		break;
 80028c8:	e007      	b.n	80028da <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 1;						// Espera en S1
 80028ca:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <_Z9hwLoraOutv+0xec>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
		break;
 80028d0:	e003      	b.n	80028da <_Z9hwLoraOutv+0xce>

	default:
		stateResetHwLora	= 0;
 80028d2:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <_Z9hwLoraOutv+0xec>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
		break;
 80028d8:	bf00      	nop

	}
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200004e9 	.word	0x200004e9
 80028e4:	20001164 	.word	0x20001164
 80028e8:	20001168 	.word	0x20001168
 80028ec:	200007ac 	.word	0x200007ac
 80028f0:	20000ae4 	.word	0x20000ae4
 80028f4:	200004e8 	.word	0x200004e8
 80028f8:	200004ea 	.word	0x200004ea
 80028fc:	200004ec 	.word	0x200004ec
 8002900:	200004eb 	.word	0x200004eb
 8002904:	200004ee 	.word	0x200004ee
 8002908:	20000531 	.word	0x20000531
 800290c:	200004f0 	.word	0x200004f0

08002910 <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d122      	bne.n	8002966 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002926:	4293      	cmp	r3, r2
 8002928:	d11d      	bne.n	8002966 <_Z41__static_initialization_and_destruction_0ii+0x56>
uint16_t limitGpsAvailable	= 5000/superloop;
 800292a:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002934:	fb93 f3f2 	sdiv	r3, r3, r2
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800293c:	801a      	strh	r2, [r3, #0]
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002948:	fb93 f3f2 	sdiv	r3, r3, r2
 800294c:	b29a      	uxth	r2, r3
 800294e:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002950:	801a      	strh	r2, [r3, #0]
uint16_t limitUartGps	= 20000/superloop;
 8002952:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800295c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002964:	801a      	strh	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000399 	.word	0x20000399
 8002978:	200004e4 	.word	0x200004e4
 800297c:	200004ee 	.word	0x200004ee
 8002980:	200004f4 	.word	0x200004f4

08002984 <_GLOBAL__sub_I_availableGps>:
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
 8002988:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800298c:	2001      	movs	r0, #1
 800298e:	f7ff ffbf 	bl	8002910 <_Z41__static_initialization_and_destruction_0ii>
 8002992:	bd80      	pop	{r7, pc}

08002994 <_Z9linkInputv>:
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
uint16_t countBat;						// Contador bateria

/***** INPUT *****/

void linkInput(){
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	linkInGps();
 8002998:	f000 f94c 	bl	8002c34 <_Z9linkInGpsv>
	linkInLora();
 800299c:	f000 f8cc 	bl	8002b38 <_Z10linkInLorav>
	linkBoton();
 80029a0:	f000 fb6a 	bl	8003078 <_Z9linkBotonv>
	linkAnalog();
 80029a4:	f000 fbce 	bl	8003144 <_Z10linkAnalogv>
	linkBattery();
 80029a8:	f000 f802 	bl	80029b0 <_Z11linkBatteryv>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_Z11linkBatteryv>:
 * Output:
 * 		errorHardware[6]
 *
 */

void linkBattery(){
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

	batScaled = battery *510/10000;		// Escalamiento de bateria
 80029b4:	4b58      	ldr	r3, [pc, #352]	@ (8002b18 <_Z11linkBatteryv+0x168>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4613      	mov	r3, r2
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4a56      	ldr	r2, [pc, #344]	@ (8002b1c <_Z11linkBatteryv+0x16c>)
 80029c4:	fb82 1203 	smull	r1, r2, r2, r3
 80029c8:	1312      	asrs	r2, r2, #12
 80029ca:	17db      	asrs	r3, r3, #31
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	4a54      	ldr	r2, [pc, #336]	@ (8002b20 <_Z11linkBatteryv+0x170>)
 80029d0:	6013      	str	r3, [r2, #0]

	switch ( stateBattery ){
 80029d2:	4b54      	ldr	r3, [pc, #336]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	f200 8095 	bhi.w	8002b06 <_Z11linkBatteryv+0x156>
 80029dc:	a201      	add	r2, pc, #4	@ (adr r2, 80029e4 <_Z11linkBatteryv+0x34>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f9 	.word	0x080029f9
 80029e8:	08002a27 	.word	0x08002a27
 80029ec:	08002a49 	.word	0x08002a49
 80029f0:	08002a97 	.word	0x08002a97
 80029f4:	08002ab9 	.word	0x08002ab9
	//////////////////////////
	// S0 -  WAIT STABILITY //
	//////////////////////////

	case 0:
		countBat++;						// Suma 1 al contador
 80029f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002a02:	801a      	strh	r2, [r3, #0]

		if ( countBat >= limitBat ){	// Si pasa limite
 8002a04:	4b48      	ldr	r3, [pc, #288]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	4b48      	ldr	r3, [pc, #288]	@ (8002b2c <_Z11linkBatteryv+0x17c>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d306      	bcc.n	8002a1e <_Z11linkBatteryv+0x6e>
			countBat		= 0;		// Reinicia contador
 8002a10:	4b45      	ldr	r3, [pc, #276]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;		// Pasa a S1
 8002a16:	4b43      	ldr	r3, [pc, #268]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateBattery	= 0;		// Queda en S0
		}
		break;
 8002a1c:	e077      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
			stateBattery	= 0;		// Queda en S0
 8002a1e:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
		break;
 8002a24:	e073      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
	////////////////////////
	// S1 - CHECK BATTERY //
	////////////////////////

	case 1:
		errorHardware[6]	= 0;			// Sin error
 8002a26:	4b42      	ldr	r3, [pc, #264]	@ (8002b30 <_Z11linkBatteryv+0x180>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria baja del limite
 8002a2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b20 <_Z11linkBatteryv+0x170>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b40      	ldr	r3, [pc, #256]	@ (8002b34 <_Z11linkBatteryv+0x184>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	da03      	bge.n	8002a40 <_Z11linkBatteryv+0x90>
			stateBattery	= 2;			// Pasa a S2
 8002a38:	4b3a      	ldr	r3, [pc, #232]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 1;			// Queda en S1
		}
		break;
 8002a3e:	e066      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
			stateBattery	= 1;			// Queda en S1
 8002a40:	4b38      	ldr	r3, [pc, #224]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
		break;
 8002a46:	e062      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S2 - CHECK STABILITY //
	//////////////////////////

	case 2:
		errorHardware[6]	= 0;			// Sin error
 8002a48:	4b39      	ldr	r3, [pc, #228]	@ (8002b30 <_Z11linkBatteryv+0x180>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8002a4e:	4b36      	ldr	r3, [pc, #216]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002a58:	801a      	strh	r2, [r3, #0]

		if ( batScaled > thresholdBat ){	// Si la bateria esta Ok
 8002a5a:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <_Z11linkBatteryv+0x170>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b35      	ldr	r3, [pc, #212]	@ (8002b34 <_Z11linkBatteryv+0x184>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	dd06      	ble.n	8002a74 <_Z11linkBatteryv+0xc4>
			countBat		= 0;			// Reinicia contador
 8002a66:	4b30      	ldr	r3, [pc, #192]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Vuelve a S1
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 2;			// Queda en S2
		}
		break;
 8002a72:	e04c      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si el contador pasa limite
 8002a74:	4b2c      	ldr	r3, [pc, #176]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002a76:	881a      	ldrh	r2, [r3, #0]
 8002a78:	4b2c      	ldr	r3, [pc, #176]	@ (8002b2c <_Z11linkBatteryv+0x17c>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d306      	bcc.n	8002a8e <_Z11linkBatteryv+0xde>
			countBat		= 0;			// Reinicia contador
 8002a80:	4b29      	ldr	r3, [pc, #164]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
 8002a86:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002a88:	2203      	movs	r2, #3
 8002a8a:	701a      	strb	r2, [r3, #0]
		break;
 8002a8c:	e03f      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
			stateBattery	= 2;			// Queda en S2
 8002a8e:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002a90:	2202      	movs	r2, #2
 8002a92:	701a      	strb	r2, [r3, #0]
		break;
 8002a94:	e03b      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
	///////////////////////////////////
	// S3 - CHECK BATTERY WITH ERROR //
	///////////////////////////////////

	case 3:
		errorHardware[6]	= 1;			// Indica error
 8002a96:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <_Z11linkBatteryv+0x180>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria esta baja
 8002a9c:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <_Z11linkBatteryv+0x170>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <_Z11linkBatteryv+0x184>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	da03      	bge.n	8002ab0 <_Z11linkBatteryv+0x100>
			stateBattery	= 3;			// Sigue en S3
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002aaa:	2203      	movs	r2, #3
 8002aac:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 4;			// Pasa a S4
		}
		break;
 8002aae:	e02e      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Pasa a S4
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	701a      	strb	r2, [r3, #0]
		break;
 8002ab6:	e02a      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S4 - CHECK STABILITY //
	//////////////////////////

	case 4:
		errorHardware[6]	= 1;			// Indica error
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <_Z11linkBatteryv+0x180>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8002abe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002ac8:	801a      	strh	r2, [r3, #0]

		if ( batScaled < thresholdBat ){	// Si la bateria sigue baja
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <_Z11linkBatteryv+0x170>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <_Z11linkBatteryv+0x184>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	da06      	bge.n	8002ae4 <_Z11linkBatteryv+0x134>
			countBat		= 0;			// Reinicia contador
 8002ad6:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Vuelve a S3
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002ade:	2203      	movs	r2, #3
 8002ae0:	701a      	strb	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 4;			// Queda en S4
		}
		break;
 8002ae2:	e014      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si contador pasa limite
 8002ae4:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <_Z11linkBatteryv+0x17c>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d306      	bcc.n	8002afe <_Z11linkBatteryv+0x14e>
			countBat		= 0;			// Reinicia contador
 8002af0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <_Z11linkBatteryv+0x178>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
 8002af6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
		break;
 8002afc:	e007      	b.n	8002b0e <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Queda en S4
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002b00:	2204      	movs	r2, #4
 8002b02:	701a      	strb	r2, [r3, #0]
		break;
 8002b04:	e003      	b.n	8002b0e <_Z11linkBatteryv+0x15e>

	default:
		stateBattery	= 0;
 8002b06:	4b07      	ldr	r3, [pc, #28]	@ (8002b24 <_Z11linkBatteryv+0x174>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
		break;
 8002b0c:	bf00      	nop
	}
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	20000448 	.word	0x20000448
 8002b1c:	68db8bad 	.word	0x68db8bad
 8002b20:	20000528 	.word	0x20000528
 8002b24:	20000526 	.word	0x20000526
 8002b28:	2000052e 	.word	0x2000052e
 8002b2c:	2000052c 	.word	0x2000052c
 8002b30:	200004d8 	.word	0x200004d8
 8002b34:	200000a8 	.word	0x200000a8

08002b38 <_Z10linkInLorav>:
 *				INPUT	:	flagEnableHwLora
 *
 *				OUTPUT	:	flagWdLora
 */

void linkInLora(){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( loraInput.newResponse() ){						// Si hay nueva respuesta desde el modulo lora
 8002b3c:	4833      	ldr	r0, [pc, #204]	@ (8002c0c <_Z10linkInLorav+0xd4>)
 8002b3e:	f000 ff49 	bl	80039d4 <_ZN9loraInput11newResponseEv>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <_Z10linkInLorav+0x52>
		responseLora	 = loraInput.response();		// Guarda la respuesta
 8002b48:	4830      	ldr	r0, [pc, #192]	@ (8002c0c <_Z10linkInLorav+0xd4>)
 8002b4a:	f000 ff56 	bl	80039fa <_ZN9loraInput8responseEv>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4a2f      	ldr	r2, [pc, #188]	@ (8002c10 <_Z10linkInLorav+0xd8>)
 8002b52:	6013      	str	r3, [r2, #0]
		responseLoraSize = loraInput.responseSize();	// Guarda tamaño de la respuesta
 8002b54:	482d      	ldr	r0, [pc, #180]	@ (8002c0c <_Z10linkInLorav+0xd4>)
 8002b56:	f000 ff5c 	bl	8003a12 <_ZN9loraInput12responseSizeEv>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c14 <_Z10linkInLorav+0xdc>)
 8002b60:	701a      	strb	r2, [r3, #0]

		loraCheck.newResponse(responseLora, responseLoraSize);	// Inserta respuesta en modulo de checkeo de respuesta
 8002b62:	4b2b      	ldr	r3, [pc, #172]	@ (8002c10 <_Z10linkInLorav+0xd8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a2b      	ldr	r2, [pc, #172]	@ (8002c14 <_Z10linkInLorav+0xdc>)
 8002b68:	7812      	ldrb	r2, [r2, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	482a      	ldr	r0, [pc, #168]	@ (8002c18 <_Z10linkInLorav+0xe0>)
 8002b6e:	f000 fe55 	bl	800381c <_ZN9loraCheck11newResponseEPhh>
		loraTimeWd.setInput();									// Indica al watchdog que llego mensaje
 8002b72:	482a      	ldr	r0, [pc, #168]	@ (8002c1c <_Z10linkInLorav+0xe4>)
 8002b74:	f000 fe0b 	bl	800378e <_ZN9wdTimeout8setInputEv>
		qttyMessagesInputs++;									// Contador de respuestas recibidas
 8002b78:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <_Z10linkInLorav+0xe8>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b27      	ldr	r3, [pc, #156]	@ (8002c20 <_Z10linkInLorav+0xe8>)
 8002b82:	701a      	strb	r2, [r3, #0]
		flagUartGps	= 1;
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <_Z10linkInLorav+0xec>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]

	//////////////
	// WATCHDOG //
	//////////////

	switch ( stateWdLora ){
 8002b8a:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <_Z10linkInLorav+0xf0>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d031      	beq.n	8002bf6 <_Z10linkInLorav+0xbe>
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	dc36      	bgt.n	8002c04 <_Z10linkInLorav+0xcc>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <_Z10linkInLorav+0x68>
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d012      	beq.n	8002bc4 <_Z10linkInLorav+0x8c>
		flagWdLora	= 1;			// Reinicia chip por hw
		stateWdLora	= 0;			// Vuelve a S0
		break;

	default:
		break;
 8002b9e:	e031      	b.n	8002c04 <_Z10linkInLorav+0xcc>
		flagWdLora	= 0;			// Reinicia indicador de reset
 8002ba0:	4b22      	ldr	r3, [pc, #136]	@ (8002c2c <_Z10linkInLorav+0xf4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
		if ( flagEnableHwLora ){	// Si el chip esta habilitado
 8002ba6:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <_Z10linkInLorav+0xf8>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <_Z10linkInLorav+0x84>
			loraTimeWd.setOutput();	// Indica que salio un mensaje
 8002bae:	481b      	ldr	r0, [pc, #108]	@ (8002c1c <_Z10linkInLorav+0xe4>)
 8002bb0:	f000 fdbd 	bl	800372e <_ZN9wdTimeout9setOutputEv>
			stateWdLora = 1;		// Pasa a S1
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <_Z10linkInLorav+0xf0>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
		break;
 8002bba:	e024      	b.n	8002c06 <_Z10linkInLorav+0xce>
			stateWdLora = 0;		// Espera en S0
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <_Z10linkInLorav+0xf0>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
		break;
 8002bc2:	e020      	b.n	8002c06 <_Z10linkInLorav+0xce>
		loraTimeWd.addOne();			// Suma 1 al wd
 8002bc4:	4815      	ldr	r0, [pc, #84]	@ (8002c1c <_Z10linkInLorav+0xe4>)
 8002bc6:	f000 fdc2 	bl	800374e <_ZN9wdTimeout6addOneEv>
		if ( loraTimeWd.timeOut() ){	// Si se cumple timeout
 8002bca:	4814      	ldr	r0, [pc, #80]	@ (8002c1c <_Z10linkInLorav+0xe4>)
 8002bcc:	f000 fdf3 	bl	80037b6 <_ZN9wdTimeout7timeOutEv>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <_Z10linkInLorav+0xa6>
			stateWdLora = 2;			// Pasa a S2
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <_Z10linkInLorav+0xf0>)
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]
		break;
 8002bdc:	e013      	b.n	8002c06 <_Z10linkInLorav+0xce>
		else if ( flagEnableHwLora ){	// Si sigue habilitado por hw
 8002bde:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <_Z10linkInLorav+0xf8>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <_Z10linkInLorav+0xb6>
			stateWdLora = 1;			// Espera en S1
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <_Z10linkInLorav+0xf0>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
		break;
 8002bec:	e00b      	b.n	8002c06 <_Z10linkInLorav+0xce>
			stateWdLora	= 0;			// Pasa a S0
 8002bee:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <_Z10linkInLorav+0xf0>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
		break;
 8002bf4:	e007      	b.n	8002c06 <_Z10linkInLorav+0xce>
		flagWdLora	= 1;			// Reinicia chip por hw
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <_Z10linkInLorav+0xf4>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
		stateWdLora	= 0;			// Vuelve a S0
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <_Z10linkInLorav+0xf0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
		break;
 8002c02:	e000      	b.n	8002c06 <_Z10linkInLorav+0xce>
		break;
 8002c04:	bf00      	nop
	}
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000b28 	.word	0x20000b28
 8002c10:	20000504 	.word	0x20000504
 8002c14:	20000508 	.word	0x20000508
 8002c18:	20000b68 	.word	0x20000b68
 8002c1c:	2000107c 	.word	0x2000107c
 8002c20:	20000509 	.word	0x20000509
 8002c24:	200004e8 	.word	0x200004e8
 8002c28:	2000050b 	.word	0x2000050b
 8002c2c:	20000530 	.word	0x20000530
 8002c30:	200004eb 	.word	0x200004eb

08002c34 <_Z9linkInGpsv>:
 *				stopGps		|	Indicador detener GPS
 *				warning[]	|	Indica que no hay gps validos
 *
 */

void linkInGps(){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

	switch ( stateGpsLink ){
 8002c38:	4b45      	ldr	r3, [pc, #276]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	f200 8204 	bhi.w	800304a <_Z9linkInGpsv+0x416>
 8002c42:	a201      	add	r2, pc, #4	@ (adr r2, 8002c48 <_Z9linkInGpsv+0x14>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c61 	.word	0x08002c61
 8002c4c:	08002c7f 	.word	0x08002c7f
 8002c50:	08002ce3 	.word	0x08002ce3
 8002c54:	08002d09 	.word	0x08002d09
 8002c58:	08002d2d 	.word	0x08002d2d
 8002c5c:	08002d7d 	.word	0x08002d7d
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		if ( startGps ){			// Si se inicia GPS
 8002c60:	4b3c      	ldr	r3, [pc, #240]	@ (8002d54 <_Z9linkInGpsv+0x120>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <_Z9linkInGpsv+0x42>
			startGps		= 0;	// Reinicia indicador
 8002c68:	4b3a      	ldr	r3, [pc, #232]	@ (8002d54 <_Z9linkInGpsv+0x120>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 1;	// Pasa a S1
 8002c6e:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateGpsLink	= 0;	// Espera en S0
		}
		break;
 8002c74:	e1e9      	b.n	800304a <_Z9linkInGpsv+0x416>
			stateGpsLink	= 0;	// Espera en S0
 8002c76:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
		break;
 8002c7c:	e1e5      	b.n	800304a <_Z9linkInGpsv+0x416>
	///////////////////////////
	// S1 - WAIT FOR MESSAGE //
	///////////////////////////

	case 1:
		countGpsLink++;								// Suma 1 al contador
 8002c7e:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <_Z9linkInGpsv+0x124>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a34      	ldr	r2, [pc, #208]	@ (8002d58 <_Z9linkInGpsv+0x124>)
 8002c86:	6013      	str	r3, [r2, #0]
		gpsNewMessage	= 0;						// Reinicia flag nuevo mensaje
 8002c88:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <_Z9linkInGpsv+0x128>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]

		if ( gpsInput.getNewMessage() ){			// Si llega nuevo mensaje
 8002c8e:	4834      	ldr	r0, [pc, #208]	@ (8002d60 <_Z9linkInGpsv+0x12c>)
 8002c90:	f7fe ffc1 	bl	8001c16 <_ZN8gpsInput13getNewMessageEv>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <_Z9linkInGpsv+0x7a>
			gpsNewMessage	= 1;					// Marca flag de nuevo mensaje
 8002c9a:	4b30      	ldr	r3, [pc, #192]	@ (8002d5c <_Z9linkInGpsv+0x128>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
			gpsValid		= gpsInput.getValid();	// Copia mensaje valido
 8002ca0:	482f      	ldr	r0, [pc, #188]	@ (8002d60 <_Z9linkInGpsv+0x12c>)
 8002ca2:	f7fe ffa2 	bl	8001bea <_ZN8gpsInput8getValidEv>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b2e      	ldr	r3, [pc, #184]	@ (8002d64 <_Z9linkInGpsv+0x130>)
 8002cac:	701a      	strb	r2, [r3, #0]
		}

		if ( countGpsLink >= limitGpsLink ){		// Si pasa limite de 5 min
 8002cae:	4b2a      	ldr	r3, [pc, #168]	@ (8002d58 <_Z9linkInGpsv+0x124>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <_Z9linkInGpsv+0x134>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	db03      	blt.n	8002cc2 <_Z9linkInGpsv+0x8e>
			stateGpsLink	= 2;					// Cierra en S2
 8002cba:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 4;					// Pasa a S4
		}*/
		else{										// Si no
			stateGpsLink	= 1;					// Espera
		}
		break;
 8002cc0:	e1c3      	b.n	800304a <_Z9linkInGpsv+0x416>
		else if ( gpsNewMessage && gpsValid ){		// Si llega mensaje valido
 8002cc2:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <_Z9linkInGpsv+0x128>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <_Z9linkInGpsv+0xa6>
 8002cca:	4b26      	ldr	r3, [pc, #152]	@ (8002d64 <_Z9linkInGpsv+0x130>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <_Z9linkInGpsv+0xa6>
			stateGpsLink	= 3;					// Pasa a S3
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	701a      	strb	r2, [r3, #0]
		break;
 8002cd8:	e1b7      	b.n	800304a <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;					// Espera
 8002cda:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
		break;
 8002ce0:	e1b3      	b.n	800304a <_Z9linkInGpsv+0x416>
	///////////////////////
	// S2 - STOP MEASURE //
	///////////////////////

	case 2:
		savedGps			= 0;	//  Reinicia indicador coordenadas guardadas
 8002ce2:	4b22      	ldr	r3, [pc, #136]	@ (8002d6c <_Z9linkInGpsv+0x138>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
		countValidMsgGps	= 0;	//	Reinicia contador mensajes validos
 8002ce8:	4b21      	ldr	r3, [pc, #132]	@ (8002d70 <_Z9linkInGpsv+0x13c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
		countInvalidMsgGps	= 0;	//	Reinicia contador mensajes invalidos
 8002cee:	4b21      	ldr	r3, [pc, #132]	@ (8002d74 <_Z9linkInGpsv+0x140>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
		countGpsLink		= 0;	//	Reinicia contador de espera mensajes gps
 8002cf4:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <_Z9linkInGpsv+0x124>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
		stopGps				= 1;	//	Fija apagado de GPS
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8002d78 <_Z9linkInGpsv+0x144>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
		stateGpsLink		= 0;	//	Vuelve a S0
 8002d00:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
		break;
 8002d06:	e1a0      	b.n	800304a <_Z9linkInGpsv+0x416>
	////////////////////////////
	// S3 - NEW VALID MESSAGE //
	////////////////////////////

	case 3:
		countValidMsgGps++;				// Suma 1 a mensaje valids nuevos
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <_Z9linkInGpsv+0x13c>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <_Z9linkInGpsv+0x13c>)
 8002d12:	701a      	strb	r2, [r3, #0]

		if ( countValidMsgGps >= 4 ){	// Si es mayor a 10 mensajes
 8002d14:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <_Z9linkInGpsv+0x13c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d903      	bls.n	8002d24 <_Z9linkInGpsv+0xf0>
			stateGpsLink	= 5;		// Pasa a S5
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002d1e:	2205      	movs	r2, #5
 8002d20:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateGpsLink	= 1;		// Vuelve a S5
		}
		break;
 8002d22:	e192      	b.n	800304a <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;		// Vuelve a S5
 8002d24:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
		break;
 8002d2a:	e18e      	b.n	800304a <_Z9linkInGpsv+0x416>
	//////////////////////////////
	// S4 - NEW INVALID MESSAGE //
	//////////////////////////////

	case 4:
		countInvalidMsgGps++;				// Suma 1 a mensaje invalido nuevos
 8002d2c:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <_Z9linkInGpsv+0x140>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <_Z9linkInGpsv+0x140>)
 8002d36:	701a      	strb	r2, [r3, #0]

		if ( countInvalidMsgGps >= 30 ){	// Si es mayor a 10 mensajes
 8002d38:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <_Z9linkInGpsv+0x140>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b1d      	cmp	r3, #29
 8002d3e:	d903      	bls.n	8002d48 <_Z9linkInGpsv+0x114>
			stateGpsLink	= 2;			// Pasa a S2
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002d42:	2202      	movs	r2, #2
 8002d44:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateGpsLink	= 1;			// Pasa a S1
		}
		break;
 8002d46:	e180      	b.n	800304a <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;			// Pasa a S1
 8002d48:	4b01      	ldr	r3, [pc, #4]	@ (8002d50 <_Z9linkInGpsv+0x11c>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
		break;
 8002d4e:	e17c      	b.n	800304a <_Z9linkInGpsv+0x416>
 8002d50:	200004f6 	.word	0x200004f6
 8002d54:	20000397 	.word	0x20000397
 8002d58:	200004f8 	.word	0x200004f8
 8002d5c:	200004f7 	.word	0x200004f7
 8002d60:	20000a3c 	.word	0x20000a3c
 8002d64:	20000ae0 	.word	0x20000ae0
 8002d68:	200004fc 	.word	0x200004fc
 8002d6c:	20000ae2 	.word	0x20000ae2
 8002d70:	20000500 	.word	0x20000500
 8002d74:	20000501 	.word	0x20000501
 8002d78:	20000ae1 	.word	0x20000ae1
	////////////////////////////////
	// S5 - SAVE LATITUD/LONGITUD //
	////////////////////////////////

	case 5:
		savedGps	= 1;										// Indica que se guardó valor correctamente
 8002d7c:	4bb4      	ldr	r3, [pc, #720]	@ (8003050 <_Z9linkInGpsv+0x41c>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]

		latitud =	(gpsInput.latitud[0] - '0')*1000;			// Guarda unidad de mil latitud
 8002d82:	4bb4      	ldr	r3, [pc, #720]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002d84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d88:	3b30      	subs	r3, #48	@ 0x30
 8002d8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9a:	4baf      	ldr	r3, [pc, #700]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002d9c:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[1] - '0')*100;			// Guarda centena de latitud
 8002da0:	4bac      	ldr	r3, [pc, #688]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002da2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002da6:	3b30      	subs	r3, #48	@ 0x30
 8002da8:	2264      	movs	r2, #100	@ 0x64
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db6:	4ba8      	ldr	r3, [pc, #672]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc0:	4ba5      	ldr	r3, [pc, #660]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002dc2:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[2] - '0')*10;				// Guarda decena de latitud
 8002dc6:	4ba3      	ldr	r3, [pc, #652]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dcc:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002de0:	4b9d      	ldr	r3, [pc, #628]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dea:	4b9b      	ldr	r3, [pc, #620]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002dec:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[3] - '0')*1;				// Guarda unidad de latitud
 8002df0:	4b98      	ldr	r3, [pc, #608]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002df6:	3b30      	subs	r3, #48	@ 0x30
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e00:	4b95      	ldr	r3, [pc, #596]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0a:	4b93      	ldr	r3, [pc, #588]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002e0c:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[5]) - '0')/10;		// Guarda decima de latitud
 8002e10:	4b90      	ldr	r3, [pc, #576]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002e12:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1e:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800305c <_Z9linkInGpsv+0x428>
 8002e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e26:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e38:	4b87      	ldr	r3, [pc, #540]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002e3a:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[6]) - '0')/100;	// Guarda centecina de latitud
 8002e3e:	4b85      	ldr	r3, [pc, #532]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002e40:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4c:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800305c <_Z9linkInGpsv+0x428>
 8002e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e54:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003060 <_Z9linkInGpsv+0x42c>
 8002e58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002e5e:	edd3 7a00 	vldr	s15, [r3]
 8002e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e66:	4b7c      	ldr	r3, [pc, #496]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002e68:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[7]) - '0')/1000;	// Guarda milecima de latitud
 8002e6c:	4b79      	ldr	r3, [pc, #484]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002e6e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7a:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800305c <_Z9linkInGpsv+0x428>
 8002e7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e82:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8003064 <_Z9linkInGpsv+0x430>
 8002e86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e8a:	4b73      	ldr	r3, [pc, #460]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e94:	4b70      	ldr	r3, [pc, #448]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002e96:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[8]) - '0')/10000;	// Guarda decima de milecima de latitud
 8002e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002e9c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea8:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800305c <_Z9linkInGpsv+0x428>
 8002eac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eb0:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8003068 <_Z9linkInGpsv+0x434>
 8002eb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002eb8:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec2:	4b65      	ldr	r3, [pc, #404]	@ (8003058 <_Z9linkInGpsv+0x424>)
 8002ec4:	edc3 7a00 	vstr	s15, [r3]

		longitud =	(gpsInput.longitud[0] - '0')*10000;			// Guarda decena de mil longitud
 8002ec8:	4b62      	ldr	r3, [pc, #392]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002eca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002ece:	3b30      	subs	r3, #48	@ 0x30
 8002ed0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	ee07 3a90 	vmov	s15, r3
 8002edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee0:	4b62      	ldr	r3, [pc, #392]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002ee2:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[1] - '0')*1000;			// Guarda unidad de mil longitud
 8002ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002ee8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002eec:	3b30      	subs	r3, #48	@ 0x30
 8002eee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002efe:	4b5b      	ldr	r3, [pc, #364]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f08:	4b58      	ldr	r3, [pc, #352]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f0a:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[2] - '0')*100;			// Guarda centecima de longitud
 8002f0e:	4b51      	ldr	r3, [pc, #324]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002f10:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002f14:	3b30      	subs	r3, #48	@ 0x30
 8002f16:	2264      	movs	r2, #100	@ 0x64
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f24:	4b51      	ldr	r3, [pc, #324]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f30:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[3] - '0')*10;			// Guarda decena de longitud
 8002f34:	4b47      	ldr	r3, [pc, #284]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002f36:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8002f3a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f4e:	4b47      	ldr	r3, [pc, #284]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f58:	4b44      	ldr	r3, [pc, #272]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f5a:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[4] - '0')*1;				// Guarda unidad de longitud
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002f60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f64:	3b30      	subs	r3, #48	@ 0x30
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f78:	4b3c      	ldr	r3, [pc, #240]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f7a:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[6]) - '0')/10;	// Guarda decima de longitud
 8002f7e:	4b35      	ldr	r3, [pc, #212]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002f80:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800305c <_Z9linkInGpsv+0x428>
 8002f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f94:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f9c:	4b33      	ldr	r3, [pc, #204]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	4b31      	ldr	r3, [pc, #196]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[7]) - '0')/100;	// Guarda centecima de longitud
 8002fac:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002fae:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fba:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800305c <_Z9linkInGpsv+0x428>
 8002fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fc2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003060 <_Z9linkInGpsv+0x42c>
 8002fc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fca:	4b28      	ldr	r3, [pc, #160]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd4:	4b25      	ldr	r3, [pc, #148]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[8]) - '0')/1000;	// Guarda milesima de longitud
 8002fda:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <_Z9linkInGpsv+0x420>)
 8002fdc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe8:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800305c <_Z9linkInGpsv+0x428>
 8002fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff0:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8003064 <_Z9linkInGpsv+0x430>
 8002ff4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800306c <_Z9linkInGpsv+0x438>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <_Z9linkInGpsv+0x438>)
 8003004:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[9]) - '0')/10000;	// Guarda decima de milesima de longitud
 8003008:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <_Z9linkInGpsv+0x420>)
 800300a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003016:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800305c <_Z9linkInGpsv+0x428>
 800301a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800301e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8003068 <_Z9linkInGpsv+0x434>
 8003022:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003026:	4b11      	ldr	r3, [pc, #68]	@ (800306c <_Z9linkInGpsv+0x438>)
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <_Z9linkInGpsv+0x438>)
 8003032:	edc3 7a00 	vstr	s15, [r3]

		countSavedGps++;										// Contador de veces que se guardó un valor correctamente
 8003036:	4b0e      	ldr	r3, [pc, #56]	@ (8003070 <_Z9linkInGpsv+0x43c>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	3301      	adds	r3, #1
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <_Z9linkInGpsv+0x43c>)
 8003040:	701a      	strb	r2, [r3, #0]
		stateGpsLink	= 2;									// Pasa a S2
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <_Z9linkInGpsv+0x440>)
 8003044:	2202      	movs	r2, #2
 8003046:	701a      	strb	r2, [r3, #0]
		break;
 8003048:	bf00      	nop
	}

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000ae2 	.word	0x20000ae2
 8003054:	20000a3c 	.word	0x20000a3c
 8003058:	20000ad8 	.word	0x20000ad8
 800305c:	42400000 	.word	0x42400000
 8003060:	42c80000 	.word	0x42c80000
 8003064:	447a0000 	.word	0x447a0000
 8003068:	461c4000 	.word	0x461c4000
 800306c:	20000adc 	.word	0x20000adc
 8003070:	20000502 	.word	0x20000502
 8003074:	200004f6 	.word	0x200004f6

08003078 <_Z9linkBotonv>:
 *	INPUT	:	flagBoton
 *	OUTPUT	:	displayPhy.enable
 */


void linkBoton(){
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0

	switch ( stateEnableDisplay ){
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <_Z9linkBotonv+0x74>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <_Z9linkBotonv+0x12>
 8003084:	2b01      	cmp	r3, #1
 8003086:	d013      	beq.n	80030b0 <_Z9linkBotonv+0x38>
 8003088:	e029      	b.n	80030de <_Z9linkBotonv+0x66>
	//////////////////////
	// S0 - WAIT BUTTON //
	//////////////////////

	case 0:
		displayPhy.enable(0);			//	Inhabilita display
 800308a:	2100      	movs	r1, #0
 800308c:	4818      	ldr	r0, [pc, #96]	@ (80030f0 <_Z9linkBotonv+0x78>)
 800308e:	f7fd fa25 	bl	80004dc <_ZN15displayPhysical6enableEb>
		countEnableDisplay	= 0;		//	Reinicia contador
 8003092:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <_Z9linkBotonv+0x7c>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

		if ( flagBoton ){				//	Si se presiona el boton
 8003098:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <_Z9linkBotonv+0x80>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <_Z9linkBotonv+0x30>
			stateEnableDisplay	= 1;	//	Pasa a S1
 80030a0:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <_Z9linkBotonv+0x74>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
		}
		else{							//	Si no
			stateEnableDisplay	= 0;	//	Espera en S0
		}
		break;
 80030a6:	e01e      	b.n	80030e6 <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 0;	//	Espera en S0
 80030a8:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <_Z9linkBotonv+0x74>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
		break;
 80030ae:	e01a      	b.n	80030e6 <_Z9linkBotonv+0x6e>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		displayPhy.enable(1);							// Habilita display
 80030b0:	2101      	movs	r1, #1
 80030b2:	480f      	ldr	r0, [pc, #60]	@ (80030f0 <_Z9linkBotonv+0x78>)
 80030b4:	f7fd fa12 	bl	80004dc <_ZN15displayPhysical6enableEb>

		countEnableDisplay++;							// Suma 1 al contador
 80030b8:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <_Z9linkBotonv+0x7c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a0d      	ldr	r2, [pc, #52]	@ (80030f4 <_Z9linkBotonv+0x7c>)
 80030c0:	6013      	str	r3, [r2, #0]

		if ( countEnableDisplay > limitEnableDisplay ){	// Si llega al limite
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <_Z9linkBotonv+0x7c>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <_Z9linkBotonv+0x84>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	dd03      	ble.n	80030d6 <_Z9linkBotonv+0x5e>
			stateEnableDisplay	= 0;					// Vuelve a S0
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <_Z9linkBotonv+0x74>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateEnableDisplay	= 1;					// Espera en S1
		}
		break;
 80030d4:	e007      	b.n	80030e6 <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 1;					// Espera en S1
 80030d6:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <_Z9linkBotonv+0x74>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
		break;
 80030dc:	e003      	b.n	80030e6 <_Z9linkBotonv+0x6e>

	default:
		stateEnableDisplay	= 0;
 80030de:	4b03      	ldr	r3, [pc, #12]	@ (80030ec <_Z9linkBotonv+0x74>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
		break;
 80030e4:	bf00      	nop

	}
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000514 	.word	0x20000514
 80030f0:	20001088 	.word	0x20001088
 80030f4:	2000050c 	.word	0x2000050c
 80030f8:	20000a38 	.word	0x20000a38
 80030fc:	20000510 	.word	0x20000510

08003100 <_Z7adc2PPMth>:
 *	MODE 2	:	ADC interno A1
 *	MODE 3	:	ADC externo B1
 *	MODE 4	:	ADC interno B1
 */

uint8_t adc2PPM( uint16_t signal, uint8_t mode){
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	460a      	mov	r2, r1
 800310a:	80fb      	strh	r3, [r7, #6]
 800310c:	4613      	mov	r3, r2
 800310e:	717b      	strb	r3, [r7, #5]
	uint8_t result;

	result	= 1;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]

	switch ( mode ){
 8003114:	797b      	ldrb	r3, [r7, #5]
 8003116:	3b01      	subs	r3, #1
 8003118:	2b03      	cmp	r3, #3
 800311a:	d80b      	bhi.n	8003134 <_Z7adc2PPMth+0x34>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <_Z7adc2PPMth+0x24>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003135 	.word	0x08003135
 8003128:	08003135 	.word	0x08003135
 800312c:	08003135 	.word	0x08003135
 8003130:	08003135 	.word	0x08003135

	case 4:
		break;
	}

	return result;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop

08003144 <_Z10linkAnalogv>:
 *				flagAlarm_PPM,
 *				flagAlarm_TEMP
 *				flagAlarm_HUM
 */

void linkAnalog(){
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0

	/////////////////
	// CALIBRATION //
	/////////////////

	switch ( stateCalibration ){
 8003148:	4b6a      	ldr	r3, [pc, #424]	@ (80032f4 <_Z10linkAnalogv+0x1b0>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <_Z10linkAnalogv+0x12>
 8003150:	2b01      	cmp	r3, #1
 8003152:	d01d      	beq.n	8003190 <_Z10linkAnalogv+0x4c>
 8003154:	e018      	b.n	8003188 <_Z10linkAnalogv+0x44>
	///////////////////////////////
	// S0 - WAIT FOR CALIBRATION //
	///////////////////////////////

	case 0:
		countCalibration++;								// Suma 1 al contador
 8003156:	4b68      	ldr	r3, [pc, #416]	@ (80032f8 <_Z10linkAnalogv+0x1b4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	4a66      	ldr	r2, [pc, #408]	@ (80032f8 <_Z10linkAnalogv+0x1b4>)
 800315e:	6013      	str	r3, [r2, #0]
		enableSensors	= 0;							// Deshabilita sensores
 8003160:	4b66      	ldr	r3, [pc, #408]	@ (80032fc <_Z10linkAnalogv+0x1b8>)
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]

		if ( countCalibration >= limitCalibration ){	// Si se cumple el tiempo de calibracion
 8003166:	4b64      	ldr	r3, [pc, #400]	@ (80032f8 <_Z10linkAnalogv+0x1b4>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b65      	ldr	r3, [pc, #404]	@ (8003300 <_Z10linkAnalogv+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	db06      	blt.n	8003180 <_Z10linkAnalogv+0x3c>
			enableSensors		= 1;					// Habilita sensores
 8003172:	4b62      	ldr	r3, [pc, #392]	@ (80032fc <_Z10linkAnalogv+0x1b8>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
			stateCalibration	= 1;					// Pasa a S1
 8003178:	4b5e      	ldr	r3, [pc, #376]	@ (80032f4 <_Z10linkAnalogv+0x1b0>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateCalibration	= 0;					// Espera en S0
		}
		break;
 800317e:	e008      	b.n	8003192 <_Z10linkAnalogv+0x4e>
			stateCalibration	= 0;					// Espera en S0
 8003180:	4b5c      	ldr	r3, [pc, #368]	@ (80032f4 <_Z10linkAnalogv+0x1b0>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
		break;
 8003186:	e004      	b.n	8003192 <_Z10linkAnalogv+0x4e>
	////////////////////
	case 1:
		break;

	default:
		stateCalibration	= 0;
 8003188:	4b5a      	ldr	r3, [pc, #360]	@ (80032f4 <_Z10linkAnalogv+0x1b0>)
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
		break;
 800318e:	e000      	b.n	8003192 <_Z10linkAnalogv+0x4e>
		break;
 8003190:	bf00      	nop

	////////////
	// A1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habilitado el ADC
 8003192:	4b5c      	ldr	r3, [pc, #368]	@ (8003304 <_Z10linkAnalogv+0x1c0>)
 8003194:	795b      	ldrb	r3, [r3, #5]
 8003196:	f083 0301 	eor.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00f      	beq.n	80031c0 <_Z10linkAnalogv+0x7c>
		alpha_A1_PPM = adc2PPM(alphaA, 1) * enableSensors;			// Convierte en PPM
 80031a0:	4b59      	ldr	r3, [pc, #356]	@ (8003308 <_Z10linkAnalogv+0x1c4>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ffaa 	bl	8003100 <_Z7adc2PPMth>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b52      	ldr	r3, [pc, #328]	@ (80032fc <_Z10linkAnalogv+0x1b8>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	fb12 f303 	smulbb	r3, r2, r3
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b54      	ldr	r3, [pc, #336]	@ (800330c <_Z10linkAnalogv+0x1c8>)
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e00e      	b.n	80031de <_Z10linkAnalogv+0x9a>
	}
	else{															// Si no esta habiltiado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 2) * enableSensors;	// Convierte en PPM
 80031c0:	4b53      	ldr	r3, [pc, #332]	@ (8003310 <_Z10linkAnalogv+0x1cc>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	2102      	movs	r1, #2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff9a 	bl	8003100 <_Z7adc2PPMth>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b4a      	ldr	r3, [pc, #296]	@ (80032fc <_Z10linkAnalogv+0x1b8>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	fb12 f303 	smulbb	r3, r2, r3
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <_Z10linkAnalogv+0x1c8>)
 80031dc:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors){		// Si pasa de 5 ppm
 80031de:	4b4b      	ldr	r3, [pc, #300]	@ (800330c <_Z10linkAnalogv+0x1c8>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b32      	cmp	r3, #50	@ 0x32
 80031e4:	d907      	bls.n	80031f6 <_Z10linkAnalogv+0xb2>
 80031e6:	4b45      	ldr	r3, [pc, #276]	@ (80032fc <_Z10linkAnalogv+0x1b8>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <_Z10linkAnalogv+0xb2>
		flagAlarm_PPM	= 1;						// Indica alarma
 80031ee:	4b49      	ldr	r3, [pc, #292]	@ (8003314 <_Z10linkAnalogv+0x1d0>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e002      	b.n	80031fc <_Z10linkAnalogv+0xb8>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 80031f6:	4b47      	ldr	r3, [pc, #284]	@ (8003314 <_Z10linkAnalogv+0x1d0>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]

	////////////
	// B1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habitado el ADC
 80031fc:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <_Z10linkAnalogv+0x1c0>)
 80031fe:	795b      	ldrb	r3, [r3, #5]
 8003200:	f083 0301 	eor.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00f      	beq.n	800322a <_Z10linkAnalogv+0xe6>
		alpha_A1_PPM = adc2PPM(alphaA, 3) * enableSensors;			// Convierte en PPM
 800320a:	4b3f      	ldr	r3, [pc, #252]	@ (8003308 <_Z10linkAnalogv+0x1c4>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	2103      	movs	r1, #3
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff75 	bl	8003100 <_Z7adc2PPMth>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	4b38      	ldr	r3, [pc, #224]	@ (80032fc <_Z10linkAnalogv+0x1b8>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	fb12 f303 	smulbb	r3, r2, r3
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b39      	ldr	r3, [pc, #228]	@ (800330c <_Z10linkAnalogv+0x1c8>)
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e00e      	b.n	8003248 <_Z10linkAnalogv+0x104>
	}
	else{															// Si no esta habilitado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 4) * enableSensors;	// Convierte en PPM
 800322a:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <_Z10linkAnalogv+0x1cc>)
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	2104      	movs	r1, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff65 	bl	8003100 <_Z7adc2PPMth>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	4b30      	ldr	r3, [pc, #192]	@ (80032fc <_Z10linkAnalogv+0x1b8>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	fb12 f303 	smulbb	r3, r2, r3
 8003242:	b2da      	uxtb	r2, r3
 8003244:	4b31      	ldr	r3, [pc, #196]	@ (800330c <_Z10linkAnalogv+0x1c8>)
 8003246:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors ){		// Si pasa de 5 ppm
 8003248:	4b30      	ldr	r3, [pc, #192]	@ (800330c <_Z10linkAnalogv+0x1c8>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b32      	cmp	r3, #50	@ 0x32
 800324e:	d907      	bls.n	8003260 <_Z10linkAnalogv+0x11c>
 8003250:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <_Z10linkAnalogv+0x1b8>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <_Z10linkAnalogv+0x11c>
		flagAlarm_PPM	= 1;						// Indica alarma
 8003258:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <_Z10linkAnalogv+0x1d0>)
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e002      	b.n	8003266 <_Z10linkAnalogv+0x122>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8003260:	4b2c      	ldr	r3, [pc, #176]	@ (8003314 <_Z10linkAnalogv+0x1d0>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]

	//////////////
	// TEMP HUM //
	///////////////

	if ( !errorHardware[1] ){			// Si hay sensor externo
 8003266:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <_Z10linkAnalogv+0x1c0>)
 8003268:	785b      	ldrb	r3, [r3, #1]
 800326a:	f083 0301 	eor.w	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <_Z10linkAnalogv+0x142>
		tempApp	= tempExtern;			// Copia temperatura
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <_Z10linkAnalogv+0x1d4>)
 8003276:	881a      	ldrh	r2, [r3, #0]
 8003278:	4b28      	ldr	r3, [pc, #160]	@ (800331c <_Z10linkAnalogv+0x1d8>)
 800327a:	801a      	strh	r2, [r3, #0]
		humApp	= humExtern;			// Copia humedad
 800327c:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <_Z10linkAnalogv+0x1dc>)
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	4b28      	ldr	r3, [pc, #160]	@ (8003324 <_Z10linkAnalogv+0x1e0>)
 8003282:	801a      	strh	r2, [r3, #0]
 8003284:	e015      	b.n	80032b2 <_Z10linkAnalogv+0x16e>
	}
	else if ( !errorHardware[0] ){	// Si hay sensor interno
 8003286:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <_Z10linkAnalogv+0x1c0>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	f083 0301 	eor.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <_Z10linkAnalogv+0x162>
		tempApp	= tempIntern;			// Copia temperatura
 8003294:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <_Z10linkAnalogv+0x1e4>)
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	4b20      	ldr	r3, [pc, #128]	@ (800331c <_Z10linkAnalogv+0x1d8>)
 800329a:	801a      	strh	r2, [r3, #0]
		humApp	= humIntern;			// Copia humedad
 800329c:	4b23      	ldr	r3, [pc, #140]	@ (800332c <_Z10linkAnalogv+0x1e8>)
 800329e:	881a      	ldrh	r2, [r3, #0]
 80032a0:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <_Z10linkAnalogv+0x1e0>)
 80032a2:	801a      	strh	r2, [r3, #0]
 80032a4:	e005      	b.n	80032b2 <_Z10linkAnalogv+0x16e>
	}
	else{								// Si no hay ninguno de ambos sensores
		tempApp	= 0;					// Copia 0
 80032a6:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <_Z10linkAnalogv+0x1d8>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	801a      	strh	r2, [r3, #0]
		humApp	= 0;					// Copia 0
 80032ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <_Z10linkAnalogv+0x1e0>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	801a      	strh	r2, [r3, #0]

	////////////
	// ALARMS //
	////////////

	if ( tempApp > 60 || tempApp < 5 ){	// Si pasa limite de sensores
 80032b2:	4b1a      	ldr	r3, [pc, #104]	@ (800331c <_Z10linkAnalogv+0x1d8>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	2b3c      	cmp	r3, #60	@ 0x3c
 80032b8:	d803      	bhi.n	80032c2 <_Z10linkAnalogv+0x17e>
 80032ba:	4b18      	ldr	r3, [pc, #96]	@ (800331c <_Z10linkAnalogv+0x1d8>)
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d803      	bhi.n	80032ca <_Z10linkAnalogv+0x186>
		warningHardware[0]	= 1;			// Indica alarma
 80032c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <_Z10linkAnalogv+0x1ec>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e002      	b.n	80032d0 <_Z10linkAnalogv+0x18c>
	}
	else{								// Si no
		warningHardware[0]	= 0;			// No hay alarma
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <_Z10linkAnalogv+0x1ec>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
	}

	if ( humApp < 5 || humApp > 90){	// Si pasa limite de sensores
 80032d0:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <_Z10linkAnalogv+0x1e0>)
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d903      	bls.n	80032e0 <_Z10linkAnalogv+0x19c>
 80032d8:	4b12      	ldr	r3, [pc, #72]	@ (8003324 <_Z10linkAnalogv+0x1e0>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	2b5a      	cmp	r3, #90	@ 0x5a
 80032de:	d903      	bls.n	80032e8 <_Z10linkAnalogv+0x1a4>
		warningHardware[1]	= 1;			// Indica alarma
 80032e0:	4b13      	ldr	r3, [pc, #76]	@ (8003330 <_Z10linkAnalogv+0x1ec>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	705a      	strb	r2, [r3, #1]
 80032e6:	e003      	b.n	80032f0 <_Z10linkAnalogv+0x1ac>
	}
	else{								// Si no
		warningHardware[1]	= 0;			// No hay alarma
 80032e8:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <_Z10linkAnalogv+0x1ec>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	705a      	strb	r2, [r3, #1]
	}
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	2000051a 	.word	0x2000051a
 80032f8:	2000051c 	.word	0x2000051c
 80032fc:	20000524 	.word	0x20000524
 8003300:	20000520 	.word	0x20000520
 8003304:	200004d8 	.word	0x200004d8
 8003308:	20000442 	.word	0x20000442
 800330c:	20000515 	.word	0x20000515
 8003310:	2000044a 	.word	0x2000044a
 8003314:	20000525 	.word	0x20000525
 8003318:	20000428 	.word	0x20000428
 800331c:	20000516 	.word	0x20000516
 8003320:	2000042a 	.word	0x2000042a
 8003324:	20000518 	.word	0x20000518
 8003328:	20000424 	.word	0x20000424
 800332c:	20000426 	.word	0x20000426
 8003330:	200004d0 	.word	0x200004d0

08003334 <_Z41__static_initialization_and_destruction_0ii>:
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d127      	bne.n	8003394 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800334a:	4293      	cmp	r3, r2
 800334c:	d122      	bne.n	8003394 <_Z41__static_initialization_and_destruction_0ii+0x60>
long int limitGpsLink	= 240000/superloop;	// Limite de tiempo esperando mensajes validos
 800334e:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003356:	fb93 f3f2 	sdiv	r3, r3, r2
 800335a:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800335c:	6013      	str	r3, [r2, #0]
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003368:	fb93 f3f2 	sdiv	r3, r3, r2
 800336c:	4a0f      	ldr	r2, [pc, #60]	@ (80033ac <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800336e:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003378:	fb93 f3f2 	sdiv	r3, r3, r2
 800337c:	4a0d      	ldr	r2, [pc, #52]	@ (80033b4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800337e:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 8003380:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	f241 3388 	movw	r3, #5000	@ 0x1388
 800338a:	fb93 f3f2 	sdiv	r3, r3, r2
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003392:	801a      	strh	r2, [r3, #0]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	20000399 	.word	0x20000399
 80033a4:	0003a980 	.word	0x0003a980
 80033a8:	200004fc 	.word	0x200004fc
 80033ac:	20000510 	.word	0x20000510
 80033b0:	000dbba0 	.word	0x000dbba0
 80033b4:	20000520 	.word	0x20000520
 80033b8:	2000052c 	.word	0x2000052c

080033bc <_GLOBAL__sub_I_stateGpsLink>:
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
 80033c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80033c4:	2001      	movs	r0, #1
 80033c6:	f7ff ffb5 	bl	8003334 <_Z41__static_initialization_and_destruction_0ii>
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_Z10linkOutputv>:
extern wdTimeout loraTimeWd;	// Watchdog de Lorawan
extern bool flagTxLora;			// Indica que se envía un mensaje

/***** OUTPUT *****/

void linkOutput(){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
	linkOutLora();
 80033d0:	f000 f804 	bl	80033dc <_Z11linkOutLorav>
	linkOutGps();
 80033d4:	f000 f81c 	bl	8003410 <_Z10linkOutGpsv>
	//linkOutDisplay();
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <_Z11linkOutLorav>:
/************************
 *****	LORA OUTPUT *****
 ************************
 *
 */
void linkOutLora(){
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( flagTxLora ){				// Si sale un comando
 80033e0:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <_Z11linkOutLorav+0x24>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <_Z11linkOutLorav+0x12>
		loraTimeWd.setOutput();		// Se indica a wd
 80033e8:	4806      	ldr	r0, [pc, #24]	@ (8003404 <_Z11linkOutLorav+0x28>)
 80033ea:	f000 f9a0 	bl	800372e <_ZN9wdTimeout9setOutputEv>

	//////////////
	// HARDWARE //
	//////////////

	if ( flagWdLora ){			// Si vence wd
 80033ee:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <_Z11linkOutLorav+0x2c>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <_Z11linkOutLorav+0x20>
		flagResetHwLora	= 1;	// Reinicia chip
 80033f6:	4b05      	ldr	r3, [pc, #20]	@ (800340c <_Z11linkOutLorav+0x30>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
	}
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200004e9 	.word	0x200004e9
 8003404:	2000107c 	.word	0x2000107c
 8003408:	20000530 	.word	0x20000530
 800340c:	20000531 	.word	0x20000531

08003410 <_Z10linkOutGpsv>:

/**********************
 ***** GPS OUTPUT *****
 **********************
 */
void linkOutGps(){
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0

	if ( startGps ){		// Si se inicia Gps
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <_Z10linkOutGpsv+0x30>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <_Z10linkOutGpsv+0x12>
		enableGps	= 1;	// Habilita gps
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <_Z10linkOutGpsv+0x34>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
	}

	if ( stopGps ){			// Si se detiene gps
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <_Z10linkOutGpsv+0x38>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <_Z10linkOutGpsv+0x26>
		stopGps		= 0;	// Reinicia Flag
 800342a:	4b07      	ldr	r3, [pc, #28]	@ (8003448 <_Z10linkOutGpsv+0x38>)
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
		enableGps	= 0;	// Deshabilita gps
 8003430:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <_Z10linkOutGpsv+0x34>)
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
	}
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	20000397 	.word	0x20000397
 8003444:	20000398 	.word	0x20000398
 8003448:	20000ae1 	.word	0x20000ae1

0800344c <_Z12setupLoraAppv>:

rn2903Command macSetCh8;
rn2903Command macSetCh9;
rn2903Command macSetCh10;

void setupLoraApp(){
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
	///////////////
	// SYS RESET //
	///////////////

	sysReset.command		= sysReset_RN2903;
 8003450:	4b57      	ldr	r3, [pc, #348]	@ (80035b0 <_Z12setupLoraAppv+0x164>)
 8003452:	4a58      	ldr	r2, [pc, #352]	@ (80035b4 <_Z12setupLoraAppv+0x168>)
 8003454:	605a      	str	r2, [r3, #4]
	sysReset.size			= sizeof( sysReset_RN2903 );
 8003456:	4b56      	ldr	r3, [pc, #344]	@ (80035b0 <_Z12setupLoraAppv+0x164>)
 8003458:	220c      	movs	r2, #12
 800345a:	701a      	strb	r2, [r3, #0]
	sysReset.responseSize	= 1;
 800345c:	4b54      	ldr	r3, [pc, #336]	@ (80035b0 <_Z12setupLoraAppv+0x164>)
 800345e:	2201      	movs	r2, #1
 8003460:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET MOD //
	///////////////////

	radioSetMod.command		= radioSetMod_RN2903;
 8003462:	4b55      	ldr	r3, [pc, #340]	@ (80035b8 <_Z12setupLoraAppv+0x16c>)
 8003464:	4a55      	ldr	r2, [pc, #340]	@ (80035bc <_Z12setupLoraAppv+0x170>)
 8003466:	605a      	str	r2, [r3, #4]
	radioSetMod.size		= sizeof( radioSetMod_RN2903 ) - 1;
 8003468:	4b53      	ldr	r3, [pc, #332]	@ (80035b8 <_Z12setupLoraAppv+0x16c>)
 800346a:	2214      	movs	r2, #20
 800346c:	701a      	strb	r2, [r3, #0]
	radioSetMod.responseSize= 3;
 800346e:	4b52      	ldr	r3, [pc, #328]	@ (80035b8 <_Z12setupLoraAppv+0x16c>)
 8003470:	2203      	movs	r2, #3
 8003472:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET SF //
	//////////////////

	radioSetSf.command		= radioSetSf_RN2903;
 8003474:	4b52      	ldr	r3, [pc, #328]	@ (80035c0 <_Z12setupLoraAppv+0x174>)
 8003476:	4a53      	ldr	r2, [pc, #332]	@ (80035c4 <_Z12setupLoraAppv+0x178>)
 8003478:	605a      	str	r2, [r3, #4]
	radioSetSf.size			= sizeof( radioSetSf_RN2903 ) - 1;
 800347a:	4b51      	ldr	r3, [pc, #324]	@ (80035c0 <_Z12setupLoraAppv+0x174>)
 800347c:	2213      	movs	r2, #19
 800347e:	701a      	strb	r2, [r3, #0]
	radioSetSf.responseSize	= 3;
 8003480:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <_Z12setupLoraAppv+0x174>)
 8003482:	2203      	movs	r2, #3
 8003484:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET BW //
	//////////////////

	radioSetBw.command		= radioSetBw_RN2903;
 8003486:	4b50      	ldr	r3, [pc, #320]	@ (80035c8 <_Z12setupLoraAppv+0x17c>)
 8003488:	4a50      	ldr	r2, [pc, #320]	@ (80035cc <_Z12setupLoraAppv+0x180>)
 800348a:	605a      	str	r2, [r3, #4]
	radioSetBw.size			= sizeof( radioSetBw_RN2903 ) - 1;
 800348c:	4b4e      	ldr	r3, [pc, #312]	@ (80035c8 <_Z12setupLoraAppv+0x17c>)
 800348e:	2212      	movs	r2, #18
 8003490:	701a      	strb	r2, [r3, #0]
	radioSetBw.responseSize = 3;
 8003492:	4b4d      	ldr	r3, [pc, #308]	@ (80035c8 <_Z12setupLoraAppv+0x17c>)
 8003494:	2203      	movs	r2, #3
 8003496:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET PWR //
	///////////////////

	radioSetPwr.command		= radioSetPwr_RN2903;
 8003498:	4b4d      	ldr	r3, [pc, #308]	@ (80035d0 <_Z12setupLoraAppv+0x184>)
 800349a:	4a4e      	ldr	r2, [pc, #312]	@ (80035d4 <_Z12setupLoraAppv+0x188>)
 800349c:	605a      	str	r2, [r3, #4]
	radioSetPwr.size		= sizeof( radioSetPwr_RN2903 ) - 1;
 800349e:	4b4c      	ldr	r3, [pc, #304]	@ (80035d0 <_Z12setupLoraAppv+0x184>)
 80034a0:	2212      	movs	r2, #18
 80034a2:	701a      	strb	r2, [r3, #0]
	radioSetPwr.responseSize= 3;
 80034a4:	4b4a      	ldr	r3, [pc, #296]	@ (80035d0 <_Z12setupLoraAppv+0x184>)
 80034a6:	2203      	movs	r2, #3
 80034a8:	721a      	strb	r2, [r3, #8]

	////////////////////
	// MAC SET DEVEUI //
	////////////////////

	macSetDeveui.command	= macSetDevEui_RN2903;
 80034aa:	4b4b      	ldr	r3, [pc, #300]	@ (80035d8 <_Z12setupLoraAppv+0x18c>)
 80034ac:	4a4b      	ldr	r2, [pc, #300]	@ (80035dc <_Z12setupLoraAppv+0x190>)
 80034ae:	605a      	str	r2, [r3, #4]
	macSetDeveui.size		= sizeof( macSetDevEui_RN2903 ) - 1;
 80034b0:	4b49      	ldr	r3, [pc, #292]	@ (80035d8 <_Z12setupLoraAppv+0x18c>)
 80034b2:	2220      	movs	r2, #32
 80034b4:	701a      	strb	r2, [r3, #0]
	macSetDeveui.responseSize	= 3;
 80034b6:	4b48      	ldr	r3, [pc, #288]	@ (80035d8 <_Z12setupLoraAppv+0x18c>)
 80034b8:	2203      	movs	r2, #3
 80034ba:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET NETWORK KEY //
	/////////////////////////

	macSetNwkskey.command	= macSetNwkskey_RN2903;
 80034bc:	4b48      	ldr	r3, [pc, #288]	@ (80035e0 <_Z12setupLoraAppv+0x194>)
 80034be:	4a49      	ldr	r2, [pc, #292]	@ (80035e4 <_Z12setupLoraAppv+0x198>)
 80034c0:	605a      	str	r2, [r3, #4]
	macSetNwkskey.size		= sizeof( macSetNwkskey_RN2903 ) - 1;
 80034c2:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <_Z12setupLoraAppv+0x194>)
 80034c4:	2232      	movs	r2, #50	@ 0x32
 80034c6:	701a      	strb	r2, [r3, #0]
	macSetNwkskey.responseSize	= 3;
 80034c8:	4b45      	ldr	r3, [pc, #276]	@ (80035e0 <_Z12setupLoraAppv+0x194>)
 80034ca:	2203      	movs	r2, #3
 80034cc:	721a      	strb	r2, [r3, #8]

	//////////////////////
	// MAC SET APPS KEY //
	//////////////////////

	macSetAppskey.command	= macSetAppskey_RN2903;
 80034ce:	4b46      	ldr	r3, [pc, #280]	@ (80035e8 <_Z12setupLoraAppv+0x19c>)
 80034d0:	4a46      	ldr	r2, [pc, #280]	@ (80035ec <_Z12setupLoraAppv+0x1a0>)
 80034d2:	605a      	str	r2, [r3, #4]
	macSetAppskey.size		= sizeof( macSetAppskey_RN2903 ) - 1;
 80034d4:	4b44      	ldr	r3, [pc, #272]	@ (80035e8 <_Z12setupLoraAppv+0x19c>)
 80034d6:	2232      	movs	r2, #50	@ 0x32
 80034d8:	701a      	strb	r2, [r3, #0]
	macSetAppskey.responseSize	= 3;
 80034da:	4b43      	ldr	r3, [pc, #268]	@ (80035e8 <_Z12setupLoraAppv+0x19c>)
 80034dc:	2203      	movs	r2, #3
 80034de:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET DEV ADDRESS //
	/////////////////////////

	macSetDevAddr.command		= macSetDevAddr_RN2903;
 80034e0:	4b43      	ldr	r3, [pc, #268]	@ (80035f0 <_Z12setupLoraAppv+0x1a4>)
 80034e2:	4a44      	ldr	r2, [pc, #272]	@ (80035f4 <_Z12setupLoraAppv+0x1a8>)
 80034e4:	605a      	str	r2, [r3, #4]
	macSetDevAddr.size			= sizeof ( macSetDevAddr_RN2903 ) - 1;
 80034e6:	4b42      	ldr	r3, [pc, #264]	@ (80035f0 <_Z12setupLoraAppv+0x1a4>)
 80034e8:	221a      	movs	r2, #26
 80034ea:	701a      	strb	r2, [r3, #0]
	macSetDevAddr.responseSize	= 2;
 80034ec:	4b40      	ldr	r3, [pc, #256]	@ (80035f0 <_Z12setupLoraAppv+0x1a4>)
 80034ee:	2202      	movs	r2, #2
 80034f0:	721a      	strb	r2, [r3, #8]

	///////////////////
	// MAC JOIN OTAA //
	///////////////////

	macJoinOtaa.command			= macJoinOtaa_RN2903;
 80034f2:	4b41      	ldr	r3, [pc, #260]	@ (80035f8 <_Z12setupLoraAppv+0x1ac>)
 80034f4:	4a41      	ldr	r2, [pc, #260]	@ (80035fc <_Z12setupLoraAppv+0x1b0>)
 80034f6:	605a      	str	r2, [r3, #4]
	macJoinOtaa.size			= sizeof ( macJoinOtaa_RN2903 ) - 1;
 80034f8:	4b3f      	ldr	r3, [pc, #252]	@ (80035f8 <_Z12setupLoraAppv+0x1ac>)
 80034fa:	220f      	movs	r2, #15
 80034fc:	701a      	strb	r2, [r3, #0]
	macJoinOtaa.responseSize	= 7;
 80034fe:	4b3e      	ldr	r3, [pc, #248]	@ (80035f8 <_Z12setupLoraAppv+0x1ac>)
 8003500:	2207      	movs	r2, #7
 8003502:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC JOIN ABP //
	//////////////////

	macJoinAbp.command		= macJoinAbp_RN2903;
 8003504:	4b3e      	ldr	r3, [pc, #248]	@ (8003600 <_Z12setupLoraAppv+0x1b4>)
 8003506:	4a3f      	ldr	r2, [pc, #252]	@ (8003604 <_Z12setupLoraAppv+0x1b8>)
 8003508:	605a      	str	r2, [r3, #4]
	macJoinAbp.size			= sizeof( macJoinAbp_RN2903 ) - 1;
 800350a:	4b3d      	ldr	r3, [pc, #244]	@ (8003600 <_Z12setupLoraAppv+0x1b4>)
 800350c:	220e      	movs	r2, #14
 800350e:	701a      	strb	r2, [r3, #0]
	macJoinAbp.responseSize	= 2;
 8003510:	4b3b      	ldr	r3, [pc, #236]	@ (8003600 <_Z12setupLoraAppv+0x1b4>)
 8003512:	2202      	movs	r2, #2
 8003514:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC SET SYNC //
	//////////////////

	macSetSync.command		= macSetSync_RN2903;
 8003516:	4b3c      	ldr	r3, [pc, #240]	@ (8003608 <_Z12setupLoraAppv+0x1bc>)
 8003518:	4a3c      	ldr	r2, [pc, #240]	@ (800360c <_Z12setupLoraAppv+0x1c0>)
 800351a:	605a      	str	r2, [r3, #4]
	macSetSync.size			= sizeof( macSetSync_RN2903 ) - 1;
 800351c:	4b3a      	ldr	r3, [pc, #232]	@ (8003608 <_Z12setupLoraAppv+0x1bc>)
 800351e:	2211      	movs	r2, #17
 8003520:	701a      	strb	r2, [r3, #0]
	macSetSync.responseSize	= 3;
 8003522:	4b39      	ldr	r3, [pc, #228]	@ (8003608 <_Z12setupLoraAppv+0x1bc>)
 8003524:	2203      	movs	r2, #3
 8003526:	721a      	strb	r2, [r3, #8]

	//////////////
	// MAC SAVE //
	//////////////

	macSave.command			= macSave_RN2903;
 8003528:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <_Z12setupLoraAppv+0x1c4>)
 800352a:	4a3a      	ldr	r2, [pc, #232]	@ (8003614 <_Z12setupLoraAppv+0x1c8>)
 800352c:	605a      	str	r2, [r3, #4]
	macSave.size			= sizeof( macSave_RN2903 ) - 1;
 800352e:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <_Z12setupLoraAppv+0x1c4>)
 8003530:	220a      	movs	r2, #10
 8003532:	701a      	strb	r2, [r3, #0]
	macSave.responseSize	= 3;
 8003534:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <_Z12setupLoraAppv+0x1c4>)
 8003536:	2203      	movs	r2, #3
 8003538:	721a      	strb	r2, [r3, #8]

	/////////////////
	// MAC TX DATA //
	/////////////////

	 macTxData.command		= macTxData_RN2903;
 800353a:	4b37      	ldr	r3, [pc, #220]	@ (8003618 <_Z12setupLoraAppv+0x1cc>)
 800353c:	4a37      	ldr	r2, [pc, #220]	@ (800361c <_Z12setupLoraAppv+0x1d0>)
 800353e:	605a      	str	r2, [r3, #4]
	 macTxData.size			= sizeof( macTxData_RN2903 ) - 1;
 8003540:	4b35      	ldr	r3, [pc, #212]	@ (8003618 <_Z12setupLoraAppv+0x1cc>)
 8003542:	2219      	movs	r2, #25
 8003544:	701a      	strb	r2, [r3, #0]
	 macTxData.responseSize	= 14;
 8003546:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <_Z12setupLoraAppv+0x1cc>)
 8003548:	220e      	movs	r2, #14
 800354a:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	 macTxGps.command		= macTxGps_RN2903;
 800354c:	4b34      	ldr	r3, [pc, #208]	@ (8003620 <_Z12setupLoraAppv+0x1d4>)
 800354e:	4a35      	ldr	r2, [pc, #212]	@ (8003624 <_Z12setupLoraAppv+0x1d8>)
 8003550:	605a      	str	r2, [r3, #4]
	 macTxGps.size			= sizeof( macTxGps_RN2903 ) - 1;
 8003552:	4b33      	ldr	r3, [pc, #204]	@ (8003620 <_Z12setupLoraAppv+0x1d4>)
 8003554:	2219      	movs	r2, #25
 8003556:	701a      	strb	r2, [r3, #0]
	 macTxGps.responseSize	= 14;
 8003558:	4b31      	ldr	r3, [pc, #196]	@ (8003620 <_Z12setupLoraAppv+0x1d4>)
 800355a:	220e      	movs	r2, #14
 800355c:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	  macTxSys.command		= macTxSys_RN2903;
 800355e:	4b32      	ldr	r3, [pc, #200]	@ (8003628 <_Z12setupLoraAppv+0x1dc>)
 8003560:	4a32      	ldr	r2, [pc, #200]	@ (800362c <_Z12setupLoraAppv+0x1e0>)
 8003562:	605a      	str	r2, [r3, #4]
	  macTxSys.size			= sizeof( macTxSys_RN2903 ) - 1;
 8003564:	4b30      	ldr	r3, [pc, #192]	@ (8003628 <_Z12setupLoraAppv+0x1dc>)
 8003566:	2215      	movs	r2, #21
 8003568:	701a      	strb	r2, [r3, #0]
	  macTxSys.responseSize	= 14;
 800356a:	4b2f      	ldr	r3, [pc, #188]	@ (8003628 <_Z12setupLoraAppv+0x1dc>)
 800356c:	220e      	movs	r2, #14
 800356e:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 8 //
	  //////////////////

	  macSetCh8.command		= macSetCh8_RN2903;
 8003570:	4b2f      	ldr	r3, [pc, #188]	@ (8003630 <_Z12setupLoraAppv+0x1e4>)
 8003572:	4a30      	ldr	r2, [pc, #192]	@ (8003634 <_Z12setupLoraAppv+0x1e8>)
 8003574:	605a      	str	r2, [r3, #4]
	  macSetCh8.size		= sizeof( macSetCh8_RN2903 ) - 1;
 8003576:	4b2e      	ldr	r3, [pc, #184]	@ (8003630 <_Z12setupLoraAppv+0x1e4>)
 8003578:	2219      	movs	r2, #25
 800357a:	701a      	strb	r2, [r3, #0]
	  macSetCh8.responseSize	= 9;
 800357c:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <_Z12setupLoraAppv+0x1e4>)
 800357e:	2209      	movs	r2, #9
 8003580:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 9 //
	  //////////////////

	  macSetCh9.command		= macSetCh9_RN2903;
 8003582:	4b2d      	ldr	r3, [pc, #180]	@ (8003638 <_Z12setupLoraAppv+0x1ec>)
 8003584:	4a2d      	ldr	r2, [pc, #180]	@ (800363c <_Z12setupLoraAppv+0x1f0>)
 8003586:	605a      	str	r2, [r3, #4]
	  macSetCh9.size		= sizeof( macSetCh9_RN2903 ) - 1;
 8003588:	4b2b      	ldr	r3, [pc, #172]	@ (8003638 <_Z12setupLoraAppv+0x1ec>)
 800358a:	2219      	movs	r2, #25
 800358c:	701a      	strb	r2, [r3, #0]
	  macSetCh9.responseSize	= 9;
 800358e:	4b2a      	ldr	r3, [pc, #168]	@ (8003638 <_Z12setupLoraAppv+0x1ec>)
 8003590:	2209      	movs	r2, #9
 8003592:	721a      	strb	r2, [r3, #8]

	  ///////////////////
	  // MAC SET CH 10 //
	  ///////////////////
	  macSetCh10.command		= macSetCh10_RN2903;
 8003594:	4b2a      	ldr	r3, [pc, #168]	@ (8003640 <_Z12setupLoraAppv+0x1f4>)
 8003596:	4a2b      	ldr	r2, [pc, #172]	@ (8003644 <_Z12setupLoraAppv+0x1f8>)
 8003598:	605a      	str	r2, [r3, #4]
	  macSetCh10.size			= sizeof( macSetCh10_RN2903 ) - 1;
 800359a:	4b29      	ldr	r3, [pc, #164]	@ (8003640 <_Z12setupLoraAppv+0x1f4>)
 800359c:	221a      	movs	r2, #26
 800359e:	701a      	strb	r2, [r3, #0]
	  macSetCh10.responseSize	= 9;
 80035a0:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <_Z12setupLoraAppv+0x1f4>)
 80035a2:	2209      	movs	r2, #9
 80035a4:	721a      	strb	r2, [r3, #8]

}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	20000534 	.word	0x20000534
 80035b4:	200001ac 	.word	0x200001ac
 80035b8:	20000540 	.word	0x20000540
 80035bc:	200001b8 	.word	0x200001b8
 80035c0:	2000054c 	.word	0x2000054c
 80035c4:	200001d0 	.word	0x200001d0
 80035c8:	20000558 	.word	0x20000558
 80035cc:	200001e4 	.word	0x200001e4
 80035d0:	20000564 	.word	0x20000564
 80035d4:	200001f8 	.word	0x200001f8
 80035d8:	20000570 	.word	0x20000570
 80035dc:	2000020c 	.word	0x2000020c
 80035e0:	20000588 	.word	0x20000588
 80035e4:	2000024c 	.word	0x2000024c
 80035e8:	20000594 	.word	0x20000594
 80035ec:	20000280 	.word	0x20000280
 80035f0:	2000057c 	.word	0x2000057c
 80035f4:	20000230 	.word	0x20000230
 80035f8:	200005a0 	.word	0x200005a0
 80035fc:	200002b4 	.word	0x200002b4
 8003600:	200005ac 	.word	0x200005ac
 8003604:	200002c4 	.word	0x200002c4
 8003608:	200005b8 	.word	0x200005b8
 800360c:	200002d4 	.word	0x200002d4
 8003610:	200005c4 	.word	0x200005c4
 8003614:	200002e8 	.word	0x200002e8
 8003618:	200005d0 	.word	0x200005d0
 800361c:	200002f4 	.word	0x200002f4
 8003620:	200005dc 	.word	0x200005dc
 8003624:	20000310 	.word	0x20000310
 8003628:	200005e8 	.word	0x200005e8
 800362c:	2000032c 	.word	0x2000032c
 8003630:	200005f4 	.word	0x200005f4
 8003634:	20000344 	.word	0x20000344
 8003638:	20000600 	.word	0x20000600
 800363c:	20000360 	.word	0x20000360
 8003640:	2000060c 	.word	0x2000060c
 8003644:	2000037c 	.word	0x2000037c

08003648 <_ZN10loraRutine10addCommandEP13rn2903Command>:

/////////////////
// ADD COMMAND //
/////////////////

void loraRutine::addCommand ( rn2903Command *command ){
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	this->listCommands[ this->sizeList ]	= command;	// AÑADE PUNTERO A LISTA
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8003658:	4619      	mov	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	this->sizeList++;									// Suma 1 al largo de lista
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8003668:	3301      	adds	r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_ZN10loraRutine7commandEv>:

/////////////
// COMMAND //
/////////////

rn2903Command *loraRutine::command(){
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
	uint8_t count	= this->actual;			// Copia elemento actual de rutina
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 800368c:	73fb      	strb	r3, [r7, #15]

	this->actual++;							// Suma 1 al elemento actuañ
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8003694:	3301      	adds	r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192

	if (this->actual >= this->sizeList){	// Si es el ultimo de la lista
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 2192 	ldrb.w	r2, [r3, #402]	@ 0x192
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d307      	bcc.n	80036be <_ZN10loraRutine7commandEv+0x40>
		this->actual	= 0;				// Reinicia la lista
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
		this->stopped	= 1;				// Indica que es el ultimo elemento
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	}
	return this->listCommands[count];		// Retorta puntero
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <_ZN10loraRutine5resetEv>:

///////////
// RESET //
///////////

void loraRutine::reset(){
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
	this->actual	= 0;	// Reinicia contador de lista
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
	this->stopped	= 0;	// No esta en el ultimo elemento
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_ZN10loraRutine6finishEv>:

////////////
// FINISH //
////////////
bool loraRutine::finish(){
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	return this->stopped;	// Indica si es el ultimo elemento
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190

}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <_ZN9wdTimeoutC1El>:
 *		5.- newMessage:	Indica si se recibió un mensaje
 *		6.- timeout:	Indica si hubo un timeout
 *
 */

wdTimeout::wdTimeout( long limit ){	// Constructor
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
	this->limit	= limit;			// Se debe fijar el limite de timeout
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_ZN9wdTimeout9setOutputEv>:

////////////////
// SET OUTPUT //
////////////////

void wdTimeout::setOutput(){	//
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
	this->flagOutput	= 1;	// Indica que salió un comando
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;	// Reinicia contador
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <_ZN9wdTimeout6addOneEv>:

/////////////
// ADD ONE //
/////////////

void wdTimeout::addOne(){
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
	if ( this->flagOutput ){			// Si salió un comando
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <_ZN9wdTimeout6addOneEv+0x1a>
		this->counter++;				// Suma uno al contador
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	605a      	str	r2, [r3, #4]
	}

	if (this->counter >= this->limit ){	// Si pasa el límite
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	db03      	blt.n	800377c <_ZN9wdTimeout6addOneEv+0x2e>
		this->flagTimeout	= 1;		// Se considera timeout
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	709a      	strb	r2, [r3, #2]
	}
	else{								// Si no
		this->flagTimeout	= 0;		// No indica timeout
	}
}
 800377a:	e002      	b.n	8003782 <_ZN9wdTimeout6addOneEv+0x34>
		this->flagTimeout	= 0;		// No indica timeout
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	709a      	strb	r2, [r3, #2]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <_ZN9wdTimeout8setInputEv>:

///////////////
// SET INPUT //
///////////////

void wdTimeout::setInput(){
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
	this->flagInput		= this->flagOutput;		// Copia indicador salida de comando )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	785a      	ldrb	r2, [r3, #1]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	701a      	strb	r2, [r3, #0]
												// Si hay multiples respuestas toma sentido
	this->flagOutput	= 0;					// Reinicia indicador de salida comando
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;					// Reinicia contador
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	605a      	str	r2, [r3, #4]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_ZN9wdTimeout7timeOutEv>:

/////////////
// TIMEOUT //
/////////////

bool wdTimeout::timeOut(){
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
	bool flag			= this->flagTimeout;	// Copia indicador timeout
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	789b      	ldrb	r3, [r3, #2]
 80037c2:	73fb      	strb	r3, [r7, #15]
	this->flagTimeout	= 0;					// Reinicia indicador timeout
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	709a      	strb	r2, [r3, #2]
	return flag;								// Retorna valor guardado
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_ZN9loraCheck18setResponsePointerEPPhh>:

//////////////////////////
// SET RESPONSE POINTER //
//////////////////////////

void loraCheck::setResponsePointer( uint8_t *pointer[], uint8_t sizeIdealResponses ){
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	71fb      	strb	r3, [r7, #7]
	this->idealResponses		= &pointer[0];
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
	this->sizeIdealResponses	= sizeIdealResponses;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	79fa      	ldrb	r2, [r7, #7]
 80037f0:	731a      	strb	r2, [r3, #12]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <_ZN9loraCheck17setIdealResponsesEh>:

////////////////////////
// SET IDEAL RESPONSE //
////////////////////////

void loraCheck::setIdealResponses( uint8_t qtty ){
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
	this->qtty				= qtty;				// Copia el largo del arreglo
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	705a      	strb	r2, [r3, #1]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <_ZN9loraCheck11newResponseEPhh>:

//////////////////
// NEW RESPONSE //
//////////////////

void loraCheck::newResponse( uint8_t *response, uint8_t sizeResponse ){
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]
	this->realResponse	= response;			// Copia la respuesta entregada por el modulo
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	611a      	str	r2, [r3, #16]
	this->sizeResponse	= sizeResponse;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	79fa      	ldrb	r2, [r7, #7]
 8003834:	701a      	strb	r2, [r3, #0]

	uint8_t i;	// Crea variable auxiliar
	uint8_t j;

	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]
 800383a:	e029      	b.n	8003890 <_ZN9loraCheck11newResponseEPhh+0x74>
		for ( j = 0; j < this->sizeResponse; j++ ){
 800383c:	2300      	movs	r3, #0
 800383e:	75bb      	strb	r3, [r7, #22]
 8003840:	e01a      	b.n	8003878 <_ZN9loraCheck11newResponseEPhh+0x5c>
			if ( *(this->idealResponses[i] + j) == this->realResponse[j]){
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	7dbb      	ldrb	r3, [r7, #22]
 8003850:	4413      	add	r3, r2
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6919      	ldr	r1, [r3, #16]
 8003858:	7dbb      	ldrb	r3, [r7, #22]
 800385a:	440b      	add	r3, r1
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d103      	bne.n	800386a <_ZN9loraCheck11newResponseEPhh+0x4e>
				this->flagCorrect	= 1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	70da      	strb	r2, [r3, #3]
 8003868:	e003      	b.n	8003872 <_ZN9loraCheck11newResponseEPhh+0x56>
			}
			else{
				this->flagCorrect	= 0;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	70da      	strb	r2, [r3, #3]
				break;
 8003870:	e007      	b.n	8003882 <_ZN9loraCheck11newResponseEPhh+0x66>
		for ( j = 0; j < this->sizeResponse; j++ ){
 8003872:	7dbb      	ldrb	r3, [r7, #22]
 8003874:	3301      	adds	r3, #1
 8003876:	75bb      	strb	r3, [r7, #22]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	7dba      	ldrb	r2, [r7, #22]
 800387e:	429a      	cmp	r2, r3
 8003880:	d3df      	bcc.n	8003842 <_ZN9loraCheck11newResponseEPhh+0x26>
			}
		}
		if (this->flagCorrect){
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	78db      	ldrb	r3, [r3, #3]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <_ZN9loraCheck11newResponseEPhh+0x80>
	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	3301      	adds	r3, #1
 800388e:	75fb      	strb	r3, [r7, #23]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	7dfa      	ldrb	r2, [r7, #23]
 8003896:	429a      	cmp	r2, r3
 8003898:	d3d0      	bcc.n	800383c <_ZN9loraCheck11newResponseEPhh+0x20>
 800389a:	e000      	b.n	800389e <_ZN9loraCheck11newResponseEPhh+0x82>
			break;
 800389c:	bf00      	nop
		}
	}

	this->position	= i;											// Copia posicion final
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	7dfa      	ldrb	r2, [r7, #23]
 80038a2:	709a      	strb	r2, [r3, #2]
	this->flagCheck	= 1;											// Indica que hay nuevo resultado
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	711a      	strb	r2, [r3, #4]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <_ZN9loraCheck5checkEv>:

////////////////////
// CHECK RESPONSE //
////////////////////

bool loraCheck::check(){
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
	bool flag;							// Crea variable auxiliar
	flag			= this->flagCheck;	// Copia resultado de flag
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	791b      	ldrb	r3, [r3, #4]
 80038c2:	73fb      	strb	r3, [r7, #15]
	this->flagCheck	= 0;				// Reinicia el indicador de nuevo resultado
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	711a      	strb	r2, [r3, #4]

	return 	flag;						// Entrega resultado
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <_ZN9loraCheck8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t loraCheck::response(){
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	uint8_t	finalResult;				// Crea variable auxiliar
	uint8_t i;

	if (this->flagCorrect){				// Si hubo respuesta correcta
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <_ZN9loraCheck8responseEv+0x18>
		finalResult	= this->position;	// Copia posición
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	789b      	ldrb	r3, [r3, #2]
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e001      	b.n	80038f4 <_ZN9loraCheck8responseEv+0x1c>
	}
	else{								// Si no
		finalResult	= 99;				// Entrega 99
 80038f0:	2363      	movs	r3, #99	@ 0x63
 80038f2:	73fb      	strb	r3, [r7, #15]
	}
	finalResult = this->position;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	789b      	ldrb	r3, [r3, #2]
 80038f8:	73fb      	strb	r3, [r7, #15]

	if ( this->sizeResponse > 30 ){
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b1e      	cmp	r3, #30
 8003900:	d91c      	bls.n	800393c <_ZN9loraCheck8responseEv+0x64>
		for (i = 0; i < this->sizeResponse-1; i++){
 8003902:	2300      	movs	r3, #0
 8003904:	73bb      	strb	r3, [r7, #14]
 8003906:	e013      	b.n	8003930 <_ZN9loraCheck8responseEv+0x58>
			if ( this->realResponse[i] == 'R' && this->realResponse[i+1] == 'N'){
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	7bbb      	ldrb	r3, [r7, #14]
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b52      	cmp	r3, #82	@ 0x52
 8003914:	d109      	bne.n	800392a <_ZN9loraCheck8responseEv+0x52>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	7bbb      	ldrb	r3, [r7, #14]
 800391c:	3301      	adds	r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b4e      	cmp	r3, #78	@ 0x4e
 8003924:	d101      	bne.n	800392a <_ZN9loraCheck8responseEv+0x52>
				finalResult	= 98;
 8003926:	2362      	movs	r3, #98	@ 0x62
 8003928:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < this->sizeResponse-1; i++){
 800392a:	7bbb      	ldrb	r3, [r7, #14]
 800392c:	3301      	adds	r3, #1
 800392e:	73bb      	strb	r3, [r7, #14]
 8003930:	7bba      	ldrb	r2, [r7, #14]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	3b01      	subs	r3, #1
 8003938:	429a      	cmp	r2, r3
 800393a:	dbe5      	blt.n	8003908 <_ZN9loraCheck8responseEv+0x30>
			}
		}
	}

	return finalResult;					// Retorna decisión
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <_ZN9loraInput12insertBufferEPhh>:

///////////////////
// INSERT BUFFER //
///////////////////

void loraInput::insertBuffer(uint8_t *buffer, uint8_t sizeBuffer){
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	4613      	mov	r3, r2
 8003956:	71fb      	strb	r3, [r7, #7]
	this->buffer		= buffer;		// Guarda puntero inicial del buffer
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	605a      	str	r2, [r3, #4]
	this->sizeBuffer	= sizeBuffer;	// Guarda tamaño del buffer
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	79fa      	ldrb	r2, [r7, #7]
 8003962:	721a      	strb	r2, [r3, #8]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <_ZN9loraInput13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

void loraInput::insertElement(uint8_t element){
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
	if (element == '\n'){							// Si llega un salto de linea
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	2b0a      	cmp	r3, #10
 8003980:	d10c      	bne.n	800399c <_ZN9loraInput13insertElementEh+0x2c>
		this->sizeResponse		= this->count;		// Guarda tamaño de la respuesta
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
		this->count				= 0;				// Reinicia contador
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
		this->flagNewResponse	= 1;				// Indica que llego mensaje nuevo
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			this->count	= 0;						// Reinicia buffer
		}
		this->buffer[this->count]	= element;	// Copia elemento en buffer
		this->count++;
	}
}
 800399a:	e015      	b.n	80039c8 <_ZN9loraInput13insertElementEh+0x58>
		if (this->count >= this->sizeBuffer){		// Si el contador se pasa del buffero
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7a1b      	ldrb	r3, [r3, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <_ZN9loraInput13insertElementEh+0x3e>
			this->count	= 0;						// Reinicia buffer
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
		this->buffer[this->count]	= element;	// Copia elemento en buffer
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	701a      	strb	r2, [r3, #0]
		this->count++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	701a      	strb	r2, [r3, #0]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_ZN9loraInput11newResponseEv>:

//////////////////
// NEW RESPONSE //
//////////////////

bool loraInput::newResponse(){						// Se reinicia cuando es consultado
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	bool flag				= this->flagNewResponse;	// Copia flag de nuevo mensaje
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e2:	73fb      	strb	r3, [r7, #15]
	this->flagNewResponse	= 0;						// Reinicia flag
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return flag;										// Retorna respuesta guardada
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <_ZN9loraInput8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t* loraInput::response(){	//
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
	return this->buffer;		// Entrega la respuesta final
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <_ZN9loraInput12responseSizeEv>:

uint8_t loraInput::responseSize(){
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	return this->sizeResponse;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <_ZN10loraSelect10setCommandEPhhh>:

/////////////////
// SET COMMAND //
/////////////////

void loraSelect::setCommand( uint8_t *command, uint8_t sizeCommand, uint8_t qtty ){
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	71fb      	strb	r3, [r7, #7]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	71bb      	strb	r3, [r7, #6]
	this->command		= command;		//	Copia comando
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	601a      	str	r2, [r3, #0]
	this->commandSize	= sizeCommand;	//	Copia lista de respuestas
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	79fa      	ldrb	r2, [r7, #7]
 8003a4c:	711a      	strb	r2, [r3, #4]
	this->qtty			= qtty;			//	Copia cantidad de respeustas
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	79ba      	ldrb	r2, [r7, #6]
 8003a52:	715a      	strb	r2, [r3, #5]
	this->flagNew		= 1;			//	Indica que hay nuevo comando
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	71da      	strb	r2, [r3, #7]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <_ZN10loraSelect10newCommandEv>:

/////////////////
// NEW COMMAND //
/////////////////

bool loraSelect::newCommand(){
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
	bool flag = this->flagNew;								// Crea variable
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	79db      	ldrb	r3, [r3, #7]
 8003a72:	73fb      	strb	r3, [r7, #15]
	this->flagNew	= 0;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	71da      	strb	r2, [r3, #7]

	return flag;							// Retorna salida
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_ZN10loraSelect10getCommandEv>:

/////////////////
// GET COMMAND //
/////////////////

uint8_t	*loraSelect::getCommand(){
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	return this->command;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN10loraSelect14getCommandSizeEv>:

///////////////////
// GET RESPONSES //
///////////////////

uint8_t loraSelect::getCommandSize(){
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	return this->commandSize;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	791b      	ldrb	r3, [r3, #4]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_ZN10loraSelect13qttyResponsesEv>:

////////////////////////
// QUANTITY RESPONSES //
////////////////////////

uint8_t loraSelect::qttyResponses(){
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	return this->qtty;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	795b      	ldrb	r3, [r3, #5]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <_ZN12loraDecision10setRetriesEh>:

//////////////////
// SET RETRIES  //
//////////////////

void loraDecision::setRetries( uint8_t retries ){
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
	this->retries	= retries;					//
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	701a      	strb	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <_ZN12loraDecision8responseEh>:
//////////////
// RESPONSE //
//////////////


void loraDecision::response ( uint8_t position ){
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
	this->position	= position;					//	Copia posicion
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	705a      	strb	r2, [r3, #1]

	if ( position == 0 || position == 12 ){						//	Si no hay error
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <_ZN12loraDecision8responseEh+0x1e>
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d10f      	bne.n	8003b2c <_ZN12loraDecision8responseEh+0x3e>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	709a      	strb	r2, [r3, #2]
		else{									//	Si no pasa  limite
			this->flagBurn		= 0;			//	No esta quemado
			this->flagRepeat	= 1;			//	Solicita repetir
		}
	}
}
 8003b2a:	e054      	b.n	8003bd6 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 10 ){
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b0a      	cmp	r3, #10
 8003b30:	d10f      	bne.n	8003b52 <_ZN12loraDecision8responseEh+0x64>
		this->flagCorrect	= 0;				//	Indica que la respuesta es correcta
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 1;				//	Reinicia flag quemado
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	709a      	strb	r2, [r3, #2]
}
 8003b50:	e041      	b.n	8003bd6 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position < 98 ){
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	2b61      	cmp	r3, #97	@ 0x61
 8003b56:	d80f      	bhi.n	8003b78 <_ZN12loraDecision8responseEh+0x8a>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	709a      	strb	r2, [r3, #2]
}
 8003b76:	e02e      	b.n	8003bd6 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 98 ){
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	2b62      	cmp	r3, #98	@ 0x62
 8003b7c:	d10f      	bne.n	8003b9e <_ZN12loraDecision8responseEh+0xb0>
		this->flagCorrect	= 0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	70da      	strb	r2, [r3, #3]
		this->flagBurn		= 0;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	715a      	strb	r2, [r3, #5]
		this->count			= 0;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	709a      	strb	r2, [r3, #2]
		this->flagEnable	= 1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	719a      	strb	r2, [r3, #6]
}
 8003b9c:	e01b      	b.n	8003bd6 <_ZN12loraDecision8responseEh+0xe8>
		this->flagCorrect	= 0;				//	Reinicia flag correcto
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	70da      	strb	r2, [r3, #3]
		this->count++;							//	Suma uno al contador
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	789b      	ldrb	r3, [r3, #2]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	709a      	strb	r2, [r3, #2]
		if ( this->count >= this->retries ){	//	Si pasa limite de reintentos
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	789a      	ldrb	r2, [r3, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d306      	bcc.n	8003bca <_ZN12loraDecision8responseEh+0xdc>
			this->flagBurn		= 1;			//	Indica que esta quemado
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 0;			//	No hay que repetir
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	715a      	strb	r2, [r3, #5]
}
 8003bc8:	e005      	b.n	8003bd6 <_ZN12loraDecision8responseEh+0xe8>
			this->flagBurn		= 0;			//	No esta quemado
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 1;			//	Solicita repetir
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	715a      	strb	r2, [r3, #5]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <_ZN12loraDecision5resetEv>:

///////////
// RESET //
///////////

void loraDecision::reset(){
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
	this->flagCorrect	= 0;	//	Reinicia indicador de msj correcto
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	70da      	strb	r2, [r3, #3]
	this->flagBurn		= 0;	//	Reinicia indicador de msj quemado
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	711a      	strb	r2, [r3, #4]
	this->flagRepeat	= 0;	//	Reinicia indicador de repetir mensaje
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	715a      	strb	r2, [r3, #5]
	this->count			= 0;	//	Reinicia contador
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	709a      	strb	r2, [r3, #2]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <_ZN12loraDecision7disableEv>:

void loraDecision::disable(){
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
	this->flagEnable	= 0;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	719a      	strb	r2, [r3, #6]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_ZN12loraDecision6enableEv>:

bool loraDecision::enable(){
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	return this->flagEnable;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	799b      	ldrb	r3, [r3, #6]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_ZN12loraDecision7correctEv>:

/////////////
// CORRECT //
/////////////

bool loraDecision::correct(){
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	return this->flagCorrect;	//
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	78db      	ldrb	r3, [r3, #3]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_ZN12loraDecision4burnEv>:

//////////
// BURN //
//////////

bool loraDecision::burn(){
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	return this->flagBurn;		//
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	791b      	ldrb	r3, [r3, #4]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_ZN12fifoCommandsC1Ev>:
////////////////////////
// FIFO COMMAND CLASS //
////////////////////////


class fifoCommands{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f103 0239 	add.w	r2, r3, #57	@ 0x39
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f103 0243 	add.w	r2, r3, #67	@ 0x43
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f103 024d 	add.w	r2, r3, #77	@ 0x4d
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	611a      	str	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f103 0257 	add.w	r2, r3, #87	@ 0x57
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	615a      	str	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f103 0261 	add.w	r2, r3, #97	@ 0x61
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	619a      	str	r2, [r3, #24]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f103 026b 	add.w	r2, r3, #107	@ 0x6b
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	61da      	str	r2, [r3, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f103 0275 	add.w	r2, r3, #117	@ 0x75
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	621a      	str	r2, [r3, #32]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f103 027f 	add.w	r2, r3, #127	@ 0x7f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f103 0289 	add.w	r2, r3, #137	@ 0x89
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cf0:	f001 fb25 	bl	800533e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cf4:	f000 f8e8 	bl	8003ec8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cf8:	f000 fb62 	bl	80043c0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003cfc:	f000 fb06 	bl	800430c <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8003d00:	f000 fa9c 	bl	800423c <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8003d04:	f000 face 	bl	80042a4 <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 8003d08:	f000 fa0a 	bl	8004120 <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 8003d0c:	f000 fa56 	bl	80041bc <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 8003d10:	f000 f956 	bl	8003fc0 <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 8003d14:	f000 f930 	bl	8003f78 <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 8003d18:	484b      	ldr	r0, [pc, #300]	@ (8003e48 <main+0x15c>)
 8003d1a:	f007 fe5f 	bl	800b9dc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA	(&huart4,	rxLora, sizeof(rxLora));
 8003d1e:	2201      	movs	r2, #1
 8003d20:	494a      	ldr	r1, [pc, #296]	@ (8003e4c <main+0x160>)
 8003d22:	484b      	ldr	r0, [pc, #300]	@ (8003e50 <main+0x164>)
 8003d24:	f008 fa3c 	bl	800c1a0 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA	(&huart5,	rxGps, sizeof(rxGps));
 8003d28:	2202      	movs	r2, #2
 8003d2a:	494a      	ldr	r1, [pc, #296]	@ (8003e54 <main+0x168>)
 8003d2c:	484a      	ldr	r0, [pc, #296]	@ (8003e58 <main+0x16c>)
 8003d2e:	f008 fa37 	bl	800c1a0 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 8003d32:	2203      	movs	r2, #3
 8003d34:	4949      	ldr	r1, [pc, #292]	@ (8003e5c <main+0x170>)
 8003d36:	484a      	ldr	r0, [pc, #296]	@ (8003e60 <main+0x174>)
 8003d38:	f001 fef4 	bl	8005b24 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupLoraApp();
 8003d3c:	f7ff fb86 	bl	800344c <_Z12setupLoraAppv>

  chSetRN2903.addCommand( &macSetCh8 );
 8003d40:	4948      	ldr	r1, [pc, #288]	@ (8003e64 <main+0x178>)
 8003d42:	4849      	ldr	r0, [pc, #292]	@ (8003e68 <main+0x17c>)
 8003d44:	f7ff fc80 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh9 );
 8003d48:	4948      	ldr	r1, [pc, #288]	@ (8003e6c <main+0x180>)
 8003d4a:	4847      	ldr	r0, [pc, #284]	@ (8003e68 <main+0x17c>)
 8003d4c:	f7ff fc7c 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh10 );
 8003d50:	4947      	ldr	r1, [pc, #284]	@ (8003e70 <main+0x184>)
 8003d52:	4845      	ldr	r0, [pc, #276]	@ (8003e68 <main+0x17c>)
 8003d54:	f7ff fc78 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &radioSetMod	);
 8003d58:	4946      	ldr	r1, [pc, #280]	@ (8003e74 <main+0x188>)
 8003d5a:	4847      	ldr	r0, [pc, #284]	@ (8003e78 <main+0x18c>)
 8003d5c:	f7ff fc74 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetSf 	);
 8003d60:	4946      	ldr	r1, [pc, #280]	@ (8003e7c <main+0x190>)
 8003d62:	4845      	ldr	r0, [pc, #276]	@ (8003e78 <main+0x18c>)
 8003d64:	f7ff fc70 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetBw 	);
 8003d68:	4945      	ldr	r1, [pc, #276]	@ (8003e80 <main+0x194>)
 8003d6a:	4843      	ldr	r0, [pc, #268]	@ (8003e78 <main+0x18c>)
 8003d6c:	f7ff fc6c 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetPwr 	);
 8003d70:	4944      	ldr	r1, [pc, #272]	@ (8003e84 <main+0x198>)
 8003d72:	4841      	ldr	r0, [pc, #260]	@ (8003e78 <main+0x18c>)
 8003d74:	f7ff fc68 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &macSetDeveui );
 8003d78:	4943      	ldr	r1, [pc, #268]	@ (8003e88 <main+0x19c>)
 8003d7a:	483f      	ldr	r0, [pc, #252]	@ (8003e78 <main+0x18c>)
 8003d7c:	f7ff fc64 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetDevAddr );
 8003d80:	4942      	ldr	r1, [pc, #264]	@ (8003e8c <main+0x1a0>)
 8003d82:	483d      	ldr	r0, [pc, #244]	@ (8003e78 <main+0x18c>)
 8003d84:	f7ff fc60 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetNwkskey );
 8003d88:	4941      	ldr	r1, [pc, #260]	@ (8003e90 <main+0x1a4>)
 8003d8a:	483b      	ldr	r0, [pc, #236]	@ (8003e78 <main+0x18c>)
 8003d8c:	f7ff fc5c 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetAppskey );
 8003d90:	4940      	ldr	r1, [pc, #256]	@ (8003e94 <main+0x1a8>)
 8003d92:	4839      	ldr	r0, [pc, #228]	@ (8003e78 <main+0x18c>)
 8003d94:	f7ff fc58 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macJoinAbp );
 8003d98:	493f      	ldr	r1, [pc, #252]	@ (8003e98 <main+0x1ac>)
 8003d9a:	4837      	ldr	r0, [pc, #220]	@ (8003e78 <main+0x18c>)
 8003d9c:	f7ff fc54 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetSync );
 8003da0:	493e      	ldr	r1, [pc, #248]	@ (8003e9c <main+0x1b0>)
 8003da2:	4835      	ldr	r0, [pc, #212]	@ (8003e78 <main+0x18c>)
 8003da4:	f7ff fc50 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSave );
 8003da8:	493d      	ldr	r1, [pc, #244]	@ (8003ea0 <main+0x1b4>)
 8003daa:	4833      	ldr	r0, [pc, #204]	@ (8003e78 <main+0x18c>)
 8003dac:	f7ff fc4c 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loopRN2903.addCommand( &macTxData );
 8003db0:	493c      	ldr	r1, [pc, #240]	@ (8003ea4 <main+0x1b8>)
 8003db2:	483d      	ldr	r0, [pc, #244]	@ (8003ea8 <main+0x1bc>)
 8003db4:	f7ff fc48 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>
  loopRN2903.addCommand( &macTxData );
 8003db8:	493a      	ldr	r1, [pc, #232]	@ (8003ea4 <main+0x1b8>)
 8003dba:	483b      	ldr	r0, [pc, #236]	@ (8003ea8 <main+0x1bc>)
 8003dbc:	f7ff fc44 	bl	8003648 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loraCheck.setResponsePointer( rxCommand, 13);
 8003dc0:	220d      	movs	r2, #13
 8003dc2:	493a      	ldr	r1, [pc, #232]	@ (8003eac <main+0x1c0>)
 8003dc4:	483a      	ldr	r0, [pc, #232]	@ (8003eb0 <main+0x1c4>)
 8003dc6:	f7ff fd07 	bl	80037d8 <_ZN9loraCheck18setResponsePointerEPPhh>
  loraDecision.setRetries(3);
 8003dca:	2103      	movs	r1, #3
 8003dcc:	4839      	ldr	r0, [pc, #228]	@ (8003eb4 <main+0x1c8>)
 8003dce:	f7ff fe7f 	bl	8003ad0 <_ZN12loraDecision10setRetriesEh>

  loraInput.insertBuffer( bufferLoraIn, sizeof(bufferLoraIn));
 8003dd2:	2232      	movs	r2, #50	@ 0x32
 8003dd4:	4938      	ldr	r1, [pc, #224]	@ (8003eb8 <main+0x1cc>)
 8003dd6:	4839      	ldr	r0, [pc, #228]	@ (8003ebc <main+0x1d0>)
 8003dd8:	f7ff fdb7 	bl	800394a <_ZN9loraInput12insertBufferEPhh>
  //displayLink.inputDisplay(8888, 3);
  //
  HAL_IWDG_Init(&hiwdg);
 8003ddc:	4838      	ldr	r0, [pc, #224]	@ (8003ec0 <main+0x1d4>)
 8003dde:	f006 f966 	bl	800a0ae <HAL_IWDG_Init>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003de2:	2201      	movs	r2, #1
 8003de4:	2110      	movs	r1, #16
 8003de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dea:	f003 feb3 	bl	8007b54 <HAL_GPIO_WritePin>

	  hwInput();
 8003dee:	f7fd ff1e 	bl	8001c2e <_Z7hwInputv>
	  linkInput();
 8003df2:	f7fe fdcf 	bl	8002994 <_Z9linkInputv>
	  tcpInput();
 8003df6:	f001 f8a3 	bl	8004f40 <_Z8tcpInputv>
	  app();
 8003dfa:	f7fc fc03 	bl	8000604 <_Z3appv>
	  tcpOutput();
 8003dfe:	f001 f9db 	bl	80051b8 <_Z9tcpOutputv>
	  linkOutput();
 8003e02:	f7ff fae3 	bl	80033cc <_Z10linkOutputv>
	  hwOutput();
 8003e06:	f7fe fb97 	bl	8002538 <_Z8hwOutputv>

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2110      	movs	r1, #16
 8003e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e12:	f003 fe9f 	bl	8007b54 <HAL_GPIO_WritePin>

	  HAL_SuspendTick();
 8003e16:	f001 fb07 	bl	8005428 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e20:	f006 f99c 	bl	800a15c <HAL_PWR_EnterSLEEPMode>

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 8003e24:	bf00      	nop
 8003e26:	4b27      	ldr	r3, [pc, #156]	@ (8003ec4 <main+0x1d8>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	f083 0301 	eor.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f8      	bne.n	8003e26 <main+0x13a>
	  }							// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 8003e34:	4b23      	ldr	r3, [pc, #140]	@ (8003ec4 <main+0x1d8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]

	  HAL_ResumeTick();
 8003e3a:	f001 fb05 	bl	8005448 <HAL_ResumeTick>
	  HAL_IWDG_Refresh(&hiwdg);
 8003e3e:	4820      	ldr	r0, [pc, #128]	@ (8003ec0 <main+0x1d4>)
 8003e40:	f006 f97b 	bl	800a13a <HAL_IWDG_Refresh>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003e44:	e7cd      	b.n	8003de2 <main+0xf6>
 8003e46:	bf00      	nop
 8003e48:	200009dc 	.word	0x200009dc
 8003e4c:	20000ae4 	.word	0x20000ae4
 8003e50:	200007ac 	.word	0x200007ac
 8003e54:	20000ad4 	.word	0x20000ad4
 8003e58:	20000834 	.word	0x20000834
 8003e5c:	20001130 	.word	0x20001130
 8003e60:	20000618 	.word	0x20000618
 8003e64:	200005f4 	.word	0x200005f4
 8003e68:	20000d20 	.word	0x20000d20
 8003e6c:	20000600 	.word	0x20000600
 8003e70:	2000060c 	.word	0x2000060c
 8003e74:	20000540 	.word	0x20000540
 8003e78:	20000b8c 	.word	0x20000b8c
 8003e7c:	2000054c 	.word	0x2000054c
 8003e80:	20000558 	.word	0x20000558
 8003e84:	20000564 	.word	0x20000564
 8003e88:	20000570 	.word	0x20000570
 8003e8c:	2000057c 	.word	0x2000057c
 8003e90:	20000588 	.word	0x20000588
 8003e94:	20000594 	.word	0x20000594
 8003e98:	200005ac 	.word	0x200005ac
 8003e9c:	200005b8 	.word	0x200005b8
 8003ea0:	200005c4 	.word	0x200005c4
 8003ea4:	200005d0 	.word	0x200005d0
 8003ea8:	20000eb4 	.word	0x20000eb4
 8003eac:	20000174 	.word	0x20000174
 8003eb0:	20000b68 	.word	0x20000b68
 8003eb4:	20000b7c 	.word	0x20000b7c
 8003eb8:	20001048 	.word	0x20001048
 8003ebc:	20000b28 	.word	0x20000b28
 8003ec0:	20000a28 	.word	0x20000a28
 8003ec4:	2000112c 	.word	0x2000112c

08003ec8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b096      	sub	sp, #88	@ 0x58
 8003ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	2244      	movs	r2, #68	@ 0x44
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f009 fbf9 	bl	800d6ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003edc:	463b      	mov	r3, r7
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003eea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003eee:	f006 f977 	bl	800a1e0 <HAL_PWREx_ControlVoltageScaling>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003f02:	f000 fb8d 	bl	8004620 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003f06:	2303      	movs	r3, #3
 8003f08:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f0e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f16:	2340      	movs	r3, #64	@ 0x40
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f1e:	f107 0314 	add.w	r3, r7, #20
 8003f22:	4618      	mov	r0, r3
 8003f24:	f006 f9fa 	bl	800a31c <HAL_RCC_OscConfig>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bf14      	ite	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	2300      	moveq	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8003f38:	f000 fb72 	bl	8004620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f3c:	230f      	movs	r3, #15
 8003f3e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003f40:	2302      	movs	r3, #2
 8003f42:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f50:	463b      	mov	r3, r7
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f006 fdfb 	bl	800ab50 <HAL_RCC_ClockConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8003f6a:	f000 fb59 	bl	8004620 <Error_Handler>
  }
}
 8003f6e:	bf00      	nop
 8003f70:	3758      	adds	r7, #88	@ 0x58
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* Initialize the IWDG peripheral */
  hiwdg.Instance = IWDG;
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb8 <_ZL12MX_IWDG_Initv+0x40>)
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003fbc <_ZL12MX_IWDG_Initv+0x44>)
 8003f80:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003f82:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <_ZL12MX_IWDG_Initv+0x40>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 399;
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <_ZL12MX_IWDG_Initv+0x40>)
 8003f8a:	f240 128f 	movw	r2, #399	@ 0x18f
 8003f8e:	609a      	str	r2, [r3, #8]
  hiwdg.Init.Window	= 390;
 8003f90:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <_ZL12MX_IWDG_Initv+0x40>)
 8003f92:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8003f96:	60da      	str	r2, [r3, #12]

  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003f98:	4807      	ldr	r0, [pc, #28]	@ (8003fb8 <_ZL12MX_IWDG_Initv+0x40>)
 8003f9a:	f006 f888 	bl	800a0ae <HAL_IWDG_Init>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <_ZL12MX_IWDG_Initv+0x3a>
  {
    Error_Handler();
 8003fae:	f000 fb37 	bl	8004620 <Error_Handler>
  }

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000a28 	.word	0x20000a28
 8003fbc:	40003000 	.word	0x40003000

08003fc0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	@ 0x28
 8003fc4:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8003fc6:	f107 031c 	add.w	r3, r7, #28
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8003fd2:	1d3b      	adds	r3, r7, #4
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	611a      	str	r2, [r3, #16]
 8003fe0:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8003fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8003fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8004110 <_ZL12MX_ADC1_Initv+0x150>)
 8003fe6:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003fe8:	4b48      	ldr	r3, [pc, #288]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003fee:	4b47      	ldr	r3, [pc, #284]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ff4:	4b45      	ldr	r3, [pc, #276]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003ffa:	4b44      	ldr	r3, [pc, #272]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004000:	4b42      	ldr	r3, [pc, #264]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8004002:	2204      	movs	r2, #4
 8004004:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004006:	4b41      	ldr	r3, [pc, #260]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8004008:	2200      	movs	r2, #0
 800400a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 800400c:	4b3f      	ldr	r3, [pc, #252]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 800400e:	2201      	movs	r2, #1
 8004010:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 8004012:	4b3e      	ldr	r3, [pc, #248]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8004014:	2203      	movs	r2, #3
 8004016:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004018:	4b3c      	ldr	r3, [pc, #240]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004020:	4b3a      	ldr	r3, [pc, #232]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8004022:	2200      	movs	r2, #0
 8004024:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004026:	4b39      	ldr	r3, [pc, #228]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8004028:	2200      	movs	r2, #0
 800402a:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 800402c:	4b37      	ldr	r3, [pc, #220]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004034:	4b35      	ldr	r3, [pc, #212]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8004036:	2200      	movs	r2, #0
 8004038:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 800403a:	4b34      	ldr	r3, [pc, #208]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004042:	4832      	ldr	r0, [pc, #200]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8004044:	f001 fc1a 	bl	800587c <HAL_ADC_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 8004058:	f000 fae2 	bl	8004620 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004060:	f107 031c 	add.w	r3, r7, #28
 8004064:	4619      	mov	r1, r3
 8004066:	4829      	ldr	r0, [pc, #164]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 8004068:	f002 fdce 	bl	8006c08 <HAL_ADCEx_MultiModeConfigChannel>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 800407c:	f000 fad0 	bl	8004620 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8004080:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <_ZL12MX_ADC1_Initv+0x154>)
 8004082:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004084:	2306      	movs	r3, #6
 8004086:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004088:	2303      	movs	r3, #3
 800408a:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800408c:	237f      	movs	r3, #127	@ 0x7f
 800408e:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004090:	2304      	movs	r3, #4
 8004092:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	4619      	mov	r1, r3
 800409c:	481b      	ldr	r0, [pc, #108]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 800409e:	f002 f835 	bl	800610c <HAL_ADC_ConfigChannel>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 80040b2:	f000 fab5 	bl	8004620 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 80040b6:	4b18      	ldr	r3, [pc, #96]	@ (8004118 <_ZL12MX_ADC1_Initv+0x158>)
 80040b8:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80040ba:	230c      	movs	r3, #12
 80040bc:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4812      	ldr	r0, [pc, #72]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 80040c4:	f002 f822 	bl	800610c <HAL_ADC_ConfigChannel>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 80040d8:	f000 faa2 	bl	8004620 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80040dc:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <_ZL12MX_ADC1_Initv+0x15c>)
 80040de:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 80040e0:	2312      	movs	r3, #18
 80040e2:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4808      	ldr	r0, [pc, #32]	@ (800410c <_ZL12MX_ADC1_Initv+0x14c>)
 80040ea:	f002 f80f 	bl	800610c <HAL_ADC_ConfigChannel>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 80040fe:	f000 fa8f 	bl	8004620 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 8004102:	bf00      	nop
 8004104:	3728      	adds	r7, #40	@ 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000618 	.word	0x20000618
 8004110:	50040000 	.word	0x50040000
 8004114:	04300002 	.word	0x04300002
 8004118:	08600004 	.word	0x08600004
 800411c:	0c900008 	.word	0x0c900008

08004120 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004124:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 8004126:	4a23      	ldr	r2, [pc, #140]	@ (80041b4 <_ZL12MX_I2C1_Initv+0x94>)
 8004128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800412a:	4b21      	ldr	r3, [pc, #132]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 800412c:	4a22      	ldr	r2, [pc, #136]	@ (80041b8 <_ZL12MX_I2C1_Initv+0x98>)
 800412e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004130:	4b1f      	ldr	r3, [pc, #124]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004136:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 8004138:	2201      	movs	r2, #1
 800413a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800413c:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 8004144:	2200      	movs	r2, #0
 8004146:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004148:	4b19      	ldr	r3, [pc, #100]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 800414a:	2200      	movs	r2, #0
 800414c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800414e:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 8004150:	2200      	movs	r2, #0
 8004152:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004154:	4b16      	ldr	r3, [pc, #88]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 8004156:	2200      	movs	r2, #0
 8004158:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800415a:	4815      	ldr	r0, [pc, #84]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 800415c:	f003 fd12 	bl	8007b84 <HAL_I2C_Init>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf14      	ite	ne
 8004166:	2301      	movne	r3, #1
 8004168:	2300      	moveq	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8004170:	f000 fa56 	bl	8004620 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004174:	2100      	movs	r1, #0
 8004176:	480e      	ldr	r0, [pc, #56]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 8004178:	f005 ff02 	bl	8009f80 <HAL_I2CEx_ConfigAnalogFilter>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800418c:	f000 fa48 	bl	8004620 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004190:	2100      	movs	r1, #0
 8004192:	4807      	ldr	r0, [pc, #28]	@ (80041b0 <_ZL12MX_I2C1_Initv+0x90>)
 8004194:	f005 ff3f 	bl	800a016 <HAL_I2CEx_ConfigDigitalFilter>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80041a8:	f000 fa3a 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	200006c8 	.word	0x200006c8
 80041b4:	40005400 	.word	0x40005400
 80041b8:	2000090e 	.word	0x2000090e

080041bc <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 80041cc:	4b19      	ldr	r3, [pc, #100]	@ (8004234 <_ZL12MX_TIM6_Initv+0x78>)
 80041ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <_ZL12MX_TIM6_Initv+0x7c>)
 80041d0:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 80041d2:	4b18      	ldr	r3, [pc, #96]	@ (8004234 <_ZL12MX_TIM6_Initv+0x78>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d8:	4b16      	ldr	r3, [pc, #88]	@ (8004234 <_ZL12MX_TIM6_Initv+0x78>)
 80041da:	2200      	movs	r2, #0
 80041dc:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 80041de:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <_ZL12MX_TIM6_Initv+0x78>)
 80041e0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80041e4:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041e6:	4b13      	ldr	r3, [pc, #76]	@ (8004234 <_ZL12MX_TIM6_Initv+0x78>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041ec:	4811      	ldr	r0, [pc, #68]	@ (8004234 <_ZL12MX_TIM6_Initv+0x78>)
 80041ee:	f007 fb9d 	bl	800b92c <HAL_TIM_Base_Init>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 8004202:	f000 fa0d 	bl	8004620 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800420e:	1d3b      	adds	r3, r7, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4808      	ldr	r0, [pc, #32]	@ (8004234 <_ZL12MX_TIM6_Initv+0x78>)
 8004214:	f007 fe16 	bl	800be44 <HAL_TIMEx_MasterConfigSynchronization>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 8004228:	f000 f9fa 	bl	8004620 <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200009dc 	.word	0x200009dc
 8004238:	40001000 	.word	0x40001000

0800423c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004240:	4b16      	ldr	r3, [pc, #88]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 8004242:	4a17      	ldr	r2, [pc, #92]	@ (80042a0 <_ZL13MX_UART4_Initv+0x64>)
 8004244:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8004246:	4b15      	ldr	r3, [pc, #84]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 8004248:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800424c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800424e:	4b13      	ldr	r3, [pc, #76]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004254:	4b11      	ldr	r3, [pc, #68]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 8004256:	2200      	movs	r2, #0
 8004258:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800425a:	4b10      	ldr	r3, [pc, #64]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004260:	4b0e      	ldr	r3, [pc, #56]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 8004262:	220c      	movs	r2, #12
 8004264:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 800426e:	2200      	movs	r2, #0
 8004270:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 8004274:	2200      	movs	r2, #0
 8004276:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004278:	4b08      	ldr	r3, [pc, #32]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 800427a:	2200      	movs	r2, #0
 800427c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800427e:	4807      	ldr	r0, [pc, #28]	@ (800429c <_ZL13MX_UART4_Initv+0x60>)
 8004280:	f007 fe86 	bl	800bf90 <HAL_UART_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8004294:	f000 f9c4 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}
 800429c:	200007ac 	.word	0x200007ac
 80042a0:	40004c00 	.word	0x40004c00

080042a4 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80042a8:	4b16      	ldr	r3, [pc, #88]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042aa:	4a17      	ldr	r2, [pc, #92]	@ (8004308 <_ZL13MX_UART5_Initv+0x64>)
 80042ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80042ae:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042b6:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80042bc:	4b11      	ldr	r3, [pc, #68]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042be:	2200      	movs	r2, #0
 80042c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 80042c2:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80042c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042ca:	220c      	movs	r2, #12
 80042cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042da:	4b0a      	ldr	r3, [pc, #40]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042dc:	2200      	movs	r2, #0
 80042de:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042e0:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80042e6:	4807      	ldr	r0, [pc, #28]	@ (8004304 <_ZL13MX_UART5_Initv+0x60>)
 80042e8:	f007 fe52 	bl	800bf90 <HAL_UART_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bf14      	ite	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	2300      	moveq	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 80042fc:	f000 f990 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000834 	.word	0x20000834
 8004308:	40005000 	.word	0x40005000

0800430c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004312:	4b2a      	ldr	r3, [pc, #168]	@ (80043bc <_ZL11MX_DMA_Initv+0xb0>)
 8004314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004316:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <_ZL11MX_DMA_Initv+0xb0>)
 8004318:	f043 0302 	orr.w	r3, r3, #2
 800431c:	6493      	str	r3, [r2, #72]	@ 0x48
 800431e:	4b27      	ldr	r3, [pc, #156]	@ (80043bc <_ZL11MX_DMA_Initv+0xb0>)
 8004320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800432a:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <_ZL11MX_DMA_Initv+0xb0>)
 800432c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800432e:	4a23      	ldr	r2, [pc, #140]	@ (80043bc <_ZL11MX_DMA_Initv+0xb0>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6493      	str	r3, [r2, #72]	@ 0x48
 8004336:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <_ZL11MX_DMA_Initv+0xb0>)
 8004338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	200b      	movs	r0, #11
 8004348:	f002 fe0d 	bl	8006f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800434c:	200b      	movs	r0, #11
 800434e:	f002 fe26 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8004352:	2200      	movs	r2, #0
 8004354:	2100      	movs	r1, #0
 8004356:	2010      	movs	r0, #16
 8004358:	f002 fe05 	bl	8006f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800435c:	2010      	movs	r0, #16
 800435e:	f002 fe1e 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	2100      	movs	r1, #0
 8004366:	2011      	movs	r0, #17
 8004368:	f002 fdfd 	bl	8006f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800436c:	2011      	movs	r0, #17
 800436e:	f002 fe16 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8004372:	2200      	movs	r2, #0
 8004374:	2100      	movs	r1, #0
 8004376:	2038      	movs	r0, #56	@ 0x38
 8004378:	f002 fdf5 	bl	8006f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800437c:	2038      	movs	r0, #56	@ 0x38
 800437e:	f002 fe0e 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8004382:	2200      	movs	r2, #0
 8004384:	2100      	movs	r1, #0
 8004386:	2039      	movs	r0, #57	@ 0x39
 8004388:	f002 fded 	bl	8006f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800438c:	2039      	movs	r0, #57	@ 0x39
 800438e:	f002 fe06 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8004392:	2200      	movs	r2, #0
 8004394:	2100      	movs	r1, #0
 8004396:	203a      	movs	r0, #58	@ 0x3a
 8004398:	f002 fde5 	bl	8006f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800439c:	203a      	movs	r0, #58	@ 0x3a
 800439e:	f002 fdfe 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80043a2:	2200      	movs	r2, #0
 80043a4:	2100      	movs	r1, #0
 80043a6:	203c      	movs	r0, #60	@ 0x3c
 80043a8:	f002 fddd 	bl	8006f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80043ac:	203c      	movs	r0, #60	@ 0x3c
 80043ae:	f002 fdf6 	bl	8006f9e <HAL_NVIC_EnableIRQ>

}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000

080043c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	@ 0x30
 80043c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c6:	f107 031c 	add.w	r3, r7, #28
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 80043d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043da:	4a4a      	ldr	r2, [pc, #296]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 80043dc:	f043 0310 	orr.w	r3, r3, #16
 80043e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043e2:	4b48      	ldr	r3, [pc, #288]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 80043e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ee:	4b45      	ldr	r3, [pc, #276]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 80043f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f2:	4a44      	ldr	r2, [pc, #272]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 80043f4:	f043 0304 	orr.w	r3, r3, #4
 80043f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043fa:	4b42      	ldr	r3, [pc, #264]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 80043fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004406:	4b3f      	ldr	r3, [pc, #252]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 8004408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440a:	4a3e      	ldr	r2, [pc, #248]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 800440c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004412:	4b3c      	ldr	r3, [pc, #240]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 8004414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800441e:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 8004420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004422:	4a38      	ldr	r2, [pc, #224]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800442a:	4b36      	ldr	r3, [pc, #216]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004436:	4b33      	ldr	r3, [pc, #204]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	4a32      	ldr	r2, [pc, #200]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 800443c:	f043 0308 	orr.w	r3, r3, #8
 8004440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004442:	4b30      	ldr	r3, [pc, #192]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 8004444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800444e:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	4a2c      	ldr	r2, [pc, #176]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800445a:	4b2a      	ldr	r3, [pc, #168]	@ (8004504 <_ZL12MX_GPIO_Initv+0x144>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8004466:	2200      	movs	r2, #0
 8004468:	210f      	movs	r1, #15
 800446a:	4827      	ldr	r0, [pc, #156]	@ (8004508 <_ZL12MX_GPIO_Initv+0x148>)
 800446c:	f003 fb72 	bl	8007b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8004470:	2200      	movs	r2, #0
 8004472:	2174      	movs	r1, #116	@ 0x74
 8004474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004478:	f003 fb6c 	bl	8007b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800447c:	2200      	movs	r2, #0
 800447e:	f64f 7105 	movw	r1, #65285	@ 0xff05
 8004482:	4822      	ldr	r0, [pc, #136]	@ (800450c <_ZL12MX_GPIO_Initv+0x14c>)
 8004484:	f003 fb66 	bl	8007b54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8004488:	230f      	movs	r3, #15
 800448a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800448c:	2301      	movs	r3, #1
 800448e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004490:	2300      	movs	r3, #0
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004494:	2300      	movs	r3, #0
 8004496:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004498:	f107 031c 	add.w	r3, r7, #28
 800449c:	4619      	mov	r1, r3
 800449e:	481a      	ldr	r0, [pc, #104]	@ (8004508 <_ZL12MX_GPIO_Initv+0x148>)
 80044a0:	f003 f8bc 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80044a4:	2374      	movs	r3, #116	@ 0x74
 80044a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a8:	2301      	movs	r3, #1
 80044aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b4:	f107 031c 	add.w	r3, r7, #28
 80044b8:	4619      	mov	r1, r3
 80044ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044be:	f003 f8ad 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044c2:	2308      	movs	r3, #8
 80044c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c6:	2300      	movs	r3, #0
 80044c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ce:	f107 031c 	add.w	r3, r7, #28
 80044d2:	4619      	mov	r1, r3
 80044d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044d8:	f003 f8a0 	bl	800761c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80044dc:	f64f 7301 	movw	r3, #65281	@ 0xff01
 80044e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e2:	2301      	movs	r3, #1
 80044e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ea:	2300      	movs	r3, #0
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ee:	f107 031c 	add.w	r3, r7, #28
 80044f2:	4619      	mov	r1, r3
 80044f4:	4805      	ldr	r0, [pc, #20]	@ (800450c <_ZL12MX_GPIO_Initv+0x14c>)
 80044f6:	f003 f891 	bl	800761c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80044fa:	bf00      	nop
 80044fc:	3730      	adds	r7, #48	@ 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	48001000 	.word	0x48001000
 800450c:	48000c00 	.word	0x48000c00

08004510 <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a05      	ldr	r2, [pc, #20]	@ (8004534 <HAL_ADC_ConvCpltCallback+0x24>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d102      	bne.n	8004528 <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 8004522:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <HAL_ADC_ConvCpltCallback+0x28>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	50040000 	.word	0x50040000
 8004538:	2000113c 	.word	0x2000113c

0800453c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a15      	ldr	r2, [pc, #84]	@ (80045a0 <HAL_UART_RxCpltCallback+0x64>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10a      	bne.n	8004564 <HAL_UART_RxCpltCallback+0x28>
		loraIn.insertElement(rxLora[0]);
 800454e:	4b15      	ldr	r3, [pc, #84]	@ (80045a4 <HAL_UART_RxCpltCallback+0x68>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	4619      	mov	r1, r3
 8004554:	4814      	ldr	r0, [pc, #80]	@ (80045a8 <HAL_UART_RxCpltCallback+0x6c>)
 8004556:	f7fc ff3b 	bl	80013d0 <_ZN8fifoUart13insertElementEh>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 800455a:	2201      	movs	r2, #1
 800455c:	4911      	ldr	r1, [pc, #68]	@ (80045a4 <HAL_UART_RxCpltCallback+0x68>)
 800455e:	4813      	ldr	r0, [pc, #76]	@ (80045ac <HAL_UART_RxCpltCallback+0x70>)
 8004560:	f007 fe1e 	bl	800c1a0 <HAL_UART_Receive_DMA>
	}

	if(huart->Instance == UART5){
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a11      	ldr	r2, [pc, #68]	@ (80045b0 <HAL_UART_RxCpltCallback+0x74>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d114      	bne.n	8004598 <HAL_UART_RxCpltCallback+0x5c>
		gpsIn.insertElement(rxGps[0]);
 800456e:	4b11      	ldr	r3, [pc, #68]	@ (80045b4 <HAL_UART_RxCpltCallback+0x78>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	4619      	mov	r1, r3
 8004574:	4810      	ldr	r0, [pc, #64]	@ (80045b8 <HAL_UART_RxCpltCallback+0x7c>)
 8004576:	f7fc ff2b 	bl	80013d0 <_ZN8fifoUart13insertElementEh>
		gpsIn.insertElement(rxGps[1]);
 800457a:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <HAL_UART_RxCpltCallback+0x78>)
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	4619      	mov	r1, r3
 8004580:	480d      	ldr	r0, [pc, #52]	@ (80045b8 <HAL_UART_RxCpltCallback+0x7c>)
 8004582:	f7fc ff25 	bl	80013d0 <_ZN8fifoUart13insertElementEh>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxGps, sizeof(rxGps));
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart5, rxGps, sizeof(rxGps));
 8004586:	2202      	movs	r2, #2
 8004588:	490a      	ldr	r1, [pc, #40]	@ (80045b4 <HAL_UART_RxCpltCallback+0x78>)
 800458a:	480c      	ldr	r0, [pc, #48]	@ (80045bc <HAL_UART_RxCpltCallback+0x80>)
 800458c:	f007 fe08 	bl	800c1a0 <HAL_UART_Receive_DMA>
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8004590:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <HAL_UART_RxCpltCallback+0x80>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2210      	movs	r2, #16
 8004596:	621a      	str	r2, [r3, #32]
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
	}
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40004c00 	.word	0x40004c00
 80045a4:	20000ae4 	.word	0x20000ae4
 80045a8:	20000ae8 	.word	0x20000ae8
 80045ac:	200007ac 	.word	0x200007ac
 80045b0:	40005000 	.word	0x40005000
 80045b4:	20000ad4 	.word	0x20000ad4
 80045b8:	20000a94 	.word	0x20000a94
 80045bc:	20000834 	.word	0x20000834

080045c0 <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a05      	ldr	r2, [pc, #20]	@ (80045e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d102      	bne.n	80045d8 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 80045d2:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
	}
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40001000 	.word	0x40001000
 80045e8:	2000112c 	.word	0x2000112c

080045ec <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20001097 	.word	0x20001097

0800460c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004624:	b672      	cpsid	i
}
 8004626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004628:	bf00      	nop
 800462a:	e7fd      	b.n	8004628 <Error_Handler+0x8>

0800462c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d115      	bne.n	8004668 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004642:	4293      	cmp	r3, r2
 8004644:	d110      	bne.n	8004668 <_Z41__static_initialization_and_destruction_0ii+0x3c>
gpsInput gpsInput;		// Instancia de gpsInput
 8004646:	480a      	ldr	r0, [pc, #40]	@ (8004670 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004648:	f7fc ff4a 	bl	80014e0 <_ZN8gpsInputC1Ev>
fifoUart	gpsIn;		//
 800464c:	4809      	ldr	r0, [pc, #36]	@ (8004674 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800464e:	f7fc feaf 	bl	80013b0 <_ZN8fifoUartC1Ev>
fifoUart loraIn;			// FIFO que recibe los datos
 8004652:	4809      	ldr	r0, [pc, #36]	@ (8004678 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004654:	f7fc feac 	bl	80013b0 <_ZN8fifoUartC1Ev>
wdTimeout loraTimeWd(4000);
 8004658:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800465c:	4807      	ldr	r0, [pc, #28]	@ (800467c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800465e:	f7ff f857 	bl	8003710 <_ZN9wdTimeoutC1El>
fifoCommands fifoContent;
 8004662:	4807      	ldr	r0, [pc, #28]	@ (8004680 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004664:	f7ff fb04 	bl	8003c70 <_ZN12fifoCommandsC1Ev>
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000a3c 	.word	0x20000a3c
 8004674:	20000a94 	.word	0x20000a94
 8004678:	20000ae8 	.word	0x20000ae8
 800467c:	2000107c 	.word	0x2000107c
 8004680:	20001098 	.word	0x20001098

08004684 <_GLOBAL__sub_I_hadc1>:
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
 8004688:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800468c:	2001      	movs	r0, #1
 800468e:	f7ff ffcd 	bl	800462c <_Z41__static_initialization_and_destruction_0ii>
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800469a:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <HAL_MspInit+0x44>)
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	4a0e      	ldr	r2, [pc, #56]	@ (80046d8 <HAL_MspInit+0x44>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80046a6:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <HAL_MspInit+0x44>)
 80046a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b09      	ldr	r3, [pc, #36]	@ (80046d8 <HAL_MspInit+0x44>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b6:	4a08      	ldr	r2, [pc, #32]	@ (80046d8 <HAL_MspInit+0x44>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_MspInit+0x44>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000

080046dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b0ac      	sub	sp, #176	@ 0xb0
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046f4:	f107 0310 	add.w	r3, r7, #16
 80046f8:	228c      	movs	r2, #140	@ 0x8c
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f008 ffe6 	bl	800d6ce <memset>
  if(hadc->Instance==ADC1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a40      	ldr	r2, [pc, #256]	@ (8004808 <HAL_ADC_MspInit+0x12c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d179      	bne.n	8004800 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800470c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004710:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004712:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800471a:	2303      	movs	r3, #3
 800471c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004722:	2308      	movs	r3, #8
 8004724:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004726:	2302      	movs	r3, #2
 8004728:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800472a:	2302      	movs	r3, #2
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800472e:	2302      	movs	r3, #2
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004732:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004738:	f107 0310 	add.w	r3, r7, #16
 800473c:	4618      	mov	r0, r3
 800473e:	f006 fc2b 	bl	800af98 <HAL_RCCEx_PeriphCLKConfig>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8004748:	f7ff ff6a 	bl	8004620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800474c:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <HAL_ADC_MspInit+0x130>)
 800474e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004750:	4a2e      	ldr	r2, [pc, #184]	@ (800480c <HAL_ADC_MspInit+0x130>)
 8004752:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004758:	4b2c      	ldr	r3, [pc, #176]	@ (800480c <HAL_ADC_MspInit+0x130>)
 800475a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004764:	4b29      	ldr	r3, [pc, #164]	@ (800480c <HAL_ADC_MspInit+0x130>)
 8004766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004768:	4a28      	ldr	r2, [pc, #160]	@ (800480c <HAL_ADC_MspInit+0x130>)
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004770:	4b26      	ldr	r3, [pc, #152]	@ (800480c <HAL_ADC_MspInit+0x130>)
 8004772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800477c:	2307      	movs	r3, #7
 800477e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004782:	2303      	movs	r3, #3
 8004784:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	2300      	movs	r3, #0
 800478a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004792:	4619      	mov	r1, r3
 8004794:	481e      	ldr	r0, [pc, #120]	@ (8004810 <HAL_ADC_MspInit+0x134>)
 8004796:	f002 ff41 	bl	800761c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800479a:	4b1e      	ldr	r3, [pc, #120]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 800479c:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <HAL_ADC_MspInit+0x13c>)
 800479e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80047a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ac:	4b19      	ldr	r3, [pc, #100]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047b2:	4b18      	ldr	r3, [pc, #96]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047b4:	2280      	movs	r2, #128	@ 0x80
 80047b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047b8:	4b16      	ldr	r3, [pc, #88]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047c0:	4b14      	ldr	r3, [pc, #80]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047c8:	4b12      	ldr	r3, [pc, #72]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047ca:	2220      	movs	r2, #32
 80047cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047ce:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047d4:	480f      	ldr	r0, [pc, #60]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047d6:	f002 fc0b 	bl	8006ff0 <HAL_DMA_Init>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80047e0:	f7ff ff1e 	bl	8004620 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80047ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <HAL_ADC_MspInit+0x138>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80047f0:	2200      	movs	r2, #0
 80047f2:	2100      	movs	r1, #0
 80047f4:	2012      	movs	r0, #18
 80047f6:	f002 fbb6 	bl	8006f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80047fa:	2012      	movs	r0, #18
 80047fc:	f002 fbcf 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004800:	bf00      	nop
 8004802:	37b0      	adds	r7, #176	@ 0xb0
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	50040000 	.word	0x50040000
 800480c:	40021000 	.word	0x40021000
 8004810:	48000800 	.word	0x48000800
 8004814:	20000680 	.word	0x20000680
 8004818:	40020008 	.word	0x40020008

0800481c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b0ac      	sub	sp, #176	@ 0xb0
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004834:	f107 0310 	add.w	r3, r7, #16
 8004838:	228c      	movs	r2, #140	@ 0x8c
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f008 ff46 	bl	800d6ce <memset>
  if(hi2c->Instance==I2C1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a52      	ldr	r2, [pc, #328]	@ (8004990 <HAL_I2C_MspInit+0x174>)
 8004848:	4293      	cmp	r3, r2
 800484a:	f040 809d 	bne.w	8004988 <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800484e:	2340      	movs	r3, #64	@ 0x40
 8004850:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004852:	2300      	movs	r3, #0
 8004854:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004856:	f107 0310 	add.w	r3, r7, #16
 800485a:	4618      	mov	r0, r3
 800485c:	f006 fb9c 	bl	800af98 <HAL_RCCEx_PeriphCLKConfig>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004866:	f7ff fedb 	bl	8004620 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800486a:	4b4a      	ldr	r3, [pc, #296]	@ (8004994 <HAL_I2C_MspInit+0x178>)
 800486c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486e:	4a49      	ldr	r2, [pc, #292]	@ (8004994 <HAL_I2C_MspInit+0x178>)
 8004870:	f043 0302 	orr.w	r3, r3, #2
 8004874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004876:	4b47      	ldr	r3, [pc, #284]	@ (8004994 <HAL_I2C_MspInit+0x178>)
 8004878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004882:	23c0      	movs	r3, #192	@ 0xc0
 8004884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004888:	2312      	movs	r3, #18
 800488a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004894:	2303      	movs	r3, #3
 8004896:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800489a:	2304      	movs	r3, #4
 800489c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80048a4:	4619      	mov	r1, r3
 80048a6:	483c      	ldr	r0, [pc, #240]	@ (8004998 <HAL_I2C_MspInit+0x17c>)
 80048a8:	f002 feb8 	bl	800761c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048ac:	4b39      	ldr	r3, [pc, #228]	@ (8004994 <HAL_I2C_MspInit+0x178>)
 80048ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b0:	4a38      	ldr	r2, [pc, #224]	@ (8004994 <HAL_I2C_MspInit+0x178>)
 80048b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048b8:	4b36      	ldr	r3, [pc, #216]	@ (8004994 <HAL_I2C_MspInit+0x178>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80048c4:	4b35      	ldr	r3, [pc, #212]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048c6:	4a36      	ldr	r2, [pc, #216]	@ (80049a0 <HAL_I2C_MspInit+0x184>)
 80048c8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80048ca:	4b34      	ldr	r3, [pc, #208]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048cc:	2203      	movs	r2, #3
 80048ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d0:	4b32      	ldr	r3, [pc, #200]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d6:	4b31      	ldr	r3, [pc, #196]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048d8:	2200      	movs	r2, #0
 80048da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048dc:	4b2f      	ldr	r3, [pc, #188]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048de:	2280      	movs	r2, #128	@ 0x80
 80048e0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048e2:	4b2e      	ldr	r3, [pc, #184]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048e8:	4b2c      	ldr	r3, [pc, #176]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80048ee:	4b2b      	ldr	r3, [pc, #172]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048f4:	4b29      	ldr	r3, [pc, #164]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80048fa:	4828      	ldr	r0, [pc, #160]	@ (800499c <HAL_I2C_MspInit+0x180>)
 80048fc:	f002 fb78 	bl	8006ff0 <HAL_DMA_Init>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8004906:	f7ff fe8b 	bl	8004620 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a23      	ldr	r2, [pc, #140]	@ (800499c <HAL_I2C_MspInit+0x180>)
 800490e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004910:	4a22      	ldr	r2, [pc, #136]	@ (800499c <HAL_I2C_MspInit+0x180>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 8004918:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <HAL_I2C_MspInit+0x18c>)
 800491a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 800491c:	4b21      	ldr	r3, [pc, #132]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 800491e:	2203      	movs	r2, #3
 8004920:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004922:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 8004924:	2210      	movs	r2, #16
 8004926:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004928:	4b1e      	ldr	r3, [pc, #120]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 800492a:	2200      	movs	r2, #0
 800492c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800492e:	4b1d      	ldr	r3, [pc, #116]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 8004930:	2280      	movs	r2, #128	@ 0x80
 8004932:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004934:	4b1b      	ldr	r3, [pc, #108]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 8004936:	2200      	movs	r2, #0
 8004938:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800493a:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004940:	4b18      	ldr	r3, [pc, #96]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 8004942:	2200      	movs	r2, #0
 8004944:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004946:	4b17      	ldr	r3, [pc, #92]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 8004948:	2200      	movs	r2, #0
 800494a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800494c:	4815      	ldr	r0, [pc, #84]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 800494e:	f002 fb4f 	bl	8006ff0 <HAL_DMA_Init>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 8004958:	f7ff fe62 	bl	8004620 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a11      	ldr	r2, [pc, #68]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 8004960:	639a      	str	r2, [r3, #56]	@ 0x38
 8004962:	4a10      	ldr	r2, [pc, #64]	@ (80049a4 <HAL_I2C_MspInit+0x188>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004968:	2200      	movs	r2, #0
 800496a:	2100      	movs	r1, #0
 800496c:	201f      	movs	r0, #31
 800496e:	f002 fafa 	bl	8006f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004972:	201f      	movs	r0, #31
 8004974:	f002 fb13 	bl	8006f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004978:	2200      	movs	r2, #0
 800497a:	2100      	movs	r1, #0
 800497c:	2020      	movs	r0, #32
 800497e:	f002 faf2 	bl	8006f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004982:	2020      	movs	r0, #32
 8004984:	f002 fb0b 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004988:	bf00      	nop
 800498a:	37b0      	adds	r7, #176	@ 0xb0
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40005400 	.word	0x40005400
 8004994:	40021000 	.word	0x40021000
 8004998:	48000400 	.word	0x48000400
 800499c:	2000071c 	.word	0x2000071c
 80049a0:	40020080 	.word	0x40020080
 80049a4:	20000764 	.word	0x20000764
 80049a8:	4002006c 	.word	0x4002006c

080049ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0d      	ldr	r2, [pc, #52]	@ (80049f0 <HAL_TIM_Base_MspInit+0x44>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80049be:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <HAL_TIM_Base_MspInit+0x48>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	4a0c      	ldr	r2, [pc, #48]	@ (80049f4 <HAL_TIM_Base_MspInit+0x48>)
 80049c4:	f043 0310 	orr.w	r3, r3, #16
 80049c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ca:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <HAL_TIM_Base_MspInit+0x48>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	2036      	movs	r0, #54	@ 0x36
 80049dc:	f002 fac3 	bl	8006f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049e0:	2036      	movs	r0, #54	@ 0x36
 80049e2:	f002 fadc 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40001000 	.word	0x40001000
 80049f4:	40021000 	.word	0x40021000

080049f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b0b0      	sub	sp, #192	@ 0xc0
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a00:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a10:	f107 0320 	add.w	r3, r7, #32
 8004a14:	228c      	movs	r2, #140	@ 0x8c
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f008 fe58 	bl	800d6ce <memset>
  if(huart->Instance==UART4)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a4d      	ldr	r2, [pc, #308]	@ (8004b58 <HAL_UART_MspInit+0x160>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	f040 80a3 	bne.w	8004b70 <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a32:	f107 0320 	add.w	r3, r7, #32
 8004a36:	4618      	mov	r0, r3
 8004a38:	f006 faae 	bl	800af98 <HAL_RCCEx_PeriphCLKConfig>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a42:	f7ff fded 	bl	8004620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a46:	4b45      	ldr	r3, [pc, #276]	@ (8004b5c <HAL_UART_MspInit+0x164>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4a:	4a44      	ldr	r2, [pc, #272]	@ (8004b5c <HAL_UART_MspInit+0x164>)
 8004a4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a52:	4b42      	ldr	r3, [pc, #264]	@ (8004b5c <HAL_UART_MspInit+0x164>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b5c <HAL_UART_MspInit+0x164>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a62:	4a3e      	ldr	r2, [pc, #248]	@ (8004b5c <HAL_UART_MspInit+0x164>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b5c <HAL_UART_MspInit+0x164>)
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a76:	2303      	movs	r3, #3
 8004a78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004a8e:	2308      	movs	r3, #8
 8004a90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a9e:	f002 fdbd 	bl	800761c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8004aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8004b64 <HAL_UART_MspInit+0x16c>)
 8004aa6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8004aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004aaa:	2202      	movs	r2, #2
 8004aac:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aae:	4b2c      	ldr	r3, [pc, #176]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004aba:	4b29      	ldr	r3, [pc, #164]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004abc:	2280      	movs	r2, #128	@ 0x80
 8004abe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ac0:	4b27      	ldr	r3, [pc, #156]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ac6:	4b26      	ldr	r3, [pc, #152]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004acc:	4b24      	ldr	r3, [pc, #144]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ad2:	4b23      	ldr	r3, [pc, #140]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004ad8:	4821      	ldr	r0, [pc, #132]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004ada:	f002 fa89 	bl	8006ff0 <HAL_DMA_Init>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8004ae4:	f7ff fd9c 	bl	8004620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1d      	ldr	r2, [pc, #116]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004aec:	675a      	str	r2, [r3, #116]	@ 0x74
 8004aee:	4a1c      	ldr	r2, [pc, #112]	@ (8004b60 <HAL_UART_MspInit+0x168>)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8004af4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004af6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b6c <HAL_UART_MspInit+0x174>)
 8004af8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8004afa:	4b1b      	ldr	r3, [pc, #108]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004afc:	2202      	movs	r2, #2
 8004afe:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b02:	2210      	movs	r2, #16
 8004b04:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b06:	4b18      	ldr	r3, [pc, #96]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b0c:	4b16      	ldr	r3, [pc, #88]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b0e:	2280      	movs	r2, #128	@ 0x80
 8004b10:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b18:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b24:	4b10      	ldr	r3, [pc, #64]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004b2a:	480f      	ldr	r0, [pc, #60]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b2c:	f002 fa60 	bl	8006ff0 <HAL_DMA_Init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8004b36:	f7ff fd73 	bl	8004620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b3e:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b40:	4a09      	ldr	r2, [pc, #36]	@ (8004b68 <HAL_UART_MspInit+0x170>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004b46:	2200      	movs	r2, #0
 8004b48:	2100      	movs	r1, #0
 8004b4a:	2034      	movs	r0, #52	@ 0x34
 8004b4c:	f002 fa0b 	bl	8006f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b50:	2034      	movs	r0, #52	@ 0x34
 8004b52:	f002 fa24 	bl	8006f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8004b56:	e0c9      	b.n	8004cec <HAL_UART_MspInit+0x2f4>
 8004b58:	40004c00 	.word	0x40004c00
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	200008bc 	.word	0x200008bc
 8004b64:	40020458 	.word	0x40020458
 8004b68:	20000904 	.word	0x20000904
 8004b6c:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a5f      	ldr	r2, [pc, #380]	@ (8004cf4 <HAL_UART_MspInit+0x2fc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f040 80b8 	bne.w	8004cec <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8004b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b84:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b86:	f107 0320 	add.w	r3, r7, #32
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f006 fa04 	bl	800af98 <HAL_RCCEx_PeriphCLKConfig>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8004b96:	f7ff fd43 	bl	8004620 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004b9a:	4b57      	ldr	r3, [pc, #348]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	4a56      	ldr	r2, [pc, #344]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004ba0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ba6:	4b54      	ldr	r3, [pc, #336]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bb2:	4b51      	ldr	r3, [pc, #324]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb6:	4a50      	ldr	r2, [pc, #320]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004bb8:	f043 0304 	orr.w	r3, r3, #4
 8004bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bca:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bce:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004bd0:	f043 0308 	orr.w	r3, r3, #8
 8004bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bd6:	4b48      	ldr	r3, [pc, #288]	@ (8004cf8 <HAL_UART_MspInit+0x300>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004be2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bea:	2302      	movs	r3, #2
 8004bec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c02:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004c06:	4619      	mov	r1, r3
 8004c08:	483c      	ldr	r0, [pc, #240]	@ (8004cfc <HAL_UART_MspInit+0x304>)
 8004c0a:	f002 fd07 	bl	800761c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c0e:	2304      	movs	r3, #4
 8004c10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c14:	2302      	movs	r3, #2
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c20:	2303      	movs	r3, #3
 8004c22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004c26:	2308      	movs	r3, #8
 8004c28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c2c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004c30:	4619      	mov	r1, r3
 8004c32:	4833      	ldr	r0, [pc, #204]	@ (8004d00 <HAL_UART_MspInit+0x308>)
 8004c34:	f002 fcf2 	bl	800761c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8004c38:	4b32      	ldr	r3, [pc, #200]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c3a:	4a33      	ldr	r2, [pc, #204]	@ (8004d08 <HAL_UART_MspInit+0x310>)
 8004c3c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 8004c3e:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c40:	2202      	movs	r2, #2
 8004c42:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c44:	4b2f      	ldr	r3, [pc, #188]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c50:	4b2c      	ldr	r3, [pc, #176]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c52:	2280      	movs	r2, #128	@ 0x80
 8004c54:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c56:	4b2b      	ldr	r3, [pc, #172]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c5c:	4b29      	ldr	r3, [pc, #164]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004c62:	4b28      	ldr	r3, [pc, #160]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c68:	4b26      	ldr	r3, [pc, #152]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004c6e:	4825      	ldr	r0, [pc, #148]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c70:	f002 f9be 	bl	8006ff0 <HAL_DMA_Init>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_UART_MspInit+0x286>
      Error_Handler();
 8004c7a:	f7ff fcd1 	bl	8004620 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a20      	ldr	r2, [pc, #128]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c82:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c84:	4a1f      	ldr	r2, [pc, #124]	@ (8004d04 <HAL_UART_MspInit+0x30c>)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 8004c8a:	4b20      	ldr	r3, [pc, #128]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004c8c:	4a20      	ldr	r2, [pc, #128]	@ (8004d10 <HAL_UART_MspInit+0x318>)
 8004c8e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 8004c90:	4b1e      	ldr	r3, [pc, #120]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004c92:	2202      	movs	r2, #2
 8004c94:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c96:	4b1d      	ldr	r3, [pc, #116]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004c98:	2210      	movs	r2, #16
 8004c9a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004ca4:	2280      	movs	r2, #128	@ 0x80
 8004ca6:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ca8:	4b18      	ldr	r3, [pc, #96]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cae:	4b17      	ldr	r3, [pc, #92]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004cb4:	4b15      	ldr	r3, [pc, #84]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cba:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004cc0:	4812      	ldr	r0, [pc, #72]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004cc2:	f002 f995 	bl	8006ff0 <HAL_DMA_Init>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8004ccc:	f7ff fca8 	bl	8004620 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004cd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004d0c <HAL_UART_MspInit+0x314>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2035      	movs	r0, #53	@ 0x35
 8004ce2:	f002 f940 	bl	8006f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004ce6:	2035      	movs	r0, #53	@ 0x35
 8004ce8:	f002 f959 	bl	8006f9e <HAL_NVIC_EnableIRQ>
}
 8004cec:	bf00      	nop
 8004cee:	37c0      	adds	r7, #192	@ 0xc0
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40005000 	.word	0x40005000
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	48000800 	.word	0x48000800
 8004d00:	48000c00 	.word	0x48000c00
 8004d04:	2000094c 	.word	0x2000094c
 8004d08:	4002041c 	.word	0x4002041c
 8004d0c:	20000994 	.word	0x20000994
 8004d10:	40020408 	.word	0x40020408

08004d14 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a20      	ldr	r2, [pc, #128]	@ (8004da4 <HAL_UART_MspDeInit+0x90>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d118      	bne.n	8004d58 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004d26:	4b20      	ldr	r3, [pc, #128]	@ (8004da8 <HAL_UART_MspDeInit+0x94>)
 8004d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004da8 <HAL_UART_MspDeInit+0x94>)
 8004d2c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004d30:	6593      	str	r3, [r2, #88]	@ 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8004d32:	2103      	movs	r1, #3
 8004d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d38:	f002 fe02 	bl	8007940 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d40:	4618      	mov	r0, r3
 8004d42:	f002 fa0d 	bl	8007160 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f002 fa08 	bl	8007160 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004d50:	2034      	movs	r0, #52	@ 0x34
 8004d52:	f002 f932 	bl	8006fba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }

}
 8004d56:	e020      	b.n	8004d9a <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==UART5)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a13      	ldr	r2, [pc, #76]	@ (8004dac <HAL_UART_MspDeInit+0x98>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d11b      	bne.n	8004d9a <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_UART5_CLK_DISABLE();
 8004d62:	4b11      	ldr	r3, [pc, #68]	@ (8004da8 <HAL_UART_MspDeInit+0x94>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d66:	4a10      	ldr	r2, [pc, #64]	@ (8004da8 <HAL_UART_MspDeInit+0x94>)
 8004d68:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d6c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8004d6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d72:	480f      	ldr	r0, [pc, #60]	@ (8004db0 <HAL_UART_MspDeInit+0x9c>)
 8004d74:	f002 fde4 	bl	8007940 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8004d78:	2104      	movs	r1, #4
 8004d7a:	480e      	ldr	r0, [pc, #56]	@ (8004db4 <HAL_UART_MspDeInit+0xa0>)
 8004d7c:	f002 fde0 	bl	8007940 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d84:	4618      	mov	r0, r3
 8004d86:	f002 f9eb 	bl	8007160 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f002 f9e6 	bl	8007160 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8004d94:	2035      	movs	r0, #53	@ 0x35
 8004d96:	f002 f910 	bl	8006fba <HAL_NVIC_DisableIRQ>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40004c00 	.word	0x40004c00
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40005000 	.word	0x40005000
 8004db0:	48000800 	.word	0x48000800
 8004db4:	48000c00 	.word	0x48000c00

08004db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <NMI_Handler+0x4>

08004dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <HardFault_Handler+0x4>

08004dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dcc:	bf00      	nop
 8004dce:	e7fd      	b.n	8004dcc <MemManage_Handler+0x4>

08004dd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <BusFault_Handler+0x4>

08004dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <UsageFault_Handler+0x4>

08004de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e0e:	f000 faeb 	bl	80053e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e1c:	4802      	ldr	r0, [pc, #8]	@ (8004e28 <DMA1_Channel1_IRQHandler+0x10>)
 8004e1e:	f002 fb10 	bl	8007442 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000680 	.word	0x20000680

08004e2c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004e30:	4802      	ldr	r0, [pc, #8]	@ (8004e3c <DMA1_Channel6_IRQHandler+0x10>)
 8004e32:	f002 fb06 	bl	8007442 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000764 	.word	0x20000764

08004e40 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004e44:	4802      	ldr	r0, [pc, #8]	@ (8004e50 <DMA1_Channel7_IRQHandler+0x10>)
 8004e46:	f002 fafc 	bl	8007442 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	2000071c 	.word	0x2000071c

08004e54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e58:	4802      	ldr	r0, [pc, #8]	@ (8004e64 <ADC1_2_IRQHandler+0x10>)
 8004e5a:	f000 ff1f 	bl	8005c9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000618 	.word	0x20000618

08004e68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e6c:	4802      	ldr	r0, [pc, #8]	@ (8004e78 <I2C1_EV_IRQHandler+0x10>)
 8004e6e:	f003 fa43 	bl	80082f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200006c8 	.word	0x200006c8

08004e7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004e80:	4802      	ldr	r0, [pc, #8]	@ (8004e8c <I2C1_ER_IRQHandler+0x10>)
 8004e82:	f003 fa53 	bl	800832c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200006c8 	.word	0x200006c8

08004e90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004e94:	4802      	ldr	r0, [pc, #8]	@ (8004ea0 <UART4_IRQHandler+0x10>)
 8004e96:	f007 f9cf 	bl	800c238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200007ac 	.word	0x200007ac

08004ea4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004ea8:	4802      	ldr	r0, [pc, #8]	@ (8004eb4 <UART5_IRQHandler+0x10>)
 8004eaa:	f007 f9c5 	bl	800c238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000834 	.word	0x20000834

08004eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ebc:	4802      	ldr	r0, [pc, #8]	@ (8004ec8 <TIM6_DAC_IRQHandler+0x10>)
 8004ebe:	f006 fdfd 	bl	800babc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	200009dc 	.word	0x200009dc

08004ecc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004ed0:	4802      	ldr	r0, [pc, #8]	@ (8004edc <DMA2_Channel1_IRQHandler+0x10>)
 8004ed2:	f002 fab6 	bl	8007442 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000994 	.word	0x20000994

08004ee0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004ee4:	4802      	ldr	r0, [pc, #8]	@ (8004ef0 <DMA2_Channel2_IRQHandler+0x10>)
 8004ee6:	f002 faac 	bl	8007442 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	2000094c 	.word	0x2000094c

08004ef4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004ef8:	4802      	ldr	r0, [pc, #8]	@ (8004f04 <DMA2_Channel3_IRQHandler+0x10>)
 8004efa:	f002 faa2 	bl	8007442 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000904 	.word	0x20000904

08004f08 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004f0c:	4802      	ldr	r0, [pc, #8]	@ (8004f18 <DMA2_Channel5_IRQHandler+0x10>)
 8004f0e:	f002 fa98 	bl	8007442 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	200008bc 	.word	0x200008bc

08004f1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f20:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <SystemInit+0x20>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	4a05      	ldr	r2, [pc, #20]	@ (8004f3c <SystemInit+0x20>)
 8004f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <_Z8tcpInputv>:
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
bool flagSetSys;							// Indica que se debe enviar system

/*****	INPUT	*****/

void tcpInput(){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
	tcpData();
 8004f44:	f000 f840 	bl	8004fc8 <_Z7tcpDatav>
	tcpSystem();
 8004f48:	f000 f806 	bl	8004f58 <_Z9tcpSystemv>
	tcpGps();
 8004f4c:	f000 f89a 	bl	8005084 <_Z6tcpGpsv>
	tcpInLora();
 8004f50:	f000 f872 	bl	8005038 <_Z9tcpInLorav>
}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <_Z9tcpSystemv>:
 *
 *	OUTPUT	:	flagSetSys | Indica que se debe enviar un paquete con datos del sistema
 *
 */

void tcpSystem(){
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
	switch( stateTcpSys ){
 8004f5c:	4b16      	ldr	r3, [pc, #88]	@ (8004fb8 <_Z9tcpSystemv+0x60>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <_Z9tcpSystemv+0x12>
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d013      	beq.n	8004f90 <_Z9tcpSystemv+0x38>
 8004f68:	e01c      	b.n	8004fa4 <_Z9tcpSystemv+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpSys++;						// Suma 1 al contador
 8004f6a:	4b14      	ldr	r3, [pc, #80]	@ (8004fbc <_Z9tcpSystemv+0x64>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	4a12      	ldr	r2, [pc, #72]	@ (8004fbc <_Z9tcpSystemv+0x64>)
 8004f72:	6013      	str	r3, [r2, #0]

		if ( countTcpSys >= limitTcpSys ){	// Si pasa el limite
 8004f74:	4b11      	ldr	r3, [pc, #68]	@ (8004fbc <_Z9tcpSystemv+0x64>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4b11      	ldr	r3, [pc, #68]	@ (8004fc0 <_Z9tcpSystemv+0x68>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d303      	bcc.n	8004f88 <_Z9tcpSystemv+0x30>
			stateTcpSys	= 1;				// Pasa a S1
 8004f80:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <_Z9tcpSystemv+0x60>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateTcpSys	= 0;				// Espera en S0
		}
		break;
 8004f86:	e011      	b.n	8004fac <_Z9tcpSystemv+0x54>
			stateTcpSys	= 0;				// Espera en S0
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <_Z9tcpSystemv+0x60>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
		break;
 8004f8e:	e00d      	b.n	8004fac <_Z9tcpSystemv+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetSys	= 1;	// Indica que se debe enviar datos
 8004f90:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <_Z9tcpSystemv+0x6c>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
		countTcpSys	= 0;	// Reinicia contador
 8004f96:	4b09      	ldr	r3, [pc, #36]	@ (8004fbc <_Z9tcpSystemv+0x64>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
		stateTcpSys	= 0;	// Vuelve a S0
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <_Z9tcpSystemv+0x60>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
		break;
 8004fa2:	e003      	b.n	8004fac <_Z9tcpSystemv+0x54>

	default:
		stateTcpSys	= 0;
 8004fa4:	4b04      	ldr	r3, [pc, #16]	@ (8004fb8 <_Z9tcpSystemv+0x60>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
		break;
 8004faa:	bf00      	nop
	}
}
 8004fac:	bf00      	nop
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20001155 	.word	0x20001155
 8004fbc:	20001158 	.word	0x20001158
 8004fc0:	2000115c 	.word	0x2000115c
 8004fc4:	20001160 	.word	0x20001160

08004fc8 <_Z7tcpDatav>:
 *
 *	OUTPUT	:	flagSetData | Indica que se debe enviar
 *
 */

void tcpData(){
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
	switch( stateTcpData ){
 8004fcc:	4b16      	ldr	r3, [pc, #88]	@ (8005028 <_Z7tcpDatav+0x60>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <_Z7tcpDatav+0x12>
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d013      	beq.n	8005000 <_Z7tcpDatav+0x38>
 8004fd8:	e01c      	b.n	8005014 <_Z7tcpDatav+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpData++;							// Suma 1 al contador
 8004fda:	4b14      	ldr	r3, [pc, #80]	@ (800502c <_Z7tcpDatav+0x64>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4a12      	ldr	r2, [pc, #72]	@ (800502c <_Z7tcpDatav+0x64>)
 8004fe2:	6013      	str	r3, [r2, #0]

		if ( countTcpData >= limitTcpData ){	// Si pasa el limite
 8004fe4:	4b11      	ldr	r3, [pc, #68]	@ (800502c <_Z7tcpDatav+0x64>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <_Z7tcpDatav+0x68>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d303      	bcc.n	8004ff8 <_Z7tcpDatav+0x30>
			stateTcpData	= 1;				// Pasa a S1
 8004ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8005028 <_Z7tcpDatav+0x60>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateTcpData	= 0;				// Espera en S0
		}
		break;
 8004ff6:	e011      	b.n	800501c <_Z7tcpDatav+0x54>
			stateTcpData	= 0;				// Espera en S0
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8005028 <_Z7tcpDatav+0x60>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
		break;
 8004ffe:	e00d      	b.n	800501c <_Z7tcpDatav+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetData		= 1;	// Indica que se debe enviar datos
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <_Z7tcpDatav+0x6c>)
 8005002:	2201      	movs	r2, #1
 8005004:	701a      	strb	r2, [r3, #0]
		countTcpData	= 0;	// Reinicia contador
 8005006:	4b09      	ldr	r3, [pc, #36]	@ (800502c <_Z7tcpDatav+0x64>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

		stateTcpData	= 0;	// Vuelve a S0
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <_Z7tcpDatav+0x60>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
		break;
 8005012:	e003      	b.n	800501c <_Z7tcpDatav+0x54>

	default:
		stateTcpData	= 0;
 8005014:	4b04      	ldr	r3, [pc, #16]	@ (8005028 <_Z7tcpDatav+0x60>)
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
		break;
 800501a:	bf00      	nop
	}
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20001149 	.word	0x20001149
 800502c:	2000114c 	.word	0x2000114c
 8005030:	20001150 	.word	0x20001150
 8005034:	20001154 	.word	0x20001154

08005038 <_Z9tcpInLorav>:
 *
 *	OUTPUT	:	loraDecision.response()
 *				loraDecision.disable()
 */

void tcpInLora(){
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
	if ( loraCheck.check() ){					// Si hay respuesta nueva
 800503c:	480d      	ldr	r0, [pc, #52]	@ (8005074 <_Z9tcpInLorav+0x3c>)
 800503e:	f7fe fc3a 	bl	80038b6 <_ZN9loraCheck5checkEv>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00c      	beq.n	8005062 <_Z9tcpInLorav+0x2a>
		busTcpLora	= loraCheck.response();		// Copia el codigo de respuesta
 8005048:	480a      	ldr	r0, [pc, #40]	@ (8005074 <_Z9tcpInLorav+0x3c>)
 800504a:	f7fe fc45 	bl	80038d8 <_ZN9loraCheck8responseEv>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <_Z9tcpInLorav+0x40>)
 8005054:	701a      	strb	r2, [r3, #0]
		loraDecision.response( busTcpLora );	// Inserta en lora Decision
 8005056:	4b08      	ldr	r3, [pc, #32]	@ (8005078 <_Z9tcpInLorav+0x40>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	4619      	mov	r1, r3
 800505c:	4807      	ldr	r0, [pc, #28]	@ (800507c <_Z9tcpInLorav+0x44>)
 800505e:	f7fe fd46 	bl	8003aee <_ZN12loraDecision8responseEh>
			busTcpLora	= 6;
		}*/

	}

	if ( flagWdLora ){			// Si hay WD
 8005062:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <_Z9tcpInLorav+0x48>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <_Z9tcpInLorav+0x38>
		loraDecision.disable();	// Deshabilita tcp y app
 800506a:	4804      	ldr	r0, [pc, #16]	@ (800507c <_Z9tcpInLorav+0x44>)
 800506c:	f7fe fdcf 	bl	8003c0e <_ZN12loraDecision7disableEv>
	}
}
 8005070:	bf00      	nop
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000b68 	.word	0x20000b68
 8005078:	20001148 	.word	0x20001148
 800507c:	20000b7c 	.word	0x20000b7c
 8005080:	20000530 	.word	0x20000530

08005084 <_Z6tcpGpsv>:
 *
 *	OUTPUT	:	flagGpsSaved
 *				startGps
 */

void tcpGps(){
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
	switch ( stateGpsTcp ){
 8005088:	4b22      	ldr	r3, [pc, #136]	@ (8005114 <_Z6tcpGpsv+0x90>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d021      	beq.n	80050d4 <_Z6tcpGpsv+0x50>
 8005090:	2b02      	cmp	r3, #2
 8005092:	dc38      	bgt.n	8005106 <_Z6tcpGpsv+0x82>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <_Z6tcpGpsv+0x1a>
 8005098:	2b01      	cmp	r3, #1
 800509a:	d014      	beq.n	80050c6 <_Z6tcpGpsv+0x42>
			stateGpsTcp	= 2;				// Se queda en S2
		}
		break;

	default:
		break;
 800509c:	e033      	b.n	8005106 <_Z6tcpGpsv+0x82>
		if ( savedGps ){		// Si se guardó un valor de GPS
 800509e:	4b1e      	ldr	r3, [pc, #120]	@ (8005118 <_Z6tcpGpsv+0x94>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <_Z6tcpGpsv+0x2a>
			stateGpsTcp	= 1;	// Pasa a S1
 80050a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005114 <_Z6tcpGpsv+0x90>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
		break;
 80050ac:	e02c      	b.n	8005108 <_Z6tcpGpsv+0x84>
		else if( stopGps ){		// Si se paró la recepcion de datos
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <_Z6tcpGpsv+0x98>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <_Z6tcpGpsv+0x3a>
			stateGpsTcp	= 2;	// Pasa a S2
 80050b6:	4b17      	ldr	r3, [pc, #92]	@ (8005114 <_Z6tcpGpsv+0x90>)
 80050b8:	2202      	movs	r2, #2
 80050ba:	701a      	strb	r2, [r3, #0]
		break;
 80050bc:	e024      	b.n	8005108 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 0;	// Espera en S0
 80050be:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <_Z6tcpGpsv+0x90>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
		break;
 80050c4:	e020      	b.n	8005108 <_Z6tcpGpsv+0x84>
		flagGpsSaved	= 1;	// Indica que se guardó un mensaje
 80050c6:	4b16      	ldr	r3, [pc, #88]	@ (8005120 <_Z6tcpGpsv+0x9c>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
		stateGpsTcp		= 2;	// Pasa a S3
 80050cc:	4b11      	ldr	r3, [pc, #68]	@ (8005114 <_Z6tcpGpsv+0x90>)
 80050ce:	2202      	movs	r2, #2
 80050d0:	701a      	strb	r2, [r3, #0]
		break;
 80050d2:	e019      	b.n	8005108 <_Z6tcpGpsv+0x84>
		countGpsTcp++;						// Suma 1 al contador
 80050d4:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <_Z6tcpGpsv+0xa0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	4a12      	ldr	r2, [pc, #72]	@ (8005124 <_Z6tcpGpsv+0xa0>)
 80050dc:	6013      	str	r3, [r2, #0]
		if ( countGpsTcp >= limitGpsTcp ){	// Si pasa el limite
 80050de:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <_Z6tcpGpsv+0xa0>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b11      	ldr	r3, [pc, #68]	@ (8005128 <_Z6tcpGpsv+0xa4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d309      	bcc.n	80050fe <_Z6tcpGpsv+0x7a>
			startGps	= 1;				// Indica inicio de medicion gps
 80050ea:	4b10      	ldr	r3, [pc, #64]	@ (800512c <_Z6tcpGpsv+0xa8>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
			countGpsTcp	= 0;				// Reinicia contador
 80050f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <_Z6tcpGpsv+0xa0>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
			stateGpsTcp	= 0;				// Vuelve a S0
 80050f6:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <_Z6tcpGpsv+0x90>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
		break;
 80050fc:	e004      	b.n	8005108 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 2;				// Se queda en S2
 80050fe:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <_Z6tcpGpsv+0x90>)
 8005100:	2202      	movs	r2, #2
 8005102:	701a      	strb	r2, [r3, #0]
		break;
 8005104:	e000      	b.n	8005108 <_Z6tcpGpsv+0x84>
		break;
 8005106:	bf00      	nop
	}
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000113d 	.word	0x2000113d
 8005118:	20000ae2 	.word	0x20000ae2
 800511c:	20000ae1 	.word	0x20000ae1
 8005120:	2000113e 	.word	0x2000113e
 8005124:	20001140 	.word	0x20001140
 8005128:	20001144 	.word	0x20001144
 800512c:	20000397 	.word	0x20000397

08005130 <_Z41__static_initialization_and_destruction_0ii>:
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d11f      	bne.n	8005180 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005146:	4293      	cmp	r3, r2
 8005148:	d11a      	bne.n	8005180 <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t limitGpsTcp = 43200000/superloop;// Tiempo que esta apagado GPS
 800514a:	4b10      	ldr	r3, [pc, #64]	@ (800518c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	4b0f      	ldr	r3, [pc, #60]	@ (8005190 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005152:	fb93 f3f2 	sdiv	r3, r3, r2
 8005156:	461a      	mov	r2, r3
 8005158:	4b0e      	ldr	r3, [pc, #56]	@ (8005194 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800515a:	601a      	str	r2, [r3, #0]
uint32_t limitTcpData	= 120000/superloop;	// Limite para fijar datos
 800515c:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005164:	fb93 f3f2 	sdiv	r3, r3, r2
 8005168:	461a      	mov	r2, r3
 800516a:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800516c:	601a      	str	r2, [r3, #0]
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
 800516e:	4b07      	ldr	r3, [pc, #28]	@ (800518c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b0a      	ldr	r3, [pc, #40]	@ (80051a0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005176:	fb93 f3f2 	sdiv	r3, r3, r2
 800517a:	461a      	mov	r2, r3
 800517c:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800517e:	601a      	str	r2, [r3, #0]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000399 	.word	0x20000399
 8005190:	02932e00 	.word	0x02932e00
 8005194:	20001144 	.word	0x20001144
 8005198:	0001d4c0 	.word	0x0001d4c0
 800519c:	20001150 	.word	0x20001150
 80051a0:	01499700 	.word	0x01499700
 80051a4:	2000115c 	.word	0x2000115c

080051a8 <_GLOBAL__sub_I_stateGpsTcp>:
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80051b0:	2001      	movs	r0, #1
 80051b2:	f7ff ffbd 	bl	8005130 <_Z41__static_initialization_and_destruction_0ii>
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <_Z9tcpOutputv>:
uint16_t countTcpLoraOut;							// Contador para esperar
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando

/*****	OUTPUT	*****/

void tcpOutput(){
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
	tcpOutLora();
 80051bc:	f000 f802 	bl	80051c4 <_Z10tcpOutLorav>
}
 80051c0:	bf00      	nop
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <_Z10tcpOutLorav>:

void tcpOutLora(){
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
	switch( stateTpcLoraOut ){
 80051c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005274 <_Z10tcpOutLorav+0xb0>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d028      	beq.n	8005222 <_Z10tcpOutLorav+0x5e>
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	dc48      	bgt.n	8005266 <_Z10tcpOutLorav+0xa2>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <_Z10tcpOutLorav+0x1a>
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d00e      	beq.n	80051fa <_Z10tcpOutLorav+0x36>
 80051dc:	e043      	b.n	8005266 <_Z10tcpOutLorav+0xa2>
	///////////////////////
	// S0 - WAIT COMMAND //
	///////////////////////

	case 0:
		if ( loraSelect.newCommand() ){	// Si hay nuevo comando
 80051de:	4826      	ldr	r0, [pc, #152]	@ (8005278 <_Z10tcpOutLorav+0xb4>)
 80051e0:	f7fe fc41 	bl	8003a66 <_ZN10loraSelect10newCommandEv>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <_Z10tcpOutLorav+0x2e>
 			stateTpcLoraOut	= 1;		// Pasa a S1
 80051ea:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <_Z10tcpOutLorav+0xb0>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateTpcLoraOut	= 0;		// Queda en S0
		}
		break;
 80051f0:	e03d      	b.n	800526e <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 0;		// Queda en S0
 80051f2:	4b20      	ldr	r3, [pc, #128]	@ (8005274 <_Z10tcpOutLorav+0xb0>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
		break;
 80051f8:	e039      	b.n	800526e <_Z10tcpOutLorav+0xaa>
	////////////////////////
	// S1 - WAIT FOR SEND //
	////////////////////////

	case 1:
		countTcpLoraOut++;							// Suma 1 al contador
 80051fa:	4b20      	ldr	r3, [pc, #128]	@ (800527c <_Z10tcpOutLorav+0xb8>)
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	4b1e      	ldr	r3, [pc, #120]	@ (800527c <_Z10tcpOutLorav+0xb8>)
 8005204:	801a      	strh	r2, [r3, #0]

		if ( countTcpLoraOut >= limitTcpLoraOut ){	// Si llega al limite
 8005206:	4b1d      	ldr	r3, [pc, #116]	@ (800527c <_Z10tcpOutLorav+0xb8>)
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	4b1d      	ldr	r3, [pc, #116]	@ (8005280 <_Z10tcpOutLorav+0xbc>)
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d303      	bcc.n	800521a <_Z10tcpOutLorav+0x56>
			stateTpcLoraOut	= 2;					// Pasa a S2
 8005212:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <_Z10tcpOutLorav+0xb0>)
 8005214:	2202      	movs	r2, #2
 8005216:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateTpcLoraOut	= 1;					// Queda en S1
		}
		break;
 8005218:	e029      	b.n	800526e <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 1;					// Queda en S1
 800521a:	4b16      	ldr	r3, [pc, #88]	@ (8005274 <_Z10tcpOutLorav+0xb0>)
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
		break;
 8005220:	e025      	b.n	800526e <_Z10tcpOutLorav+0xaa>
	/////////////////////////////
	// S2 - CONFIG BY TRANSMIT //
	/////////////////////////////

	case 2:
		countTcpLoraOut	= 0;										// Reinicia contador
 8005222:	4b16      	ldr	r3, [pc, #88]	@ (800527c <_Z10tcpOutLorav+0xb8>)
 8005224:	2200      	movs	r2, #0
 8005226:	801a      	strh	r2, [r3, #0]

		loraTxCommand0 	= loraSelect.getCommand();					// Guarda comando
 8005228:	4813      	ldr	r0, [pc, #76]	@ (8005278 <_Z10tcpOutLorav+0xb4>)
 800522a:	f7fe fc2d 	bl	8003a88 <_ZN10loraSelect10getCommandEv>
 800522e:	4603      	mov	r3, r0
 8005230:	4a14      	ldr	r2, [pc, #80]	@ (8005284 <_Z10tcpOutLorav+0xc0>)
 8005232:	6013      	str	r3, [r2, #0]
		sizeTxCommand0	= loraSelect.getCommandSize();				// Guarda tamaño de comando
 8005234:	4810      	ldr	r0, [pc, #64]	@ (8005278 <_Z10tcpOutLorav+0xb4>)
 8005236:	f7fe fc33 	bl	8003aa0 <_ZN10loraSelect14getCommandSizeEv>
 800523a:	4603      	mov	r3, r0
 800523c:	461a      	mov	r2, r3
 800523e:	4b12      	ldr	r3, [pc, #72]	@ (8005288 <_Z10tcpOutLorav+0xc4>)
 8005240:	701a      	strb	r2, [r3, #0]

		loraCheck.setIdealResponses( loraSelect.qttyResponses() );	// Guarda largo de lista de respuestas
 8005242:	480d      	ldr	r0, [pc, #52]	@ (8005278 <_Z10tcpOutLorav+0xb4>)
 8005244:	f7fe fc38 	bl	8003ab8 <_ZN10loraSelect13qttyResponsesEv>
 8005248:	4603      	mov	r3, r0
 800524a:	4619      	mov	r1, r3
 800524c:	480f      	ldr	r0, [pc, #60]	@ (800528c <_Z10tcpOutLorav+0xc8>)
 800524e:	f7fe fad6 	bl	80037fe <_ZN9loraCheck17setIdealResponsesEh>
		loraDecision.reset();										// Reinicia TCP
 8005252:	480f      	ldr	r0, [pc, #60]	@ (8005290 <_Z10tcpOutLorav+0xcc>)
 8005254:	f7fe fcc5 	bl	8003be2 <_ZN12loraDecision5resetEv>
		flagTxLora	= 1;											// Transmite
 8005258:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <_Z10tcpOutLorav+0xd0>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
		stateTpcLoraOut	= 0;										// Vuelve a S0
 800525e:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <_Z10tcpOutLorav+0xb0>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
		break;
 8005264:	e003      	b.n	800526e <_Z10tcpOutLorav+0xaa>

	default:
		stateTpcLoraOut	= 0;
 8005266:	4b03      	ldr	r3, [pc, #12]	@ (8005274 <_Z10tcpOutLorav+0xb0>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
		break;
 800526c:	bf00      	nop
	}

}
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20001169 	.word	0x20001169
 8005278:	20000b84 	.word	0x20000b84
 800527c:	2000116a 	.word	0x2000116a
 8005280:	2000116c 	.word	0x2000116c
 8005284:	20001164 	.word	0x20001164
 8005288:	20001168 	.word	0x20001168
 800528c:	20000b68 	.word	0x20000b68
 8005290:	20000b7c 	.word	0x20000b7c
 8005294:	200004e9 	.word	0x200004e9

08005298 <_Z41__static_initialization_and_destruction_0ii>:
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10e      	bne.n	80052c6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d109      	bne.n	80052c6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando
 80052b2:	4b08      	ldr	r3, [pc, #32]	@ (80052d4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	4b05      	ldr	r3, [pc, #20]	@ (80052d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80052c4:	801a      	strh	r2, [r3, #0]
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000399 	.word	0x20000399
 80052d8:	2000116c 	.word	0x2000116c

080052dc <_GLOBAL__sub_I_loraTxCommand0>:
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
 80052e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7ff ffd7 	bl	8005298 <_Z41__static_initialization_and_destruction_0ii>
 80052ea:	bd80      	pop	{r7, pc}

080052ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80052ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005324 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80052f0:	f7ff fe14 	bl	8004f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052f4:	480c      	ldr	r0, [pc, #48]	@ (8005328 <LoopForever+0x6>)
  ldr r1, =_edata
 80052f6:	490d      	ldr	r1, [pc, #52]	@ (800532c <LoopForever+0xa>)
  ldr r2, =_sidata
 80052f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005330 <LoopForever+0xe>)
  movs r3, #0
 80052fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052fc:	e002      	b.n	8005304 <LoopCopyDataInit>

080052fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005302:	3304      	adds	r3, #4

08005304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005308:	d3f9      	bcc.n	80052fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800530a:	4a0a      	ldr	r2, [pc, #40]	@ (8005334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800530c:	4c0a      	ldr	r4, [pc, #40]	@ (8005338 <LoopForever+0x16>)
  movs r3, #0
 800530e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005310:	e001      	b.n	8005316 <LoopFillZerobss>

08005312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005314:	3204      	adds	r2, #4

08005316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005318:	d3fb      	bcc.n	8005312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800531a:	f008 f9e1 	bl	800d6e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800531e:	f7fe fce5 	bl	8003cec <main>

08005322 <LoopForever>:

LoopForever:
    b LoopForever
 8005322:	e7fe      	b.n	8005322 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005324:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800532c:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8005330:	0800d7bc 	.word	0x0800d7bc
  ldr r2, =_sbss
 8005334:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8005338:	20001174 	.word	0x20001174

0800533c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800533c:	e7fe      	b.n	800533c <ADC3_IRQHandler>

0800533e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005348:	2003      	movs	r0, #3
 800534a:	f001 fe01 	bl	8006f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800534e:	200f      	movs	r0, #15
 8005350:	f000 f80e 	bl	8005370 <HAL_InitTick>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	71fb      	strb	r3, [r7, #7]
 800535e:	e001      	b.n	8005364 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005360:	f7ff f998 	bl	8004694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005364:	79fb      	ldrb	r3, [r7, #7]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800537c:	4b17      	ldr	r3, [pc, #92]	@ (80053dc <HAL_InitTick+0x6c>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d023      	beq.n	80053cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005384:	4b16      	ldr	r3, [pc, #88]	@ (80053e0 <HAL_InitTick+0x70>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b14      	ldr	r3, [pc, #80]	@ (80053dc <HAL_InitTick+0x6c>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	4619      	mov	r1, r3
 800538e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005392:	fbb3 f3f1 	udiv	r3, r3, r1
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	4618      	mov	r0, r3
 800539c:	f001 fe1b 	bl	8006fd6 <HAL_SYSTICK_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b0f      	cmp	r3, #15
 80053aa:	d809      	bhi.n	80053c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053ac:	2200      	movs	r2, #0
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	f001 fdd7 	bl	8006f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053b8:	4a0a      	ldr	r2, [pc, #40]	@ (80053e4 <HAL_InitTick+0x74>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e007      	b.n	80053d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
 80053c4:	e004      	b.n	80053d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
 80053ca:	e001      	b.n	80053d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	200003a4 	.word	0x200003a4
 80053e0:	2000039c 	.word	0x2000039c
 80053e4:	200003a0 	.word	0x200003a0

080053e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <HAL_IncTick+0x20>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b06      	ldr	r3, [pc, #24]	@ (800540c <HAL_IncTick+0x24>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	4a04      	ldr	r2, [pc, #16]	@ (800540c <HAL_IncTick+0x24>)
 80053fa:	6013      	str	r3, [r2, #0]
}
 80053fc:	bf00      	nop
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	200003a4 	.word	0x200003a4
 800540c:	20001170 	.word	0x20001170

08005410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return uwTick;
 8005414:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <HAL_GetTick+0x14>)
 8005416:	681b      	ldr	r3, [r3, #0]
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20001170 	.word	0x20001170

08005428 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_SuspendTick+0x1c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <HAL_SuspendTick+0x1c>)
 8005432:	f023 0302 	bic.w	r3, r3, #2
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	e000e010 	.word	0xe000e010

08005448 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800544c:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <HAL_ResumeTick+0x1c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a04      	ldr	r2, [pc, #16]	@ (8005464 <HAL_ResumeTick+0x1c>)
 8005452:	f043 0302 	orr.w	r3, r3, #2
 8005456:	6013      	str	r3, [r2, #0]
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	e000e010 	.word	0xe000e010

08005468 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	609a      	str	r2, [r3, #8]
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3360      	adds	r3, #96	@ 0x60
 80054e2:	461a      	mov	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b08      	ldr	r3, [pc, #32]	@ (8005514 <LL_ADC_SetOffset+0x44>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	4313      	orrs	r3, r2
 8005500:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	03fff000 	.word	0x03fff000

08005518 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3360      	adds	r3, #96	@ 0x60
 8005526:	461a      	mov	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3360      	adds	r3, #96	@ 0x60
 8005554:	461a      	mov	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	431a      	orrs	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	615a      	str	r2, [r3, #20]
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b087      	sub	sp, #28
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3330      	adds	r3, #48	@ 0x30
 80055d6:	461a      	mov	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	0a1b      	lsrs	r3, r3, #8
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	4413      	add	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	211f      	movs	r1, #31
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	43db      	mvns	r3, r3
 80055f8:	401a      	ands	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	0e9b      	lsrs	r3, r3, #26
 80055fe:	f003 011f 	and.w	r1, r3, #31
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	431a      	orrs	r2, r3
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3314      	adds	r3, #20
 8005654:	461a      	mov	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	0e5b      	lsrs	r3, r3, #25
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	4413      	add	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	0d1b      	lsrs	r3, r3, #20
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2107      	movs	r1, #7
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	43db      	mvns	r3, r3
 8005678:	401a      	ands	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0d1b      	lsrs	r3, r3, #20
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	431a      	orrs	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
	...

0800569c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b4:	43db      	mvns	r3, r3
 80056b6:	401a      	ands	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f003 0318 	and.w	r3, r3, #24
 80056be:	4908      	ldr	r1, [pc, #32]	@ (80056e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80056c0:	40d9      	lsrs	r1, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	400b      	ands	r3, r1
 80056c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ca:	431a      	orrs	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80056d2:	bf00      	nop
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	0007ffff 	.word	0x0007ffff

080056e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 031f 	and.w	r3, r3, #31
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800572c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6093      	str	r3, [r2, #8]
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005754:	d101      	bne.n	800575a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005778:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800577c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057a4:	d101      	bne.n	80057aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057cc:	f043 0201 	orr.w	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <LL_ADC_IsEnabled+0x18>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <LL_ADC_IsEnabled+0x1a>
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005816:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800581a:	f043 0204 	orr.w	r2, r3, #4
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b04      	cmp	r3, #4
 8005840:	d101      	bne.n	8005846 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b08      	cmp	r3, #8
 8005866:	d101      	bne.n	800586c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b089      	sub	sp, #36	@ 0x24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e133      	b.n	8005afe <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fe ff19 	bl	80046dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff ff3f 	bl	8005740 <LL_ADC_IsDeepPowerDownEnabled>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ff25 	bl	800571c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff ff5a 	bl	8005790 <LL_ADC_IsInternalRegulatorEnabled>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d115      	bne.n	800590e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff ff3e 	bl	8005768 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058ec:	4b86      	ldr	r3, [pc, #536]	@ (8005b08 <HAL_ADC_Init+0x28c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	099b      	lsrs	r3, r3, #6
 80058f2:	4a86      	ldr	r2, [pc, #536]	@ (8005b0c <HAL_ADC_Init+0x290>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	3301      	adds	r3, #1
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005900:	e002      	b.n	8005908 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b01      	subs	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f9      	bne.n	8005902 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff ff3c 	bl	8005790 <LL_ADC_IsInternalRegulatorEnabled>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005922:	f043 0210 	orr.w	r2, r3, #16
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592e:	f043 0201 	orr.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff ff75 	bl	800582e <LL_ADC_REG_IsConversionOngoing>
 8005944:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 80cc 	bne.w	8005aec <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f040 80c8 	bne.w	8005aec <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005960:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005964:	f043 0202 	orr.w	r2, r3, #2
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff35 	bl	80057e0 <LL_ADC_IsEnabled>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d115      	bne.n	80059a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800597c:	4864      	ldr	r0, [pc, #400]	@ (8005b10 <HAL_ADC_Init+0x294>)
 800597e:	f7ff ff2f 	bl	80057e0 <LL_ADC_IsEnabled>
 8005982:	4604      	mov	r4, r0
 8005984:	4863      	ldr	r0, [pc, #396]	@ (8005b14 <HAL_ADC_Init+0x298>)
 8005986:	f7ff ff2b 	bl	80057e0 <LL_ADC_IsEnabled>
 800598a:	4603      	mov	r3, r0
 800598c:	431c      	orrs	r4, r3
 800598e:	4862      	ldr	r0, [pc, #392]	@ (8005b18 <HAL_ADC_Init+0x29c>)
 8005990:	f7ff ff26 	bl	80057e0 <LL_ADC_IsEnabled>
 8005994:	4603      	mov	r3, r0
 8005996:	4323      	orrs	r3, r4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	4619      	mov	r1, r3
 80059a2:	485e      	ldr	r0, [pc, #376]	@ (8005b1c <HAL_ADC_Init+0x2a0>)
 80059a4:	f7ff fd60 	bl	8005468 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	7e5b      	ldrb	r3, [r3, #25]
 80059ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80059b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80059be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d106      	bne.n	80059e4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	3b01      	subs	r3, #1
 80059dc:	045b      	lsls	r3, r3, #17
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d009      	beq.n	8005a00 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	4b46      	ldr	r3, [pc, #280]	@ (8005b20 <HAL_ADC_Init+0x2a4>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	69b9      	ldr	r1, [r7, #24]
 8005a10:	430b      	orrs	r3, r1
 8005a12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff ff1b 	bl	8005854 <LL_ADC_INJ_IsConversionOngoing>
 8005a1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d140      	bne.n	8005aa8 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d13d      	bne.n	8005aa8 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	7e1b      	ldrb	r3, [r3, #24]
 8005a34:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a36:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a4e:	f023 0306 	bic.w	r3, r3, #6
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	69b9      	ldr	r1, [r7, #24]
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d118      	bne.n	8005a98 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a7c:	4311      	orrs	r1, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a82:	4311      	orrs	r1, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0201 	orr.w	r2, r2, #1
 8005a94:	611a      	str	r2, [r3, #16]
 8005a96:	e007      	b.n	8005aa8 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0201 	bic.w	r2, r2, #1
 8005aa6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d10c      	bne.n	8005aca <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab6:	f023 010f 	bic.w	r1, r3, #15
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	1e5a      	subs	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ac8:	e007      	b.n	8005ada <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 020f 	bic.w	r2, r2, #15
 8005ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	f043 0201 	orr.w	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005aea:	e007      	b.n	8005afc <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af0:	f043 0210 	orr.w	r2, r3, #16
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3724      	adds	r7, #36	@ 0x24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd90      	pop	{r4, r7, pc}
 8005b06:	bf00      	nop
 8005b08:	2000039c 	.word	0x2000039c
 8005b0c:	053e2d63 	.word	0x053e2d63
 8005b10:	50040000 	.word	0x50040000
 8005b14:	50040100 	.word	0x50040100
 8005b18:	50040200 	.word	0x50040200
 8005b1c:	50040300 	.word	0x50040300
 8005b20:	fff0c007 	.word	0xfff0c007

08005b24 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b30:	4853      	ldr	r0, [pc, #332]	@ (8005c80 <HAL_ADC_Start_DMA+0x15c>)
 8005b32:	f7ff fdd7 	bl	80056e4 <LL_ADC_GetMultimode>
 8005b36:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff fe76 	bl	800582e <LL_ADC_REG_IsConversionOngoing>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f040 8093 	bne.w	8005c70 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_ADC_Start_DMA+0x34>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e08e      	b.n	8005c76 <HAL_ADC_Start_DMA+0x152>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a47      	ldr	r2, [pc, #284]	@ (8005c84 <HAL_ADC_Start_DMA+0x160>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d008      	beq.n	8005b7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	d002      	beq.n	8005b7c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b09      	cmp	r3, #9
 8005b7a:	d172      	bne.n	8005c62 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fed1 	bl	8006924 <ADC_Enable>
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d165      	bne.n	8005c58 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a38      	ldr	r2, [pc, #224]	@ (8005c88 <HAL_ADC_Start_DMA+0x164>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d002      	beq.n	8005bb0 <HAL_ADC_Start_DMA+0x8c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	e000      	b.n	8005bb2 <HAL_ADC_Start_DMA+0x8e>
 8005bb0:	4b36      	ldr	r3, [pc, #216]	@ (8005c8c <HAL_ADC_Start_DMA+0x168>)
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d002      	beq.n	8005bc0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d006      	beq.n	8005be6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bdc:	f023 0206 	bic.w	r2, r3, #6
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005be4:	e002      	b.n	8005bec <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf0:	4a27      	ldr	r2, [pc, #156]	@ (8005c90 <HAL_ADC_Start_DMA+0x16c>)
 8005bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf8:	4a26      	ldr	r2, [pc, #152]	@ (8005c94 <HAL_ADC_Start_DMA+0x170>)
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c00:	4a25      	ldr	r2, [pc, #148]	@ (8005c98 <HAL_ADC_Start_DMA+0x174>)
 8005c02:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	221c      	movs	r2, #28
 8005c0a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0210 	orr.w	r2, r2, #16
 8005c22:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3340      	adds	r3, #64	@ 0x40
 8005c3e:	4619      	mov	r1, r3
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f001 fb1e 	bl	8007284 <HAL_DMA_Start_IT>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fdd8 	bl	8005806 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c56:	e00d      	b.n	8005c74 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8005c60:	e008      	b.n	8005c74 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8005c6e:	e001      	b.n	8005c74 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
 8005c72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	50040300 	.word	0x50040300
 8005c84:	50040200 	.word	0x50040200
 8005c88:	50040100 	.word	0x50040100
 8005c8c:	50040000 	.word	0x50040000
 8005c90:	08006a31 	.word	0x08006a31
 8005c94:	08006b09 	.word	0x08006b09
 8005c98:	08006b25 	.word	0x08006b25

08005c9c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	@ 0x28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cb8:	4882      	ldr	r0, [pc, #520]	@ (8005ec4 <HAL_ADC_IRQHandler+0x228>)
 8005cba:	f7ff fd13 	bl	80056e4 <LL_ADC_GetMultimode>
 8005cbe:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d017      	beq.n	8005cfa <HAL_ADC_IRQHandler+0x5e>
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d012      	beq.n	8005cfa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 ff81 	bl	8006bf4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_ADC_IRQHandler+0x72>
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8083 	beq.w	8005e20 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d07d      	beq.n	8005e20 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fc2d 	bl	80055a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d062      	beq.n	8005e12 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a5d      	ldr	r2, [pc, #372]	@ (8005ec8 <HAL_ADC_IRQHandler+0x22c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d002      	beq.n	8005d5c <HAL_ADC_IRQHandler+0xc0>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	e000      	b.n	8005d5e <HAL_ADC_IRQHandler+0xc2>
 8005d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8005ecc <HAL_ADC_IRQHandler+0x230>)
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d008      	beq.n	8005d78 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d002      	beq.n	8005d78 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	d104      	bne.n	8005d82 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	623b      	str	r3, [r7, #32]
 8005d80:	e00c      	b.n	8005d9c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a50      	ldr	r2, [pc, #320]	@ (8005ec8 <HAL_ADC_IRQHandler+0x22c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d002      	beq.n	8005d92 <HAL_ADC_IRQHandler+0xf6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	e000      	b.n	8005d94 <HAL_ADC_IRQHandler+0xf8>
 8005d92:	4b4e      	ldr	r3, [pc, #312]	@ (8005ecc <HAL_ADC_IRQHandler+0x230>)
 8005d94:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d135      	bne.n	8005e12 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d12e      	bne.n	8005e12 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff fd38 	bl	800582e <LL_ADC_REG_IsConversionOngoing>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d11a      	bne.n	8005dfa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 020c 	bic.w	r2, r2, #12
 8005dd2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d112      	bne.n	8005e12 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df0:	f043 0201 	orr.w	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005df8:	e00b      	b.n	8005e12 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfe:	f043 0210 	orr.w	r2, r3, #16
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0a:	f043 0201 	orr.w	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fe fb7c 	bl	8004510 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	220c      	movs	r2, #12
 8005e1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <HAL_ADC_IRQHandler+0x198>
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 809f 	beq.w	8005f7e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8099 	beq.w	8005f7e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d105      	bne.n	8005e64 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fbd8 	bl	800561e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005e6e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fb93 	bl	80055a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e7a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a11      	ldr	r2, [pc, #68]	@ (8005ec8 <HAL_ADC_IRQHandler+0x22c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d002      	beq.n	8005e8c <HAL_ADC_IRQHandler+0x1f0>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	e000      	b.n	8005e8e <HAL_ADC_IRQHandler+0x1f2>
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ecc <HAL_ADC_IRQHandler+0x230>)
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d008      	beq.n	8005ea8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d002      	beq.n	8005ea8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	d104      	bne.n	8005eb2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	623b      	str	r3, [r7, #32]
 8005eb0:	e013      	b.n	8005eda <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a04      	ldr	r2, [pc, #16]	@ (8005ec8 <HAL_ADC_IRQHandler+0x22c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_ADC_IRQHandler+0x234>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	e007      	b.n	8005ed2 <HAL_ADC_IRQHandler+0x236>
 8005ec2:	bf00      	nop
 8005ec4:	50040300 	.word	0x50040300
 8005ec8:	50040100 	.word	0x50040100
 8005ecc:	50040000 	.word	0x50040000
 8005ed0:	4b7d      	ldr	r3, [pc, #500]	@ (80060c8 <HAL_ADC_IRQHandler+0x42c>)
 8005ed2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d047      	beq.n	8005f70 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_ADC_IRQHandler+0x25e>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d03f      	beq.n	8005f70 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d13a      	bne.n	8005f70 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f04:	2b40      	cmp	r3, #64	@ 0x40
 8005f06:	d133      	bne.n	8005f70 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d12e      	bne.n	8005f70 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fc9c 	bl	8005854 <LL_ADC_INJ_IsConversionOngoing>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11a      	bne.n	8005f58 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f30:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d112      	bne.n	8005f70 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f4e:	f043 0201 	orr.w	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f56:	e00b      	b.n	8005f70 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5c:	f043 0210 	orr.w	r2, r3, #16
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f68:	f043 0201 	orr.w	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fe17 	bl	8006ba4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2260      	movs	r2, #96	@ 0x60
 8005f7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d011      	beq.n	8005fac <HAL_ADC_IRQHandler+0x310>
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f8a0 	bl	80060e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2280      	movs	r2, #128	@ 0x80
 8005faa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d012      	beq.n	8005fdc <HAL_ADC_IRQHandler+0x340>
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00d      	beq.n	8005fdc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fdfd 	bl	8006bcc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d012      	beq.n	800600c <HAL_ADC_IRQHandler+0x370>
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00d      	beq.n	800600c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fdef 	bl	8006be0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800600a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b00      	cmp	r3, #0
 8006014:	d036      	beq.n	8006084 <HAL_ADC_IRQHandler+0x3e8>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	d031      	beq.n	8006084 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8006028:	2301      	movs	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
 800602c:	e014      	b.n	8006058 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006034:	4825      	ldr	r0, [pc, #148]	@ (80060cc <HAL_ADC_IRQHandler+0x430>)
 8006036:	f7ff fb63 	bl	8005700 <LL_ADC_GetMultiDMATransfer>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8006040:	2301      	movs	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	e008      	b.n	8006058 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8006054:	2301      	movs	r3, #1
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10e      	bne.n	800607c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006062:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606e:	f043 0202 	orr.w	r2, r3, #2
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f83e 	bl	80060f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2210      	movs	r2, #16
 8006082:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800608a:	2b00      	cmp	r3, #0
 800608c:	d018      	beq.n	80060c0 <HAL_ADC_IRQHandler+0x424>
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006094:	2b00      	cmp	r3, #0
 8006096:	d013      	beq.n	80060c0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a8:	f043 0208 	orr.w	r2, r3, #8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060b8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fd7c 	bl	8006bb8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80060c0:	bf00      	nop
 80060c2:	3728      	adds	r7, #40	@ 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	50040000 	.word	0x50040000
 80060cc:	50040300 	.word	0x50040300

080060d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b0b6      	sub	sp, #216	@ 0xd8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800611c:	2300      	movs	r3, #0
 800611e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_ADC_ConfigChannel+0x22>
 800612a:	2302      	movs	r3, #2
 800612c:	e3e3      	b.n	80068f6 <HAL_ADC_ConfigChannel+0x7ea>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fb77 	bl	800582e <LL_ADC_REG_IsConversionOngoing>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	f040 83c4 	bne.w	80068d0 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b05      	cmp	r3, #5
 8006156:	d824      	bhi.n	80061a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	3b02      	subs	r3, #2
 800615e:	2b03      	cmp	r3, #3
 8006160:	d81b      	bhi.n	800619a <HAL_ADC_ConfigChannel+0x8e>
 8006162:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <HAL_ADC_ConfigChannel+0x5c>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	08006179 	.word	0x08006179
 800616c:	08006181 	.word	0x08006181
 8006170:	08006189 	.word	0x08006189
 8006174:	08006191 	.word	0x08006191
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006178:	230c      	movs	r3, #12
 800617a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800617e:	e010      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006180:	2312      	movs	r3, #18
 8006182:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006186:	e00c      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006188:	2318      	movs	r3, #24
 800618a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800618e:	e008      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006198:	e003      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800619a:	2306      	movs	r3, #6
 800619c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80061b0:	f7ff fa09 	bl	80055c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fb38 	bl	800582e <LL_ADC_REG_IsConversionOngoing>
 80061be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fb44 	bl	8005854 <LL_ADC_INJ_IsConversionOngoing>
 80061cc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 81bf 	bne.w	8006558 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f040 81ba 	bne.w	8006558 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ec:	d10f      	bne.n	800620e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	4619      	mov	r1, r3
 80061fa:	f7ff fa23 	bl	8005644 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff f9b7 	bl	800557a <LL_ADC_SetSamplingTimeCommonConfig>
 800620c:	e00e      	b.n	800622c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6819      	ldr	r1, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	461a      	mov	r2, r3
 800621c:	f7ff fa12 	bl	8005644 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff f9a7 	bl	800557a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	695a      	ldr	r2, [r3, #20]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	08db      	lsrs	r3, r3, #3
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b04      	cmp	r3, #4
 800624c:	d00a      	beq.n	8006264 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6919      	ldr	r1, [r3, #16]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800625e:	f7ff f937 	bl	80054d0 <LL_ADC_SetOffset>
 8006262:	e179      	b.n	8006558 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff f954 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8006270:	4603      	mov	r3, r0
 8006272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <HAL_ADC_ConfigChannel+0x184>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff f949 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8006286:	4603      	mov	r3, r0
 8006288:	0e9b      	lsrs	r3, r3, #26
 800628a:	f003 021f 	and.w	r2, r3, #31
 800628e:	e01e      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1c2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff f93e 	bl	8005518 <LL_ADC_GetOffsetChannel>
 800629c:	4603      	mov	r3, r0
 800629e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062a6:	fa93 f3a3 	rbit	r3, r3
 80062aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80062b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80062be:	2320      	movs	r3, #32
 80062c0:	e004      	b.n	80062cc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80062c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062c6:	fab3 f383 	clz	r3, r3
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x1da>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	0e9b      	lsrs	r3, r3, #26
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	e018      	b.n	8006318 <HAL_ADC_ConfigChannel+0x20c>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062f2:	fa93 f3a3 	rbit	r3, r3
 80062f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80062fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006302:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800630a:	2320      	movs	r3, #32
 800630c:	e004      	b.n	8006318 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800630e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006312:	fab3 f383 	clz	r3, r3
 8006316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006318:	429a      	cmp	r2, r3
 800631a:	d106      	bne.n	800632a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2200      	movs	r2, #0
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff f90d 	bl	8005544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2101      	movs	r1, #1
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff f8f1 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8006336:	4603      	mov	r3, r0
 8006338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <HAL_ADC_ConfigChannel+0x24a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2101      	movs	r1, #1
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff f8e6 	bl	8005518 <LL_ADC_GetOffsetChannel>
 800634c:	4603      	mov	r3, r0
 800634e:	0e9b      	lsrs	r3, r3, #26
 8006350:	f003 021f 	and.w	r2, r3, #31
 8006354:	e01e      	b.n	8006394 <HAL_ADC_ConfigChannel+0x288>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2101      	movs	r1, #1
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff f8db 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8006362:	4603      	mov	r3, r0
 8006364:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800636c:	fa93 f3a3 	rbit	r3, r3
 8006370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006374:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006378:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800637c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8006384:	2320      	movs	r3, #32
 8006386:	e004      	b.n	8006392 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8006388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800638c:	fab3 f383 	clz	r3, r3
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800639c:	2b00      	cmp	r3, #0
 800639e:	d105      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x2a0>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	0e9b      	lsrs	r3, r3, #26
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	e018      	b.n	80063de <HAL_ADC_ConfigChannel+0x2d2>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063b8:	fa93 f3a3 	rbit	r3, r3
 80063bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80063c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80063c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80063d0:	2320      	movs	r3, #32
 80063d2:	e004      	b.n	80063de <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80063d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d8:	fab3 f383 	clz	r3, r3
 80063dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063de:	429a      	cmp	r2, r3
 80063e0:	d106      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	2101      	movs	r1, #1
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff f8aa 	bl	8005544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2102      	movs	r1, #2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff f88e 	bl	8005518 <LL_ADC_GetOffsetChannel>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <HAL_ADC_ConfigChannel+0x310>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2102      	movs	r1, #2
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff f883 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8006412:	4603      	mov	r3, r0
 8006414:	0e9b      	lsrs	r3, r3, #26
 8006416:	f003 021f 	and.w	r2, r3, #31
 800641a:	e01e      	b.n	800645a <HAL_ADC_ConfigChannel+0x34e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2102      	movs	r1, #2
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff f878 	bl	8005518 <LL_ADC_GetOffsetChannel>
 8006428:	4603      	mov	r3, r0
 800642a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006432:	fa93 f3a3 	rbit	r3, r3
 8006436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800643a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800643e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800644a:	2320      	movs	r3, #32
 800644c:	e004      	b.n	8006458 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800644e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006452:	fab3 f383 	clz	r3, r3
 8006456:	b2db      	uxtb	r3, r3
 8006458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006462:	2b00      	cmp	r3, #0
 8006464:	d105      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x366>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	0e9b      	lsrs	r3, r3, #26
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	e014      	b.n	800649c <HAL_ADC_ConfigChannel+0x390>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006478:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800647a:	fa93 f3a3 	rbit	r3, r3
 800647e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006482:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006486:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800648e:	2320      	movs	r3, #32
 8006490:	e004      	b.n	800649c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8006492:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006496:	fab3 f383 	clz	r3, r3
 800649a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800649c:	429a      	cmp	r2, r3
 800649e:	d106      	bne.n	80064ae <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2200      	movs	r2, #0
 80064a6:	2102      	movs	r1, #2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff f84b 	bl	8005544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2103      	movs	r1, #3
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff f82f 	bl	8005518 <LL_ADC_GetOffsetChannel>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <HAL_ADC_ConfigChannel+0x3ce>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2103      	movs	r1, #3
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff f824 	bl	8005518 <LL_ADC_GetOffsetChannel>
 80064d0:	4603      	mov	r3, r0
 80064d2:	0e9b      	lsrs	r3, r3, #26
 80064d4:	f003 021f 	and.w	r2, r3, #31
 80064d8:	e017      	b.n	800650a <HAL_ADC_ConfigChannel+0x3fe>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2103      	movs	r1, #3
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff f819 	bl	8005518 <LL_ADC_GetOffsetChannel>
 80064e6:	4603      	mov	r3, r0
 80064e8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064ec:	fa93 f3a3 	rbit	r3, r3
 80064f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80064f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064f4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80064f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80064fc:	2320      	movs	r3, #32
 80064fe:	e003      	b.n	8006508 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006502:	fab3 f383 	clz	r3, r3
 8006506:	b2db      	uxtb	r3, r3
 8006508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006512:	2b00      	cmp	r3, #0
 8006514:	d105      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x416>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	0e9b      	lsrs	r3, r3, #26
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	e011      	b.n	8006546 <HAL_ADC_ConfigChannel+0x43a>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800652a:	fa93 f3a3 	rbit	r3, r3
 800652e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006532:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800653a:	2320      	movs	r3, #32
 800653c:	e003      	b.n	8006546 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800653e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006540:	fab3 f383 	clz	r3, r3
 8006544:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006546:	429a      	cmp	r2, r3
 8006548:	d106      	bne.n	8006558 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2200      	movs	r2, #0
 8006550:	2103      	movs	r1, #3
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fff6 	bl	8005544 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff f93f 	bl	80057e0 <LL_ADC_IsEnabled>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 813f 	bne.w	80067e8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	461a      	mov	r2, r3
 8006578:	f7ff f890 	bl	800569c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4a8e      	ldr	r2, [pc, #568]	@ (80067bc <HAL_ADC_ConfigChannel+0x6b0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	f040 8130 	bne.w	80067e8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <HAL_ADC_ConfigChannel+0x4a4>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	0e9b      	lsrs	r3, r3, #26
 800659e:	3301      	adds	r3, #1
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2b09      	cmp	r3, #9
 80065a6:	bf94      	ite	ls
 80065a8:	2301      	movls	r3, #1
 80065aa:	2300      	movhi	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e019      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x4d8>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065b8:	fa93 f3a3 	rbit	r3, r3
 80065bc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80065be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80065c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80065c8:	2320      	movs	r3, #32
 80065ca:	e003      	b.n	80065d4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80065cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065ce:	fab3 f383 	clz	r3, r3
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	3301      	adds	r3, #1
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2b09      	cmp	r3, #9
 80065dc:	bf94      	ite	ls
 80065de:	2301      	movls	r3, #1
 80065e0:	2300      	movhi	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d079      	beq.n	80066dc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d107      	bne.n	8006604 <HAL_ADC_ConfigChannel+0x4f8>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	0e9b      	lsrs	r3, r3, #26
 80065fa:	3301      	adds	r3, #1
 80065fc:	069b      	lsls	r3, r3, #26
 80065fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006602:	e015      	b.n	8006630 <HAL_ADC_ConfigChannel+0x524>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800660c:	fa93 f3a3 	rbit	r3, r3
 8006610:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006614:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800661c:	2320      	movs	r3, #32
 800661e:	e003      	b.n	8006628 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8006620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006622:	fab3 f383 	clz	r3, r3
 8006626:	b2db      	uxtb	r3, r3
 8006628:	3301      	adds	r3, #1
 800662a:	069b      	lsls	r3, r3, #26
 800662c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006638:	2b00      	cmp	r3, #0
 800663a:	d109      	bne.n	8006650 <HAL_ADC_ConfigChannel+0x544>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	0e9b      	lsrs	r3, r3, #26
 8006642:	3301      	adds	r3, #1
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2101      	movs	r1, #1
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	e017      	b.n	8006680 <HAL_ADC_ConfigChannel+0x574>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006658:	fa93 f3a3 	rbit	r3, r3
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800665e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006660:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8006668:	2320      	movs	r3, #32
 800666a:	e003      	b.n	8006674 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800666c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666e:	fab3 f383 	clz	r3, r3
 8006672:	b2db      	uxtb	r3, r3
 8006674:	3301      	adds	r3, #1
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	2101      	movs	r1, #1
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	ea42 0103 	orr.w	r1, r2, r3
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <HAL_ADC_ConfigChannel+0x59a>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	0e9b      	lsrs	r3, r3, #26
 8006696:	3301      	adds	r3, #1
 8006698:	f003 021f 	and.w	r2, r3, #31
 800669c:	4613      	mov	r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4413      	add	r3, r2
 80066a2:	051b      	lsls	r3, r3, #20
 80066a4:	e018      	b.n	80066d8 <HAL_ADC_ConfigChannel+0x5cc>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ae:	fa93 f3a3 	rbit	r3, r3
 80066b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80066be:	2320      	movs	r3, #32
 80066c0:	e003      	b.n	80066ca <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	fab3 f383 	clz	r3, r3
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	3301      	adds	r3, #1
 80066cc:	f003 021f 	and.w	r2, r3, #31
 80066d0:	4613      	mov	r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4413      	add	r3, r2
 80066d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066d8:	430b      	orrs	r3, r1
 80066da:	e080      	b.n	80067de <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x5ec>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	0e9b      	lsrs	r3, r3, #26
 80066ee:	3301      	adds	r3, #1
 80066f0:	069b      	lsls	r3, r3, #26
 80066f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066f6:	e015      	b.n	8006724 <HAL_ADC_ConfigChannel+0x618>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	fa93 f3a3 	rbit	r3, r3
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8006710:	2320      	movs	r3, #32
 8006712:	e003      	b.n	800671c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	fab3 f383 	clz	r3, r3
 800671a:	b2db      	uxtb	r3, r3
 800671c:	3301      	adds	r3, #1
 800671e:	069b      	lsls	r3, r3, #26
 8006720:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672c:	2b00      	cmp	r3, #0
 800672e:	d109      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x638>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	0e9b      	lsrs	r3, r3, #26
 8006736:	3301      	adds	r3, #1
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	2101      	movs	r1, #1
 800673e:	fa01 f303 	lsl.w	r3, r1, r3
 8006742:	e017      	b.n	8006774 <HAL_ADC_ConfigChannel+0x668>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	fa93 f3a3 	rbit	r3, r3
 8006750:	61bb      	str	r3, [r7, #24]
  return result;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800675c:	2320      	movs	r3, #32
 800675e:	e003      	b.n	8006768 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	fab3 f383 	clz	r3, r3
 8006766:	b2db      	uxtb	r3, r3
 8006768:	3301      	adds	r3, #1
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	2101      	movs	r1, #1
 8006770:	fa01 f303 	lsl.w	r3, r1, r3
 8006774:	ea42 0103 	orr.w	r1, r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10d      	bne.n	80067a0 <HAL_ADC_ConfigChannel+0x694>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	0e9b      	lsrs	r3, r3, #26
 800678a:	3301      	adds	r3, #1
 800678c:	f003 021f 	and.w	r2, r3, #31
 8006790:	4613      	mov	r3, r2
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	4413      	add	r3, r2
 8006796:	3b1e      	subs	r3, #30
 8006798:	051b      	lsls	r3, r3, #20
 800679a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800679e:	e01d      	b.n	80067dc <HAL_ADC_ConfigChannel+0x6d0>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	fa93 f3a3 	rbit	r3, r3
 80067ac:	60fb      	str	r3, [r7, #12]
  return result;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d103      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80067b8:	2320      	movs	r3, #32
 80067ba:	e005      	b.n	80067c8 <HAL_ADC_ConfigChannel+0x6bc>
 80067bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	fab3 f383 	clz	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	3301      	adds	r3, #1
 80067ca:	f003 021f 	and.w	r2, r3, #31
 80067ce:	4613      	mov	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4413      	add	r3, r2
 80067d4:	3b1e      	subs	r3, #30
 80067d6:	051b      	lsls	r3, r3, #20
 80067d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067e2:	4619      	mov	r1, r3
 80067e4:	f7fe ff2e 	bl	8005644 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	4b44      	ldr	r3, [pc, #272]	@ (8006900 <HAL_ADC_ConfigChannel+0x7f4>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d07a      	beq.n	80068ea <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067f4:	4843      	ldr	r0, [pc, #268]	@ (8006904 <HAL_ADC_ConfigChannel+0x7f8>)
 80067f6:	f7fe fe5d 	bl	80054b4 <LL_ADC_GetCommonPathInternalCh>
 80067fa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a41      	ldr	r2, [pc, #260]	@ (8006908 <HAL_ADC_ConfigChannel+0x7fc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d12c      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800680c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d126      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a3c      	ldr	r2, [pc, #240]	@ (800690c <HAL_ADC_ConfigChannel+0x800>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_ADC_ConfigChannel+0x71c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3b      	ldr	r2, [pc, #236]	@ (8006910 <HAL_ADC_ConfigChannel+0x804>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d15d      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800682c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006830:	4619      	mov	r1, r3
 8006832:	4834      	ldr	r0, [pc, #208]	@ (8006904 <HAL_ADC_ConfigChannel+0x7f8>)
 8006834:	f7fe fe2b 	bl	800548e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006838:	4b36      	ldr	r3, [pc, #216]	@ (8006914 <HAL_ADC_ConfigChannel+0x808>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	099b      	lsrs	r3, r3, #6
 800683e:	4a36      	ldr	r2, [pc, #216]	@ (8006918 <HAL_ADC_ConfigChannel+0x80c>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	099b      	lsrs	r3, r3, #6
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	4613      	mov	r3, r2
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006852:	e002      	b.n	800685a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	3b01      	subs	r3, #1
 8006858:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f9      	bne.n	8006854 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006860:	e040      	b.n	80068e4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2d      	ldr	r2, [pc, #180]	@ (800691c <HAL_ADC_ConfigChannel+0x810>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d118      	bne.n	800689e <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800686c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d112      	bne.n	800689e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a23      	ldr	r2, [pc, #140]	@ (800690c <HAL_ADC_ConfigChannel+0x800>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d004      	beq.n	800688c <HAL_ADC_ConfigChannel+0x780>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a22      	ldr	r2, [pc, #136]	@ (8006910 <HAL_ADC_ConfigChannel+0x804>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d12d      	bne.n	80068e8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800688c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006890:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006894:	4619      	mov	r1, r3
 8006896:	481b      	ldr	r0, [pc, #108]	@ (8006904 <HAL_ADC_ConfigChannel+0x7f8>)
 8006898:	f7fe fdf9 	bl	800548e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800689c:	e024      	b.n	80068e8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006920 <HAL_ADC_ConfigChannel+0x814>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d120      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11a      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a14      	ldr	r2, [pc, #80]	@ (800690c <HAL_ADC_ConfigChannel+0x800>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d115      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80068c6:	4619      	mov	r1, r3
 80068c8:	480e      	ldr	r0, [pc, #56]	@ (8006904 <HAL_ADC_ConfigChannel+0x7f8>)
 80068ca:	f7fe fde0 	bl	800548e <LL_ADC_SetCommonPathInternalCh>
 80068ce:	e00c      	b.n	80068ea <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d4:	f043 0220 	orr.w	r2, r3, #32
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80068e2:	e002      	b.n	80068ea <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068e4:	bf00      	nop
 80068e6:	e000      	b.n	80068ea <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80068f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	37d8      	adds	r7, #216	@ 0xd8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	80080000 	.word	0x80080000
 8006904:	50040300 	.word	0x50040300
 8006908:	c7520000 	.word	0xc7520000
 800690c:	50040000 	.word	0x50040000
 8006910:	50040200 	.word	0x50040200
 8006914:	2000039c 	.word	0x2000039c
 8006918:	053e2d63 	.word	0x053e2d63
 800691c:	cb840000 	.word	0xcb840000
 8006920:	80000001 	.word	0x80000001

08006924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe ff53 	bl	80057e0 <LL_ADC_IsEnabled>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d169      	bne.n	8006a14 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	4b36      	ldr	r3, [pc, #216]	@ (8006a20 <ADC_Enable+0xfc>)
 8006948:	4013      	ands	r3, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00d      	beq.n	800696a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	f043 0210 	orr.w	r2, r3, #16
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695e:	f043 0201 	orr.w	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e055      	b.n	8006a16 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe ff22 	bl	80057b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006974:	482b      	ldr	r0, [pc, #172]	@ (8006a24 <ADC_Enable+0x100>)
 8006976:	f7fe fd9d 	bl	80054b4 <LL_ADC_GetCommonPathInternalCh>
 800697a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800697c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006980:	2b00      	cmp	r3, #0
 8006982:	d013      	beq.n	80069ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006984:	4b28      	ldr	r3, [pc, #160]	@ (8006a28 <ADC_Enable+0x104>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	099b      	lsrs	r3, r3, #6
 800698a:	4a28      	ldr	r2, [pc, #160]	@ (8006a2c <ADC_Enable+0x108>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	099b      	lsrs	r3, r3, #6
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	4613      	mov	r3, r2
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800699e:	e002      	b.n	80069a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f9      	bne.n	80069a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80069ac:	f7fe fd30 	bl	8005410 <HAL_GetTick>
 80069b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069b2:	e028      	b.n	8006a06 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe ff11 	bl	80057e0 <LL_ADC_IsEnabled>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe fef5 	bl	80057b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069ce:	f7fe fd1f 	bl	8005410 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d914      	bls.n	8006a06 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d00d      	beq.n	8006a06 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ee:	f043 0210 	orr.w	r2, r3, #16
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fa:	f043 0201 	orr.w	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e007      	b.n	8006a16 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d1cf      	bne.n	80069b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	8000003f 	.word	0x8000003f
 8006a24:	50040300 	.word	0x50040300
 8006a28:	2000039c 	.word	0x2000039c
 8006a2c:	053e2d63 	.word	0x053e2d63

08006a30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d14b      	bne.n	8006ae2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d021      	beq.n	8006aa8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe fd99 	bl	80055a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d032      	beq.n	8006ada <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d12b      	bne.n	8006ada <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d11f      	bne.n	8006ada <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9e:	f043 0201 	orr.w	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006aa6:	e018      	b.n	8006ada <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d111      	bne.n	8006ada <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad2:	f043 0201 	orr.w	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7fd fd18 	bl	8004510 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ae0:	e00e      	b.n	8006b00 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae6:	f003 0310 	and.w	r3, r3, #16
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff fb02 	bl	80060f8 <HAL_ADC_ErrorCallback>
}
 8006af4:	e004      	b.n	8006b00 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
}
 8006b00:	bf00      	nop
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff fada 	bl	80060d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b42:	f043 0204 	orr.w	r2, r3, #4
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff fad4 	bl	80060f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <LL_ADC_IsEnabled>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <LL_ADC_IsEnabled+0x18>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <LL_ADC_IsEnabled+0x1a>
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <LL_ADC_REG_IsConversionOngoing>:
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d101      	bne.n	8006b96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006c08:	b590      	push	{r4, r7, lr}
 8006c0a:	b0a1      	sub	sp, #132	@ 0x84
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e093      	b.n	8006d4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006c2e:	2300      	movs	r3, #0
 8006c30:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006c32:	2300      	movs	r3, #0
 8006c34:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a47      	ldr	r2, [pc, #284]	@ (8006d58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d102      	bne.n	8006c46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006c40:	4b46      	ldr	r3, [pc, #280]	@ (8006d5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e001      	b.n	8006c4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c54:	f043 0220 	orr.w	r2, r3, #32
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e072      	b.n	8006d4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff ff87 	bl	8006b7e <LL_ADC_REG_IsConversionOngoing>
 8006c70:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff ff81 	bl	8006b7e <LL_ADC_REG_IsConversionOngoing>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d154      	bne.n	8006d2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006c82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d151      	bne.n	8006d2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006c88:	4b35      	ldr	r3, [pc, #212]	@ (8006d60 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006c8a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d02c      	beq.n	8006cee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006c94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6859      	ldr	r1, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ca6:	035b      	lsls	r3, r3, #13
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	431a      	orrs	r2, r3
 8006cac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cb0:	4829      	ldr	r0, [pc, #164]	@ (8006d58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006cb2:	f7ff ff51 	bl	8006b58 <LL_ADC_IsEnabled>
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4828      	ldr	r0, [pc, #160]	@ (8006d5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006cba:	f7ff ff4d 	bl	8006b58 <LL_ADC_IsEnabled>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	431c      	orrs	r4, r3
 8006cc2:	4828      	ldr	r0, [pc, #160]	@ (8006d64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006cc4:	f7ff ff48 	bl	8006b58 <LL_ADC_IsEnabled>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	4323      	orrs	r3, r4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d137      	bne.n	8006d40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006cd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006cd8:	f023 030f 	bic.w	r3, r3, #15
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	6811      	ldr	r1, [r2, #0]
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	6892      	ldr	r2, [r2, #8]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cea:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006cec:	e028      	b.n	8006d40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cf8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cfa:	4817      	ldr	r0, [pc, #92]	@ (8006d58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006cfc:	f7ff ff2c 	bl	8006b58 <LL_ADC_IsEnabled>
 8006d00:	4604      	mov	r4, r0
 8006d02:	4816      	ldr	r0, [pc, #88]	@ (8006d5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006d04:	f7ff ff28 	bl	8006b58 <LL_ADC_IsEnabled>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	431c      	orrs	r4, r3
 8006d0c:	4815      	ldr	r0, [pc, #84]	@ (8006d64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006d0e:	f7ff ff23 	bl	8006b58 <LL_ADC_IsEnabled>
 8006d12:	4603      	mov	r3, r0
 8006d14:	4323      	orrs	r3, r4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d112      	bne.n	8006d40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006d22:	f023 030f 	bic.w	r3, r3, #15
 8006d26:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006d28:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d2a:	e009      	b.n	8006d40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006d3e:	e000      	b.n	8006d42 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3784      	adds	r7, #132	@ 0x84
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd90      	pop	{r4, r7, pc}
 8006d56:	bf00      	nop
 8006d58:	50040000 	.word	0x50040000
 8006d5c:	50040100 	.word	0x50040100
 8006d60:	50040300 	.word	0x50040300
 8006d64:	50040200 	.word	0x50040200

08006d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d78:	4b0c      	ldr	r3, [pc, #48]	@ (8006dac <__NVIC_SetPriorityGrouping+0x44>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d84:	4013      	ands	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d9a:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <__NVIC_SetPriorityGrouping+0x44>)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	60d3      	str	r3, [r2, #12]
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	e000ed00 	.word	0xe000ed00

08006db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006db4:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	f003 0307 	and.w	r3, r3, #7
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	e000ed00 	.word	0xe000ed00

08006dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	db0b      	blt.n	8006df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	f003 021f 	and.w	r2, r3, #31
 8006de4:	4907      	ldr	r1, [pc, #28]	@ (8006e04 <__NVIC_EnableIRQ+0x38>)
 8006de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2001      	movs	r0, #1
 8006dee:	fa00 f202 	lsl.w	r2, r0, r2
 8006df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	e000e100 	.word	0xe000e100

08006e08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	db12      	blt.n	8006e40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	f003 021f 	and.w	r2, r3, #31
 8006e20:	490a      	ldr	r1, [pc, #40]	@ (8006e4c <__NVIC_DisableIRQ+0x44>)
 8006e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e26:	095b      	lsrs	r3, r3, #5
 8006e28:	2001      	movs	r0, #1
 8006e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e2e:	3320      	adds	r3, #32
 8006e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e34:	f3bf 8f4f 	dsb	sy
}
 8006e38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e3a:	f3bf 8f6f 	isb	sy
}
 8006e3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	e000e100 	.word	0xe000e100

08006e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	6039      	str	r1, [r7, #0]
 8006e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	db0a      	blt.n	8006e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	490c      	ldr	r1, [pc, #48]	@ (8006e9c <__NVIC_SetPriority+0x4c>)
 8006e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6e:	0112      	lsls	r2, r2, #4
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	440b      	add	r3, r1
 8006e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e78:	e00a      	b.n	8006e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	4908      	ldr	r1, [pc, #32]	@ (8006ea0 <__NVIC_SetPriority+0x50>)
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	3b04      	subs	r3, #4
 8006e88:	0112      	lsls	r2, r2, #4
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	761a      	strb	r2, [r3, #24]
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	e000e100 	.word	0xe000e100
 8006ea0:	e000ed00 	.word	0xe000ed00

08006ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b089      	sub	sp, #36	@ 0x24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f1c3 0307 	rsb	r3, r3, #7
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	bf28      	it	cs
 8006ec2:	2304      	movcs	r3, #4
 8006ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	2b06      	cmp	r3, #6
 8006ecc:	d902      	bls.n	8006ed4 <NVIC_EncodePriority+0x30>
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	3b03      	subs	r3, #3
 8006ed2:	e000      	b.n	8006ed6 <NVIC_EncodePriority+0x32>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee2:	43da      	mvns	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	401a      	ands	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eec:	f04f 31ff 	mov.w	r1, #4294967295
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	43d9      	mvns	r1, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006efc:	4313      	orrs	r3, r2
         );
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3724      	adds	r7, #36	@ 0x24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f1c:	d301      	bcc.n	8006f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e00f      	b.n	8006f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f22:	4a0a      	ldr	r2, [pc, #40]	@ (8006f4c <SysTick_Config+0x40>)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f2a:	210f      	movs	r1, #15
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	f7ff ff8e 	bl	8006e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f34:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <SysTick_Config+0x40>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f3a:	4b04      	ldr	r3, [pc, #16]	@ (8006f4c <SysTick_Config+0x40>)
 8006f3c:	2207      	movs	r2, #7
 8006f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	e000e010 	.word	0xe000e010

08006f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ff05 	bl	8006d68 <__NVIC_SetPriorityGrouping>
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b086      	sub	sp, #24
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
 8006f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f78:	f7ff ff1a 	bl	8006db0 <__NVIC_GetPriorityGrouping>
 8006f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	6978      	ldr	r0, [r7, #20]
 8006f84:	f7ff ff8e 	bl	8006ea4 <NVIC_EncodePriority>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ff5d 	bl	8006e50 <__NVIC_SetPriority>
}
 8006f96:	bf00      	nop
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff ff0d 	bl	8006dcc <__NVIC_EnableIRQ>
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff ff1d 	bl	8006e08 <__NVIC_DisableIRQ>
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff ff94 	bl	8006f0c <SysTick_Config>
 8006fe4:	4603      	mov	r3, r0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e098      	b.n	8007134 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	4b4d      	ldr	r3, [pc, #308]	@ (8007140 <HAL_DMA_Init+0x150>)
 800700a:	429a      	cmp	r2, r3
 800700c:	d80f      	bhi.n	800702e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	4b4b      	ldr	r3, [pc, #300]	@ (8007144 <HAL_DMA_Init+0x154>)
 8007016:	4413      	add	r3, r2
 8007018:	4a4b      	ldr	r2, [pc, #300]	@ (8007148 <HAL_DMA_Init+0x158>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	091b      	lsrs	r3, r3, #4
 8007020:	009a      	lsls	r2, r3, #2
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a48      	ldr	r2, [pc, #288]	@ (800714c <HAL_DMA_Init+0x15c>)
 800702a:	641a      	str	r2, [r3, #64]	@ 0x40
 800702c:	e00e      	b.n	800704c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	4b46      	ldr	r3, [pc, #280]	@ (8007150 <HAL_DMA_Init+0x160>)
 8007036:	4413      	add	r3, r2
 8007038:	4a43      	ldr	r2, [pc, #268]	@ (8007148 <HAL_DMA_Init+0x158>)
 800703a:	fba2 2303 	umull	r2, r3, r2, r3
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	009a      	lsls	r2, r3, #2
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a42      	ldr	r2, [pc, #264]	@ (8007154 <HAL_DMA_Init+0x164>)
 800704a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007066:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800707c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a6:	d039      	beq.n	800711c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ac:	4a27      	ldr	r2, [pc, #156]	@ (800714c <HAL_DMA_Init+0x15c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d11a      	bne.n	80070e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070b2:	4b29      	ldr	r3, [pc, #164]	@ (8007158 <HAL_DMA_Init+0x168>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ba:	f003 031c 	and.w	r3, r3, #28
 80070be:	210f      	movs	r1, #15
 80070c0:	fa01 f303 	lsl.w	r3, r1, r3
 80070c4:	43db      	mvns	r3, r3
 80070c6:	4924      	ldr	r1, [pc, #144]	@ (8007158 <HAL_DMA_Init+0x168>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070cc:	4b22      	ldr	r3, [pc, #136]	@ (8007158 <HAL_DMA_Init+0x168>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6859      	ldr	r1, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d8:	f003 031c 	and.w	r3, r3, #28
 80070dc:	fa01 f303 	lsl.w	r3, r1, r3
 80070e0:	491d      	ldr	r1, [pc, #116]	@ (8007158 <HAL_DMA_Init+0x168>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	600b      	str	r3, [r1, #0]
 80070e6:	e019      	b.n	800711c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070e8:	4b1c      	ldr	r3, [pc, #112]	@ (800715c <HAL_DMA_Init+0x16c>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f0:	f003 031c 	and.w	r3, r3, #28
 80070f4:	210f      	movs	r1, #15
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	43db      	mvns	r3, r3
 80070fc:	4917      	ldr	r1, [pc, #92]	@ (800715c <HAL_DMA_Init+0x16c>)
 80070fe:	4013      	ands	r3, r2
 8007100:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007102:	4b16      	ldr	r3, [pc, #88]	@ (800715c <HAL_DMA_Init+0x16c>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6859      	ldr	r1, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710e:	f003 031c 	and.w	r3, r3, #28
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	4911      	ldr	r1, [pc, #68]	@ (800715c <HAL_DMA_Init+0x16c>)
 8007118:	4313      	orrs	r3, r2
 800711a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40020407 	.word	0x40020407
 8007144:	bffdfff8 	.word	0xbffdfff8
 8007148:	cccccccd 	.word	0xcccccccd
 800714c:	40020000 	.word	0x40020000
 8007150:	bffdfbf8 	.word	0xbffdfbf8
 8007154:	40020400 	.word	0x40020400
 8007158:	400200a8 	.word	0x400200a8
 800715c:	400204a8 	.word	0x400204a8

08007160 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e072      	b.n	8007258 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	4b36      	ldr	r3, [pc, #216]	@ (8007264 <HAL_DMA_DeInit+0x104>)
 800718a:	429a      	cmp	r2, r3
 800718c:	d80f      	bhi.n	80071ae <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	4b34      	ldr	r3, [pc, #208]	@ (8007268 <HAL_DMA_DeInit+0x108>)
 8007196:	4413      	add	r3, r2
 8007198:	4a34      	ldr	r2, [pc, #208]	@ (800726c <HAL_DMA_DeInit+0x10c>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	091b      	lsrs	r3, r3, #4
 80071a0:	009a      	lsls	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a31      	ldr	r2, [pc, #196]	@ (8007270 <HAL_DMA_DeInit+0x110>)
 80071aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80071ac:	e00e      	b.n	80071cc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	4b2f      	ldr	r3, [pc, #188]	@ (8007274 <HAL_DMA_DeInit+0x114>)
 80071b6:	4413      	add	r3, r2
 80071b8:	4a2c      	ldr	r2, [pc, #176]	@ (800726c <HAL_DMA_DeInit+0x10c>)
 80071ba:	fba2 2303 	umull	r2, r3, r2, r3
 80071be:	091b      	lsrs	r3, r3, #4
 80071c0:	009a      	lsls	r2, r3, #2
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007278 <HAL_DMA_DeInit+0x118>)
 80071ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d8:	f003 021c 	and.w	r2, r3, #28
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	2101      	movs	r1, #1
 80071e2:	fa01 f202 	lsl.w	r2, r1, r2
 80071e6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	4a20      	ldr	r2, [pc, #128]	@ (8007270 <HAL_DMA_DeInit+0x110>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d10d      	bne.n	800720e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80071f2:	4b22      	ldr	r3, [pc, #136]	@ (800727c <HAL_DMA_DeInit+0x11c>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fa:	f003 031c 	and.w	r3, r3, #28
 80071fe:	210f      	movs	r1, #15
 8007200:	fa01 f303 	lsl.w	r3, r1, r3
 8007204:	43db      	mvns	r3, r3
 8007206:	491d      	ldr	r1, [pc, #116]	@ (800727c <HAL_DMA_DeInit+0x11c>)
 8007208:	4013      	ands	r3, r2
 800720a:	600b      	str	r3, [r1, #0]
 800720c:	e00c      	b.n	8007228 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800720e:	4b1c      	ldr	r3, [pc, #112]	@ (8007280 <HAL_DMA_DeInit+0x120>)
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007216:	f003 031c 	and.w	r3, r3, #28
 800721a:	210f      	movs	r1, #15
 800721c:	fa01 f303 	lsl.w	r3, r1, r3
 8007220:	43db      	mvns	r3, r3
 8007222:	4917      	ldr	r1, [pc, #92]	@ (8007280 <HAL_DMA_DeInit+0x120>)
 8007224:	4013      	ands	r3, r2
 8007226:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	40020407 	.word	0x40020407
 8007268:	bffdfff8 	.word	0xbffdfff8
 800726c:	cccccccd 	.word	0xcccccccd
 8007270:	40020000 	.word	0x40020000
 8007274:	bffdfbf8 	.word	0xbffdfbf8
 8007278:	40020400 	.word	0x40020400
 800727c:	400200a8 	.word	0x400200a8
 8007280:	400204a8 	.word	0x400204a8

08007284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_DMA_Start_IT+0x20>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e04b      	b.n	800733c <HAL_DMA_Start_IT+0xb8>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d13a      	bne.n	800732e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0201 	bic.w	r2, r2, #1
 80072d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f96d 	bl	80075bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 020e 	orr.w	r2, r2, #14
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e00f      	b.n	800731c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0204 	bic.w	r2, r2, #4
 800730a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 020a 	orr.w	r2, r2, #10
 800731a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	e005      	b.n	800733a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007336:	2302      	movs	r3, #2
 8007338:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d008      	beq.n	800736e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2204      	movs	r2, #4
 8007360:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e022      	b.n	80073b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 020e 	bic.w	r2, r2, #14
 800737c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007392:	f003 021c 	and.w	r2, r3, #28
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739a:	2101      	movs	r1, #1
 800739c:	fa01 f202 	lsl.w	r2, r1, r2
 80073a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d005      	beq.n	80073e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2204      	movs	r2, #4
 80073dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	73fb      	strb	r3, [r7, #15]
 80073e2:	e029      	b.n	8007438 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 020e 	bic.w	r2, r2, #14
 80073f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0201 	bic.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007408:	f003 021c 	and.w	r2, r3, #28
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007410:	2101      	movs	r1, #1
 8007412:	fa01 f202 	lsl.w	r2, r1, r2
 8007416:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
    }
  }
  return status;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745e:	f003 031c 	and.w	r3, r3, #28
 8007462:	2204      	movs	r2, #4
 8007464:	409a      	lsls	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4013      	ands	r3, r2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d026      	beq.n	80074bc <HAL_DMA_IRQHandler+0x7a>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d021      	beq.n	80074bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b00      	cmp	r3, #0
 8007484:	d107      	bne.n	8007496 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0204 	bic.w	r2, r2, #4
 8007494:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	f003 021c 	and.w	r2, r3, #28
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a2:	2104      	movs	r1, #4
 80074a4:	fa01 f202 	lsl.w	r2, r1, r2
 80074a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d071      	beq.n	8007596 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80074ba:	e06c      	b.n	8007596 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c0:	f003 031c 	and.w	r3, r3, #28
 80074c4:	2202      	movs	r2, #2
 80074c6:	409a      	lsls	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d02e      	beq.n	800752e <HAL_DMA_IRQHandler+0xec>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d029      	beq.n	800752e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 020a 	bic.w	r2, r2, #10
 80074f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007504:	f003 021c 	and.w	r2, r3, #28
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750c:	2102      	movs	r1, #2
 800750e:	fa01 f202 	lsl.w	r2, r1, r2
 8007512:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d038      	beq.n	8007596 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800752c:	e033      	b.n	8007596 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007532:	f003 031c 	and.w	r3, r3, #28
 8007536:	2208      	movs	r2, #8
 8007538:	409a      	lsls	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4013      	ands	r3, r2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d02a      	beq.n	8007598 <HAL_DMA_IRQHandler+0x156>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d025      	beq.n	8007598 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 020e 	bic.w	r2, r2, #14
 800755a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007560:	f003 021c 	and.w	r2, r3, #28
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007568:	2101      	movs	r1, #1
 800756a:	fa01 f202 	lsl.w	r2, r1, r2
 800756e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007596:	bf00      	nop
 8007598:	bf00      	nop
}
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80075ae:	b2db      	uxtb	r3, r3
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ce:	f003 021c 	and.w	r2, r3, #28
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	2101      	movs	r1, #1
 80075d8:	fa01 f202 	lsl.w	r2, r1, r2
 80075dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b10      	cmp	r3, #16
 80075ec:	d108      	bne.n	8007600 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80075fe:	e007      	b.n	8007610 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	60da      	str	r2, [r3, #12]
}
 8007610:	bf00      	nop
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800762a:	e166      	b.n	80078fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	2101      	movs	r1, #1
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	fa01 f303 	lsl.w	r3, r1, r3
 8007638:	4013      	ands	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8158 	beq.w	80078f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f003 0303 	and.w	r3, r3, #3
 800764c:	2b01      	cmp	r3, #1
 800764e:	d005      	beq.n	800765c <HAL_GPIO_Init+0x40>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d130      	bne.n	80076be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	2203      	movs	r2, #3
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	43db      	mvns	r3, r3
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4013      	ands	r3, r2
 8007672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007692:	2201      	movs	r2, #1
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	43db      	mvns	r3, r3
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4013      	ands	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	091b      	lsrs	r3, r3, #4
 80076a8:	f003 0201 	and.w	r2, r3, #1
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	fa02 f303 	lsl.w	r3, r2, r3
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d017      	beq.n	80076fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	2203      	movs	r2, #3
 80076d6:	fa02 f303 	lsl.w	r3, r2, r3
 80076da:	43db      	mvns	r3, r3
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4013      	ands	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d123      	bne.n	800774e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	08da      	lsrs	r2, r3, #3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3208      	adds	r2, #8
 800770e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007712:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	220f      	movs	r2, #15
 800771e:	fa02 f303 	lsl.w	r3, r2, r3
 8007722:	43db      	mvns	r3, r3
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4013      	ands	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4313      	orrs	r3, r2
 800773e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	08da      	lsrs	r2, r3, #3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3208      	adds	r2, #8
 8007748:	6939      	ldr	r1, [r7, #16]
 800774a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	2203      	movs	r2, #3
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	43db      	mvns	r3, r3
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4013      	ands	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f003 0203 	and.w	r2, r3, #3
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	fa02 f303 	lsl.w	r3, r2, r3
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80b2 	beq.w	80078f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007790:	4b61      	ldr	r3, [pc, #388]	@ (8007918 <HAL_GPIO_Init+0x2fc>)
 8007792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007794:	4a60      	ldr	r2, [pc, #384]	@ (8007918 <HAL_GPIO_Init+0x2fc>)
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	6613      	str	r3, [r2, #96]	@ 0x60
 800779c:	4b5e      	ldr	r3, [pc, #376]	@ (8007918 <HAL_GPIO_Init+0x2fc>)
 800779e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80077a8:	4a5c      	ldr	r2, [pc, #368]	@ (800791c <HAL_GPIO_Init+0x300>)
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	089b      	lsrs	r3, r3, #2
 80077ae:	3302      	adds	r3, #2
 80077b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	220f      	movs	r2, #15
 80077c0:	fa02 f303 	lsl.w	r3, r2, r3
 80077c4:	43db      	mvns	r3, r3
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4013      	ands	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80077d2:	d02b      	beq.n	800782c <HAL_GPIO_Init+0x210>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a52      	ldr	r2, [pc, #328]	@ (8007920 <HAL_GPIO_Init+0x304>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d025      	beq.n	8007828 <HAL_GPIO_Init+0x20c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a51      	ldr	r2, [pc, #324]	@ (8007924 <HAL_GPIO_Init+0x308>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d01f      	beq.n	8007824 <HAL_GPIO_Init+0x208>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a50      	ldr	r2, [pc, #320]	@ (8007928 <HAL_GPIO_Init+0x30c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d019      	beq.n	8007820 <HAL_GPIO_Init+0x204>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a4f      	ldr	r2, [pc, #316]	@ (800792c <HAL_GPIO_Init+0x310>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <HAL_GPIO_Init+0x200>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a4e      	ldr	r2, [pc, #312]	@ (8007930 <HAL_GPIO_Init+0x314>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d00d      	beq.n	8007818 <HAL_GPIO_Init+0x1fc>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a4d      	ldr	r2, [pc, #308]	@ (8007934 <HAL_GPIO_Init+0x318>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d007      	beq.n	8007814 <HAL_GPIO_Init+0x1f8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a4c      	ldr	r2, [pc, #304]	@ (8007938 <HAL_GPIO_Init+0x31c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d101      	bne.n	8007810 <HAL_GPIO_Init+0x1f4>
 800780c:	2307      	movs	r3, #7
 800780e:	e00e      	b.n	800782e <HAL_GPIO_Init+0x212>
 8007810:	2308      	movs	r3, #8
 8007812:	e00c      	b.n	800782e <HAL_GPIO_Init+0x212>
 8007814:	2306      	movs	r3, #6
 8007816:	e00a      	b.n	800782e <HAL_GPIO_Init+0x212>
 8007818:	2305      	movs	r3, #5
 800781a:	e008      	b.n	800782e <HAL_GPIO_Init+0x212>
 800781c:	2304      	movs	r3, #4
 800781e:	e006      	b.n	800782e <HAL_GPIO_Init+0x212>
 8007820:	2303      	movs	r3, #3
 8007822:	e004      	b.n	800782e <HAL_GPIO_Init+0x212>
 8007824:	2302      	movs	r3, #2
 8007826:	e002      	b.n	800782e <HAL_GPIO_Init+0x212>
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <HAL_GPIO_Init+0x212>
 800782c:	2300      	movs	r3, #0
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	f002 0203 	and.w	r2, r2, #3
 8007834:	0092      	lsls	r2, r2, #2
 8007836:	4093      	lsls	r3, r2
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800783e:	4937      	ldr	r1, [pc, #220]	@ (800791c <HAL_GPIO_Init+0x300>)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	3302      	adds	r3, #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800784c:	4b3b      	ldr	r3, [pc, #236]	@ (800793c <HAL_GPIO_Init+0x320>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	43db      	mvns	r3, r3
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4013      	ands	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007870:	4a32      	ldr	r2, [pc, #200]	@ (800793c <HAL_GPIO_Init+0x320>)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007876:	4b31      	ldr	r3, [pc, #196]	@ (800793c <HAL_GPIO_Init+0x320>)
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	43db      	mvns	r3, r3
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4013      	ands	r3, r2
 8007884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800789a:	4a28      	ldr	r2, [pc, #160]	@ (800793c <HAL_GPIO_Init+0x320>)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80078a0:	4b26      	ldr	r3, [pc, #152]	@ (800793c <HAL_GPIO_Init+0x320>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	43db      	mvns	r3, r3
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4013      	ands	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80078c4:	4a1d      	ldr	r2, [pc, #116]	@ (800793c <HAL_GPIO_Init+0x320>)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80078ca:	4b1c      	ldr	r3, [pc, #112]	@ (800793c <HAL_GPIO_Init+0x320>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	43db      	mvns	r3, r3
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4013      	ands	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80078ee:	4a13      	ldr	r2, [pc, #76]	@ (800793c <HAL_GPIO_Init+0x320>)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	3301      	adds	r3, #1
 80078f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	f47f ae91 	bne.w	800762c <HAL_GPIO_Init+0x10>
  }
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	40021000 	.word	0x40021000
 800791c:	40010000 	.word	0x40010000
 8007920:	48000400 	.word	0x48000400
 8007924:	48000800 	.word	0x48000800
 8007928:	48000c00 	.word	0x48000c00
 800792c:	48001000 	.word	0x48001000
 8007930:	48001400 	.word	0x48001400
 8007934:	48001800 	.word	0x48001800
 8007938:	48001c00 	.word	0x48001c00
 800793c:	40010400 	.word	0x40010400

08007940 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800794e:	e0c9      	b.n	8007ae4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007950:	2201      	movs	r2, #1
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	fa02 f303 	lsl.w	r3, r2, r3
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	4013      	ands	r3, r2
 800795c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 80bc 	beq.w	8007ade <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007966:	4a66      	ldr	r2, [pc, #408]	@ (8007b00 <HAL_GPIO_DeInit+0x1c0>)
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	089b      	lsrs	r3, r3, #2
 800796c:	3302      	adds	r3, #2
 800796e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007972:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	220f      	movs	r2, #15
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4013      	ands	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800798e:	d02b      	beq.n	80079e8 <HAL_GPIO_DeInit+0xa8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a5c      	ldr	r2, [pc, #368]	@ (8007b04 <HAL_GPIO_DeInit+0x1c4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d025      	beq.n	80079e4 <HAL_GPIO_DeInit+0xa4>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a5b      	ldr	r2, [pc, #364]	@ (8007b08 <HAL_GPIO_DeInit+0x1c8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d01f      	beq.n	80079e0 <HAL_GPIO_DeInit+0xa0>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a5a      	ldr	r2, [pc, #360]	@ (8007b0c <HAL_GPIO_DeInit+0x1cc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d019      	beq.n	80079dc <HAL_GPIO_DeInit+0x9c>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a59      	ldr	r2, [pc, #356]	@ (8007b10 <HAL_GPIO_DeInit+0x1d0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d013      	beq.n	80079d8 <HAL_GPIO_DeInit+0x98>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a58      	ldr	r2, [pc, #352]	@ (8007b14 <HAL_GPIO_DeInit+0x1d4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00d      	beq.n	80079d4 <HAL_GPIO_DeInit+0x94>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a57      	ldr	r2, [pc, #348]	@ (8007b18 <HAL_GPIO_DeInit+0x1d8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d007      	beq.n	80079d0 <HAL_GPIO_DeInit+0x90>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a56      	ldr	r2, [pc, #344]	@ (8007b1c <HAL_GPIO_DeInit+0x1dc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d101      	bne.n	80079cc <HAL_GPIO_DeInit+0x8c>
 80079c8:	2307      	movs	r3, #7
 80079ca:	e00e      	b.n	80079ea <HAL_GPIO_DeInit+0xaa>
 80079cc:	2308      	movs	r3, #8
 80079ce:	e00c      	b.n	80079ea <HAL_GPIO_DeInit+0xaa>
 80079d0:	2306      	movs	r3, #6
 80079d2:	e00a      	b.n	80079ea <HAL_GPIO_DeInit+0xaa>
 80079d4:	2305      	movs	r3, #5
 80079d6:	e008      	b.n	80079ea <HAL_GPIO_DeInit+0xaa>
 80079d8:	2304      	movs	r3, #4
 80079da:	e006      	b.n	80079ea <HAL_GPIO_DeInit+0xaa>
 80079dc:	2303      	movs	r3, #3
 80079de:	e004      	b.n	80079ea <HAL_GPIO_DeInit+0xaa>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e002      	b.n	80079ea <HAL_GPIO_DeInit+0xaa>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e000      	b.n	80079ea <HAL_GPIO_DeInit+0xaa>
 80079e8:	2300      	movs	r3, #0
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	f002 0203 	and.w	r2, r2, #3
 80079f0:	0092      	lsls	r2, r2, #2
 80079f2:	4093      	lsls	r3, r2
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d132      	bne.n	8007a60 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80079fa:	4b49      	ldr	r3, [pc, #292]	@ (8007b20 <HAL_GPIO_DeInit+0x1e0>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	43db      	mvns	r3, r3
 8007a02:	4947      	ldr	r1, [pc, #284]	@ (8007b20 <HAL_GPIO_DeInit+0x1e0>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007a08:	4b45      	ldr	r3, [pc, #276]	@ (8007b20 <HAL_GPIO_DeInit+0x1e0>)
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	4943      	ldr	r1, [pc, #268]	@ (8007b20 <HAL_GPIO_DeInit+0x1e0>)
 8007a12:	4013      	ands	r3, r2
 8007a14:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007a16:	4b42      	ldr	r3, [pc, #264]	@ (8007b20 <HAL_GPIO_DeInit+0x1e0>)
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	43db      	mvns	r3, r3
 8007a1e:	4940      	ldr	r1, [pc, #256]	@ (8007b20 <HAL_GPIO_DeInit+0x1e0>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007a24:	4b3e      	ldr	r3, [pc, #248]	@ (8007b20 <HAL_GPIO_DeInit+0x1e0>)
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	493c      	ldr	r1, [pc, #240]	@ (8007b20 <HAL_GPIO_DeInit+0x1e0>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	220f      	movs	r2, #15
 8007a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a40:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007a42:	4a2f      	ldr	r2, [pc, #188]	@ (8007b00 <HAL_GPIO_DeInit+0x1c0>)
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	089b      	lsrs	r3, r3, #2
 8007a48:	3302      	adds	r3, #2
 8007a4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	43da      	mvns	r2, r3
 8007a52:	482b      	ldr	r0, [pc, #172]	@ (8007b00 <HAL_GPIO_DeInit+0x1c0>)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	089b      	lsrs	r3, r3, #2
 8007a58:	400a      	ands	r2, r1
 8007a5a:	3302      	adds	r3, #2
 8007a5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	2103      	movs	r1, #3
 8007a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	08da      	lsrs	r2, r3, #3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3208      	adds	r2, #8
 8007a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	220f      	movs	r2, #15
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	08d2      	lsrs	r2, r2, #3
 8007a94:	4019      	ands	r1, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3208      	adds	r2, #8
 8007a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	2103      	movs	r1, #3
 8007aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aac:	43db      	mvns	r3, r3
 8007aae:	401a      	ands	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	2101      	movs	r1, #1
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	2103      	movs	r1, #3
 8007ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad6:	43db      	mvns	r3, r3
 8007ad8:	401a      	ands	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f47f af2f 	bne.w	8007950 <HAL_GPIO_DeInit+0x10>
  }
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	40010000 	.word	0x40010000
 8007b04:	48000400 	.word	0x48000400
 8007b08:	48000800 	.word	0x48000800
 8007b0c:	48000c00 	.word	0x48000c00
 8007b10:	48001000 	.word	0x48001000
 8007b14:	48001400 	.word	0x48001400
 8007b18:	48001800 	.word	0x48001800
 8007b1c:	48001c00 	.word	0x48001c00
 8007b20:	40010400 	.word	0x40010400

08007b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	887b      	ldrh	r3, [r7, #2]
 8007b36:	4013      	ands	r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
 8007b40:	e001      	b.n	8007b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	807b      	strh	r3, [r7, #2]
 8007b60:	4613      	mov	r3, r2
 8007b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b64:	787b      	ldrb	r3, [r7, #1]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b6a:	887a      	ldrh	r2, [r7, #2]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007b70:	e002      	b.n	8007b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007b72:	887a      	ldrh	r2, [r7, #2]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e08d      	b.n	8007cb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7fc fe36 	bl	800481c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2224      	movs	r2, #36	@ 0x24
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007bd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007be4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d107      	bne.n	8007bfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bfa:	609a      	str	r2, [r3, #8]
 8007bfc:	e006      	b.n	8007c0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689a      	ldr	r2, [r3, #8]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007c0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d108      	bne.n	8007c26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	e007      	b.n	8007c36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	69d9      	ldr	r1, [r3, #28]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1a      	ldr	r2, [r3, #32]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0201 	orr.w	r2, r2, #1
 8007c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	@ 0x28
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	607a      	str	r2, [r7, #4]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	460b      	mov	r3, r1
 8007cca:	817b      	strh	r3, [r7, #10]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	f040 80ef 	bne.w	8007ec0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cf0:	d101      	bne.n	8007cf6 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e0e5      	b.n	8007ec2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e0de      	b.n	8007ec2 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2221      	movs	r2, #33	@ 0x21
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2210      	movs	r2, #16
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	893a      	ldrh	r2, [r7, #8]
 8007d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4a66      	ldr	r2, [pc, #408]	@ (8007ecc <HAL_I2C_Master_Transmit_DMA+0x210>)
 8007d32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4a66      	ldr	r2, [pc, #408]	@ (8007ed0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007d38:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2bff      	cmp	r3, #255	@ 0xff
 8007d42:	d906      	bls.n	8007d52 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	22ff      	movs	r2, #255	@ 0xff
 8007d48:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007d4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d4e:	61fb      	str	r3, [r7, #28]
 8007d50:	e007      	b.n	8007d62 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d60:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01a      	beq.n	8007da0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d84:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d074      	beq.n	8007e92 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d022      	beq.n	8007df6 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	4a47      	ldr	r2, [pc, #284]	@ (8007ed4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8007db6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbc:	4a46      	ldr	r2, [pc, #280]	@ (8007ed8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007dbe:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	2200      	movs	r2, #0
 8007dce:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007de0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007de6:	f7ff fa4d 	bl	8007284 <HAL_DMA_Start_IT>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d13a      	bne.n	8007e6a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007df4:	e013      	b.n	8007e1e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e051      	b.n	8007ec2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	3301      	adds	r3, #1
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	8979      	ldrh	r1, [r7, #10]
 8007e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007edc <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f001 ff91 	bl	8009d58 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007e50:	2110      	movs	r1, #16
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f001 ffb2 	bl	8009dbc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	e028      	b.n	8007ebc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7e:	f043 0210 	orr.w	r2, r3, #16
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e017      	b.n	8007ec2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4a12      	ldr	r2, [pc, #72]	@ (8007ee0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007e96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	8979      	ldrh	r1, [r7, #10]
 8007e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007edc <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f001 ff56 	bl	8009d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f001 ff80 	bl	8009dbc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e000      	b.n	8007ec2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007ec0:	2302      	movs	r3, #2
  }
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	ffff0000 	.word	0xffff0000
 8007ed0:	080088c9 	.word	0x080088c9
 8007ed4:	0800984f 	.word	0x0800984f
 8007ed8:	0800997b 	.word	0x0800997b
 8007edc:	80002000 	.word	0x80002000
 8007ee0:	0800848b 	.word	0x0800848b

08007ee4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	817b      	strh	r3, [r7, #10]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	f040 80cd 	bne.w	80080a0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f14:	d101      	bne.n	8007f1a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8007f16:	2302      	movs	r3, #2
 8007f18:	e0c3      	b.n	80080a2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_I2C_Master_Receive_DMA+0x44>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e0bc      	b.n	80080a2 <HAL_I2C_Master_Receive_DMA+0x1be>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2222      	movs	r2, #34	@ 0x22
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	893a      	ldrh	r2, [r7, #8]
 8007f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4a55      	ldr	r2, [pc, #340]	@ (80080ac <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8007f56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a55      	ldr	r2, [pc, #340]	@ (80080b0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8007f5c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	2bff      	cmp	r3, #255	@ 0xff
 8007f66:	d906      	bls.n	8007f76 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	22ff      	movs	r2, #255	@ 0xff
 8007f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007f6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	e007      	b.n	8007f86 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007f80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d070      	beq.n	8008070 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d020      	beq.n	8007fd8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9a:	4a46      	ldr	r2, [pc, #280]	@ (80080b4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8007f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa2:	4a45      	ldr	r2, [pc, #276]	@ (80080b8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8007fa4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007faa:	2200      	movs	r2, #0
 8007fac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3324      	adds	r3, #36	@ 0x24
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fc8:	f7ff f95c 	bl	8007284 <HAL_DMA_Start_IT>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007fd0:	7cfb      	ldrb	r3, [r7, #19]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d138      	bne.n	8008048 <HAL_I2C_Master_Receive_DMA+0x164>
 8007fd6:	e013      	b.n	8008000 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e050      	b.n	80080a2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008004:	b2da      	uxtb	r2, r3
 8008006:	8979      	ldrh	r1, [r7, #10]
 8008008:	4b2c      	ldr	r3, [pc, #176]	@ (80080bc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f001 fea2 	bl	8009d58 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	b29a      	uxth	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800802e:	2110      	movs	r1, #16
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f001 fec3 	bl	8009dbc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e029      	b.n	800809c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800805c:	f043 0210 	orr.w	r2, r3, #16
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e018      	b.n	80080a2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a13      	ldr	r2, [pc, #76]	@ (80080c0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8008074:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800807a:	b2da      	uxtb	r2, r3
 800807c:	8979      	ldrh	r1, [r7, #10]
 800807e:	4b0f      	ldr	r3, [pc, #60]	@ (80080bc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f001 fe66 	bl	8009d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008094:	2102      	movs	r1, #2
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f001 fe90 	bl	8009dbc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	e000      	b.n	80080a2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80080a0:	2302      	movs	r3, #2
  }
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	ffff0000 	.word	0xffff0000
 80080b0:	080088c9 	.word	0x080088c9
 80080b4:	080098e5 	.word	0x080098e5
 80080b8:	0800997b 	.word	0x0800997b
 80080bc:	80002400 	.word	0x80002400
 80080c0:	0800848b 	.word	0x0800848b

080080c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	4608      	mov	r0, r1
 80080ce:	4611      	mov	r1, r2
 80080d0:	461a      	mov	r2, r3
 80080d2:	4603      	mov	r3, r0
 80080d4:	817b      	strh	r3, [r7, #10]
 80080d6:	460b      	mov	r3, r1
 80080d8:	813b      	strh	r3, [r7, #8]
 80080da:	4613      	mov	r3, r2
 80080dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	f040 80fd 	bne.w	80082e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <HAL_I2C_Mem_Read+0x34>
 80080f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d105      	bne.n	8008104 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e0f1      	b.n	80082e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_I2C_Mem_Read+0x4e>
 800810e:	2302      	movs	r3, #2
 8008110:	e0ea      	b.n	80082e8 <HAL_I2C_Mem_Read+0x224>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800811a:	f7fd f979 	bl	8005410 <HAL_GetTick>
 800811e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	2319      	movs	r3, #25
 8008126:	2201      	movs	r2, #1
 8008128:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f001 fc59 	bl	80099e4 <I2C_WaitOnFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e0d5      	b.n	80082e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2222      	movs	r2, #34	@ 0x22
 8008140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2240      	movs	r2, #64	@ 0x40
 8008148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a3a      	ldr	r2, [r7, #32]
 8008156:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800815c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008164:	88f8      	ldrh	r0, [r7, #6]
 8008166:	893a      	ldrh	r2, [r7, #8]
 8008168:	8979      	ldrh	r1, [r7, #10]
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	4603      	mov	r3, r0
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fe8f 	bl	8008e98 <I2C_RequestMemoryRead>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e0ad      	b.n	80082e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008190:	b29b      	uxth	r3, r3
 8008192:	2bff      	cmp	r3, #255	@ 0xff
 8008194:	d90e      	bls.n	80081b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	22ff      	movs	r2, #255	@ 0xff
 800819a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	8979      	ldrh	r1, [r7, #10]
 80081a4:	4b52      	ldr	r3, [pc, #328]	@ (80082f0 <HAL_I2C_Mem_Read+0x22c>)
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f001 fdd3 	bl	8009d58 <I2C_TransferConfig>
 80081b2:	e00f      	b.n	80081d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	8979      	ldrh	r1, [r7, #10]
 80081c6:	4b4a      	ldr	r3, [pc, #296]	@ (80082f0 <HAL_I2C_Mem_Read+0x22c>)
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f001 fdc2 	bl	8009d58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	2200      	movs	r2, #0
 80081dc:	2104      	movs	r1, #4
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f001 fc00 	bl	80099e4 <I2C_WaitOnFlagUntilTimeout>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e07c      	b.n	80082e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f8:	b2d2      	uxtb	r2, r2
 80081fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800820a:	3b01      	subs	r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d034      	beq.n	8008294 <HAL_I2C_Mem_Read+0x1d0>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d130      	bne.n	8008294 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	2200      	movs	r2, #0
 800823a:	2180      	movs	r1, #128	@ 0x80
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f001 fbd1 	bl	80099e4 <I2C_WaitOnFlagUntilTimeout>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e04d      	b.n	80082e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008250:	b29b      	uxth	r3, r3
 8008252:	2bff      	cmp	r3, #255	@ 0xff
 8008254:	d90e      	bls.n	8008274 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	22ff      	movs	r2, #255	@ 0xff
 800825a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008260:	b2da      	uxtb	r2, r3
 8008262:	8979      	ldrh	r1, [r7, #10]
 8008264:	2300      	movs	r3, #0
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f001 fd73 	bl	8009d58 <I2C_TransferConfig>
 8008272:	e00f      	b.n	8008294 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008282:	b2da      	uxtb	r2, r3
 8008284:	8979      	ldrh	r1, [r7, #10]
 8008286:	2300      	movs	r3, #0
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f001 fd62 	bl	8009d58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d19a      	bne.n	80081d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f001 fc34 	bl	8009b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e01a      	b.n	80082e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2220      	movs	r2, #32
 80082b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6859      	ldr	r1, [r3, #4]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <HAL_I2C_Mem_Read+0x230>)
 80082c6:	400b      	ands	r3, r1
 80082c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	e000      	b.n	80082e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80082e6:	2302      	movs	r3, #2
  }
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	80002400 	.word	0x80002400
 80082f4:	fe00e800 	.word	0xfe00e800

080082f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
  }
}
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00f      	beq.n	800836e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835c:	f043 0201 	orr.w	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800836c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00f      	beq.n	8008398 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008386:	f043 0208 	orr.w	r2, r3, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008396:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00f      	beq.n	80083c2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b0:	f043 0202 	orr.w	r2, r3, #2
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f003 030b 	and.w	r3, r3, #11
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 f8ff 	bl	80095d8 <I2C_ITError>
  }
}
 80083da:	bf00      	nop
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
 8008416:	4613      	mov	r3, r2
 8008418:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800846a:	bf00      	nop
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b088      	sub	sp, #32
 800848e:	af02      	add	r7, sp, #8
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <I2C_Master_ISR_IT+0x1e>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e113      	b.n	80086d0 <I2C_Master_ISR_IT+0x246>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f003 0310 	and.w	r3, r3, #16
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d012      	beq.n	80084e0 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00d      	beq.n	80084e0 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2210      	movs	r2, #16
 80084ca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d0:	f043 0204 	orr.w	r2, r3, #4
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f001 f994 	bl	8009806 <I2C_Flush_TXDR>
 80084de:	e0e4      	b.n	80086aa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d022      	beq.n	8008530 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01d      	beq.n	8008530 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f023 0304 	bic.w	r3, r3, #4
 80084fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008518:	3b01      	subs	r3, #1
 800851a:	b29a      	uxth	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008524:	b29b      	uxth	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800852e:	e0bc      	b.n	80086aa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d128      	bne.n	800858c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008540:	2b00      	cmp	r3, #0
 8008542:	d023      	beq.n	800858c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800854a:	2b00      	cmp	r3, #0
 800854c:	d01e      	beq.n	800858c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80a8 	beq.w	80086aa <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855e:	781a      	ldrb	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008574:	3b01      	subs	r3, #1
 8008576:	b29a      	uxth	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800858a:	e08e      	b.n	80086aa <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008592:	2b00      	cmp	r3, #0
 8008594:	d05c      	beq.n	8008650 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800859c:	2b00      	cmp	r3, #0
 800859e:	d057      	beq.n	8008650 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d040      	beq.n	800862c <I2C_Master_ISR_IT+0x1a2>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d13c      	bne.n	800862c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085be:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2bff      	cmp	r3, #255	@ 0xff
 80085c8:	d90e      	bls.n	80085e8 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	22ff      	movs	r2, #255	@ 0xff
 80085ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	8a79      	ldrh	r1, [r7, #18]
 80085d8:	2300      	movs	r3, #0
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f001 fbb9 	bl	8009d58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085e6:	e032      	b.n	800864e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085fa:	d00b      	beq.n	8008614 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008600:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008606:	8a79      	ldrh	r1, [r7, #18]
 8008608:	2000      	movs	r0, #0
 800860a:	9000      	str	r0, [sp, #0]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f001 fba3 	bl	8009d58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008612:	e01c      	b.n	800864e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008618:	b2da      	uxtb	r2, r3
 800861a:	8a79      	ldrh	r1, [r7, #18]
 800861c:	2300      	movs	r3, #0
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f001 fb97 	bl	8009d58 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800862a:	e010      	b.n	800864e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800863a:	d003      	beq.n	8008644 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 fd03 	bl	8009048 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008642:	e032      	b.n	80086aa <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008644:	2140      	movs	r1, #64	@ 0x40
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 ffc6 	bl	80095d8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800864c:	e02d      	b.n	80086aa <I2C_Master_ISR_IT+0x220>
 800864e:	e02c      	b.n	80086aa <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d027      	beq.n	80086aa <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008660:	2b00      	cmp	r3, #0
 8008662:	d022      	beq.n	80086aa <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008668:	b29b      	uxth	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d119      	bne.n	80086a2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008678:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800867c:	d015      	beq.n	80086aa <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008682:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008686:	d108      	bne.n	800869a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008696:	605a      	str	r2, [r3, #4]
 8008698:	e007      	b.n	80086aa <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 fcd4 	bl	8009048 <I2C_ITMasterSeqCplt>
 80086a0:	e003      	b.n	80086aa <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80086a2:	2140      	movs	r1, #64	@ 0x40
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 ff97 	bl	80095d8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80086be:	6979      	ldr	r1, [r7, #20]
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fd5b 	bl	800917c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <I2C_Slave_ISR_IT+0x24>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e0e1      	b.n	80088c0 <I2C_Slave_ISR_IT+0x1e8>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008714:	2b00      	cmp	r3, #0
 8008716:	d003      	beq.n	8008720 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008718:	6939      	ldr	r1, [r7, #16]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fdf6 	bl	800930c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	2b00      	cmp	r3, #0
 8008728:	d04b      	beq.n	80087c2 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008730:	2b00      	cmp	r3, #0
 8008732:	d046      	beq.n	80087c2 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008738:	b29b      	uxth	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d128      	bne.n	8008790 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b28      	cmp	r3, #40	@ 0x28
 8008748:	d108      	bne.n	800875c <I2C_Slave_ISR_IT+0x84>
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008750:	d104      	bne.n	800875c <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008752:	6939      	ldr	r1, [r7, #16]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 feeb 	bl	8009530 <I2C_ITListenCplt>
 800875a:	e031      	b.n	80087c0 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b29      	cmp	r3, #41	@ 0x29
 8008766:	d10e      	bne.n	8008786 <I2C_Slave_ISR_IT+0xae>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800876e:	d00a      	beq.n	8008786 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2210      	movs	r2, #16
 8008776:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 f844 	bl	8009806 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 fc9f 	bl	80090c2 <I2C_ITSlaveSeqCplt>
 8008784:	e01c      	b.n	80087c0 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2210      	movs	r2, #16
 800878c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800878e:	e08f      	b.n	80088b0 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2210      	movs	r2, #16
 8008796:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879c:	f043 0204 	orr.w	r2, r3, #4
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <I2C_Slave_ISR_IT+0xda>
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087b0:	d17e      	bne.n	80088b0 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b6:	4619      	mov	r1, r3
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 ff0d 	bl	80095d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80087be:	e077      	b.n	80088b0 <I2C_Slave_ISR_IT+0x1d8>
 80087c0:	e076      	b.n	80088b0 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d02f      	beq.n	800882c <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d02a      	beq.n	800882c <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d018      	beq.n	8008812 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ea:	b2d2      	uxtb	r2, r2
 80087ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008808:	b29b      	uxth	r3, r3
 800880a:	3b01      	subs	r3, #1
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d14b      	bne.n	80088b4 <I2C_Slave_ISR_IT+0x1dc>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008822:	d047      	beq.n	80088b4 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fc4c 	bl	80090c2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800882a:	e043      	b.n	80088b4 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f003 0308 	and.w	r3, r3, #8
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800883c:	2b00      	cmp	r3, #0
 800883e:	d004      	beq.n	800884a <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008840:	6939      	ldr	r1, [r7, #16]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fb7c 	bl	8008f40 <I2C_ITAddrCplt>
 8008848:	e035      	b.n	80088b6 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d030      	beq.n	80088b6 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02b      	beq.n	80088b6 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	d018      	beq.n	800889a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008882:	b29b      	uxth	r3, r3
 8008884:	3b01      	subs	r3, #1
 8008886:	b29a      	uxth	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008898:	e00d      	b.n	80088b6 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088a0:	d002      	beq.n	80088a8 <I2C_Slave_ISR_IT+0x1d0>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 fc0a 	bl	80090c2 <I2C_ITSlaveSeqCplt>
 80088ae:	e002      	b.n	80088b6 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80088b0:	bf00      	nop
 80088b2:	e000      	b.n	80088b6 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80088b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <I2C_Master_ISR_DMA+0x1a>
 80088de:	2302      	movs	r3, #2
 80088e0:	e0d9      	b.n	8008a96 <I2C_Master_ISR_DMA+0x1ce>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d016      	beq.n	8008922 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2210      	movs	r2, #16
 8008904:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890a:	f043 0204 	orr.w	r2, r3, #4
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008912:	2120      	movs	r1, #32
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f001 fa51 	bl	8009dbc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 ff73 	bl	8009806 <I2C_Flush_TXDR>
 8008920:	e0b4      	b.n	8008a8c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008928:	2b00      	cmp	r3, #0
 800892a:	d071      	beq.n	8008a10 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008932:	2b00      	cmp	r3, #0
 8008934:	d06c      	beq.n	8008a10 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008944:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800894a:	b29b      	uxth	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d04e      	beq.n	80089ee <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b29b      	uxth	r3, r3
 8008958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800895c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008962:	b29b      	uxth	r3, r3
 8008964:	2bff      	cmp	r3, #255	@ 0xff
 8008966:	d906      	bls.n	8008976 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	22ff      	movs	r2, #255	@ 0xff
 800896c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800896e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	e010      	b.n	8008998 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008988:	d003      	beq.n	8008992 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	e002      	b.n	8008998 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008996:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800899c:	b2da      	uxtb	r2, r3
 800899e:	8a79      	ldrh	r1, [r7, #18]
 80089a0:	2300      	movs	r3, #0
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f001 f9d6 	bl	8009d58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b22      	cmp	r3, #34	@ 0x22
 80089c8:	d108      	bne.n	80089dc <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80089da:	e057      	b.n	8008a8c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80089ec:	e04e      	b.n	8008a8c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089fc:	d003      	beq.n	8008a06 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fb22 	bl	8009048 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008a04:	e042      	b.n	8008a8c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a06:	2140      	movs	r1, #64	@ 0x40
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fde5 	bl	80095d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008a0e:	e03d      	b.n	8008a8c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d028      	beq.n	8008a6c <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d023      	beq.n	8008a6c <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d119      	bne.n	8008a62 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a3c:	d025      	beq.n	8008a8a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a46:	d108      	bne.n	8008a5a <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a56:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008a58:	e017      	b.n	8008a8a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 faf4 	bl	8009048 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008a60:	e013      	b.n	8008a8a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a62:	2140      	movs	r1, #64	@ 0x40
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fdb7 	bl	80095d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008a6a:	e00e      	b.n	8008a8a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f003 0320 	and.w	r3, r3, #32
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d005      	beq.n	8008a8c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fb7a 	bl	800917c <I2C_ITMasterCplt>
 8008a88:	e000      	b.n	8008a8c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8008a8a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008aac:	4b8d      	ldr	r3, [pc, #564]	@ (8008ce4 <I2C_Mem_ISR_DMA+0x244>)
 8008aae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d101      	bne.n	8008abe <I2C_Mem_ISR_DMA+0x1e>
 8008aba:	2302      	movs	r3, #2
 8008abc:	e10e      	b.n	8008cdc <I2C_Mem_ISR_DMA+0x23c>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d016      	beq.n	8008afe <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d011      	beq.n	8008afe <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2210      	movs	r2, #16
 8008ae0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae6:	f043 0204 	orr.w	r2, r3, #4
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008aee:	2120      	movs	r1, #32
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f001 f963 	bl	8009dbc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fe85 	bl	8009806 <I2C_Flush_TXDR>
 8008afc:	e0e9      	b.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00e      	beq.n	8008b26 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d009      	beq.n	8008b26 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b22:	651a      	str	r2, [r3, #80]	@ 0x50
 8008b24:	e0d5      	b.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d05f      	beq.n	8008bf0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d05a      	beq.n	8008bf0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f001 f9c1 	bl	8009ec4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008b42:	2110      	movs	r1, #16
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f001 f939 	bl	8009dbc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d048      	beq.n	8008be6 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	2bff      	cmp	r3, #255	@ 0xff
 8008b5c:	d910      	bls.n	8008b80 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	22ff      	movs	r2, #255	@ 0xff
 8008b62:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b68:	b299      	uxth	r1, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	2300      	movs	r3, #0
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f001 f8ed 	bl	8009d58 <I2C_TransferConfig>
 8008b7e:	e011      	b.n	8008ba4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b8e:	b299      	uxth	r1, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	2300      	movs	r3, #0
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f001 f8da 	bl	8009d58 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b22      	cmp	r3, #34	@ 0x22
 8008bc0:	d108      	bne.n	8008bd4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bd0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008bd2:	e07e      	b.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008be2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008be4:	e075      	b.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008be6:	2140      	movs	r1, #64	@ 0x40
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 fcf5 	bl	80095d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008bee:	e070      	b.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d05d      	beq.n	8008cb6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d058      	beq.n	8008cb6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c04:	2101      	movs	r1, #1
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f001 f95c 	bl	8009ec4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008c0c:	2110      	movs	r1, #16
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f001 f8d4 	bl	8009dbc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b22      	cmp	r3, #34	@ 0x22
 8008c1e:	d101      	bne.n	8008c24 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8008c20:	4b31      	ldr	r3, [pc, #196]	@ (8008ce8 <I2C_Mem_ISR_DMA+0x248>)
 8008c22:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2bff      	cmp	r3, #255	@ 0xff
 8008c2c:	d910      	bls.n	8008c50 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	22ff      	movs	r2, #255	@ 0xff
 8008c32:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c38:	b299      	uxth	r1, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f001 f885 	bl	8009d58 <I2C_TransferConfig>
 8008c4e:	e011      	b.n	8008c74 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c5e:	b299      	uxth	r1, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 f872 	bl	8009d58 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b22      	cmp	r3, #34	@ 0x22
 8008c90:	d108      	bne.n	8008ca4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ca0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ca2:	e016      	b.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cb2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cb4:	e00d      	b.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fa55 	bl	800917c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	80002000 	.word	0x80002000
 8008ce8:	80002400 	.word	0x80002400

08008cec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <I2C_Slave_ISR_DMA+0x24>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e0bf      	b.n	8008e90 <I2C_Slave_ISR_DMA+0x1a4>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 faec 	bl	800930c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f003 0310 	and.w	r3, r3, #16
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 8095 	beq.w	8008e6a <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 808f 	beq.w	8008e6a <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d07d      	beq.n	8008e5c <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d007      	beq.n	8008d82 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00c      	beq.n	8008da4 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d007      	beq.n	8008da4 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8008da0:	2301      	movs	r3, #1
 8008da2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d128      	bne.n	8008dfc <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b28      	cmp	r3, #40	@ 0x28
 8008db4:	d108      	bne.n	8008dc8 <I2C_Slave_ISR_DMA+0xdc>
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dbc:	d104      	bne.n	8008dc8 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008dbe:	68b9      	ldr	r1, [r7, #8]
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 fbb5 	bl	8009530 <I2C_ITListenCplt>
 8008dc6:	e048      	b.n	8008e5a <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b29      	cmp	r3, #41	@ 0x29
 8008dd2:	d10e      	bne.n	8008df2 <I2C_Slave_ISR_DMA+0x106>
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008dda:	d00a      	beq.n	8008df2 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2210      	movs	r2, #16
 8008de2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 fd0e 	bl	8009806 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 f969 	bl	80090c2 <I2C_ITSlaveSeqCplt>
 8008df0:	e033      	b.n	8008e5a <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2210      	movs	r2, #16
 8008df8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008dfa:	e034      	b.n	8008e66 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2210      	movs	r2, #16
 8008e02:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e08:	f043 0204 	orr.w	r2, r3, #4
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e16:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <I2C_Slave_ISR_DMA+0x13a>
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e24:	d11f      	bne.n	8008e66 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b21      	cmp	r3, #33	@ 0x21
 8008e2a:	d002      	beq.n	8008e32 <I2C_Slave_ISR_DMA+0x146>
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	2b29      	cmp	r3, #41	@ 0x29
 8008e30:	d103      	bne.n	8008e3a <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2221      	movs	r2, #33	@ 0x21
 8008e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e38:	e008      	b.n	8008e4c <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b22      	cmp	r3, #34	@ 0x22
 8008e3e:	d002      	beq.n	8008e46 <I2C_Slave_ISR_DMA+0x15a>
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e44:	d102      	bne.n	8008e4c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2222      	movs	r2, #34	@ 0x22
 8008e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e50:	4619      	mov	r1, r3
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 fbc0 	bl	80095d8 <I2C_ITError>
      if (treatdmanack == 1U)
 8008e58:	e005      	b.n	8008e66 <I2C_Slave_ISR_DMA+0x17a>
 8008e5a:	e004      	b.n	8008e66 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2210      	movs	r2, #16
 8008e62:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e64:	e00f      	b.n	8008e86 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8008e66:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e68:	e00d      	b.n	8008e86 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f003 0308 	and.w	r3, r3, #8
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d008      	beq.n	8008e86 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 f85d 	bl	8008f40 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	817b      	strh	r3, [r7, #10]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	813b      	strh	r3, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008eb2:	88fb      	ldrh	r3, [r7, #6]
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	8979      	ldrh	r1, [r7, #10]
 8008eb8:	4b20      	ldr	r3, [pc, #128]	@ (8008f3c <I2C_RequestMemoryRead+0xa4>)
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 ff4a 	bl	8009d58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	69b9      	ldr	r1, [r7, #24]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 fdda 	bl	8009a82 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e02c      	b.n	8008f32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ed8:	88fb      	ldrh	r3, [r7, #6]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d105      	bne.n	8008eea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ede:	893b      	ldrh	r3, [r7, #8]
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ee8:	e015      	b.n	8008f16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008eea:	893b      	ldrh	r3, [r7, #8]
 8008eec:	0a1b      	lsrs	r3, r3, #8
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	69b9      	ldr	r1, [r7, #24]
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 fdc0 	bl	8009a82 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e012      	b.n	8008f32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f0c:	893b      	ldrh	r3, [r7, #8]
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2140      	movs	r1, #64	@ 0x40
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fd5f 	bl	80099e4 <I2C_WaitOnFlagUntilTimeout>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e000      	b.n	8008f32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	80002000 	.word	0x80002000

08008f40 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f56:	2b28      	cmp	r3, #40	@ 0x28
 8008f58:	d16a      	bne.n	8009030 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	0c1b      	lsrs	r3, r3, #16
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008f78:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f86:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008f94:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d138      	bne.n	8009010 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008f9e:	897b      	ldrh	r3, [r7, #10]
 8008fa0:	09db      	lsrs	r3, r3, #7
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	89bb      	ldrh	r3, [r7, #12]
 8008fa6:	4053      	eors	r3, r2
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	f003 0306 	and.w	r3, r3, #6
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d11c      	bne.n	8008fec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008fb2:	897b      	ldrh	r3, [r7, #10]
 8008fb4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fba:	1c5a      	adds	r2, r3, #1
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d13b      	bne.n	8009040 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008fde:	89ba      	ldrh	r2, [r7, #12]
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7ff fa10 	bl	800840a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008fea:	e029      	b.n	8009040 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008fec:	893b      	ldrh	r3, [r7, #8]
 8008fee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008ff0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 ff65 	bl	8009ec4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009002:	89ba      	ldrh	r2, [r7, #12]
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff f9fe 	bl	800840a <HAL_I2C_AddrCallback>
}
 800900e:	e017      	b.n	8009040 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009010:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 ff55 	bl	8009ec4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009022:	89ba      	ldrh	r2, [r7, #12]
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff f9ee 	bl	800840a <HAL_I2C_AddrCallback>
}
 800902e:	e007      	b.n	8009040 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2208      	movs	r2, #8
 8009036:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b21      	cmp	r3, #33	@ 0x21
 8009062:	d115      	bne.n	8009090 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2211      	movs	r2, #17
 8009070:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009078:	2101      	movs	r1, #1
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 ff22 	bl	8009ec4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fb faaf 	bl	80045ec <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800908e:	e014      	b.n	80090ba <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2220      	movs	r2, #32
 8009094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2212      	movs	r2, #18
 800909c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80090a4:	2102      	movs	r1, #2
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 ff0c 	bl	8009ec4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7fb faa9 	bl	800460c <HAL_I2C_MasterRxCpltCallback>
}
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d008      	beq.n	80090f6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	e00c      	b.n	8009110 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d007      	beq.n	8009110 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800910e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b29      	cmp	r3, #41	@ 0x29
 800911a:	d112      	bne.n	8009142 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2228      	movs	r2, #40	@ 0x28
 8009120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2221      	movs	r2, #33	@ 0x21
 8009128:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800912a:	2101      	movs	r1, #1
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fec9 	bl	8009ec4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff f951 	bl	80083e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009140:	e017      	b.n	8009172 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b2a      	cmp	r3, #42	@ 0x2a
 800914c:	d111      	bne.n	8009172 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2228      	movs	r2, #40	@ 0x28
 8009152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2222      	movs	r2, #34	@ 0x22
 800915a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800915c:	2102      	movs	r1, #2
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 feb0 	bl	8009ec4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff f942 	bl	80083f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2220      	movs	r2, #32
 8009190:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b21      	cmp	r3, #33	@ 0x21
 800919c:	d107      	bne.n	80091ae <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800919e:	2101      	movs	r1, #1
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fe8f 	bl	8009ec4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2211      	movs	r2, #17
 80091aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80091ac:	e00c      	b.n	80091c8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b22      	cmp	r3, #34	@ 0x22
 80091b8:	d106      	bne.n	80091c8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80091ba:	2102      	movs	r1, #2
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fe81 	bl	8009ec4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2212      	movs	r2, #18
 80091c6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6859      	ldr	r1, [r3, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4b4c      	ldr	r3, [pc, #304]	@ (8009304 <I2C_ITMasterCplt+0x188>)
 80091d4:	400b      	ands	r3, r1
 80091d6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a49      	ldr	r2, [pc, #292]	@ (8009308 <I2C_ITMasterCplt+0x18c>)
 80091e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f003 0310 	and.w	r3, r3, #16
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2210      	movs	r2, #16
 80091f4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091fa:	f043 0204 	orr.w	r2, r3, #4
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b60      	cmp	r3, #96	@ 0x60
 800920c:	d10a      	bne.n	8009224 <I2C_ITMasterCplt+0xa8>
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d005      	beq.n	8009224 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	b2db      	uxtb	r3, r3
 8009220:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009222:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 faee 	bl	8009806 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800922e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b60      	cmp	r3, #96	@ 0x60
 800923a:	d002      	beq.n	8009242 <I2C_ITMasterCplt+0xc6>
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d006      	beq.n	8009250 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f9c5 	bl	80095d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800924e:	e054      	b.n	80092fa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b21      	cmp	r3, #33	@ 0x21
 800925a:	d124      	bne.n	80092a6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2220      	movs	r2, #32
 8009260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b40      	cmp	r3, #64	@ 0x40
 8009274:	d10b      	bne.n	800928e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff f8d7 	bl	800843a <HAL_I2C_MemTxCpltCallback>
}
 800928c:	e035      	b.n	80092fa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fb f9a4 	bl	80045ec <HAL_I2C_MasterTxCpltCallback>
}
 80092a4:	e029      	b.n	80092fa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b22      	cmp	r3, #34	@ 0x22
 80092b0:	d123      	bne.n	80092fa <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2220      	movs	r2, #32
 80092b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b40      	cmp	r3, #64	@ 0x40
 80092ca:	d10b      	bne.n	80092e4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff f8b6 	bl	800844e <HAL_I2C_MemRxCpltCallback>
}
 80092e2:	e00a      	b.n	80092fa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7fb f989 	bl	800460c <HAL_I2C_MasterRxCpltCallback>
}
 80092fa:	bf00      	nop
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	fe00e800 	.word	0xfe00e800
 8009308:	ffff0000 	.word	0xffff0000

0800930c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009328:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2220      	movs	r2, #32
 8009330:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	2b21      	cmp	r3, #33	@ 0x21
 8009336:	d002      	beq.n	800933e <I2C_ITSlaveCplt+0x32>
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	2b29      	cmp	r3, #41	@ 0x29
 800933c:	d108      	bne.n	8009350 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800933e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fdbe 	bl	8009ec4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2221      	movs	r2, #33	@ 0x21
 800934c:	631a      	str	r2, [r3, #48]	@ 0x30
 800934e:	e019      	b.n	8009384 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	2b22      	cmp	r3, #34	@ 0x22
 8009354:	d002      	beq.n	800935c <I2C_ITSlaveCplt+0x50>
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	2b2a      	cmp	r3, #42	@ 0x2a
 800935a:	d108      	bne.n	800936e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800935c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fdaf 	bl	8009ec4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2222      	movs	r2, #34	@ 0x22
 800936a:	631a      	str	r2, [r3, #48]	@ 0x30
 800936c:	e00a      	b.n	8009384 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	2b28      	cmp	r3, #40	@ 0x28
 8009372:	d107      	bne.n	8009384 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009374:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fda3 	bl	8009ec4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009392:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6859      	ldr	r1, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b62      	ldr	r3, [pc, #392]	@ (8009528 <I2C_ITSlaveCplt+0x21c>)
 80093a0:	400b      	ands	r3, r1
 80093a2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa2e 	bl	8009806 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d013      	beq.n	80093dc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01f      	beq.n	800940c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093da:	e017      	b.n	800940c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d012      	beq.n	800940c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d006      	beq.n	800940c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d020      	beq.n	8009458 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f023 0304 	bic.w	r3, r3, #4
 800941c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009428:	b2d2      	uxtb	r2, r2
 800942a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00c      	beq.n	8009458 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009442:	3b01      	subs	r3, #1
 8009444:	b29a      	uxth	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800944e:	b29b      	uxth	r3, r3
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800945c:	b29b      	uxth	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009466:	f043 0204 	orr.w	r2, r3, #4
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009480:	2b00      	cmp	r3, #0
 8009482:	d010      	beq.n	80094a6 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f8a4 	bl	80095d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b28      	cmp	r3, #40	@ 0x28
 800949a:	d141      	bne.n	8009520 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800949c:	6979      	ldr	r1, [r7, #20]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f846 	bl	8009530 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094a4:	e03c      	b.n	8009520 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80094ae:	d014      	beq.n	80094da <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff fe06 	bl	80090c2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a1c      	ldr	r2, [pc, #112]	@ (800952c <I2C_ITSlaveCplt+0x220>)
 80094ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2220      	movs	r2, #32
 80094c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7fe ffa7 	bl	8008426 <HAL_I2C_ListenCpltCallback>
}
 80094d8:	e022      	b.n	8009520 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b22      	cmp	r3, #34	@ 0x22
 80094e4:	d10e      	bne.n	8009504 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7fe ff7a 	bl	80083f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8009502:	e00d      	b.n	8009520 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fe ff61 	bl	80083e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8009520:	bf00      	nop
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	fe00e800 	.word	0xfe00e800
 800952c:	ffff0000 	.word	0xffff0000

08009530 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a25      	ldr	r2, [pc, #148]	@ (80095d4 <I2C_ITListenCplt+0xa4>)
 800953e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2220      	movs	r2, #32
 800954a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	f003 0304 	and.w	r3, r3, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	d022      	beq.n	80095ac <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009570:	b2d2      	uxtb	r2, r2
 8009572:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009578:	1c5a      	adds	r2, r3, #1
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	d012      	beq.n	80095ac <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800958a:	3b01      	subs	r3, #1
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009596:	b29b      	uxth	r3, r3
 8009598:	3b01      	subs	r3, #1
 800959a:	b29a      	uxth	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095a4:	f043 0204 	orr.w	r2, r3, #4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80095ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fc87 	bl	8009ec4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2210      	movs	r2, #16
 80095bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7fe ff2d 	bl	8008426 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80095cc:	bf00      	nop
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	ffff0000 	.word	0xffff0000

080095d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095e8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a6d      	ldr	r2, [pc, #436]	@ (80097ac <I2C_ITError+0x1d4>)
 80095f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	431a      	orrs	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	2b28      	cmp	r3, #40	@ 0x28
 800960e:	d005      	beq.n	800961c <I2C_ITError+0x44>
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	2b29      	cmp	r3, #41	@ 0x29
 8009614:	d002      	beq.n	800961c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b2a      	cmp	r3, #42	@ 0x2a
 800961a:	d10b      	bne.n	8009634 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800961c:	2103      	movs	r1, #3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fc50 	bl	8009ec4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2228      	movs	r2, #40	@ 0x28
 8009628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a60      	ldr	r2, [pc, #384]	@ (80097b0 <I2C_ITError+0x1d8>)
 8009630:	635a      	str	r2, [r3, #52]	@ 0x34
 8009632:	e030      	b.n	8009696 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009634:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fc43 	bl	8009ec4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f8e1 	bl	8009806 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b60      	cmp	r3, #96	@ 0x60
 800964e:	d01f      	beq.n	8009690 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b20      	cmp	r3, #32
 8009664:	d114      	bne.n	8009690 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f003 0310 	and.w	r3, r3, #16
 8009670:	2b10      	cmp	r3, #16
 8009672:	d109      	bne.n	8009688 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2210      	movs	r2, #16
 800967a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009680:	f043 0204 	orr.w	r2, r3, #4
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2220      	movs	r2, #32
 800968e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d039      	beq.n	8009718 <I2C_ITError+0x140>
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b11      	cmp	r3, #17
 80096a8:	d002      	beq.n	80096b0 <I2C_ITError+0xd8>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b21      	cmp	r3, #33	@ 0x21
 80096ae:	d133      	bne.n	8009718 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096be:	d107      	bne.n	80096d0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80096ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fd ff63 	bl	80075a0 <HAL_DMA_GetState>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d017      	beq.n	8009710 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e4:	4a33      	ldr	r2, [pc, #204]	@ (80097b4 <I2C_ITError+0x1dc>)
 80096e6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fd fe63 	bl	80073c0 <HAL_DMA_Abort_IT>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d04d      	beq.n	800979c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800970a:	4610      	mov	r0, r2
 800970c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800970e:	e045      	b.n	800979c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f851 	bl	80097b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009716:	e041      	b.n	800979c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800971c:	2b00      	cmp	r3, #0
 800971e:	d039      	beq.n	8009794 <I2C_ITError+0x1bc>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b12      	cmp	r3, #18
 8009724:	d002      	beq.n	800972c <I2C_ITError+0x154>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b22      	cmp	r3, #34	@ 0x22
 800972a:	d133      	bne.n	8009794 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800973a:	d107      	bne.n	800974c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800974a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009750:	4618      	mov	r0, r3
 8009752:	f7fd ff25 	bl	80075a0 <HAL_DMA_GetState>
 8009756:	4603      	mov	r3, r0
 8009758:	2b01      	cmp	r3, #1
 800975a:	d017      	beq.n	800978c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009760:	4a14      	ldr	r2, [pc, #80]	@ (80097b4 <I2C_ITError+0x1dc>)
 8009762:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009770:	4618      	mov	r0, r3
 8009772:	f7fd fe25 	bl	80073c0 <HAL_DMA_Abort_IT>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d011      	beq.n	80097a0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009786:	4610      	mov	r0, r2
 8009788:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800978a:	e009      	b.n	80097a0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f813 	bl	80097b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009792:	e005      	b.n	80097a0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f80f 	bl	80097b8 <I2C_TreatErrorCallback>
  }
}
 800979a:	e002      	b.n	80097a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800979c:	bf00      	nop
 800979e:	e000      	b.n	80097a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097a0:	bf00      	nop
}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	ffff0000 	.word	0xffff0000
 80097b0:	080086d9 	.word	0x080086d9
 80097b4:	080099a9 	.word	0x080099a9

080097b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b60      	cmp	r3, #96	@ 0x60
 80097ca:	d10e      	bne.n	80097ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7fe fe47 	bl	8008476 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80097e8:	e009      	b.n	80097fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7fe fe32 	bl	8008462 <HAL_I2C_ErrorCallback>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b02      	cmp	r3, #2
 800981a:	d103      	bne.n	8009824 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2200      	movs	r2, #0
 8009822:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b01      	cmp	r3, #1
 8009830:	d007      	beq.n	8009842 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699a      	ldr	r2, [r3, #24]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0201 	orr.w	r2, r2, #1
 8009840:	619a      	str	r2, [r3, #24]
  }
}
 8009842:	bf00      	nop
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800986a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009870:	b29b      	uxth	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d104      	bne.n	8009880 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009876:	2120      	movs	r1, #32
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 fa9f 	bl	8009dbc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800987e:	e02d      	b.n	80098dc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009888:	441a      	add	r2, r3
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009892:	b29b      	uxth	r3, r3
 8009894:	2bff      	cmp	r3, #255	@ 0xff
 8009896:	d903      	bls.n	80098a0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	22ff      	movs	r2, #255	@ 0xff
 800989c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800989e:	e004      	b.n	80098aa <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b2:	4619      	mov	r1, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3328      	adds	r3, #40	@ 0x28
 80098ba:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80098c0:	f7fd fce0 	bl	8007284 <HAL_DMA_Start_IT>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80098ca:	2110      	movs	r1, #16
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f7ff fe83 	bl	80095d8 <I2C_ITError>
}
 80098d2:	e003      	b.n	80098dc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80098d4:	2140      	movs	r1, #64	@ 0x40
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fa70 	bl	8009dbc <I2C_Enable_IRQ>
}
 80098dc:	bf00      	nop
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009900:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d104      	bne.n	8009916 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800990c:	2120      	movs	r1, #32
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 fa54 	bl	8009dbc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009914:	e02d      	b.n	8009972 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800991e:	441a      	add	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009928:	b29b      	uxth	r3, r3
 800992a:	2bff      	cmp	r3, #255	@ 0xff
 800992c:	d903      	bls.n	8009936 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	22ff      	movs	r2, #255	@ 0xff
 8009932:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009934:	e004      	b.n	8009940 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800993a:	b29a      	uxth	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3324      	adds	r3, #36	@ 0x24
 800994a:	4619      	mov	r1, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009950:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009956:	f7fd fc95 	bl	8007284 <HAL_DMA_Start_IT>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009960:	2110      	movs	r1, #16
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff fe38 	bl	80095d8 <I2C_ITError>
}
 8009968:	e003      	b.n	8009972 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800996a:	2140      	movs	r1, #64	@ 0x40
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fa25 	bl	8009dbc <I2C_Enable_IRQ>
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009986:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009996:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009998:	2110      	movs	r1, #16
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff fe1c 	bl	80095d8 <I2C_ITError>
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c2:	2200      	movs	r2, #0
 80099c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d2:	2200      	movs	r2, #0
 80099d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7ff feee 	bl	80097b8 <I2C_TreatErrorCallback>
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	4613      	mov	r3, r2
 80099f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099f4:	e031      	b.n	8009a5a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fc:	d02d      	beq.n	8009a5a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099fe:	f7fb fd07 	bl	8005410 <HAL_GetTick>
 8009a02:	4602      	mov	r2, r0
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d302      	bcc.n	8009a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d122      	bne.n	8009a5a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	bf0c      	ite	eq
 8009a24:	2301      	moveq	r3, #1
 8009a26:	2300      	movne	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d113      	bne.n	8009a5a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a36:	f043 0220 	orr.w	r2, r3, #32
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e00f      	b.n	8009a7a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	699a      	ldr	r2, [r3, #24]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4013      	ands	r3, r2
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	bf0c      	ite	eq
 8009a6a:	2301      	moveq	r3, #1
 8009a6c:	2300      	movne	r3, #0
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	461a      	mov	r2, r3
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d0be      	beq.n	80099f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a8e:	e033      	b.n	8009af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f87f 	bl	8009b98 <I2C_IsErrorOccurred>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e031      	b.n	8009b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aaa:	d025      	beq.n	8009af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aac:	f7fb fcb0 	bl	8005410 <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d302      	bcc.n	8009ac2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d11a      	bne.n	8009af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d013      	beq.n	8009af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ad4:	f043 0220 	orr.w	r2, r3, #32
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e007      	b.n	8009b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	f003 0302 	and.w	r3, r3, #2
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d1c4      	bne.n	8009a90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b1c:	e02f      	b.n	8009b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	68b9      	ldr	r1, [r7, #8]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f838 	bl	8009b98 <I2C_IsErrorOccurred>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e02d      	b.n	8009b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b32:	f7fb fc6d 	bl	8005410 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d302      	bcc.n	8009b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d11a      	bne.n	8009b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	2b20      	cmp	r3, #32
 8009b54:	d013      	beq.n	8009b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b5a:	f043 0220 	orr.w	r2, r3, #32
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e007      	b.n	8009b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	f003 0320 	and.w	r3, r3, #32
 8009b88:	2b20      	cmp	r3, #32
 8009b8a:	d1c8      	bne.n	8009b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	@ 0x28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	f003 0310 	and.w	r3, r3, #16
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d068      	beq.n	8009c96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2210      	movs	r2, #16
 8009bca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009bcc:	e049      	b.n	8009c62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd4:	d045      	beq.n	8009c62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009bd6:	f7fb fc1b 	bl	8005410 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d302      	bcc.n	8009bec <I2C_IsErrorOccurred+0x54>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d13a      	bne.n	8009c62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c0e:	d121      	bne.n	8009c54 <I2C_IsErrorOccurred+0xbc>
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c16:	d01d      	beq.n	8009c54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c18:	7cfb      	ldrb	r3, [r7, #19]
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d01a      	beq.n	8009c54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c2e:	f7fb fbef 	bl	8005410 <HAL_GetTick>
 8009c32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c34:	e00e      	b.n	8009c54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c36:	f7fb fbeb 	bl	8005410 <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	2b19      	cmp	r3, #25
 8009c42:	d907      	bls.n	8009c54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	f043 0320 	orr.w	r3, r3, #32
 8009c4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009c52:	e006      	b.n	8009c62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d1e9      	bne.n	8009c36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	f003 0320 	and.w	r3, r3, #32
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d003      	beq.n	8009c78 <I2C_IsErrorOccurred+0xe0>
 8009c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0aa      	beq.n	8009bce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2220      	movs	r2, #32
 8009c86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	f043 0304 	orr.w	r3, r3, #4
 8009c8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	f043 0301 	orr.w	r3, r3, #1
 8009cae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	f043 0308 	orr.w	r3, r3, #8
 8009cd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009cda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00b      	beq.n	8009d04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	f043 0302 	orr.w	r3, r3, #2
 8009cf2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01c      	beq.n	8009d46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7ff fd7a 	bl	8009806 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6859      	ldr	r1, [r3, #4]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d54 <I2C_IsErrorOccurred+0x1bc>)
 8009d1e:	400b      	ands	r3, r1
 8009d20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3728      	adds	r7, #40	@ 0x28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	fe00e800 	.word	0xfe00e800

08009d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	607b      	str	r3, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	817b      	strh	r3, [r7, #10]
 8009d66:	4613      	mov	r3, r2
 8009d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d6a:	897b      	ldrh	r3, [r7, #10]
 8009d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d70:	7a7b      	ldrb	r3, [r7, #9]
 8009d72:	041b      	lsls	r3, r3, #16
 8009d74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	0d5b      	lsrs	r3, r3, #21
 8009d92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009d96:	4b08      	ldr	r3, [pc, #32]	@ (8009db8 <I2C_TransferConfig+0x60>)
 8009d98:	430b      	orrs	r3, r1
 8009d9a:	43db      	mvns	r3, r3
 8009d9c:	ea02 0103 	and.w	r1, r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	03ff63ff 	.word	0x03ff63ff

08009dbc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd0:	4a39      	ldr	r2, [pc, #228]	@ (8009eb8 <I2C_Enable_IRQ+0xfc>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d032      	beq.n	8009e3c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009dda:	4a38      	ldr	r2, [pc, #224]	@ (8009ebc <I2C_Enable_IRQ+0x100>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d02d      	beq.n	8009e3c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009de4:	4a36      	ldr	r2, [pc, #216]	@ (8009ec0 <I2C_Enable_IRQ+0x104>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d028      	beq.n	8009e3c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009dea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	da03      	bge.n	8009dfa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009df8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009dfa:	887b      	ldrh	r3, [r7, #2]
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009e0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009e0c:	887b      	ldrh	r3, [r7, #2]
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009e1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009e1e:	887b      	ldrh	r3, [r7, #2]
 8009e20:	2b10      	cmp	r3, #16
 8009e22:	d103      	bne.n	8009e2c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009e2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e2c:	887b      	ldrh	r3, [r7, #2]
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	d133      	bne.n	8009e9a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f043 0320 	orr.w	r3, r3, #32
 8009e38:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e3a:	e02e      	b.n	8009e9a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009e3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	da03      	bge.n	8009e4c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009e4a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009e4c:	887b      	ldrh	r3, [r7, #2]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009e5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009e5e:	887b      	ldrh	r3, [r7, #2]
 8009e60:	f003 0302 	and.w	r3, r3, #2
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009e6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009e70:	887b      	ldrh	r3, [r7, #2]
 8009e72:	2b10      	cmp	r3, #16
 8009e74:	d103      	bne.n	8009e7e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009e7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e7e:	887b      	ldrh	r3, [r7, #2]
 8009e80:	2b20      	cmp	r3, #32
 8009e82:	d103      	bne.n	8009e8c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009e8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009e8c:	887b      	ldrh	r3, [r7, #2]
 8009e8e:	2b40      	cmp	r3, #64	@ 0x40
 8009e90:	d103      	bne.n	8009e9a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e98:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6819      	ldr	r1, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	601a      	str	r2, [r3, #0]
}
 8009eaa:	bf00      	nop
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	080088c9 	.word	0x080088c9
 8009ebc:	08008ced 	.word	0x08008ced
 8009ec0:	08008aa1 	.word	0x08008aa1

08009ec4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009ed4:	887b      	ldrh	r3, [r7, #2]
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00f      	beq.n	8009efe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009ee4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009ef2:	2b28      	cmp	r3, #40	@ 0x28
 8009ef4:	d003      	beq.n	8009efe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009efc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009efe:	887b      	ldrh	r3, [r7, #2]
 8009f00:	f003 0302 	and.w	r3, r3, #2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00f      	beq.n	8009f28 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009f0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009f1c:	2b28      	cmp	r3, #40	@ 0x28
 8009f1e:	d003      	beq.n	8009f28 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009f26:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	da03      	bge.n	8009f38 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009f36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009f38:	887b      	ldrh	r3, [r7, #2]
 8009f3a:	2b10      	cmp	r3, #16
 8009f3c:	d103      	bne.n	8009f46 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009f44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009f46:	887b      	ldrh	r3, [r7, #2]
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d103      	bne.n	8009f54 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f043 0320 	orr.w	r3, r3, #32
 8009f52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009f54:	887b      	ldrh	r3, [r7, #2]
 8009f56:	2b40      	cmp	r3, #64	@ 0x40
 8009f58:	d103      	bne.n	8009f62 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f60:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6819      	ldr	r1, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	43da      	mvns	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	400a      	ands	r2, r1
 8009f72:	601a      	str	r2, [r3, #0]
}
 8009f74:	bf00      	nop
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	d138      	bne.n	800a008 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	e032      	b.n	800a00a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2224      	movs	r2, #36	@ 0x24
 8009fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0201 	bic.w	r2, r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009fd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6819      	ldr	r1, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0201 	orr.w	r2, r2, #1
 8009ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	e000      	b.n	800a00a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a008:	2302      	movs	r3, #2
  }
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a016:	b480      	push	{r7}
 800a018:	b085      	sub	sp, #20
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d139      	bne.n	800a0a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a036:	2302      	movs	r3, #2
 800a038:	e033      	b.n	800a0a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2224      	movs	r2, #36	@ 0x24
 800a046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 0201 	bic.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a068:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f042 0201 	orr.w	r2, r2, #1
 800a08a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2220      	movs	r2, #32
 800a090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	e000      	b.n	800a0a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a0a0:	2302      	movs	r3, #2
  }
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e038      	b.n	800a132 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800a0c8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f245 5255 	movw	r2, #21845	@ 0x5555
 800a0d2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	6852      	ldr	r2, [r2, #4]
 800a0dc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	6892      	ldr	r2, [r2, #8]
 800a0e6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a0e8:	f7fb f992 	bl	8005410 <HAL_GetTick>
 800a0ec:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800a0ee:	e008      	b.n	800a102 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a0f0:	f7fb f98e 	bl	8005410 <HAL_GetTick>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	2b30      	cmp	r3, #48	@ 0x30
 800a0fc:	d901      	bls.n	800a102 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e017      	b.n	800a132 <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f1      	bne.n	800a0f0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	691a      	ldr	r2, [r3, #16]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	429a      	cmp	r2, r3
 800a118:	d005      	beq.n	800a126 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	68d2      	ldr	r2, [r2, #12]
 800a122:	611a      	str	r2, [r3, #16]
 800a124:	e004      	b.n	800a130 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800a12e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800a14a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
	...

0800a15c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10c      	bne.n	800a188 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a16e:	4b13      	ldr	r3, [pc, #76]	@ (800a1bc <HAL_PWR_EnterSLEEPMode+0x60>)
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a17a:	d10e      	bne.n	800a19a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800a17c:	f000 f896 	bl	800a2ac <HAL_PWREx_DisableLowPowerRunMode>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d009      	beq.n	800a19a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800a186:	e016      	b.n	800a1b6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800a188:	4b0c      	ldr	r3, [pc, #48]	@ (800a1bc <HAL_PWR_EnterSLEEPMode+0x60>)
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a194:	d001      	beq.n	800a19a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800a196:	f000 f879 	bl	800a28c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a19a:	4b09      	ldr	r3, [pc, #36]	@ (800a1c0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	4a08      	ldr	r2, [pc, #32]	@ (800a1c0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a1a0:	f023 0304 	bic.w	r3, r3, #4
 800a1a4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d101      	bne.n	800a1b0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800a1ac:	bf30      	wfi
 800a1ae:	e002      	b.n	800a1b6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a1b0:	bf40      	sev
    __WFE();
 800a1b2:	bf20      	wfe
    __WFE();
 800a1b4:	bf20      	wfe
  }

}
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	40007000 	.word	0x40007000
 800a1c0:	e000ed00 	.word	0xe000ed00

0800a1c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a1c8:	4b04      	ldr	r3, [pc, #16]	@ (800a1dc <HAL_PWREx_GetVoltageRange+0x18>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	40007000 	.word	0x40007000

0800a1e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1ee:	d130      	bne.n	800a252 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1f0:	4b23      	ldr	r3, [pc, #140]	@ (800a280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a1f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1fc:	d038      	beq.n	800a270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a1fe:	4b20      	ldr	r3, [pc, #128]	@ (800a280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a206:	4a1e      	ldr	r2, [pc, #120]	@ (800a280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a208:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a20c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a20e:	4b1d      	ldr	r3, [pc, #116]	@ (800a284 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2232      	movs	r2, #50	@ 0x32
 800a214:	fb02 f303 	mul.w	r3, r2, r3
 800a218:	4a1b      	ldr	r2, [pc, #108]	@ (800a288 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a21a:	fba2 2303 	umull	r2, r3, r2, r3
 800a21e:	0c9b      	lsrs	r3, r3, #18
 800a220:	3301      	adds	r3, #1
 800a222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a224:	e002      	b.n	800a22c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3b01      	subs	r3, #1
 800a22a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a22c:	4b14      	ldr	r3, [pc, #80]	@ (800a280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a238:	d102      	bne.n	800a240 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1f2      	bne.n	800a226 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a240:	4b0f      	ldr	r3, [pc, #60]	@ (800a280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a24c:	d110      	bne.n	800a270 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e00f      	b.n	800a272 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a252:	4b0b      	ldr	r3, [pc, #44]	@ (800a280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a25a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a25e:	d007      	beq.n	800a270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a260:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a268:	4a05      	ldr	r2, [pc, #20]	@ (800a280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a26a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a26e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	40007000 	.word	0x40007000
 800a284:	2000039c 	.word	0x2000039c
 800a288:	431bde83 	.word	0x431bde83

0800a28c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a28c:	b480      	push	{r7}
 800a28e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a290:	4b05      	ldr	r3, [pc, #20]	@ (800a2a8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a04      	ldr	r2, [pc, #16]	@ (800a2a8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a296:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a29a:	6013      	str	r3, [r2, #0]
}
 800a29c:	bf00      	nop
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	40007000 	.word	0x40007000

0800a2ac <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a2b2:	4b17      	ldr	r3, [pc, #92]	@ (800a310 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a16      	ldr	r2, [pc, #88]	@ (800a310 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2bc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a2be:	4b15      	ldr	r3, [pc, #84]	@ (800a314 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2232      	movs	r2, #50	@ 0x32
 800a2c4:	fb02 f303 	mul.w	r3, r2, r3
 800a2c8:	4a13      	ldr	r2, [pc, #76]	@ (800a318 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ce:	0c9b      	lsrs	r3, r3, #18
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a2d4:	e002      	b.n	800a2dc <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a310 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e8:	d102      	bne.n	800a2f0 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1f2      	bne.n	800a2d6 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a2f0:	4b07      	ldr	r3, [pc, #28]	@ (800a310 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2fc:	d101      	bne.n	800a302 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e000      	b.n	800a304 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	40007000 	.word	0x40007000
 800a314:	2000039c 	.word	0x2000039c
 800a318:	431bde83 	.word	0x431bde83

0800a31c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d102      	bne.n	800a330 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f000 bc08 	b.w	800ab40 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a330:	4b96      	ldr	r3, [pc, #600]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f003 030c 	and.w	r3, r3, #12
 800a338:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a33a:	4b94      	ldr	r3, [pc, #592]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f003 0303 	and.w	r3, r3, #3
 800a342:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 80e4 	beq.w	800a51a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <HAL_RCC_OscConfig+0x4c>
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	2b0c      	cmp	r3, #12
 800a35c:	f040 808b 	bne.w	800a476 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2b01      	cmp	r3, #1
 800a364:	f040 8087 	bne.w	800a476 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a368:	4b88      	ldr	r3, [pc, #544]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d005      	beq.n	800a380 <HAL_RCC_OscConfig+0x64>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e3df      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1a      	ldr	r2, [r3, #32]
 800a384:	4b81      	ldr	r3, [pc, #516]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0308 	and.w	r3, r3, #8
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <HAL_RCC_OscConfig+0x7e>
 800a390:	4b7e      	ldr	r3, [pc, #504]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a398:	e005      	b.n	800a3a6 <HAL_RCC_OscConfig+0x8a>
 800a39a:	4b7c      	ldr	r3, [pc, #496]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a39c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3a0:	091b      	lsrs	r3, r3, #4
 800a3a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d223      	bcs.n	800a3f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 fd92 	bl	800aed8 <RCC_SetFlashLatencyFromMSIRange>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e3c0      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3be:	4b73      	ldr	r3, [pc, #460]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a72      	ldr	r2, [pc, #456]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a3c4:	f043 0308 	orr.w	r3, r3, #8
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	4b70      	ldr	r3, [pc, #448]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	496d      	ldr	r1, [pc, #436]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a3dc:	4b6b      	ldr	r3, [pc, #428]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	021b      	lsls	r3, r3, #8
 800a3ea:	4968      	ldr	r1, [pc, #416]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	604b      	str	r3, [r1, #4]
 800a3f0:	e025      	b.n	800a43e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3f2:	4b66      	ldr	r3, [pc, #408]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a65      	ldr	r2, [pc, #404]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a3f8:	f043 0308 	orr.w	r3, r3, #8
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	4b63      	ldr	r3, [pc, #396]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	4960      	ldr	r1, [pc, #384]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a410:	4b5e      	ldr	r3, [pc, #376]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	69db      	ldr	r3, [r3, #28]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	495b      	ldr	r1, [pc, #364]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a420:	4313      	orrs	r3, r2
 800a422:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d109      	bne.n	800a43e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 fd52 	bl	800aed8 <RCC_SetFlashLatencyFromMSIRange>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e380      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a43e:	f000 fc87 	bl	800ad50 <HAL_RCC_GetSysClockFreq>
 800a442:	4602      	mov	r2, r0
 800a444:	4b51      	ldr	r3, [pc, #324]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	091b      	lsrs	r3, r3, #4
 800a44a:	f003 030f 	and.w	r3, r3, #15
 800a44e:	4950      	ldr	r1, [pc, #320]	@ (800a590 <HAL_RCC_OscConfig+0x274>)
 800a450:	5ccb      	ldrb	r3, [r1, r3]
 800a452:	f003 031f 	and.w	r3, r3, #31
 800a456:	fa22 f303 	lsr.w	r3, r2, r3
 800a45a:	4a4e      	ldr	r2, [pc, #312]	@ (800a594 <HAL_RCC_OscConfig+0x278>)
 800a45c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a45e:	4b4e      	ldr	r3, [pc, #312]	@ (800a598 <HAL_RCC_OscConfig+0x27c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4618      	mov	r0, r3
 800a464:	f7fa ff84 	bl	8005370 <HAL_InitTick>
 800a468:	4603      	mov	r3, r0
 800a46a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d052      	beq.n	800a518 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	e364      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d032      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a47e:	4b43      	ldr	r3, [pc, #268]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a42      	ldr	r2, [pc, #264]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a484:	f043 0301 	orr.w	r3, r3, #1
 800a488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a48a:	f7fa ffc1 	bl	8005410 <HAL_GetTick>
 800a48e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a490:	e008      	b.n	800a4a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a492:	f7fa ffbd 	bl	8005410 <HAL_GetTick>
 800a496:	4602      	mov	r2, r0
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d901      	bls.n	800a4a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e34d      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4a4:	4b39      	ldr	r3, [pc, #228]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0302 	and.w	r3, r3, #2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0f0      	beq.n	800a492 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4b0:	4b36      	ldr	r3, [pc, #216]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a35      	ldr	r2, [pc, #212]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4b6:	f043 0308 	orr.w	r3, r3, #8
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	4b33      	ldr	r3, [pc, #204]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a1b      	ldr	r3, [r3, #32]
 800a4c8:	4930      	ldr	r1, [pc, #192]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	492b      	ldr	r1, [pc, #172]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	604b      	str	r3, [r1, #4]
 800a4e2:	e01a      	b.n	800a51a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a4e4:	4b29      	ldr	r3, [pc, #164]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a28      	ldr	r2, [pc, #160]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a4f0:	f7fa ff8e 	bl	8005410 <HAL_GetTick>
 800a4f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a4f6:	e008      	b.n	800a50a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a4f8:	f7fa ff8a 	bl	8005410 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d901      	bls.n	800a50a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e31a      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a50a:	4b20      	ldr	r3, [pc, #128]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1f0      	bne.n	800a4f8 <HAL_RCC_OscConfig+0x1dc>
 800a516:	e000      	b.n	800a51a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a518:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d073      	beq.n	800a60e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d005      	beq.n	800a538 <HAL_RCC_OscConfig+0x21c>
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	2b0c      	cmp	r3, #12
 800a530:	d10e      	bne.n	800a550 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d10b      	bne.n	800a550 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a538:	4b14      	ldr	r3, [pc, #80]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d063      	beq.n	800a60c <HAL_RCC_OscConfig+0x2f0>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d15f      	bne.n	800a60c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e2f7      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a558:	d106      	bne.n	800a568 <HAL_RCC_OscConfig+0x24c>
 800a55a:	4b0c      	ldr	r3, [pc, #48]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a0b      	ldr	r2, [pc, #44]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	e025      	b.n	800a5b4 <HAL_RCC_OscConfig+0x298>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a570:	d114      	bne.n	800a59c <HAL_RCC_OscConfig+0x280>
 800a572:	4b06      	ldr	r3, [pc, #24]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a05      	ldr	r2, [pc, #20]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	4b03      	ldr	r3, [pc, #12]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a02      	ldr	r2, [pc, #8]	@ (800a58c <HAL_RCC_OscConfig+0x270>)
 800a584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	e013      	b.n	800a5b4 <HAL_RCC_OscConfig+0x298>
 800a58c:	40021000 	.word	0x40021000
 800a590:	0800d748 	.word	0x0800d748
 800a594:	2000039c 	.word	0x2000039c
 800a598:	200003a0 	.word	0x200003a0
 800a59c:	4ba0      	ldr	r3, [pc, #640]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a9f      	ldr	r2, [pc, #636]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a5a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	4b9d      	ldr	r3, [pc, #628]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a9c      	ldr	r2, [pc, #624]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a5ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d013      	beq.n	800a5e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5bc:	f7fa ff28 	bl	8005410 <HAL_GetTick>
 800a5c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5c2:	e008      	b.n	800a5d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5c4:	f7fa ff24 	bl	8005410 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	2b64      	cmp	r3, #100	@ 0x64
 800a5d0:	d901      	bls.n	800a5d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e2b4      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5d6:	4b92      	ldr	r3, [pc, #584]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0f0      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x2a8>
 800a5e2:	e014      	b.n	800a60e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5e4:	f7fa ff14 	bl	8005410 <HAL_GetTick>
 800a5e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a5ea:	e008      	b.n	800a5fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5ec:	f7fa ff10 	bl	8005410 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b64      	cmp	r3, #100	@ 0x64
 800a5f8:	d901      	bls.n	800a5fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e2a0      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a5fe:	4b88      	ldr	r3, [pc, #544]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1f0      	bne.n	800a5ec <HAL_RCC_OscConfig+0x2d0>
 800a60a:	e000      	b.n	800a60e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a60c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0302 	and.w	r3, r3, #2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d060      	beq.n	800a6dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	d005      	beq.n	800a62c <HAL_RCC_OscConfig+0x310>
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	2b0c      	cmp	r3, #12
 800a624:	d119      	bne.n	800a65a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d116      	bne.n	800a65a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a62c:	4b7c      	ldr	r3, [pc, #496]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a634:	2b00      	cmp	r3, #0
 800a636:	d005      	beq.n	800a644 <HAL_RCC_OscConfig+0x328>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e27d      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a644:	4b76      	ldr	r3, [pc, #472]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	061b      	lsls	r3, r3, #24
 800a652:	4973      	ldr	r1, [pc, #460]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a654:	4313      	orrs	r3, r2
 800a656:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a658:	e040      	b.n	800a6dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d023      	beq.n	800a6aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a662:	4b6f      	ldr	r3, [pc, #444]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a6e      	ldr	r2, [pc, #440]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a66c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a66e:	f7fa fecf 	bl	8005410 <HAL_GetTick>
 800a672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a674:	e008      	b.n	800a688 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a676:	f7fa fecb 	bl	8005410 <HAL_GetTick>
 800a67a:	4602      	mov	r2, r0
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	2b02      	cmp	r3, #2
 800a682:	d901      	bls.n	800a688 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e25b      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a688:	4b65      	ldr	r3, [pc, #404]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a690:	2b00      	cmp	r3, #0
 800a692:	d0f0      	beq.n	800a676 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a694:	4b62      	ldr	r3, [pc, #392]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	061b      	lsls	r3, r3, #24
 800a6a2:	495f      	ldr	r1, [pc, #380]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	604b      	str	r3, [r1, #4]
 800a6a8:	e018      	b.n	800a6dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6aa:	4b5d      	ldr	r3, [pc, #372]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a5c      	ldr	r2, [pc, #368]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a6b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b6:	f7fa feab 	bl	8005410 <HAL_GetTick>
 800a6ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6bc:	e008      	b.n	800a6d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6be:	f7fa fea7 	bl	8005410 <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d901      	bls.n	800a6d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e237      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6d0:	4b53      	ldr	r3, [pc, #332]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f0      	bne.n	800a6be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0308 	and.w	r3, r3, #8
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d03c      	beq.n	800a762 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01c      	beq.n	800a72a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6f0:	4b4b      	ldr	r3, [pc, #300]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a6f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6f6:	4a4a      	ldr	r2, [pc, #296]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a6f8:	f043 0301 	orr.w	r3, r3, #1
 800a6fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a700:	f7fa fe86 	bl	8005410 <HAL_GetTick>
 800a704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a706:	e008      	b.n	800a71a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a708:	f7fa fe82 	bl	8005410 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d901      	bls.n	800a71a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e212      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a71a:	4b41      	ldr	r3, [pc, #260]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a71c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a720:	f003 0302 	and.w	r3, r3, #2
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0ef      	beq.n	800a708 <HAL_RCC_OscConfig+0x3ec>
 800a728:	e01b      	b.n	800a762 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a72a:	4b3d      	ldr	r3, [pc, #244]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a72c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a730:	4a3b      	ldr	r2, [pc, #236]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a732:	f023 0301 	bic.w	r3, r3, #1
 800a736:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a73a:	f7fa fe69 	bl	8005410 <HAL_GetTick>
 800a73e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a740:	e008      	b.n	800a754 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a742:	f7fa fe65 	bl	8005410 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d901      	bls.n	800a754 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e1f5      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a754:	4b32      	ldr	r3, [pc, #200]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1ef      	bne.n	800a742 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80a6 	beq.w	800a8bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a770:	2300      	movs	r3, #0
 800a772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a774:	4b2a      	ldr	r3, [pc, #168]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10d      	bne.n	800a79c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a780:	4b27      	ldr	r3, [pc, #156]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a784:	4a26      	ldr	r2, [pc, #152]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a78a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a78c:	4b24      	ldr	r3, [pc, #144]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a78e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a794:	60bb      	str	r3, [r7, #8]
 800a796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a798:	2301      	movs	r3, #1
 800a79a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a79c:	4b21      	ldr	r3, [pc, #132]	@ (800a824 <HAL_RCC_OscConfig+0x508>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d118      	bne.n	800a7da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a824 <HAL_RCC_OscConfig+0x508>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a824 <HAL_RCC_OscConfig+0x508>)
 800a7ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7b4:	f7fa fe2c 	bl	8005410 <HAL_GetTick>
 800a7b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7ba:	e008      	b.n	800a7ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7bc:	f7fa fe28 	bl	8005410 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d901      	bls.n	800a7ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e1b8      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7ce:	4b15      	ldr	r3, [pc, #84]	@ (800a824 <HAL_RCC_OscConfig+0x508>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0f0      	beq.n	800a7bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d108      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x4d8>
 800a7e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7e8:	4a0d      	ldr	r2, [pc, #52]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a7ea:	f043 0301 	orr.w	r3, r3, #1
 800a7ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a7f2:	e029      	b.n	800a848 <HAL_RCC_OscConfig+0x52c>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	2b05      	cmp	r3, #5
 800a7fa:	d115      	bne.n	800a828 <HAL_RCC_OscConfig+0x50c>
 800a7fc:	4b08      	ldr	r3, [pc, #32]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a7fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a802:	4a07      	ldr	r2, [pc, #28]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a804:	f043 0304 	orr.w	r3, r3, #4
 800a808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a80c:	4b04      	ldr	r3, [pc, #16]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a812:	4a03      	ldr	r2, [pc, #12]	@ (800a820 <HAL_RCC_OscConfig+0x504>)
 800a814:	f043 0301 	orr.w	r3, r3, #1
 800a818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a81c:	e014      	b.n	800a848 <HAL_RCC_OscConfig+0x52c>
 800a81e:	bf00      	nop
 800a820:	40021000 	.word	0x40021000
 800a824:	40007000 	.word	0x40007000
 800a828:	4b9d      	ldr	r3, [pc, #628]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a82e:	4a9c      	ldr	r2, [pc, #624]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a830:	f023 0301 	bic.w	r3, r3, #1
 800a834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a838:	4b99      	ldr	r3, [pc, #612]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a83e:	4a98      	ldr	r2, [pc, #608]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a840:	f023 0304 	bic.w	r3, r3, #4
 800a844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d016      	beq.n	800a87e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a850:	f7fa fdde 	bl	8005410 <HAL_GetTick>
 800a854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a856:	e00a      	b.n	800a86e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a858:	f7fa fdda 	bl	8005410 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a866:	4293      	cmp	r3, r2
 800a868:	d901      	bls.n	800a86e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e168      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a86e:	4b8c      	ldr	r3, [pc, #560]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0ed      	beq.n	800a858 <HAL_RCC_OscConfig+0x53c>
 800a87c:	e015      	b.n	800a8aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a87e:	f7fa fdc7 	bl	8005410 <HAL_GetTick>
 800a882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a884:	e00a      	b.n	800a89c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a886:	f7fa fdc3 	bl	8005410 <HAL_GetTick>
 800a88a:	4602      	mov	r2, r0
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a894:	4293      	cmp	r3, r2
 800a896:	d901      	bls.n	800a89c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e151      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a89c:	4b80      	ldr	r3, [pc, #512]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1ed      	bne.n	800a886 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a8aa:	7ffb      	ldrb	r3, [r7, #31]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d105      	bne.n	800a8bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8b0:	4b7b      	ldr	r3, [pc, #492]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a8b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b4:	4a7a      	ldr	r2, [pc, #488]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a8b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0320 	and.w	r3, r3, #32
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d03c      	beq.n	800a942 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d01c      	beq.n	800a90a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a8d0:	4b73      	ldr	r3, [pc, #460]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a8d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8d6:	4a72      	ldr	r2, [pc, #456]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a8d8:	f043 0301 	orr.w	r3, r3, #1
 800a8dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8e0:	f7fa fd96 	bl	8005410 <HAL_GetTick>
 800a8e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a8e6:	e008      	b.n	800a8fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8e8:	f7fa fd92 	bl	8005410 <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d901      	bls.n	800a8fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e122      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a8fa:	4b69      	ldr	r3, [pc, #420]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a8fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a900:	f003 0302 	and.w	r3, r3, #2
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0ef      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x5cc>
 800a908:	e01b      	b.n	800a942 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a90a:	4b65      	ldr	r3, [pc, #404]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a90c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a910:	4a63      	ldr	r2, [pc, #396]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a912:	f023 0301 	bic.w	r3, r3, #1
 800a916:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a91a:	f7fa fd79 	bl	8005410 <HAL_GetTick>
 800a91e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a920:	e008      	b.n	800a934 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a922:	f7fa fd75 	bl	8005410 <HAL_GetTick>
 800a926:	4602      	mov	r2, r0
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d901      	bls.n	800a934 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e105      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a934:	4b5a      	ldr	r3, [pc, #360]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a93a:	f003 0302 	and.w	r3, r3, #2
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1ef      	bne.n	800a922 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 80f9 	beq.w	800ab3e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a950:	2b02      	cmp	r3, #2
 800a952:	f040 80cf 	bne.w	800aaf4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a956:	4b52      	ldr	r3, [pc, #328]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f003 0203 	and.w	r2, r3, #3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a966:	429a      	cmp	r2, r3
 800a968:	d12c      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a974:	3b01      	subs	r3, #1
 800a976:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a978:	429a      	cmp	r2, r3
 800a97a:	d123      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a986:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a988:	429a      	cmp	r2, r3
 800a98a:	d11b      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a996:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a998:	429a      	cmp	r2, r3
 800a99a:	d113      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a6:	085b      	lsrs	r3, r3, #1
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d109      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ba:	085b      	lsrs	r3, r3, #1
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d071      	beq.n	800aaa8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	2b0c      	cmp	r3, #12
 800a9c8:	d068      	beq.n	800aa9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a9ca:	4b35      	ldr	r3, [pc, #212]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d105      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a9d6:	4b32      	ldr	r3, [pc, #200]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e0ac      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a9e6:	4b2e      	ldr	r3, [pc, #184]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a2d      	ldr	r2, [pc, #180]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800a9ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a9f2:	f7fa fd0d 	bl	8005410 <HAL_GetTick>
 800a9f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9f8:	e008      	b.n	800aa0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9fa:	f7fa fd09 	bl	8005410 <HAL_GetTick>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d901      	bls.n	800aa0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e099      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa0c:	4b24      	ldr	r3, [pc, #144]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1f0      	bne.n	800a9fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa18:	4b21      	ldr	r3, [pc, #132]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	4b21      	ldr	r3, [pc, #132]	@ (800aaa4 <HAL_RCC_OscConfig+0x788>)
 800aa1e:	4013      	ands	r3, r2
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa28:	3a01      	subs	r2, #1
 800aa2a:	0112      	lsls	r2, r2, #4
 800aa2c:	4311      	orrs	r1, r2
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800aa32:	0212      	lsls	r2, r2, #8
 800aa34:	4311      	orrs	r1, r2
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800aa3a:	0852      	lsrs	r2, r2, #1
 800aa3c:	3a01      	subs	r2, #1
 800aa3e:	0552      	lsls	r2, r2, #21
 800aa40:	4311      	orrs	r1, r2
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800aa46:	0852      	lsrs	r2, r2, #1
 800aa48:	3a01      	subs	r2, #1
 800aa4a:	0652      	lsls	r2, r2, #25
 800aa4c:	4311      	orrs	r1, r2
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800aa52:	06d2      	lsls	r2, r2, #27
 800aa54:	430a      	orrs	r2, r1
 800aa56:	4912      	ldr	r1, [pc, #72]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800aa5c:	4b10      	ldr	r3, [pc, #64]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a0f      	ldr	r2, [pc, #60]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800aa62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aa68:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	4a0c      	ldr	r2, [pc, #48]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800aa6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aa74:	f7fa fccc 	bl	8005410 <HAL_GetTick>
 800aa78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa7a:	e008      	b.n	800aa8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa7c:	f7fa fcc8 	bl	8005410 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d901      	bls.n	800aa8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e058      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa8e:	4b04      	ldr	r3, [pc, #16]	@ (800aaa0 <HAL_RCC_OscConfig+0x784>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0f0      	beq.n	800aa7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aa9a:	e050      	b.n	800ab3e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e04f      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
 800aaa0:	40021000 	.word	0x40021000
 800aaa4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aaa8:	4b27      	ldr	r3, [pc, #156]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d144      	bne.n	800ab3e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800aab4:	4b24      	ldr	r3, [pc, #144]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a23      	ldr	r2, [pc, #140]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800aaba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aabe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aac0:	4b21      	ldr	r3, [pc, #132]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	4a20      	ldr	r2, [pc, #128]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800aac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aaca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aacc:	f7fa fca0 	bl	8005410 <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aad2:	e008      	b.n	800aae6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aad4:	f7fa fc9c 	bl	8005410 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e02c      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aae6:	4b18      	ldr	r3, [pc, #96]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <HAL_RCC_OscConfig+0x7b8>
 800aaf2:	e024      	b.n	800ab3e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	2b0c      	cmp	r3, #12
 800aaf8:	d01f      	beq.n	800ab3a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aafa:	4b13      	ldr	r3, [pc, #76]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a12      	ldr	r2, [pc, #72]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800ab00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab06:	f7fa fc83 	bl	8005410 <HAL_GetTick>
 800ab0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab0c:	e008      	b.n	800ab20 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab0e:	f7fa fc7f 	bl	8005410 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d901      	bls.n	800ab20 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e00f      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab20:	4b09      	ldr	r3, [pc, #36]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1f0      	bne.n	800ab0e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ab2c:	4b06      	ldr	r3, [pc, #24]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	4905      	ldr	r1, [pc, #20]	@ (800ab48 <HAL_RCC_OscConfig+0x82c>)
 800ab32:	4b06      	ldr	r3, [pc, #24]	@ (800ab4c <HAL_RCC_OscConfig+0x830>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	60cb      	str	r3, [r1, #12]
 800ab38:	e001      	b.n	800ab3e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e000      	b.n	800ab40 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3720      	adds	r7, #32
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	40021000 	.word	0x40021000
 800ab4c:	feeefffc 	.word	0xfeeefffc

0800ab50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e0e7      	b.n	800ad34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab64:	4b75      	ldr	r3, [pc, #468]	@ (800ad3c <HAL_RCC_ClockConfig+0x1ec>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0307 	and.w	r3, r3, #7
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d910      	bls.n	800ab94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab72:	4b72      	ldr	r3, [pc, #456]	@ (800ad3c <HAL_RCC_ClockConfig+0x1ec>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f023 0207 	bic.w	r2, r3, #7
 800ab7a:	4970      	ldr	r1, [pc, #448]	@ (800ad3c <HAL_RCC_ClockConfig+0x1ec>)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab82:	4b6e      	ldr	r3, [pc, #440]	@ (800ad3c <HAL_RCC_ClockConfig+0x1ec>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d001      	beq.n	800ab94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e0cf      	b.n	800ad34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0302 	and.w	r3, r3, #2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d010      	beq.n	800abc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	4b66      	ldr	r3, [pc, #408]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abac:	429a      	cmp	r2, r3
 800abae:	d908      	bls.n	800abc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abb0:	4b63      	ldr	r3, [pc, #396]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	4960      	ldr	r1, [pc, #384]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800abbe:	4313      	orrs	r3, r2
 800abc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d04c      	beq.n	800ac68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d107      	bne.n	800abe6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abd6:	4b5a      	ldr	r3, [pc, #360]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d121      	bne.n	800ac26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e0a6      	b.n	800ad34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	2b02      	cmp	r3, #2
 800abec:	d107      	bne.n	800abfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800abee:	4b54      	ldr	r3, [pc, #336]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d115      	bne.n	800ac26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e09a      	b.n	800ad34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d107      	bne.n	800ac16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ac06:	4b4e      	ldr	r3, [pc, #312]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d109      	bne.n	800ac26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	e08e      	b.n	800ad34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ac16:	4b4a      	ldr	r3, [pc, #296]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e086      	b.n	800ad34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac26:	4b46      	ldr	r3, [pc, #280]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	f023 0203 	bic.w	r2, r3, #3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4943      	ldr	r1, [pc, #268]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ac34:	4313      	orrs	r3, r2
 800ac36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac38:	f7fa fbea 	bl	8005410 <HAL_GetTick>
 800ac3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac3e:	e00a      	b.n	800ac56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac40:	f7fa fbe6 	bl	8005410 <HAL_GetTick>
 800ac44:	4602      	mov	r2, r0
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d901      	bls.n	800ac56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e06e      	b.n	800ad34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac56:	4b3a      	ldr	r3, [pc, #232]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	f003 020c 	and.w	r2, r3, #12
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d1eb      	bne.n	800ac40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d010      	beq.n	800ac96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689a      	ldr	r2, [r3, #8]
 800ac78:	4b31      	ldr	r3, [pc, #196]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d208      	bcs.n	800ac96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac84:	4b2e      	ldr	r3, [pc, #184]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	492b      	ldr	r1, [pc, #172]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ac92:	4313      	orrs	r3, r2
 800ac94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ac96:	4b29      	ldr	r3, [pc, #164]	@ (800ad3c <HAL_RCC_ClockConfig+0x1ec>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0307 	and.w	r3, r3, #7
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d210      	bcs.n	800acc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aca4:	4b25      	ldr	r3, [pc, #148]	@ (800ad3c <HAL_RCC_ClockConfig+0x1ec>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f023 0207 	bic.w	r2, r3, #7
 800acac:	4923      	ldr	r1, [pc, #140]	@ (800ad3c <HAL_RCC_ClockConfig+0x1ec>)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acb4:	4b21      	ldr	r3, [pc, #132]	@ (800ad3c <HAL_RCC_ClockConfig+0x1ec>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 0307 	and.w	r3, r3, #7
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d001      	beq.n	800acc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e036      	b.n	800ad34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d008      	beq.n	800ace4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acd2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	4918      	ldr	r1, [pc, #96]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ace0:	4313      	orrs	r3, r2
 800ace2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 0308 	and.w	r3, r3, #8
 800acec:	2b00      	cmp	r3, #0
 800acee:	d009      	beq.n	800ad04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800acf0:	4b13      	ldr	r3, [pc, #76]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	4910      	ldr	r1, [pc, #64]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ad00:	4313      	orrs	r3, r2
 800ad02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ad04:	f000 f824 	bl	800ad50 <HAL_RCC_GetSysClockFreq>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad40 <HAL_RCC_ClockConfig+0x1f0>)
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	091b      	lsrs	r3, r3, #4
 800ad10:	f003 030f 	and.w	r3, r3, #15
 800ad14:	490b      	ldr	r1, [pc, #44]	@ (800ad44 <HAL_RCC_ClockConfig+0x1f4>)
 800ad16:	5ccb      	ldrb	r3, [r1, r3]
 800ad18:	f003 031f 	and.w	r3, r3, #31
 800ad1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad20:	4a09      	ldr	r2, [pc, #36]	@ (800ad48 <HAL_RCC_ClockConfig+0x1f8>)
 800ad22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ad24:	4b09      	ldr	r3, [pc, #36]	@ (800ad4c <HAL_RCC_ClockConfig+0x1fc>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fa fb21 	bl	8005370 <HAL_InitTick>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	72fb      	strb	r3, [r7, #11]

  return status;
 800ad32:	7afb      	ldrb	r3, [r7, #11]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	40022000 	.word	0x40022000
 800ad40:	40021000 	.word	0x40021000
 800ad44:	0800d748 	.word	0x0800d748
 800ad48:	2000039c 	.word	0x2000039c
 800ad4c:	200003a0 	.word	0x200003a0

0800ad50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b089      	sub	sp, #36	@ 0x24
 800ad54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	61fb      	str	r3, [r7, #28]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad5e:	4b3e      	ldr	r3, [pc, #248]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 030c 	and.w	r3, r3, #12
 800ad66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad68:	4b3b      	ldr	r3, [pc, #236]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f003 0303 	and.w	r3, r3, #3
 800ad70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <HAL_RCC_GetSysClockFreq+0x34>
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	2b0c      	cmp	r3, #12
 800ad7c:	d121      	bne.n	800adc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d11e      	bne.n	800adc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ad84:	4b34      	ldr	r3, [pc, #208]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0308 	and.w	r3, r3, #8
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d107      	bne.n	800ada0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ad90:	4b31      	ldr	r3, [pc, #196]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad96:	0a1b      	lsrs	r3, r3, #8
 800ad98:	f003 030f 	and.w	r3, r3, #15
 800ad9c:	61fb      	str	r3, [r7, #28]
 800ad9e:	e005      	b.n	800adac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ada0:	4b2d      	ldr	r3, [pc, #180]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	091b      	lsrs	r3, r3, #4
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800adac:	4a2b      	ldr	r2, [pc, #172]	@ (800ae5c <HAL_RCC_GetSysClockFreq+0x10c>)
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10d      	bne.n	800add8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800adc0:	e00a      	b.n	800add8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d102      	bne.n	800adce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800adc8:	4b25      	ldr	r3, [pc, #148]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0x110>)
 800adca:	61bb      	str	r3, [r7, #24]
 800adcc:	e004      	b.n	800add8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2b08      	cmp	r3, #8
 800add2:	d101      	bne.n	800add8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800add4:	4b23      	ldr	r3, [pc, #140]	@ (800ae64 <HAL_RCC_GetSysClockFreq+0x114>)
 800add6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	2b0c      	cmp	r3, #12
 800addc:	d134      	bne.n	800ae48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800adde:	4b1e      	ldr	r3, [pc, #120]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f003 0303 	and.w	r3, r3, #3
 800ade6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d003      	beq.n	800adf6 <HAL_RCC_GetSysClockFreq+0xa6>
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b03      	cmp	r3, #3
 800adf2:	d003      	beq.n	800adfc <HAL_RCC_GetSysClockFreq+0xac>
 800adf4:	e005      	b.n	800ae02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800adf6:	4b1a      	ldr	r3, [pc, #104]	@ (800ae60 <HAL_RCC_GetSysClockFreq+0x110>)
 800adf8:	617b      	str	r3, [r7, #20]
      break;
 800adfa:	e005      	b.n	800ae08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800adfc:	4b19      	ldr	r3, [pc, #100]	@ (800ae64 <HAL_RCC_GetSysClockFreq+0x114>)
 800adfe:	617b      	str	r3, [r7, #20]
      break;
 800ae00:	e002      	b.n	800ae08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	617b      	str	r3, [r7, #20]
      break;
 800ae06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ae08:	4b13      	ldr	r3, [pc, #76]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	091b      	lsrs	r3, r3, #4
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	3301      	adds	r3, #1
 800ae14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ae16:	4b10      	ldr	r3, [pc, #64]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	0a1b      	lsrs	r3, r3, #8
 800ae1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	fb03 f202 	mul.w	r2, r3, r2
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ae2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae58 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	0e5b      	lsrs	r3, r3, #25
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	3301      	adds	r3, #1
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ae48:	69bb      	ldr	r3, [r7, #24]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3724      	adds	r7, #36	@ 0x24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	40021000 	.word	0x40021000
 800ae5c:	0800d760 	.word	0x0800d760
 800ae60:	00f42400 	.word	0x00f42400
 800ae64:	007a1200 	.word	0x007a1200

0800ae68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae6c:	4b03      	ldr	r3, [pc, #12]	@ (800ae7c <HAL_RCC_GetHCLKFreq+0x14>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	2000039c 	.word	0x2000039c

0800ae80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ae84:	f7ff fff0 	bl	800ae68 <HAL_RCC_GetHCLKFreq>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	4b06      	ldr	r3, [pc, #24]	@ (800aea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	f003 0307 	and.w	r3, r3, #7
 800ae94:	4904      	ldr	r1, [pc, #16]	@ (800aea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae96:	5ccb      	ldrb	r3, [r1, r3]
 800ae98:	f003 031f 	and.w	r3, r3, #31
 800ae9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	40021000 	.word	0x40021000
 800aea8:	0800d758 	.word	0x0800d758

0800aeac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800aeb0:	f7ff ffda 	bl	800ae68 <HAL_RCC_GetHCLKFreq>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	4b06      	ldr	r3, [pc, #24]	@ (800aed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	0adb      	lsrs	r3, r3, #11
 800aebc:	f003 0307 	and.w	r3, r3, #7
 800aec0:	4904      	ldr	r1, [pc, #16]	@ (800aed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aec2:	5ccb      	ldrb	r3, [r1, r3]
 800aec4:	f003 031f 	and.w	r3, r3, #31
 800aec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aecc:	4618      	mov	r0, r3
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	40021000 	.word	0x40021000
 800aed4:	0800d758 	.word	0x0800d758

0800aed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800aee0:	2300      	movs	r3, #0
 800aee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800aee4:	4b2a      	ldr	r3, [pc, #168]	@ (800af90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800aee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800aef0:	f7ff f968 	bl	800a1c4 <HAL_PWREx_GetVoltageRange>
 800aef4:	6178      	str	r0, [r7, #20]
 800aef6:	e014      	b.n	800af22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800aef8:	4b25      	ldr	r3, [pc, #148]	@ (800af90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800aefa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aefc:	4a24      	ldr	r2, [pc, #144]	@ (800af90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800aefe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af02:	6593      	str	r3, [r2, #88]	@ 0x58
 800af04:	4b22      	ldr	r3, [pc, #136]	@ (800af90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800af10:	f7ff f958 	bl	800a1c4 <HAL_PWREx_GetVoltageRange>
 800af14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800af16:	4b1e      	ldr	r3, [pc, #120]	@ (800af90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af1a:	4a1d      	ldr	r2, [pc, #116]	@ (800af90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af28:	d10b      	bne.n	800af42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b80      	cmp	r3, #128	@ 0x80
 800af2e:	d919      	bls.n	800af64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2ba0      	cmp	r3, #160	@ 0xa0
 800af34:	d902      	bls.n	800af3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800af36:	2302      	movs	r3, #2
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	e013      	b.n	800af64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800af3c:	2301      	movs	r3, #1
 800af3e:	613b      	str	r3, [r7, #16]
 800af40:	e010      	b.n	800af64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b80      	cmp	r3, #128	@ 0x80
 800af46:	d902      	bls.n	800af4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800af48:	2303      	movs	r3, #3
 800af4a:	613b      	str	r3, [r7, #16]
 800af4c:	e00a      	b.n	800af64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b80      	cmp	r3, #128	@ 0x80
 800af52:	d102      	bne.n	800af5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800af54:	2302      	movs	r3, #2
 800af56:	613b      	str	r3, [r7, #16]
 800af58:	e004      	b.n	800af64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b70      	cmp	r3, #112	@ 0x70
 800af5e:	d101      	bne.n	800af64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800af60:	2301      	movs	r3, #1
 800af62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800af64:	4b0b      	ldr	r3, [pc, #44]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f023 0207 	bic.w	r2, r3, #7
 800af6c:	4909      	ldr	r1, [pc, #36]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	4313      	orrs	r3, r2
 800af72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800af74:	4b07      	ldr	r3, [pc, #28]	@ (800af94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0307 	and.w	r3, r3, #7
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d001      	beq.n	800af86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e000      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	40021000 	.word	0x40021000
 800af94:	40022000 	.word	0x40022000

0800af98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afa0:	2300      	movs	r3, #0
 800afa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afa4:	2300      	movs	r3, #0
 800afa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d041      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800afbc:	d02a      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800afbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800afc2:	d824      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800afc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800afc8:	d008      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800afca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800afce:	d81e      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x52>
 800afd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afd8:	d010      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800afda:	e018      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800afdc:	4b86      	ldr	r3, [pc, #536]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	4a85      	ldr	r2, [pc, #532]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afe6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800afe8:	e015      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3304      	adds	r3, #4
 800afee:	2100      	movs	r1, #0
 800aff0:	4618      	mov	r0, r3
 800aff2:	f000 facd 	bl	800b590 <RCCEx_PLLSAI1_Config>
 800aff6:	4603      	mov	r3, r0
 800aff8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800affa:	e00c      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3320      	adds	r3, #32
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f000 fbb6 	bl	800b774 <RCCEx_PLLSAI2_Config>
 800b008:	4603      	mov	r3, r0
 800b00a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b00c:	e003      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	74fb      	strb	r3, [r7, #19]
      break;
 800b012:	e000      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b014:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b016:	7cfb      	ldrb	r3, [r7, #19]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b01c:	4b76      	ldr	r3, [pc, #472]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b022:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b02a:	4973      	ldr	r1, [pc, #460]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800b032:	e001      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b034:	7cfb      	ldrb	r3, [r7, #19]
 800b036:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d041      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b048:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b04c:	d02a      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b04e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b052:	d824      	bhi.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b058:	d008      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b05a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b05e:	d81e      	bhi.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00a      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b068:	d010      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b06a:	e018      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b06c:	4b62      	ldr	r3, [pc, #392]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	4a61      	ldr	r2, [pc, #388]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b076:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b078:	e015      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3304      	adds	r3, #4
 800b07e:	2100      	movs	r1, #0
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fa85 	bl	800b590 <RCCEx_PLLSAI1_Config>
 800b086:	4603      	mov	r3, r0
 800b088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b08a:	e00c      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3320      	adds	r3, #32
 800b090:	2100      	movs	r1, #0
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fb6e 	bl	800b774 <RCCEx_PLLSAI2_Config>
 800b098:	4603      	mov	r3, r0
 800b09a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b09c:	e003      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	74fb      	strb	r3, [r7, #19]
      break;
 800b0a2:	e000      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b0a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0a6:	7cfb      	ldrb	r3, [r7, #19]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10b      	bne.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b0ac:	4b52      	ldr	r3, [pc, #328]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ba:	494f      	ldr	r1, [pc, #316]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800b0c2:	e001      	b.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c4:	7cfb      	ldrb	r3, [r7, #19]
 800b0c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 80a0 	beq.w	800b216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b0da:	4b47      	ldr	r3, [pc, #284]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e000      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00d      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0f0:	4b41      	ldr	r3, [pc, #260]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0f4:	4a40      	ldr	r2, [pc, #256]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0fa:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0fc:	4b3e      	ldr	r3, [pc, #248]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b104:	60bb      	str	r3, [r7, #8]
 800b106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b108:	2301      	movs	r3, #1
 800b10a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b10c:	4b3b      	ldr	r3, [pc, #236]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a3a      	ldr	r2, [pc, #232]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b118:	f7fa f97a 	bl	8005410 <HAL_GetTick>
 800b11c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b11e:	e009      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b120:	f7fa f976 	bl	8005410 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d902      	bls.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	74fb      	strb	r3, [r7, #19]
        break;
 800b132:	e005      	b.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b134:	4b31      	ldr	r3, [pc, #196]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0ef      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b140:	7cfb      	ldrb	r3, [r7, #19]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d15c      	bne.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b146:	4b2c      	ldr	r3, [pc, #176]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b14c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d01f      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	429a      	cmp	r2, r3
 800b162:	d019      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b164:	4b24      	ldr	r3, [pc, #144]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b16a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b16e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b170:	4b21      	ldr	r3, [pc, #132]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b176:	4a20      	ldr	r2, [pc, #128]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b17c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b180:	4b1d      	ldr	r3, [pc, #116]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b186:	4a1c      	ldr	r2, [pc, #112]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b18c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b190:	4a19      	ldr	r2, [pc, #100]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d016      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a2:	f7fa f935 	bl	8005410 <HAL_GetTick>
 800b1a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1a8:	e00b      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1aa:	f7fa f931 	bl	8005410 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d902      	bls.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	74fb      	strb	r3, [r7, #19]
            break;
 800b1c0:	e006      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1c8:	f003 0302 	and.w	r3, r3, #2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d0ec      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b1d0:	7cfb      	ldrb	r3, [r7, #19]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10c      	bne.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1d6:	4b08      	ldr	r3, [pc, #32]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1e6:	4904      	ldr	r1, [pc, #16]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b1ee:	e009      	b.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b1f0:	7cfb      	ldrb	r3, [r7, #19]
 800b1f2:	74bb      	strb	r3, [r7, #18]
 800b1f4:	e006      	b.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b1f6:	bf00      	nop
 800b1f8:	40021000 	.word	0x40021000
 800b1fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b200:	7cfb      	ldrb	r3, [r7, #19]
 800b202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b204:	7c7b      	ldrb	r3, [r7, #17]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d105      	bne.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b20a:	4ba6      	ldr	r3, [pc, #664]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b20c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b20e:	4aa5      	ldr	r2, [pc, #660]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b214:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00a      	beq.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b222:	4ba0      	ldr	r3, [pc, #640]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b228:	f023 0203 	bic.w	r2, r3, #3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b230:	499c      	ldr	r1, [pc, #624]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b232:	4313      	orrs	r3, r2
 800b234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 0302 	and.w	r3, r3, #2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00a      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b244:	4b97      	ldr	r3, [pc, #604]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b24a:	f023 020c 	bic.w	r2, r3, #12
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b252:	4994      	ldr	r1, [pc, #592]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b254:	4313      	orrs	r3, r2
 800b256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00a      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b266:	4b8f      	ldr	r3, [pc, #572]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b26c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b274:	498b      	ldr	r1, [pc, #556]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b276:	4313      	orrs	r3, r2
 800b278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 0308 	and.w	r3, r3, #8
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00a      	beq.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b288:	4b86      	ldr	r3, [pc, #536]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b28e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b296:	4983      	ldr	r1, [pc, #524]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b298:	4313      	orrs	r3, r2
 800b29a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0310 	and.w	r3, r3, #16
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00a      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b2aa:	4b7e      	ldr	r3, [pc, #504]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2b8:	497a      	ldr	r1, [pc, #488]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0320 	and.w	r3, r3, #32
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00a      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2cc:	4b75      	ldr	r3, [pc, #468]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2da:	4972      	ldr	r1, [pc, #456]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00a      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2ee:	4b6d      	ldr	r3, [pc, #436]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2fc:	4969      	ldr	r1, [pc, #420]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00a      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b310:	4b64      	ldr	r3, [pc, #400]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b31e:	4961      	ldr	r1, [pc, #388]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b320:	4313      	orrs	r3, r2
 800b322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00a      	beq.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b332:	4b5c      	ldr	r3, [pc, #368]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b338:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b340:	4958      	ldr	r1, [pc, #352]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b342:	4313      	orrs	r3, r2
 800b344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00a      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b354:	4b53      	ldr	r3, [pc, #332]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b35a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b362:	4950      	ldr	r1, [pc, #320]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b364:	4313      	orrs	r3, r2
 800b366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b376:	4b4b      	ldr	r3, [pc, #300]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b37c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b384:	4947      	ldr	r1, [pc, #284]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b386:	4313      	orrs	r3, r2
 800b388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00a      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b398:	4b42      	ldr	r3, [pc, #264]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b39a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b39e:	f023 0203 	bic.w	r2, r3, #3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3a6:	493f      	ldr	r1, [pc, #252]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d028      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3ba:	4b3a      	ldr	r3, [pc, #232]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3c8:	4936      	ldr	r1, [pc, #216]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3d8:	d106      	bne.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3da:	4b32      	ldr	r3, [pc, #200]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	4a31      	ldr	r2, [pc, #196]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3e4:	60d3      	str	r3, [r2, #12]
 800b3e6:	e011      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b3f0:	d10c      	bne.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 f8c9 	bl	800b590 <RCCEx_PLLSAI1_Config>
 800b3fe:	4603      	mov	r3, r0
 800b400:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b402:	7cfb      	ldrb	r3, [r7, #19]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d001      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800b408:	7cfb      	ldrb	r3, [r7, #19]
 800b40a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d028      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b418:	4b22      	ldr	r3, [pc, #136]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b41e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b426:	491f      	ldr	r1, [pc, #124]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b428:	4313      	orrs	r3, r2
 800b42a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b436:	d106      	bne.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b438:	4b1a      	ldr	r3, [pc, #104]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	4a19      	ldr	r2, [pc, #100]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b43e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b442:	60d3      	str	r3, [r2, #12]
 800b444:	e011      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b44a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b44e:	d10c      	bne.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3304      	adds	r3, #4
 800b454:	2101      	movs	r1, #1
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f89a 	bl	800b590 <RCCEx_PLLSAI1_Config>
 800b45c:	4603      	mov	r3, r0
 800b45e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b460:	7cfb      	ldrb	r3, [r7, #19]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800b466:	7cfb      	ldrb	r3, [r7, #19]
 800b468:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d02a      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b476:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b47c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b484:	4907      	ldr	r1, [pc, #28]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b486:	4313      	orrs	r3, r2
 800b488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b494:	d108      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b496:	4b03      	ldr	r3, [pc, #12]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	4a02      	ldr	r2, [pc, #8]	@ (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b49c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4a0:	60d3      	str	r3, [r2, #12]
 800b4a2:	e013      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x534>
 800b4a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4b0:	d10c      	bne.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 f869 	bl	800b590 <RCCEx_PLLSAI1_Config>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b4c2:	7cfb      	ldrb	r3, [r7, #19]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d001      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800b4c8:	7cfb      	ldrb	r3, [r7, #19]
 800b4ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d02f      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b4d8:	4b2c      	ldr	r3, [pc, #176]	@ (800b58c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4e6:	4929      	ldr	r1, [pc, #164]	@ (800b58c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4f6:	d10d      	bne.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	2102      	movs	r1, #2
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 f846 	bl	800b590 <RCCEx_PLLSAI1_Config>
 800b504:	4603      	mov	r3, r0
 800b506:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b508:	7cfb      	ldrb	r3, [r7, #19]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d014      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b50e:	7cfb      	ldrb	r3, [r7, #19]
 800b510:	74bb      	strb	r3, [r7, #18]
 800b512:	e011      	b.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b51c:	d10c      	bne.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	3320      	adds	r3, #32
 800b522:	2102      	movs	r1, #2
 800b524:	4618      	mov	r0, r3
 800b526:	f000 f925 	bl	800b774 <RCCEx_PLLSAI2_Config>
 800b52a:	4603      	mov	r3, r0
 800b52c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b52e:	7cfb      	ldrb	r3, [r7, #19]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b534:	7cfb      	ldrb	r3, [r7, #19]
 800b536:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00b      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b544:	4b11      	ldr	r3, [pc, #68]	@ (800b58c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b54a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b554:	490d      	ldr	r1, [pc, #52]	@ (800b58c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b556:	4313      	orrs	r3, r2
 800b558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00b      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b568:	4b08      	ldr	r3, [pc, #32]	@ (800b58c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b56e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b578:	4904      	ldr	r1, [pc, #16]	@ (800b58c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b580:	7cbb      	ldrb	r3, [r7, #18]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	40021000 	.word	0x40021000

0800b590 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b59e:	4b74      	ldr	r3, [pc, #464]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	f003 0303 	and.w	r3, r3, #3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d018      	beq.n	800b5dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b5aa:	4b71      	ldr	r3, [pc, #452]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	f003 0203 	and.w	r2, r3, #3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d10d      	bne.n	800b5d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
       ||
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b5c2:	4b6b      	ldr	r3, [pc, #428]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	091b      	lsrs	r3, r3, #4
 800b5c8:	f003 0307 	and.w	r3, r3, #7
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
       ||
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d047      	beq.n	800b666 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	73fb      	strb	r3, [r7, #15]
 800b5da:	e044      	b.n	800b666 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b03      	cmp	r3, #3
 800b5e2:	d018      	beq.n	800b616 <RCCEx_PLLSAI1_Config+0x86>
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d825      	bhi.n	800b634 <RCCEx_PLLSAI1_Config+0xa4>
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d002      	beq.n	800b5f2 <RCCEx_PLLSAI1_Config+0x62>
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d009      	beq.n	800b604 <RCCEx_PLLSAI1_Config+0x74>
 800b5f0:	e020      	b.n	800b634 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b5f2:	4b5f      	ldr	r3, [pc, #380]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d11d      	bne.n	800b63a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b602:	e01a      	b.n	800b63a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b604:	4b5a      	ldr	r3, [pc, #360]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d116      	bne.n	800b63e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b614:	e013      	b.n	800b63e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b616:	4b56      	ldr	r3, [pc, #344]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10f      	bne.n	800b642 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b622:	4b53      	ldr	r3, [pc, #332]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d109      	bne.n	800b642 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b632:	e006      	b.n	800b642 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
      break;
 800b638:	e004      	b.n	800b644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b63a:	bf00      	nop
 800b63c:	e002      	b.n	800b644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b63e:	bf00      	nop
 800b640:	e000      	b.n	800b644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b642:	bf00      	nop
    }

    if(status == HAL_OK)
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10d      	bne.n	800b666 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b64a:	4b49      	ldr	r3, [pc, #292]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6819      	ldr	r1, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	011b      	lsls	r3, r3, #4
 800b65e:	430b      	orrs	r3, r1
 800b660:	4943      	ldr	r1, [pc, #268]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b662:	4313      	orrs	r3, r2
 800b664:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d17c      	bne.n	800b766 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b66c:	4b40      	ldr	r3, [pc, #256]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a3f      	ldr	r2, [pc, #252]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b672:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b678:	f7f9 feca 	bl	8005410 <HAL_GetTick>
 800b67c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b67e:	e009      	b.n	800b694 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b680:	f7f9 fec6 	bl	8005410 <HAL_GetTick>
 800b684:	4602      	mov	r2, r0
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d902      	bls.n	800b694 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	73fb      	strb	r3, [r7, #15]
        break;
 800b692:	e005      	b.n	800b6a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b694:	4b36      	ldr	r3, [pc, #216]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1ef      	bne.n	800b680 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d15f      	bne.n	800b766 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d110      	bne.n	800b6ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6ac:	4b30      	ldr	r3, [pc, #192]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b6b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	6892      	ldr	r2, [r2, #8]
 800b6bc:	0211      	lsls	r1, r2, #8
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	68d2      	ldr	r2, [r2, #12]
 800b6c2:	06d2      	lsls	r2, r2, #27
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	492a      	ldr	r1, [pc, #168]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	610b      	str	r3, [r1, #16]
 800b6cc:	e027      	b.n	800b71e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d112      	bne.n	800b6fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6d4:	4b26      	ldr	r3, [pc, #152]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b6dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	6892      	ldr	r2, [r2, #8]
 800b6e4:	0211      	lsls	r1, r2, #8
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	6912      	ldr	r2, [r2, #16]
 800b6ea:	0852      	lsrs	r2, r2, #1
 800b6ec:	3a01      	subs	r2, #1
 800b6ee:	0552      	lsls	r2, r2, #21
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	491f      	ldr	r1, [pc, #124]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	610b      	str	r3, [r1, #16]
 800b6f8:	e011      	b.n	800b71e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b702:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6892      	ldr	r2, [r2, #8]
 800b70a:	0211      	lsls	r1, r2, #8
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	6952      	ldr	r2, [r2, #20]
 800b710:	0852      	lsrs	r2, r2, #1
 800b712:	3a01      	subs	r2, #1
 800b714:	0652      	lsls	r2, r2, #25
 800b716:	430a      	orrs	r2, r1
 800b718:	4915      	ldr	r1, [pc, #84]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b71e:	4b14      	ldr	r3, [pc, #80]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a13      	ldr	r2, [pc, #76]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b728:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b72a:	f7f9 fe71 	bl	8005410 <HAL_GetTick>
 800b72e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b730:	e009      	b.n	800b746 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b732:	f7f9 fe6d 	bl	8005410 <HAL_GetTick>
 800b736:	4602      	mov	r2, r0
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d902      	bls.n	800b746 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b740:	2303      	movs	r3, #3
 800b742:	73fb      	strb	r3, [r7, #15]
          break;
 800b744:	e005      	b.n	800b752 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b746:	4b0a      	ldr	r3, [pc, #40]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0ef      	beq.n	800b732 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b752:	7bfb      	ldrb	r3, [r7, #15]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d106      	bne.n	800b766 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b758:	4b05      	ldr	r3, [pc, #20]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b75a:	691a      	ldr	r2, [r3, #16]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	4903      	ldr	r1, [pc, #12]	@ (800b770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b762:	4313      	orrs	r3, r2
 800b764:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b766:	7bfb      	ldrb	r3, [r7, #15]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	40021000 	.word	0x40021000

0800b774 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b782:	4b69      	ldr	r3, [pc, #420]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f003 0303 	and.w	r3, r3, #3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d018      	beq.n	800b7c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b78e:	4b66      	ldr	r3, [pc, #408]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	f003 0203 	and.w	r2, r3, #3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d10d      	bne.n	800b7ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
       ||
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d009      	beq.n	800b7ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b7a6:	4b60      	ldr	r3, [pc, #384]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	091b      	lsrs	r3, r3, #4
 800b7ac:	f003 0307 	and.w	r3, r3, #7
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	685b      	ldr	r3, [r3, #4]
       ||
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d047      	beq.n	800b84a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	73fb      	strb	r3, [r7, #15]
 800b7be:	e044      	b.n	800b84a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d018      	beq.n	800b7fa <RCCEx_PLLSAI2_Config+0x86>
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d825      	bhi.n	800b818 <RCCEx_PLLSAI2_Config+0xa4>
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d002      	beq.n	800b7d6 <RCCEx_PLLSAI2_Config+0x62>
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d009      	beq.n	800b7e8 <RCCEx_PLLSAI2_Config+0x74>
 800b7d4:	e020      	b.n	800b818 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b7d6:	4b54      	ldr	r3, [pc, #336]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d11d      	bne.n	800b81e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7e6:	e01a      	b.n	800b81e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b7e8:	4b4f      	ldr	r3, [pc, #316]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d116      	bne.n	800b822 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7f8:	e013      	b.n	800b822 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b7fa:	4b4b      	ldr	r3, [pc, #300]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10f      	bne.n	800b826 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b806:	4b48      	ldr	r3, [pc, #288]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d109      	bne.n	800b826 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b816:	e006      	b.n	800b826 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	73fb      	strb	r3, [r7, #15]
      break;
 800b81c:	e004      	b.n	800b828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b81e:	bf00      	nop
 800b820:	e002      	b.n	800b828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b822:	bf00      	nop
 800b824:	e000      	b.n	800b828 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b826:	bf00      	nop
    }

    if(status == HAL_OK)
 800b828:	7bfb      	ldrb	r3, [r7, #15]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10d      	bne.n	800b84a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b82e:	4b3e      	ldr	r3, [pc, #248]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6819      	ldr	r1, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	3b01      	subs	r3, #1
 800b840:	011b      	lsls	r3, r3, #4
 800b842:	430b      	orrs	r3, r1
 800b844:	4938      	ldr	r1, [pc, #224]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b846:	4313      	orrs	r3, r2
 800b848:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d166      	bne.n	800b91e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b850:	4b35      	ldr	r3, [pc, #212]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a34      	ldr	r2, [pc, #208]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b85a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b85c:	f7f9 fdd8 	bl	8005410 <HAL_GetTick>
 800b860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b862:	e009      	b.n	800b878 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b864:	f7f9 fdd4 	bl	8005410 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d902      	bls.n	800b878 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b872:	2303      	movs	r3, #3
 800b874:	73fb      	strb	r3, [r7, #15]
        break;
 800b876:	e005      	b.n	800b884 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b878:	4b2b      	ldr	r3, [pc, #172]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1ef      	bne.n	800b864 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d149      	bne.n	800b91e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d110      	bne.n	800b8b2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b890:	4b25      	ldr	r3, [pc, #148]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b898:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	6892      	ldr	r2, [r2, #8]
 800b8a0:	0211      	lsls	r1, r2, #8
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	68d2      	ldr	r2, [r2, #12]
 800b8a6:	06d2      	lsls	r2, r2, #27
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	491f      	ldr	r1, [pc, #124]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	614b      	str	r3, [r1, #20]
 800b8b0:	e011      	b.n	800b8d6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b8b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8b4:	695b      	ldr	r3, [r3, #20]
 800b8b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b8ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	6892      	ldr	r2, [r2, #8]
 800b8c2:	0211      	lsls	r1, r2, #8
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	6912      	ldr	r2, [r2, #16]
 800b8c8:	0852      	lsrs	r2, r2, #1
 800b8ca:	3a01      	subs	r2, #1
 800b8cc:	0652      	lsls	r2, r2, #25
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	4915      	ldr	r1, [pc, #84]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b8d6:	4b14      	ldr	r3, [pc, #80]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a13      	ldr	r2, [pc, #76]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8e2:	f7f9 fd95 	bl	8005410 <HAL_GetTick>
 800b8e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b8e8:	e009      	b.n	800b8fe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b8ea:	f7f9 fd91 	bl	8005410 <HAL_GetTick>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d902      	bls.n	800b8fe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	73fb      	strb	r3, [r7, #15]
          break;
 800b8fc:	e005      	b.n	800b90a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b8fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b906:	2b00      	cmp	r3, #0
 800b908:	d0ef      	beq.n	800b8ea <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d106      	bne.n	800b91e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b910:	4b05      	ldr	r3, [pc, #20]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b912:	695a      	ldr	r2, [r3, #20]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	4903      	ldr	r1, [pc, #12]	@ (800b928 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b91a:	4313      	orrs	r3, r2
 800b91c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	40021000 	.word	0x40021000

0800b92c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e049      	b.n	800b9d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d106      	bne.n	800b958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7f9 f82a 	bl	80049ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f000 f9d0 	bl	800bd10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d001      	beq.n	800b9f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e04f      	b.n	800ba94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68da      	ldr	r2, [r3, #12]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f042 0201 	orr.w	r2, r2, #1
 800ba0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a23      	ldr	r2, [pc, #140]	@ (800baa0 <HAL_TIM_Base_Start_IT+0xc4>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d01d      	beq.n	800ba52 <HAL_TIM_Base_Start_IT+0x76>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba1e:	d018      	beq.n	800ba52 <HAL_TIM_Base_Start_IT+0x76>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a1f      	ldr	r2, [pc, #124]	@ (800baa4 <HAL_TIM_Base_Start_IT+0xc8>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d013      	beq.n	800ba52 <HAL_TIM_Base_Start_IT+0x76>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a1e      	ldr	r2, [pc, #120]	@ (800baa8 <HAL_TIM_Base_Start_IT+0xcc>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d00e      	beq.n	800ba52 <HAL_TIM_Base_Start_IT+0x76>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a1c      	ldr	r2, [pc, #112]	@ (800baac <HAL_TIM_Base_Start_IT+0xd0>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d009      	beq.n	800ba52 <HAL_TIM_Base_Start_IT+0x76>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a1b      	ldr	r2, [pc, #108]	@ (800bab0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d004      	beq.n	800ba52 <HAL_TIM_Base_Start_IT+0x76>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a19      	ldr	r2, [pc, #100]	@ (800bab4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d115      	bne.n	800ba7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	689a      	ldr	r2, [r3, #8]
 800ba58:	4b17      	ldr	r3, [pc, #92]	@ (800bab8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2b06      	cmp	r3, #6
 800ba62:	d015      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0xb4>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba6a:	d011      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0201 	orr.w	r2, r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba7c:	e008      	b.n	800ba90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 0201 	orr.w	r2, r2, #1
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	e000      	b.n	800ba92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	40012c00 	.word	0x40012c00
 800baa4:	40000400 	.word	0x40000400
 800baa8:	40000800 	.word	0x40000800
 800baac:	40000c00 	.word	0x40000c00
 800bab0:	40013400 	.word	0x40013400
 800bab4:	40014000 	.word	0x40014000
 800bab8:	00010007 	.word	0x00010007

0800babc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d020      	beq.n	800bb20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f003 0302 	and.w	r3, r3, #2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d01b      	beq.n	800bb20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f06f 0202 	mvn.w	r2, #2
 800baf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2201      	movs	r2, #1
 800baf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	f003 0303 	and.w	r3, r3, #3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f8e4 	bl	800bcd4 <HAL_TIM_IC_CaptureCallback>
 800bb0c:	e005      	b.n	800bb1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f8d6 	bl	800bcc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f8e7 	bl	800bce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f003 0304 	and.w	r3, r3, #4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d020      	beq.n	800bb6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d01b      	beq.n	800bb6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f06f 0204 	mvn.w	r2, #4
 800bb3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2202      	movs	r2, #2
 800bb42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f8be 	bl	800bcd4 <HAL_TIM_IC_CaptureCallback>
 800bb58:	e005      	b.n	800bb66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f8b0 	bl	800bcc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f8c1 	bl	800bce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	f003 0308 	and.w	r3, r3, #8
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d020      	beq.n	800bbb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f003 0308 	and.w	r3, r3, #8
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d01b      	beq.n	800bbb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f06f 0208 	mvn.w	r2, #8
 800bb88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2204      	movs	r2, #4
 800bb8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	f003 0303 	and.w	r3, r3, #3
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f898 	bl	800bcd4 <HAL_TIM_IC_CaptureCallback>
 800bba4:	e005      	b.n	800bbb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f88a 	bl	800bcc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f89b 	bl	800bce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	f003 0310 	and.w	r3, r3, #16
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d020      	beq.n	800bc04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f003 0310 	and.w	r3, r3, #16
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d01b      	beq.n	800bc04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f06f 0210 	mvn.w	r2, #16
 800bbd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2208      	movs	r2, #8
 800bbda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f872 	bl	800bcd4 <HAL_TIM_IC_CaptureCallback>
 800bbf0:	e005      	b.n	800bbfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f864 	bl	800bcc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f875 	bl	800bce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00c      	beq.n	800bc28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d007      	beq.n	800bc28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f06f 0201 	mvn.w	r2, #1
 800bc20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7f8 fccc 	bl	80045c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00c      	beq.n	800bc4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d007      	beq.n	800bc4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bc44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f98e 	bl	800bf68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00c      	beq.n	800bc70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d007      	beq.n	800bc70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f986 	bl	800bf7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00c      	beq.n	800bc94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d007      	beq.n	800bc94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f834 	bl	800bcfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f003 0320 	and.w	r3, r3, #32
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00c      	beq.n	800bcb8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f003 0320 	and.w	r3, r3, #32
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d007      	beq.n	800bcb8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f06f 0220 	mvn.w	r2, #32
 800bcb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f94e 	bl	800bf54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a40      	ldr	r2, [pc, #256]	@ (800be24 <TIM_Base_SetConfig+0x114>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d013      	beq.n	800bd50 <TIM_Base_SetConfig+0x40>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd2e:	d00f      	beq.n	800bd50 <TIM_Base_SetConfig+0x40>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a3d      	ldr	r2, [pc, #244]	@ (800be28 <TIM_Base_SetConfig+0x118>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d00b      	beq.n	800bd50 <TIM_Base_SetConfig+0x40>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a3c      	ldr	r2, [pc, #240]	@ (800be2c <TIM_Base_SetConfig+0x11c>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d007      	beq.n	800bd50 <TIM_Base_SetConfig+0x40>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a3b      	ldr	r2, [pc, #236]	@ (800be30 <TIM_Base_SetConfig+0x120>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d003      	beq.n	800bd50 <TIM_Base_SetConfig+0x40>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a3a      	ldr	r2, [pc, #232]	@ (800be34 <TIM_Base_SetConfig+0x124>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d108      	bne.n	800bd62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a2f      	ldr	r2, [pc, #188]	@ (800be24 <TIM_Base_SetConfig+0x114>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d01f      	beq.n	800bdaa <TIM_Base_SetConfig+0x9a>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd70:	d01b      	beq.n	800bdaa <TIM_Base_SetConfig+0x9a>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a2c      	ldr	r2, [pc, #176]	@ (800be28 <TIM_Base_SetConfig+0x118>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d017      	beq.n	800bdaa <TIM_Base_SetConfig+0x9a>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4a2b      	ldr	r2, [pc, #172]	@ (800be2c <TIM_Base_SetConfig+0x11c>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d013      	beq.n	800bdaa <TIM_Base_SetConfig+0x9a>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4a2a      	ldr	r2, [pc, #168]	@ (800be30 <TIM_Base_SetConfig+0x120>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d00f      	beq.n	800bdaa <TIM_Base_SetConfig+0x9a>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a29      	ldr	r2, [pc, #164]	@ (800be34 <TIM_Base_SetConfig+0x124>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d00b      	beq.n	800bdaa <TIM_Base_SetConfig+0x9a>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a28      	ldr	r2, [pc, #160]	@ (800be38 <TIM_Base_SetConfig+0x128>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d007      	beq.n	800bdaa <TIM_Base_SetConfig+0x9a>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a27      	ldr	r2, [pc, #156]	@ (800be3c <TIM_Base_SetConfig+0x12c>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d003      	beq.n	800bdaa <TIM_Base_SetConfig+0x9a>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a26      	ldr	r2, [pc, #152]	@ (800be40 <TIM_Base_SetConfig+0x130>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d108      	bne.n	800bdbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a10      	ldr	r2, [pc, #64]	@ (800be24 <TIM_Base_SetConfig+0x114>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d00f      	beq.n	800be08 <TIM_Base_SetConfig+0xf8>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a12      	ldr	r2, [pc, #72]	@ (800be34 <TIM_Base_SetConfig+0x124>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d00b      	beq.n	800be08 <TIM_Base_SetConfig+0xf8>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a11      	ldr	r2, [pc, #68]	@ (800be38 <TIM_Base_SetConfig+0x128>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d007      	beq.n	800be08 <TIM_Base_SetConfig+0xf8>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a10      	ldr	r2, [pc, #64]	@ (800be3c <TIM_Base_SetConfig+0x12c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d003      	beq.n	800be08 <TIM_Base_SetConfig+0xf8>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a0f      	ldr	r2, [pc, #60]	@ (800be40 <TIM_Base_SetConfig+0x130>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d103      	bne.n	800be10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	691a      	ldr	r2, [r3, #16]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	615a      	str	r2, [r3, #20]
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	40012c00 	.word	0x40012c00
 800be28:	40000400 	.word	0x40000400
 800be2c:	40000800 	.word	0x40000800
 800be30:	40000c00 	.word	0x40000c00
 800be34:	40013400 	.word	0x40013400
 800be38:	40014000 	.word	0x40014000
 800be3c:	40014400 	.word	0x40014400
 800be40:	40014800 	.word	0x40014800

0800be44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be54:	2b01      	cmp	r3, #1
 800be56:	d101      	bne.n	800be5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be58:	2302      	movs	r3, #2
 800be5a:	e068      	b.n	800bf2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a2e      	ldr	r2, [pc, #184]	@ (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d004      	beq.n	800be90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a2d      	ldr	r2, [pc, #180]	@ (800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d108      	bne.n	800bea2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800be96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bea8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a1e      	ldr	r2, [pc, #120]	@ (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d01d      	beq.n	800bf02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bece:	d018      	beq.n	800bf02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a1b      	ldr	r2, [pc, #108]	@ (800bf44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d013      	beq.n	800bf02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a1a      	ldr	r2, [pc, #104]	@ (800bf48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d00e      	beq.n	800bf02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a18      	ldr	r2, [pc, #96]	@ (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d009      	beq.n	800bf02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a13      	ldr	r2, [pc, #76]	@ (800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d004      	beq.n	800bf02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a14      	ldr	r2, [pc, #80]	@ (800bf50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d10c      	bne.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	68ba      	ldr	r2, [r7, #8]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	40012c00 	.word	0x40012c00
 800bf40:	40013400 	.word	0x40013400
 800bf44:	40000400 	.word	0x40000400
 800bf48:	40000800 	.word	0x40000800
 800bf4c:	40000c00 	.word	0x40000c00
 800bf50:	40014000 	.word	0x40014000

0800bf54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e040      	b.n	800c024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d106      	bne.n	800bfb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7f8 fd20 	bl	80049f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2224      	movs	r2, #36	@ 0x24
 800bfbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f022 0201 	bic.w	r2, r2, #1
 800bfcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 ff04 	bl	800cde4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fc49 	bl	800c874 <UART_SetConfig>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d101      	bne.n	800bfec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e01b      	b.n	800c024 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c00a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f042 0201 	orr.w	r2, r2, #1
 800c01a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 ff83 	bl	800cf28 <UART_CheckIdleState>
 800c022:	4603      	mov	r3, r0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e02f      	b.n	800c09e <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2224      	movs	r2, #36	@ 0x24
 800c042:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f022 0201 	bic.w	r2, r2, #1
 800c052:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2200      	movs	r2, #0
 800c05a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2200      	movs	r2, #0
 800c062:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2200      	movs	r2, #0
 800c06a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7f8 fe51 	bl	8004d14 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
	...

0800c0a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08a      	sub	sp, #40	@ 0x28
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0ba:	2b20      	cmp	r3, #32
 800c0bc:	d165      	bne.n	800c18a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <HAL_UART_Transmit_DMA+0x22>
 800c0c4:	88fb      	ldrh	r3, [r7, #6]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e05e      	b.n	800c18c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	88fa      	ldrh	r2, [r7, #6]
 800c0d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	88fa      	ldrh	r2, [r7, #6]
 800c0e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2221      	movs	r2, #33	@ 0x21
 800c0f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d027      	beq.n	800c14a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0fe:	4a25      	ldr	r2, [pc, #148]	@ (800c194 <HAL_UART_Transmit_DMA+0xec>)
 800c100:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c106:	4a24      	ldr	r2, [pc, #144]	@ (800c198 <HAL_UART_Transmit_DMA+0xf0>)
 800c108:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c10e:	4a23      	ldr	r2, [pc, #140]	@ (800c19c <HAL_UART_Transmit_DMA+0xf4>)
 800c110:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c116:	2200      	movs	r2, #0
 800c118:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c122:	4619      	mov	r1, r3
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	3328      	adds	r3, #40	@ 0x28
 800c12a:	461a      	mov	r2, r3
 800c12c:	88fb      	ldrh	r3, [r7, #6]
 800c12e:	f7fb f8a9 	bl	8007284 <HAL_DMA_Start_IT>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d008      	beq.n	800c14a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2210      	movs	r2, #16
 800c13c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2220      	movs	r2, #32
 800c144:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	e020      	b.n	800c18c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2240      	movs	r2, #64	@ 0x40
 800c150:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3308      	adds	r3, #8
 800c158:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	e853 3f00 	ldrex	r3, [r3]
 800c160:	613b      	str	r3, [r7, #16]
   return(result);
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c168:	627b      	str	r3, [r7, #36]	@ 0x24
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	3308      	adds	r3, #8
 800c170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c172:	623a      	str	r2, [r7, #32]
 800c174:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c176:	69f9      	ldr	r1, [r7, #28]
 800c178:	6a3a      	ldr	r2, [r7, #32]
 800c17a:	e841 2300 	strex	r3, r2, [r1]
 800c17e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1e5      	bne.n	800c152 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c186:	2300      	movs	r3, #0
 800c188:	e000      	b.n	800c18c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c18a:	2302      	movs	r3, #2
  }
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3728      	adds	r7, #40	@ 0x28
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	0800d39d 	.word	0x0800d39d
 800c198:	0800d437 	.word	0x0800d437
 800c19c:	0800d5bd 	.word	0x0800d5bd

0800c1a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08a      	sub	sp, #40	@ 0x28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1b4:	2b20      	cmp	r3, #32
 800c1b6:	d137      	bne.n	800c228 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <HAL_UART_Receive_DMA+0x24>
 800c1be:	88fb      	ldrh	r3, [r7, #6]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e030      	b.n	800c22a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a18      	ldr	r2, [pc, #96]	@ (800c234 <HAL_UART_Receive_DMA+0x94>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d01f      	beq.n	800c218 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d018      	beq.n	800c218 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	e853 3f00 	ldrex	r3, [r3]
 800c1f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c1fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	461a      	mov	r2, r3
 800c202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c204:	623b      	str	r3, [r7, #32]
 800c206:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c208:	69f9      	ldr	r1, [r7, #28]
 800c20a:	6a3a      	ldr	r2, [r7, #32]
 800c20c:	e841 2300 	strex	r3, r2, [r1]
 800c210:	61bb      	str	r3, [r7, #24]
   return(result);
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1e6      	bne.n	800c1e6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c218:	88fb      	ldrh	r3, [r7, #6]
 800c21a:	461a      	mov	r2, r3
 800c21c:	68b9      	ldr	r1, [r7, #8]
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 ff92 	bl	800d148 <UART_Start_Receive_DMA>
 800c224:	4603      	mov	r3, r0
 800c226:	e000      	b.n	800c22a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c228:	2302      	movs	r3, #2
  }
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3728      	adds	r7, #40	@ 0x28
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	40008000 	.word	0x40008000

0800c238 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b0ba      	sub	sp, #232	@ 0xe8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c25e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c262:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c266:	4013      	ands	r3, r2
 800c268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c26c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c270:	2b00      	cmp	r3, #0
 800c272:	d115      	bne.n	800c2a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c278:	f003 0320 	and.w	r3, r3, #32
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00f      	beq.n	800c2a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c284:	f003 0320 	and.w	r3, r3, #32
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d009      	beq.n	800c2a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 82ae 	beq.w	800c7f2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	4798      	blx	r3
      }
      return;
 800c29e:	e2a8      	b.n	800c7f2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c2a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 8117 	beq.w	800c4d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c2aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2ae:	f003 0301 	and.w	r3, r3, #1
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d106      	bne.n	800c2c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c2b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c2ba:	4b85      	ldr	r3, [pc, #532]	@ (800c4d0 <HAL_UART_IRQHandler+0x298>)
 800c2bc:	4013      	ands	r3, r2
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 810a 	beq.w	800c4d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d011      	beq.n	800c2f4 <HAL_UART_IRQHandler+0xbc>
 800c2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2ea:	f043 0201 	orr.w	r2, r3, #1
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2f8:	f003 0302 	and.w	r3, r3, #2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d011      	beq.n	800c324 <HAL_UART_IRQHandler+0xec>
 800c300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00b      	beq.n	800c324 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2202      	movs	r2, #2
 800c312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c31a:	f043 0204 	orr.w	r2, r3, #4
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d011      	beq.n	800c354 <HAL_UART_IRQHandler+0x11c>
 800c330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2204      	movs	r2, #4
 800c342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c34a:	f043 0202 	orr.w	r2, r3, #2
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c358:	f003 0308 	and.w	r3, r3, #8
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d017      	beq.n	800c390 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c364:	f003 0320 	and.w	r3, r3, #32
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d105      	bne.n	800c378 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c36c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c370:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2208      	movs	r2, #8
 800c37e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c386:	f043 0208 	orr.w	r2, r3, #8
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d012      	beq.n	800c3c2 <HAL_UART_IRQHandler+0x18a>
 800c39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00c      	beq.n	800c3c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3b8:	f043 0220 	orr.w	r2, r3, #32
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f000 8214 	beq.w	800c7f6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3d2:	f003 0320 	and.w	r3, r3, #32
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00d      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c3da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3de:	f003 0320 	and.w	r3, r3, #32
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d007      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c40a:	2b40      	cmp	r3, #64	@ 0x40
 800c40c:	d005      	beq.n	800c41a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c40e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c416:	2b00      	cmp	r3, #0
 800c418:	d04f      	beq.n	800c4ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 ff5a 	bl	800d2d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c42a:	2b40      	cmp	r3, #64	@ 0x40
 800c42c:	d141      	bne.n	800c4b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3308      	adds	r3, #8
 800c434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c43c:	e853 3f00 	ldrex	r3, [r3]
 800c440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c44c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	3308      	adds	r3, #8
 800c456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c45a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c45e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c46a:	e841 2300 	strex	r3, r2, [r1]
 800c46e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1d9      	bne.n	800c42e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d013      	beq.n	800c4aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c486:	4a13      	ldr	r2, [pc, #76]	@ (800c4d4 <HAL_UART_IRQHandler+0x29c>)
 800c488:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fa ff96 	bl	80073c0 <HAL_DMA_Abort_IT>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d017      	beq.n	800c4ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a8:	e00f      	b.n	800c4ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f9cc 	bl	800c848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b0:	e00b      	b.n	800c4ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 f9c8 	bl	800c848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b8:	e007      	b.n	800c4ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f9c4 	bl	800c848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c4c8:	e195      	b.n	800c7f6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ca:	bf00      	nop
    return;
 800c4cc:	e193      	b.n	800c7f6 <HAL_UART_IRQHandler+0x5be>
 800c4ce:	bf00      	nop
 800c4d0:	04000120 	.word	0x04000120
 800c4d4:	0800d63b 	.word	0x0800d63b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	f040 814e 	bne.w	800c77e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4e6:	f003 0310 	and.w	r3, r3, #16
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 8147 	beq.w	800c77e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 8140 	beq.w	800c77e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2210      	movs	r2, #16
 800c504:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c510:	2b40      	cmp	r3, #64	@ 0x40
 800c512:	f040 80b8 	bne.w	800c686 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c522:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 8167 	beq.w	800c7fa <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c536:	429a      	cmp	r2, r3
 800c538:	f080 815f 	bcs.w	800c7fa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c542:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 0320 	and.w	r3, r3, #32
 800c552:	2b00      	cmp	r3, #0
 800c554:	f040 8086 	bne.w	800c664 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c560:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c564:	e853 3f00 	ldrex	r3, [r3]
 800c568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c56c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	461a      	mov	r2, r3
 800c57e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c582:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c586:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c58e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c592:	e841 2300 	strex	r3, r2, [r1]
 800c596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c59a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1da      	bne.n	800c558 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5ac:	e853 3f00 	ldrex	r3, [r3]
 800c5b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5b4:	f023 0301 	bic.w	r3, r3, #1
 800c5b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c5ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c5ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c5d2:	e841 2300 	strex	r3, r2, [r1]
 800c5d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c5d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1e1      	bne.n	800c5a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5e8:	e853 3f00 	ldrex	r3, [r3]
 800c5ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c5ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c602:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c604:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c606:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c608:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c60a:	e841 2300 	strex	r3, r2, [r1]
 800c60e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e3      	bne.n	800c5de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2220      	movs	r2, #32
 800c61a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c634:	f023 0310 	bic.w	r3, r3, #16
 800c638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	461a      	mov	r2, r3
 800c642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c646:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c648:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c64c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c64e:	e841 2300 	strex	r3, r2, [r1]
 800c652:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e4      	bne.n	800c624 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fa fe70 	bl	8007344 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2202      	movs	r2, #2
 800c668:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c676:	b29b      	uxth	r3, r3
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 f8ec 	bl	800c85c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c684:	e0b9      	b.n	800c7fa <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c692:	b29b      	uxth	r3, r3
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 80ab 	beq.w	800c7fe <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800c6a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 80a6 	beq.w	800c7fe <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ba:	e853 3f00 	ldrex	r3, [r3]
 800c6be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6dc:	e841 2300 	strex	r3, r2, [r1]
 800c6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e4      	bne.n	800c6b2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f2:	e853 3f00 	ldrex	r3, [r3]
 800c6f6:	623b      	str	r3, [r7, #32]
   return(result);
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	f023 0301 	bic.w	r3, r3, #1
 800c6fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3308      	adds	r3, #8
 800c708:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c70c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c70e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c710:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c714:	e841 2300 	strex	r3, r2, [r1]
 800c718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1e3      	bne.n	800c6e8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2220      	movs	r2, #32
 800c724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	60fb      	str	r3, [r7, #12]
   return(result);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f023 0310 	bic.w	r3, r3, #16
 800c748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	461a      	mov	r2, r3
 800c752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c756:	61fb      	str	r3, [r7, #28]
 800c758:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75a:	69b9      	ldr	r1, [r7, #24]
 800c75c:	69fa      	ldr	r2, [r7, #28]
 800c75e:	e841 2300 	strex	r3, r2, [r1]
 800c762:	617b      	str	r3, [r7, #20]
   return(result);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1e4      	bne.n	800c734 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2202      	movs	r2, #2
 800c76e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f870 	bl	800c85c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c77c:	e03f      	b.n	800c7fe <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00e      	beq.n	800c7a8 <HAL_UART_IRQHandler+0x570>
 800c78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c78e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d008      	beq.n	800c7a8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c79e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 ff8a 	bl	800d6ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7a6:	e02d      	b.n	800c804 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00e      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d008      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01c      	beq.n	800c802 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	4798      	blx	r3
    }
    return;
 800c7d0:	e017      	b.n	800c802 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d012      	beq.n	800c804 <HAL_UART_IRQHandler+0x5cc>
 800c7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00c      	beq.n	800c804 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 ff3b 	bl	800d666 <UART_EndTransmit_IT>
    return;
 800c7f0:	e008      	b.n	800c804 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c7f2:	bf00      	nop
 800c7f4:	e006      	b.n	800c804 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c7f6:	bf00      	nop
 800c7f8:	e004      	b.n	800c804 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c7fa:	bf00      	nop
 800c7fc:	e002      	b.n	800c804 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c7fe:	bf00      	nop
 800c800:	e000      	b.n	800c804 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c802:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c804:	37e8      	adds	r7, #232	@ 0xe8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop

0800c80c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c878:	b08a      	sub	sp, #40	@ 0x28
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	689a      	ldr	r2, [r3, #8]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	431a      	orrs	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	431a      	orrs	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	4313      	orrs	r3, r2
 800c89a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	4ba4      	ldr	r3, [pc, #656]	@ (800cb34 <UART_SetConfig+0x2c0>)
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	6812      	ldr	r2, [r2, #0]
 800c8aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8ac:	430b      	orrs	r3, r1
 800c8ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	68da      	ldr	r2, [r3, #12]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	699b      	ldr	r3, [r3, #24]
 800c8ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a99      	ldr	r2, [pc, #612]	@ (800cb38 <UART_SetConfig+0x2c4>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d004      	beq.n	800c8e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8f0:	430a      	orrs	r2, r1
 800c8f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a90      	ldr	r2, [pc, #576]	@ (800cb3c <UART_SetConfig+0x2c8>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d126      	bne.n	800c94c <UART_SetConfig+0xd8>
 800c8fe:	4b90      	ldr	r3, [pc, #576]	@ (800cb40 <UART_SetConfig+0x2cc>)
 800c900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c904:	f003 0303 	and.w	r3, r3, #3
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d81b      	bhi.n	800c944 <UART_SetConfig+0xd0>
 800c90c:	a201      	add	r2, pc, #4	@ (adr r2, 800c914 <UART_SetConfig+0xa0>)
 800c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c912:	bf00      	nop
 800c914:	0800c925 	.word	0x0800c925
 800c918:	0800c935 	.word	0x0800c935
 800c91c:	0800c92d 	.word	0x0800c92d
 800c920:	0800c93d 	.word	0x0800c93d
 800c924:	2301      	movs	r3, #1
 800c926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c92a:	e116      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c92c:	2302      	movs	r3, #2
 800c92e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c932:	e112      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c934:	2304      	movs	r3, #4
 800c936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c93a:	e10e      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c93c:	2308      	movs	r3, #8
 800c93e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c942:	e10a      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c944:	2310      	movs	r3, #16
 800c946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c94a:	e106      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a7c      	ldr	r2, [pc, #496]	@ (800cb44 <UART_SetConfig+0x2d0>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d138      	bne.n	800c9c8 <UART_SetConfig+0x154>
 800c956:	4b7a      	ldr	r3, [pc, #488]	@ (800cb40 <UART_SetConfig+0x2cc>)
 800c958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c95c:	f003 030c 	and.w	r3, r3, #12
 800c960:	2b0c      	cmp	r3, #12
 800c962:	d82d      	bhi.n	800c9c0 <UART_SetConfig+0x14c>
 800c964:	a201      	add	r2, pc, #4	@ (adr r2, 800c96c <UART_SetConfig+0xf8>)
 800c966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96a:	bf00      	nop
 800c96c:	0800c9a1 	.word	0x0800c9a1
 800c970:	0800c9c1 	.word	0x0800c9c1
 800c974:	0800c9c1 	.word	0x0800c9c1
 800c978:	0800c9c1 	.word	0x0800c9c1
 800c97c:	0800c9b1 	.word	0x0800c9b1
 800c980:	0800c9c1 	.word	0x0800c9c1
 800c984:	0800c9c1 	.word	0x0800c9c1
 800c988:	0800c9c1 	.word	0x0800c9c1
 800c98c:	0800c9a9 	.word	0x0800c9a9
 800c990:	0800c9c1 	.word	0x0800c9c1
 800c994:	0800c9c1 	.word	0x0800c9c1
 800c998:	0800c9c1 	.word	0x0800c9c1
 800c99c:	0800c9b9 	.word	0x0800c9b9
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9a6:	e0d8      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9ae:	e0d4      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c9b0:	2304      	movs	r3, #4
 800c9b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9b6:	e0d0      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c9b8:	2308      	movs	r3, #8
 800c9ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9be:	e0cc      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c9c0:	2310      	movs	r3, #16
 800c9c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9c6:	e0c8      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a5e      	ldr	r2, [pc, #376]	@ (800cb48 <UART_SetConfig+0x2d4>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d125      	bne.n	800ca1e <UART_SetConfig+0x1aa>
 800c9d2:	4b5b      	ldr	r3, [pc, #364]	@ (800cb40 <UART_SetConfig+0x2cc>)
 800c9d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c9dc:	2b30      	cmp	r3, #48	@ 0x30
 800c9de:	d016      	beq.n	800ca0e <UART_SetConfig+0x19a>
 800c9e0:	2b30      	cmp	r3, #48	@ 0x30
 800c9e2:	d818      	bhi.n	800ca16 <UART_SetConfig+0x1a2>
 800c9e4:	2b20      	cmp	r3, #32
 800c9e6:	d00a      	beq.n	800c9fe <UART_SetConfig+0x18a>
 800c9e8:	2b20      	cmp	r3, #32
 800c9ea:	d814      	bhi.n	800ca16 <UART_SetConfig+0x1a2>
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <UART_SetConfig+0x182>
 800c9f0:	2b10      	cmp	r3, #16
 800c9f2:	d008      	beq.n	800ca06 <UART_SetConfig+0x192>
 800c9f4:	e00f      	b.n	800ca16 <UART_SetConfig+0x1a2>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9fc:	e0ad      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800c9fe:	2302      	movs	r3, #2
 800ca00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca04:	e0a9      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca06:	2304      	movs	r3, #4
 800ca08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca0c:	e0a5      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca0e:	2308      	movs	r3, #8
 800ca10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca14:	e0a1      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca16:	2310      	movs	r3, #16
 800ca18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca1c:	e09d      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a4a      	ldr	r2, [pc, #296]	@ (800cb4c <UART_SetConfig+0x2d8>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d125      	bne.n	800ca74 <UART_SetConfig+0x200>
 800ca28:	4b45      	ldr	r3, [pc, #276]	@ (800cb40 <UART_SetConfig+0x2cc>)
 800ca2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ca32:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca34:	d016      	beq.n	800ca64 <UART_SetConfig+0x1f0>
 800ca36:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca38:	d818      	bhi.n	800ca6c <UART_SetConfig+0x1f8>
 800ca3a:	2b80      	cmp	r3, #128	@ 0x80
 800ca3c:	d00a      	beq.n	800ca54 <UART_SetConfig+0x1e0>
 800ca3e:	2b80      	cmp	r3, #128	@ 0x80
 800ca40:	d814      	bhi.n	800ca6c <UART_SetConfig+0x1f8>
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d002      	beq.n	800ca4c <UART_SetConfig+0x1d8>
 800ca46:	2b40      	cmp	r3, #64	@ 0x40
 800ca48:	d008      	beq.n	800ca5c <UART_SetConfig+0x1e8>
 800ca4a:	e00f      	b.n	800ca6c <UART_SetConfig+0x1f8>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca52:	e082      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca54:	2302      	movs	r3, #2
 800ca56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca5a:	e07e      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca5c:	2304      	movs	r3, #4
 800ca5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca62:	e07a      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca64:	2308      	movs	r3, #8
 800ca66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca6a:	e076      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca6c:	2310      	movs	r3, #16
 800ca6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca72:	e072      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a35      	ldr	r2, [pc, #212]	@ (800cb50 <UART_SetConfig+0x2dc>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d12a      	bne.n	800cad4 <UART_SetConfig+0x260>
 800ca7e:	4b30      	ldr	r3, [pc, #192]	@ (800cb40 <UART_SetConfig+0x2cc>)
 800ca80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca8c:	d01a      	beq.n	800cac4 <UART_SetConfig+0x250>
 800ca8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca92:	d81b      	bhi.n	800cacc <UART_SetConfig+0x258>
 800ca94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca98:	d00c      	beq.n	800cab4 <UART_SetConfig+0x240>
 800ca9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca9e:	d815      	bhi.n	800cacc <UART_SetConfig+0x258>
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <UART_SetConfig+0x238>
 800caa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800caa8:	d008      	beq.n	800cabc <UART_SetConfig+0x248>
 800caaa:	e00f      	b.n	800cacc <UART_SetConfig+0x258>
 800caac:	2300      	movs	r3, #0
 800caae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cab2:	e052      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cab4:	2302      	movs	r3, #2
 800cab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caba:	e04e      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cabc:	2304      	movs	r3, #4
 800cabe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cac2:	e04a      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cac4:	2308      	movs	r3, #8
 800cac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caca:	e046      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cacc:	2310      	movs	r3, #16
 800cace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cad2:	e042      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a17      	ldr	r2, [pc, #92]	@ (800cb38 <UART_SetConfig+0x2c4>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d13a      	bne.n	800cb54 <UART_SetConfig+0x2e0>
 800cade:	4b18      	ldr	r3, [pc, #96]	@ (800cb40 <UART_SetConfig+0x2cc>)
 800cae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cae4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cae8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800caec:	d01a      	beq.n	800cb24 <UART_SetConfig+0x2b0>
 800caee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800caf2:	d81b      	bhi.n	800cb2c <UART_SetConfig+0x2b8>
 800caf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800caf8:	d00c      	beq.n	800cb14 <UART_SetConfig+0x2a0>
 800cafa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cafe:	d815      	bhi.n	800cb2c <UART_SetConfig+0x2b8>
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <UART_SetConfig+0x298>
 800cb04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb08:	d008      	beq.n	800cb1c <UART_SetConfig+0x2a8>
 800cb0a:	e00f      	b.n	800cb2c <UART_SetConfig+0x2b8>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb12:	e022      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cb14:	2302      	movs	r3, #2
 800cb16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb1a:	e01e      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb22:	e01a      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cb24:	2308      	movs	r3, #8
 800cb26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb2a:	e016      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb32:	e012      	b.n	800cb5a <UART_SetConfig+0x2e6>
 800cb34:	efff69f3 	.word	0xefff69f3
 800cb38:	40008000 	.word	0x40008000
 800cb3c:	40013800 	.word	0x40013800
 800cb40:	40021000 	.word	0x40021000
 800cb44:	40004400 	.word	0x40004400
 800cb48:	40004800 	.word	0x40004800
 800cb4c:	40004c00 	.word	0x40004c00
 800cb50:	40005000 	.word	0x40005000
 800cb54:	2310      	movs	r3, #16
 800cb56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a9f      	ldr	r2, [pc, #636]	@ (800cddc <UART_SetConfig+0x568>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d17a      	bne.n	800cc5a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cb68:	2b08      	cmp	r3, #8
 800cb6a:	d824      	bhi.n	800cbb6 <UART_SetConfig+0x342>
 800cb6c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb74 <UART_SetConfig+0x300>)
 800cb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb72:	bf00      	nop
 800cb74:	0800cb99 	.word	0x0800cb99
 800cb78:	0800cbb7 	.word	0x0800cbb7
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cbb7 	.word	0x0800cbb7
 800cb84:	0800cba7 	.word	0x0800cba7
 800cb88:	0800cbb7 	.word	0x0800cbb7
 800cb8c:	0800cbb7 	.word	0x0800cbb7
 800cb90:	0800cbb7 	.word	0x0800cbb7
 800cb94:	0800cbaf 	.word	0x0800cbaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb98:	f7fe f972 	bl	800ae80 <HAL_RCC_GetPCLK1Freq>
 800cb9c:	61f8      	str	r0, [r7, #28]
        break;
 800cb9e:	e010      	b.n	800cbc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cba0:	4b8f      	ldr	r3, [pc, #572]	@ (800cde0 <UART_SetConfig+0x56c>)
 800cba2:	61fb      	str	r3, [r7, #28]
        break;
 800cba4:	e00d      	b.n	800cbc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cba6:	f7fe f8d3 	bl	800ad50 <HAL_RCC_GetSysClockFreq>
 800cbaa:	61f8      	str	r0, [r7, #28]
        break;
 800cbac:	e009      	b.n	800cbc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbb2:	61fb      	str	r3, [r7, #28]
        break;
 800cbb4:	e005      	b.n	800cbc2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cbc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 80fb 	beq.w	800cdc0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	005b      	lsls	r3, r3, #1
 800cbd2:	4413      	add	r3, r2
 800cbd4:	69fa      	ldr	r2, [r7, #28]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d305      	bcc.n	800cbe6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cbe0:	69fa      	ldr	r2, [r7, #28]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d903      	bls.n	800cbee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cbec:	e0e8      	b.n	800cdc0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	461c      	mov	r4, r3
 800cbf4:	4615      	mov	r5, r2
 800cbf6:	f04f 0200 	mov.w	r2, #0
 800cbfa:	f04f 0300 	mov.w	r3, #0
 800cbfe:	022b      	lsls	r3, r5, #8
 800cc00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cc04:	0222      	lsls	r2, r4, #8
 800cc06:	68f9      	ldr	r1, [r7, #12]
 800cc08:	6849      	ldr	r1, [r1, #4]
 800cc0a:	0849      	lsrs	r1, r1, #1
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	4688      	mov	r8, r1
 800cc10:	4681      	mov	r9, r0
 800cc12:	eb12 0a08 	adds.w	sl, r2, r8
 800cc16:	eb43 0b09 	adc.w	fp, r3, r9
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	603b      	str	r3, [r7, #0]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc28:	4650      	mov	r0, sl
 800cc2a:	4659      	mov	r1, fp
 800cc2c:	f7f3 fade 	bl	80001ec <__aeabi_uldivmod>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	4613      	mov	r3, r2
 800cc36:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc3e:	d308      	bcc.n	800cc52 <UART_SetConfig+0x3de>
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc46:	d204      	bcs.n	800cc52 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	69ba      	ldr	r2, [r7, #24]
 800cc4e:	60da      	str	r2, [r3, #12]
 800cc50:	e0b6      	b.n	800cdc0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800cc52:	2301      	movs	r3, #1
 800cc54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cc58:	e0b2      	b.n	800cdc0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	69db      	ldr	r3, [r3, #28]
 800cc5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc62:	d15e      	bne.n	800cd22 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800cc64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cc68:	2b08      	cmp	r3, #8
 800cc6a:	d828      	bhi.n	800ccbe <UART_SetConfig+0x44a>
 800cc6c:	a201      	add	r2, pc, #4	@ (adr r2, 800cc74 <UART_SetConfig+0x400>)
 800cc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc72:	bf00      	nop
 800cc74:	0800cc99 	.word	0x0800cc99
 800cc78:	0800cca1 	.word	0x0800cca1
 800cc7c:	0800cca9 	.word	0x0800cca9
 800cc80:	0800ccbf 	.word	0x0800ccbf
 800cc84:	0800ccaf 	.word	0x0800ccaf
 800cc88:	0800ccbf 	.word	0x0800ccbf
 800cc8c:	0800ccbf 	.word	0x0800ccbf
 800cc90:	0800ccbf 	.word	0x0800ccbf
 800cc94:	0800ccb7 	.word	0x0800ccb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc98:	f7fe f8f2 	bl	800ae80 <HAL_RCC_GetPCLK1Freq>
 800cc9c:	61f8      	str	r0, [r7, #28]
        break;
 800cc9e:	e014      	b.n	800ccca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cca0:	f7fe f904 	bl	800aeac <HAL_RCC_GetPCLK2Freq>
 800cca4:	61f8      	str	r0, [r7, #28]
        break;
 800cca6:	e010      	b.n	800ccca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cca8:	4b4d      	ldr	r3, [pc, #308]	@ (800cde0 <UART_SetConfig+0x56c>)
 800ccaa:	61fb      	str	r3, [r7, #28]
        break;
 800ccac:	e00d      	b.n	800ccca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccae:	f7fe f84f 	bl	800ad50 <HAL_RCC_GetSysClockFreq>
 800ccb2:	61f8      	str	r0, [r7, #28]
        break;
 800ccb4:	e009      	b.n	800ccca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccba:	61fb      	str	r3, [r7, #28]
        break;
 800ccbc:	e005      	b.n	800ccca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ccc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d077      	beq.n	800cdc0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	005a      	lsls	r2, r3, #1
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	085b      	lsrs	r3, r3, #1
 800ccda:	441a      	add	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	2b0f      	cmp	r3, #15
 800ccea:	d916      	bls.n	800cd1a <UART_SetConfig+0x4a6>
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccf2:	d212      	bcs.n	800cd1a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	f023 030f 	bic.w	r3, r3, #15
 800ccfc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	085b      	lsrs	r3, r3, #1
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	f003 0307 	and.w	r3, r3, #7
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	8afb      	ldrh	r3, [r7, #22]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	8afa      	ldrh	r2, [r7, #22]
 800cd16:	60da      	str	r2, [r3, #12]
 800cd18:	e052      	b.n	800cdc0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cd20:	e04e      	b.n	800cdc0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cd26:	2b08      	cmp	r3, #8
 800cd28:	d827      	bhi.n	800cd7a <UART_SetConfig+0x506>
 800cd2a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd30 <UART_SetConfig+0x4bc>)
 800cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd30:	0800cd55 	.word	0x0800cd55
 800cd34:	0800cd5d 	.word	0x0800cd5d
 800cd38:	0800cd65 	.word	0x0800cd65
 800cd3c:	0800cd7b 	.word	0x0800cd7b
 800cd40:	0800cd6b 	.word	0x0800cd6b
 800cd44:	0800cd7b 	.word	0x0800cd7b
 800cd48:	0800cd7b 	.word	0x0800cd7b
 800cd4c:	0800cd7b 	.word	0x0800cd7b
 800cd50:	0800cd73 	.word	0x0800cd73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd54:	f7fe f894 	bl	800ae80 <HAL_RCC_GetPCLK1Freq>
 800cd58:	61f8      	str	r0, [r7, #28]
        break;
 800cd5a:	e014      	b.n	800cd86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd5c:	f7fe f8a6 	bl	800aeac <HAL_RCC_GetPCLK2Freq>
 800cd60:	61f8      	str	r0, [r7, #28]
        break;
 800cd62:	e010      	b.n	800cd86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd64:	4b1e      	ldr	r3, [pc, #120]	@ (800cde0 <UART_SetConfig+0x56c>)
 800cd66:	61fb      	str	r3, [r7, #28]
        break;
 800cd68:	e00d      	b.n	800cd86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd6a:	f7fd fff1 	bl	800ad50 <HAL_RCC_GetSysClockFreq>
 800cd6e:	61f8      	str	r0, [r7, #28]
        break;
 800cd70:	e009      	b.n	800cd86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd76:	61fb      	str	r3, [r7, #28]
        break;
 800cd78:	e005      	b.n	800cd86 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cd84:	bf00      	nop
    }

    if (pclk != 0U)
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d019      	beq.n	800cdc0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	085a      	lsrs	r2, r3, #1
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	441a      	add	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	2b0f      	cmp	r3, #15
 800cda4:	d909      	bls.n	800cdba <UART_SetConfig+0x546>
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdac:	d205      	bcs.n	800cdba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	60da      	str	r2, [r3, #12]
 800cdb8:	e002      	b.n	800cdc0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cdcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3728      	adds	r7, #40	@ 0x28
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdda:	bf00      	nop
 800cddc:	40008000 	.word	0x40008000
 800cde0:	00f42400 	.word	0x00f42400

0800cde4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf0:	f003 0308 	and.w	r3, r3, #8
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00a      	beq.n	800ce0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	430a      	orrs	r2, r1
 800ce0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00a      	beq.n	800ce30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	430a      	orrs	r2, r1
 800ce2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce34:	f003 0302 	and.w	r3, r3, #2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00a      	beq.n	800ce52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	430a      	orrs	r2, r1
 800ce50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce56:	f003 0304 	and.w	r3, r3, #4
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00a      	beq.n	800ce74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	430a      	orrs	r2, r1
 800ce72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce78:	f003 0310 	and.w	r3, r3, #16
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00a      	beq.n	800ce96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	430a      	orrs	r2, r1
 800ce94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce9a:	f003 0320 	and.w	r3, r3, #32
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00a      	beq.n	800ceb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	430a      	orrs	r2, r1
 800ceb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01a      	beq.n	800cefa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	430a      	orrs	r2, r1
 800ced8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cee2:	d10a      	bne.n	800cefa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	430a      	orrs	r2, r1
 800cef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00a      	beq.n	800cf1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	430a      	orrs	r2, r1
 800cf1a:	605a      	str	r2, [r3, #4]
  }
}
 800cf1c:	bf00      	nop
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b098      	sub	sp, #96	@ 0x60
 800cf2c:	af02      	add	r7, sp, #8
 800cf2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf38:	f7f8 fa6a 	bl	8005410 <HAL_GetTick>
 800cf3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 0308 	and.w	r3, r3, #8
 800cf48:	2b08      	cmp	r3, #8
 800cf4a:	d12e      	bne.n	800cfaa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf54:	2200      	movs	r2, #0
 800cf56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f88c 	bl	800d078 <UART_WaitOnFlagUntilTimeout>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d021      	beq.n	800cfaa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6e:	e853 3f00 	ldrex	r3, [r3]
 800cf72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	461a      	mov	r2, r3
 800cf82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf84:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf8c:	e841 2300 	strex	r3, r2, [r1]
 800cf90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1e6      	bne.n	800cf66 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2220      	movs	r2, #32
 800cf9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	e062      	b.n	800d070 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 0304 	and.w	r3, r3, #4
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d149      	bne.n	800d04c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f856 	bl	800d078 <UART_WaitOnFlagUntilTimeout>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d03c      	beq.n	800d04c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfda:	e853 3f00 	ldrex	r3, [r3]
 800cfde:	623b      	str	r3, [r7, #32]
   return(result);
 800cfe0:	6a3b      	ldr	r3, [r7, #32]
 800cfe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	461a      	mov	r2, r3
 800cfee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cff0:	633b      	str	r3, [r7, #48]	@ 0x30
 800cff2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cff8:	e841 2300 	strex	r3, r2, [r1]
 800cffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1e6      	bne.n	800cfd2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3308      	adds	r3, #8
 800d00a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	e853 3f00 	ldrex	r3, [r3]
 800d012:	60fb      	str	r3, [r7, #12]
   return(result);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f023 0301 	bic.w	r3, r3, #1
 800d01a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	3308      	adds	r3, #8
 800d022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d024:	61fa      	str	r2, [r7, #28]
 800d026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d028:	69b9      	ldr	r1, [r7, #24]
 800d02a:	69fa      	ldr	r2, [r7, #28]
 800d02c:	e841 2300 	strex	r3, r2, [r1]
 800d030:	617b      	str	r3, [r7, #20]
   return(result);
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1e5      	bne.n	800d004 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2220      	movs	r2, #32
 800d03c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d048:	2303      	movs	r3, #3
 800d04a:	e011      	b.n	800d070 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2220      	movs	r2, #32
 800d050:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2220      	movs	r2, #32
 800d056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3758      	adds	r7, #88	@ 0x58
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	603b      	str	r3, [r7, #0]
 800d084:	4613      	mov	r3, r2
 800d086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d088:	e049      	b.n	800d11e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d090:	d045      	beq.n	800d11e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d092:	f7f8 f9bd 	bl	8005410 <HAL_GetTick>
 800d096:	4602      	mov	r2, r0
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	69ba      	ldr	r2, [r7, #24]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d302      	bcc.n	800d0a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e048      	b.n	800d13e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 0304 	and.w	r3, r3, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d031      	beq.n	800d11e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	69db      	ldr	r3, [r3, #28]
 800d0c0:	f003 0308 	and.w	r3, r3, #8
 800d0c4:	2b08      	cmp	r3, #8
 800d0c6:	d110      	bne.n	800d0ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2208      	movs	r2, #8
 800d0ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f000 f8ff 	bl	800d2d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2208      	movs	r2, #8
 800d0da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e029      	b.n	800d13e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	69db      	ldr	r3, [r3, #28]
 800d0f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d0f8:	d111      	bne.n	800d11e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f000 f8e5 	bl	800d2d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2220      	movs	r2, #32
 800d10e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e00f      	b.n	800d13e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	69da      	ldr	r2, [r3, #28]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	4013      	ands	r3, r2
 800d128:	68ba      	ldr	r2, [r7, #8]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	bf0c      	ite	eq
 800d12e:	2301      	moveq	r3, #1
 800d130:	2300      	movne	r3, #0
 800d132:	b2db      	uxtb	r3, r3
 800d134:	461a      	mov	r2, r3
 800d136:	79fb      	ldrb	r3, [r7, #7]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d0a6      	beq.n	800d08a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
	...

0800d148 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b096      	sub	sp, #88	@ 0x58
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	4613      	mov	r3, r2
 800d154:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	68ba      	ldr	r2, [r7, #8]
 800d15a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	88fa      	ldrh	r2, [r7, #6]
 800d160:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2222      	movs	r2, #34	@ 0x22
 800d170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d028      	beq.n	800d1ce <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d180:	4a3e      	ldr	r2, [pc, #248]	@ (800d27c <UART_Start_Receive_DMA+0x134>)
 800d182:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d188:	4a3d      	ldr	r2, [pc, #244]	@ (800d280 <UART_Start_Receive_DMA+0x138>)
 800d18a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d190:	4a3c      	ldr	r2, [pc, #240]	@ (800d284 <UART_Start_Receive_DMA+0x13c>)
 800d192:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d198:	2200      	movs	r2, #0
 800d19a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3324      	adds	r3, #36	@ 0x24
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	88fb      	ldrh	r3, [r7, #6]
 800d1b0:	f7fa f868 	bl	8007284 <HAL_DMA_Start_IT>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d009      	beq.n	800d1ce <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2210      	movs	r2, #16
 800d1be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e051      	b.n	800d272 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d018      	beq.n	800d208 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1de:	e853 3f00 	ldrex	r3, [r3]
 800d1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d1fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1fc:	e841 2300 	strex	r3, r2, [r1]
 800d200:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1e6      	bne.n	800d1d6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3308      	adds	r3, #8
 800d20e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d212:	e853 3f00 	ldrex	r3, [r3]
 800d216:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21a:	f043 0301 	orr.w	r3, r3, #1
 800d21e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3308      	adds	r3, #8
 800d226:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d228:	637a      	str	r2, [r7, #52]	@ 0x34
 800d22a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d22c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d22e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d230:	e841 2300 	strex	r3, r2, [r1]
 800d234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1e5      	bne.n	800d208 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3308      	adds	r3, #8
 800d242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	e853 3f00 	ldrex	r3, [r3]
 800d24a:	613b      	str	r3, [r7, #16]
   return(result);
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3308      	adds	r3, #8
 800d25a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d25c:	623a      	str	r2, [r7, #32]
 800d25e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d260:	69f9      	ldr	r1, [r7, #28]
 800d262:	6a3a      	ldr	r2, [r7, #32]
 800d264:	e841 2300 	strex	r3, r2, [r1]
 800d268:	61bb      	str	r3, [r7, #24]
   return(result);
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1e5      	bne.n	800d23c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3758      	adds	r7, #88	@ 0x58
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	0800d453 	.word	0x0800d453
 800d280:	0800d57f 	.word	0x0800d57f
 800d284:	0800d5bd 	.word	0x0800d5bd

0800d288 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d288:	b480      	push	{r7}
 800d28a:	b089      	sub	sp, #36	@ 0x24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	e853 3f00 	ldrex	r3, [r3]
 800d29c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d2a4:	61fb      	str	r3, [r7, #28]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	61bb      	str	r3, [r7, #24]
 800d2b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b2:	6979      	ldr	r1, [r7, #20]
 800d2b4:	69ba      	ldr	r2, [r7, #24]
 800d2b6:	e841 2300 	strex	r3, r2, [r1]
 800d2ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1e6      	bne.n	800d290 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2220      	movs	r2, #32
 800d2c6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d2c8:	bf00      	nop
 800d2ca:	3724      	adds	r7, #36	@ 0x24
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b095      	sub	sp, #84	@ 0x54
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2e4:	e853 3f00 	ldrex	r3, [r3]
 800d2e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d2f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d300:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d302:	e841 2300 	strex	r3, r2, [r1]
 800d306:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d1e6      	bne.n	800d2dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	3308      	adds	r3, #8
 800d314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d316:	6a3b      	ldr	r3, [r7, #32]
 800d318:	e853 3f00 	ldrex	r3, [r3]
 800d31c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	f023 0301 	bic.w	r3, r3, #1
 800d324:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	3308      	adds	r3, #8
 800d32c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d32e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d330:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d332:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d336:	e841 2300 	strex	r3, r2, [r1]
 800d33a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1e5      	bne.n	800d30e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d346:	2b01      	cmp	r3, #1
 800d348:	d118      	bne.n	800d37c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	60bb      	str	r3, [r7, #8]
   return(result);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	f023 0310 	bic.w	r3, r3, #16
 800d35e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d368:	61bb      	str	r3, [r7, #24]
 800d36a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	6979      	ldr	r1, [r7, #20]
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	613b      	str	r3, [r7, #16]
   return(result);
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e6      	bne.n	800d34a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2220      	movs	r2, #32
 800d380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d390:	bf00      	nop
 800d392:	3754      	adds	r7, #84	@ 0x54
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b090      	sub	sp, #64	@ 0x40
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 0320 	and.w	r3, r3, #32
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d137      	bne.n	800d428 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d3b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	3308      	adds	r3, #8
 800d3c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ca:	e853 3f00 	ldrex	r3, [r3]
 800d3ce:	623b      	str	r3, [r7, #32]
   return(result);
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3308      	adds	r3, #8
 800d3de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3e0:	633a      	str	r2, [r7, #48]	@ 0x30
 800d3e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3e8:	e841 2300 	strex	r3, r2, [r1]
 800d3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1e5      	bne.n	800d3c0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	e853 3f00 	ldrex	r3, [r3]
 800d400:	60fb      	str	r3, [r7, #12]
   return(result);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d408:	637b      	str	r3, [r7, #52]	@ 0x34
 800d40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	461a      	mov	r2, r3
 800d410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d412:	61fb      	str	r3, [r7, #28]
 800d414:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d416:	69b9      	ldr	r1, [r7, #24]
 800d418:	69fa      	ldr	r2, [r7, #28]
 800d41a:	e841 2300 	strex	r3, r2, [r1]
 800d41e:	617b      	str	r3, [r7, #20]
   return(result);
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1e6      	bne.n	800d3f4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d426:	e002      	b.n	800d42e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d428:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d42a:	f7ff f9ef 	bl	800c80c <HAL_UART_TxCpltCallback>
}
 800d42e:	bf00      	nop
 800d430:	3740      	adds	r7, #64	@ 0x40
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b084      	sub	sp, #16
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d442:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7ff f9eb 	bl	800c820 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d44a:	bf00      	nop
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b09c      	sub	sp, #112	@ 0x70
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f003 0320 	and.w	r3, r3, #32
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d171      	bne.n	800d552 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d46e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d470:	2200      	movs	r2, #0
 800d472:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d47e:	e853 3f00 	ldrex	r3, [r3]
 800d482:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d486:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d48a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d48c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	461a      	mov	r2, r3
 800d492:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d494:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d496:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d49a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d49c:	e841 2300 	strex	r3, r2, [r1]
 800d4a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d1e6      	bne.n	800d476 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	3308      	adds	r3, #8
 800d4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b2:	e853 3f00 	ldrex	r3, [r3]
 800d4b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ba:	f023 0301 	bic.w	r3, r3, #1
 800d4be:	667b      	str	r3, [r7, #100]	@ 0x64
 800d4c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	3308      	adds	r3, #8
 800d4c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d4c8:	647a      	str	r2, [r7, #68]	@ 0x44
 800d4ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4d0:	e841 2300 	strex	r3, r2, [r1]
 800d4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1e5      	bne.n	800d4a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e6:	e853 3f00 	ldrex	r3, [r3]
 800d4ea:	623b      	str	r3, [r7, #32]
   return(result);
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4f2:	663b      	str	r3, [r7, #96]	@ 0x60
 800d4f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d4fc:	633a      	str	r2, [r7, #48]	@ 0x30
 800d4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d500:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d504:	e841 2300 	strex	r3, r2, [r1]
 800d508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1e5      	bne.n	800d4dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d512:	2220      	movs	r2, #32
 800d514:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d51a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d118      	bne.n	800d552 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	e853 3f00 	ldrex	r3, [r3]
 800d52c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f023 0310 	bic.w	r3, r3, #16
 800d534:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	461a      	mov	r2, r3
 800d53c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d53e:	61fb      	str	r3, [r7, #28]
 800d540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d542:	69b9      	ldr	r1, [r7, #24]
 800d544:	69fa      	ldr	r2, [r7, #28]
 800d546:	e841 2300 	strex	r3, r2, [r1]
 800d54a:	617b      	str	r3, [r7, #20]
   return(result);
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1e6      	bne.n	800d520 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d554:	2200      	movs	r2, #0
 800d556:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d55a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d107      	bne.n	800d570 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d562:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d566:	4619      	mov	r1, r3
 800d568:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d56a:	f7ff f977 	bl	800c85c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d56e:	e002      	b.n	800d576 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d570:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d572:	f7f6 ffe3 	bl	800453c <HAL_UART_RxCpltCallback>
}
 800d576:	bf00      	nop
 800d578:	3770      	adds	r7, #112	@ 0x70
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b084      	sub	sp, #16
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d58a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2201      	movs	r2, #1
 800d590:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d596:	2b01      	cmp	r3, #1
 800d598:	d109      	bne.n	800d5ae <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7ff f958 	bl	800c85c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5ac:	e002      	b.n	800d5b4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f7ff f940 	bl	800c834 <HAL_UART_RxHalfCpltCallback>
}
 800d5b4:	bf00      	nop
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5e2:	2b80      	cmp	r3, #128	@ 0x80
 800d5e4:	d109      	bne.n	800d5fa <UART_DMAError+0x3e>
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	2b21      	cmp	r3, #33	@ 0x21
 800d5ea:	d106      	bne.n	800d5fa <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d5f4:	6978      	ldr	r0, [r7, #20]
 800d5f6:	f7ff fe47 	bl	800d288 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d604:	2b40      	cmp	r3, #64	@ 0x40
 800d606:	d109      	bne.n	800d61c <UART_DMAError+0x60>
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b22      	cmp	r3, #34	@ 0x22
 800d60c:	d106      	bne.n	800d61c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2200      	movs	r2, #0
 800d612:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d616:	6978      	ldr	r0, [r7, #20]
 800d618:	f7ff fe5c 	bl	800d2d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d622:	f043 0210 	orr.w	r2, r3, #16
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d62c:	6978      	ldr	r0, [r7, #20]
 800d62e:	f7ff f90b 	bl	800c848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d632:	bf00      	nop
 800d634:	3718      	adds	r7, #24
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2200      	movs	r2, #0
 800d654:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f7ff f8f5 	bl	800c848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b088      	sub	sp, #32
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	e853 3f00 	ldrex	r3, [r3]
 800d67a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d682:	61fb      	str	r3, [r7, #28]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	461a      	mov	r2, r3
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	61bb      	str	r3, [r7, #24]
 800d68e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d690:	6979      	ldr	r1, [r7, #20]
 800d692:	69ba      	ldr	r2, [r7, #24]
 800d694:	e841 2300 	strex	r3, r2, [r1]
 800d698:	613b      	str	r3, [r7, #16]
   return(result);
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1e6      	bne.n	800d66e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2220      	movs	r2, #32
 800d6a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7ff f8ad 	bl	800c80c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6b2:	bf00      	nop
 800d6b4:	3720      	adds	r7, #32
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6ba:	b480      	push	{r7}
 800d6bc:	b083      	sub	sp, #12
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d6c2:	bf00      	nop
 800d6c4:	370c      	adds	r7, #12
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <memset>:
 800d6ce:	4402      	add	r2, r0
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d100      	bne.n	800d6d8 <memset+0xa>
 800d6d6:	4770      	bx	lr
 800d6d8:	f803 1b01 	strb.w	r1, [r3], #1
 800d6dc:	e7f9      	b.n	800d6d2 <memset+0x4>
	...

0800d6e0 <__libc_init_array>:
 800d6e0:	b570      	push	{r4, r5, r6, lr}
 800d6e2:	4d0d      	ldr	r5, [pc, #52]	@ (800d718 <__libc_init_array+0x38>)
 800d6e4:	4c0d      	ldr	r4, [pc, #52]	@ (800d71c <__libc_init_array+0x3c>)
 800d6e6:	1b64      	subs	r4, r4, r5
 800d6e8:	10a4      	asrs	r4, r4, #2
 800d6ea:	2600      	movs	r6, #0
 800d6ec:	42a6      	cmp	r6, r4
 800d6ee:	d109      	bne.n	800d704 <__libc_init_array+0x24>
 800d6f0:	4d0b      	ldr	r5, [pc, #44]	@ (800d720 <__libc_init_array+0x40>)
 800d6f2:	4c0c      	ldr	r4, [pc, #48]	@ (800d724 <__libc_init_array+0x44>)
 800d6f4:	f000 f818 	bl	800d728 <_init>
 800d6f8:	1b64      	subs	r4, r4, r5
 800d6fa:	10a4      	asrs	r4, r4, #2
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	42a6      	cmp	r6, r4
 800d700:	d105      	bne.n	800d70e <__libc_init_array+0x2e>
 800d702:	bd70      	pop	{r4, r5, r6, pc}
 800d704:	f855 3b04 	ldr.w	r3, [r5], #4
 800d708:	4798      	blx	r3
 800d70a:	3601      	adds	r6, #1
 800d70c:	e7ee      	b.n	800d6ec <__libc_init_array+0xc>
 800d70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d712:	4798      	blx	r3
 800d714:	3601      	adds	r6, #1
 800d716:	e7f2      	b.n	800d6fe <__libc_init_array+0x1e>
 800d718:	0800d798 	.word	0x0800d798
 800d71c:	0800d798 	.word	0x0800d798
 800d720:	0800d798 	.word	0x0800d798
 800d724:	0800d7b8 	.word	0x0800d7b8

0800d728 <_init>:
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72a:	bf00      	nop
 800d72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d72e:	bc08      	pop	{r3}
 800d730:	469e      	mov	lr, r3
 800d732:	4770      	bx	lr

0800d734 <_fini>:
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	bf00      	nop
 800d738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d73a:	bc08      	pop	{r3}
 800d73c:	469e      	mov	lr, r3
 800d73e:	4770      	bx	lr
