
Calibracion_V1R0_A0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5a4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800d750  0800d750  0000e750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7a0  0800d7a0  0000f3a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7a0  0800d7a0  0000e7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7a8  0800d7a8  0000f3a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800d7a8  0800d7a8  0000e7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7c8  0800d7c8  0000e7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0800d7cc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc0  200003a8  0800db74  0000f3a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001168  0800db74  00010168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f3a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052312  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d6b  00000000  00000000  000616ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00069458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c6  00000000  00000000  0006b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033bd0  00000000  00000000  0006c88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d82c  00000000  00000000  000a045e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001245a8  00000000  00000000  000cdc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f2232  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b20  00000000  00000000  001f2278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001f9d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200003a8 	.word	0x200003a8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800d738 	.word	0x0800d738

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200003ac 	.word	0x200003ac
 80001e8:	0800d738 	.word	0x0800d738

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZN15displayPhysical6enableEb>:

////////////
// ENABLE //
////////////

void displayPhysical::enable( bool onOff ){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
	if ( !onOff ){					//	Si esta apagado
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	f083 0301 	eor.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d003      	beq.n	80004fc <_ZN15displayPhysical6enableEb+0x20>
		this->flagEnable	= 0;	//	Deshabilita
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
	}
	else{							//	Si esta prendido
		this->flagEnable	= 1;	//	Habilita
	}
}
 80004fa:	e002      	b.n	8000502 <_ZN15displayPhysical6enableEb+0x26>
		this->flagEnable	= 1;	//	Habilita
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	460a      	mov	r2, r1
 8000518:	80fb      	strh	r3, [r7, #6]
 800051a:	4613      	mov	r3, r2
 800051c:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800051e:	88fa      	ldrh	r2, [r7, #6]
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	2b3f      	cmp	r3, #63	@ 0x3f
 8000526:	dc01      	bgt.n	800052c <_Z12bytestowritett+0x1e>
 8000528:	88fb      	ldrh	r3, [r7, #6]
 800052a:	e003      	b.n	8000534 <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 800052c:	88bb      	ldrh	r3, [r7, #4]
 800052e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000532:	b29b      	uxth	r3, r3
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08e      	sub	sp, #56	@ 0x38
 8000544:	af04      	add	r7, sp, #16
 8000546:	60ba      	str	r2, [r7, #8]
 8000548:	461a      	mov	r2, r3
 800054a:	4603      	mov	r3, r0
 800054c:	81fb      	strh	r3, [r7, #14]
 800054e:	460b      	mov	r3, r1
 8000550:	81bb      	strh	r3, [r7, #12]
 8000552:	4613      	mov	r3, r2
 8000554:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000556:	2306      	movs	r3, #6
 8000558:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800055e:	88fa      	ldrh	r2, [r7, #6]
 8000560:	89bb      	ldrh	r3, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <_Z11EEPROM_ReadttPht+0x2a>
 8000568:	333f      	adds	r3, #63	@ 0x3f
 800056a:	119b      	asrs	r3, r3, #6
 800056c:	b29a      	uxth	r2, r3
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	4413      	add	r3, r2
 8000572:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000574:	8b7a      	ldrh	r2, [r7, #26]
 8000576:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	b29b      	uxth	r3, r3
 800057c:	3301      	adds	r3, #1
 800057e:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000580:	2300      	movs	r3, #0
 8000582:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
 8000588:	e031      	b.n	80005ee <_Z11EEPROM_ReadttPht+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800058a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000598:	4313      	orrs	r3, r2
 800059a:	b21b      	sxth	r3, r3
 800059c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800059e:	89ba      	ldrh	r2, [r7, #12]
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffb2 	bl	800050e <_Z12bytestowritett>
 80005aa:	4603      	mov	r3, r0
 80005ac:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80005ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	4413      	add	r3, r2
 80005b4:	8af9      	ldrh	r1, [r7, #22]
 80005b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ba:	9202      	str	r2, [sp, #8]
 80005bc:	8aba      	ldrh	r2, [r7, #20]
 80005be:	9201      	str	r2, [sp, #4]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2302      	movs	r3, #2
 80005c4:	460a      	mov	r2, r1
 80005c6:	21a0      	movs	r1, #160	@ 0xa0
 80005c8:	480d      	ldr	r0, [pc, #52]	@ (8000600 <_Z11EEPROM_ReadttPht+0xc0>)
 80005ca:	f007 fd83 	bl	80080d4 <HAL_I2C_Mem_Read>
		startPage += 1;
 80005ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005d0:	3301      	adds	r3, #1
 80005d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	8abb      	ldrh	r3, [r7, #20]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80005e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80005e2:	8abb      	ldrh	r3, [r7, #20]
 80005e4:	4413      	add	r3, r2
 80005e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 80005e8:	6a3b      	ldr	r3, [r7, #32]
 80005ea:	3301      	adds	r3, #1
 80005ec:	623b      	str	r3, [r7, #32]
 80005ee:	8b3b      	ldrh	r3, [r7, #24]
 80005f0:	6a3a      	ldr	r2, [r7, #32]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbc9      	blt.n	800058a <_Z11EEPROM_ReadttPht+0x4a>
	}
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	@ 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200006c8 	.word	0x200006c8

08000604 <_Z3appv>:

/////////
// APP //
/////////

void app(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	appContent();
 8000608:	f000 f804 	bl	8000614 <_Z10appContentv>
	appLora();
 800060c:	f000 fb46 	bl	8000c9c <_Z7appLorav>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <_Z10appContentv>:
 * 			- Calcular valores a enviar
 * 			- Agregar comandos a Fifo
 * 			- Esperar relojes de TCP
 */

void appContent(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

	switch ( stateContent ){
 8000618:	4b6c      	ldr	r3, [pc, #432]	@ (80007cc <_Z10appContentv+0x1b8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b06      	cmp	r3, #6
 800061e:	f200 8318 	bhi.w	8000c52 <_Z10appContentv+0x63e>
 8000622:	a201      	add	r2, pc, #4	@ (adr r2, 8000628 <_Z10appContentv+0x14>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000645 	.word	0x08000645
 800062c:	08000661 	.word	0x08000661
 8000630:	080006e5 	.word	0x080006e5
 8000634:	0800080d 	.word	0x0800080d
 8000638:	08000a15 	.word	0x08000a15
 800063c:	08000bc1 	.word	0x08000bc1
 8000640:	08000c21 	.word	0x08000c21
	//////////////////////////
	// S0 - WAIT FOR ENABLE //
	//////////////////////////

	case 0:
		if ( loraDecision.enable() ){	// Si el chip esta habilitado
 8000644:	4862      	ldr	r0, [pc, #392]	@ (80007d0 <_Z10appContentv+0x1bc>)
 8000646:	f003 fafb 	bl	8003c40 <_ZN12loraDecision6enableEv>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <_Z10appContentv+0x44>
			stateContent	= 1;		// Pasa a S1
 8000650:	4b5e      	ldr	r3, [pc, #376]	@ (80007cc <_Z10appContentv+0x1b8>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateContent	= 0;		// Espera en S0
		}
		break;
 8000656:	e300      	b.n	8000c5a <_Z10appContentv+0x646>
			stateContent	= 0;		// Espera en S0
 8000658:	4b5c      	ldr	r3, [pc, #368]	@ (80007cc <_Z10appContentv+0x1b8>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e2fc      	b.n	8000c5a <_Z10appContentv+0x646>
	////////////////////////
	// S1 - WAIT FOR FLAG //
	////////////////////////

	case 1:
		bussyRN2903	= 0;
 8000660:	4b5c      	ldr	r3, [pc, #368]	@ (80007d4 <_Z10appContentv+0x1c0>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

		if ( !loraDecision.enable() ){			// Si no está habilitado
 8000666:	485a      	ldr	r0, [pc, #360]	@ (80007d0 <_Z10appContentv+0x1bc>)
 8000668:	f003 faea 	bl	8003c40 <_ZN12loraDecision6enableEv>
 800066c:	4603      	mov	r3, r0
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <_Z10appContentv+0x6c>
			stateContent	= 0;				// Vuelve a S0
 8000678:	4b54      	ldr	r3, [pc, #336]	@ (80007cc <_Z10appContentv+0x1b8>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			stateContent	= 4;				// Pasa a S4
		}
		else{									// Si no pasa nada
			stateContent	= 1;				// Espera en S1
		}
		break;
 800067e:	e2ec      	b.n	8000c5a <_Z10appContentv+0x646>
		else if ( fifoContent.available() ){	// Si hay
 8000680:	4855      	ldr	r0, [pc, #340]	@ (80007d8 <_Z10appContentv+0x1c4>)
 8000682:	f000 fdf5 	bl	8001270 <_ZN12fifoCommands9availableEv>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <_Z10appContentv+0x80>
			stateContent	= 5;				//
 800068c:	4b4f      	ldr	r3, [pc, #316]	@ (80007cc <_Z10appContentv+0x1b8>)
 800068e:	2205      	movs	r2, #5
 8000690:	701a      	strb	r2, [r3, #0]
		break;
 8000692:	e2e2      	b.n	8000c5a <_Z10appContentv+0x646>
		else if ( flagSetData ){				// Si se guardó datos de GPS
 8000694:	4b51      	ldr	r3, [pc, #324]	@ (80007dc <_Z10appContentv+0x1c8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d009      	beq.n	80006b0 <_Z10appContentv+0x9c>
			count_1_data++;
 800069c:	4b50      	ldr	r3, [pc, #320]	@ (80007e0 <_Z10appContentv+0x1cc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b4e      	ldr	r3, [pc, #312]	@ (80007e0 <_Z10appContentv+0x1cc>)
 80006a6:	701a      	strb	r2, [r3, #0]
			stateContent	= 2;				// Pasa a S3
 80006a8:	4b48      	ldr	r3, [pc, #288]	@ (80007cc <_Z10appContentv+0x1b8>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
		break;
 80006ae:	e2d4      	b.n	8000c5a <_Z10appContentv+0x646>
		else if ( flagGpsSaved ){				// Si pide guardar datos
 80006b0:	4b4c      	ldr	r3, [pc, #304]	@ (80007e4 <_Z10appContentv+0x1d0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d009      	beq.n	80006cc <_Z10appContentv+0xb8>
			count_0_gps++;
 80006b8:	4b4b      	ldr	r3, [pc, #300]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80006c2:	701a      	strb	r2, [r3, #0]
			stateContent	= 3;				// Pasa a S2
 80006c4:	4b41      	ldr	r3, [pc, #260]	@ (80007cc <_Z10appContentv+0x1b8>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	701a      	strb	r2, [r3, #0]
		break;
 80006ca:	e2c6      	b.n	8000c5a <_Z10appContentv+0x646>
		else if ( flagSetSys ){					// Si se guardan datos de sistema
 80006cc:	4b47      	ldr	r3, [pc, #284]	@ (80007ec <_Z10appContentv+0x1d8>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d003      	beq.n	80006dc <_Z10appContentv+0xc8>
			stateContent	= 4;				// Pasa a S4
 80006d4:	4b3d      	ldr	r3, [pc, #244]	@ (80007cc <_Z10appContentv+0x1b8>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	701a      	strb	r2, [r3, #0]
		break;
 80006da:	e2be      	b.n	8000c5a <_Z10appContentv+0x646>
			stateContent	= 1;				// Espera en S1
 80006dc:	4b3b      	ldr	r3, [pc, #236]	@ (80007cc <_Z10appContentv+0x1b8>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
		break;
 80006e2:	e2ba      	b.n	8000c5a <_Z10appContentv+0x646>
	////////////////////////////
	// S2 - SAVE SENSORS DATA //
	////////////////////////////

	case 2:
		flagSetData	= 0;					// Reinicia indicador de enviar datos
 80006e4:	4b3d      	ldr	r3, [pc, #244]	@ (80007dc <_Z10appContentv+0x1c8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]

		tempApp		= tempApp/10;			// Reduce resolucion de temperatura
 80006ea:	4b41      	ldr	r3, [pc, #260]	@ (80007f0 <_Z10appContentv+0x1dc>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4a41      	ldr	r2, [pc, #260]	@ (80007f4 <_Z10appContentv+0x1e0>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	08db      	lsrs	r3, r3, #3
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <_Z10appContentv+0x1dc>)
 80006fa:	801a      	strh	r2, [r3, #0]
		humApp		= humApp/10;			// Reduce resolucion de humedad
 80006fc:	4b3e      	ldr	r3, [pc, #248]	@ (80007f8 <_Z10appContentv+0x1e4>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	4a3c      	ldr	r2, [pc, #240]	@ (80007f4 <_Z10appContentv+0x1e0>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b3b      	ldr	r3, [pc, #236]	@ (80007f8 <_Z10appContentv+0x1e4>)
 800070c:	801a      	strh	r2, [r3, #0]

		content[0]	= '1';					// Indica que los datos van sobre puerto 1
 800070e:	4b3b      	ldr	r3, [pc, #236]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000710:	2231      	movs	r2, #49	@ 0x31
 8000712:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(b1_HCL);	// Guarda primeros 4 bits de B1 HCL
 8000714:	4b3a      	ldr	r3, [pc, #232]	@ (8000800 <_Z10appContentv+0x1ec>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fcb3 	bl	8001084 <_Z10uint2hex_Ah>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000724:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(b1_HCL);	// Guarda segundos 4 bits de B1 HCL
 8000726:	4b36      	ldr	r3, [pc, #216]	@ (8000800 <_Z10appContentv+0x1ec>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fd10 	bl	8001150 <_Z10uint2hex_Bh>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000736:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(a1_HCL);	// Guarda primeros 4 bits de A1 HCL
 8000738:	4b32      	ldr	r3, [pc, #200]	@ (8000804 <_Z10appContentv+0x1f0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fca1 	bl	8001084 <_Z10uint2hex_Ah>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000748:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(a1_HCL);	// Guarda segundos 4 bits de A1 HCL
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <_Z10appContentv+0x1f0>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fcfe 	bl	8001150 <_Z10uint2hex_Bh>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <_Z10appContentv+0x1e8>)
 800075a:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(tempApp);	// Guarda primeros 4 bits de Temperatura
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <_Z10appContentv+0x1dc>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fc8e 	bl	8001084 <_Z10uint2hex_Ah>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <_Z10appContentv+0x1e8>)
 800076e:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(tempApp);	// Guarda segundos 4 bits de Temperatura
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <_Z10appContentv+0x1dc>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fcea 	bl	8001150 <_Z10uint2hex_Bh>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000782:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(humApp);	// Guarda primeros 4 bits de Humedad
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <_Z10appContentv+0x1e4>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fc7a 	bl	8001084 <_Z10uint2hex_Ah>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <_Z10appContentv+0x1e8>)
 8000796:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(humApp);	// Guarda segundos 4 bits de Humedad
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <_Z10appContentv+0x1e4>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fcd6 	bl	8001150 <_Z10uint2hex_Bh>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <_Z10appContentv+0x1e8>)
 80007aa:	721a      	strb	r2, [r3, #8]

		qttyMsgData++;
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <_Z10appContentv+0x1f4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <_Z10appContentv+0x1f4>)
 80007b6:	701a      	strb	r2, [r3, #0]

		fifoContent.add(content, sizeof(content));	// Envia paquete a la FIFO
 80007b8:	2209      	movs	r2, #9
 80007ba:	4910      	ldr	r1, [pc, #64]	@ (80007fc <_Z10appContentv+0x1e8>)
 80007bc:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <_Z10appContentv+0x1c4>)
 80007be:	f000 fd64 	bl	800128a <_ZN12fifoCommands3addEPhh>
		stateContent 	= 5;						// Pasa a S5
 80007c2:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <_Z10appContentv+0x1b8>)
 80007c4:	2205      	movs	r2, #5
 80007c6:	701a      	strb	r2, [r3, #0]
		break;
 80007c8:	e247      	b.n	8000c5a <_Z10appContentv+0x646>
 80007ca:	bf00      	nop
 80007cc:	200003c4 	.word	0x200003c4
 80007d0:	20000b7c 	.word	0x20000b7c
 80007d4:	200003c8 	.word	0x200003c8
 80007d8:	20001098 	.word	0x20001098
 80007dc:	2000114e 	.word	0x2000114e
 80007e0:	200003c6 	.word	0x200003c6
 80007e4:	2000113e 	.word	0x2000113e
 80007e8:	200003c5 	.word	0x200003c5
 80007ec:	20001154 	.word	0x20001154
 80007f0:	20000516 	.word	0x20000516
 80007f4:	cccccccd 	.word	0xcccccccd
 80007f8:	20000518 	.word	0x20000518
 80007fc:	200003cc 	.word	0x200003cc
 8000800:	20000000 	.word	0x20000000
 8000804:	200003e1 	.word	0x200003e1
 8000808:	200003ee 	.word	0x200003ee
	////////////////////////
	// S3 - SAVE LAT/LONG //
	////////////////////////

	case 3:
		flagGpsSaved	= 0;						// Reinicia indicado de enviar GPS
 800080c:	4b76      	ldr	r3, [pc, #472]	@ (80009e8 <_Z10appContentv+0x3d4>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]

		latitudSend		= latitud;					// Copia valor de latitud
 8000812:	4b76      	ldr	r3, [pc, #472]	@ (80009ec <_Z10appContentv+0x3d8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a76      	ldr	r2, [pc, #472]	@ (80009f0 <_Z10appContentv+0x3dc>)
 8000818:	6013      	str	r3, [r2, #0]
		longitudSend	= longitud;					// Copia valor de longitud
 800081a:	4b76      	ldr	r3, [pc, #472]	@ (80009f4 <_Z10appContentv+0x3e0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a76      	ldr	r2, [pc, #472]	@ (80009f8 <_Z10appContentv+0x3e4>)
 8000820:	6013      	str	r3, [r2, #0]

		content[0]	= '2';							// Indica que latitud va en puerto 2
 8000822:	4b76      	ldr	r3, [pc, #472]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000824:	2232      	movs	r2, #50	@ 0x32
 8000826:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(ptrFloat_Lat[0]);	// Guarda primeros 4 bits de latitud - 1byte
 8000828:	4b75      	ldr	r3, [pc, #468]	@ (8000a00 <_Z10appContentv+0x3ec>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fc28 	bl	8001084 <_Z10uint2hex_Ah>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b70      	ldr	r3, [pc, #448]	@ (80009fc <_Z10appContentv+0x3e8>)
 800083a:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(ptrFloat_Lat[0]);	// Guarda segundos 4 bits de latitud - 1byte
 800083c:	4b70      	ldr	r3, [pc, #448]	@ (8000a00 <_Z10appContentv+0x3ec>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fc84 	bl	8001150 <_Z10uint2hex_Bh>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b6b      	ldr	r3, [pc, #428]	@ (80009fc <_Z10appContentv+0x3e8>)
 800084e:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(ptrFloat_Lat[1]);	// Guarda terceros 4 bits de latitud - 2byte
 8000850:	4b6b      	ldr	r3, [pc, #428]	@ (8000a00 <_Z10appContentv+0x3ec>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fc13 	bl	8001084 <_Z10uint2hex_Ah>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b66      	ldr	r3, [pc, #408]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000864:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(ptrFloat_Lat[1]);	// Guarda cuartos 4 bits de latitud  - 2byte
 8000866:	4b66      	ldr	r3, [pc, #408]	@ (8000a00 <_Z10appContentv+0x3ec>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fc6e 	bl	8001150 <_Z10uint2hex_Bh>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b60      	ldr	r3, [pc, #384]	@ (80009fc <_Z10appContentv+0x3e8>)
 800087a:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(ptrFloat_Lat[2]);	// Guarda quintos 4 bits de latitud  - 3byte
 800087c:	4b60      	ldr	r3, [pc, #384]	@ (8000a00 <_Z10appContentv+0x3ec>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3302      	adds	r3, #2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fbfd 	bl	8001084 <_Z10uint2hex_Ah>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	4b5b      	ldr	r3, [pc, #364]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000890:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(ptrFloat_Lat[2]);	// Guarda sextos 4 bits de latitud   - 3byte
 8000892:	4b5b      	ldr	r3, [pc, #364]	@ (8000a00 <_Z10appContentv+0x3ec>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3302      	adds	r3, #2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fc58 	bl	8001150 <_Z10uint2hex_Bh>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b55      	ldr	r3, [pc, #340]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008a6:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(ptrFloat_Lat[3]);	// Guarda septimos 4 bits de latitud - 4byte
 80008a8:	4b55      	ldr	r3, [pc, #340]	@ (8000a00 <_Z10appContentv+0x3ec>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3303      	adds	r3, #3
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fbe7 	bl	8001084 <_Z10uint2hex_Ah>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b50      	ldr	r3, [pc, #320]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008bc:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(ptrFloat_Lat[3]);	// Guarda octavos 4 bits de latitud  - 4byte
 80008be:	4b50      	ldr	r3, [pc, #320]	@ (8000a00 <_Z10appContentv+0x3ec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3303      	adds	r3, #3
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fc42 	bl	8001150 <_Z10uint2hex_Bh>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b4a      	ldr	r3, [pc, #296]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008d2:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Añade contenido de latitud a FIFO
 80008d4:	2209      	movs	r2, #9
 80008d6:	4949      	ldr	r1, [pc, #292]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008d8:	484a      	ldr	r0, [pc, #296]	@ (8000a04 <_Z10appContentv+0x3f0>)
 80008da:	f000 fcd6 	bl	800128a <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Repite contenido para enviar 2 veces
 80008de:	2209      	movs	r2, #9
 80008e0:	4946      	ldr	r1, [pc, #280]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008e2:	4848      	ldr	r0, [pc, #288]	@ (8000a04 <_Z10appContentv+0x3f0>)
 80008e4:	f000 fcd1 	bl	800128a <_ZN12fifoCommands3addEPhh>

		content[0]	= '3';							// Indica que longitud va en puerto 3
 80008e8:	4b44      	ldr	r3, [pc, #272]	@ (80009fc <_Z10appContentv+0x3e8>)
 80008ea:	2233      	movs	r2, #51	@ 0x33
 80008ec:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(ptrFloat_Lon[3]);	// Guarda primeros 4 bits de longitud - 1byte
 80008ee:	4b46      	ldr	r3, [pc, #280]	@ (8000a08 <_Z10appContentv+0x3f4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3303      	adds	r3, #3
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fbc4 	bl	8001084 <_Z10uint2hex_Ah>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b3e      	ldr	r3, [pc, #248]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000902:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(ptrFloat_Lon[3]);	// Guarda segundos 4 bits de longitud - 1byte
 8000904:	4b40      	ldr	r3, [pc, #256]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3303      	adds	r3, #3
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fc1f 	bl	8001150 <_Z10uint2hex_Bh>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b39      	ldr	r3, [pc, #228]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000918:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(ptrFloat_Lon[2]);	// Guarda terceros 4 bits de longitud - 2byte
 800091a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a08 <_Z10appContentv+0x3f4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3302      	adds	r3, #2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fbae 	bl	8001084 <_Z10uint2hex_Ah>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	4b33      	ldr	r3, [pc, #204]	@ (80009fc <_Z10appContentv+0x3e8>)
 800092e:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(ptrFloat_Lon[2]);	// Guarda cuartos 4 bits de longitud  - 2byte
 8000930:	4b35      	ldr	r3, [pc, #212]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3302      	adds	r3, #2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fc09 	bl	8001150 <_Z10uint2hex_Bh>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000944:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(ptrFloat_Lon[1]);	// Guarda quintos 4 bits de longitud  - 3byte
 8000946:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fb98 	bl	8001084 <_Z10uint2hex_Ah>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <_Z10appContentv+0x3e8>)
 800095a:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(ptrFloat_Lon[1]);	// Guarda sextos 4 bits de longitud   - 3byte
 800095c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <_Z10appContentv+0x3f4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fbf3 	bl	8001150 <_Z10uint2hex_Bh>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000970:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(ptrFloat_Lon[0]);	// Guarda septimos 4 bits de longitud - 4byte
 8000972:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fb83 	bl	8001084 <_Z10uint2hex_Ah>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000984:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(ptrFloat_Lon[0]);	// Guarda octavos 4 bits de longitud  - 4byte
 8000986:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <_Z10appContentv+0x3f4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fbdf 	bl	8001150 <_Z10uint2hex_Bh>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <_Z10appContentv+0x3e8>)
 8000998:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Añade contenido de longitud de la FIFO
 800099a:	2209      	movs	r2, #9
 800099c:	4917      	ldr	r1, [pc, #92]	@ (80009fc <_Z10appContentv+0x3e8>)
 800099e:	4819      	ldr	r0, [pc, #100]	@ (8000a04 <_Z10appContentv+0x3f0>)
 80009a0:	f000 fc73 	bl	800128a <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Repite contenido para enviar 2 veces
 80009a4:	2209      	movs	r2, #9
 80009a6:	4915      	ldr	r1, [pc, #84]	@ (80009fc <_Z10appContentv+0x3e8>)
 80009a8:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <_Z10appContentv+0x3f0>)
 80009aa:	f000 fc6e 	bl	800128a <_ZN12fifoCommands3addEPhh>

		qttyMsgGps++;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009b8:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009c4:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009d0:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <_Z10appContentv+0x3f8>)
 80009dc:	701a      	strb	r2, [r3, #0]

		stateContent	= 5;						// Pasa a S5
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <_Z10appContentv+0x3fc>)
 80009e0:	2205      	movs	r2, #5
 80009e2:	701a      	strb	r2, [r3, #0]
		break;
 80009e4:	e139      	b.n	8000c5a <_Z10appContentv+0x646>
 80009e6:	bf00      	nop
 80009e8:	2000113e 	.word	0x2000113e
 80009ec:	20000ad8 	.word	0x20000ad8
 80009f0:	200003e4 	.word	0x200003e4
 80009f4:	20000adc 	.word	0x20000adc
 80009f8:	200003e8 	.word	0x200003e8
 80009fc:	200003cc 	.word	0x200003cc
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20001098 	.word	0x20001098
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	200003ef 	.word	0x200003ef
 8000a10:	200003c4 	.word	0x200003c4
	////////////////////////
	// S4 - SAVE SYS DATA //
	////////////////////////

	case 4:
		warnings	= warningHardware[0]	+ warningHardware[1]*2;			// Multiplexa warning 0 y 1
 8000a14:	4b92      	ldr	r3, [pc, #584]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b91      	ldr	r3, [pc, #580]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b8f      	ldr	r3, [pc, #572]	@ (8000c64 <_Z10appContentv+0x650>)
 8000a28:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[2]*4	+ warningHardware[3]*8;			// Multiplexa warning 2 y 3
 8000a2a:	4b8d      	ldr	r3, [pc, #564]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000a2c:	789b      	ldrb	r3, [r3, #2]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b8b      	ldr	r3, [pc, #556]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000a32:	78db      	ldrb	r3, [r3, #3]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b89      	ldr	r3, [pc, #548]	@ (8000c64 <_Z10appContentv+0x650>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b87      	ldr	r3, [pc, #540]	@ (8000c64 <_Z10appContentv+0x650>)
 8000a48:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[4]*16	+ warningHardware[5]*32;	// Multiplexa warning 4 y 5
 8000a4a:	4b85      	ldr	r3, [pc, #532]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b83      	ldr	r3, [pc, #524]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000a52:	795b      	ldrb	r3, [r3, #5]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	011b      	lsls	r3, r3, #4
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b81      	ldr	r3, [pc, #516]	@ (8000c64 <_Z10appContentv+0x650>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b7f      	ldr	r3, [pc, #508]	@ (8000c64 <_Z10appContentv+0x650>)
 8000a68:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[6]*64	+ warningHardware[7]*128;	// Multiplexa warning 6 y 7
 8000a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000a6c:	799b      	ldrb	r3, [r3, #6]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b7b      	ldr	r3, [pc, #492]	@ (8000c60 <_Z10appContentv+0x64c>)
 8000a72:	79db      	ldrb	r3, [r3, #7]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	019b      	lsls	r3, r3, #6
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b79      	ldr	r3, [pc, #484]	@ (8000c64 <_Z10appContentv+0x650>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b77      	ldr	r3, [pc, #476]	@ (8000c64 <_Z10appContentv+0x650>)
 8000a88:	701a      	strb	r2, [r3, #0]

		errorHw	= errorHardware[0] 		+ errorHardware[1]*2;				// Multiplexa error 0 y 1
 8000a8a:	4b77      	ldr	r3, [pc, #476]	@ (8000c68 <_Z10appContentv+0x654>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b75      	ldr	r3, [pc, #468]	@ (8000c68 <_Z10appContentv+0x654>)
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b73      	ldr	r3, [pc, #460]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a9e:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[2]*4 	+ errorHardware[3]*8;				// Multiplexa error 2 y 3
 8000aa0:	4b71      	ldr	r3, [pc, #452]	@ (8000c68 <_Z10appContentv+0x654>)
 8000aa2:	789b      	ldrb	r3, [r3, #2]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b70      	ldr	r3, [pc, #448]	@ (8000c68 <_Z10appContentv+0x654>)
 8000aa8:	78db      	ldrb	r3, [r3, #3]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b6d      	ldr	r3, [pc, #436]	@ (8000c6c <_Z10appContentv+0x658>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b6b      	ldr	r3, [pc, #428]	@ (8000c6c <_Z10appContentv+0x658>)
 8000abe:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[4]*16 	+ errorHardware[5]*32;				// Multiplexa error 4 y 5
 8000ac0:	4b69      	ldr	r3, [pc, #420]	@ (8000c68 <_Z10appContentv+0x654>)
 8000ac2:	791b      	ldrb	r3, [r3, #4]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b68      	ldr	r3, [pc, #416]	@ (8000c68 <_Z10appContentv+0x654>)
 8000ac8:	795b      	ldrb	r3, [r3, #5]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	011b      	lsls	r3, r3, #4
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b65      	ldr	r3, [pc, #404]	@ (8000c6c <_Z10appContentv+0x658>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b63      	ldr	r3, [pc, #396]	@ (8000c6c <_Z10appContentv+0x658>)
 8000ade:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[6]*64;										// Multiplexa error 6
 8000ae0:	4b61      	ldr	r3, [pc, #388]	@ (8000c68 <_Z10appContentv+0x654>)
 8000ae2:	799b      	ldrb	r3, [r3, #6]
 8000ae4:	019b      	lsls	r3, r3, #6
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b60      	ldr	r3, [pc, #384]	@ (8000c6c <_Z10appContentv+0x658>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b5e      	ldr	r3, [pc, #376]	@ (8000c6c <_Z10appContentv+0x658>)
 8000af2:	701a      	strb	r2, [r3, #0]

		content[0]	= '4';						// Indica que longitud va en puerto 3
 8000af4:	4b5e      	ldr	r3, [pc, #376]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000af6:	2234      	movs	r2, #52	@ 0x34
 8000af8:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(warnings);		// Guarda primeros 4 bits de warnings
 8000afa:	4b5a      	ldr	r3, [pc, #360]	@ (8000c64 <_Z10appContentv+0x650>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fac0 	bl	8001084 <_Z10uint2hex_Ah>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b59      	ldr	r3, [pc, #356]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b0a:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_A(warnings);		// Guarda segundos 4 bits de warnings
 8000b0c:	4b55      	ldr	r3, [pc, #340]	@ (8000c64 <_Z10appContentv+0x650>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fab7 	bl	8001084 <_Z10uint2hex_Ah>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b55      	ldr	r3, [pc, #340]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b1c:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(errorHw);		// Guarda primeros 4 bits de errores
 8000b1e:	4b53      	ldr	r3, [pc, #332]	@ (8000c6c <_Z10appContentv+0x658>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 faae 	bl	8001084 <_Z10uint2hex_Ah>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b50      	ldr	r3, [pc, #320]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b2e:	70da      	strb	r2, [r3, #3]
		content[4]	= uint2hex_B(errorHw);		// Guarda segundos 4 bits de errores
 8000b30:	4b4e      	ldr	r3, [pc, #312]	@ (8000c6c <_Z10appContentv+0x658>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fb0b 	bl	8001150 <_Z10uint2hex_Bh>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b40:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(batScaled);	// Guarda primeros 4 bits de bateria escalada
 8000b42:	4b4c      	ldr	r3, [pc, #304]	@ (8000c74 <_Z10appContentv+0x660>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fa9b 	bl	8001084 <_Z10uint2hex_Ah>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b47      	ldr	r3, [pc, #284]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b54:	715a      	strb	r2, [r3, #5]
		content[6]	= uint2hex_A(batScaled);	// Guarda segundos 4 bits de bateria escalada
 8000b56:	4b47      	ldr	r3, [pc, #284]	@ (8000c74 <_Z10appContentv+0x660>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fa91 	bl	8001084 <_Z10uint2hex_Ah>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b42      	ldr	r3, [pc, #264]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b68:	719a      	strb	r2, [r3, #6]

		content[7]	= uint2hex_A(0);			// Futuro uso
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 fa8a 	bl	8001084 <_Z10uint2hex_Ah>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b3e      	ldr	r3, [pc, #248]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b76:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_A(0);			// Futuro iso
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fa83 	bl	8001084 <_Z10uint2hex_Ah>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b3b      	ldr	r3, [pc, #236]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b84:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Agrega contenido a la fifo
 8000b86:	2209      	movs	r2, #9
 8000b88:	4939      	ldr	r1, [pc, #228]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b8a:	483b      	ldr	r0, [pc, #236]	@ (8000c78 <_Z10appContentv+0x664>)
 8000b8c:	f000 fb7d 	bl	800128a <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Agrega contenido redundante a la fifo
 8000b90:	2209      	movs	r2, #9
 8000b92:	4937      	ldr	r1, [pc, #220]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b94:	4838      	ldr	r0, [pc, #224]	@ (8000c78 <_Z10appContentv+0x664>)
 8000b96:	f000 fb78 	bl	800128a <_ZN12fifoCommands3addEPhh>

		qttyMsgSys++;
 8000b9a:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <_Z10appContentv+0x668>)
 8000ba4:	701a      	strb	r2, [r3, #0]
		qttyMsgSys++;
 8000ba6:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <_Z10appContentv+0x668>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b33      	ldr	r3, [pc, #204]	@ (8000c7c <_Z10appContentv+0x668>)
 8000bb0:	701a      	strb	r2, [r3, #0]

		flagSetSys		= 0;						// Reinicia indicador de datos de sistema
 8000bb2:	4b33      	ldr	r3, [pc, #204]	@ (8000c80 <_Z10appContentv+0x66c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
		stateContent	= 5;						// Pasa a  S5
 8000bb8:	4b32      	ldr	r3, [pc, #200]	@ (8000c84 <_Z10appContentv+0x670>)
 8000bba:	2205      	movs	r2, #5
 8000bbc:	701a      	strb	r2, [r3, #0]
		break;
 8000bbe:	e04c      	b.n	8000c5a <_Z10appContentv+0x646>
	///////////////////
	// S5 - SET DATA //
	///////////////////

	case 5:
		fifoContent.read(content2, sizeof(content2));	// Lee contenido disponible en FIFO
 8000bc0:	2209      	movs	r2, #9
 8000bc2:	4931      	ldr	r1, [pc, #196]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bc4:	482c      	ldr	r0, [pc, #176]	@ (8000c78 <_Z10appContentv+0x664>)
 8000bc6:	f000 fba3 	bl	8001310 <_ZN12fifoCommands4readEPhh>

		macTxData_RN2903[13] = content2[0];			// Copia PUERTO
 8000bca:	4b2f      	ldr	r3, [pc, #188]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bcc:	781a      	ldrb	r2, [r3, #0]
 8000bce:	4b2f      	ldr	r3, [pc, #188]	@ (8000c8c <_Z10appContentv+0x678>)
 8000bd0:	735a      	strb	r2, [r3, #13]
		macTxData_RN2903[15] = content2[1];			// 0 Byte
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bd4:	785a      	ldrb	r2, [r3, #1]
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <_Z10appContentv+0x678>)
 8000bd8:	73da      	strb	r2, [r3, #15]
		macTxData_RN2903[16] = content2[2];			// 0 Byte
 8000bda:	4b2b      	ldr	r3, [pc, #172]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bdc:	789a      	ldrb	r2, [r3, #2]
 8000bde:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <_Z10appContentv+0x678>)
 8000be0:	741a      	strb	r2, [r3, #16]
		macTxData_RN2903[17] = content2[3];			// 1 Byte
 8000be2:	4b29      	ldr	r3, [pc, #164]	@ (8000c88 <_Z10appContentv+0x674>)
 8000be4:	78da      	ldrb	r2, [r3, #3]
 8000be6:	4b29      	ldr	r3, [pc, #164]	@ (8000c8c <_Z10appContentv+0x678>)
 8000be8:	745a      	strb	r2, [r3, #17]
		macTxData_RN2903[18] = content2[4];			// 1 Byte
 8000bea:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bec:	791a      	ldrb	r2, [r3, #4]
 8000bee:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <_Z10appContentv+0x678>)
 8000bf0:	749a      	strb	r2, [r3, #18]
		macTxData_RN2903[19] = content2[5];			// 2 Byte
 8000bf2:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bf4:	795a      	ldrb	r2, [r3, #5]
 8000bf6:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <_Z10appContentv+0x678>)
 8000bf8:	74da      	strb	r2, [r3, #19]
		macTxData_RN2903[20] = content2[6];			// 2 Byte
 8000bfa:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bfc:	799a      	ldrb	r2, [r3, #6]
 8000bfe:	4b23      	ldr	r3, [pc, #140]	@ (8000c8c <_Z10appContentv+0x678>)
 8000c00:	751a      	strb	r2, [r3, #20]
		macTxData_RN2903[21] = content2[7];			// 3 Byte
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <_Z10appContentv+0x674>)
 8000c04:	79da      	ldrb	r2, [r3, #7]
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <_Z10appContentv+0x678>)
 8000c08:	755a      	strb	r2, [r3, #21]
		macTxData_RN2903[22] = content2[8];			// 3 Byte
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <_Z10appContentv+0x674>)
 8000c0c:	7a1a      	ldrb	r2, [r3, #8]
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <_Z10appContentv+0x678>)
 8000c10:	759a      	strb	r2, [r3, #22]

		savedData		= 1;						// Indica que se guardaron los datos		stateContent	= 6;						// Pasa a S
 8000c12:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <_Z10appContentv+0x67c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
		stateContent	= 6;						// Pasa a S6
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <_Z10appContentv+0x670>)
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	701a      	strb	r2, [r3, #0]
		break;
 8000c1e:	e01c      	b.n	8000c5a <_Z10appContentv+0x646>
	//////////////////////////
	// S6 - WAIT FOR ENABLE //
	//////////////////////////

	case 6:
		if ( !loraDecision.enable() ){	// Si no está habilitado
 8000c20:	481c      	ldr	r0, [pc, #112]	@ (8000c94 <_Z10appContentv+0x680>)
 8000c22:	f003 f80d 	bl	8003c40 <_ZN12loraDecision6enableEv>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f083 0301 	eor.w	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <_Z10appContentv+0x626>
			stateContent	= 0;		// Vuelve a S0
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <_Z10appContentv+0x670>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
			stateContent	= 1;		// Vuelve a S1
		}
		else{							// Si no
			stateContent	= 6;		// Espera en S6
		}
		break;
 8000c38:	e00f      	b.n	8000c5a <_Z10appContentv+0x646>
		else if (bussyRN2903){			// Si se habilita
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <_Z10appContentv+0x684>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <_Z10appContentv+0x636>
			stateContent	= 1;		// Vuelve a S1
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <_Z10appContentv+0x670>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
		break;
 8000c48:	e007      	b.n	8000c5a <_Z10appContentv+0x646>
			stateContent	= 6;		// Espera en S6
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <_Z10appContentv+0x670>)
 8000c4c:	2206      	movs	r2, #6
 8000c4e:	701a      	strb	r2, [r3, #0]
		break;
 8000c50:	e003      	b.n	8000c5a <_Z10appContentv+0x646>

	default:
		stateContent	= 0;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <_Z10appContentv+0x670>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
		break;
 8000c58:	bf00      	nop
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200004d0 	.word	0x200004d0
 8000c64:	200003ed 	.word	0x200003ed
 8000c68:	200004d8 	.word	0x200004d8
 8000c6c:	200003ec 	.word	0x200003ec
 8000c70:	200003cc 	.word	0x200003cc
 8000c74:	20000528 	.word	0x20000528
 8000c78:	20001098 	.word	0x20001098
 8000c7c:	200003f0 	.word	0x200003f0
 8000c80:	20001154 	.word	0x20001154
 8000c84:	200003c4 	.word	0x200003c4
 8000c88:	200003d8 	.word	0x200003d8
 8000c8c:	200002f4 	.word	0x200002f4
 8000c90:	200003c7 	.word	0x200003c7
 8000c94:	20000b7c 	.word	0x20000b7c
 8000c98:	200003c8 	.word	0x200003c8

08000c9c <_Z7appLorav>:
 * 	chSetRN2903:	Fija configuracion de canales del chip
 * 	loopRN2903:		Fija comandos de transmision en el chip
 *
 */

void appLora(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

	switch ( stateLoraApp ){
 8000ca0:	4ba7      	ldr	r3, [pc, #668]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b0a      	cmp	r3, #10
 8000ca6:	f200 81d8 	bhi.w	800105a <_Z7appLorav+0x3be>
 8000caa:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb0 <_Z7appLorav+0x14>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cdd 	.word	0x08000cdd
 8000cb4:	08000d03 	.word	0x08000d03
 8000cb8:	08000d35 	.word	0x08000d35
 8000cbc:	08000d95 	.word	0x08000d95
 8000cc0:	08000de9 	.word	0x08000de9
 8000cc4:	08000e45 	.word	0x08000e45
 8000cc8:	08000e97 	.word	0x08000e97
 8000ccc:	08000eb1 	.word	0x08000eb1
 8000cd0:	08000ee3 	.word	0x08000ee3
 8000cd4:	08000f85 	.word	0x08000f85
 8000cd8:	08000fe1 	.word	0x08000fe1
	//////////////////////////
	// S0 - WAIT FOR ENABLE //
	//////////////////////////

	case 0:
		if ( loraDecision.enable() ){						// Si el chip esta habilitado por SW
 8000cdc:	4899      	ldr	r0, [pc, #612]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000cde:	f002 ffaf 	bl	8003c40 <_ZN12loraDecision6enableEv>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d008      	beq.n	8000cfa <_Z7appLorav+0x5e>
			loraCheck.setResponsePointer( rxCommand, 14);	//
 8000ce8:	220e      	movs	r2, #14
 8000cea:	4997      	ldr	r1, [pc, #604]	@ (8000f48 <_Z7appLorav+0x2ac>)
 8000cec:	4897      	ldr	r0, [pc, #604]	@ (8000f4c <_Z7appLorav+0x2b0>)
 8000cee:	f002 fd7f 	bl	80037f0 <_ZN9loraCheck18setResponsePointerEPPhh>
			stateLoraApp	= 7;							// Pasa a S1
 8000cf2:	4b93      	ldr	r3, [pc, #588]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateLoraApp	= 0;							// Espera en S0
		}
		break;
 8000cf8:	e1b3      	b.n	8001062 <_Z7appLorav+0x3c6>
			stateLoraApp	= 0;							// Espera en S0
 8000cfa:	4b91      	ldr	r3, [pc, #580]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
		break;
 8000d00:	e1af      	b.n	8001062 <_Z7appLorav+0x3c6>
	////////////////////////////
	// S1 - SET SETUP COMMAND //
	////////////////////////////

	case 1:
		loraDecision.reset();
 8000d02:	4890      	ldr	r0, [pc, #576]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000d04:	f002 ff79 	bl	8003bfa <_ZN12loraDecision5resetEv>
		txCommandPointer	= setupRN2903.command();		// Solicita comando
 8000d08:	4891      	ldr	r0, [pc, #580]	@ (8000f50 <_Z7appLorav+0x2b4>)
 8000d0a:	f002 fcc4 	bl	8003696 <_ZN10loraRutine7commandEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a90      	ldr	r2, [pc, #576]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000d12:	6013      	str	r3, [r2, #0]
		loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000d14:	4b8f      	ldr	r3, [pc, #572]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6859      	ldr	r1, [r3, #4]
 8000d1a:	4b8e      	ldr	r3, [pc, #568]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	4b8c      	ldr	r3, [pc, #560]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	7a1b      	ldrb	r3, [r3, #8]
 8000d26:	488c      	ldr	r0, [pc, #560]	@ (8000f58 <_Z7appLorav+0x2bc>)
 8000d28:	f002 fe8c 	bl	8003a44 <_ZN10loraSelect10setCommandEPhhh>
			txCommandPointer->size,							// Inserta tamañp del comando
			txCommandPointer->responseSize);				// Inserta tamaño de respuesta
		stateLoraApp	= 2;								// Pasa a S2
 8000d2c:	4b84      	ldr	r3, [pc, #528]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	701a      	strb	r2, [r3, #0]
		break;
 8000d32:	e196      	b.n	8001062 <_Z7appLorav+0x3c6>
	// S2 - WAIT FOR NEXT //
	////////////////////////

	case 2:

		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000d34:	4883      	ldr	r0, [pc, #524]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000d36:	f002 ff83 	bl	8003c40 <_ZN12loraDecision6enableEv>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f083 0301 	eor.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <_Z7appLorav+0xb2>
			stateLoraApp	= 6;										// Pasa a S6
 8000d46:	4b7e      	ldr	r3, [pc, #504]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000d48:	2206      	movs	r2, #6
 8000d4a:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;										// Vuelve a S1
		}
		else{															// Si no
			stateLoraApp	= 2;										// Se queda en S2
		}
		break;
 8000d4c:	e189      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && setupRN2903.finish() ){		// Si llegó la respuesta correcta y es la ultima
 8000d4e:	487d      	ldr	r0, [pc, #500]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000d50:	f002 ff82 	bl	8003c58 <_ZN12loraDecision7correctEv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <_Z7appLorav+0xce>
 8000d5a:	487d      	ldr	r0, [pc, #500]	@ (8000f50 <_Z7appLorav+0x2b4>)
 8000d5c:	f002 fcd7 	bl	800370e <_ZN10loraRutine6finishEv>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <_Z7appLorav+0xce>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <_Z7appLorav+0xd0>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <_Z7appLorav+0xdc>
			stateLoraApp	= 3;										// Pasa a  S3
 8000d70:	4b73      	ldr	r3, [pc, #460]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000d72:	2203      	movs	r2, #3
 8000d74:	701a      	strb	r2, [r3, #0]
		break;
 8000d76:	e174      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8000d78:	4872      	ldr	r0, [pc, #456]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000d7a:	f002 ff6d 	bl	8003c58 <_ZN12loraDecision7correctEv>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <_Z7appLorav+0xf0>
			stateLoraApp	= 1;										// Vuelve a S1
 8000d84:	4b6e      	ldr	r3, [pc, #440]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
		break;
 8000d8a:	e16a      	b.n	8001062 <_Z7appLorav+0x3c6>
			stateLoraApp	= 2;										// Se queda en S2
 8000d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
		break;
 8000d92:	e166      	b.n	8001062 <_Z7appLorav+0x3c6>
	// S3 - GET TX COMMAND //
	/////////////////////////

	case 3:

		if ( savedData ){										//
 8000d94:	4b71      	ldr	r3, [pc, #452]	@ (8000f5c <_Z7appLorav+0x2c0>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d021      	beq.n	8000de0 <_Z7appLorav+0x144>
			qttyMessagesInputs2++;
 8000d9c:	4b70      	ldr	r3, [pc, #448]	@ (8000f60 <_Z7appLorav+0x2c4>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b6e      	ldr	r3, [pc, #440]	@ (8000f60 <_Z7appLorav+0x2c4>)
 8000da6:	701a      	strb	r2, [r3, #0]
			loraDecision.reset();								//
 8000da8:	4866      	ldr	r0, [pc, #408]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000daa:	f002 ff26 	bl	8003bfa <_ZN12loraDecision5resetEv>
			loopRN2903.reset();									//
 8000dae:	486d      	ldr	r0, [pc, #436]	@ (8000f64 <_Z7appLorav+0x2c8>)
 8000db0:	f002 fc9b 	bl	80036ea <_ZN10loraRutine5resetEv>
			txCommandPointer	= loopRN2903.command();			// Solicita comando
 8000db4:	486b      	ldr	r0, [pc, #428]	@ (8000f64 <_Z7appLorav+0x2c8>)
 8000db6:	f002 fc6e 	bl	8003696 <_ZN10loraRutine7commandEv>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a65      	ldr	r2, [pc, #404]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000dbe:	6013      	str	r3, [r2, #0]

			loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000dc0:	4b64      	ldr	r3, [pc, #400]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6859      	ldr	r1, [r3, #4]
 8000dc6:	4b63      	ldr	r3, [pc, #396]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	4b61      	ldr	r3, [pc, #388]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	7a1b      	ldrb	r3, [r3, #8]
 8000dd2:	4861      	ldr	r0, [pc, #388]	@ (8000f58 <_Z7appLorav+0x2bc>)
 8000dd4:	f002 fe36 	bl	8003a44 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,							// Inserta tamañp del comando
				txCommandPointer->responseSize);				// Inserta tamaño de respuesta
			stateLoraApp	= 4;								// Pasa a S4
 8000dd8:	4b59      	ldr	r3, [pc, #356]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateLoraApp	= 3;								// Espera en S3
		}
		break;
 8000dde:	e140      	b.n	8001062 <_Z7appLorav+0x3c6>
			stateLoraApp	= 3;								// Espera en S3
 8000de0:	4b57      	ldr	r3, [pc, #348]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	701a      	strb	r2, [r3, #0]
		break;
 8000de6:	e13c      	b.n	8001062 <_Z7appLorav+0x3c6>
	////////////////////////////
	// S4 - WAIT FOR RESPONSE //
	////////////////////////////

	case 4:
		if ( !loraDecision.enable() ){			// Si el chip esta habilitado
 8000de8:	4856      	ldr	r0, [pc, #344]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000dea:	f002 ff29 	bl	8003c40 <_ZN12loraDecision6enableEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f083 0301 	eor.w	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <_Z7appLorav+0x166>
			stateLoraApp	= 6;				// Pasa a S6
 8000dfa:	4b51      	ldr	r3, [pc, #324]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000dfc:	2206      	movs	r2, #6
 8000dfe:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;
		}
		else{									// Si no
			stateLoraApp	= 4;				// Se queda en S4
		}
		break;
 8000e00:	e12f      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){		// Si es correcto
 8000e02:	4850      	ldr	r0, [pc, #320]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000e04:	f002 ff28 	bl	8003c58 <_ZN12loraDecision7correctEv>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <_Z7appLorav+0x17a>
			stateLoraApp	= 5;				// Vuelve a S5
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000e10:	2205      	movs	r2, #5
 8000e12:	701a      	strb	r2, [r3, #0]
		break;
 8000e14:	e125      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( loraDecision.burn()){
 8000e16:	484b      	ldr	r0, [pc, #300]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000e18:	f002 ff2a 	bl	8003c70 <_ZN12loraDecision4burnEv>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00c      	beq.n	8000e3c <_Z7appLorav+0x1a0>
			setupRN2903.reset();	// Reinicia rutina
 8000e22:	484b      	ldr	r0, [pc, #300]	@ (8000f50 <_Z7appLorav+0x2b4>)
 8000e24:	f002 fc61 	bl	80036ea <_ZN10loraRutine5resetEv>
			chSetRN2903.reset();	// Reinicia rutina
 8000e28:	484f      	ldr	r0, [pc, #316]	@ (8000f68 <_Z7appLorav+0x2cc>)
 8000e2a:	f002 fc5e 	bl	80036ea <_ZN10loraRutine5resetEv>
			loopRN2903.reset();		// Reinicia rutina
 8000e2e:	484d      	ldr	r0, [pc, #308]	@ (8000f64 <_Z7appLorav+0x2c8>)
 8000e30:	f002 fc5b 	bl	80036ea <_ZN10loraRutine5resetEv>
			stateLoraApp	= 1;
 8000e34:	4b42      	ldr	r3, [pc, #264]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
		break;
 8000e3a:	e112      	b.n	8001062 <_Z7appLorav+0x3c6>
			stateLoraApp	= 4;				// Se queda en S4
 8000e3c:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	701a      	strb	r2, [r3, #0]
		break;
 8000e42:	e10e      	b.n	8001062 <_Z7appLorav+0x3c6>
	////////////////////////////////
	// S5 - WAIT FOR NEXT MESSAGE //
	////////////////////////////////

	case 5:
		savedData = 0;								// Indica que se envia
 8000e44:	4b45      	ldr	r3, [pc, #276]	@ (8000f5c <_Z7appLorav+0x2c0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
		countLoraApp++;								// Suma 1 al contador
 8000e4a:	4b48      	ldr	r3, [pc, #288]	@ (8000f6c <_Z7appLorav+0x2d0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a46      	ldr	r2, [pc, #280]	@ (8000f6c <_Z7appLorav+0x2d0>)
 8000e52:	6013      	str	r3, [r2, #0]

		if ( !loraDecision.enable() ){				// Si el chip esta habilitado
 8000e54:	483b      	ldr	r0, [pc, #236]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000e56:	f002 fef3 	bl	8003c40 <_ZN12loraDecision6enableEv>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f083 0301 	eor.w	r3, r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <_Z7appLorav+0x1d2>
			stateLoraApp	= 6;					// Pasa a S6
 8000e66:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000e68:	2206      	movs	r2, #6
 8000e6a:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateLoraApp	= 5;					// Espera
		}

		break;
 8000e6c:	e0f9      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( countLoraApp >= limitLoraApp ){	// Si pasa el limite
 8000e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <_Z7appLorav+0x2d0>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b3f      	ldr	r3, [pc, #252]	@ (8000f70 <_Z7appLorav+0x2d4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	db09      	blt.n	8000e8e <_Z7appLorav+0x1f2>
			bussyRN2903		= 1;					// Habilita
 8000e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f74 <_Z7appLorav+0x2d8>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
			countLoraApp	= 0;					// Reinicia contador
 8000e80:	4b3a      	ldr	r3, [pc, #232]	@ (8000f6c <_Z7appLorav+0x2d0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
			stateLoraApp	= 3;					// Pasa a S3
 8000e86:	4b2e      	ldr	r3, [pc, #184]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000e88:	2203      	movs	r2, #3
 8000e8a:	701a      	strb	r2, [r3, #0]
		break;
 8000e8c:	e0e9      	b.n	8001062 <_Z7appLorav+0x3c6>
			stateLoraApp	= 5;					// Espera
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000e90:	2205      	movs	r2, #5
 8000e92:	701a      	strb	r2, [r3, #0]
		break;
 8000e94:	e0e5      	b.n	8001062 <_Z7appLorav+0x3c6>
	////////////////////////
	// S6 - RESET RUTINES //
	////////////////////////

	case 6:
		setupRN2903.reset();	// Reinicia rutina
 8000e96:	482e      	ldr	r0, [pc, #184]	@ (8000f50 <_Z7appLorav+0x2b4>)
 8000e98:	f002 fc27 	bl	80036ea <_ZN10loraRutine5resetEv>
		chSetRN2903.reset();	// Reinicia rutina
 8000e9c:	4832      	ldr	r0, [pc, #200]	@ (8000f68 <_Z7appLorav+0x2cc>)
 8000e9e:	f002 fc24 	bl	80036ea <_ZN10loraRutine5resetEv>
		loopRN2903.reset();		// Reinicia rutina
 8000ea2:	4830      	ldr	r0, [pc, #192]	@ (8000f64 <_Z7appLorav+0x2c8>)
 8000ea4:	f002 fc21 	bl	80036ea <_ZN10loraRutine5resetEv>

		stateLoraApp	= 0;	// Vuelve a S0
 8000ea8:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
		break;
 8000eae:	e0d8      	b.n	8001062 <_Z7appLorav+0x3c6>
	/////////////////////////
	// S7 - SET CH COMMAND //
	/////////////////////////

	case 7:
		loraDecision.reset();								// Reinicia decisiones
 8000eb0:	4824      	ldr	r0, [pc, #144]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000eb2:	f002 fea2 	bl	8003bfa <_ZN12loraDecision5resetEv>
		txCommandPointer	= chSetRN2903.command();		// Solicita comando
 8000eb6:	482c      	ldr	r0, [pc, #176]	@ (8000f68 <_Z7appLorav+0x2cc>)
 8000eb8:	f002 fbed 	bl	8003696 <_ZN10loraRutine7commandEv>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000ec0:	6013      	str	r3, [r2, #0]
		loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6859      	ldr	r1, [r3, #4]
 8000ec8:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <_Z7appLorav+0x2b8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	7a1b      	ldrb	r3, [r3, #8]
 8000ed4:	4820      	ldr	r0, [pc, #128]	@ (8000f58 <_Z7appLorav+0x2bc>)
 8000ed6:	f002 fdb5 	bl	8003a44 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,						// Inserta tamañp del comando
				txCommandPointer->responseSize );			// Inserta tamaño de respuesta
		stateLoraApp	= 8;								// Pasa a S2
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000edc:	2208      	movs	r2, #8
 8000ede:	701a      	strb	r2, [r3, #0]
		break;
 8000ee0:	e0bf      	b.n	8001062 <_Z7appLorav+0x3c6>
	/////////////////////////
	// S8 - CHECK RESPONSE //
	/////////////////////////

	case 8:
		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000ee2:	4818      	ldr	r0, [pc, #96]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000ee4:	f002 feac 	bl	8003c40 <_ZN12loraDecision6enableEv>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f083 0301 	eor.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <_Z7appLorav+0x260>
			stateLoraApp	= 6;										// Pasa a S6
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000ef6:	2206      	movs	r2, #6
 8000ef8:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 7;										// Vuelve a S7
		}
		else{															// Si no
			stateLoraApp	= 8;										// Se queda en S8
		}
		break;
 8000efa:	e0b2      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && chSetRN2903.finish() ){		// Si llegó la respuesta correcta y es la ultima
 8000efc:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000efe:	f002 feab 	bl	8003c58 <_ZN12loraDecision7correctEv>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <_Z7appLorav+0x27c>
 8000f08:	4817      	ldr	r0, [pc, #92]	@ (8000f68 <_Z7appLorav+0x2cc>)
 8000f0a:	f002 fc00 	bl	800370e <_ZN10loraRutine6finishEv>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <_Z7appLorav+0x27c>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <_Z7appLorav+0x27e>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <_Z7appLorav+0x290>
			countChSet		= 10;										// Inicia contador en 10
 8000f1e:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <_Z7appLorav+0x2dc>)
 8000f20:	220a      	movs	r2, #10
 8000f22:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Pasa a  S9
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000f26:	2209      	movs	r2, #9
 8000f28:	701a      	strb	r2, [r3, #0]
		break;
 8000f2a:	e09a      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <_Z7appLorav+0x2a8>)
 8000f2e:	f002 fe93 	bl	8003c58 <_ZN12loraDecision7correctEv>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d021      	beq.n	8000f7c <_Z7appLorav+0x2e0>
			stateLoraApp	= 7;										// Vuelve a S7
 8000f38:	4b01      	ldr	r3, [pc, #4]	@ (8000f40 <_Z7appLorav+0x2a4>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	701a      	strb	r2, [r3, #0]
		break;
 8000f3e:	e090      	b.n	8001062 <_Z7appLorav+0x3c6>
 8000f40:	2000000c 	.word	0x2000000c
 8000f44:	20000b7c 	.word	0x20000b7c
 8000f48:	20000174 	.word	0x20000174
 8000f4c:	20000b68 	.word	0x20000b68
 8000f50:	20000b8c 	.word	0x20000b8c
 8000f54:	200003f4 	.word	0x200003f4
 8000f58:	20000b84 	.word	0x20000b84
 8000f5c:	200003c7 	.word	0x200003c7
 8000f60:	2000050a 	.word	0x2000050a
 8000f64:	20000eb4 	.word	0x20000eb4
 8000f68:	20000d20 	.word	0x20000d20
 8000f6c:	200003f8 	.word	0x200003f8
 8000f70:	200003fc 	.word	0x200003fc
 8000f74:	200003c8 	.word	0x200003c8
 8000f78:	20000400 	.word	0x20000400
			stateLoraApp	= 8;										// Se queda en S8
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001068 <_Z7appLorav+0x3cc>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	701a      	strb	r2, [r3, #0]
		break;
 8000f82:	e06e      	b.n	8001062 <_Z7appLorav+0x3c6>
	///////////////////////////
	// S9 - GET LAST COMMAND //
	///////////////////////////

	case 9:
		loraDecision.reset();										// Reinicia decisiones
 8000f84:	4839      	ldr	r0, [pc, #228]	@ (800106c <_Z7appLorav+0x3d0>)
 8000f86:	f002 fe38 	bl	8003bfa <_ZN12loraDecision5resetEv>
		macSetCh10_RN2903[18]	= uint8_t(countChSet/10) + '0';		// Inserta decena del contador
 8000f8a:	4b39      	ldr	r3, [pc, #228]	@ (8001070 <_Z7appLorav+0x3d4>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4a39      	ldr	r2, [pc, #228]	@ (8001074 <_Z7appLorav+0x3d8>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	3330      	adds	r3, #48	@ 0x30
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <_Z7appLorav+0x3dc>)
 8000f9e:	749a      	strb	r2, [r3, #18]
		macSetCh10_RN2903[19]	= countChSet%10 + '0';				// Inserta unidad de contador
 8000fa0:	4b33      	ldr	r3, [pc, #204]	@ (8001070 <_Z7appLorav+0x3d4>)
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	4b33      	ldr	r3, [pc, #204]	@ (8001074 <_Z7appLorav+0x3d8>)
 8000fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8000faa:	08d9      	lsrs	r1, r3, #3
 8000fac:	460b      	mov	r3, r1
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	3330      	adds	r3, #48	@ 0x30
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001078 <_Z7appLorav+0x3dc>)
 8000fbe:	74da      	strb	r2, [r3, #19]
		loraSelect.setCommand( txCommandPointer->command,			// Fija comando en la salida
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <_Z7appLorav+0x3e0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6859      	ldr	r1, [r3, #4]
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <_Z7appLorav+0x3e0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <_Z7appLorav+0x3e0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	7a1b      	ldrb	r3, [r3, #8]
 8000fd2:	482b      	ldr	r0, [pc, #172]	@ (8001080 <_Z7appLorav+0x3e4>)
 8000fd4:	f002 fd36 	bl	8003a44 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,								// Inserta tamañp del comando
				txCommandPointer->responseSize);					// Inserta tamaño de respuesta
		stateLoraApp	= 10;										// Pasa a S10
 8000fd8:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <_Z7appLorav+0x3cc>)
 8000fda:	220a      	movs	r2, #10
 8000fdc:	701a      	strb	r2, [r3, #0]
		break;
 8000fde:	e040      	b.n	8001062 <_Z7appLorav+0x3c6>
	//////////////////////////
	// S10 - CHECK RESPONSE //
	//////////////////////////

	case 10:
		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000fe0:	4822      	ldr	r0, [pc, #136]	@ (800106c <_Z7appLorav+0x3d0>)
 8000fe2:	f002 fe2d 	bl	8003c40 <_ZN12loraDecision6enableEv>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <_Z7appLorav+0x35e>
			stateLoraApp	= 6;										// Pasa a S6
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <_Z7appLorav+0x3cc>)
 8000ff4:	2206      	movs	r2, #6
 8000ff6:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Vuelve a S9
		}
		else{															// Si no
			stateLoraApp	= 10;										// Se queda en S10
		}
		break;
 8000ff8:	e033      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && countChSet == 71 ){			// Si llegó la respuesta correcta y es la ultima
 8000ffa:	481c      	ldr	r0, [pc, #112]	@ (800106c <_Z7appLorav+0x3d0>)
 8000ffc:	f002 fe2c 	bl	8003c58 <_ZN12loraDecision7correctEv>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <_Z7appLorav+0x376>
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <_Z7appLorav+0x3d4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b47      	cmp	r3, #71	@ 0x47
 800100c:	d101      	bne.n	8001012 <_Z7appLorav+0x376>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <_Z7appLorav+0x378>
 8001012:	2300      	movs	r3, #0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00c      	beq.n	8001032 <_Z7appLorav+0x396>
			macSetCh10_RN2903[18]	= '1';								// Fija comando en valor original '1'
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <_Z7appLorav+0x3dc>)
 800101a:	2231      	movs	r2, #49	@ 0x31
 800101c:	749a      	strb	r2, [r3, #18]
			macSetCh10_RN2903[19]	= '0';								// Fija comando en valor original '0'
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <_Z7appLorav+0x3dc>)
 8001020:	2230      	movs	r2, #48	@ 0x30
 8001022:	74da      	strb	r2, [r3, #19]
			countChSet		= 10;										// Reinicia contador en 10
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <_Z7appLorav+0x3d4>)
 8001026:	220a      	movs	r2, #10
 8001028:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;										// Pasa a  S3
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <_Z7appLorav+0x3cc>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
		break;
 8001030:	e017      	b.n	8001062 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8001032:	480e      	ldr	r0, [pc, #56]	@ (800106c <_Z7appLorav+0x3d0>)
 8001034:	f002 fe10 	bl	8003c58 <_ZN12loraDecision7correctEv>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <_Z7appLorav+0x3b6>
			countChSet++;												// Suma 1 al contador
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <_Z7appLorav+0x3d4>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <_Z7appLorav+0x3d4>)
 8001048:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Vuelve a S9
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <_Z7appLorav+0x3cc>)
 800104c:	2209      	movs	r2, #9
 800104e:	701a      	strb	r2, [r3, #0]
		break;
 8001050:	e007      	b.n	8001062 <_Z7appLorav+0x3c6>
			stateLoraApp	= 10;										// Se queda en S10
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <_Z7appLorav+0x3cc>)
 8001054:	220a      	movs	r2, #10
 8001056:	701a      	strb	r2, [r3, #0]
		break;
 8001058:	e003      	b.n	8001062 <_Z7appLorav+0x3c6>

	default:
		stateLoraApp	= 0;
 800105a:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <_Z7appLorav+0x3cc>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		break;
 8001060:	bf00      	nop
	}
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000b7c 	.word	0x20000b7c
 8001070:	20000400 	.word	0x20000400
 8001074:	cccccccd 	.word	0xcccccccd
 8001078:	2000037c 	.word	0x2000037c
 800107c:	200003f4 	.word	0x200003f4
 8001080:	20000b84 	.word	0x20000b84

08001084 <_Z10uint2hex_Ah>:

uint8_t uint2hex_A( uint8_t number ){
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	uint8_t value = (number >> 4 & 0x0F);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	73fb      	strb	r3, [r7, #15]

	switch ( value ){
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	d852      	bhi.n	8001140 <_Z10uint2hex_Ah+0xbc>
 800109a:	a201      	add	r2, pc, #4	@ (adr r2, 80010a0 <_Z10uint2hex_Ah+0x1c>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	080010e1 	.word	0x080010e1
 80010a4:	080010e7 	.word	0x080010e7
 80010a8:	080010ed 	.word	0x080010ed
 80010ac:	080010f3 	.word	0x080010f3
 80010b0:	080010f9 	.word	0x080010f9
 80010b4:	080010ff 	.word	0x080010ff
 80010b8:	08001105 	.word	0x08001105
 80010bc:	0800110b 	.word	0x0800110b
 80010c0:	08001111 	.word	0x08001111
 80010c4:	08001117 	.word	0x08001117
 80010c8:	0800111d 	.word	0x0800111d
 80010cc:	08001123 	.word	0x08001123
 80010d0:	08001129 	.word	0x08001129
 80010d4:	0800112f 	.word	0x0800112f
 80010d8:	08001135 	.word	0x08001135
 80010dc:	0800113b 	.word	0x0800113b
	case 0:
		value = '0';
 80010e0:	2330      	movs	r3, #48	@ 0x30
 80010e2:	73fb      	strb	r3, [r7, #15]
		break;
 80010e4:	e02c      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 1:
		value = '1';
 80010e6:	2331      	movs	r3, #49	@ 0x31
 80010e8:	73fb      	strb	r3, [r7, #15]
		break;
 80010ea:	e029      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 2:
		value = '2';
 80010ec:	2332      	movs	r3, #50	@ 0x32
 80010ee:	73fb      	strb	r3, [r7, #15]
		break;
 80010f0:	e026      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 3:
		value = '3';
 80010f2:	2333      	movs	r3, #51	@ 0x33
 80010f4:	73fb      	strb	r3, [r7, #15]
		break;
 80010f6:	e023      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 4:
		value = '4';
 80010f8:	2334      	movs	r3, #52	@ 0x34
 80010fa:	73fb      	strb	r3, [r7, #15]
		break;
 80010fc:	e020      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 5:
		value = '5';
 80010fe:	2335      	movs	r3, #53	@ 0x35
 8001100:	73fb      	strb	r3, [r7, #15]
		break;
 8001102:	e01d      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 6:
		value = '6';
 8001104:	2336      	movs	r3, #54	@ 0x36
 8001106:	73fb      	strb	r3, [r7, #15]
		break;
 8001108:	e01a      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 7:
		value = '7';
 800110a:	2337      	movs	r3, #55	@ 0x37
 800110c:	73fb      	strb	r3, [r7, #15]
		break;
 800110e:	e017      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 8:
		value = '8';
 8001110:	2338      	movs	r3, #56	@ 0x38
 8001112:	73fb      	strb	r3, [r7, #15]
		break;
 8001114:	e014      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 9:
		value = '9';
 8001116:	2339      	movs	r3, #57	@ 0x39
 8001118:	73fb      	strb	r3, [r7, #15]
		break;
 800111a:	e011      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 10:
		value = 'A';
 800111c:	2341      	movs	r3, #65	@ 0x41
 800111e:	73fb      	strb	r3, [r7, #15]
		break;
 8001120:	e00e      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 11:
		value = 'B';
 8001122:	2342      	movs	r3, #66	@ 0x42
 8001124:	73fb      	strb	r3, [r7, #15]
		break;
 8001126:	e00b      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 12:
		value = 'C';
 8001128:	2343      	movs	r3, #67	@ 0x43
 800112a:	73fb      	strb	r3, [r7, #15]
		break;
 800112c:	e008      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 13:
		value = 'D';
 800112e:	2344      	movs	r3, #68	@ 0x44
 8001130:	73fb      	strb	r3, [r7, #15]
		break;
 8001132:	e005      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 14:
		value = 'E';
 8001134:	2345      	movs	r3, #69	@ 0x45
 8001136:	73fb      	strb	r3, [r7, #15]
		break;
 8001138:	e002      	b.n	8001140 <_Z10uint2hex_Ah+0xbc>

	case 15:
		value = 'F';
 800113a:	2346      	movs	r3, #70	@ 0x46
 800113c:	73fb      	strb	r3, [r7, #15]
		break;
 800113e:	bf00      	nop
	}
	return  value;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <_Z10uint2hex_Bh>:

uint8_t uint2hex_B( uint8_t number ){
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint8_t value = (number & 0x0F);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	73fb      	strb	r3, [r7, #15]

	switch ( value ){
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d853      	bhi.n	8001210 <_Z10uint2hex_Bh+0xc0>
 8001168:	a201      	add	r2, pc, #4	@ (adr r2, 8001170 <_Z10uint2hex_Bh+0x20>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	080011b1 	.word	0x080011b1
 8001174:	080011b7 	.word	0x080011b7
 8001178:	080011bd 	.word	0x080011bd
 800117c:	080011c3 	.word	0x080011c3
 8001180:	080011c9 	.word	0x080011c9
 8001184:	080011cf 	.word	0x080011cf
 8001188:	080011d5 	.word	0x080011d5
 800118c:	080011db 	.word	0x080011db
 8001190:	080011e1 	.word	0x080011e1
 8001194:	080011e7 	.word	0x080011e7
 8001198:	080011ed 	.word	0x080011ed
 800119c:	080011f3 	.word	0x080011f3
 80011a0:	080011f9 	.word	0x080011f9
 80011a4:	080011ff 	.word	0x080011ff
 80011a8:	08001205 	.word	0x08001205
 80011ac:	0800120b 	.word	0x0800120b
	case 0:
		value = '0';
 80011b0:	2330      	movs	r3, #48	@ 0x30
 80011b2:	73fb      	strb	r3, [r7, #15]
		break;
 80011b4:	e02c      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 1:
		value = '1';
 80011b6:	2331      	movs	r3, #49	@ 0x31
 80011b8:	73fb      	strb	r3, [r7, #15]
		break;
 80011ba:	e029      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 2:
		value = '2';
 80011bc:	2332      	movs	r3, #50	@ 0x32
 80011be:	73fb      	strb	r3, [r7, #15]
		break;
 80011c0:	e026      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 3:
		value = '3';
 80011c2:	2333      	movs	r3, #51	@ 0x33
 80011c4:	73fb      	strb	r3, [r7, #15]
		break;
 80011c6:	e023      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 4:
		value = '4';
 80011c8:	2334      	movs	r3, #52	@ 0x34
 80011ca:	73fb      	strb	r3, [r7, #15]
		break;
 80011cc:	e020      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 5:
		value = '5';
 80011ce:	2335      	movs	r3, #53	@ 0x35
 80011d0:	73fb      	strb	r3, [r7, #15]
		break;
 80011d2:	e01d      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 6:
		value = '6';
 80011d4:	2336      	movs	r3, #54	@ 0x36
 80011d6:	73fb      	strb	r3, [r7, #15]
		break;
 80011d8:	e01a      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 7:
		value = '7';
 80011da:	2337      	movs	r3, #55	@ 0x37
 80011dc:	73fb      	strb	r3, [r7, #15]
		break;
 80011de:	e017      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 8:
		value = '8';
 80011e0:	2338      	movs	r3, #56	@ 0x38
 80011e2:	73fb      	strb	r3, [r7, #15]
		break;
 80011e4:	e014      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 9:
		value = '9';
 80011e6:	2339      	movs	r3, #57	@ 0x39
 80011e8:	73fb      	strb	r3, [r7, #15]
		break;
 80011ea:	e011      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 10:
		value = 'A';
 80011ec:	2341      	movs	r3, #65	@ 0x41
 80011ee:	73fb      	strb	r3, [r7, #15]
		break;
 80011f0:	e00e      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 11:
		value = 'B';
 80011f2:	2342      	movs	r3, #66	@ 0x42
 80011f4:	73fb      	strb	r3, [r7, #15]
		break;
 80011f6:	e00b      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 12:
		value = 'C';
 80011f8:	2343      	movs	r3, #67	@ 0x43
 80011fa:	73fb      	strb	r3, [r7, #15]
		break;
 80011fc:	e008      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 13:
		value = 'D';
 80011fe:	2344      	movs	r3, #68	@ 0x44
 8001200:	73fb      	strb	r3, [r7, #15]
		break;
 8001202:	e005      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 14:
		value = 'E';
 8001204:	2345      	movs	r3, #69	@ 0x45
 8001206:	73fb      	strb	r3, [r7, #15]
		break;
 8001208:	e002      	b.n	8001210 <_Z10uint2hex_Bh+0xc0>

	case 15:
		value = 'F';
 800120a:	2346      	movs	r3, #70	@ 0x46
 800120c:	73fb      	strb	r3, [r7, #15]
		break;
 800120e:	bf00      	nop
	}
	return  value;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <_Z41__static_initialization_and_destruction_0ii>:
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10d      	bne.n	800124c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001236:	4293      	cmp	r3, r2
 8001238:	d108      	bne.n	800124c <_Z41__static_initialization_and_destruction_0ii+0x2c>
int limitLoraApp = 5000/superloop;
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001244:	fb93 f3f2 	sdiv	r3, r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	20000399 	.word	0x20000399
 800125c:	200003fc 	.word	0x200003fc

08001260 <_GLOBAL__sub_I_stateContent>:
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
 8001264:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff ffd9 	bl	8001220 <_Z41__static_initialization_and_destruction_0ii>
 800126e:	bd80      	pop	{r7, pc}

08001270 <_ZN12fifoCommands9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoCommands::available(){		// Indica si hay elementos en Fifo
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	return this->bussy;				// Retorna flag
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_ZN12fifoCommands3addEPhh>:

/////////////////
// ADD COMMAND //
/////////////////

void fifoCommands::add( uint8_t *command, uint8_t size ){
 800128a:	b480      	push	{r7}
 800128c:	b087      	sub	sp, #28
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	4613      	mov	r3, r2
 8001296:	71fb      	strb	r3, [r7, #7]
	uint8_t i;															// Crea variable

	if ( this->index < 10 ){											// Si el indice es menor a 10
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800129e:	2b09      	cmp	r3, #9
 80012a0:	d828      	bhi.n	80012f4 <_ZN12fifoCommands3addEPhh+0x6a>
		for( i = 0; i < size ; i++){									// Recorre el largo del comando
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]
 80012a6:	e010      	b.n	80012ca <_ZN12fifoCommands3addEPhh+0x40>
			*(this->rxCommand[this->index] + i)  = *(command + i);		// Copia valores del comando
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	441a      	add	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80012b4:	68f9      	ldr	r1, [r7, #12]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	440b      	add	r3, r1
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	701a      	strb	r2, [r3, #0]
		for( i = 0; i < size ; i++){									// Recorre el largo del comando
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	3301      	adds	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
 80012ca:	7dfa      	ldrb	r2, [r7, #23]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3ea      	bcc.n	80012a8 <_ZN12fifoCommands3addEPhh+0x1e>
		}
		this->index++;													// Suma 1 al indice
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80012d8:	3301      	adds	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		this->full 	= 0;												// Indica que no está full
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		this->bussy	= 1;												// Indica que hay elementos
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
	else{																// Si no
		this->bussy	= 1;												// Indica que hay elementos
		this->full 	= 1;												// Indica que esta full
	}
}
 80012f2:	e007      	b.n	8001304 <_ZN12fifoCommands3addEPhh+0x7a>
		this->bussy	= 1;												// Indica que hay elementos
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		this->full 	= 1;												// Indica que esta full
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_ZN12fifoCommands4readEPhh>:
//////////////////

/*
 * El output de esta operacion es la variable *buffer que a su vez es una entrada
 */
void fifoCommands::read( uint8_t *buffer, uint8_t size ){
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	4613      	mov	r3, r2
 800131c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;																// Crea variable
	uint8_t j;																// Crea variable

	if ( this->index > 0 ){													// Si el indice es mayo a 0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d040      	beq.n	80013aa <_ZN12fifoCommands4readEPhh+0x9a>
		for (i = 0; i < size; i++){											// Recorre largo del comando
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
 800132c:	e00b      	b.n	8001346 <_ZN12fifoCommands4readEPhh+0x36>
			buffer[i]	= this->rxCommand_0[i];								// Copia comando en buffer
 800132e:	7dfa      	ldrb	r2, [r7, #23]
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	440b      	add	r3, r1
 8001336:	68f9      	ldr	r1, [r7, #12]
 8001338:	440a      	add	r2, r1
 800133a:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800133e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; i++){											// Recorre largo del comando
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	3301      	adds	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
 8001346:	7dfa      	ldrb	r2, [r7, #23]
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3ef      	bcc.n	800132e <_ZN12fifoCommands4readEPhh+0x1e>
		}

		for (i = 0; i < this->index; i++){									// Recorre Fifo ocupada
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	e01c      	b.n	800138e <_ZN12fifoCommands4readEPhh+0x7e>
			for (j = 0; j < 10; j++){										// Recorre elementos de comando
 8001354:	2300      	movs	r3, #0
 8001356:	75bb      	strb	r3, [r7, #22]
 8001358:	e013      	b.n	8001382 <_ZN12fifoCommands4readEPhh+0x72>
				*(this->rxCommand[i] + j) = *(this->rxCommand[i + 1] + j);	// Realiza un shift de los comandos en fifo
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	3301      	adds	r3, #1
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	7dbb      	ldrb	r3, [r7, #22]
 8001368:	441a      	add	r2, r3
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	7dbb      	ldrb	r3, [r7, #22]
 8001376:	440b      	add	r3, r1
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++){										// Recorre elementos de comando
 800137c:	7dbb      	ldrb	r3, [r7, #22]
 800137e:	3301      	adds	r3, #1
 8001380:	75bb      	strb	r3, [r7, #22]
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	2b09      	cmp	r3, #9
 8001386:	d9e8      	bls.n	800135a <_ZN12fifoCommands4readEPhh+0x4a>
		for (i = 0; i < this->index; i++){									// Recorre Fifo ocupada
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	3301      	adds	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001394:	7dfa      	ldrb	r2, [r7, #23]
 8001396:	429a      	cmp	r2, r3
 8001398:	d3dc      	bcc.n	8001354 <_ZN12fifoCommands4readEPhh+0x44>
			}
		}
		this->index--;														// Resta 1 en largo de fifo ocupada
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	if ( this->index == 0){													// Si el largo es 0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d103      	bne.n	80013bc <_ZN12fifoCommands4readEPhh+0xac>
		this->bussy	= 0;													// Indica que no está ocupada
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZN8fifoUartC1Ev>:


/********************/

fifoUart::fifoUart(){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	this->finalElement = this->elements;	// Cuando se construye la fifo
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f103 020c 	add.w	r2, r3, #12
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	601a      	str	r2, [r3, #0]
											// El puntero de ultimo elemento
											// Apunta al primer elemento de la cadena
}
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_ZN8fifoUart13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

bool fifoUart::insertElement( uint8_t element ){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]

	if (!(this->bussyFifo)){							// Si no está lleno
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	795b      	ldrb	r3, [r3, #5]
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00d      	beq.n	800141e <_ZN8fifoUart13insertElementEh+0x36>
		*this->finalElement	= element;					// Inserta elemento
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	78fa      	ldrb	r2, [r7, #3]
 8001408:	701a      	strb	r2, [r3, #0]
		this->finalElement = this->finalElement + 1;	// Suma 1 al puntero
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
		this->large++;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	609a      	str	r2, [r3, #8]
	}

	if ( this->finalElement == &this->elements[50] ){	// Si el puntero es el último del array
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	333e      	adds	r3, #62	@ 0x3e
 8001426:	429a      	cmp	r2, r3
 8001428:	d103      	bne.n	8001432 <_ZN8fifoUart13insertElementEh+0x4a>
		this->bussyFifo	= 1;							// Indica que se lleno el buffer
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	715a      	strb	r2, [r3, #5]
 8001430:	e002      	b.n	8001438 <_ZN8fifoUart13insertElementEh+0x50>
	}
	else{												// Si no
		this->bussyFifo	= 0;							// Indica que no se ha llenado
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	715a      	strb	r2, [r3, #5]
	}

	return !(this->bussyFifo);							// 1: Se insertó correctamente
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	795b      	ldrb	r3, [r3, #5]
 800143c:	f083 0301 	eor.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
														// 0: No se inserto por Fifo llena
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN8fifoUart11readElementEv>:

//////////////////
// READ ELEMENT //
//////////////////

uint8_t fifoUart::readElement(){
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]

	uint8_t elementy	= this->elements[0];							// Copia primer valor en fifo
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7b1b      	ldrb	r3, [r3, #12]
 800145a:	72fb      	strb	r3, [r7, #11]

	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	330c      	adds	r3, #12
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e006      	b.n	8001472 <_ZN8fifoUart11readElementEv+0x24>
		*j	= *(j+1);													// Copia el elemento siguiente
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	785a      	ldrb	r2, [r3, #1]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	701a      	strb	r2, [r3, #0]
	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3301      	adds	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d3f3      	bcc.n	8001464 <_ZN8fifoUart11readElementEv+0x16>
	}

	*this->finalElement = 0;											// Rellena el último valor con 0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]

	if (this->finalElement != this->elements){							// Si el último elemento no es el primero
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	330c      	adds	r3, #12
 800148c:	429a      	cmp	r2, r3
 800148e:	d00d      	beq.n	80014ac <_ZN8fifoUart11readElementEv+0x5e>
		this->finalElement	= this->finalElement - 1;					//  Resta una posición al elemento final
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	601a      	str	r2, [r3, #0]
		this->emptyFifo	= 0;											// Indica que fifo no esta vacia
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	711a      	strb	r2, [r3, #4]
		this->large--;													// Quita 1 al largo
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	e002      	b.n	80014b2 <_ZN8fifoUart11readElementEv+0x64>
	}
	else{																// Si no
		this->emptyFifo	= 1;											// Indica que fifo esta vacia
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	711a      	strb	r2, [r3, #4]
	}

	return elementy;													// Retorna elementos a leer
 80014b2:	7afb      	ldrb	r3, [r7, #11]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_ZN8fifoUart9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoUart::available(){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if (this->finalElement == &this->elements[0]){		// Si el puntero está apuntando
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	330c      	adds	r3, #12
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d103      	bne.n	80014dc <_ZN8fifoUart9availableEv+0x1c>
														// al primer elemento de la fifo
		this->emptyFifo	= 1;							// Indica que la fifo esta vacia
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	711a      	strb	r2, [r3, #4]
 80014da:	e002      	b.n	80014e2 <_ZN8fifoUart9availableEv+0x22>
	}
	else{												// Sino
		this->emptyFifo	= 0;							// Indica que la fifo contiene elementos
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	711a      	strb	r2, [r3, #4]
	}
	return !(this->emptyFifo);							// 1: Elementos disponibles
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	791b      	ldrb	r3, [r3, #4]
 80014e6:	f083 0301 	eor.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
}														// 0: Sin elementos
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_ZN8gpsInputC1Ev>:

///////////////////////////
// CONSTRUCTOR GPS INPUT //
///////////////////////////

gpsInput::gpsInput(){
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
};
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_ZN8gpsInput11insertValueEh>:

//////////////////
// INSERT VALUE //
//////////////////

void gpsInput::insertValue(uint8_t symbol){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]

	uint8_t *state	= &this->stateInsert;	// El estado apunta al registro del objeto
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3356      	adds	r3, #86	@ 0x56
 8001520:	60fb      	str	r3, [r7, #12]

	this->lapsCounter++;			// Aumenta una vuelta
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	60da      	str	r2, [r3, #12]

	switch ( *state ){
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b3c      	cmp	r3, #60	@ 0x3c
 8001532:	f200 829e 	bhi.w	8001a72 <_ZN8gpsInput11insertValueEh+0x562>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <_ZN8gpsInput11insertValueEh+0x2c>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	08001631 	.word	0x08001631
 8001540:	0800165b 	.word	0x0800165b
 8001544:	08001671 	.word	0x08001671
 8001548:	08001687 	.word	0x08001687
 800154c:	080016b9 	.word	0x080016b9
 8001550:	080016cf 	.word	0x080016cf
 8001554:	080016e5 	.word	0x080016e5
 8001558:	0800171f 	.word	0x0800171f
 800155c:	0800177d 	.word	0x0800177d
 8001560:	0800179d 	.word	0x0800179d
 8001564:	080017f7 	.word	0x080017f7
 8001568:	08001813 	.word	0x08001813
 800156c:	0800186d 	.word	0x0800186d
 8001570:	08001889 	.word	0x08001889
 8001574:	080018e3 	.word	0x080018e3
 8001578:	0800193d 	.word	0x0800193d
 800157c:	08001a73 	.word	0x08001a73
 8001580:	08001a73 	.word	0x08001a73
 8001584:	08001a73 	.word	0x08001a73
 8001588:	08001a73 	.word	0x08001a73
 800158c:	08001a73 	.word	0x08001a73
 8001590:	08001a73 	.word	0x08001a73
 8001594:	08001a73 	.word	0x08001a73
 8001598:	08001a73 	.word	0x08001a73
 800159c:	08001a73 	.word	0x08001a73
 80015a0:	08001a73 	.word	0x08001a73
 80015a4:	08001a73 	.word	0x08001a73
 80015a8:	08001a73 	.word	0x08001a73
 80015ac:	08001a73 	.word	0x08001a73
 80015b0:	08001a73 	.word	0x08001a73
 80015b4:	08001a73 	.word	0x08001a73
 80015b8:	08001a73 	.word	0x08001a73
 80015bc:	08001a73 	.word	0x08001a73
 80015c0:	08001a73 	.word	0x08001a73
 80015c4:	08001a73 	.word	0x08001a73
 80015c8:	08001a73 	.word	0x08001a73
 80015cc:	08001a73 	.word	0x08001a73
 80015d0:	08001a73 	.word	0x08001a73
 80015d4:	08001a73 	.word	0x08001a73
 80015d8:	08001a73 	.word	0x08001a73
 80015dc:	08001a73 	.word	0x08001a73
 80015e0:	08001a73 	.word	0x08001a73
 80015e4:	08001a73 	.word	0x08001a73
 80015e8:	08001a73 	.word	0x08001a73
 80015ec:	08001a73 	.word	0x08001a73
 80015f0:	08001a73 	.word	0x08001a73
 80015f4:	08001a73 	.word	0x08001a73
 80015f8:	08001a73 	.word	0x08001a73
 80015fc:	08001a73 	.word	0x08001a73
 8001600:	08001a73 	.word	0x08001a73
 8001604:	08001975 	.word	0x08001975
 8001608:	0800198b 	.word	0x0800198b
 800160c:	080019a1 	.word	0x080019a1
 8001610:	080019b1 	.word	0x080019b1
 8001614:	080019e3 	.word	0x080019e3
 8001618:	08001a07 	.word	0x08001a07
 800161c:	08001a17 	.word	0x08001a17
 8001620:	08001a27 	.word	0x08001a27
 8001624:	08001a3d 	.word	0x08001a3d
 8001628:	08001a4d 	.word	0x08001a4d
 800162c:	08001a63 	.word	0x08001a63

		///////////////////////
		// S0 - FIRST SYMBOL //
		///////////////////////
		case 0:
			this->flagNew	= 0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	749a      	strb	r2, [r3, #18]

			if ( symbol == '$' ){	// Si el simbolo es $
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	2b24      	cmp	r3, #36	@ 0x24
 800163a:	d103      	bne.n	8001644 <_ZN8gpsInput11insertValueEh+0x134>
				*state	=	1;		// Pasa a S1
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
				*state	= 2;
			}
			else{					// Si no
				*state	= 	0;		// Se queda en S0
			}
		break;
 8001642:	e21a      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if( symbol == 'G' ){
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	2b47      	cmp	r3, #71	@ 0x47
 8001648:	d103      	bne.n	8001652 <_ZN8gpsInput11insertValueEh+0x142>
				*state	= 2;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]
		break;
 8001650:	e213      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 	0;		// Se queda en S0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
		break;
 8001658:	e20f      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		// S1 - SECOND SYMBOL //
		////////////////////////

		case 1:

			if ( symbol ==  'G' ){		// Si el simbolo es G
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	2b47      	cmp	r3, #71	@ 0x47
 800165e:	d103      	bne.n	8001668 <_ZN8gpsInput11insertValueEh+0x158>
				*state	= 2;			// Pasa a S2
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2202      	movs	r2, #2
 8001664:	701a      	strb	r2, [r3, #0]
			}
			else{						// Si no
				*state	= 0;			// Vuelve a S0
			}
			break;
 8001666:	e208      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a S0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
			break;
 800166e:	e204      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		// S2 - THIRD SYMBOL //
		///////////////////////

		case 2:

			if ( symbol	== 'P'){		// Si el simbolo es P
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b50      	cmp	r3, #80	@ 0x50
 8001674:	d103      	bne.n	800167e <_ZN8gpsInput11insertValueEh+0x16e>
				*state	= 3;			// Pasa a S3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2203      	movs	r2, #3
 800167a:	701a      	strb	r2, [r3, #0]
			}
			else{						// Si no
				*state	= 0;			// Vuelve a s0
			}
			break;
 800167c:	e1fd      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a s0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
			break;
 8001684:	e1f9      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S3 - FOURTH SYMBOL //
		////////////////////////

		case 3:
			if ( symbol == 'R'){		// Si el simbolo es R
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	2b52      	cmp	r3, #82	@ 0x52
 800168a:	d103      	bne.n	8001694 <_ZN8gpsInput11insertValueEh+0x184>
				*state	= 4;			// Pasa a S4
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2204      	movs	r2, #4
 8001690:	701a      	strb	r2, [r3, #0]
				*state = 53;			// Pasa a S53 - DETECTA GPGSV
			}
			else{						// Si no
				*state	= 0;			// Vuelve a S0
			}
			break;
 8001692:	e1f2      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( symbol == 'V'){	// Si el simbolo es T
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	2b56      	cmp	r3, #86	@ 0x56
 8001698:	d103      	bne.n	80016a2 <_ZN8gpsInput11insertValueEh+0x192>
				*state	= 50;			// Pasa a S50 - DETECTA SI ES MODO GPTVG
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2232      	movs	r2, #50	@ 0x32
 800169e:	701a      	strb	r2, [r3, #0]
			break;
 80016a0:	e1eb      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( symbol == 'G'){	// Si simboolo es G
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	2b47      	cmp	r3, #71	@ 0x47
 80016a6:	d103      	bne.n	80016b0 <_ZN8gpsInput11insertValueEh+0x1a0>
				*state = 53;			// Pasa a S53 - DETECTA GPGSV
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2235      	movs	r2, #53	@ 0x35
 80016ac:	701a      	strb	r2, [r3, #0]
			break;
 80016ae:	e1e4      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a S0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
			break;
 80016b6:	e1e0      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		// S4 - FIFTH SYMBOL //
		///////////////////////

		case 4:

			if ( symbol == 'M'){	// Si el simbolo es M
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b4d      	cmp	r3, #77	@ 0x4d
 80016bc:	d103      	bne.n	80016c6 <_ZN8gpsInput11insertValueEh+0x1b6>
				*state	= 5;		// Pasa a S5
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2205      	movs	r2, #5
 80016c2:	701a      	strb	r2, [r3, #0]
			}
			else{					// Si no
				*state	= 0;		// Vieñve a S0
			}
			break;
 80016c4:	e1d9      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;		// Vieñve a S0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
			break;
 80016cc:	e1d5      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		// S5 - SIXTH SYMBOL //
		///////////////////////

		case 5:

			if ( symbol == 'C'){	// Si el simbolo es M
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	2b43      	cmp	r3, #67	@ 0x43
 80016d2:	d103      	bne.n	80016dc <_ZN8gpsInput11insertValueEh+0x1cc>
				*state	= 6;		// Pasa a S6
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2206      	movs	r2, #6
 80016d8:	701a      	strb	r2, [r3, #0]
			}
			else{					// Si no
				*state	= 0;		// Vieñve a S0
			}
			break;
 80016da:	e1ce      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;		// Vieñve a S0
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
			break;
 80016e2:	e1ca      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		///////////////////////
		// S6 - GPRMC PACKET //
		///////////////////////

		case 6:
			this->lapsBetween	= this->lapsCounter;	//Guarda valor de contador
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	609a      	str	r2, [r3, #8]
			this->lapsCounter	= 0;					// Reinicia contador
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
			this->flagNew		= 1;					// Indica que llego mensaje
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	749a      	strb	r2, [r3, #18]

			this->setMode(1);							// Inserta el valor de mensaje tipo GPRMC
 80016f8:	2101      	movs	r1, #1
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f9c2 	bl	8001a84 <_ZN8gpsInput7setModeEh>
			this->countGprmc	= 0;					// Reinicia el contador que guarda elementos
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

			if ( symbol == ','){						// Si el simbolo es , y confirma el formato del paquete
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	2b2c      	cmp	r3, #44	@ 0x2c
 800170c:	d103      	bne.n	8001716 <_ZN8gpsInput11insertValueEh+0x206>
				*state	= 7;							// Pasa a S7
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2207      	movs	r2, #7
 8001712:	701a      	strb	r2, [r3, #0]
			}
			else{										// Si no
				*state	= 0;							// Vieñve a S0
			}
			break;
 8001714:	e1b1      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;							// Vieñve a S0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			break;
 800171c:	e1ad      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S7 - SAVE TIME //
		////////////////////

		case 7:
			this->flagNew		= 0;				// Indica que llego mensaje
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	749a      	strb	r2, [r3, #18]

			if ( symbol == ',' ){					// Si el simbolo es ,
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b2c      	cmp	r3, #44	@ 0x2c
 8001728:	d107      	bne.n	800173a <_ZN8gpsInput11insertValueEh+0x22a>
				this->countGprmc	= 0;			// Reinicia contador
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 8;						// Pasa a S8
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2208      	movs	r2, #8
 8001736:	701a      	strb	r2, [r3, #0]
				this->time[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;						// Suma uno al indice
				*state	= 7;							// Se queda en S7
			}

			break;
 8001738:	e19f      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001740:	2b09      	cmp	r3, #9
 8001742:	d907      	bls.n	8001754 <_ZN8gpsInput11insertValueEh+0x244>
				this->countGprmc	= 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
			break;
 8001752:	e192      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->time[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	751a      	strb	r2, [r3, #20]
				this->countGprmc++;						// Suma uno al indice
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 7;							// Se queda en S7
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2207      	movs	r2, #7
 8001778:	701a      	strb	r2, [r3, #0]
			break;
 800177a:	e17e      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			 *
			 * 	,A,
			 *
			 * 	Fija VALID hasta que encuentre ,
			 */
			if( symbol == ',' ){			// Si es ,
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001780:	d103      	bne.n	800178a <_ZN8gpsInput11insertValueEh+0x27a>
				*state	= 9;				// Pasa a S9
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2209      	movs	r2, #9
 8001786:	701a      	strb	r2, [r3, #0]
			}
			else{							// Si no
				this->setValid(symbol);		// Fija simbolo de valido
				*state	= 8;				// Se queda en S8
			}
			break;
 8001788:	e177      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->setValid(symbol);		// Fija simbolo de valido
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fa28 	bl	8001be4 <_ZN8gpsInput8setValidEc>
				*state	= 8;				// Se queda en S8
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2208      	movs	r2, #8
 8001798:	701a      	strb	r2, [r3, #0]
			break;
 800179a:	e16e      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S9 - SAVE LONGITUD //
		////////////////////////

		case 9:
			if ( symbol == ',' ){							// Si es ,
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2b2c      	cmp	r3, #44	@ 0x2c
 80017a0:	d107      	bne.n	80017b2 <_ZN8gpsInput11insertValueEh+0x2a2>
				this->countGprmc	= 0;					// Reinicia contador
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state 	= 10;								// Pasa a S10
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	220a      	movs	r2, #10
 80017ae:	701a      	strb	r2, [r3, #0]
			else{											// Si no
				this->latitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 9;								// Se queda en S9
			}
			break;
 80017b0:	e163      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d907      	bls.n	80017cc <_ZN8gpsInput11insertValueEh+0x2bc>
				this->countGprmc	= 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
			break;
 80017ca:	e156      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->latitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				this->countGprmc++;							// Suma uno al indice
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 9;								// Se queda en S9
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2209      	movs	r2, #9
 80017f2:	701a      	strb	r2, [r3, #0]
			break;
 80017f4:	e141      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		///////////////////////////////////
		// S10 - SAVE LONGITUD DIRECTION //
		///////////////////////////////////

		case 10:
			if ( symbol == ',' ){			// Si es ,
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	2b2c      	cmp	r3, #44	@ 0x2c
 80017fa:	d103      	bne.n	8001804 <_ZN8gpsInput11insertValueEh+0x2f4>
				*state	= 11;				// Pasa a S11
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	220b      	movs	r2, #11
 8001800:	701a      	strb	r2, [r3, #0]
			}
			else{							// Si no
				this->latDirect	= symbol;	// Guarda el simbolo
				*state	= 10;				// Pasa a S10
			}
			break;
 8001802:	e13a      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->latDirect	= symbol;	// Guarda el simbolo
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	77da      	strb	r2, [r3, #31]
				*state	= 10;				// Pasa a S10
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	220a      	movs	r2, #10
 800180e:	701a      	strb	r2, [r3, #0]
			break;
 8001810:	e133      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S11 - SAVE LATITUD //
		////////////////////////

		case 11:
			if ( symbol == ',' ){							// Si el simbolo es ,
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	2b2c      	cmp	r3, #44	@ 0x2c
 8001816:	d107      	bne.n	8001828 <_ZN8gpsInput11insertValueEh+0x318>
				this->countGprmc	= 0;					// Reinicia contador
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 12;								// Pasa a S12
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	220c      	movs	r2, #12
 8001824:	701a      	strb	r2, [r3, #0]
			else{											// Si no
				this->longitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 11;								// Queda en S11
			}
			break;
 8001826:	e128      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800182e:	2b09      	cmp	r3, #9
 8001830:	d907      	bls.n	8001842 <_ZN8gpsInput11insertValueEh+0x332>
				this->countGprmc	= 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
			break;
 8001840:	e11b      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->longitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				this->countGprmc++;							// Suma uno al indice
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800185a:	3301      	adds	r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 11;								// Queda en S11
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	220b      	movs	r2, #11
 8001868:	701a      	strb	r2, [r3, #0]
			break;
 800186a:	e106      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		//////////////////////////////////
		// S12 - SAVE DIRECTION LATITUD //
		//////////////////////////////////

		case 12:
			if ( symbol == ',' ){
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001870:	d103      	bne.n	800187a <_ZN8gpsInput11insertValueEh+0x36a>
				*state = 13;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	220d      	movs	r2, #13
 8001876:	701a      	strb	r2, [r3, #0]

			else{
				this->longDirect	= symbol;
				*state = 12;
			}
			break;
 8001878:	e0ff      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->longDirect	= symbol;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	779a      	strb	r2, [r3, #30]
				*state = 12;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	220c      	movs	r2, #12
 8001884:	701a      	strb	r2, [r3, #0]
			break;
 8001886:	e0f8      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S13 - VELOCITY //
		////////////////////

		case 13:
			if ( symbol == ',' ){							//
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	2b2c      	cmp	r3, #44	@ 0x2c
 800188c:	d107      	bne.n	800189e <_ZN8gpsInput11insertValueEh+0x38e>
				this->countGprmc	= 0;					// Reinicia contador
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 14;								//
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	220e      	movs	r2, #14
 800189a:	701a      	strb	r2, [r3, #0]
			else{											//
				this->velocity[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state 	= 13;								//
			}
			break;
 800189c:	e0ed      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018a4:	2b09      	cmp	r3, #9
 80018a6:	d907      	bls.n	80018b8 <_ZN8gpsInput11insertValueEh+0x3a8>
				this->countGprmc	= 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
			break;
 80018b6:	e0e0      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->velocity[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	f883 2020 	strb.w	r2, [r3, #32]
				this->countGprmc++;							// Suma uno al indice
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state 	= 13;								//
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	220d      	movs	r2, #13
 80018de:	701a      	strb	r2, [r3, #0]
			break;
 80018e0:	e0cb      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////
		// S14 - ANGLE //
		/////////////////

		case 14:
			if ( symbol == ',' ){							//
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80018e6:	d107      	bne.n	80018f8 <_ZN8gpsInput11insertValueEh+0x3e8>
				this->countGprmc	= 0;					// Reinicia contador
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 15;								//
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	220f      	movs	r2, #15
 80018f4:	701a      	strb	r2, [r3, #0]
			else{											//
				this->angle[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 14;								//
			}
			break;
 80018f6:	e0c0      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018fe:	2b09      	cmp	r3, #9
 8001900:	d907      	bls.n	8001912 <_ZN8gpsInput11insertValueEh+0x402>
				this->countGprmc	= 0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
			break;
 8001910:	e0b3      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->angle[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				this->countGprmc++;							// Suma uno al indice
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800192a:	3301      	adds	r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 14;								//
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	220e      	movs	r2, #14
 8001938:	701a      	strb	r2, [r3, #0]
			break;
 800193a:	e09e      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////
		// S15 - DATE //
		////////////////

		case 15:
			if ( symbol == ','){						// Si es una ,
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001940:	d103      	bne.n	800194a <_ZN8gpsInput11insertValueEh+0x43a>
				*state	= 0;							// Cierra la maquina
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
			else{										// Si no
				this->date[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;						// Suma uno al indice
				*state	= 15;
			}
			break;
 8001948:	e097      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				this->date[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				this->countGprmc++;						// Suma uno al indice
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001962:	3301      	adds	r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 15;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	220f      	movs	r2, #15
 8001970:	701a      	strb	r2, [r3, #0]
			break;
 8001972:	e082      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S50 - DETECT V //
		////////////////////

		case 50:
			if (symbol == 'T'){	// Si detecta V
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	2b54      	cmp	r3, #84	@ 0x54
 8001978:	d103      	bne.n	8001982 <_ZN8gpsInput11insertValueEh+0x472>
				*state	= 51;	// Pasa a S51
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2233      	movs	r2, #51	@ 0x33
 800197e:	701a      	strb	r2, [r3, #0]
			}
			else{				// Si no
				*state	= 0;	// Vuelve a S0
			}
			break;
 8001980:	e07b      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;	// Vuelve a S0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
			break;
 8001988:	e077      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////////
		// S51	- DETECT G //
		/////////////////////

		case 51:
			if (symbol == 'G'){	// Si detecta G
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	2b47      	cmp	r3, #71	@ 0x47
 800198e:	d103      	bne.n	8001998 <_ZN8gpsInput11insertValueEh+0x488>
				*state	= 52;	// Pasa a S51
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2234      	movs	r2, #52	@ 0x34
 8001994:	701a      	strb	r2, [r3, #0]
			}
			else{				// Si no
				*state	= 0;	// Vuelve a S0
				break;
			}
			break;
 8001996:	e070      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;	// Vuelve a S0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
				break;
 800199e:	e06c      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////////////////////
		// S52 - DETECT A GPTVG PACKET //
		/////////////////////////////////

		case 52:
			this->setMode(2);
 80019a0:	2102      	movs	r1, #2
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f86e 	bl	8001a84 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
			break;
 80019ae:	e064      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		// S53 - DETECT A S //
		//////////////////////

		case 53:

			if (symbol == 'G'){
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	2b47      	cmp	r3, #71	@ 0x47
 80019b4:	d103      	bne.n	80019be <_ZN8gpsInput11insertValueEh+0x4ae>
				*state = 54;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2236      	movs	r2, #54	@ 0x36
 80019ba:	701a      	strb	r2, [r3, #0]
				*state	= 59;
			}
			else{
				*state = 0;
			}
			break;
 80019bc:	e05d      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'L'){
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	2b4c      	cmp	r3, #76	@ 0x4c
 80019c2:	d103      	bne.n	80019cc <_ZN8gpsInput11insertValueEh+0x4bc>
				*state	= 57;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2239      	movs	r2, #57	@ 0x39
 80019c8:	701a      	strb	r2, [r3, #0]
			break;
 80019ca:	e056      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'S'){
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	2b53      	cmp	r3, #83	@ 0x53
 80019d0:	d103      	bne.n	80019da <_ZN8gpsInput11insertValueEh+0x4ca>
				*state	= 59;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	223b      	movs	r2, #59	@ 0x3b
 80019d6:	701a      	strb	r2, [r3, #0]
			break;
 80019d8:	e04f      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state = 0;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
			break;
 80019e0:	e04b      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		//////////////////////
		// S54 - DETECT A V //
		//////////////////////

		case 54:
			if (symbol == 'A'){
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	2b41      	cmp	r3, #65	@ 0x41
 80019e6:	d103      	bne.n	80019f0 <_ZN8gpsInput11insertValueEh+0x4e0>
				*state	= 55;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2237      	movs	r2, #55	@ 0x37
 80019ec:	701a      	strb	r2, [r3, #0]
				*state = 56;
			}
			else{
				*state	= 0;
			}
			break;
 80019ee:	e044      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'V'){
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	2b56      	cmp	r3, #86	@ 0x56
 80019f4:	d103      	bne.n	80019fe <_ZN8gpsInput11insertValueEh+0x4ee>
				*state = 56;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2238      	movs	r2, #56	@ 0x38
 80019fa:	701a      	strb	r2, [r3, #0]
			break;
 80019fc:	e03d      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
			break;
 8001a04:	e039      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S55 - DETECT GPGSA //
		////////////////////////

		case 55:
			this->setMode(32);
 8001a06:	2120      	movs	r1, #32
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f83b 	bl	8001a84 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
			break;
 8001a14:	e031      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S56 - DETECT GPGSV //
		////////////////////////

		case 56:
			this->setMode(4);
 8001a16:	2104      	movs	r1, #4
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f833 	bl	8001a84 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			break;
 8001a24:	e029      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S57 - DETECT L //
		////////////////////

		case 57:
			if (symbol == 'L'){
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	2b4c      	cmp	r3, #76	@ 0x4c
 8001a2a:	d103      	bne.n	8001a34 <_ZN8gpsInput11insertValueEh+0x524>
				*state	= 58;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	223a      	movs	r2, #58	@ 0x3a
 8001a30:	701a      	strb	r2, [r3, #0]
			}
			else{
				*state	= 0;
			}
			break;
 8001a32:	e022      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
			break;
 8001a3a:	e01e      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S58 - DETECT GPGLL //
		////////////////////////

		case 58:
			this->setMode(8);
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f820 	bl	8001a84 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
			break;
 8001a4a:	e016      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S59 - DETECT A //
		////////////////////

		case 59:
			if (symbol == 'V'){
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	2b56      	cmp	r3, #86	@ 0x56
 8001a50:	d103      	bne.n	8001a5a <_ZN8gpsInput11insertValueEh+0x54a>
				*state	= 60;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	223c      	movs	r2, #60	@ 0x3c
 8001a56:	701a      	strb	r2, [r3, #0]
			}
			else{
				*state	= 0;
			}
			break;
 8001a58:	e00f      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
			break;
 8001a60:	e00b      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S60 - DETECT GPGGA //
		////////////////////////

		case 60:
			this->setMode(16);
 8001a62:	2110      	movs	r1, #16
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f80d 	bl	8001a84 <_ZN8gpsInput7setModeEh>
			*state = 0;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
			break;
 8001a70:	e003      	b.n	8001a7a <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////
		// DEFAULT //
		/////////////

		default:
			*state	= 0;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
			break;
 8001a78:	bf00      	nop
	}
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop

08001a84 <_ZN8gpsInput7setModeEh>:

//////////////
// SET MODE //
//////////////

void gpsInput::setMode(uint8_t mode){
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
	this->limitMsgModes	= 15;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	220f      	movs	r2, #15
 8001a94:	74da      	strb	r2, [r3, #19]
	uint8_t output	= 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
	uint8_t pot2[6]	= {1, 2, 4, 8, 16, 32};
 8001a9a:	4a51      	ldr	r2, [pc, #324]	@ (8001be0 <_ZN8gpsInput7setModeEh+0x15c>)
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa4:	6018      	str	r0, [r3, #0]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	8019      	strh	r1, [r3, #0]

	switch (mode){
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	2b1f      	cmp	r3, #31
 8001ab0:	d866      	bhi.n	8001b80 <_ZN8gpsInput7setModeEh+0xfc>
 8001ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab8 <_ZN8gpsInput7setModeEh+0x34>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001b39 	.word	0x08001b39
 8001abc:	08001b45 	.word	0x08001b45
 8001ac0:	08001b81 	.word	0x08001b81
 8001ac4:	08001b51 	.word	0x08001b51
 8001ac8:	08001b81 	.word	0x08001b81
 8001acc:	08001b81 	.word	0x08001b81
 8001ad0:	08001b81 	.word	0x08001b81
 8001ad4:	08001b5d 	.word	0x08001b5d
 8001ad8:	08001b81 	.word	0x08001b81
 8001adc:	08001b81 	.word	0x08001b81
 8001ae0:	08001b81 	.word	0x08001b81
 8001ae4:	08001b81 	.word	0x08001b81
 8001ae8:	08001b81 	.word	0x08001b81
 8001aec:	08001b81 	.word	0x08001b81
 8001af0:	08001b81 	.word	0x08001b81
 8001af4:	08001b69 	.word	0x08001b69
 8001af8:	08001b81 	.word	0x08001b81
 8001afc:	08001b81 	.word	0x08001b81
 8001b00:	08001b81 	.word	0x08001b81
 8001b04:	08001b81 	.word	0x08001b81
 8001b08:	08001b81 	.word	0x08001b81
 8001b0c:	08001b81 	.word	0x08001b81
 8001b10:	08001b81 	.word	0x08001b81
 8001b14:	08001b81 	.word	0x08001b81
 8001b18:	08001b81 	.word	0x08001b81
 8001b1c:	08001b81 	.word	0x08001b81
 8001b20:	08001b81 	.word	0x08001b81
 8001b24:	08001b81 	.word	0x08001b81
 8001b28:	08001b81 	.word	0x08001b81
 8001b2c:	08001b81 	.word	0x08001b81
 8001b30:	08001b81 	.word	0x08001b81
 8001b34:	08001b75 	.word	0x08001b75

	///////////
	// GPRMC //
	///////////
	case 1:
		this->countModes[0]	= this->limitMsgModes;	// Asigna valor maximo
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7cda      	ldrb	r2, [r3, #19]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		break;
 8001b42:	e01e      	b.n	8001b82 <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPTVG //
	///////////
	case 2:
		this->countModes[1]	= this->limitMsgModes;	// Asigna valor maximo
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7cda      	ldrb	r2, [r3, #19]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		break;
 8001b4e:	e018      	b.n	8001b82 <_ZN8gpsInput7setModeEh+0xfe>
	///////////
	// GPGGV //
	///////////

	case 4:
		this->countModes[2]	= this->limitMsgModes;	// Asigna valor maximo
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7cda      	ldrb	r2, [r3, #19]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		break;
 8001b5a:	e012      	b.n	8001b82 <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGLL //
	///////////
	case 8:
		this->countModes[3]	= this->limitMsgModes;	// Asigna valor maximo
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7cda      	ldrb	r2, [r3, #19]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		break;
 8001b66:	e00c      	b.n	8001b82 <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGSV //
	///////////
	case 16:
		this->countModes[4]	= this->limitMsgModes;	// Asigna valor maximo
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7cda      	ldrb	r2, [r3, #19]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		break;
 8001b72:	e006      	b.n	8001b82 <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGGA //
	///////////
	case 32:
		this->countModes[5]	= this->limitMsgModes;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7cda      	ldrb	r2, [r3, #19]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		break;
 8001b7e:	e000      	b.n	8001b82 <_ZN8gpsInput7setModeEh+0xfe>

	default:
		break;
 8001b80:	bf00      	nop
	}

	for (int i = 0; i<6; i++){			// Recorre array de count
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	e01e      	b.n	8001bc6 <_ZN8gpsInput7setModeEh+0x142>
		if (this->countModes[i] > 0){	// Si el contador >0
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	333c      	adds	r3, #60	@ 0x3c
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d014      	beq.n	8001bc0 <_ZN8gpsInput7setModeEh+0x13c>
			this->countModes[i]--;		// Resta 1
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	333c      	adds	r3, #60	@ 0x3c
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b2d9      	uxtb	r1, r3
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4413      	add	r3, r2
 8001baa:	333c      	adds	r3, #60	@ 0x3c
 8001bac:	460a      	mov	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
			output = output + pot2[i];		// Suma un exponente de 2
 8001bb0:	f107 0208 	add.w	r2, r7, #8
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i<6; i++){			// Recorre array de count
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	dddd      	ble.n	8001b88 <_ZN8gpsInput7setModeEh+0x104>
		}								// Genera numero unico
		else{							// Si no
			//this->countModes[i]	= 0;	// Asigna 0
		}
	}
	this->mode	= output;	// Asigna modo
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7dfa      	ldrb	r2, [r7, #23]
 8001bd0:	711a      	strb	r2, [r3, #4]
}
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	0800d750 	.word	0x0800d750

08001be4 <_ZN8gpsInput8setValidEc>:

///////////////
// SET VALID //
///////////////

void gpsInput::setValid(char valid){
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
	this->flagValid	= valid;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	741a      	strb	r2, [r3, #16]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_ZN8gpsInput8getValidEv>:

///////////////////////
// GET VALID MESSAGE //
///////////////////////

bool gpsInput::getValid(){
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	bool flag	= 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]

	if (this->flagValid == 'A'){
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7c1b      	ldrb	r3, [r3, #16]
 8001c12:	2b41      	cmp	r3, #65	@ 0x41
 8001c14:	d102      	bne.n	8001c1c <_ZN8gpsInput8getValidEv+0x1a>
		flag = 1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e001      	b.n	8001c20 <_ZN8gpsInput8getValidEv+0x1e>
	}
	else{
		flag = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
	}

	return flag;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_ZN8gpsInput13getNewMessageEv>:

//////////////////////////
// GET NEW MESSAGE FLAG //
//////////////////////////

bool gpsInput::getNewMessage(){
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	return	this->flagNew;	// Guarda el valor de flagNew
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7c9b      	ldrb	r3, [r3, #18]

}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
	hwBoton();
 8001c4a:	f000 fa55 	bl	80020f8 <_Z7hwBotonv>
	hwSht31();
 8001c4e:	f000 f8fb 	bl	8001e48 <_Z7hwSht31v>
	hwAds1115();
 8001c52:	f000 f829 	bl	8001ca8 <_Z9hwAds1115v>
	hwAnalog();
 8001c56:	f000 fad7 	bl	8002208 <_Z8hwAnalogv>
	hwEEPROM();
 8001c5a:	f000 fb35 	bl	80022c8 <_Z8hwEEPROMv>
	hwGpsIn();
 8001c5e:	f000 faad 	bl	80021bc <_Z7hwGpsInv>
	hwLoraIn();
 8001c62:	f000 f803 	bl	8001c6c <_Z8hwLoraInv>
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <_Z8hwLoraInv>:
 * Traspaso de de loraBus a loraInput
 *
 * loraInput detecta respuesta dentro de bytes entrantes
 */

void hwLoraIn(){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	if ( loraIn.available() ){					// Si hay elementos disponibles en FIFO desde DMA
 8001c70:	480a      	ldr	r0, [pc, #40]	@ (8001c9c <_Z8hwLoraInv+0x30>)
 8001c72:	f7ff fc25 	bl	80014c0 <_ZN8fifoUart9availableEv>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00c      	beq.n	8001c96 <_Z8hwLoraInv+0x2a>
		loraBus	= loraIn.readElement();			// Guarda el valor
 8001c7c:	4807      	ldr	r0, [pc, #28]	@ (8001c9c <_Z8hwLoraInv+0x30>)
 8001c7e:	f7ff fbe6 	bl	800144e <_ZN8fifoUart11readElementEv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <_Z8hwLoraInv+0x34>)
 8001c88:	701a      	strb	r2, [r3, #0]
		loraInput.insertElement( loraBus );		// Inserta en Lora Input
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <_Z8hwLoraInv+0x34>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <_Z8hwLoraInv+0x38>)
 8001c92:	f001 fe79 	bl	8003988 <_ZN9loraInput13insertElementEh>
	}
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000ae8 	.word	0x20000ae8
 8001ca0:	200004cc 	.word	0x200004cc
 8001ca4:	20000b28 	.word	0x20000b28

08001ca8 <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 8001cac:	4b57      	ldr	r3, [pc, #348]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	f200 80a8 	bhi.w	8001e06 <_Z9hwAds1115v+0x15e>
 8001cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cbc <_Z9hwAds1115v+0x14>)
 8001cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cbc:	08001cd5 	.word	0x08001cd5
 8001cc0:	08001d09 	.word	0x08001d09
 8001cc4:	08001d3f 	.word	0x08001d3f
 8001cc8:	08001d71 	.word	0x08001d71
 8001ccc:	08001d97 	.word	0x08001d97
 8001cd0:	08001deb 	.word	0x08001deb
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 8001cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8001e10 <_Z9hwAds1115v+0x168>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a4d      	ldr	r2, [pc, #308]	@ (8001e10 <_Z9hwAds1115v+0x168>)
 8001cdc:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 8001cde:	4b4c      	ldr	r3, [pc, #304]	@ (8001e10 <_Z9hwAds1115v+0x168>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8001e14 <_Z9hwAds1115v+0x16c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	db0a      	blt.n	8001d00 <_Z9hwAds1115v+0x58>
 8001cea:	4b4b      	ldr	r3, [pc, #300]	@ (8001e18 <_Z9hwAds1115v+0x170>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 8001cf2:	4b49      	ldr	r3, [pc, #292]	@ (8001e18 <_Z9hwAds1115v+0x170>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 8001cf8:	4b44      	ldr	r3, [pc, #272]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 8001cfe:	e083      	b.n	8001e08 <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 8001d00:	4b42      	ldr	r3, [pc, #264]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
		break;
 8001d06:	e07f      	b.n	8001e08 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 8001d08:	4b41      	ldr	r3, [pc, #260]	@ (8001e10 <_Z9hwAds1115v+0x168>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001d0e:	4b43      	ldr	r3, [pc, #268]	@ (8001e1c <_Z9hwAds1115v+0x174>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 8001d16:	2303      	movs	r3, #3
 8001d18:	4a41      	ldr	r2, [pc, #260]	@ (8001e20 <_Z9hwAds1115v+0x178>)
 8001d1a:	2190      	movs	r1, #144	@ 0x90
 8001d1c:	4841      	ldr	r0, [pc, #260]	@ (8001e24 <_Z9hwAds1115v+0x17c>)
 8001d1e:	f005 ffd5 	bl	8007ccc <HAL_I2C_Master_Transmit_DMA>
 8001d22:	e005      	b.n	8001d30 <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 8001d24:	2303      	movs	r3, #3
 8001d26:	4a40      	ldr	r2, [pc, #256]	@ (8001e28 <_Z9hwAds1115v+0x180>)
 8001d28:	2190      	movs	r1, #144	@ 0x90
 8001d2a:	483e      	ldr	r0, [pc, #248]	@ (8001e24 <_Z9hwAds1115v+0x17c>)
 8001d2c:	f005 ffce 	bl	8007ccc <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 8001d30:	4b3e      	ldr	r3, [pc, #248]	@ (8001e2c <_Z9hwAds1115v+0x184>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 8001d36:	4b35      	ldr	r3, [pc, #212]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001d38:	2202      	movs	r2, #2
 8001d3a:	701a      	strb	r2, [r3, #0]

		break;
 8001d3c:	e064      	b.n	8001e08 <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 8001d3e:	2301      	movs	r3, #1
 8001d40:	4a3b      	ldr	r2, [pc, #236]	@ (8001e30 <_Z9hwAds1115v+0x188>)
 8001d42:	2190      	movs	r1, #144	@ 0x90
 8001d44:	4837      	ldr	r0, [pc, #220]	@ (8001e24 <_Z9hwAds1115v+0x17c>)
 8001d46:	f005 ffc1 	bl	8007ccc <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 8001d4a:	4b38      	ldr	r3, [pc, #224]	@ (8001e2c <_Z9hwAds1115v+0x184>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f083 0301 	eor.w	r3, r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b37      	ldr	r3, [pc, #220]	@ (8001e34 <_Z9hwAds1115v+0x18c>)
 8001d56:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 8001d58:	4b34      	ldr	r3, [pc, #208]	@ (8001e2c <_Z9hwAds1115v+0x184>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 8001d60:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001d62:	2203      	movs	r2, #3
 8001d64:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 8001d66:	e04f      	b.n	8001e08 <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 8001d68:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	701a      	strb	r2, [r3, #0]
		break;
 8001d6e:	e04b      	b.n	8001e08 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 8001d70:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <_Z9hwAds1115v+0x168>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <_Z9hwAds1115v+0x168>)
 8001d78:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 8001d7a:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <_Z9hwAds1115v+0x168>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <_Z9hwAds1115v+0x190>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	db03      	blt.n	8001d8e <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 8001d86:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001d88:	2204      	movs	r2, #4
 8001d8a:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 8001d8c:	e03c      	b.n	8001e08 <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001d90:	2203      	movs	r2, #3
 8001d92:	701a      	strb	r2, [r3, #0]
		break;
 8001d94:	e038      	b.n	8001e08 <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 8001d96:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <_Z9hwAds1115v+0x168>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	4a27      	ldr	r2, [pc, #156]	@ (8001e3c <_Z9hwAds1115v+0x194>)
 8001da0:	2190      	movs	r1, #144	@ 0x90
 8001da2:	4820      	ldr	r0, [pc, #128]	@ (8001e24 <_Z9hwAds1115v+0x17c>)
 8001da4:	f006 f8a6 	bl	8007ef4 <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001da8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <_Z9hwAds1115v+0x174>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00c      	beq.n	8001dca <_Z9hwAds1115v+0x122>
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <_Z9hwAds1115v+0x194>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	b21a      	sxth	r2, r3
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <_Z9hwAds1115v+0x194>)
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <_Z9hwAds1115v+0x198>)
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	e00b      	b.n	8001de2 <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <_Z9hwAds1115v+0x194>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <_Z9hwAds1115v+0x194>)
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <_Z9hwAds1115v+0x19c>)
 8001de0:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001de4:	2205      	movs	r2, #5
 8001de6:	701a      	strb	r2, [r3, #0]
		break;
 8001de8:	e00e      	b.n	8001e08 <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <_Z9hwAds1115v+0x174>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	f083 0301 	eor.w	r3, r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <_Z9hwAds1115v+0x174>)
 8001df6:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 8001df8:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <_Z9hwAds1115v+0x170>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 8001dfe:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <_Z9hwAds1115v+0x164>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		break;
 8001e04:	e000      	b.n	8001e08 <_Z9hwAds1115v+0x160>

	default:
		break;
 8001e06:	bf00      	nop
	}
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000042c 	.word	0x2000042c
 8001e10:	20000430 	.word	0x20000430
 8001e14:	20000434 	.word	0x20000434
 8001e18:	20000013 	.word	0x20000013
 8001e1c:	20000446 	.word	0x20000446
 8001e20:	20000014 	.word	0x20000014
 8001e24:	200006c8 	.word	0x200006c8
 8001e28:	20000018 	.word	0x20000018
 8001e2c:	20001097 	.word	0x20001097
 8001e30:	2000043c 	.word	0x2000043c
 8001e34:	200004d8 	.word	0x200004d8
 8001e38:	20000438 	.word	0x20000438
 8001e3c:	20000440 	.word	0x20000440
 8001e40:	20000442 	.word	0x20000442
 8001e44:	20000444 	.word	0x20000444

08001e48 <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 8001e4c:	4b98      	ldr	r3, [pc, #608]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b06      	cmp	r3, #6
 8001e52:	f200 8126 	bhi.w	80020a2 <_Z7hwSht31v+0x25a>
 8001e56:	a201      	add	r2, pc, #4	@ (adr r2, 8001e5c <_Z7hwSht31v+0x14>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001e79 	.word	0x08001e79
 8001e60:	08001ead 	.word	0x08001ead
 8001e64:	08001eeb 	.word	0x08001eeb
 8001e68:	08001f2f 	.word	0x08001f2f
 8001e6c:	08001f55 	.word	0x08001f55
 8001e70:	08001f75 	.word	0x08001f75
 8001e74:	08002071 	.word	0x08002071
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 8001e78:	4b8e      	ldr	r3, [pc, #568]	@ (80020b4 <_Z7hwSht31v+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4a8d      	ldr	r2, [pc, #564]	@ (80020b4 <_Z7hwSht31v+0x26c>)
 8001e80:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 8001e82:	4b8c      	ldr	r3, [pc, #560]	@ (80020b4 <_Z7hwSht31v+0x26c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b8c      	ldr	r3, [pc, #560]	@ (80020b8 <_Z7hwSht31v+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	db0a      	blt.n	8001ea4 <_Z7hwSht31v+0x5c>
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80020bc <_Z7hwSht31v+0x274>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 8001e96:	4b89      	ldr	r3, [pc, #548]	@ (80020bc <_Z7hwSht31v+0x274>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 8001e9c:	4b84      	ldr	r3, [pc, #528]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 8001ea2:	e102      	b.n	80020aa <_Z7hwSht31v+0x262>
			stateSht31	= 0;					// Espera
 8001ea4:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
		break;
 8001eaa:	e0fe      	b.n	80020aa <_Z7hwSht31v+0x262>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 8001eac:	4b81      	ldr	r3, [pc, #516]	@ (80020b4 <_Z7hwSht31v+0x26c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 8001eb2:	4b83      	ldr	r3, [pc, #524]	@ (80020c0 <_Z7hwSht31v+0x278>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b81      	ldr	r3, [pc, #516]	@ (80020c4 <_Z7hwSht31v+0x27c>)
 8001ebe:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 8001ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <_Z7hwSht31v+0x278>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80020c4 <_Z7hwSht31v+0x27c>)
 8001ec8:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 8001eca:	4b7f      	ldr	r3, [pc, #508]	@ (80020c8 <_Z7hwSht31v+0x280>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 8001ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80020cc <_Z7hwSht31v+0x284>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	b299      	uxth	r1, r3
 8001ed8:	2302      	movs	r3, #2
 8001eda:	4a7a      	ldr	r2, [pc, #488]	@ (80020c4 <_Z7hwSht31v+0x27c>)
 8001edc:	487c      	ldr	r0, [pc, #496]	@ (80020d0 <_Z7hwSht31v+0x288>)
 8001ede:	f005 fef5 	bl	8007ccc <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 8001ee2:	4b73      	ldr	r3, [pc, #460]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
		break;
 8001ee8:	e0df      	b.n	80020aa <_Z7hwSht31v+0x262>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 8001eea:	4b7a      	ldr	r3, [pc, #488]	@ (80020d4 <_Z7hwSht31v+0x28c>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	f083 0301 	eor.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <_Z7hwSht31v+0xc0>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 8001ef8:	4b73      	ldr	r3, [pc, #460]	@ (80020c8 <_Z7hwSht31v+0x280>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b75      	ldr	r3, [pc, #468]	@ (80020d8 <_Z7hwSht31v+0x290>)
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e006      	b.n	8001f16 <_Z7hwSht31v+0xce>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 8001f08:	4b6f      	ldr	r3, [pc, #444]	@ (80020c8 <_Z7hwSht31v+0x280>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	f083 0301 	eor.w	r3, r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b71      	ldr	r3, [pc, #452]	@ (80020d8 <_Z7hwSht31v+0x290>)
 8001f14:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 8001f16:	4b6c      	ldr	r3, [pc, #432]	@ (80020c8 <_Z7hwSht31v+0x280>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <_Z7hwSht31v+0xde>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 8001f1e:	4b64      	ldr	r3, [pc, #400]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001f20:	2203      	movs	r2, #3
 8001f22:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 8001f24:	e0c1      	b.n	80020aa <_Z7hwSht31v+0x262>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 8001f26:	4b62      	ldr	r3, [pc, #392]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001f28:	2206      	movs	r2, #6
 8001f2a:	701a      	strb	r2, [r3, #0]
		break;
 8001f2c:	e0bd      	b.n	80020aa <_Z7hwSht31v+0x262>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 8001f2e:	4b61      	ldr	r3, [pc, #388]	@ (80020b4 <_Z7hwSht31v+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a5f      	ldr	r2, [pc, #380]	@ (80020b4 <_Z7hwSht31v+0x26c>)
 8001f36:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 8001f38:	4b5e      	ldr	r3, [pc, #376]	@ (80020b4 <_Z7hwSht31v+0x26c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b67      	ldr	r3, [pc, #412]	@ (80020dc <_Z7hwSht31v+0x294>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	db03      	blt.n	8001f4c <_Z7hwSht31v+0x104>
			stateSht31	= 4;					// Pasa a S4
 8001f44:	4b5a      	ldr	r3, [pc, #360]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001f46:	2204      	movs	r2, #4
 8001f48:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 8001f4a:	e0ae      	b.n	80020aa <_Z7hwSht31v+0x262>
			stateSht31	= 3;					// Espera en S3
 8001f4c:	4b58      	ldr	r3, [pc, #352]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001f4e:	2203      	movs	r2, #3
 8001f50:	701a      	strb	r2, [r3, #0]
		break;
 8001f52:	e0aa      	b.n	80020aa <_Z7hwSht31v+0x262>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 8001f54:	4b57      	ldr	r3, [pc, #348]	@ (80020b4 <_Z7hwSht31v+0x26c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80020cc <_Z7hwSht31v+0x284>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	b299      	uxth	r1, r3
 8001f62:	2306      	movs	r3, #6
 8001f64:	4a5e      	ldr	r2, [pc, #376]	@ (80020e0 <_Z7hwSht31v+0x298>)
 8001f66:	485a      	ldr	r0, [pc, #360]	@ (80020d0 <_Z7hwSht31v+0x288>)
 8001f68:	f005 ffc4 	bl	8007ef4 <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 8001f6c:	4b50      	ldr	r3, [pc, #320]	@ (80020b0 <_Z7hwSht31v+0x268>)
 8001f6e:	2205      	movs	r2, #5
 8001f70:	701a      	strb	r2, [r3, #0]
		break;
 8001f72:	e09a      	b.n	80020aa <_Z7hwSht31v+0x262>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 8001f74:	4b57      	ldr	r3, [pc, #348]	@ (80020d4 <_Z7hwSht31v+0x28c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f083 0301 	eor.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d039      	beq.n	8001ff6 <_Z7hwSht31v+0x1ae>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8001f82:	4b57      	ldr	r3, [pc, #348]	@ (80020e0 <_Z7hwSht31v+0x298>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4a55      	ldr	r2, [pc, #340]	@ (80020e0 <_Z7hwSht31v+0x298>)
 8001f8c:	7852      	ldrb	r2, [r2, #1]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b54      	ldr	r3, [pc, #336]	@ (80020e4 <_Z7hwSht31v+0x29c>)
 8001f94:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 8001f96:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <_Z7hwSht31v+0x29c>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	4a50      	ldr	r2, [pc, #320]	@ (80020e8 <_Z7hwSht31v+0x2a0>)
 8001fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8001faa:	441a      	add	r2, r3
 8001fac:	13d2      	asrs	r2, r2, #15
 8001fae:	17db      	asrs	r3, r3, #31
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b4a      	ldr	r3, [pc, #296]	@ (80020e4 <_Z7hwSht31v+0x29c>)
 8001fbc:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 8001fbe:	4b48      	ldr	r3, [pc, #288]	@ (80020e0 <_Z7hwSht31v+0x298>)
 8001fc0:	78db      	ldrb	r3, [r3, #3]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4a46      	ldr	r2, [pc, #280]	@ (80020e0 <_Z7hwSht31v+0x298>)
 8001fc8:	7912      	ldrb	r2, [r2, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b47      	ldr	r3, [pc, #284]	@ (80020ec <_Z7hwSht31v+0x2a4>)
 8001fd0:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 8001fd2:	4b46      	ldr	r3, [pc, #280]	@ (80020ec <_Z7hwSht31v+0x2a4>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	4a41      	ldr	r2, [pc, #260]	@ (80020e8 <_Z7hwSht31v+0x2a0>)
 8001fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe6:	441a      	add	r2, r3
 8001fe8:	13d2      	asrs	r2, r2, #15
 8001fea:	17db      	asrs	r3, r3, #31
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80020ec <_Z7hwSht31v+0x2a4>)
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	e038      	b.n	8002068 <_Z7hwSht31v+0x220>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <_Z7hwSht31v+0x298>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4a38      	ldr	r2, [pc, #224]	@ (80020e0 <_Z7hwSht31v+0x298>)
 8002000:	7852      	ldrb	r2, [r2, #1]
 8002002:	4413      	add	r3, r2
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b3a      	ldr	r3, [pc, #232]	@ (80020f0 <_Z7hwSht31v+0x2a8>)
 8002008:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 800200a:	4b39      	ldr	r3, [pc, #228]	@ (80020f0 <_Z7hwSht31v+0x2a8>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	4a33      	ldr	r2, [pc, #204]	@ (80020e8 <_Z7hwSht31v+0x2a0>)
 800201a:	fb82 1203 	smull	r1, r2, r2, r3
 800201e:	441a      	add	r2, r3
 8002020:	13d2      	asrs	r2, r2, #15
 8002022:	17db      	asrs	r3, r3, #31
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	b29b      	uxth	r3, r3
 8002028:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 800202c:	b29a      	uxth	r2, r3
 800202e:	4b30      	ldr	r3, [pc, #192]	@ (80020f0 <_Z7hwSht31v+0x2a8>)
 8002030:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 8002032:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <_Z7hwSht31v+0x298>)
 8002034:	78db      	ldrb	r3, [r3, #3]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	b29b      	uxth	r3, r3
 800203a:	4a29      	ldr	r2, [pc, #164]	@ (80020e0 <_Z7hwSht31v+0x298>)
 800203c:	7912      	ldrb	r2, [r2, #4]
 800203e:	4413      	add	r3, r2
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b2c      	ldr	r3, [pc, #176]	@ (80020f4 <_Z7hwSht31v+0x2ac>)
 8002044:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 8002046:	4b2b      	ldr	r3, [pc, #172]	@ (80020f4 <_Z7hwSht31v+0x2ac>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	4a24      	ldr	r2, [pc, #144]	@ (80020e8 <_Z7hwSht31v+0x2a0>)
 8002056:	fb82 1203 	smull	r1, r2, r2, r3
 800205a:	441a      	add	r2, r3
 800205c:	13d2      	asrs	r2, r2, #15
 800205e:	17db      	asrs	r3, r3, #31
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <_Z7hwSht31v+0x2ac>)
 8002066:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <_Z7hwSht31v+0x268>)
 800206a:	2206      	movs	r2, #6
 800206c:	701a      	strb	r2, [r3, #0]
		break;
 800206e:	e01c      	b.n	80020aa <_Z7hwSht31v+0x262>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <_Z7hwSht31v+0x274>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 8002076:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <_Z7hwSht31v+0x28c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	f083 0301 	eor.w	r3, r3, #1
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <_Z7hwSht31v+0x28c>)
 8002082:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 8002084:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <_Z7hwSht31v+0x28c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <_Z7hwSht31v+0x24c>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <_Z7hwSht31v+0x284>)
 800208e:	2244      	movs	r2, #68	@ 0x44
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e002      	b.n	800209a <_Z7hwSht31v+0x252>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 8002094:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <_Z7hwSht31v+0x284>)
 8002096:	2245      	movs	r2, #69	@ 0x45
 8002098:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <_Z7hwSht31v+0x268>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
		break;
 80020a0:	e003      	b.n	80020aa <_Z7hwSht31v+0x262>

	default:
		stateSht31	= 0;
 80020a2:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <_Z7hwSht31v+0x268>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
		break;
 80020a8:	bf00      	nop
	}
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000040d 	.word	0x2000040d
 80020b4:	20000410 	.word	0x20000410
 80020b8:	20000414 	.word	0x20000414
 80020bc:	20000013 	.word	0x20000013
 80020c0:	2000000e 	.word	0x2000000e
 80020c4:	20000010 	.word	0x20000010
 80020c8:	20001097 	.word	0x20001097
 80020cc:	20000012 	.word	0x20000012
 80020d0:	200006c8 	.word	0x200006c8
 80020d4:	20000422 	.word	0x20000422
 80020d8:	200004d8 	.word	0x200004d8
 80020dc:	20000418 	.word	0x20000418
 80020e0:	2000041c 	.word	0x2000041c
 80020e4:	20000424 	.word	0x20000424
 80020e8:	80008001 	.word	0x80008001
 80020ec:	20000426 	.word	0x20000426
 80020f0:	20000428 	.word	0x20000428
 80020f4:	2000042a 	.word	0x2000042a

080020f8 <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 80020fc:	2108      	movs	r1, #8
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002102:	f005 fd17 	bl	8007b34 <HAL_GPIO_ReadPin>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b25      	ldr	r3, [pc, #148]	@ (80021a8 <_Z7hwBotonv+0xb0>)
 8002114:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <_Z7hwBotonv+0xb4>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d03a      	beq.n	8002194 <_Z7hwBotonv+0x9c>
 800211e:	2b02      	cmp	r3, #2
 8002120:	dc3f      	bgt.n	80021a2 <_Z7hwBotonv+0xaa>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <_Z7hwBotonv+0x34>
 8002126:	2b01      	cmp	r3, #1
 8002128:	d012      	beq.n	8002150 <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 800212a:	e03a      	b.n	80021a2 <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 800212c:	4b20      	ldr	r3, [pc, #128]	@ (80021b0 <_Z7hwBotonv+0xb8>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 8002132:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <_Z7hwBotonv+0xbc>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 8002138:	4b1b      	ldr	r3, [pc, #108]	@ (80021a8 <_Z7hwBotonv+0xb0>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 8002140:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <_Z7hwBotonv+0xb4>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
		break;
 8002146:	e02d      	b.n	80021a4 <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 8002148:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <_Z7hwBotonv+0xb4>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
		break;
 800214e:	e029      	b.n	80021a4 <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 8002150:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <_Z7hwBotonv+0xb8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a16      	ldr	r2, [pc, #88]	@ (80021b0 <_Z7hwBotonv+0xb8>)
 8002158:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <_Z7hwBotonv+0xb0>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <_Z7hwBotonv+0x7e>
 8002162:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <_Z7hwBotonv+0xb8>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <_Z7hwBotonv+0xc0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	db03      	blt.n	8002176 <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 800216e:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <_Z7hwBotonv+0xb4>)
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
		break;
 8002174:	e016      	b.n	80021a4 <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 8002176:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <_Z7hwBotonv+0xb0>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 8002184:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <_Z7hwBotonv+0xb4>)
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
		break;
 800218a:	e00b      	b.n	80021a4 <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <_Z7hwBotonv+0xb4>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
		break;
 8002192:	e007      	b.n	80021a4 <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <_Z7hwBotonv+0xbc>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 800219a:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <_Z7hwBotonv+0xb4>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
		break;
 80021a0:	e000      	b.n	80021a4 <_Z7hwBotonv+0xac>
		break;
 80021a2:	bf00      	nop
	}
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000401 	.word	0x20000401
 80021ac:	2000040c 	.word	0x2000040c
 80021b0:	20000404 	.word	0x20000404
 80021b4:	20000a38 	.word	0x20000a38
 80021b8:	20000408 	.word	0x20000408

080021bc <_Z7hwGpsInv>:
 *
 *	INPUT	:	gpsIn.available()
 *	OUTPUT	:	gpsInput.inserValue()
 */

void hwGpsIn(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	if ( gpsIn.available() ){			// Si hay un elemento en fifo
 80021c0:	480e      	ldr	r0, [pc, #56]	@ (80021fc <_Z7hwGpsInv+0x40>)
 80021c2:	f7ff f97d 	bl	80014c0 <_ZN8fifoUart9availableEv>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <_Z7hwGpsInv+0x3c>
		gpsBus = gpsIn.readElement();	// Lee valor en fifo
 80021cc:	480b      	ldr	r0, [pc, #44]	@ (80021fc <_Z7hwGpsInv+0x40>)
 80021ce:	f7ff f93e 	bl	800144e <_ZN8fifoUart11readElementEv>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <_Z7hwGpsInv+0x44>)
 80021d8:	701a      	strb	r2, [r3, #0]
		gpsInput.insertValue( gpsBus );	// Pasa el simbolo al otro metodo
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <_Z7hwGpsInv+0x44>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4808      	ldr	r0, [pc, #32]	@ (8002204 <_Z7hwGpsInv+0x48>)
 80021e2:	f7ff f995 	bl	8001510 <_ZN8gpsInput11insertValueEh>

		if ( gpsInput.stateInsert == 7){
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <_Z7hwGpsInv+0x48>)
 80021e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80021ec:	2b07      	cmp	r3, #7
 80021ee:	d103      	bne.n	80021f8 <_Z7hwGpsInv+0x3c>
			gpsBus = gpsBus;
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <_Z7hwGpsInv+0x44>)
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	4b02      	ldr	r3, [pc, #8]	@ (8002200 <_Z7hwGpsInv+0x44>)
 80021f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000a94 	.word	0x20000a94
 8002200:	200004cb 	.word	0x200004cb
 8002204:	20000a3c 	.word	0x20000a3c

08002208 <_Z8hwAnalogv>:
 *
 *	INPUT	:	analog[0],	analog[1], flagAnalog
 *	OUTPUT	:	battery, alphaAnalog_A, alphaAnalog_B
 */

void hwAnalog(){
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	switch ( stateAnalog ){
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <_Z8hwAnalogv+0x9c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d025      	beq.n	8002260 <_Z8hwAnalogv+0x58>
 8002214:	2b02      	cmp	r3, #2
 8002216:	dc42      	bgt.n	800229e <_Z8hwAnalogv+0x96>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <_Z8hwAnalogv+0x1a>
 800221c:	2b01      	cmp	r3, #1
 800221e:	d013      	beq.n	8002248 <_Z8hwAnalogv+0x40>
		else{												// Si no ha guardado
			stateAnalog		= 2;							// Espera en S2
		}
		break;
	}
}
 8002220:	e03d      	b.n	800229e <_Z8hwAnalogv+0x96>
		countAnalog++;						// Suma 1 al contador
 8002222:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <_Z8hwAnalogv+0xa0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	4a1f      	ldr	r2, [pc, #124]	@ (80022a8 <_Z8hwAnalogv+0xa0>)
 800222a:	6013      	str	r3, [r2, #0]
		if ( countAnalog >= sampleAnalog ){	// Si cumple el tiempo de muestreo
 800222c:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <_Z8hwAnalogv+0xa0>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <_Z8hwAnalogv+0xa4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	db03      	blt.n	8002240 <_Z8hwAnalogv+0x38>
			stateAnalog	= 1;				// Pasa a S1
 8002238:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <_Z8hwAnalogv+0x9c>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
		break;
 800223e:	e02e      	b.n	800229e <_Z8hwAnalogv+0x96>
			stateAnalog	= 0;				// Espera en S0
 8002240:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <_Z8hwAnalogv+0x9c>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
		break;
 8002246:	e02a      	b.n	800229e <_Z8hwAnalogv+0x96>
		countAnalog	= 0;									// Reinicia contador
 8002248:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <_Z8hwAnalogv+0xa0>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);	// Inicia muestreo
 800224e:	2203      	movs	r2, #3
 8002250:	4917      	ldr	r1, [pc, #92]	@ (80022b0 <_Z8hwAnalogv+0xa8>)
 8002252:	4818      	ldr	r0, [pc, #96]	@ (80022b4 <_Z8hwAnalogv+0xac>)
 8002254:	f003 fc6e 	bl	8005b34 <HAL_ADC_Start_DMA>
		stateAnalog	= 2;									// Pasa a S2
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <_Z8hwAnalogv+0x9c>)
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
		break;
 800225e:	e01e      	b.n	800229e <_Z8hwAnalogv+0x96>
		if ( flagAnalog ){									// Si guardo correctamente
 8002260:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <_Z8hwAnalogv+0xb0>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d016      	beq.n	8002296 <_Z8hwAnalogv+0x8e>
			battery			= (analog[0] & 0xFFFF);			// Guarda valor bateria
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <_Z8hwAnalogv+0xa8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <_Z8hwAnalogv+0xb4>)
 8002270:	801a      	strh	r2, [r3, #0]
			alphaAnalog_A	= (analog[0] >> 16 & 0xFFFF);	// Guarda valor Alpha A
 8002272:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <_Z8hwAnalogv+0xa8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0c1b      	lsrs	r3, r3, #16
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <_Z8hwAnalogv+0xb8>)
 800227c:	801a      	strh	r2, [r3, #0]
			alphaAnalog_B	= (analog[1] & 0xFFFF);			// Guarda valor Alpha B
 800227e:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <_Z8hwAnalogv+0xa8>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <_Z8hwAnalogv+0xbc>)
 8002286:	801a      	strh	r2, [r3, #0]
			flagAnalog		= 0;							// Reinicia flag de medicion analogica
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <_Z8hwAnalogv+0xb0>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
			stateAnalog		= 0;							// Vuelve a S0
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <_Z8hwAnalogv+0x9c>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
		break;
 8002294:	e002      	b.n	800229c <_Z8hwAnalogv+0x94>
			stateAnalog		= 2;							// Espera en S2
 8002296:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <_Z8hwAnalogv+0x9c>)
 8002298:	2202      	movs	r2, #2
 800229a:	701a      	strb	r2, [r3, #0]
		break;
 800229c:	bf00      	nop
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000458 	.word	0x20000458
 80022a8:	20000450 	.word	0x20000450
 80022ac:	20000454 	.word	0x20000454
 80022b0:	20001130 	.word	0x20001130
 80022b4:	20000618 	.word	0x20000618
 80022b8:	2000113c 	.word	0x2000113c
 80022bc:	20000448 	.word	0x20000448
 80022c0:	2000044a 	.word	0x2000044a
 80022c4:	2000044c 	.word	0x2000044c

080022c8 <_Z8hwEEPROMv>:
 * 1. Indicar cada uno de los pasos de calibracion
 * 2. Guardas datos de forma periodica en EEPROM
 * 3.
 */

void hwEEPROM(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0

	switch ( stateEEPROM ){
 80022ce:	4b5f      	ldr	r3, [pc, #380]	@ (800244c <_Z8hwEEPROMv+0x184>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	f200 80b0 	bhi.w	8002438 <_Z8hwEEPROMv+0x170>
 80022d8:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <_Z8hwEEPROMv+0x18>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	080022f5 	.word	0x080022f5
 80022e4:	0800235d 	.word	0x0800235d
 80022e8:	080023c5 	.word	0x080023c5
 80022ec:	080023cd 	.word	0x080023cd
 80022f0:	08002441 	.word	0x08002441
	// S0 - READ PAGE 0 //
	//////////////////////

	case 0:

		EEPROM_Read(0, 0,  nameSensor_0,	sizeof(nameSensor_0));		// Name of sensor
 80022f4:	2314      	movs	r3, #20
 80022f6:	4a56      	ldr	r2, [pc, #344]	@ (8002450 <_Z8hwEEPROMv+0x188>)
 80022f8:	2100      	movs	r1, #0
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7fe f920 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 20, idSensor_0,		sizeof(idSensor_0));		// ID of sensor
 8002300:	2304      	movs	r3, #4
 8002302:	4a54      	ldr	r2, [pc, #336]	@ (8002454 <_Z8hwEEPROMv+0x18c>)
 8002304:	2114      	movs	r1, #20
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe f91a 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 24, rangeSensor_0,	sizeof(rangeSensor_0));		// Range of sensor
 800230c:	2304      	movs	r3, #4
 800230e:	4a52      	ldr	r2, [pc, #328]	@ (8002458 <_Z8hwEEPROMv+0x190>)
 8002310:	2118      	movs	r1, #24
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe f914 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 28, amplifier_10,	sizeof(amplifier_10));		// Amplifier 1 of sensor
 8002318:	2304      	movs	r3, #4
 800231a:	4a50      	ldr	r2, [pc, #320]	@ (800245c <_Z8hwEEPROMv+0x194>)
 800231c:	211c      	movs	r1, #28
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe f90e 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 32, amplifier_20,	sizeof(amplifier_20));		// Amplifier 2 of sensor
 8002324:	2304      	movs	r3, #4
 8002326:	4a4e      	ldr	r2, [pc, #312]	@ (8002460 <_Z8hwEEPROMv+0x198>)
 8002328:	2120      	movs	r1, #32
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe f908 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 36, groundSensor_0,	sizeof(groundSensor_0));	// N of curve
 8002330:	2304      	movs	r3, #4
 8002332:	4a4c      	ldr	r2, [pc, #304]	@ (8002464 <_Z8hwEEPROMv+0x19c>)
 8002334:	2124      	movs	r1, #36	@ 0x24
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe f902 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 40, curveSensor_0,	sizeof(curveSensor_0));		// M of curve
 800233c:	2304      	movs	r3, #4
 800233e:	4a4a      	ldr	r2, [pc, #296]	@ (8002468 <_Z8hwEEPROMv+0x1a0>)
 8002340:	2128      	movs	r1, #40	@ 0x28
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe f8fc 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 44, dateCalib_0,		sizeof(dateCalib_0));		// Date of calibration
 8002348:	230a      	movs	r3, #10
 800234a:	4a48      	ldr	r2, [pc, #288]	@ (800246c <_Z8hwEEPROMv+0x1a4>)
 800234c:	212c      	movs	r1, #44	@ 0x2c
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe f8f6 	bl	8000540 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 1;												// S1 to read page 1
 8002354:	4b3d      	ldr	r3, [pc, #244]	@ (800244c <_Z8hwEEPROMv+0x184>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
		break;
 800235a:	e072      	b.n	8002442 <_Z8hwEEPROMv+0x17a>
	//////////////////////
	// S1 - READ PAGE 1 //
	//////////////////////

	case 1:
		EEPROM_Read(1, 0,  nameSensor_1,	sizeof(nameSensor_1));		// Name of sensor
 800235c:	2314      	movs	r3, #20
 800235e:	4a44      	ldr	r2, [pc, #272]	@ (8002470 <_Z8hwEEPROMv+0x1a8>)
 8002360:	2100      	movs	r1, #0
 8002362:	2001      	movs	r0, #1
 8002364:	f7fe f8ec 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 20, idSensor_1,		sizeof(idSensor_1));		// ID of sensor
 8002368:	2304      	movs	r3, #4
 800236a:	4a42      	ldr	r2, [pc, #264]	@ (8002474 <_Z8hwEEPROMv+0x1ac>)
 800236c:	2114      	movs	r1, #20
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe f8e6 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 24, rangeSensor_1,	sizeof(rangeSensor_1));		// Range of sensor
 8002374:	2304      	movs	r3, #4
 8002376:	4a40      	ldr	r2, [pc, #256]	@ (8002478 <_Z8hwEEPROMv+0x1b0>)
 8002378:	2118      	movs	r1, #24
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe f8e0 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 28, amplifier_11,	sizeof(amplifier_11));		// Amplifier 1 of sensor
 8002380:	2304      	movs	r3, #4
 8002382:	4a3e      	ldr	r2, [pc, #248]	@ (800247c <_Z8hwEEPROMv+0x1b4>)
 8002384:	211c      	movs	r1, #28
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe f8da 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 32, amplifier_21,	sizeof(amplifier_21));		// Amplifier 2 of sensor
 800238c:	2304      	movs	r3, #4
 800238e:	4a3c      	ldr	r2, [pc, #240]	@ (8002480 <_Z8hwEEPROMv+0x1b8>)
 8002390:	2120      	movs	r1, #32
 8002392:	2001      	movs	r0, #1
 8002394:	f7fe f8d4 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 36, groundSensor_1,	sizeof(groundSensor_1));	// N of curve
 8002398:	2304      	movs	r3, #4
 800239a:	4a3a      	ldr	r2, [pc, #232]	@ (8002484 <_Z8hwEEPROMv+0x1bc>)
 800239c:	2124      	movs	r1, #36	@ 0x24
 800239e:	2001      	movs	r0, #1
 80023a0:	f7fe f8ce 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 40, curveSensor_1,	sizeof(curveSensor_1));		// M of curve
 80023a4:	2304      	movs	r3, #4
 80023a6:	4a38      	ldr	r2, [pc, #224]	@ (8002488 <_Z8hwEEPROMv+0x1c0>)
 80023a8:	2128      	movs	r1, #40	@ 0x28
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe f8c8 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 44, dateCalib_1,		sizeof(dateCalib_1));		// Date of calibration
 80023b0:	230a      	movs	r3, #10
 80023b2:	4a36      	ldr	r2, [pc, #216]	@ (800248c <_Z8hwEEPROMv+0x1c4>)
 80023b4:	212c      	movs	r1, #44	@ 0x2c
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7fe f8c2 	bl	8000540 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 2;												// S2 to stop of read
 80023bc:	4b23      	ldr	r3, [pc, #140]	@ (800244c <_Z8hwEEPROMv+0x184>)
 80023be:	2202      	movs	r2, #2
 80023c0:	701a      	strb	r2, [r3, #0]
		break;
 80023c2:	e03e      	b.n	8002442 <_Z8hwEEPROMv+0x17a>
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
		*/
		stateEEPROM	= 3;								// Pasa a S3
 80023c4:	4b21      	ldr	r3, [pc, #132]	@ (800244c <_Z8hwEEPROMv+0x184>)
 80023c6:	2203      	movs	r2, #3
 80023c8:	701a      	strb	r2, [r3, #0]
		break;
 80023ca:	e03a      	b.n	8002442 <_Z8hwEEPROMv+0x17a>
	// S3 - STOP READING //
	///////////////////////

	case 3:
		uint8_t i;										// Inicia contador
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 80023cc:	2300      	movs	r3, #0
 80023ce:	71fb      	strb	r3, [r7, #7]
 80023d0:	e012      	b.n	80023f8 <_Z8hwEEPROMv+0x130>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002490 <_Z8hwEEPROMv+0x1c8>)
 80023d6:	5cd2      	ldrb	r2, [r2, r3]
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	491d      	ldr	r1, [pc, #116]	@ (8002450 <_Z8hwEEPROMv+0x188>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d103      	bne.n	80023ea <_Z8hwEEPROMv+0x122>
				errorHardware[4]	= 0;				// Si son iguales  no hay error
 80023e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002494 <_Z8hwEEPROMv+0x1cc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	711a      	strb	r2, [r3, #4]
 80023e8:	e003      	b.n	80023f2 <_Z8hwEEPROMv+0x12a>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 80023ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <_Z8hwEEPROMv+0x1cc>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 80023f0:	e005      	b.n	80023fe <_Z8hwEEPROMv+0x136>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	3301      	adds	r3, #1
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	2b11      	cmp	r3, #17
 80023fc:	d9e9      	bls.n	80023d2 <_Z8hwEEPROMv+0x10a>
			}
		}

		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 80023fe:	2300      	movs	r3, #0
 8002400:	71fb      	strb	r3, [r7, #7]
 8002402:	e012      	b.n	800242a <_Z8hwEEPROMv+0x162>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4a22      	ldr	r2, [pc, #136]	@ (8002490 <_Z8hwEEPROMv+0x1c8>)
 8002408:	5cd2      	ldrb	r2, [r2, r3]
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	4910      	ldr	r1, [pc, #64]	@ (8002450 <_Z8hwEEPROMv+0x188>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	429a      	cmp	r2, r3
 8002412:	d103      	bne.n	800241c <_Z8hwEEPROMv+0x154>
				errorHardware[4]	= 0;				// Si son iguales no idnica error
 8002414:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <_Z8hwEEPROMv+0x1cc>)
 8002416:	2200      	movs	r2, #0
 8002418:	711a      	strb	r2, [r3, #4]
 800241a:	e003      	b.n	8002424 <_Z8hwEEPROMv+0x15c>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 800241c:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <_Z8hwEEPROMv+0x1cc>)
 800241e:	2201      	movs	r2, #1
 8002420:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8002422:	e005      	b.n	8002430 <_Z8hwEEPROMv+0x168>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	3301      	adds	r3, #1
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2b11      	cmp	r3, #17
 800242e:	d9e9      	bls.n	8002404 <_Z8hwEEPROMv+0x13c>
			}
		}
		stateEEPROM	= 4;
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <_Z8hwEEPROMv+0x184>)
 8002432:	2204      	movs	r2, #4
 8002434:	701a      	strb	r2, [r3, #0]
		break;
 8002436:	e004      	b.n	8002442 <_Z8hwEEPROMv+0x17a>

	case 4:
		break;
	default:
		stateEEPROM	= 0;
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <_Z8hwEEPROMv+0x184>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
		break;
 800243e:	e000      	b.n	8002442 <_Z8hwEEPROMv+0x17a>
		break;
 8002440:	bf00      	nop
	}
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200004ca 	.word	0x200004ca
 8002450:	2000045c 	.word	0x2000045c
 8002454:	20000470 	.word	0x20000470
 8002458:	20000474 	.word	0x20000474
 800245c:	20000478 	.word	0x20000478
 8002460:	2000047c 	.word	0x2000047c
 8002464:	20000480 	.word	0x20000480
 8002468:	20000484 	.word	0x20000484
 800246c:	20000488 	.word	0x20000488
 8002470:	20000494 	.word	0x20000494
 8002474:	200004a8 	.word	0x200004a8
 8002478:	200004ac 	.word	0x200004ac
 800247c:	200004b0 	.word	0x200004b0
 8002480:	200004b4 	.word	0x200004b4
 8002484:	200004b8 	.word	0x200004b8
 8002488:	200004bc 	.word	0x200004bc
 800248c:	200004c0 	.word	0x200004c0
 8002490:	2000001c 	.word	0x2000001c
 8002494:	200004d8 	.word	0x200004d8

08002498 <_Z41__static_initialization_and_destruction_0ii>:
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d137      	bne.n	8002518 <_Z41__static_initialization_and_destruction_0ii+0x80>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d132      	bne.n	8002518 <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80024bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80024c0:	4a19      	ldr	r2, [pc, #100]	@ (8002528 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80024c2:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 80024c4:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80024ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80024d2:	4a16      	ldr	r2, [pc, #88]	@ (800252c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80024d4:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 80024d6:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	2332      	movs	r3, #50	@ 0x32
 80024de:	fb93 f3f2 	sdiv	r3, r3, r2
 80024e2:	4a13      	ldr	r2, [pc, #76]	@ (8002530 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80024e4:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 80024e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	2364      	movs	r3, #100	@ 0x64
 80024ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80024f2:	4a10      	ldr	r2, [pc, #64]	@ (8002534 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80024f4:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	2314      	movs	r3, #20
 80024fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8002502:	3b01      	subs	r3, #1
 8002504:	4a0c      	ldr	r2, [pc, #48]	@ (8002538 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002506:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	2332      	movs	r3, #50	@ 0x32
 8002510:	fb93 f3f2 	sdiv	r3, r3, r2
 8002514:	4a09      	ldr	r2, [pc, #36]	@ (800253c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	20000399 	.word	0x20000399
 8002528:	20000408 	.word	0x20000408
 800252c:	20000414 	.word	0x20000414
 8002530:	20000418 	.word	0x20000418
 8002534:	20000434 	.word	0x20000434
 8002538:	20000438 	.word	0x20000438
 800253c:	20000454 	.word	0x20000454

08002540 <_GLOBAL__sub_I_boton>:
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
 8002544:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ffa5 	bl	8002498 <_Z41__static_initialization_and_destruction_0ii>
 800254e:	bd80      	pop	{r7, pc}

08002550 <_Z8hwOutputv>:
uint16_t limitUartGps	= 20000/superloop;


/***** OUTPUT	*****/

void hwOutput(){
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	//hwDisplay();
	//hwAlarms();
	hwLoraOut();
 8002554:	f000 f966 	bl	8002824 <_Z9hwLoraOutv>
	hwGpsOut();
 8002558:	f000 f802 	bl	8002560 <_Z8hwGpsOutv>
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <_Z8hwGpsOutv>:

/////////
// GPS //
/////////

void hwGpsOut(){
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0

	////////////
	// ENABLE //
	////////////

	switch ( stateUartGps ){
 8002564:	4b9d      	ldr	r3, [pc, #628]	@ (80027dc <_Z8hwGpsOutv+0x27c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d03d      	beq.n	80025e8 <_Z8hwGpsOutv+0x88>
 800256c:	2b02      	cmp	r3, #2
 800256e:	dc4a      	bgt.n	8002606 <_Z8hwGpsOutv+0xa6>
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <_Z8hwGpsOutv+0x1a>
 8002574:	2b01      	cmp	r3, #1
 8002576:	d011      	beq.n	800259c <_Z8hwGpsOutv+0x3c>
 8002578:	e045      	b.n	8002606 <_Z8hwGpsOutv+0xa6>
	/////////////////////////
	// S0 - WAIT AVAILABLE //
	/////////////////////////

	case 0:
		if ( availableGps ){										// Si
 800257a:	4b99      	ldr	r3, [pc, #612]	@ (80027e0 <_Z8hwGpsOutv+0x280>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <_Z8hwGpsOutv+0x34>
			HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));	//
 8002582:	2202      	movs	r2, #2
 8002584:	4997      	ldr	r1, [pc, #604]	@ (80027e4 <_Z8hwGpsOutv+0x284>)
 8002586:	4898      	ldr	r0, [pc, #608]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 8002588:	f009 fe12 	bl	800c1b0 <HAL_UART_Receive_DMA>
			stateUartGps	= 1;									//
 800258c:	4b93      	ldr	r3, [pc, #588]	@ (80027dc <_Z8hwGpsOutv+0x27c>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
		}
		else{														//
			stateUartGps	= 0;									//
		}
		break;
 8002592:	e03c      	b.n	800260e <_Z8hwGpsOutv+0xae>
			stateUartGps	= 0;									//
 8002594:	4b91      	ldr	r3, [pc, #580]	@ (80027dc <_Z8hwGpsOutv+0x27c>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
		break;
 800259a:	e038      	b.n	800260e <_Z8hwGpsOutv+0xae>

	case 1:
		countUartGps++;
 800259c:	4b93      	ldr	r3, [pc, #588]	@ (80027ec <_Z8hwGpsOutv+0x28c>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	4b91      	ldr	r3, [pc, #580]	@ (80027ec <_Z8hwGpsOutv+0x28c>)
 80025a6:	801a      	strh	r2, [r3, #0]

		if ( !availableGps ){
 80025a8:	4b8d      	ldr	r3, [pc, #564]	@ (80027e0 <_Z8hwGpsOutv+0x280>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <_Z8hwGpsOutv+0x64>
			countUartGps	= 0;
 80025b6:	4b8d      	ldr	r3, [pc, #564]	@ (80027ec <_Z8hwGpsOutv+0x28c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	801a      	strh	r2, [r3, #0]
			stateUartGps	= 0;
 80025bc:	4b87      	ldr	r3, [pc, #540]	@ (80027dc <_Z8hwGpsOutv+0x27c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
			stateUartGps	= 2;
		}
		else{
			stateUartGps	= 1;
		}
		break;
 80025c2:	e024      	b.n	800260e <_Z8hwGpsOutv+0xae>
		else if ( (countUartGps >= limitUartGps || flagUartGps)){
 80025c4:	4b89      	ldr	r3, [pc, #548]	@ (80027ec <_Z8hwGpsOutv+0x28c>)
 80025c6:	881a      	ldrh	r2, [r3, #0]
 80025c8:	4b89      	ldr	r3, [pc, #548]	@ (80027f0 <_Z8hwGpsOutv+0x290>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d203      	bcs.n	80025d8 <_Z8hwGpsOutv+0x78>
 80025d0:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <_Z8hwGpsOutv+0x294>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <_Z8hwGpsOutv+0x80>
			stateUartGps	= 2;
 80025d8:	4b80      	ldr	r3, [pc, #512]	@ (80027dc <_Z8hwGpsOutv+0x27c>)
 80025da:	2202      	movs	r2, #2
 80025dc:	701a      	strb	r2, [r3, #0]
		break;
 80025de:	e016      	b.n	800260e <_Z8hwGpsOutv+0xae>
			stateUartGps	= 1;
 80025e0:	4b7e      	ldr	r3, [pc, #504]	@ (80027dc <_Z8hwGpsOutv+0x27c>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
		break;
 80025e6:	e012      	b.n	800260e <_Z8hwGpsOutv+0xae>

	case 2:
		flagUartGps		= 0;
 80025e8:	4b82      	ldr	r3, [pc, #520]	@ (80027f4 <_Z8hwGpsOutv+0x294>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
		countUartGps	= 0;
 80025ee:	4b7f      	ldr	r3, [pc, #508]	@ (80027ec <_Z8hwGpsOutv+0x28c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
 80025f4:	2202      	movs	r2, #2
 80025f6:	497b      	ldr	r1, [pc, #492]	@ (80027e4 <_Z8hwGpsOutv+0x284>)
 80025f8:	487b      	ldr	r0, [pc, #492]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 80025fa:	f009 fdd9 	bl	800c1b0 <HAL_UART_Receive_DMA>
		stateUartGps	= 1;
 80025fe:	4b77      	ldr	r3, [pc, #476]	@ (80027dc <_Z8hwGpsOutv+0x27c>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
		break;
 8002604:	e003      	b.n	800260e <_Z8hwGpsOutv+0xae>
	default:
		stateUartGps	= 0;
 8002606:	4b75      	ldr	r3, [pc, #468]	@ (80027dc <_Z8hwGpsOutv+0x27c>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
		break;
 800260c:	bf00      	nop

	/////////////
	// MESSAGE //
	/////////////

	switch ( stateHwGpsEnable ){
 800260e:	4b7a      	ldr	r3, [pc, #488]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d869      	bhi.n	80026ea <_Z8hwGpsOutv+0x18a>
 8002616:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <_Z8hwGpsOutv+0xbc>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	0800262d 	.word	0x0800262d
 8002620:	0800265b 	.word	0x0800265b
 8002624:	0800268f 	.word	0x0800268f
 8002628:	080026cd 	.word	0x080026cd

		case 0:
			availableGps	= 0;
 800262c:	4b6c      	ldr	r3, [pc, #432]	@ (80027e0 <_Z8hwGpsOutv+0x280>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002632:	2200      	movs	r2, #0
 8002634:	2101      	movs	r1, #1
 8002636:	4871      	ldr	r0, [pc, #452]	@ (80027fc <_Z8hwGpsOutv+0x29c>)
 8002638:	f005 fa94 	bl	8007b64 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
			if ( enableGps ){
 800263c:	4b70      	ldr	r3, [pc, #448]	@ (8002800 <_Z8hwGpsOutv+0x2a0>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <_Z8hwGpsOutv+0xf2>
				HAL_UART_Init(&huart5);
 8002644:	4868      	ldr	r0, [pc, #416]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 8002646:	f009 fcab 	bl	800bfa0 <HAL_UART_Init>
				stateHwGpsEnable	= 1;
 800264a:	4b6b      	ldr	r3, [pc, #428]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 0;
			}
			break;
 8002650:	e04f      	b.n	80026f2 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 0;
 8002652:	4b69      	ldr	r3, [pc, #420]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
			break;
 8002658:	e04b      	b.n	80026f2 <_Z8hwGpsOutv+0x192>

		case 1:
			availableGps	= 0;
 800265a:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <_Z8hwGpsOutv+0x280>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
			countGpsAvailable++;
 8002660:	4b68      	ldr	r3, [pc, #416]	@ (8002804 <_Z8hwGpsOutv+0x2a4>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <_Z8hwGpsOutv+0x2a4>)
 800266a:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 800266c:	4b65      	ldr	r3, [pc, #404]	@ (8002804 <_Z8hwGpsOutv+0x2a4>)
 800266e:	881a      	ldrh	r2, [r3, #0]
 8002670:	4b65      	ldr	r3, [pc, #404]	@ (8002808 <_Z8hwGpsOutv+0x2a8>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d306      	bcc.n	8002686 <_Z8hwGpsOutv+0x126>
				countGpsAvailable	= 0;
 8002678:	4b62      	ldr	r3, [pc, #392]	@ (8002804 <_Z8hwGpsOutv+0x2a4>)
 800267a:	2200      	movs	r2, #0
 800267c:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 2;
 800267e:	4b5e      	ldr	r3, [pc, #376]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 1;
			}
			break;
 8002684:	e035      	b.n	80026f2 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 1;
 8002686:	4b5c      	ldr	r3, [pc, #368]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
			break;
 800268c:	e031      	b.n	80026f2 <_Z8hwGpsOutv+0x192>

		case 2:
			availableGps	= 1;
 800268e:	4b54      	ldr	r3, [pc, #336]	@ (80027e0 <_Z8hwGpsOutv+0x280>)
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8002694:	2201      	movs	r2, #1
 8002696:	2101      	movs	r1, #1
 8002698:	4858      	ldr	r0, [pc, #352]	@ (80027fc <_Z8hwGpsOutv+0x29c>)
 800269a:	f005 fa63 	bl	8007b64 <HAL_GPIO_WritePin>
			countGpsAvailable++;
 800269e:	4b59      	ldr	r3, [pc, #356]	@ (8002804 <_Z8hwGpsOutv+0x2a4>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b57      	ldr	r3, [pc, #348]	@ (8002804 <_Z8hwGpsOutv+0x2a4>)
 80026a8:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 80026aa:	4b56      	ldr	r3, [pc, #344]	@ (8002804 <_Z8hwGpsOutv+0x2a4>)
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	4b56      	ldr	r3, [pc, #344]	@ (8002808 <_Z8hwGpsOutv+0x2a8>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d306      	bcc.n	80026c4 <_Z8hwGpsOutv+0x164>
				countGpsAvailable	= 0;
 80026b6:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <_Z8hwGpsOutv+0x2a4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 3;
 80026bc:	4b4e      	ldr	r3, [pc, #312]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 80026be:	2203      	movs	r2, #3
 80026c0:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 2;
			}
			break;
 80026c2:	e016      	b.n	80026f2 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 2;
 80026c4:	4b4c      	ldr	r3, [pc, #304]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]
			break;
 80026ca:	e012      	b.n	80026f2 <_Z8hwGpsOutv+0x192>

		case 3:
			if ( enableGps ){
 80026cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002800 <_Z8hwGpsOutv+0x2a0>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <_Z8hwGpsOutv+0x17c>
				stateHwGpsEnable	= 3;
 80026d4:	4b48      	ldr	r3, [pc, #288]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 80026d6:	2203      	movs	r2, #3
 80026d8:	701a      	strb	r2, [r3, #0]
			else{

				HAL_UART_DeInit(&huart5);
				stateHwGpsEnable	= 0;
			}
			break;
 80026da:	e00a      	b.n	80026f2 <_Z8hwGpsOutv+0x192>
				HAL_UART_DeInit(&huart5);
 80026dc:	4842      	ldr	r0, [pc, #264]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 80026de:	f009 fcad 	bl	800c03c <HAL_UART_DeInit>
				stateHwGpsEnable	= 0;
 80026e2:	4b45      	ldr	r3, [pc, #276]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
			break;
 80026e8:	e003      	b.n	80026f2 <_Z8hwGpsOutv+0x192>
		default:
			stateHwGpsEnable	= 0;
 80026ea:	4b43      	ldr	r3, [pc, #268]	@ (80027f8 <_Z8hwGpsOutv+0x298>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
			break;
 80026f0:	bf00      	nop
		}

	switch( stateConfigGps ){
 80026f2:	4b46      	ldr	r3, [pc, #280]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b0a      	cmp	r3, #10
 80026f8:	d86d      	bhi.n	80027d6 <_Z8hwGpsOutv+0x276>
 80026fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <_Z8hwGpsOutv+0x1a0>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	0800272d 	.word	0x0800272d
 8002704:	08002745 	.word	0x08002745
 8002708:	08002757 	.word	0x08002757
 800270c:	0800275f 	.word	0x0800275f
 8002710:	08002771 	.word	0x08002771
 8002714:	08002779 	.word	0x08002779
 8002718:	0800278b 	.word	0x0800278b
 800271c:	08002793 	.word	0x08002793
 8002720:	080027a5 	.word	0x080027a5
 8002724:	080027ad 	.word	0x080027ad
 8002728:	080027bf 	.word	0x080027bf
	case 0:
		if ( availableGps ){
 800272c:	4b2c      	ldr	r3, [pc, #176]	@ (80027e0 <_Z8hwGpsOutv+0x280>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <_Z8hwGpsOutv+0x1dc>
			//HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
			stateConfigGps	= 1;
 8002734:	4b35      	ldr	r3, [pc, #212]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 800273a:	e04c      	b.n	80027d6 <_Z8hwGpsOutv+0x276>
			stateConfigGps	= 0;
 800273c:	4b33      	ldr	r3, [pc, #204]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
		break;
 8002742:	e048      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 1:
		HAL_UART_Transmit_DMA(&huart5, commandUart, sizeof(commandUart) - 1);
 8002744:	2219      	movs	r2, #25
 8002746:	4932      	ldr	r1, [pc, #200]	@ (8002810 <_Z8hwGpsOutv+0x2b0>)
 8002748:	4827      	ldr	r0, [pc, #156]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 800274a:	f009 fcb5 	bl	800c0b8 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 2;
 800274e:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]
		break;
 8002754:	e03f      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 2:

		stateConfigGps	= 3;
 8002756:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 8002758:	2203      	movs	r2, #3
 800275a:	701a      	strb	r2, [r3, #0]
		break;
 800275c:	e03b      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 3:
		HAL_UART_Transmit_DMA(&huart5, commandUart3, sizeof(commandUart2) - 1);
 800275e:	2219      	movs	r2, #25
 8002760:	492c      	ldr	r1, [pc, #176]	@ (8002814 <_Z8hwGpsOutv+0x2b4>)
 8002762:	4821      	ldr	r0, [pc, #132]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 8002764:	f009 fca8 	bl	800c0b8 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 4;
 8002768:	4b28      	ldr	r3, [pc, #160]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 800276a:	2204      	movs	r2, #4
 800276c:	701a      	strb	r2, [r3, #0]
		break;
 800276e:	e032      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 4:
		//HAL_UART_Transmit_DMA(&huart5, commandUart4, sizeof(commandUart4) - 1);
		stateConfigGps	= 5;
 8002770:	4b26      	ldr	r3, [pc, #152]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 8002772:	2205      	movs	r2, #5
 8002774:	701a      	strb	r2, [r3, #0]
		break;
 8002776:	e02e      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 5:
		HAL_UART_Transmit_DMA(&huart5, commandUart2, sizeof(commandUart3) - 1);
 8002778:	2219      	movs	r2, #25
 800277a:	4927      	ldr	r1, [pc, #156]	@ (8002818 <_Z8hwGpsOutv+0x2b8>)
 800277c:	481a      	ldr	r0, [pc, #104]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 800277e:	f009 fc9b 	bl	800c0b8 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart5, sizeof(commandUart5) - 1);
		stateConfigGps	= 6;
 8002782:	4b22      	ldr	r3, [pc, #136]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 8002784:	2206      	movs	r2, #6
 8002786:	701a      	strb	r2, [r3, #0]
		break;
 8002788:	e025      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 6:
		//HAL_UART_Transmit_DMA(&huart5, commandUart6, sizeof(commandUart6) - 1);
		stateConfigGps	= 7;
 800278a:	4b20      	ldr	r3, [pc, #128]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 800278c:	2207      	movs	r2, #7
 800278e:	701a      	strb	r2, [r3, #0]
		break;
 8002790:	e021      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 7:
		HAL_UART_Transmit_DMA(&huart5, commandUart8, sizeof(commandUart8) - 1);
 8002792:	2211      	movs	r2, #17
 8002794:	4921      	ldr	r1, [pc, #132]	@ (800281c <_Z8hwGpsOutv+0x2bc>)
 8002796:	4814      	ldr	r0, [pc, #80]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 8002798:	f009 fc8e 	bl	800c0b8 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart7, sizeof(commandUart7) - 1);
		stateConfigGps	= 8;
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 800279e:	2208      	movs	r2, #8
 80027a0:	701a      	strb	r2, [r3, #0]
		break;
 80027a2:	e018      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 8:

		stateConfigGps	= 9;
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 80027a6:	2209      	movs	r2, #9
 80027a8:	701a      	strb	r2, [r3, #0]
		break;
 80027aa:	e014      	b.n	80027d6 <_Z8hwGpsOutv+0x276>

	case 9:
		HAL_UART_Transmit_DMA(&huart5, commandUart9, sizeof(commandUart9) - 1);
 80027ac:	220d      	movs	r2, #13
 80027ae:	491c      	ldr	r1, [pc, #112]	@ (8002820 <_Z8hwGpsOutv+0x2c0>)
 80027b0:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <_Z8hwGpsOutv+0x288>)
 80027b2:	f009 fc81 	bl	800c0b8 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 10;
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 80027b8:	220a      	movs	r2, #10
 80027ba:	701a      	strb	r2, [r3, #0]
		break;
 80027bc:	e00b      	b.n	80027d6 <_Z8hwGpsOutv+0x276>
	case 10:
		if ( enableGps ){
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <_Z8hwGpsOutv+0x2a0>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <_Z8hwGpsOutv+0x26e>
			stateConfigGps	= 10;
 80027c6:	4b11      	ldr	r3, [pc, #68]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 80027c8:	220a      	movs	r2, #10
 80027ca:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 80027cc:	e002      	b.n	80027d4 <_Z8hwGpsOutv+0x274>
			stateConfigGps	= 0;
 80027ce:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <_Z8hwGpsOutv+0x2ac>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
		break;
 80027d4:	bf00      	nop
	}
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200004f1 	.word	0x200004f1
 80027e0:	200004e0 	.word	0x200004e0
 80027e4:	20000ad4 	.word	0x20000ad4
 80027e8:	20000834 	.word	0x20000834
 80027ec:	200004f2 	.word	0x200004f2
 80027f0:	200004f4 	.word	0x200004f4
 80027f4:	200004e8 	.word	0x200004e8
 80027f8:	200004e6 	.word	0x200004e6
 80027fc:	48000c00 	.word	0x48000c00
 8002800:	20000398 	.word	0x20000398
 8002804:	200004e2 	.word	0x200004e2
 8002808:	200004e4 	.word	0x200004e4
 800280c:	200004e7 	.word	0x200004e7
 8002810:	20000030 	.word	0x20000030
 8002814:	20000068 	.word	0x20000068
 8002818:	2000004c 	.word	0x2000004c
 800281c:	20000084 	.word	0x20000084
 8002820:	20000098 	.word	0x20000098

08002824 <_Z9hwLoraOutv>:

//////////
// LORA //
//////////

void hwLoraOut(){
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	 *
	 * Transmite un comando por hardware
	 *
	 */

	if ( flagTxLora ){													// Si hay una señal de transmision
 8002828:	4b33      	ldr	r3, [pc, #204]	@ (80028f8 <_Z9hwLoraOutv+0xd4>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d012      	beq.n	8002856 <_Z9hwLoraOutv+0x32>
		flagTxLora	= 0;												// Reinicia señal
 8002830:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <_Z9hwLoraOutv+0xd4>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, loraTxCommand0, sizeTxCommand0);	// Transmite por DMA para no estancar procesamiento
 8002836:	4b31      	ldr	r3, [pc, #196]	@ (80028fc <_Z9hwLoraOutv+0xd8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a31      	ldr	r2, [pc, #196]	@ (8002900 <_Z9hwLoraOutv+0xdc>)
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4830      	ldr	r0, [pc, #192]	@ (8002904 <_Z9hwLoraOutv+0xe0>)
 8002842:	f009 fc39 	bl	800c0b8 <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));			// Inicia recepcion por DMA
 8002846:	2201      	movs	r2, #1
 8002848:	492f      	ldr	r1, [pc, #188]	@ (8002908 <_Z9hwLoraOutv+0xe4>)
 800284a:	482e      	ldr	r0, [pc, #184]	@ (8002904 <_Z9hwLoraOutv+0xe0>)
 800284c:	f009 fcb0 	bl	800c1b0 <HAL_UART_Receive_DMA>
		flagUartGps	= 1;
 8002850:	4b2e      	ldr	r3, [pc, #184]	@ (800290c <_Z9hwLoraOutv+0xe8>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
	 * S0: Espera 500ms, indica que esta deshabilitado
	 * S1: Indica que esta deshabiltiado, espera señal de RESET
	 *
	 */

	switch ( stateResetHwLora ){
 8002856:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <_Z9hwLoraOutv+0xec>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <_Z9hwLoraOutv+0x40>
 800285e:	2b01      	cmp	r3, #1
 8002860:	d020      	beq.n	80028a4 <_Z9hwLoraOutv+0x80>
 8002862:	e042      	b.n	80028ea <_Z9hwLoraOutv+0xc6>
	// S0 - DISABLE //
	//////////////////

	case 0:

		countResetHwLora++;										// Suma 1 al contador
 8002864:	4b2b      	ldr	r3, [pc, #172]	@ (8002914 <_Z9hwLoraOutv+0xf0>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b29      	ldr	r3, [pc, #164]	@ (8002914 <_Z9hwLoraOutv+0xf0>)
 800286e:	801a      	strh	r2, [r3, #0]
		flagEnableHwLora	= 0;								// Indica que el chip esta deshabilitado
 8002870:	4b29      	ldr	r3, [pc, #164]	@ (8002918 <_Z9hwLoraOutv+0xf4>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	// Pin en RESET
 8002876:	2200      	movs	r2, #0
 8002878:	2104      	movs	r1, #4
 800287a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800287e:	f005 f971 	bl	8007b64 <HAL_GPIO_WritePin>

		if ( countResetHwLora >= resetHwLora ){					// Si pasa el limite de reset
 8002882:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <_Z9hwLoraOutv+0xf0>)
 8002884:	881a      	ldrh	r2, [r3, #0]
 8002886:	4b25      	ldr	r3, [pc, #148]	@ (800291c <_Z9hwLoraOutv+0xf8>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d306      	bcc.n	800289c <_Z9hwLoraOutv+0x78>
			countResetHwLora	= 0;							// Reinicia contador
 800288e:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <_Z9hwLoraOutv+0xf0>)
 8002890:	2200      	movs	r2, #0
 8002892:	801a      	strh	r2, [r3, #0]
			stateResetHwLora	= 1;							// Pasa a S1
 8002894:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <_Z9hwLoraOutv+0xec>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateResetHwLora	= 0;							// Espera en S0
		}
		break;
 800289a:	e02a      	b.n	80028f2 <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 0;							// Espera en S0
 800289c:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <_Z9hwLoraOutv+0xec>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
		break;
 80028a2:	e026      	b.n	80028f2 <_Z9hwLoraOutv+0xce>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);	// Pin en SET
 80028a4:	2201      	movs	r2, #1
 80028a6:	2104      	movs	r1, #4
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ac:	f005 f95a 	bl	8007b64 <HAL_GPIO_WritePin>
		flagEnableHwLora	= 1;							// Indica que el chip esta habilitado
 80028b0:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <_Z9hwLoraOutv+0xf4>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]

		if ( flagResetHwLora ){								// Si se da la señal de reinicio
 80028b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <_Z9hwLoraOutv+0xfc>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d011      	beq.n	80028e2 <_Z9hwLoraOutv+0xbe>
			flagResetHwLora		= 0;						// Apaga señal
 80028be:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <_Z9hwLoraOutv+0xfc>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 80028c4:	2201      	movs	r2, #1
 80028c6:	4910      	ldr	r1, [pc, #64]	@ (8002908 <_Z9hwLoraOutv+0xe4>)
 80028c8:	480e      	ldr	r0, [pc, #56]	@ (8002904 <_Z9hwLoraOutv+0xe0>)
 80028ca:	f009 fc71 	bl	800c1b0 <HAL_UART_Receive_DMA>
			countResetHwLora2++;
 80028ce:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <_Z9hwLoraOutv+0x100>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <_Z9hwLoraOutv+0x100>)
 80028d8:	701a      	strb	r2, [r3, #0]
			stateResetHwLora	= 0;						// Pasa  S0
 80028da:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <_Z9hwLoraOutv+0xec>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateResetHwLora	= 1;						// Espera en S1
		}
		break;
 80028e0:	e007      	b.n	80028f2 <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 1;						// Espera en S1
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <_Z9hwLoraOutv+0xec>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
		break;
 80028e8:	e003      	b.n	80028f2 <_Z9hwLoraOutv+0xce>

	default:
		stateResetHwLora	= 0;
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <_Z9hwLoraOutv+0xec>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
		break;
 80028f0:	bf00      	nop

	}
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200004e9 	.word	0x200004e9
 80028fc:	20001158 	.word	0x20001158
 8002900:	2000115c 	.word	0x2000115c
 8002904:	200007ac 	.word	0x200007ac
 8002908:	20000ae4 	.word	0x20000ae4
 800290c:	200004e8 	.word	0x200004e8
 8002910:	200004ea 	.word	0x200004ea
 8002914:	200004ec 	.word	0x200004ec
 8002918:	200004eb 	.word	0x200004eb
 800291c:	200004ee 	.word	0x200004ee
 8002920:	20000531 	.word	0x20000531
 8002924:	200004f0 	.word	0x200004f0

08002928 <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d122      	bne.n	800297e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800293e:	4293      	cmp	r3, r2
 8002940:	d11d      	bne.n	800297e <_Z41__static_initialization_and_destruction_0ii+0x56>
uint16_t limitGpsAvailable	= 5000/superloop;
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	f241 3388 	movw	r3, #5000	@ 0x1388
 800294c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002950:	b29a      	uxth	r2, r3
 8002952:	4b0f      	ldr	r3, [pc, #60]	@ (8002990 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002954:	801a      	strh	r2, [r3, #0]
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002960:	fb93 f3f2 	sdiv	r3, r3, r2
 8002964:	b29a      	uxth	r2, r3
 8002966:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002968:	801a      	strh	r2, [r3, #0]
uint16_t limitUartGps	= 20000/superloop;
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002974:	fb93 f3f2 	sdiv	r3, r3, r2
 8002978:	b29a      	uxth	r2, r3
 800297a:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800297c:	801a      	strh	r2, [r3, #0]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000399 	.word	0x20000399
 8002990:	200004e4 	.word	0x200004e4
 8002994:	200004ee 	.word	0x200004ee
 8002998:	200004f4 	.word	0x200004f4

0800299c <_GLOBAL__sub_I_availableGps>:
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
 80029a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80029a4:	2001      	movs	r0, #1
 80029a6:	f7ff ffbf 	bl	8002928 <_Z41__static_initialization_and_destruction_0ii>
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_Z9linkInputv>:
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
uint16_t countBat;						// Contador bateria

/***** INPUT *****/

void linkInput(){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	linkInGps();
 80029b0:	f000 f94c 	bl	8002c4c <_Z9linkInGpsv>
	linkInLora();
 80029b4:	f000 f8cc 	bl	8002b50 <_Z10linkInLorav>
	linkBoton();
 80029b8:	f000 fb6a 	bl	8003090 <_Z9linkBotonv>
	linkAnalog();
 80029bc:	f000 fbce 	bl	800315c <_Z10linkAnalogv>
	linkBattery();
 80029c0:	f000 f802 	bl	80029c8 <_Z11linkBatteryv>
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_Z11linkBatteryv>:
 * Output:
 * 		errorHardware[6]
 *
 */

void linkBattery(){
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

	batScaled = battery *510/10000;		// Escalamiento de bateria
 80029cc:	4b58      	ldr	r3, [pc, #352]	@ (8002b30 <_Z11linkBatteryv+0x168>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4613      	mov	r3, r2
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4a56      	ldr	r2, [pc, #344]	@ (8002b34 <_Z11linkBatteryv+0x16c>)
 80029dc:	fb82 1203 	smull	r1, r2, r2, r3
 80029e0:	1312      	asrs	r2, r2, #12
 80029e2:	17db      	asrs	r3, r3, #31
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	4a54      	ldr	r2, [pc, #336]	@ (8002b38 <_Z11linkBatteryv+0x170>)
 80029e8:	6013      	str	r3, [r2, #0]

	switch ( stateBattery ){
 80029ea:	4b54      	ldr	r3, [pc, #336]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	f200 8095 	bhi.w	8002b1e <_Z11linkBatteryv+0x156>
 80029f4:	a201      	add	r2, pc, #4	@ (adr r2, 80029fc <_Z11linkBatteryv+0x34>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a11 	.word	0x08002a11
 8002a00:	08002a3f 	.word	0x08002a3f
 8002a04:	08002a61 	.word	0x08002a61
 8002a08:	08002aaf 	.word	0x08002aaf
 8002a0c:	08002ad1 	.word	0x08002ad1
	//////////////////////////
	// S0 -  WAIT STABILITY //
	//////////////////////////

	case 0:
		countBat++;						// Suma 1 al contador
 8002a10:	4b4b      	ldr	r3, [pc, #300]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b49      	ldr	r3, [pc, #292]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a1a:	801a      	strh	r2, [r3, #0]

		if ( countBat >= limitBat ){	// Si pasa limite
 8002a1c:	4b48      	ldr	r3, [pc, #288]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a1e:	881a      	ldrh	r2, [r3, #0]
 8002a20:	4b48      	ldr	r3, [pc, #288]	@ (8002b44 <_Z11linkBatteryv+0x17c>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d306      	bcc.n	8002a36 <_Z11linkBatteryv+0x6e>
			countBat		= 0;		// Reinicia contador
 8002a28:	4b45      	ldr	r3, [pc, #276]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;		// Pasa a S1
 8002a2e:	4b43      	ldr	r3, [pc, #268]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateBattery	= 0;		// Queda en S0
		}
		break;
 8002a34:	e077      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
			stateBattery	= 0;		// Queda en S0
 8002a36:	4b41      	ldr	r3, [pc, #260]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
		break;
 8002a3c:	e073      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
	////////////////////////
	// S1 - CHECK BATTERY //
	////////////////////////

	case 1:
		errorHardware[6]	= 0;			// Sin error
 8002a3e:	4b42      	ldr	r3, [pc, #264]	@ (8002b48 <_Z11linkBatteryv+0x180>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria baja del limite
 8002a44:	4b3c      	ldr	r3, [pc, #240]	@ (8002b38 <_Z11linkBatteryv+0x170>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b40      	ldr	r3, [pc, #256]	@ (8002b4c <_Z11linkBatteryv+0x184>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	da03      	bge.n	8002a58 <_Z11linkBatteryv+0x90>
			stateBattery	= 2;			// Pasa a S2
 8002a50:	4b3a      	ldr	r3, [pc, #232]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 1;			// Queda en S1
		}
		break;
 8002a56:	e066      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
			stateBattery	= 1;			// Queda en S1
 8002a58:	4b38      	ldr	r3, [pc, #224]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
		break;
 8002a5e:	e062      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S2 - CHECK STABILITY //
	//////////////////////////

	case 2:
		errorHardware[6]	= 0;			// Sin error
 8002a60:	4b39      	ldr	r3, [pc, #228]	@ (8002b48 <_Z11linkBatteryv+0x180>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8002a66:	4b36      	ldr	r3, [pc, #216]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b34      	ldr	r3, [pc, #208]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a70:	801a      	strh	r2, [r3, #0]

		if ( batScaled > thresholdBat ){	// Si la bateria esta Ok
 8002a72:	4b31      	ldr	r3, [pc, #196]	@ (8002b38 <_Z11linkBatteryv+0x170>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <_Z11linkBatteryv+0x184>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dd06      	ble.n	8002a8c <_Z11linkBatteryv+0xc4>
			countBat		= 0;			// Reinicia contador
 8002a7e:	4b30      	ldr	r3, [pc, #192]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Vuelve a S1
 8002a84:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 2;			// Queda en S2
		}
		break;
 8002a8a:	e04c      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si el contador pasa limite
 8002a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	4b2c      	ldr	r3, [pc, #176]	@ (8002b44 <_Z11linkBatteryv+0x17c>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d306      	bcc.n	8002aa6 <_Z11linkBatteryv+0xde>
			countBat		= 0;			// Reinicia contador
 8002a98:	4b29      	ldr	r3, [pc, #164]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
 8002a9e:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	701a      	strb	r2, [r3, #0]
		break;
 8002aa4:	e03f      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
			stateBattery	= 2;			// Queda en S2
 8002aa6:	4b25      	ldr	r3, [pc, #148]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	701a      	strb	r2, [r3, #0]
		break;
 8002aac:	e03b      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
	///////////////////////////////////
	// S3 - CHECK BATTERY WITH ERROR //
	///////////////////////////////////

	case 3:
		errorHardware[6]	= 1;			// Indica error
 8002aae:	4b26      	ldr	r3, [pc, #152]	@ (8002b48 <_Z11linkBatteryv+0x180>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria esta baja
 8002ab4:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <_Z11linkBatteryv+0x170>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <_Z11linkBatteryv+0x184>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	da03      	bge.n	8002ac8 <_Z11linkBatteryv+0x100>
			stateBattery	= 3;			// Sigue en S3
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 4;			// Pasa a S4
		}
		break;
 8002ac6:	e02e      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Pasa a S4
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002aca:	2204      	movs	r2, #4
 8002acc:	701a      	strb	r2, [r3, #0]
		break;
 8002ace:	e02a      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S4 - CHECK STABILITY //
	//////////////////////////

	case 4:
		errorHardware[6]	= 1;			// Indica error
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <_Z11linkBatteryv+0x180>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	3301      	adds	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002ae0:	801a      	strh	r2, [r3, #0]

		if ( batScaled < thresholdBat ){	// Si la bateria sigue baja
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <_Z11linkBatteryv+0x170>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <_Z11linkBatteryv+0x184>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	da06      	bge.n	8002afc <_Z11linkBatteryv+0x134>
			countBat		= 0;			// Reinicia contador
 8002aee:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Vuelve a S3
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002af6:	2203      	movs	r2, #3
 8002af8:	701a      	strb	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 4;			// Queda en S4
		}
		break;
 8002afa:	e014      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si contador pasa limite
 8002afc:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002afe:	881a      	ldrh	r2, [r3, #0]
 8002b00:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <_Z11linkBatteryv+0x17c>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d306      	bcc.n	8002b16 <_Z11linkBatteryv+0x14e>
			countBat		= 0;			// Reinicia contador
 8002b08:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <_Z11linkBatteryv+0x178>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
		break;
 8002b14:	e007      	b.n	8002b26 <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Queda en S4
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002b18:	2204      	movs	r2, #4
 8002b1a:	701a      	strb	r2, [r3, #0]
		break;
 8002b1c:	e003      	b.n	8002b26 <_Z11linkBatteryv+0x15e>

	default:
		stateBattery	= 0;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <_Z11linkBatteryv+0x174>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
		break;
 8002b24:	bf00      	nop
	}
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	20000448 	.word	0x20000448
 8002b34:	68db8bad 	.word	0x68db8bad
 8002b38:	20000528 	.word	0x20000528
 8002b3c:	20000526 	.word	0x20000526
 8002b40:	2000052e 	.word	0x2000052e
 8002b44:	2000052c 	.word	0x2000052c
 8002b48:	200004d8 	.word	0x200004d8
 8002b4c:	200000a8 	.word	0x200000a8

08002b50 <_Z10linkInLorav>:
 *				INPUT	:	flagEnableHwLora
 *
 *				OUTPUT	:	flagWdLora
 */

void linkInLora(){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( loraInput.newResponse() ){						// Si hay nueva respuesta desde el modulo lora
 8002b54:	4833      	ldr	r0, [pc, #204]	@ (8002c24 <_Z10linkInLorav+0xd4>)
 8002b56:	f000 ff49 	bl	80039ec <_ZN9loraInput11newResponseEv>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <_Z10linkInLorav+0x52>
		responseLora	 = loraInput.response();		// Guarda la respuesta
 8002b60:	4830      	ldr	r0, [pc, #192]	@ (8002c24 <_Z10linkInLorav+0xd4>)
 8002b62:	f000 ff56 	bl	8003a12 <_ZN9loraInput8responseEv>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4a2f      	ldr	r2, [pc, #188]	@ (8002c28 <_Z10linkInLorav+0xd8>)
 8002b6a:	6013      	str	r3, [r2, #0]
		responseLoraSize = loraInput.responseSize();	// Guarda tamaño de la respuesta
 8002b6c:	482d      	ldr	r0, [pc, #180]	@ (8002c24 <_Z10linkInLorav+0xd4>)
 8002b6e:	f000 ff5c 	bl	8003a2a <_ZN9loraInput12responseSizeEv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <_Z10linkInLorav+0xdc>)
 8002b78:	701a      	strb	r2, [r3, #0]

		loraCheck.newResponse(responseLora, responseLoraSize);	// Inserta respuesta en modulo de checkeo de respuesta
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <_Z10linkInLorav+0xd8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <_Z10linkInLorav+0xdc>)
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	482a      	ldr	r0, [pc, #168]	@ (8002c30 <_Z10linkInLorav+0xe0>)
 8002b86:	f000 fe55 	bl	8003834 <_ZN9loraCheck11newResponseEPhh>
		loraTimeWd.setInput();									// Indica al watchdog que llego mensaje
 8002b8a:	482a      	ldr	r0, [pc, #168]	@ (8002c34 <_Z10linkInLorav+0xe4>)
 8002b8c:	f000 fe0b 	bl	80037a6 <_ZN9wdTimeout8setInputEv>
		qttyMessagesInputs++;									// Contador de respuestas recibidas
 8002b90:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <_Z10linkInLorav+0xe8>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b27      	ldr	r3, [pc, #156]	@ (8002c38 <_Z10linkInLorav+0xe8>)
 8002b9a:	701a      	strb	r2, [r3, #0]
		flagUartGps	= 1;
 8002b9c:	4b27      	ldr	r3, [pc, #156]	@ (8002c3c <_Z10linkInLorav+0xec>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]

	//////////////
	// WATCHDOG //
	//////////////

	switch ( stateWdLora ){
 8002ba2:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <_Z10linkInLorav+0xf0>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d031      	beq.n	8002c0e <_Z10linkInLorav+0xbe>
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	dc36      	bgt.n	8002c1c <_Z10linkInLorav+0xcc>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <_Z10linkInLorav+0x68>
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d012      	beq.n	8002bdc <_Z10linkInLorav+0x8c>
		flagWdLora	= 1;			// Reinicia chip por hw
		stateWdLora	= 0;			// Vuelve a S0
		break;

	default:
		break;
 8002bb6:	e031      	b.n	8002c1c <_Z10linkInLorav+0xcc>
		flagWdLora	= 0;			// Reinicia indicador de reset
 8002bb8:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <_Z10linkInLorav+0xf4>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
		if ( flagEnableHwLora ){	// Si el chip esta habilitado
 8002bbe:	4b22      	ldr	r3, [pc, #136]	@ (8002c48 <_Z10linkInLorav+0xf8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <_Z10linkInLorav+0x84>
			loraTimeWd.setOutput();	// Indica que salio un mensaje
 8002bc6:	481b      	ldr	r0, [pc, #108]	@ (8002c34 <_Z10linkInLorav+0xe4>)
 8002bc8:	f000 fdbd 	bl	8003746 <_ZN9wdTimeout9setOutputEv>
			stateWdLora = 1;		// Pasa a S1
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <_Z10linkInLorav+0xf0>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
		break;
 8002bd2:	e024      	b.n	8002c1e <_Z10linkInLorav+0xce>
			stateWdLora = 0;		// Espera en S0
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <_Z10linkInLorav+0xf0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
		break;
 8002bda:	e020      	b.n	8002c1e <_Z10linkInLorav+0xce>
		loraTimeWd.addOne();			// Suma 1 al wd
 8002bdc:	4815      	ldr	r0, [pc, #84]	@ (8002c34 <_Z10linkInLorav+0xe4>)
 8002bde:	f000 fdc2 	bl	8003766 <_ZN9wdTimeout6addOneEv>
		if ( loraTimeWd.timeOut() ){	// Si se cumple timeout
 8002be2:	4814      	ldr	r0, [pc, #80]	@ (8002c34 <_Z10linkInLorav+0xe4>)
 8002be4:	f000 fdf3 	bl	80037ce <_ZN9wdTimeout7timeOutEv>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <_Z10linkInLorav+0xa6>
			stateWdLora = 2;			// Pasa a S2
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <_Z10linkInLorav+0xf0>)
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]
		break;
 8002bf4:	e013      	b.n	8002c1e <_Z10linkInLorav+0xce>
		else if ( flagEnableHwLora ){	// Si sigue habilitado por hw
 8002bf6:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <_Z10linkInLorav+0xf8>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <_Z10linkInLorav+0xb6>
			stateWdLora = 1;			// Espera en S1
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <_Z10linkInLorav+0xf0>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
		break;
 8002c04:	e00b      	b.n	8002c1e <_Z10linkInLorav+0xce>
			stateWdLora	= 0;			// Pasa a S0
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <_Z10linkInLorav+0xf0>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
		break;
 8002c0c:	e007      	b.n	8002c1e <_Z10linkInLorav+0xce>
		flagWdLora	= 1;			// Reinicia chip por hw
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <_Z10linkInLorav+0xf4>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
		stateWdLora	= 0;			// Vuelve a S0
 8002c14:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <_Z10linkInLorav+0xf0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
		break;
 8002c1a:	e000      	b.n	8002c1e <_Z10linkInLorav+0xce>
		break;
 8002c1c:	bf00      	nop
	}
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000b28 	.word	0x20000b28
 8002c28:	20000504 	.word	0x20000504
 8002c2c:	20000508 	.word	0x20000508
 8002c30:	20000b68 	.word	0x20000b68
 8002c34:	2000107c 	.word	0x2000107c
 8002c38:	20000509 	.word	0x20000509
 8002c3c:	200004e8 	.word	0x200004e8
 8002c40:	2000050b 	.word	0x2000050b
 8002c44:	20000530 	.word	0x20000530
 8002c48:	200004eb 	.word	0x200004eb

08002c4c <_Z9linkInGpsv>:
 *				stopGps		|	Indicador detener GPS
 *				warning[]	|	Indica que no hay gps validos
 *
 */

void linkInGps(){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0

	switch ( stateGpsLink ){
 8002c50:	4b45      	ldr	r3, [pc, #276]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	f200 8204 	bhi.w	8003062 <_Z9linkInGpsv+0x416>
 8002c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <_Z9linkInGpsv+0x14>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c79 	.word	0x08002c79
 8002c64:	08002c97 	.word	0x08002c97
 8002c68:	08002cfb 	.word	0x08002cfb
 8002c6c:	08002d21 	.word	0x08002d21
 8002c70:	08002d45 	.word	0x08002d45
 8002c74:	08002d95 	.word	0x08002d95
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		if ( startGps ){			// Si se inicia GPS
 8002c78:	4b3c      	ldr	r3, [pc, #240]	@ (8002d6c <_Z9linkInGpsv+0x120>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <_Z9linkInGpsv+0x42>
			startGps		= 0;	// Reinicia indicador
 8002c80:	4b3a      	ldr	r3, [pc, #232]	@ (8002d6c <_Z9linkInGpsv+0x120>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 1;	// Pasa a S1
 8002c86:	4b38      	ldr	r3, [pc, #224]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateGpsLink	= 0;	// Espera en S0
		}
		break;
 8002c8c:	e1e9      	b.n	8003062 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 0;	// Espera en S0
 8002c8e:	4b36      	ldr	r3, [pc, #216]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
		break;
 8002c94:	e1e5      	b.n	8003062 <_Z9linkInGpsv+0x416>
	///////////////////////////
	// S1 - WAIT FOR MESSAGE //
	///////////////////////////

	case 1:
		countGpsLink++;								// Suma 1 al contador
 8002c96:	4b36      	ldr	r3, [pc, #216]	@ (8002d70 <_Z9linkInGpsv+0x124>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	4a34      	ldr	r2, [pc, #208]	@ (8002d70 <_Z9linkInGpsv+0x124>)
 8002c9e:	6013      	str	r3, [r2, #0]
		gpsNewMessage	= 0;						// Reinicia flag nuevo mensaje
 8002ca0:	4b34      	ldr	r3, [pc, #208]	@ (8002d74 <_Z9linkInGpsv+0x128>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]

		if ( gpsInput.getNewMessage() ){			// Si llega nuevo mensaje
 8002ca6:	4834      	ldr	r0, [pc, #208]	@ (8002d78 <_Z9linkInGpsv+0x12c>)
 8002ca8:	f7fe ffc1 	bl	8001c2e <_ZN8gpsInput13getNewMessageEv>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <_Z9linkInGpsv+0x7a>
			gpsNewMessage	= 1;					// Marca flag de nuevo mensaje
 8002cb2:	4b30      	ldr	r3, [pc, #192]	@ (8002d74 <_Z9linkInGpsv+0x128>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
			gpsValid		= gpsInput.getValid();	// Copia mensaje valido
 8002cb8:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <_Z9linkInGpsv+0x12c>)
 8002cba:	f7fe ffa2 	bl	8001c02 <_ZN8gpsInput8getValidEv>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <_Z9linkInGpsv+0x130>)
 8002cc4:	701a      	strb	r2, [r3, #0]
		}

		if ( countGpsLink >= limitGpsLink ){		// Si pasa limite de 5 min
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d70 <_Z9linkInGpsv+0x124>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <_Z9linkInGpsv+0x134>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	db03      	blt.n	8002cda <_Z9linkInGpsv+0x8e>
			stateGpsLink	= 2;					// Cierra en S2
 8002cd2:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 4;					// Pasa a S4
		}*/
		else{										// Si no
			stateGpsLink	= 1;					// Espera
		}
		break;
 8002cd8:	e1c3      	b.n	8003062 <_Z9linkInGpsv+0x416>
		else if ( gpsNewMessage && gpsValid ){		// Si llega mensaje valido
 8002cda:	4b26      	ldr	r3, [pc, #152]	@ (8002d74 <_Z9linkInGpsv+0x128>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <_Z9linkInGpsv+0xa6>
 8002ce2:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <_Z9linkInGpsv+0x130>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <_Z9linkInGpsv+0xa6>
			stateGpsLink	= 3;					// Pasa a S3
 8002cea:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002cec:	2203      	movs	r2, #3
 8002cee:	701a      	strb	r2, [r3, #0]
		break;
 8002cf0:	e1b7      	b.n	8003062 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;					// Espera
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
		break;
 8002cf8:	e1b3      	b.n	8003062 <_Z9linkInGpsv+0x416>
	///////////////////////
	// S2 - STOP MEASURE //
	///////////////////////

	case 2:
		savedGps			= 0;	//  Reinicia indicador coordenadas guardadas
 8002cfa:	4b22      	ldr	r3, [pc, #136]	@ (8002d84 <_Z9linkInGpsv+0x138>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
		countValidMsgGps	= 0;	//	Reinicia contador mensajes validos
 8002d00:	4b21      	ldr	r3, [pc, #132]	@ (8002d88 <_Z9linkInGpsv+0x13c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
		countInvalidMsgGps	= 0;	//	Reinicia contador mensajes invalidos
 8002d06:	4b21      	ldr	r3, [pc, #132]	@ (8002d8c <_Z9linkInGpsv+0x140>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
		countGpsLink		= 0;	//	Reinicia contador de espera mensajes gps
 8002d0c:	4b18      	ldr	r3, [pc, #96]	@ (8002d70 <_Z9linkInGpsv+0x124>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
		stopGps				= 1;	//	Fija apagado de GPS
 8002d12:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <_Z9linkInGpsv+0x144>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
		stateGpsLink		= 0;	//	Vuelve a S0
 8002d18:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
		break;
 8002d1e:	e1a0      	b.n	8003062 <_Z9linkInGpsv+0x416>
	////////////////////////////
	// S3 - NEW VALID MESSAGE //
	////////////////////////////

	case 3:
		countValidMsgGps++;				// Suma 1 a mensaje valids nuevos
 8002d20:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <_Z9linkInGpsv+0x13c>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	4b17      	ldr	r3, [pc, #92]	@ (8002d88 <_Z9linkInGpsv+0x13c>)
 8002d2a:	701a      	strb	r2, [r3, #0]

		if ( countValidMsgGps >= 4 ){	// Si es mayor a 10 mensajes
 8002d2c:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <_Z9linkInGpsv+0x13c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d903      	bls.n	8002d3c <_Z9linkInGpsv+0xf0>
			stateGpsLink	= 5;		// Pasa a S5
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002d36:	2205      	movs	r2, #5
 8002d38:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateGpsLink	= 1;		// Vuelve a S5
		}
		break;
 8002d3a:	e192      	b.n	8003062 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;		// Vuelve a S5
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
		break;
 8002d42:	e18e      	b.n	8003062 <_Z9linkInGpsv+0x416>
	//////////////////////////////
	// S4 - NEW INVALID MESSAGE //
	//////////////////////////////

	case 4:
		countInvalidMsgGps++;				// Suma 1 a mensaje invalido nuevos
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <_Z9linkInGpsv+0x140>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <_Z9linkInGpsv+0x140>)
 8002d4e:	701a      	strb	r2, [r3, #0]

		if ( countInvalidMsgGps >= 30 ){	// Si es mayor a 10 mensajes
 8002d50:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <_Z9linkInGpsv+0x140>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b1d      	cmp	r3, #29
 8002d56:	d903      	bls.n	8002d60 <_Z9linkInGpsv+0x114>
			stateGpsLink	= 2;			// Pasa a S2
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateGpsLink	= 1;			// Pasa a S1
		}
		break;
 8002d5e:	e180      	b.n	8003062 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;			// Pasa a S1
 8002d60:	4b01      	ldr	r3, [pc, #4]	@ (8002d68 <_Z9linkInGpsv+0x11c>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
		break;
 8002d66:	e17c      	b.n	8003062 <_Z9linkInGpsv+0x416>
 8002d68:	200004f6 	.word	0x200004f6
 8002d6c:	20000397 	.word	0x20000397
 8002d70:	200004f8 	.word	0x200004f8
 8002d74:	200004f7 	.word	0x200004f7
 8002d78:	20000a3c 	.word	0x20000a3c
 8002d7c:	20000ae0 	.word	0x20000ae0
 8002d80:	200004fc 	.word	0x200004fc
 8002d84:	20000ae2 	.word	0x20000ae2
 8002d88:	20000500 	.word	0x20000500
 8002d8c:	20000501 	.word	0x20000501
 8002d90:	20000ae1 	.word	0x20000ae1
	////////////////////////////////
	// S5 - SAVE LATITUD/LONGITUD //
	////////////////////////////////

	case 5:
		savedGps	= 1;										// Indica que se guardó valor correctamente
 8002d94:	4bb4      	ldr	r3, [pc, #720]	@ (8003068 <_Z9linkInGpsv+0x41c>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]

		latitud =	(gpsInput.latitud[0] - '0')*1000;			// Guarda unidad de mil latitud
 8002d9a:	4bb4      	ldr	r3, [pc, #720]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002d9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002da0:	3b30      	subs	r3, #48	@ 0x30
 8002da2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db2:	4baf      	ldr	r3, [pc, #700]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002db4:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[1] - '0')*100;			// Guarda centena de latitud
 8002db8:	4bac      	ldr	r3, [pc, #688]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002dba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002dbe:	3b30      	subs	r3, #48	@ 0x30
 8002dc0:	2264      	movs	r2, #100	@ 0x64
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dce:	4ba8      	ldr	r3, [pc, #672]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	4ba5      	ldr	r3, [pc, #660]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002dda:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[2] - '0')*10;				// Guarda decena de latitud
 8002dde:	4ba3      	ldr	r3, [pc, #652]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002df8:	4b9d      	ldr	r3, [pc, #628]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e02:	4b9b      	ldr	r3, [pc, #620]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002e04:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[3] - '0')*1;				// Guarda unidad de latitud
 8002e08:	4b98      	ldr	r3, [pc, #608]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e0e:	3b30      	subs	r3, #48	@ 0x30
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e18:	4b95      	ldr	r3, [pc, #596]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e22:	4b93      	ldr	r3, [pc, #588]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002e24:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[5]) - '0')/10;		// Guarda decima de latitud
 8002e28:	4b90      	ldr	r3, [pc, #576]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002e2a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e36:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003074 <_Z9linkInGpsv+0x428>
 8002e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e3e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e46:	4b8a      	ldr	r3, [pc, #552]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	4b87      	ldr	r3, [pc, #540]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002e52:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[6]) - '0')/100;	// Guarda centecina de latitud
 8002e56:	4b85      	ldr	r3, [pc, #532]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002e58:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e64:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003074 <_Z9linkInGpsv+0x428>
 8002e68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e6c:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003078 <_Z9linkInGpsv+0x42c>
 8002e70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e74:	4b7e      	ldr	r3, [pc, #504]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7e:	4b7c      	ldr	r3, [pc, #496]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002e80:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[7]) - '0')/1000;	// Guarda milecima de latitud
 8002e84:	4b79      	ldr	r3, [pc, #484]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002e86:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8003074 <_Z9linkInGpsv+0x428>
 8002e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e9a:	eddf 6a78 	vldr	s13, [pc, #480]	@ 800307c <_Z9linkInGpsv+0x430>
 8002e9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ea2:	4b73      	ldr	r3, [pc, #460]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	4b70      	ldr	r3, [pc, #448]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002eae:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[8]) - '0')/10000;	// Guarda decima de milecima de latitud
 8002eb2:	4b6e      	ldr	r3, [pc, #440]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002eb4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002eb8:	ee07 3a90 	vmov	s15, r3
 8002ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003074 <_Z9linkInGpsv+0x428>
 8002ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ec8:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8003080 <_Z9linkInGpsv+0x434>
 8002ecc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ed0:	4b67      	ldr	r3, [pc, #412]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002ed2:	edd3 7a00 	vldr	s15, [r3]
 8002ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eda:	4b65      	ldr	r3, [pc, #404]	@ (8003070 <_Z9linkInGpsv+0x424>)
 8002edc:	edc3 7a00 	vstr	s15, [r3]

		longitud =	(gpsInput.longitud[0] - '0')*10000;			// Guarda decena de mil longitud
 8002ee0:	4b62      	ldr	r3, [pc, #392]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002ee2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002ee6:	3b30      	subs	r3, #48	@ 0x30
 8002ee8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef8:	4b62      	ldr	r3, [pc, #392]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002efa:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[1] - '0')*1000;			// Guarda unidad de mil longitud
 8002efe:	4b5b      	ldr	r3, [pc, #364]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002f00:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002f04:	3b30      	subs	r3, #48	@ 0x30
 8002f06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f16:	4b5b      	ldr	r3, [pc, #364]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f20:	4b58      	ldr	r3, [pc, #352]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002f22:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[2] - '0')*100;			// Guarda centecima de longitud
 8002f26:	4b51      	ldr	r3, [pc, #324]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002f28:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002f2c:	3b30      	subs	r3, #48	@ 0x30
 8002f2e:	2264      	movs	r2, #100	@ 0x64
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f3c:	4b51      	ldr	r3, [pc, #324]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002f3e:	edd3 7a00 	vldr	s15, [r3]
 8002f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f46:	4b4f      	ldr	r3, [pc, #316]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002f48:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[3] - '0')*10;			// Guarda decena de longitud
 8002f4c:	4b47      	ldr	r3, [pc, #284]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002f4e:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8002f52:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f66:	4b47      	ldr	r3, [pc, #284]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f70:	4b44      	ldr	r3, [pc, #272]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002f72:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[4] - '0')*1;				// Guarda unidad de longitud
 8002f76:	4b3d      	ldr	r3, [pc, #244]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002f78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f7c:	3b30      	subs	r3, #48	@ 0x30
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f86:	4b3f      	ldr	r3, [pc, #252]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002f88:	edd3 7a00 	vldr	s15, [r3]
 8002f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f90:	4b3c      	ldr	r3, [pc, #240]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002f92:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[6]) - '0')/10;	// Guarda decima de longitud
 8002f96:	4b35      	ldr	r3, [pc, #212]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002f98:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003074 <_Z9linkInGpsv+0x428>
 8002fa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fac:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002fb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fb4:	4b33      	ldr	r3, [pc, #204]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbe:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002fc0:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[7]) - '0')/100;	// Guarda centecima de longitud
 8002fc4:	4b29      	ldr	r3, [pc, #164]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002fc6:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003074 <_Z9linkInGpsv+0x428>
 8002fd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fda:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003078 <_Z9linkInGpsv+0x42c>
 8002fde:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fe2:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fec:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8002fee:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[8]) - '0')/1000;	// Guarda milesima de longitud
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <_Z9linkInGpsv+0x420>)
 8002ff4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003000:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003074 <_Z9linkInGpsv+0x428>
 8003004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003008:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800307c <_Z9linkInGpsv+0x430>
 800300c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003010:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8003012:	edd3 7a00 	vldr	s15, [r3]
 8003016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301a:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <_Z9linkInGpsv+0x438>)
 800301c:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[9]) - '0')/10000;	// Guarda decima de milesima de longitud
 8003020:	4b12      	ldr	r3, [pc, #72]	@ (800306c <_Z9linkInGpsv+0x420>)
 8003022:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003074 <_Z9linkInGpsv+0x428>
 8003032:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003036:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8003080 <_Z9linkInGpsv+0x434>
 800303a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800303e:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <_Z9linkInGpsv+0x438>)
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003048:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <_Z9linkInGpsv+0x438>)
 800304a:	edc3 7a00 	vstr	s15, [r3]

		countSavedGps++;										// Contador de veces que se guardó un valor correctamente
 800304e:	4b0e      	ldr	r3, [pc, #56]	@ (8003088 <_Z9linkInGpsv+0x43c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <_Z9linkInGpsv+0x43c>)
 8003058:	701a      	strb	r2, [r3, #0]
		stateGpsLink	= 2;									// Pasa a S2
 800305a:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <_Z9linkInGpsv+0x440>)
 800305c:	2202      	movs	r2, #2
 800305e:	701a      	strb	r2, [r3, #0]
		break;
 8003060:	bf00      	nop
	}

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000ae2 	.word	0x20000ae2
 800306c:	20000a3c 	.word	0x20000a3c
 8003070:	20000ad8 	.word	0x20000ad8
 8003074:	42400000 	.word	0x42400000
 8003078:	42c80000 	.word	0x42c80000
 800307c:	447a0000 	.word	0x447a0000
 8003080:	461c4000 	.word	0x461c4000
 8003084:	20000adc 	.word	0x20000adc
 8003088:	20000502 	.word	0x20000502
 800308c:	200004f6 	.word	0x200004f6

08003090 <_Z9linkBotonv>:
 *	INPUT	:	flagBoton
 *	OUTPUT	:	displayPhy.enable
 */


void linkBoton(){
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0

	switch ( stateEnableDisplay ){
 8003094:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <_Z9linkBotonv+0x74>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <_Z9linkBotonv+0x12>
 800309c:	2b01      	cmp	r3, #1
 800309e:	d013      	beq.n	80030c8 <_Z9linkBotonv+0x38>
 80030a0:	e029      	b.n	80030f6 <_Z9linkBotonv+0x66>
	//////////////////////
	// S0 - WAIT BUTTON //
	//////////////////////

	case 0:
		displayPhy.enable(0);			//	Inhabilita display
 80030a2:	2100      	movs	r1, #0
 80030a4:	4818      	ldr	r0, [pc, #96]	@ (8003108 <_Z9linkBotonv+0x78>)
 80030a6:	f7fd fa19 	bl	80004dc <_ZN15displayPhysical6enableEb>
		countEnableDisplay	= 0;		//	Reinicia contador
 80030aa:	4b18      	ldr	r3, [pc, #96]	@ (800310c <_Z9linkBotonv+0x7c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

		if ( flagBoton ){				//	Si se presiona el boton
 80030b0:	4b17      	ldr	r3, [pc, #92]	@ (8003110 <_Z9linkBotonv+0x80>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <_Z9linkBotonv+0x30>
			stateEnableDisplay	= 1;	//	Pasa a S1
 80030b8:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <_Z9linkBotonv+0x74>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
		}
		else{							//	Si no
			stateEnableDisplay	= 0;	//	Espera en S0
		}
		break;
 80030be:	e01e      	b.n	80030fe <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 0;	//	Espera en S0
 80030c0:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <_Z9linkBotonv+0x74>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
		break;
 80030c6:	e01a      	b.n	80030fe <_Z9linkBotonv+0x6e>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		displayPhy.enable(1);							// Habilita display
 80030c8:	2101      	movs	r1, #1
 80030ca:	480f      	ldr	r0, [pc, #60]	@ (8003108 <_Z9linkBotonv+0x78>)
 80030cc:	f7fd fa06 	bl	80004dc <_ZN15displayPhysical6enableEb>

		countEnableDisplay++;							// Suma 1 al contador
 80030d0:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <_Z9linkBotonv+0x7c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <_Z9linkBotonv+0x7c>)
 80030d8:	6013      	str	r3, [r2, #0]

		if ( countEnableDisplay > limitEnableDisplay ){	// Si llega al limite
 80030da:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <_Z9linkBotonv+0x7c>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <_Z9linkBotonv+0x84>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	dd03      	ble.n	80030ee <_Z9linkBotonv+0x5e>
			stateEnableDisplay	= 0;					// Vuelve a S0
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <_Z9linkBotonv+0x74>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateEnableDisplay	= 1;					// Espera en S1
		}
		break;
 80030ec:	e007      	b.n	80030fe <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 1;					// Espera en S1
 80030ee:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <_Z9linkBotonv+0x74>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
		break;
 80030f4:	e003      	b.n	80030fe <_Z9linkBotonv+0x6e>

	default:
		stateEnableDisplay	= 0;
 80030f6:	4b03      	ldr	r3, [pc, #12]	@ (8003104 <_Z9linkBotonv+0x74>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
		break;
 80030fc:	bf00      	nop

	}
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000514 	.word	0x20000514
 8003108:	20001088 	.word	0x20001088
 800310c:	2000050c 	.word	0x2000050c
 8003110:	20000a38 	.word	0x20000a38
 8003114:	20000510 	.word	0x20000510

08003118 <_Z7adc2PPMth>:
 *	MODE 2	:	ADC interno A1
 *	MODE 3	:	ADC externo B1
 *	MODE 4	:	ADC interno B1
 */

uint8_t adc2PPM( uint16_t signal, uint8_t mode){
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	460a      	mov	r2, r1
 8003122:	80fb      	strh	r3, [r7, #6]
 8003124:	4613      	mov	r3, r2
 8003126:	717b      	strb	r3, [r7, #5]
	uint8_t result;

	result	= 1;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]

	switch ( mode ){
 800312c:	797b      	ldrb	r3, [r7, #5]
 800312e:	3b01      	subs	r3, #1
 8003130:	2b03      	cmp	r3, #3
 8003132:	d80b      	bhi.n	800314c <_Z7adc2PPMth+0x34>
 8003134:	a201      	add	r2, pc, #4	@ (adr r2, 800313c <_Z7adc2PPMth+0x24>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	0800314d 	.word	0x0800314d
 8003140:	0800314d 	.word	0x0800314d
 8003144:	0800314d 	.word	0x0800314d
 8003148:	0800314d 	.word	0x0800314d

	case 4:
		break;
	}

	return result;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop

0800315c <_Z10linkAnalogv>:
 *				flagAlarm_PPM,
 *				flagAlarm_TEMP
 *				flagAlarm_HUM
 */

void linkAnalog(){
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0

	/////////////////
	// CALIBRATION //
	/////////////////

	switch ( stateCalibration ){
 8003160:	4b6a      	ldr	r3, [pc, #424]	@ (800330c <_Z10linkAnalogv+0x1b0>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <_Z10linkAnalogv+0x12>
 8003168:	2b01      	cmp	r3, #1
 800316a:	d01d      	beq.n	80031a8 <_Z10linkAnalogv+0x4c>
 800316c:	e018      	b.n	80031a0 <_Z10linkAnalogv+0x44>
	///////////////////////////////
	// S0 - WAIT FOR CALIBRATION //
	///////////////////////////////

	case 0:
		countCalibration++;								// Suma 1 al contador
 800316e:	4b68      	ldr	r3, [pc, #416]	@ (8003310 <_Z10linkAnalogv+0x1b4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3301      	adds	r3, #1
 8003174:	4a66      	ldr	r2, [pc, #408]	@ (8003310 <_Z10linkAnalogv+0x1b4>)
 8003176:	6013      	str	r3, [r2, #0]
		enableSensors	= 0;							// Deshabilita sensores
 8003178:	4b66      	ldr	r3, [pc, #408]	@ (8003314 <_Z10linkAnalogv+0x1b8>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]

		if ( countCalibration >= limitCalibration ){	// Si se cumple el tiempo de calibracion
 800317e:	4b64      	ldr	r3, [pc, #400]	@ (8003310 <_Z10linkAnalogv+0x1b4>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b65      	ldr	r3, [pc, #404]	@ (8003318 <_Z10linkAnalogv+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	db06      	blt.n	8003198 <_Z10linkAnalogv+0x3c>
			enableSensors		= 1;					// Habilita sensores
 800318a:	4b62      	ldr	r3, [pc, #392]	@ (8003314 <_Z10linkAnalogv+0x1b8>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
			stateCalibration	= 1;					// Pasa a S1
 8003190:	4b5e      	ldr	r3, [pc, #376]	@ (800330c <_Z10linkAnalogv+0x1b0>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateCalibration	= 0;					// Espera en S0
		}
		break;
 8003196:	e008      	b.n	80031aa <_Z10linkAnalogv+0x4e>
			stateCalibration	= 0;					// Espera en S0
 8003198:	4b5c      	ldr	r3, [pc, #368]	@ (800330c <_Z10linkAnalogv+0x1b0>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
		break;
 800319e:	e004      	b.n	80031aa <_Z10linkAnalogv+0x4e>
	////////////////////
	case 1:
		break;

	default:
		stateCalibration	= 0;
 80031a0:	4b5a      	ldr	r3, [pc, #360]	@ (800330c <_Z10linkAnalogv+0x1b0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
		break;
 80031a6:	e000      	b.n	80031aa <_Z10linkAnalogv+0x4e>
		break;
 80031a8:	bf00      	nop

	////////////
	// A1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habilitado el ADC
 80031aa:	4b5c      	ldr	r3, [pc, #368]	@ (800331c <_Z10linkAnalogv+0x1c0>)
 80031ac:	795b      	ldrb	r3, [r3, #5]
 80031ae:	f083 0301 	eor.w	r3, r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00f      	beq.n	80031d8 <_Z10linkAnalogv+0x7c>
		alpha_A1_PPM = adc2PPM(alphaA, 1) * enableSensors;			// Convierte en PPM
 80031b8:	4b59      	ldr	r3, [pc, #356]	@ (8003320 <_Z10linkAnalogv+0x1c4>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff ffaa 	bl	8003118 <_Z7adc2PPMth>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b52      	ldr	r3, [pc, #328]	@ (8003314 <_Z10linkAnalogv+0x1b8>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	fb12 f303 	smulbb	r3, r2, r3
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b54      	ldr	r3, [pc, #336]	@ (8003324 <_Z10linkAnalogv+0x1c8>)
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e00e      	b.n	80031f6 <_Z10linkAnalogv+0x9a>
	}
	else{															// Si no esta habiltiado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 2) * enableSensors;	// Convierte en PPM
 80031d8:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <_Z10linkAnalogv+0x1cc>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	2102      	movs	r1, #2
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff9a 	bl	8003118 <_Z7adc2PPMth>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b4a      	ldr	r3, [pc, #296]	@ (8003314 <_Z10linkAnalogv+0x1b8>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	fb12 f303 	smulbb	r3, r2, r3
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003324 <_Z10linkAnalogv+0x1c8>)
 80031f4:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors){		// Si pasa de 5 ppm
 80031f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <_Z10linkAnalogv+0x1c8>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b32      	cmp	r3, #50	@ 0x32
 80031fc:	d907      	bls.n	800320e <_Z10linkAnalogv+0xb2>
 80031fe:	4b45      	ldr	r3, [pc, #276]	@ (8003314 <_Z10linkAnalogv+0x1b8>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <_Z10linkAnalogv+0xb2>
		flagAlarm_PPM	= 1;						// Indica alarma
 8003206:	4b49      	ldr	r3, [pc, #292]	@ (800332c <_Z10linkAnalogv+0x1d0>)
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e002      	b.n	8003214 <_Z10linkAnalogv+0xb8>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 800320e:	4b47      	ldr	r3, [pc, #284]	@ (800332c <_Z10linkAnalogv+0x1d0>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]

	////////////
	// B1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habitado el ADC
 8003214:	4b41      	ldr	r3, [pc, #260]	@ (800331c <_Z10linkAnalogv+0x1c0>)
 8003216:	795b      	ldrb	r3, [r3, #5]
 8003218:	f083 0301 	eor.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00f      	beq.n	8003242 <_Z10linkAnalogv+0xe6>
		alpha_A1_PPM = adc2PPM(alphaA, 3) * enableSensors;			// Convierte en PPM
 8003222:	4b3f      	ldr	r3, [pc, #252]	@ (8003320 <_Z10linkAnalogv+0x1c4>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	2103      	movs	r1, #3
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff75 	bl	8003118 <_Z7adc2PPMth>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	4b38      	ldr	r3, [pc, #224]	@ (8003314 <_Z10linkAnalogv+0x1b8>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	fb12 f303 	smulbb	r3, r2, r3
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b39      	ldr	r3, [pc, #228]	@ (8003324 <_Z10linkAnalogv+0x1c8>)
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e00e      	b.n	8003260 <_Z10linkAnalogv+0x104>
	}
	else{															// Si no esta habilitado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 4) * enableSensors;	// Convierte en PPM
 8003242:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <_Z10linkAnalogv+0x1cc>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	2104      	movs	r1, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff65 	bl	8003118 <_Z7adc2PPMth>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	4b30      	ldr	r3, [pc, #192]	@ (8003314 <_Z10linkAnalogv+0x1b8>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	fb12 f303 	smulbb	r3, r2, r3
 800325a:	b2da      	uxtb	r2, r3
 800325c:	4b31      	ldr	r3, [pc, #196]	@ (8003324 <_Z10linkAnalogv+0x1c8>)
 800325e:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors ){		// Si pasa de 5 ppm
 8003260:	4b30      	ldr	r3, [pc, #192]	@ (8003324 <_Z10linkAnalogv+0x1c8>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b32      	cmp	r3, #50	@ 0x32
 8003266:	d907      	bls.n	8003278 <_Z10linkAnalogv+0x11c>
 8003268:	4b2a      	ldr	r3, [pc, #168]	@ (8003314 <_Z10linkAnalogv+0x1b8>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <_Z10linkAnalogv+0x11c>
		flagAlarm_PPM	= 1;						// Indica alarma
 8003270:	4b2e      	ldr	r3, [pc, #184]	@ (800332c <_Z10linkAnalogv+0x1d0>)
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e002      	b.n	800327e <_Z10linkAnalogv+0x122>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8003278:	4b2c      	ldr	r3, [pc, #176]	@ (800332c <_Z10linkAnalogv+0x1d0>)
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]

	//////////////
	// TEMP HUM //
	///////////////

	if ( !errorHardware[1] ){			// Si hay sensor externo
 800327e:	4b27      	ldr	r3, [pc, #156]	@ (800331c <_Z10linkAnalogv+0x1c0>)
 8003280:	785b      	ldrb	r3, [r3, #1]
 8003282:	f083 0301 	eor.w	r3, r3, #1
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <_Z10linkAnalogv+0x142>
		tempApp	= tempExtern;			// Copia temperatura
 800328c:	4b28      	ldr	r3, [pc, #160]	@ (8003330 <_Z10linkAnalogv+0x1d4>)
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	4b28      	ldr	r3, [pc, #160]	@ (8003334 <_Z10linkAnalogv+0x1d8>)
 8003292:	801a      	strh	r2, [r3, #0]
		humApp	= humExtern;			// Copia humedad
 8003294:	4b28      	ldr	r3, [pc, #160]	@ (8003338 <_Z10linkAnalogv+0x1dc>)
 8003296:	881a      	ldrh	r2, [r3, #0]
 8003298:	4b28      	ldr	r3, [pc, #160]	@ (800333c <_Z10linkAnalogv+0x1e0>)
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	e015      	b.n	80032ca <_Z10linkAnalogv+0x16e>
	}
	else if ( !errorHardware[0] ){	// Si hay sensor interno
 800329e:	4b1f      	ldr	r3, [pc, #124]	@ (800331c <_Z10linkAnalogv+0x1c0>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	f083 0301 	eor.w	r3, r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <_Z10linkAnalogv+0x162>
		tempApp	= tempIntern;			// Copia temperatura
 80032ac:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <_Z10linkAnalogv+0x1e4>)
 80032ae:	881a      	ldrh	r2, [r3, #0]
 80032b0:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <_Z10linkAnalogv+0x1d8>)
 80032b2:	801a      	strh	r2, [r3, #0]
		humApp	= humIntern;			// Copia humedad
 80032b4:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <_Z10linkAnalogv+0x1e8>)
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	4b20      	ldr	r3, [pc, #128]	@ (800333c <_Z10linkAnalogv+0x1e0>)
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	e005      	b.n	80032ca <_Z10linkAnalogv+0x16e>
	}
	else{								// Si no hay ninguno de ambos sensores
		tempApp	= 0;					// Copia 0
 80032be:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <_Z10linkAnalogv+0x1d8>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	801a      	strh	r2, [r3, #0]
		humApp	= 0;					// Copia 0
 80032c4:	4b1d      	ldr	r3, [pc, #116]	@ (800333c <_Z10linkAnalogv+0x1e0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	801a      	strh	r2, [r3, #0]

	////////////
	// ALARMS //
	////////////

	if ( tempApp > 60 || tempApp < 5 ){	// Si pasa limite de sensores
 80032ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <_Z10linkAnalogv+0x1d8>)
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	2b3c      	cmp	r3, #60	@ 0x3c
 80032d0:	d803      	bhi.n	80032da <_Z10linkAnalogv+0x17e>
 80032d2:	4b18      	ldr	r3, [pc, #96]	@ (8003334 <_Z10linkAnalogv+0x1d8>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d803      	bhi.n	80032e2 <_Z10linkAnalogv+0x186>
		warningHardware[0]	= 1;			// Indica alarma
 80032da:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <_Z10linkAnalogv+0x1ec>)
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e002      	b.n	80032e8 <_Z10linkAnalogv+0x18c>
	}
	else{								// Si no
		warningHardware[0]	= 0;			// No hay alarma
 80032e2:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <_Z10linkAnalogv+0x1ec>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
	}

	if ( humApp < 5 || humApp > 90){	// Si pasa limite de sensores
 80032e8:	4b14      	ldr	r3, [pc, #80]	@ (800333c <_Z10linkAnalogv+0x1e0>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d903      	bls.n	80032f8 <_Z10linkAnalogv+0x19c>
 80032f0:	4b12      	ldr	r3, [pc, #72]	@ (800333c <_Z10linkAnalogv+0x1e0>)
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2b5a      	cmp	r3, #90	@ 0x5a
 80032f6:	d903      	bls.n	8003300 <_Z10linkAnalogv+0x1a4>
		warningHardware[1]	= 1;			// Indica alarma
 80032f8:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <_Z10linkAnalogv+0x1ec>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	705a      	strb	r2, [r3, #1]
 80032fe:	e003      	b.n	8003308 <_Z10linkAnalogv+0x1ac>
	}
	else{								// Si no
		warningHardware[1]	= 0;			// No hay alarma
 8003300:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <_Z10linkAnalogv+0x1ec>)
 8003302:	2200      	movs	r2, #0
 8003304:	705a      	strb	r2, [r3, #1]
	}
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	2000051a 	.word	0x2000051a
 8003310:	2000051c 	.word	0x2000051c
 8003314:	20000524 	.word	0x20000524
 8003318:	20000520 	.word	0x20000520
 800331c:	200004d8 	.word	0x200004d8
 8003320:	20000442 	.word	0x20000442
 8003324:	20000515 	.word	0x20000515
 8003328:	2000044a 	.word	0x2000044a
 800332c:	20000525 	.word	0x20000525
 8003330:	20000428 	.word	0x20000428
 8003334:	20000516 	.word	0x20000516
 8003338:	2000042a 	.word	0x2000042a
 800333c:	20000518 	.word	0x20000518
 8003340:	20000424 	.word	0x20000424
 8003344:	20000426 	.word	0x20000426
 8003348:	200004d0 	.word	0x200004d0

0800334c <_Z41__static_initialization_and_destruction_0ii>:
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d127      	bne.n	80033ac <_Z41__static_initialization_and_destruction_0ii+0x60>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003362:	4293      	cmp	r3, r2
 8003364:	d122      	bne.n	80033ac <_Z41__static_initialization_and_destruction_0ii+0x60>
long int limitGpsLink	= 240000/superloop;	// Limite de tiempo esperando mensajes validos
 8003366:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800336e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003372:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003374:	6013      	str	r3, [r2, #0]
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003380:	fb93 f3f2 	sdiv	r3, r3, r2
 8003384:	4a0f      	ldr	r2, [pc, #60]	@ (80033c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003386:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 8003388:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	4b0e      	ldr	r3, [pc, #56]	@ (80033c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003390:	fb93 f3f2 	sdiv	r3, r3, r2
 8003394:	4a0d      	ldr	r2, [pc, #52]	@ (80033cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003396:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 8003398:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80033aa:	801a      	strh	r2, [r3, #0]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	20000399 	.word	0x20000399
 80033bc:	0003a980 	.word	0x0003a980
 80033c0:	200004fc 	.word	0x200004fc
 80033c4:	20000510 	.word	0x20000510
 80033c8:	000dbba0 	.word	0x000dbba0
 80033cc:	20000520 	.word	0x20000520
 80033d0:	2000052c 	.word	0x2000052c

080033d4 <_GLOBAL__sub_I_stateGpsLink>:
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80033dc:	2001      	movs	r0, #1
 80033de:	f7ff ffb5 	bl	800334c <_Z41__static_initialization_and_destruction_0ii>
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_Z10linkOutputv>:
extern wdTimeout loraTimeWd;	// Watchdog de Lorawan
extern bool flagTxLora;			// Indica que se envía un mensaje

/***** OUTPUT *****/

void linkOutput(){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	linkOutLora();
 80033e8:	f000 f804 	bl	80033f4 <_Z11linkOutLorav>
	linkOutGps();
 80033ec:	f000 f81c 	bl	8003428 <_Z10linkOutGpsv>
	//linkOutDisplay();
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_Z11linkOutLorav>:
/************************
 *****	LORA OUTPUT *****
 ************************
 *
 */
void linkOutLora(){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( flagTxLora ){				// Si sale un comando
 80033f8:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <_Z11linkOutLorav+0x24>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <_Z11linkOutLorav+0x12>
		loraTimeWd.setOutput();		// Se indica a wd
 8003400:	4806      	ldr	r0, [pc, #24]	@ (800341c <_Z11linkOutLorav+0x28>)
 8003402:	f000 f9a0 	bl	8003746 <_ZN9wdTimeout9setOutputEv>

	//////////////
	// HARDWARE //
	//////////////

	if ( flagWdLora ){			// Si vence wd
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <_Z11linkOutLorav+0x2c>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <_Z11linkOutLorav+0x20>
		flagResetHwLora	= 1;	// Reinicia chip
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <_Z11linkOutLorav+0x30>)
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
	}
}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200004e9 	.word	0x200004e9
 800341c:	2000107c 	.word	0x2000107c
 8003420:	20000530 	.word	0x20000530
 8003424:	20000531 	.word	0x20000531

08003428 <_Z10linkOutGpsv>:

/**********************
 ***** GPS OUTPUT *****
 **********************
 */
void linkOutGps(){
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0

	if ( startGps ){		// Si se inicia Gps
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <_Z10linkOutGpsv+0x30>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <_Z10linkOutGpsv+0x12>
		enableGps	= 1;	// Habilita gps
 8003434:	4b09      	ldr	r3, [pc, #36]	@ (800345c <_Z10linkOutGpsv+0x34>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
	}

	if ( stopGps ){			// Si se detiene gps
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <_Z10linkOutGpsv+0x38>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <_Z10linkOutGpsv+0x26>
		stopGps		= 0;	// Reinicia Flag
 8003442:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <_Z10linkOutGpsv+0x38>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
		enableGps	= 0;	// Deshabilita gps
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <_Z10linkOutGpsv+0x34>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
	}
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	20000397 	.word	0x20000397
 800345c:	20000398 	.word	0x20000398
 8003460:	20000ae1 	.word	0x20000ae1

08003464 <_Z12setupLoraAppv>:

rn2903Command macSetCh8;
rn2903Command macSetCh9;
rn2903Command macSetCh10;

void setupLoraApp(){
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	///////////////
	// SYS RESET //
	///////////////

	sysReset.command		= sysReset_RN2903;
 8003468:	4b57      	ldr	r3, [pc, #348]	@ (80035c8 <_Z12setupLoraAppv+0x164>)
 800346a:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <_Z12setupLoraAppv+0x168>)
 800346c:	605a      	str	r2, [r3, #4]
	sysReset.size			= sizeof( sysReset_RN2903 );
 800346e:	4b56      	ldr	r3, [pc, #344]	@ (80035c8 <_Z12setupLoraAppv+0x164>)
 8003470:	220c      	movs	r2, #12
 8003472:	701a      	strb	r2, [r3, #0]
	sysReset.responseSize	= 1;
 8003474:	4b54      	ldr	r3, [pc, #336]	@ (80035c8 <_Z12setupLoraAppv+0x164>)
 8003476:	2201      	movs	r2, #1
 8003478:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET MOD //
	///////////////////

	radioSetMod.command		= radioSetMod_RN2903;
 800347a:	4b55      	ldr	r3, [pc, #340]	@ (80035d0 <_Z12setupLoraAppv+0x16c>)
 800347c:	4a55      	ldr	r2, [pc, #340]	@ (80035d4 <_Z12setupLoraAppv+0x170>)
 800347e:	605a      	str	r2, [r3, #4]
	radioSetMod.size		= sizeof( radioSetMod_RN2903 ) - 1;
 8003480:	4b53      	ldr	r3, [pc, #332]	@ (80035d0 <_Z12setupLoraAppv+0x16c>)
 8003482:	2214      	movs	r2, #20
 8003484:	701a      	strb	r2, [r3, #0]
	radioSetMod.responseSize= 3;
 8003486:	4b52      	ldr	r3, [pc, #328]	@ (80035d0 <_Z12setupLoraAppv+0x16c>)
 8003488:	2203      	movs	r2, #3
 800348a:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET SF //
	//////////////////

	radioSetSf.command		= radioSetSf_RN2903;
 800348c:	4b52      	ldr	r3, [pc, #328]	@ (80035d8 <_Z12setupLoraAppv+0x174>)
 800348e:	4a53      	ldr	r2, [pc, #332]	@ (80035dc <_Z12setupLoraAppv+0x178>)
 8003490:	605a      	str	r2, [r3, #4]
	radioSetSf.size			= sizeof( radioSetSf_RN2903 ) - 1;
 8003492:	4b51      	ldr	r3, [pc, #324]	@ (80035d8 <_Z12setupLoraAppv+0x174>)
 8003494:	2213      	movs	r2, #19
 8003496:	701a      	strb	r2, [r3, #0]
	radioSetSf.responseSize	= 3;
 8003498:	4b4f      	ldr	r3, [pc, #316]	@ (80035d8 <_Z12setupLoraAppv+0x174>)
 800349a:	2203      	movs	r2, #3
 800349c:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET BW //
	//////////////////

	radioSetBw.command		= radioSetBw_RN2903;
 800349e:	4b50      	ldr	r3, [pc, #320]	@ (80035e0 <_Z12setupLoraAppv+0x17c>)
 80034a0:	4a50      	ldr	r2, [pc, #320]	@ (80035e4 <_Z12setupLoraAppv+0x180>)
 80034a2:	605a      	str	r2, [r3, #4]
	radioSetBw.size			= sizeof( radioSetBw_RN2903 ) - 1;
 80034a4:	4b4e      	ldr	r3, [pc, #312]	@ (80035e0 <_Z12setupLoraAppv+0x17c>)
 80034a6:	2212      	movs	r2, #18
 80034a8:	701a      	strb	r2, [r3, #0]
	radioSetBw.responseSize = 3;
 80034aa:	4b4d      	ldr	r3, [pc, #308]	@ (80035e0 <_Z12setupLoraAppv+0x17c>)
 80034ac:	2203      	movs	r2, #3
 80034ae:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET PWR //
	///////////////////

	radioSetPwr.command		= radioSetPwr_RN2903;
 80034b0:	4b4d      	ldr	r3, [pc, #308]	@ (80035e8 <_Z12setupLoraAppv+0x184>)
 80034b2:	4a4e      	ldr	r2, [pc, #312]	@ (80035ec <_Z12setupLoraAppv+0x188>)
 80034b4:	605a      	str	r2, [r3, #4]
	radioSetPwr.size		= sizeof( radioSetPwr_RN2903 ) - 1;
 80034b6:	4b4c      	ldr	r3, [pc, #304]	@ (80035e8 <_Z12setupLoraAppv+0x184>)
 80034b8:	2212      	movs	r2, #18
 80034ba:	701a      	strb	r2, [r3, #0]
	radioSetPwr.responseSize= 3;
 80034bc:	4b4a      	ldr	r3, [pc, #296]	@ (80035e8 <_Z12setupLoraAppv+0x184>)
 80034be:	2203      	movs	r2, #3
 80034c0:	721a      	strb	r2, [r3, #8]

	////////////////////
	// MAC SET DEVEUI //
	////////////////////

	macSetDeveui.command	= macSetDevEui_RN2903;
 80034c2:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <_Z12setupLoraAppv+0x18c>)
 80034c4:	4a4b      	ldr	r2, [pc, #300]	@ (80035f4 <_Z12setupLoraAppv+0x190>)
 80034c6:	605a      	str	r2, [r3, #4]
	macSetDeveui.size		= sizeof( macSetDevEui_RN2903 ) - 1;
 80034c8:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <_Z12setupLoraAppv+0x18c>)
 80034ca:	2221      	movs	r2, #33	@ 0x21
 80034cc:	701a      	strb	r2, [r3, #0]
	macSetDeveui.responseSize	= 3;
 80034ce:	4b48      	ldr	r3, [pc, #288]	@ (80035f0 <_Z12setupLoraAppv+0x18c>)
 80034d0:	2203      	movs	r2, #3
 80034d2:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET NETWORK KEY //
	/////////////////////////

	macSetNwkskey.command	= macSetNwkskey_RN2903;
 80034d4:	4b48      	ldr	r3, [pc, #288]	@ (80035f8 <_Z12setupLoraAppv+0x194>)
 80034d6:	4a49      	ldr	r2, [pc, #292]	@ (80035fc <_Z12setupLoraAppv+0x198>)
 80034d8:	605a      	str	r2, [r3, #4]
	macSetNwkskey.size		= sizeof( macSetNwkskey_RN2903 ) - 1;
 80034da:	4b47      	ldr	r3, [pc, #284]	@ (80035f8 <_Z12setupLoraAppv+0x194>)
 80034dc:	2232      	movs	r2, #50	@ 0x32
 80034de:	701a      	strb	r2, [r3, #0]
	macSetNwkskey.responseSize	= 3;
 80034e0:	4b45      	ldr	r3, [pc, #276]	@ (80035f8 <_Z12setupLoraAppv+0x194>)
 80034e2:	2203      	movs	r2, #3
 80034e4:	721a      	strb	r2, [r3, #8]

	//////////////////////
	// MAC SET APPS KEY //
	//////////////////////

	macSetAppskey.command	= macSetAppskey_RN2903;
 80034e6:	4b46      	ldr	r3, [pc, #280]	@ (8003600 <_Z12setupLoraAppv+0x19c>)
 80034e8:	4a46      	ldr	r2, [pc, #280]	@ (8003604 <_Z12setupLoraAppv+0x1a0>)
 80034ea:	605a      	str	r2, [r3, #4]
	macSetAppskey.size		= sizeof( macSetAppskey_RN2903 ) - 1;
 80034ec:	4b44      	ldr	r3, [pc, #272]	@ (8003600 <_Z12setupLoraAppv+0x19c>)
 80034ee:	2232      	movs	r2, #50	@ 0x32
 80034f0:	701a      	strb	r2, [r3, #0]
	macSetAppskey.responseSize	= 3;
 80034f2:	4b43      	ldr	r3, [pc, #268]	@ (8003600 <_Z12setupLoraAppv+0x19c>)
 80034f4:	2203      	movs	r2, #3
 80034f6:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET DEV ADDRESS //
	/////////////////////////

	macSetDevAddr.command		= macSetDevAddr_RN2903;
 80034f8:	4b43      	ldr	r3, [pc, #268]	@ (8003608 <_Z12setupLoraAppv+0x1a4>)
 80034fa:	4a44      	ldr	r2, [pc, #272]	@ (800360c <_Z12setupLoraAppv+0x1a8>)
 80034fc:	605a      	str	r2, [r3, #4]
	macSetDevAddr.size			= sizeof ( macSetDevAddr_RN2903 ) - 1;
 80034fe:	4b42      	ldr	r3, [pc, #264]	@ (8003608 <_Z12setupLoraAppv+0x1a4>)
 8003500:	221a      	movs	r2, #26
 8003502:	701a      	strb	r2, [r3, #0]
	macSetDevAddr.responseSize	= 2;
 8003504:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <_Z12setupLoraAppv+0x1a4>)
 8003506:	2202      	movs	r2, #2
 8003508:	721a      	strb	r2, [r3, #8]

	///////////////////
	// MAC JOIN OTAA //
	///////////////////

	macJoinOtaa.command			= macJoinOtaa_RN2903;
 800350a:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <_Z12setupLoraAppv+0x1ac>)
 800350c:	4a41      	ldr	r2, [pc, #260]	@ (8003614 <_Z12setupLoraAppv+0x1b0>)
 800350e:	605a      	str	r2, [r3, #4]
	macJoinOtaa.size			= sizeof ( macJoinOtaa_RN2903 ) - 1;
 8003510:	4b3f      	ldr	r3, [pc, #252]	@ (8003610 <_Z12setupLoraAppv+0x1ac>)
 8003512:	220f      	movs	r2, #15
 8003514:	701a      	strb	r2, [r3, #0]
	macJoinOtaa.responseSize	= 7;
 8003516:	4b3e      	ldr	r3, [pc, #248]	@ (8003610 <_Z12setupLoraAppv+0x1ac>)
 8003518:	2207      	movs	r2, #7
 800351a:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC JOIN ABP //
	//////////////////

	macJoinAbp.command		= macJoinAbp_RN2903;
 800351c:	4b3e      	ldr	r3, [pc, #248]	@ (8003618 <_Z12setupLoraAppv+0x1b4>)
 800351e:	4a3f      	ldr	r2, [pc, #252]	@ (800361c <_Z12setupLoraAppv+0x1b8>)
 8003520:	605a      	str	r2, [r3, #4]
	macJoinAbp.size			= sizeof( macJoinAbp_RN2903 ) - 1;
 8003522:	4b3d      	ldr	r3, [pc, #244]	@ (8003618 <_Z12setupLoraAppv+0x1b4>)
 8003524:	220e      	movs	r2, #14
 8003526:	701a      	strb	r2, [r3, #0]
	macJoinAbp.responseSize	= 2;
 8003528:	4b3b      	ldr	r3, [pc, #236]	@ (8003618 <_Z12setupLoraAppv+0x1b4>)
 800352a:	2202      	movs	r2, #2
 800352c:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC SET SYNC //
	//////////////////

	macSetSync.command		= macSetSync_RN2903;
 800352e:	4b3c      	ldr	r3, [pc, #240]	@ (8003620 <_Z12setupLoraAppv+0x1bc>)
 8003530:	4a3c      	ldr	r2, [pc, #240]	@ (8003624 <_Z12setupLoraAppv+0x1c0>)
 8003532:	605a      	str	r2, [r3, #4]
	macSetSync.size			= sizeof( macSetSync_RN2903 ) - 1;
 8003534:	4b3a      	ldr	r3, [pc, #232]	@ (8003620 <_Z12setupLoraAppv+0x1bc>)
 8003536:	2211      	movs	r2, #17
 8003538:	701a      	strb	r2, [r3, #0]
	macSetSync.responseSize	= 3;
 800353a:	4b39      	ldr	r3, [pc, #228]	@ (8003620 <_Z12setupLoraAppv+0x1bc>)
 800353c:	2203      	movs	r2, #3
 800353e:	721a      	strb	r2, [r3, #8]

	//////////////
	// MAC SAVE //
	//////////////

	macSave.command			= macSave_RN2903;
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <_Z12setupLoraAppv+0x1c4>)
 8003542:	4a3a      	ldr	r2, [pc, #232]	@ (800362c <_Z12setupLoraAppv+0x1c8>)
 8003544:	605a      	str	r2, [r3, #4]
	macSave.size			= sizeof( macSave_RN2903 ) - 1;
 8003546:	4b38      	ldr	r3, [pc, #224]	@ (8003628 <_Z12setupLoraAppv+0x1c4>)
 8003548:	220a      	movs	r2, #10
 800354a:	701a      	strb	r2, [r3, #0]
	macSave.responseSize	= 3;
 800354c:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <_Z12setupLoraAppv+0x1c4>)
 800354e:	2203      	movs	r2, #3
 8003550:	721a      	strb	r2, [r3, #8]

	/////////////////
	// MAC TX DATA //
	/////////////////

	 macTxData.command		= macTxData_RN2903;
 8003552:	4b37      	ldr	r3, [pc, #220]	@ (8003630 <_Z12setupLoraAppv+0x1cc>)
 8003554:	4a37      	ldr	r2, [pc, #220]	@ (8003634 <_Z12setupLoraAppv+0x1d0>)
 8003556:	605a      	str	r2, [r3, #4]
	 macTxData.size			= sizeof( macTxData_RN2903 ) - 1;
 8003558:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <_Z12setupLoraAppv+0x1cc>)
 800355a:	2219      	movs	r2, #25
 800355c:	701a      	strb	r2, [r3, #0]
	 macTxData.responseSize	= 14;
 800355e:	4b34      	ldr	r3, [pc, #208]	@ (8003630 <_Z12setupLoraAppv+0x1cc>)
 8003560:	220e      	movs	r2, #14
 8003562:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	 macTxGps.command		= macTxGps_RN2903;
 8003564:	4b34      	ldr	r3, [pc, #208]	@ (8003638 <_Z12setupLoraAppv+0x1d4>)
 8003566:	4a35      	ldr	r2, [pc, #212]	@ (800363c <_Z12setupLoraAppv+0x1d8>)
 8003568:	605a      	str	r2, [r3, #4]
	 macTxGps.size			= sizeof( macTxGps_RN2903 ) - 1;
 800356a:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <_Z12setupLoraAppv+0x1d4>)
 800356c:	2219      	movs	r2, #25
 800356e:	701a      	strb	r2, [r3, #0]
	 macTxGps.responseSize	= 14;
 8003570:	4b31      	ldr	r3, [pc, #196]	@ (8003638 <_Z12setupLoraAppv+0x1d4>)
 8003572:	220e      	movs	r2, #14
 8003574:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	  macTxSys.command		= macTxSys_RN2903;
 8003576:	4b32      	ldr	r3, [pc, #200]	@ (8003640 <_Z12setupLoraAppv+0x1dc>)
 8003578:	4a32      	ldr	r2, [pc, #200]	@ (8003644 <_Z12setupLoraAppv+0x1e0>)
 800357a:	605a      	str	r2, [r3, #4]
	  macTxSys.size			= sizeof( macTxSys_RN2903 ) - 1;
 800357c:	4b30      	ldr	r3, [pc, #192]	@ (8003640 <_Z12setupLoraAppv+0x1dc>)
 800357e:	2215      	movs	r2, #21
 8003580:	701a      	strb	r2, [r3, #0]
	  macTxSys.responseSize	= 14;
 8003582:	4b2f      	ldr	r3, [pc, #188]	@ (8003640 <_Z12setupLoraAppv+0x1dc>)
 8003584:	220e      	movs	r2, #14
 8003586:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 8 //
	  //////////////////

	  macSetCh8.command		= macSetCh8_RN2903;
 8003588:	4b2f      	ldr	r3, [pc, #188]	@ (8003648 <_Z12setupLoraAppv+0x1e4>)
 800358a:	4a30      	ldr	r2, [pc, #192]	@ (800364c <_Z12setupLoraAppv+0x1e8>)
 800358c:	605a      	str	r2, [r3, #4]
	  macSetCh8.size		= sizeof( macSetCh8_RN2903 ) - 1;
 800358e:	4b2e      	ldr	r3, [pc, #184]	@ (8003648 <_Z12setupLoraAppv+0x1e4>)
 8003590:	2219      	movs	r2, #25
 8003592:	701a      	strb	r2, [r3, #0]
	  macSetCh8.responseSize	= 9;
 8003594:	4b2c      	ldr	r3, [pc, #176]	@ (8003648 <_Z12setupLoraAppv+0x1e4>)
 8003596:	2209      	movs	r2, #9
 8003598:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 9 //
	  //////////////////

	  macSetCh9.command		= macSetCh9_RN2903;
 800359a:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <_Z12setupLoraAppv+0x1ec>)
 800359c:	4a2d      	ldr	r2, [pc, #180]	@ (8003654 <_Z12setupLoraAppv+0x1f0>)
 800359e:	605a      	str	r2, [r3, #4]
	  macSetCh9.size		= sizeof( macSetCh9_RN2903 ) - 1;
 80035a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <_Z12setupLoraAppv+0x1ec>)
 80035a2:	2219      	movs	r2, #25
 80035a4:	701a      	strb	r2, [r3, #0]
	  macSetCh9.responseSize	= 9;
 80035a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003650 <_Z12setupLoraAppv+0x1ec>)
 80035a8:	2209      	movs	r2, #9
 80035aa:	721a      	strb	r2, [r3, #8]

	  ///////////////////
	  // MAC SET CH 10 //
	  ///////////////////
	  macSetCh10.command		= macSetCh10_RN2903;
 80035ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003658 <_Z12setupLoraAppv+0x1f4>)
 80035ae:	4a2b      	ldr	r2, [pc, #172]	@ (800365c <_Z12setupLoraAppv+0x1f8>)
 80035b0:	605a      	str	r2, [r3, #4]
	  macSetCh10.size			= sizeof( macSetCh10_RN2903 ) - 1;
 80035b2:	4b29      	ldr	r3, [pc, #164]	@ (8003658 <_Z12setupLoraAppv+0x1f4>)
 80035b4:	221a      	movs	r2, #26
 80035b6:	701a      	strb	r2, [r3, #0]
	  macSetCh10.responseSize	= 9;
 80035b8:	4b27      	ldr	r3, [pc, #156]	@ (8003658 <_Z12setupLoraAppv+0x1f4>)
 80035ba:	2209      	movs	r2, #9
 80035bc:	721a      	strb	r2, [r3, #8]

}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	20000534 	.word	0x20000534
 80035cc:	200001ac 	.word	0x200001ac
 80035d0:	20000540 	.word	0x20000540
 80035d4:	200001b8 	.word	0x200001b8
 80035d8:	2000054c 	.word	0x2000054c
 80035dc:	200001d0 	.word	0x200001d0
 80035e0:	20000558 	.word	0x20000558
 80035e4:	200001e4 	.word	0x200001e4
 80035e8:	20000564 	.word	0x20000564
 80035ec:	200001f8 	.word	0x200001f8
 80035f0:	20000570 	.word	0x20000570
 80035f4:	2000020c 	.word	0x2000020c
 80035f8:	20000588 	.word	0x20000588
 80035fc:	2000024c 	.word	0x2000024c
 8003600:	20000594 	.word	0x20000594
 8003604:	20000280 	.word	0x20000280
 8003608:	2000057c 	.word	0x2000057c
 800360c:	20000230 	.word	0x20000230
 8003610:	200005a0 	.word	0x200005a0
 8003614:	200002b4 	.word	0x200002b4
 8003618:	200005ac 	.word	0x200005ac
 800361c:	200002c4 	.word	0x200002c4
 8003620:	200005b8 	.word	0x200005b8
 8003624:	200002d4 	.word	0x200002d4
 8003628:	200005c4 	.word	0x200005c4
 800362c:	200002e8 	.word	0x200002e8
 8003630:	200005d0 	.word	0x200005d0
 8003634:	200002f4 	.word	0x200002f4
 8003638:	200005dc 	.word	0x200005dc
 800363c:	20000310 	.word	0x20000310
 8003640:	200005e8 	.word	0x200005e8
 8003644:	2000032c 	.word	0x2000032c
 8003648:	200005f4 	.word	0x200005f4
 800364c:	20000344 	.word	0x20000344
 8003650:	20000600 	.word	0x20000600
 8003654:	20000360 	.word	0x20000360
 8003658:	2000060c 	.word	0x2000060c
 800365c:	2000037c 	.word	0x2000037c

08003660 <_ZN10loraRutine10addCommandEP13rn2903Command>:

/////////////////
// ADD COMMAND //
/////////////////

void loraRutine::addCommand ( rn2903Command *command ){
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	this->listCommands[ this->sizeList ]	= command;	// AÑADE PUNTERO A LISTA
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8003670:	4619      	mov	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	this->sizeList++;									// Suma 1 al largo de lista
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8003680:	3301      	adds	r3, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <_ZN10loraRutine7commandEv>:

/////////////
// COMMAND //
/////////////

rn2903Command *loraRutine::command(){
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
	uint8_t count	= this->actual;			// Copia elemento actual de rutina
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80036a4:	73fb      	strb	r3, [r7, #15]

	this->actual++;							// Suma 1 al elemento actuañ
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80036ac:	3301      	adds	r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192

	if (this->actual >= this->sizeList){	// Si es el ultimo de la lista
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 2192 	ldrb.w	r2, [r3, #402]	@ 0x192
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d307      	bcc.n	80036d6 <_ZN10loraRutine7commandEv+0x40>
		this->actual	= 0;				// Reinicia la lista
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
		this->stopped	= 1;				// Indica que es el ultimo elemento
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	}
	return this->listCommands[count];		// Retorta puntero
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <_ZN10loraRutine5resetEv>:

///////////
// RESET //
///////////

void loraRutine::reset(){
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
	this->actual	= 0;	// Reinicia contador de lista
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
	this->stopped	= 0;	// No esta en el ultimo elemento
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <_ZN10loraRutine6finishEv>:

////////////
// FINISH //
////////////
bool loraRutine::finish(){
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
	return this->stopped;	// Indica si es el ultimo elemento
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190

}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <_ZN9wdTimeoutC1El>:
 *		5.- newMessage:	Indica si se recibió un mensaje
 *		6.- timeout:	Indica si hubo un timeout
 *
 */

wdTimeout::wdTimeout( long limit ){	// Constructor
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
	this->limit	= limit;			// Se debe fijar el limite de timeout
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <_ZN9wdTimeout9setOutputEv>:

////////////////
// SET OUTPUT //
////////////////

void wdTimeout::setOutput(){	//
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
	this->flagOutput	= 1;	// Indica que salió un comando
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;	// Reinicia contador
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	605a      	str	r2, [r3, #4]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_ZN9wdTimeout6addOneEv>:

/////////////
// ADD ONE //
/////////////

void wdTimeout::addOne(){
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
	if ( this->flagOutput ){			// Si salió un comando
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	785b      	ldrb	r3, [r3, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <_ZN9wdTimeout6addOneEv+0x1a>
		this->counter++;				// Suma uno al contador
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	605a      	str	r2, [r3, #4]
	}

	if (this->counter >= this->limit ){	// Si pasa el límite
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	db03      	blt.n	8003794 <_ZN9wdTimeout6addOneEv+0x2e>
		this->flagTimeout	= 1;		// Se considera timeout
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	709a      	strb	r2, [r3, #2]
	}
	else{								// Si no
		this->flagTimeout	= 0;		// No indica timeout
	}
}
 8003792:	e002      	b.n	800379a <_ZN9wdTimeout6addOneEv+0x34>
		this->flagTimeout	= 0;		// No indica timeout
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	709a      	strb	r2, [r3, #2]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <_ZN9wdTimeout8setInputEv>:

///////////////
// SET INPUT //
///////////////

void wdTimeout::setInput(){
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
	this->flagInput		= this->flagOutput;		// Copia indicador salida de comando )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	785a      	ldrb	r2, [r3, #1]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	701a      	strb	r2, [r3, #0]
												// Si hay multiples respuestas toma sentido
	this->flagOutput	= 0;					// Reinicia indicador de salida comando
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;					// Reinicia contador
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	605a      	str	r2, [r3, #4]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_ZN9wdTimeout7timeOutEv>:

/////////////
// TIMEOUT //
/////////////

bool wdTimeout::timeOut(){
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
	bool flag			= this->flagTimeout;	// Copia indicador timeout
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	789b      	ldrb	r3, [r3, #2]
 80037da:	73fb      	strb	r3, [r7, #15]
	this->flagTimeout	= 0;					// Reinicia indicador timeout
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	709a      	strb	r2, [r3, #2]
	return flag;								// Retorna valor guardado
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_ZN9loraCheck18setResponsePointerEPPhh>:

//////////////////////////
// SET RESPONSE POINTER //
//////////////////////////

void loraCheck::setResponsePointer( uint8_t *pointer[], uint8_t sizeIdealResponses ){
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
	this->idealResponses		= &pointer[0];
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
	this->sizeIdealResponses	= sizeIdealResponses;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	79fa      	ldrb	r2, [r7, #7]
 8003808:	731a      	strb	r2, [r3, #12]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <_ZN9loraCheck17setIdealResponsesEh>:

////////////////////////
// SET IDEAL RESPONSE //
////////////////////////

void loraCheck::setIdealResponses( uint8_t qtty ){
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	70fb      	strb	r3, [r7, #3]
	this->qtty				= qtty;				// Copia el largo del arreglo
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	705a      	strb	r2, [r3, #1]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_ZN9loraCheck11newResponseEPhh>:

//////////////////
// NEW RESPONSE //
//////////////////

void loraCheck::newResponse( uint8_t *response, uint8_t sizeResponse ){
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	71fb      	strb	r3, [r7, #7]
	this->realResponse	= response;			// Copia la respuesta entregada por el modulo
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	611a      	str	r2, [r3, #16]
	this->sizeResponse	= sizeResponse;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	79fa      	ldrb	r2, [r7, #7]
 800384c:	701a      	strb	r2, [r3, #0]

	uint8_t i;	// Crea variable auxiliar
	uint8_t j;

	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
 8003852:	e029      	b.n	80038a8 <_ZN9loraCheck11newResponseEPhh+0x74>
		for ( j = 0; j < this->sizeResponse; j++ ){
 8003854:	2300      	movs	r3, #0
 8003856:	75bb      	strb	r3, [r7, #22]
 8003858:	e01a      	b.n	8003890 <_ZN9loraCheck11newResponseEPhh+0x5c>
			if ( *(this->idealResponses[i] + j) == this->realResponse[j]){
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	7dbb      	ldrb	r3, [r7, #22]
 8003868:	4413      	add	r3, r2
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6919      	ldr	r1, [r3, #16]
 8003870:	7dbb      	ldrb	r3, [r7, #22]
 8003872:	440b      	add	r3, r1
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d103      	bne.n	8003882 <_ZN9loraCheck11newResponseEPhh+0x4e>
				this->flagCorrect	= 1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	70da      	strb	r2, [r3, #3]
 8003880:	e003      	b.n	800388a <_ZN9loraCheck11newResponseEPhh+0x56>
			}
			else{
				this->flagCorrect	= 0;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	70da      	strb	r2, [r3, #3]
				break;
 8003888:	e007      	b.n	800389a <_ZN9loraCheck11newResponseEPhh+0x66>
		for ( j = 0; j < this->sizeResponse; j++ ){
 800388a:	7dbb      	ldrb	r3, [r7, #22]
 800388c:	3301      	adds	r3, #1
 800388e:	75bb      	strb	r3, [r7, #22]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	7dba      	ldrb	r2, [r7, #22]
 8003896:	429a      	cmp	r2, r3
 8003898:	d3df      	bcc.n	800385a <_ZN9loraCheck11newResponseEPhh+0x26>
			}
		}
		if (this->flagCorrect){
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	78db      	ldrb	r3, [r3, #3]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d108      	bne.n	80038b4 <_ZN9loraCheck11newResponseEPhh+0x80>
	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	3301      	adds	r3, #1
 80038a6:	75fb      	strb	r3, [r7, #23]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	7dfa      	ldrb	r2, [r7, #23]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d3d0      	bcc.n	8003854 <_ZN9loraCheck11newResponseEPhh+0x20>
 80038b2:	e000      	b.n	80038b6 <_ZN9loraCheck11newResponseEPhh+0x82>
			break;
 80038b4:	bf00      	nop
		}
	}

	this->position	= i;											// Copia posicion final
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	7dfa      	ldrb	r2, [r7, #23]
 80038ba:	709a      	strb	r2, [r3, #2]
	this->flagCheck	= 1;											// Indica que hay nuevo resultado
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	711a      	strb	r2, [r3, #4]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <_ZN9loraCheck5checkEv>:

////////////////////
// CHECK RESPONSE //
////////////////////

bool loraCheck::check(){
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
	bool flag;							// Crea variable auxiliar
	flag			= this->flagCheck;	// Copia resultado de flag
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	791b      	ldrb	r3, [r3, #4]
 80038da:	73fb      	strb	r3, [r7, #15]
	this->flagCheck	= 0;				// Reinicia el indicador de nuevo resultado
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	711a      	strb	r2, [r3, #4]

	return 	flag;						// Entrega resultado
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_ZN9loraCheck8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t loraCheck::response(){
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	uint8_t	finalResult;				// Crea variable auxiliar
	uint8_t i;

	if (this->flagCorrect){				// Si hubo respuesta correcta
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	78db      	ldrb	r3, [r3, #3]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <_ZN9loraCheck8responseEv+0x18>
		finalResult	= this->position;	// Copia posición
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	789b      	ldrb	r3, [r3, #2]
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	e001      	b.n	800390c <_ZN9loraCheck8responseEv+0x1c>
	}
	else{								// Si no
		finalResult	= 99;				// Entrega 99
 8003908:	2363      	movs	r3, #99	@ 0x63
 800390a:	73fb      	strb	r3, [r7, #15]
	}
	finalResult = this->position;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	789b      	ldrb	r3, [r3, #2]
 8003910:	73fb      	strb	r3, [r7, #15]

	if ( this->sizeResponse > 30 ){
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b1e      	cmp	r3, #30
 8003918:	d91c      	bls.n	8003954 <_ZN9loraCheck8responseEv+0x64>
		for (i = 0; i < this->sizeResponse-1; i++){
 800391a:	2300      	movs	r3, #0
 800391c:	73bb      	strb	r3, [r7, #14]
 800391e:	e013      	b.n	8003948 <_ZN9loraCheck8responseEv+0x58>
			if ( this->realResponse[i] == 'R' && this->realResponse[i+1] == 'N'){
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	7bbb      	ldrb	r3, [r7, #14]
 8003926:	4413      	add	r3, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b52      	cmp	r3, #82	@ 0x52
 800392c:	d109      	bne.n	8003942 <_ZN9loraCheck8responseEv+0x52>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	7bbb      	ldrb	r3, [r7, #14]
 8003934:	3301      	adds	r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b4e      	cmp	r3, #78	@ 0x4e
 800393c:	d101      	bne.n	8003942 <_ZN9loraCheck8responseEv+0x52>
				finalResult	= 98;
 800393e:	2362      	movs	r3, #98	@ 0x62
 8003940:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < this->sizeResponse-1; i++){
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	3301      	adds	r3, #1
 8003946:	73bb      	strb	r3, [r7, #14]
 8003948:	7bba      	ldrb	r2, [r7, #14]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	3b01      	subs	r3, #1
 8003950:	429a      	cmp	r2, r3
 8003952:	dbe5      	blt.n	8003920 <_ZN9loraCheck8responseEv+0x30>
			}
		}
	}

	return finalResult;					// Retorna decisión
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <_ZN9loraInput12insertBufferEPhh>:

///////////////////
// INSERT BUFFER //
///////////////////

void loraInput::insertBuffer(uint8_t *buffer, uint8_t sizeBuffer){
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	4613      	mov	r3, r2
 800396e:	71fb      	strb	r3, [r7, #7]
	this->buffer		= buffer;		// Guarda puntero inicial del buffer
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	605a      	str	r2, [r3, #4]
	this->sizeBuffer	= sizeBuffer;	// Guarda tamaño del buffer
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	79fa      	ldrb	r2, [r7, #7]
 800397a:	721a      	strb	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_ZN9loraInput13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

void loraInput::insertElement(uint8_t element){
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
	if (element == '\n'){							// Si llega un salto de linea
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	2b0a      	cmp	r3, #10
 8003998:	d10c      	bne.n	80039b4 <_ZN9loraInput13insertElementEh+0x2c>
		this->sizeResponse		= this->count;		// Guarda tamaño de la respuesta
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
		this->count				= 0;				// Reinicia contador
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
		this->flagNewResponse	= 1;				// Indica que llego mensaje nuevo
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			this->count	= 0;						// Reinicia buffer
		}
		this->buffer[this->count]	= element;	// Copia elemento en buffer
		this->count++;
	}
}
 80039b2:	e015      	b.n	80039e0 <_ZN9loraInput13insertElementEh+0x58>
		if (this->count >= this->sizeBuffer){		// Si el contador se pasa del buffero
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7a1b      	ldrb	r3, [r3, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <_ZN9loraInput13insertElementEh+0x3e>
			this->count	= 0;						// Reinicia buffer
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
		this->buffer[this->count]	= element;	// Copia elemento en buffer
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	701a      	strb	r2, [r3, #0]
		this->count++;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	701a      	strb	r2, [r3, #0]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_ZN9loraInput11newResponseEv>:

//////////////////
// NEW RESPONSE //
//////////////////

bool loraInput::newResponse(){						// Se reinicia cuando es consultado
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	bool flag				= this->flagNewResponse;	// Copia flag de nuevo mensaje
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039fa:	73fb      	strb	r3, [r7, #15]
	this->flagNewResponse	= 0;						// Reinicia flag
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return flag;										// Retorna respuesta guardada
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <_ZN9loraInput8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t* loraInput::response(){	//
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	return this->buffer;		// Entrega la respuesta final
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_ZN9loraInput12responseSizeEv>:

uint8_t loraInput::responseSize(){
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
	return this->sizeResponse;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <_ZN10loraSelect10setCommandEPhhh>:

/////////////////
// SET COMMAND //
/////////////////

void loraSelect::setCommand( uint8_t *command, uint8_t sizeCommand, uint8_t qtty ){
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	460b      	mov	r3, r1
 8003a54:	71fb      	strb	r3, [r7, #7]
 8003a56:	4613      	mov	r3, r2
 8003a58:	71bb      	strb	r3, [r7, #6]
	this->command		= command;		//	Copia comando
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	601a      	str	r2, [r3, #0]
	this->commandSize	= sizeCommand;	//	Copia lista de respuestas
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	79fa      	ldrb	r2, [r7, #7]
 8003a64:	711a      	strb	r2, [r3, #4]
	this->qtty			= qtty;			//	Copia cantidad de respeustas
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	79ba      	ldrb	r2, [r7, #6]
 8003a6a:	715a      	strb	r2, [r3, #5]
	this->flagNew		= 1;			//	Indica que hay nuevo comando
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	71da      	strb	r2, [r3, #7]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <_ZN10loraSelect10newCommandEv>:

/////////////////
// NEW COMMAND //
/////////////////

bool loraSelect::newCommand(){
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
	bool flag = this->flagNew;								// Crea variable
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	79db      	ldrb	r3, [r3, #7]
 8003a8a:	73fb      	strb	r3, [r7, #15]
	this->flagNew	= 0;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	71da      	strb	r2, [r3, #7]

	return flag;							// Retorna salida
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZN10loraSelect10getCommandEv>:

/////////////////
// GET COMMAND //
/////////////////

uint8_t	*loraSelect::getCommand(){
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	return this->command;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_ZN10loraSelect14getCommandSizeEv>:

///////////////////
// GET RESPONSES //
///////////////////

uint8_t loraSelect::getCommandSize(){
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	return this->commandSize;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	791b      	ldrb	r3, [r3, #4]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <_ZN10loraSelect13qttyResponsesEv>:

////////////////////////
// QUANTITY RESPONSES //
////////////////////////

uint8_t loraSelect::qttyResponses(){
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	return this->qtty;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	795b      	ldrb	r3, [r3, #5]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_ZN12loraDecision10setRetriesEh>:

//////////////////
// SET RETRIES  //
//////////////////

void loraDecision::setRetries( uint8_t retries ){
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
	this->retries	= retries;					//
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	701a      	strb	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <_ZN12loraDecision8responseEh>:
//////////////
// RESPONSE //
//////////////


void loraDecision::response ( uint8_t position ){
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	70fb      	strb	r3, [r7, #3]
	this->position	= position;					//	Copia posicion
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	705a      	strb	r2, [r3, #1]

	if ( position == 0 || position == 12 ){						//	Si no hay error
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <_ZN12loraDecision8responseEh+0x1e>
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	d10f      	bne.n	8003b44 <_ZN12loraDecision8responseEh+0x3e>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	709a      	strb	r2, [r3, #2]
		else{									//	Si no pasa  limite
			this->flagBurn		= 0;			//	No esta quemado
			this->flagRepeat	= 1;			//	Solicita repetir
		}
	}
}
 8003b42:	e054      	b.n	8003bee <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 10 ){
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	2b0a      	cmp	r3, #10
 8003b48:	d10f      	bne.n	8003b6a <_ZN12loraDecision8responseEh+0x64>
		this->flagCorrect	= 0;				//	Indica que la respuesta es correcta
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 1;				//	Reinicia flag quemado
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	709a      	strb	r2, [r3, #2]
}
 8003b68:	e041      	b.n	8003bee <_ZN12loraDecision8responseEh+0xe8>
	else if ( position < 98 ){
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	2b61      	cmp	r3, #97	@ 0x61
 8003b6e:	d80f      	bhi.n	8003b90 <_ZN12loraDecision8responseEh+0x8a>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	709a      	strb	r2, [r3, #2]
}
 8003b8e:	e02e      	b.n	8003bee <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 98 ){
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	2b62      	cmp	r3, #98	@ 0x62
 8003b94:	d10f      	bne.n	8003bb6 <_ZN12loraDecision8responseEh+0xb0>
		this->flagCorrect	= 0;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	70da      	strb	r2, [r3, #3]
		this->flagBurn		= 0;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	715a      	strb	r2, [r3, #5]
		this->count			= 0;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	709a      	strb	r2, [r3, #2]
		this->flagEnable	= 1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	719a      	strb	r2, [r3, #6]
}
 8003bb4:	e01b      	b.n	8003bee <_ZN12loraDecision8responseEh+0xe8>
		this->flagCorrect	= 0;				//	Reinicia flag correcto
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	70da      	strb	r2, [r3, #3]
		this->count++;							//	Suma uno al contador
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	709a      	strb	r2, [r3, #2]
		if ( this->count >= this->retries ){	//	Si pasa limite de reintentos
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	789a      	ldrb	r2, [r3, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d306      	bcc.n	8003be2 <_ZN12loraDecision8responseEh+0xdc>
			this->flagBurn		= 1;			//	Indica que esta quemado
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 0;			//	No hay que repetir
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	715a      	strb	r2, [r3, #5]
}
 8003be0:	e005      	b.n	8003bee <_ZN12loraDecision8responseEh+0xe8>
			this->flagBurn		= 0;			//	No esta quemado
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 1;			//	Solicita repetir
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	715a      	strb	r2, [r3, #5]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <_ZN12loraDecision5resetEv>:

///////////
// RESET //
///////////

void loraDecision::reset(){
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
	this->flagCorrect	= 0;	//	Reinicia indicador de msj correcto
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	70da      	strb	r2, [r3, #3]
	this->flagBurn		= 0;	//	Reinicia indicador de msj quemado
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	711a      	strb	r2, [r3, #4]
	this->flagRepeat	= 0;	//	Reinicia indicador de repetir mensaje
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	715a      	strb	r2, [r3, #5]
	this->count			= 0;	//	Reinicia contador
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	709a      	strb	r2, [r3, #2]
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_ZN12loraDecision7disableEv>:

void loraDecision::disable(){
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
	this->flagEnable	= 0;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	719a      	strb	r2, [r3, #6]
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_ZN12loraDecision6enableEv>:

bool loraDecision::enable(){
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	return this->flagEnable;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	799b      	ldrb	r3, [r3, #6]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_ZN12loraDecision7correctEv>:

/////////////
// CORRECT //
/////////////

bool loraDecision::correct(){
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	return this->flagCorrect;	//
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	78db      	ldrb	r3, [r3, #3]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_ZN12loraDecision4burnEv>:

//////////
// BURN //
//////////

bool loraDecision::burn(){
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	return this->flagBurn;		//
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	791b      	ldrb	r3, [r3, #4]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <_ZN12fifoCommandsC1Ev>:
////////////////////////
// FIFO COMMAND CLASS //
////////////////////////


class fifoCommands{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f103 0239 	add.w	r2, r3, #57	@ 0x39
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f103 0243 	add.w	r2, r3, #67	@ 0x43
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f103 024d 	add.w	r2, r3, #77	@ 0x4d
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	611a      	str	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f103 0257 	add.w	r2, r3, #87	@ 0x57
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	615a      	str	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f103 0261 	add.w	r2, r3, #97	@ 0x61
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	619a      	str	r2, [r3, #24]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f103 026b 	add.w	r2, r3, #107	@ 0x6b
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	61da      	str	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f103 0275 	add.w	r2, r3, #117	@ 0x75
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	621a      	str	r2, [r3, #32]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f103 027f 	add.w	r2, r3, #127	@ 0x7f
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f103 0289 	add.w	r2, r3, #137	@ 0x89
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d08:	f001 fb21 	bl	800534e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d0c:	f000 f8e8 	bl	8003ee0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d10:	f000 fb62 	bl	80043d8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003d14:	f000 fb06 	bl	8004324 <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8003d18:	f000 fa9c 	bl	8004254 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8003d1c:	f000 face 	bl	80042bc <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 8003d20:	f000 fa0a 	bl	8004138 <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 8003d24:	f000 fa56 	bl	80041d4 <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 8003d28:	f000 f956 	bl	8003fd8 <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 8003d2c:	f000 f930 	bl	8003f90 <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 8003d30:	484b      	ldr	r0, [pc, #300]	@ (8003e60 <main+0x15c>)
 8003d32:	f007 fe5b 	bl	800b9ec <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA	(&huart4,	rxLora, sizeof(rxLora));
 8003d36:	2201      	movs	r2, #1
 8003d38:	494a      	ldr	r1, [pc, #296]	@ (8003e64 <main+0x160>)
 8003d3a:	484b      	ldr	r0, [pc, #300]	@ (8003e68 <main+0x164>)
 8003d3c:	f008 fa38 	bl	800c1b0 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA	(&huart5,	rxGps, sizeof(rxGps));
 8003d40:	2202      	movs	r2, #2
 8003d42:	494a      	ldr	r1, [pc, #296]	@ (8003e6c <main+0x168>)
 8003d44:	484a      	ldr	r0, [pc, #296]	@ (8003e70 <main+0x16c>)
 8003d46:	f008 fa33 	bl	800c1b0 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	4949      	ldr	r1, [pc, #292]	@ (8003e74 <main+0x170>)
 8003d4e:	484a      	ldr	r0, [pc, #296]	@ (8003e78 <main+0x174>)
 8003d50:	f001 fef0 	bl	8005b34 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupLoraApp();
 8003d54:	f7ff fb86 	bl	8003464 <_Z12setupLoraAppv>

  chSetRN2903.addCommand( &macSetCh8 );
 8003d58:	4948      	ldr	r1, [pc, #288]	@ (8003e7c <main+0x178>)
 8003d5a:	4849      	ldr	r0, [pc, #292]	@ (8003e80 <main+0x17c>)
 8003d5c:	f7ff fc80 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh9 );
 8003d60:	4948      	ldr	r1, [pc, #288]	@ (8003e84 <main+0x180>)
 8003d62:	4847      	ldr	r0, [pc, #284]	@ (8003e80 <main+0x17c>)
 8003d64:	f7ff fc7c 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh10 );
 8003d68:	4947      	ldr	r1, [pc, #284]	@ (8003e88 <main+0x184>)
 8003d6a:	4845      	ldr	r0, [pc, #276]	@ (8003e80 <main+0x17c>)
 8003d6c:	f7ff fc78 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &radioSetMod	);
 8003d70:	4946      	ldr	r1, [pc, #280]	@ (8003e8c <main+0x188>)
 8003d72:	4847      	ldr	r0, [pc, #284]	@ (8003e90 <main+0x18c>)
 8003d74:	f7ff fc74 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetSf 	);
 8003d78:	4946      	ldr	r1, [pc, #280]	@ (8003e94 <main+0x190>)
 8003d7a:	4845      	ldr	r0, [pc, #276]	@ (8003e90 <main+0x18c>)
 8003d7c:	f7ff fc70 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetBw 	);
 8003d80:	4945      	ldr	r1, [pc, #276]	@ (8003e98 <main+0x194>)
 8003d82:	4843      	ldr	r0, [pc, #268]	@ (8003e90 <main+0x18c>)
 8003d84:	f7ff fc6c 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetPwr 	);
 8003d88:	4944      	ldr	r1, [pc, #272]	@ (8003e9c <main+0x198>)
 8003d8a:	4841      	ldr	r0, [pc, #260]	@ (8003e90 <main+0x18c>)
 8003d8c:	f7ff fc68 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &macSetDeveui );
 8003d90:	4943      	ldr	r1, [pc, #268]	@ (8003ea0 <main+0x19c>)
 8003d92:	483f      	ldr	r0, [pc, #252]	@ (8003e90 <main+0x18c>)
 8003d94:	f7ff fc64 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetDevAddr );
 8003d98:	4942      	ldr	r1, [pc, #264]	@ (8003ea4 <main+0x1a0>)
 8003d9a:	483d      	ldr	r0, [pc, #244]	@ (8003e90 <main+0x18c>)
 8003d9c:	f7ff fc60 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetNwkskey );
 8003da0:	4941      	ldr	r1, [pc, #260]	@ (8003ea8 <main+0x1a4>)
 8003da2:	483b      	ldr	r0, [pc, #236]	@ (8003e90 <main+0x18c>)
 8003da4:	f7ff fc5c 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetAppskey );
 8003da8:	4940      	ldr	r1, [pc, #256]	@ (8003eac <main+0x1a8>)
 8003daa:	4839      	ldr	r0, [pc, #228]	@ (8003e90 <main+0x18c>)
 8003dac:	f7ff fc58 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macJoinAbp );
 8003db0:	493f      	ldr	r1, [pc, #252]	@ (8003eb0 <main+0x1ac>)
 8003db2:	4837      	ldr	r0, [pc, #220]	@ (8003e90 <main+0x18c>)
 8003db4:	f7ff fc54 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetSync );
 8003db8:	493e      	ldr	r1, [pc, #248]	@ (8003eb4 <main+0x1b0>)
 8003dba:	4835      	ldr	r0, [pc, #212]	@ (8003e90 <main+0x18c>)
 8003dbc:	f7ff fc50 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSave );
 8003dc0:	493d      	ldr	r1, [pc, #244]	@ (8003eb8 <main+0x1b4>)
 8003dc2:	4833      	ldr	r0, [pc, #204]	@ (8003e90 <main+0x18c>)
 8003dc4:	f7ff fc4c 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loopRN2903.addCommand( &macTxData );
 8003dc8:	493c      	ldr	r1, [pc, #240]	@ (8003ebc <main+0x1b8>)
 8003dca:	483d      	ldr	r0, [pc, #244]	@ (8003ec0 <main+0x1bc>)
 8003dcc:	f7ff fc48 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>
  loopRN2903.addCommand( &macTxData );
 8003dd0:	493a      	ldr	r1, [pc, #232]	@ (8003ebc <main+0x1b8>)
 8003dd2:	483b      	ldr	r0, [pc, #236]	@ (8003ec0 <main+0x1bc>)
 8003dd4:	f7ff fc44 	bl	8003660 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loraCheck.setResponsePointer( rxCommand, 13);
 8003dd8:	220d      	movs	r2, #13
 8003dda:	493a      	ldr	r1, [pc, #232]	@ (8003ec4 <main+0x1c0>)
 8003ddc:	483a      	ldr	r0, [pc, #232]	@ (8003ec8 <main+0x1c4>)
 8003dde:	f7ff fd07 	bl	80037f0 <_ZN9loraCheck18setResponsePointerEPPhh>
  loraDecision.setRetries(3);
 8003de2:	2103      	movs	r1, #3
 8003de4:	4839      	ldr	r0, [pc, #228]	@ (8003ecc <main+0x1c8>)
 8003de6:	f7ff fe7f 	bl	8003ae8 <_ZN12loraDecision10setRetriesEh>

  loraInput.insertBuffer( bufferLoraIn, sizeof(bufferLoraIn));
 8003dea:	2232      	movs	r2, #50	@ 0x32
 8003dec:	4938      	ldr	r1, [pc, #224]	@ (8003ed0 <main+0x1cc>)
 8003dee:	4839      	ldr	r0, [pc, #228]	@ (8003ed4 <main+0x1d0>)
 8003df0:	f7ff fdb7 	bl	8003962 <_ZN9loraInput12insertBufferEPhh>
  //displayLink.inputDisplay(8888, 3);
  //
  HAL_IWDG_Init(&hiwdg);
 8003df4:	4838      	ldr	r0, [pc, #224]	@ (8003ed8 <main+0x1d4>)
 8003df6:	f006 f962 	bl	800a0be <HAL_IWDG_Init>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2110      	movs	r1, #16
 8003dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e02:	f003 feaf 	bl	8007b64 <HAL_GPIO_WritePin>

	  hwInput();
 8003e06:	f7fd ff1e 	bl	8001c46 <_Z7hwInputv>
	  linkInput();
 8003e0a:	f7fe fdcf 	bl	80029ac <_Z9linkInputv>
	  tcpInput();
 8003e0e:	f001 f8a3 	bl	8004f58 <_Z8tcpInputv>
	  app();
 8003e12:	f7fc fbf7 	bl	8000604 <_Z3appv>
	  tcpOutput();
 8003e16:	f001 f9d7 	bl	80051c8 <_Z9tcpOutputv>
	  linkOutput();
 8003e1a:	f7ff fae3 	bl	80033e4 <_Z10linkOutputv>
	  hwOutput();
 8003e1e:	f7fe fb97 	bl	8002550 <_Z8hwOutputv>

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003e22:	2200      	movs	r2, #0
 8003e24:	2110      	movs	r1, #16
 8003e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e2a:	f003 fe9b 	bl	8007b64 <HAL_GPIO_WritePin>

	  HAL_SuspendTick();
 8003e2e:	f001 fb03 	bl	8005438 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003e32:	2101      	movs	r1, #1
 8003e34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e38:	f006 f998 	bl	800a16c <HAL_PWR_EnterSLEEPMode>

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 8003e3c:	bf00      	nop
 8003e3e:	4b27      	ldr	r3, [pc, #156]	@ (8003edc <main+0x1d8>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	f083 0301 	eor.w	r3, r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f8      	bne.n	8003e3e <main+0x13a>
	  }							// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 8003e4c:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <main+0x1d8>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]

	  HAL_ResumeTick();
 8003e52:	f001 fb01 	bl	8005458 <HAL_ResumeTick>
	  HAL_IWDG_Refresh(&hiwdg);
 8003e56:	4820      	ldr	r0, [pc, #128]	@ (8003ed8 <main+0x1d4>)
 8003e58:	f006 f977 	bl	800a14a <HAL_IWDG_Refresh>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003e5c:	e7cd      	b.n	8003dfa <main+0xf6>
 8003e5e:	bf00      	nop
 8003e60:	200009dc 	.word	0x200009dc
 8003e64:	20000ae4 	.word	0x20000ae4
 8003e68:	200007ac 	.word	0x200007ac
 8003e6c:	20000ad4 	.word	0x20000ad4
 8003e70:	20000834 	.word	0x20000834
 8003e74:	20001130 	.word	0x20001130
 8003e78:	20000618 	.word	0x20000618
 8003e7c:	200005f4 	.word	0x200005f4
 8003e80:	20000d20 	.word	0x20000d20
 8003e84:	20000600 	.word	0x20000600
 8003e88:	2000060c 	.word	0x2000060c
 8003e8c:	20000540 	.word	0x20000540
 8003e90:	20000b8c 	.word	0x20000b8c
 8003e94:	2000054c 	.word	0x2000054c
 8003e98:	20000558 	.word	0x20000558
 8003e9c:	20000564 	.word	0x20000564
 8003ea0:	20000570 	.word	0x20000570
 8003ea4:	2000057c 	.word	0x2000057c
 8003ea8:	20000588 	.word	0x20000588
 8003eac:	20000594 	.word	0x20000594
 8003eb0:	200005ac 	.word	0x200005ac
 8003eb4:	200005b8 	.word	0x200005b8
 8003eb8:	200005c4 	.word	0x200005c4
 8003ebc:	200005d0 	.word	0x200005d0
 8003ec0:	20000eb4 	.word	0x20000eb4
 8003ec4:	20000174 	.word	0x20000174
 8003ec8:	20000b68 	.word	0x20000b68
 8003ecc:	20000b7c 	.word	0x20000b7c
 8003ed0:	20001048 	.word	0x20001048
 8003ed4:	20000b28 	.word	0x20000b28
 8003ed8:	20000a28 	.word	0x20000a28
 8003edc:	2000112c 	.word	0x2000112c

08003ee0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b096      	sub	sp, #88	@ 0x58
 8003ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ee6:	f107 0314 	add.w	r3, r7, #20
 8003eea:	2244      	movs	r2, #68	@ 0x44
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f009 fbf5 	bl	800d6de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003f02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003f06:	f006 f973 	bl	800a1f0 <HAL_PWREx_ControlVoltageScaling>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf14      	ite	ne
 8003f10:	2301      	movne	r3, #1
 8003f12:	2300      	moveq	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003f1a:	f000 fb8d 	bl	8004638 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f26:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f2e:	2340      	movs	r3, #64	@ 0x40
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f36:	f107 0314 	add.w	r3, r7, #20
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f006 f9f6 	bl	800a32c <HAL_RCC_OscConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8003f50:	f000 fb72 	bl	8004638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f54:	230f      	movs	r3, #15
 8003f56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f68:	463b      	mov	r3, r7
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f006 fdf7 	bl	800ab60 <HAL_RCC_ClockConfig>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8003f82:	f000 fb59 	bl	8004638 <Error_Handler>
  }
}
 8003f86:	bf00      	nop
 8003f88:	3758      	adds	r7, #88	@ 0x58
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* Initialize the IWDG peripheral */
  hiwdg.Instance = IWDG;
 8003f94:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd0 <_ZL12MX_IWDG_Initv+0x40>)
 8003f96:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd4 <_ZL12MX_IWDG_Initv+0x44>)
 8003f98:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd0 <_ZL12MX_IWDG_Initv+0x40>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 399;
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <_ZL12MX_IWDG_Initv+0x40>)
 8003fa2:	f240 128f 	movw	r2, #399	@ 0x18f
 8003fa6:	609a      	str	r2, [r3, #8]
  hiwdg.Init.Window	= 390;
 8003fa8:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <_ZL12MX_IWDG_Initv+0x40>)
 8003faa:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8003fae:	60da      	str	r2, [r3, #12]

  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003fb0:	4807      	ldr	r0, [pc, #28]	@ (8003fd0 <_ZL12MX_IWDG_Initv+0x40>)
 8003fb2:	f006 f884 	bl	800a0be <HAL_IWDG_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <_ZL12MX_IWDG_Initv+0x3a>
  {
    Error_Handler();
 8003fc6:	f000 fb37 	bl	8004638 <Error_Handler>
  }

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000a28 	.word	0x20000a28
 8003fd4:	40003000 	.word	0x40003000

08003fd8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	@ 0x28
 8003fdc:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
 8003ff8:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8003ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8004128 <_ZL12MX_ADC1_Initv+0x150>)
 8003ffe:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004000:	4b48      	ldr	r3, [pc, #288]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004002:	2200      	movs	r2, #0
 8004004:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004006:	4b47      	ldr	r3, [pc, #284]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800400c:	4b45      	ldr	r3, [pc, #276]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004012:	4b44      	ldr	r3, [pc, #272]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004014:	2201      	movs	r2, #1
 8004016:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004018:	4b42      	ldr	r3, [pc, #264]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 800401a:	2204      	movs	r2, #4
 800401c:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 800401e:	4b41      	ldr	r3, [pc, #260]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004020:	2200      	movs	r2, #0
 8004022:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8004024:	4b3f      	ldr	r3, [pc, #252]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004026:	2201      	movs	r2, #1
 8004028:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 800402a:	4b3e      	ldr	r3, [pc, #248]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 800402c:	2203      	movs	r2, #3
 800402e:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004030:	4b3c      	ldr	r3, [pc, #240]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004038:	4b3a      	ldr	r3, [pc, #232]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800403e:	4b39      	ldr	r3, [pc, #228]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004040:	2200      	movs	r2, #0
 8004042:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004044:	4b37      	ldr	r3, [pc, #220]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800404c:	4b35      	ldr	r3, [pc, #212]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 800404e:	2200      	movs	r2, #0
 8004050:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8004052:	4b34      	ldr	r3, [pc, #208]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800405a:	4832      	ldr	r0, [pc, #200]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 800405c:	f001 fc16 	bl	800588c <HAL_ADC_Init>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 8004070:	f000 fae2 	bl	8004638 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004078:	f107 031c 	add.w	r3, r7, #28
 800407c:	4619      	mov	r1, r3
 800407e:	4829      	ldr	r0, [pc, #164]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004080:	f002 fdca 	bl	8006c18 <HAL_ADCEx_MultiModeConfigChannel>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf14      	ite	ne
 800408a:	2301      	movne	r3, #1
 800408c:	2300      	moveq	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 8004094:	f000 fad0 	bl	8004638 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8004098:	4b24      	ldr	r3, [pc, #144]	@ (800412c <_ZL12MX_ADC1_Initv+0x154>)
 800409a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800409c:	2306      	movs	r3, #6
 800409e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80040a0:	2303      	movs	r3, #3
 80040a2:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80040a4:	237f      	movs	r3, #127	@ 0x7f
 80040a6:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80040a8:	2304      	movs	r3, #4
 80040aa:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	481b      	ldr	r0, [pc, #108]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 80040b6:	f002 f831 	bl	800611c <HAL_ADC_ConfigChannel>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 80040ca:	f000 fab5 	bl	8004638 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 80040ce:	4b18      	ldr	r3, [pc, #96]	@ (8004130 <_ZL12MX_ADC1_Initv+0x158>)
 80040d0:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80040d2:	230c      	movs	r3, #12
 80040d4:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4812      	ldr	r0, [pc, #72]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 80040dc:	f002 f81e 	bl	800611c <HAL_ADC_ConfigChannel>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 80040f0:	f000 faa2 	bl	8004638 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80040f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004134 <_ZL12MX_ADC1_Initv+0x15c>)
 80040f6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 80040f8:	2312      	movs	r3, #18
 80040fa:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	4808      	ldr	r0, [pc, #32]	@ (8004124 <_ZL12MX_ADC1_Initv+0x14c>)
 8004102:	f002 f80b 	bl	800611c <HAL_ADC_ConfigChannel>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 8004116:	f000 fa8f 	bl	8004638 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 800411a:	bf00      	nop
 800411c:	3728      	adds	r7, #40	@ 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000618 	.word	0x20000618
 8004128:	50040000 	.word	0x50040000
 800412c:	04300002 	.word	0x04300002
 8004130:	08600004 	.word	0x08600004
 8004134:	0c900008 	.word	0x0c900008

08004138 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800413c:	4b22      	ldr	r3, [pc, #136]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 800413e:	4a23      	ldr	r2, [pc, #140]	@ (80041cc <_ZL12MX_I2C1_Initv+0x94>)
 8004140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004142:	4b21      	ldr	r3, [pc, #132]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 8004144:	4a22      	ldr	r2, [pc, #136]	@ (80041d0 <_ZL12MX_I2C1_Initv+0x98>)
 8004146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004148:	4b1f      	ldr	r3, [pc, #124]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800414e:	4b1e      	ldr	r3, [pc, #120]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 8004150:	2201      	movs	r2, #1
 8004152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004154:	4b1c      	ldr	r3, [pc, #112]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800415a:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 800415c:	2200      	movs	r2, #0
 800415e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004160:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 8004162:	2200      	movs	r2, #0
 8004164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004166:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 8004168:	2200      	movs	r2, #0
 800416a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800416c:	4b16      	ldr	r3, [pc, #88]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 800416e:	2200      	movs	r2, #0
 8004170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004172:	4815      	ldr	r0, [pc, #84]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 8004174:	f003 fd0e 	bl	8007b94 <HAL_I2C_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8004188:	f000 fa56 	bl	8004638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800418c:	2100      	movs	r1, #0
 800418e:	480e      	ldr	r0, [pc, #56]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 8004190:	f005 fefe 	bl	8009f90 <HAL_I2CEx_ConfigAnalogFilter>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80041a4:	f000 fa48 	bl	8004638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80041a8:	2100      	movs	r1, #0
 80041aa:	4807      	ldr	r0, [pc, #28]	@ (80041c8 <_ZL12MX_I2C1_Initv+0x90>)
 80041ac:	f005 ff3b 	bl	800a026 <HAL_I2CEx_ConfigDigitalFilter>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80041c0:	f000 fa3a 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200006c8 	.word	0x200006c8
 80041cc:	40005400 	.word	0x40005400
 80041d0:	2000090e 	.word	0x2000090e

080041d4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 80041e4:	4b19      	ldr	r3, [pc, #100]	@ (800424c <_ZL12MX_TIM6_Initv+0x78>)
 80041e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004250 <_ZL12MX_TIM6_Initv+0x7c>)
 80041e8:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 80041ea:	4b18      	ldr	r3, [pc, #96]	@ (800424c <_ZL12MX_TIM6_Initv+0x78>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f0:	4b16      	ldr	r3, [pc, #88]	@ (800424c <_ZL12MX_TIM6_Initv+0x78>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 80041f6:	4b15      	ldr	r3, [pc, #84]	@ (800424c <_ZL12MX_TIM6_Initv+0x78>)
 80041f8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80041fc:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041fe:	4b13      	ldr	r3, [pc, #76]	@ (800424c <_ZL12MX_TIM6_Initv+0x78>)
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004204:	4811      	ldr	r0, [pc, #68]	@ (800424c <_ZL12MX_TIM6_Initv+0x78>)
 8004206:	f007 fb99 	bl	800b93c <HAL_TIM_Base_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 800421a:	f000 fa0d 	bl	8004638 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4808      	ldr	r0, [pc, #32]	@ (800424c <_ZL12MX_TIM6_Initv+0x78>)
 800422c:	f007 fe12 	bl	800be54 <HAL_TIMEx_MasterConfigSynchronization>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	bf14      	ite	ne
 8004236:	2301      	movne	r3, #1
 8004238:	2300      	moveq	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 8004240:	f000 f9fa 	bl	8004638 <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	200009dc 	.word	0x200009dc
 8004250:	40001000 	.word	0x40001000

08004254 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004258:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 800425a:	4a17      	ldr	r2, [pc, #92]	@ (80042b8 <_ZL13MX_UART4_Initv+0x64>)
 800425c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 800425e:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 8004260:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8004264:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b13      	ldr	r3, [pc, #76]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b11      	ldr	r3, [pc, #68]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004272:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800428a:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004290:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004296:	4807      	ldr	r0, [pc, #28]	@ (80042b4 <_ZL13MX_UART4_Initv+0x60>)
 8004298:	f007 fe82 	bl	800bfa0 <HAL_UART_Init>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf14      	ite	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	2300      	moveq	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 80042ac:	f000 f9c4 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	200007ac 	.word	0x200007ac
 80042b8:	40004c00 	.word	0x40004c00

080042bc <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80042c0:	4b16      	ldr	r3, [pc, #88]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042c2:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <_ZL13MX_UART5_Initv+0x64>)
 80042c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042ce:	4b13      	ldr	r3, [pc, #76]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 80042da:	4b10      	ldr	r3, [pc, #64]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80042e0:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042e2:	220c      	movs	r2, #12
 80042e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042f8:	4b08      	ldr	r3, [pc, #32]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80042fe:	4807      	ldr	r0, [pc, #28]	@ (800431c <_ZL13MX_UART5_Initv+0x60>)
 8004300:	f007 fe4e 	bl	800bfa0 <HAL_UART_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	bf14      	ite	ne
 800430a:	2301      	movne	r3, #1
 800430c:	2300      	moveq	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8004314:	f000 f990 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004318:	bf00      	nop
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000834 	.word	0x20000834
 8004320:	40005000 	.word	0x40005000

08004324 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800432a:	4b2a      	ldr	r3, [pc, #168]	@ (80043d4 <_ZL11MX_DMA_Initv+0xb0>)
 800432c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800432e:	4a29      	ldr	r2, [pc, #164]	@ (80043d4 <_ZL11MX_DMA_Initv+0xb0>)
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	6493      	str	r3, [r2, #72]	@ 0x48
 8004336:	4b27      	ldr	r3, [pc, #156]	@ (80043d4 <_ZL11MX_DMA_Initv+0xb0>)
 8004338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004342:	4b24      	ldr	r3, [pc, #144]	@ (80043d4 <_ZL11MX_DMA_Initv+0xb0>)
 8004344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004346:	4a23      	ldr	r2, [pc, #140]	@ (80043d4 <_ZL11MX_DMA_Initv+0xb0>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6493      	str	r3, [r2, #72]	@ 0x48
 800434e:	4b21      	ldr	r3, [pc, #132]	@ (80043d4 <_ZL11MX_DMA_Initv+0xb0>)
 8004350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	200b      	movs	r0, #11
 8004360:	f002 fe09 	bl	8006f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004364:	200b      	movs	r0, #11
 8004366:	f002 fe22 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2010      	movs	r0, #16
 8004370:	f002 fe01 	bl	8006f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004374:	2010      	movs	r0, #16
 8004376:	f002 fe1a 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2100      	movs	r1, #0
 800437e:	2011      	movs	r0, #17
 8004380:	f002 fdf9 	bl	8006f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004384:	2011      	movs	r0, #17
 8004386:	f002 fe12 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	2038      	movs	r0, #56	@ 0x38
 8004390:	f002 fdf1 	bl	8006f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8004394:	2038      	movs	r0, #56	@ 0x38
 8004396:	f002 fe0a 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2100      	movs	r1, #0
 800439e:	2039      	movs	r0, #57	@ 0x39
 80043a0:	f002 fde9 	bl	8006f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80043a4:	2039      	movs	r0, #57	@ 0x39
 80043a6:	f002 fe02 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2100      	movs	r1, #0
 80043ae:	203a      	movs	r0, #58	@ 0x3a
 80043b0:	f002 fde1 	bl	8006f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80043b4:	203a      	movs	r0, #58	@ 0x3a
 80043b6:	f002 fdfa 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	203c      	movs	r0, #60	@ 0x3c
 80043c0:	f002 fdd9 	bl	8006f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80043c4:	203c      	movs	r0, #60	@ 0x3c
 80043c6:	f002 fdf2 	bl	8006fae <HAL_NVIC_EnableIRQ>

}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000

080043d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08c      	sub	sp, #48	@ 0x30
 80043dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043de:	f107 031c 	add.w	r3, r7, #28
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	609a      	str	r2, [r3, #8]
 80043ea:	60da      	str	r2, [r3, #12]
 80043ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ee:	4b4b      	ldr	r3, [pc, #300]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 80043f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f2:	4a4a      	ldr	r2, [pc, #296]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 80043f4:	f043 0310 	orr.w	r3, r3, #16
 80043f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043fa:	4b48      	ldr	r3, [pc, #288]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 80043fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004406:	4b45      	ldr	r3, [pc, #276]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440a:	4a44      	ldr	r2, [pc, #272]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 800440c:	f043 0304 	orr.w	r3, r3, #4
 8004410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004412:	4b42      	ldr	r3, [pc, #264]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800441e:	4b3f      	ldr	r3, [pc, #252]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004422:	4a3e      	ldr	r2, [pc, #248]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800442a:	4b3c      	ldr	r3, [pc, #240]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004436:	4b39      	ldr	r3, [pc, #228]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	4a38      	ldr	r2, [pc, #224]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004442:	4b36      	ldr	r3, [pc, #216]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800444e:	4b33      	ldr	r3, [pc, #204]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	4a32      	ldr	r2, [pc, #200]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004454:	f043 0308 	orr.w	r3, r3, #8
 8004458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800445a:	4b30      	ldr	r3, [pc, #192]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004466:	4b2d      	ldr	r3, [pc, #180]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	4a2c      	ldr	r2, [pc, #176]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004472:	4b2a      	ldr	r3, [pc, #168]	@ (800451c <_ZL12MX_GPIO_Initv+0x144>)
 8004474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800447e:	2200      	movs	r2, #0
 8004480:	210f      	movs	r1, #15
 8004482:	4827      	ldr	r0, [pc, #156]	@ (8004520 <_ZL12MX_GPIO_Initv+0x148>)
 8004484:	f003 fb6e 	bl	8007b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8004488:	2200      	movs	r2, #0
 800448a:	2174      	movs	r1, #116	@ 0x74
 800448c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004490:	f003 fb68 	bl	8007b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004494:	2200      	movs	r2, #0
 8004496:	f64f 7105 	movw	r1, #65285	@ 0xff05
 800449a:	4822      	ldr	r0, [pc, #136]	@ (8004524 <_ZL12MX_GPIO_Initv+0x14c>)
 800449c:	f003 fb62 	bl	8007b64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 80044a0:	230f      	movs	r3, #15
 80044a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a4:	2301      	movs	r3, #1
 80044a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044b0:	f107 031c 	add.w	r3, r7, #28
 80044b4:	4619      	mov	r1, r3
 80044b6:	481a      	ldr	r0, [pc, #104]	@ (8004520 <_ZL12MX_GPIO_Initv+0x148>)
 80044b8:	f003 f8b8 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80044bc:	2374      	movs	r3, #116	@ 0x74
 80044be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c0:	2301      	movs	r3, #1
 80044c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044cc:	f107 031c 	add.w	r3, r7, #28
 80044d0:	4619      	mov	r1, r3
 80044d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044d6:	f003 f8a9 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044da:	2308      	movs	r3, #8
 80044dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044de:	2300      	movs	r3, #0
 80044e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e6:	f107 031c 	add.w	r3, r7, #28
 80044ea:	4619      	mov	r1, r3
 80044ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044f0:	f003 f89c 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80044f4:	f64f 7301 	movw	r3, #65281	@ 0xff01
 80044f8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044fa:	2301      	movs	r3, #1
 80044fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004502:	2300      	movs	r3, #0
 8004504:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004506:	f107 031c 	add.w	r3, r7, #28
 800450a:	4619      	mov	r1, r3
 800450c:	4805      	ldr	r0, [pc, #20]	@ (8004524 <_ZL12MX_GPIO_Initv+0x14c>)
 800450e:	f003 f88d 	bl	800762c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004512:	bf00      	nop
 8004514:	3730      	adds	r7, #48	@ 0x30
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000
 8004520:	48001000 	.word	0x48001000
 8004524:	48000c00 	.word	0x48000c00

08004528 <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a05      	ldr	r2, [pc, #20]	@ (800454c <HAL_ADC_ConvCpltCallback+0x24>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d102      	bne.n	8004540 <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 800453a:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <HAL_ADC_ConvCpltCallback+0x28>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	50040000 	.word	0x50040000
 8004550:	2000113c 	.word	0x2000113c

08004554 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a15      	ldr	r2, [pc, #84]	@ (80045b8 <HAL_UART_RxCpltCallback+0x64>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d10a      	bne.n	800457c <HAL_UART_RxCpltCallback+0x28>
		loraIn.insertElement(rxLora[0]);
 8004566:	4b15      	ldr	r3, [pc, #84]	@ (80045bc <HAL_UART_RxCpltCallback+0x68>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	4619      	mov	r1, r3
 800456c:	4814      	ldr	r0, [pc, #80]	@ (80045c0 <HAL_UART_RxCpltCallback+0x6c>)
 800456e:	f7fc ff3b 	bl	80013e8 <_ZN8fifoUart13insertElementEh>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 8004572:	2201      	movs	r2, #1
 8004574:	4911      	ldr	r1, [pc, #68]	@ (80045bc <HAL_UART_RxCpltCallback+0x68>)
 8004576:	4813      	ldr	r0, [pc, #76]	@ (80045c4 <HAL_UART_RxCpltCallback+0x70>)
 8004578:	f007 fe1a 	bl	800c1b0 <HAL_UART_Receive_DMA>
	}

	if(huart->Instance == UART5){
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a11      	ldr	r2, [pc, #68]	@ (80045c8 <HAL_UART_RxCpltCallback+0x74>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d114      	bne.n	80045b0 <HAL_UART_RxCpltCallback+0x5c>
		gpsIn.insertElement(rxGps[0]);
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_UART_RxCpltCallback+0x78>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	4810      	ldr	r0, [pc, #64]	@ (80045d0 <HAL_UART_RxCpltCallback+0x7c>)
 800458e:	f7fc ff2b 	bl	80013e8 <_ZN8fifoUart13insertElementEh>
		gpsIn.insertElement(rxGps[1]);
 8004592:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <HAL_UART_RxCpltCallback+0x78>)
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	4619      	mov	r1, r3
 8004598:	480d      	ldr	r0, [pc, #52]	@ (80045d0 <HAL_UART_RxCpltCallback+0x7c>)
 800459a:	f7fc ff25 	bl	80013e8 <_ZN8fifoUart13insertElementEh>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxGps, sizeof(rxGps));
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart5, rxGps, sizeof(rxGps));
 800459e:	2202      	movs	r2, #2
 80045a0:	490a      	ldr	r1, [pc, #40]	@ (80045cc <HAL_UART_RxCpltCallback+0x78>)
 80045a2:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <HAL_UART_RxCpltCallback+0x80>)
 80045a4:	f007 fe04 	bl	800c1b0 <HAL_UART_Receive_DMA>
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80045a8:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <HAL_UART_RxCpltCallback+0x80>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2210      	movs	r2, #16
 80045ae:	621a      	str	r2, [r3, #32]
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
	}
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40004c00 	.word	0x40004c00
 80045bc:	20000ae4 	.word	0x20000ae4
 80045c0:	20000ae8 	.word	0x20000ae8
 80045c4:	200007ac 	.word	0x200007ac
 80045c8:	40005000 	.word	0x40005000
 80045cc:	20000ad4 	.word	0x20000ad4
 80045d0:	20000a94 	.word	0x20000a94
 80045d4:	20000834 	.word	0x20000834

080045d8 <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a05      	ldr	r2, [pc, #20]	@ (80045fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d102      	bne.n	80045f0 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 80045ea:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
	}
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40001000 	.word	0x40001000
 8004600:	2000112c 	.word	0x2000112c

08004604 <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 800460c:	4b04      	ldr	r3, [pc, #16]	@ (8004620 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800460e:	2201      	movs	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20001097 	.word	0x20001097

08004624 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800463c:	b672      	cpsid	i
}
 800463e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <Error_Handler+0x8>

08004644 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d115      	bne.n	8004680 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800465a:	4293      	cmp	r3, r2
 800465c:	d110      	bne.n	8004680 <_Z41__static_initialization_and_destruction_0ii+0x3c>
gpsInput gpsInput;		// Instancia de gpsInput
 800465e:	480a      	ldr	r0, [pc, #40]	@ (8004688 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004660:	f7fc ff4a 	bl	80014f8 <_ZN8gpsInputC1Ev>
fifoUart	gpsIn;		//
 8004664:	4809      	ldr	r0, [pc, #36]	@ (800468c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004666:	f7fc feaf 	bl	80013c8 <_ZN8fifoUartC1Ev>
fifoUart loraIn;			// FIFO que recibe los datos
 800466a:	4809      	ldr	r0, [pc, #36]	@ (8004690 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800466c:	f7fc feac 	bl	80013c8 <_ZN8fifoUartC1Ev>
wdTimeout loraTimeWd(4000);
 8004670:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8004674:	4807      	ldr	r0, [pc, #28]	@ (8004694 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004676:	f7ff f857 	bl	8003728 <_ZN9wdTimeoutC1El>
fifoCommands fifoContent;
 800467a:	4807      	ldr	r0, [pc, #28]	@ (8004698 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800467c:	f7ff fb04 	bl	8003c88 <_ZN12fifoCommandsC1Ev>
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000a3c 	.word	0x20000a3c
 800468c:	20000a94 	.word	0x20000a94
 8004690:	20000ae8 	.word	0x20000ae8
 8004694:	2000107c 	.word	0x2000107c
 8004698:	20001098 	.word	0x20001098

0800469c <_GLOBAL__sub_I_hadc1>:
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
 80046a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80046a4:	2001      	movs	r0, #1
 80046a6:	f7ff ffcd 	bl	8004644 <_Z41__static_initialization_and_destruction_0ii>
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b2:	4b0f      	ldr	r3, [pc, #60]	@ (80046f0 <HAL_MspInit+0x44>)
 80046b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b6:	4a0e      	ldr	r2, [pc, #56]	@ (80046f0 <HAL_MspInit+0x44>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80046be:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <HAL_MspInit+0x44>)
 80046c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <HAL_MspInit+0x44>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ce:	4a08      	ldr	r2, [pc, #32]	@ (80046f0 <HAL_MspInit+0x44>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_MspInit+0x44>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0ac      	sub	sp, #176	@ 0xb0
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800470c:	f107 0310 	add.w	r3, r7, #16
 8004710:	228c      	movs	r2, #140	@ 0x8c
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f008 ffe2 	bl	800d6de <memset>
  if(hadc->Instance==ADC1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a40      	ldr	r2, [pc, #256]	@ (8004820 <HAL_ADC_MspInit+0x12c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d179      	bne.n	8004818 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004724:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004728:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800472a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800472e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8004732:	2303      	movs	r3, #3
 8004734:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800473a:	2308      	movs	r3, #8
 800473c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800473e:	2302      	movs	r3, #2
 8004740:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004742:	2302      	movs	r3, #2
 8004744:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004746:	2302      	movs	r3, #2
 8004748:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800474a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004750:	f107 0310 	add.w	r3, r7, #16
 8004754:	4618      	mov	r0, r3
 8004756:	f006 fc27 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8004760:	f7ff ff6a 	bl	8004638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004764:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <HAL_ADC_MspInit+0x130>)
 8004766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004768:	4a2e      	ldr	r2, [pc, #184]	@ (8004824 <HAL_ADC_MspInit+0x130>)
 800476a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800476e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004770:	4b2c      	ldr	r3, [pc, #176]	@ (8004824 <HAL_ADC_MspInit+0x130>)
 8004772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004774:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800477c:	4b29      	ldr	r3, [pc, #164]	@ (8004824 <HAL_ADC_MspInit+0x130>)
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	4a28      	ldr	r2, [pc, #160]	@ (8004824 <HAL_ADC_MspInit+0x130>)
 8004782:	f043 0304 	orr.w	r3, r3, #4
 8004786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004788:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <HAL_ADC_MspInit+0x130>)
 800478a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004794:	2307      	movs	r3, #7
 8004796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800479a:	2303      	movs	r3, #3
 800479c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80047aa:	4619      	mov	r1, r3
 80047ac:	481e      	ldr	r0, [pc, #120]	@ (8004828 <HAL_ADC_MspInit+0x134>)
 80047ae:	f002 ff3d 	bl	800762c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80047b2:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_ADC_MspInit+0x13c>)
 80047b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80047b8:	4b1c      	ldr	r3, [pc, #112]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047be:	4b1b      	ldr	r3, [pc, #108]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047c4:	4b19      	ldr	r3, [pc, #100]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047ca:	4b18      	ldr	r3, [pc, #96]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047cc:	2280      	movs	r2, #128	@ 0x80
 80047ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047d8:	4b14      	ldr	r3, [pc, #80]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047e0:	4b12      	ldr	r3, [pc, #72]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047e2:	2220      	movs	r2, #32
 80047e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047e6:	4b11      	ldr	r3, [pc, #68]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047ec:	480f      	ldr	r0, [pc, #60]	@ (800482c <HAL_ADC_MspInit+0x138>)
 80047ee:	f002 fc07 	bl	8007000 <HAL_DMA_Init>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80047f8:	f7ff ff1e 	bl	8004638 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a0b      	ldr	r2, [pc, #44]	@ (800482c <HAL_ADC_MspInit+0x138>)
 8004800:	651a      	str	r2, [r3, #80]	@ 0x50
 8004802:	4a0a      	ldr	r2, [pc, #40]	@ (800482c <HAL_ADC_MspInit+0x138>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004808:	2200      	movs	r2, #0
 800480a:	2100      	movs	r1, #0
 800480c:	2012      	movs	r0, #18
 800480e:	f002 fbb2 	bl	8006f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004812:	2012      	movs	r0, #18
 8004814:	f002 fbcb 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004818:	bf00      	nop
 800481a:	37b0      	adds	r7, #176	@ 0xb0
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	50040000 	.word	0x50040000
 8004824:	40021000 	.word	0x40021000
 8004828:	48000800 	.word	0x48000800
 800482c:	20000680 	.word	0x20000680
 8004830:	40020008 	.word	0x40020008

08004834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b0ac      	sub	sp, #176	@ 0xb0
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	228c      	movs	r2, #140	@ 0x8c
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f008 ff42 	bl	800d6de <memset>
  if(hi2c->Instance==I2C1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a52      	ldr	r2, [pc, #328]	@ (80049a8 <HAL_I2C_MspInit+0x174>)
 8004860:	4293      	cmp	r3, r2
 8004862:	f040 809d 	bne.w	80049a0 <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004866:	2340      	movs	r3, #64	@ 0x40
 8004868:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800486a:	2300      	movs	r3, #0
 800486c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800486e:	f107 0310 	add.w	r3, r7, #16
 8004872:	4618      	mov	r0, r3
 8004874:	f006 fb98 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800487e:	f7ff fedb 	bl	8004638 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004882:	4b4a      	ldr	r3, [pc, #296]	@ (80049ac <HAL_I2C_MspInit+0x178>)
 8004884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004886:	4a49      	ldr	r2, [pc, #292]	@ (80049ac <HAL_I2C_MspInit+0x178>)
 8004888:	f043 0302 	orr.w	r3, r3, #2
 800488c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800488e:	4b47      	ldr	r3, [pc, #284]	@ (80049ac <HAL_I2C_MspInit+0x178>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800489a:	23c0      	movs	r3, #192	@ 0xc0
 800489c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048a0:	2312      	movs	r3, #18
 80048a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ac:	2303      	movs	r3, #3
 80048ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048b2:	2304      	movs	r3, #4
 80048b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80048bc:	4619      	mov	r1, r3
 80048be:	483c      	ldr	r0, [pc, #240]	@ (80049b0 <HAL_I2C_MspInit+0x17c>)
 80048c0:	f002 feb4 	bl	800762c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048c4:	4b39      	ldr	r3, [pc, #228]	@ (80049ac <HAL_I2C_MspInit+0x178>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c8:	4a38      	ldr	r2, [pc, #224]	@ (80049ac <HAL_I2C_MspInit+0x178>)
 80048ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d0:	4b36      	ldr	r3, [pc, #216]	@ (80049ac <HAL_I2C_MspInit+0x178>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80048dc:	4b35      	ldr	r3, [pc, #212]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 80048de:	4a36      	ldr	r2, [pc, #216]	@ (80049b8 <HAL_I2C_MspInit+0x184>)
 80048e0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80048e2:	4b34      	ldr	r3, [pc, #208]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 80048e4:	2203      	movs	r2, #3
 80048e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048e8:	4b32      	ldr	r3, [pc, #200]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048ee:	4b31      	ldr	r3, [pc, #196]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048f4:	4b2f      	ldr	r3, [pc, #188]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 80048f6:	2280      	movs	r2, #128	@ 0x80
 80048f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048fa:	4b2e      	ldr	r3, [pc, #184]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004900:	4b2c      	ldr	r3, [pc, #176]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 8004902:	2200      	movs	r2, #0
 8004904:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004906:	4b2b      	ldr	r3, [pc, #172]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 8004908:	2200      	movs	r2, #0
 800490a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800490c:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 800490e:	2200      	movs	r2, #0
 8004910:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004912:	4828      	ldr	r0, [pc, #160]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 8004914:	f002 fb74 	bl	8007000 <HAL_DMA_Init>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 800491e:	f7ff fe8b 	bl	8004638 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a23      	ldr	r2, [pc, #140]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 8004926:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004928:	4a22      	ldr	r2, [pc, #136]	@ (80049b4 <HAL_I2C_MspInit+0x180>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800492e:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 8004930:	4a23      	ldr	r2, [pc, #140]	@ (80049c0 <HAL_I2C_MspInit+0x18c>)
 8004932:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8004934:	4b21      	ldr	r3, [pc, #132]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 8004936:	2203      	movs	r2, #3
 8004938:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 800493c:	2210      	movs	r2, #16
 800493e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004940:	4b1e      	ldr	r3, [pc, #120]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 8004942:	2200      	movs	r2, #0
 8004944:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004946:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 8004948:	2280      	movs	r2, #128	@ 0x80
 800494a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800494c:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 800494e:	2200      	movs	r2, #0
 8004950:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004952:	4b1a      	ldr	r3, [pc, #104]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 8004954:	2200      	movs	r2, #0
 8004956:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004958:	4b18      	ldr	r3, [pc, #96]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 800495a:	2200      	movs	r2, #0
 800495c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800495e:	4b17      	ldr	r3, [pc, #92]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 8004960:	2200      	movs	r2, #0
 8004962:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004964:	4815      	ldr	r0, [pc, #84]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 8004966:	f002 fb4b 	bl	8007000 <HAL_DMA_Init>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 8004970:	f7ff fe62 	bl	8004638 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a11      	ldr	r2, [pc, #68]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 8004978:	639a      	str	r2, [r3, #56]	@ 0x38
 800497a:	4a10      	ldr	r2, [pc, #64]	@ (80049bc <HAL_I2C_MspInit+0x188>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004980:	2200      	movs	r2, #0
 8004982:	2100      	movs	r1, #0
 8004984:	201f      	movs	r0, #31
 8004986:	f002 faf6 	bl	8006f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800498a:	201f      	movs	r0, #31
 800498c:	f002 fb0f 	bl	8006fae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004990:	2200      	movs	r2, #0
 8004992:	2100      	movs	r1, #0
 8004994:	2020      	movs	r0, #32
 8004996:	f002 faee 	bl	8006f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800499a:	2020      	movs	r0, #32
 800499c:	f002 fb07 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049a0:	bf00      	nop
 80049a2:	37b0      	adds	r7, #176	@ 0xb0
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40005400 	.word	0x40005400
 80049ac:	40021000 	.word	0x40021000
 80049b0:	48000400 	.word	0x48000400
 80049b4:	2000071c 	.word	0x2000071c
 80049b8:	40020080 	.word	0x40020080
 80049bc:	20000764 	.word	0x20000764
 80049c0:	4002006c 	.word	0x4002006c

080049c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a08 <HAL_TIM_Base_MspInit+0x44>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d113      	bne.n	80049fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80049d6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <HAL_TIM_Base_MspInit+0x48>)
 80049d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049da:	4a0c      	ldr	r2, [pc, #48]	@ (8004a0c <HAL_TIM_Base_MspInit+0x48>)
 80049dc:	f043 0310 	orr.w	r3, r3, #16
 80049e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049e2:	4b0a      	ldr	r3, [pc, #40]	@ (8004a0c <HAL_TIM_Base_MspInit+0x48>)
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2100      	movs	r1, #0
 80049f2:	2036      	movs	r0, #54	@ 0x36
 80049f4:	f002 fabf 	bl	8006f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049f8:	2036      	movs	r0, #54	@ 0x36
 80049fa:	f002 fad8 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40001000 	.word	0x40001000
 8004a0c:	40021000 	.word	0x40021000

08004a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b0b0      	sub	sp, #192	@ 0xc0
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a28:	f107 0320 	add.w	r3, r7, #32
 8004a2c:	228c      	movs	r2, #140	@ 0x8c
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f008 fe54 	bl	800d6de <memset>
  if(huart->Instance==UART4)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8004b70 <HAL_UART_MspInit+0x160>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	f040 80a3 	bne.w	8004b88 <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004a42:	2308      	movs	r3, #8
 8004a44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004a46:	2300      	movs	r3, #0
 8004a48:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a4a:	f107 0320 	add.w	r3, r7, #32
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f006 faaa 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a5a:	f7ff fded 	bl	8004638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a5e:	4b45      	ldr	r3, [pc, #276]	@ (8004b74 <HAL_UART_MspInit+0x164>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a62:	4a44      	ldr	r2, [pc, #272]	@ (8004b74 <HAL_UART_MspInit+0x164>)
 8004a64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a6a:	4b42      	ldr	r3, [pc, #264]	@ (8004b74 <HAL_UART_MspInit+0x164>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a76:	4b3f      	ldr	r3, [pc, #252]	@ (8004b74 <HAL_UART_MspInit+0x164>)
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b74 <HAL_UART_MspInit+0x164>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a82:	4b3c      	ldr	r3, [pc, #240]	@ (8004b74 <HAL_UART_MspInit+0x164>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a94:	2302      	movs	r3, #2
 8004a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ab6:	f002 fdb9 	bl	800762c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8004aba:	4b2f      	ldr	r3, [pc, #188]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004abc:	4a2f      	ldr	r2, [pc, #188]	@ (8004b7c <HAL_UART_MspInit+0x16c>)
 8004abe:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004acc:	4b2a      	ldr	r3, [pc, #168]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ad2:	4b29      	ldr	r3, [pc, #164]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004ad4:	2280      	movs	r2, #128	@ 0x80
 8004ad6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ad8:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ade:	4b26      	ldr	r3, [pc, #152]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004ae4:	4b24      	ldr	r3, [pc, #144]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004aea:	4b23      	ldr	r3, [pc, #140]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004af0:	4821      	ldr	r0, [pc, #132]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004af2:	f002 fa85 	bl	8007000 <HAL_DMA_Init>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8004afc:	f7ff fd9c 	bl	8004638 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a1d      	ldr	r2, [pc, #116]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004b04:	675a      	str	r2, [r3, #116]	@ 0x74
 8004b06:	4a1c      	ldr	r2, [pc, #112]	@ (8004b78 <HAL_UART_MspInit+0x168>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b84 <HAL_UART_MspInit+0x174>)
 8004b10:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8004b12:	4b1b      	ldr	r3, [pc, #108]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b14:	2202      	movs	r2, #2
 8004b16:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b18:	4b19      	ldr	r3, [pc, #100]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b1e:	4b18      	ldr	r3, [pc, #96]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b24:	4b16      	ldr	r3, [pc, #88]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b26:	2280      	movs	r2, #128	@ 0x80
 8004b28:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b2a:	4b15      	ldr	r3, [pc, #84]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b30:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004b36:	4b12      	ldr	r3, [pc, #72]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b3c:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004b42:	480f      	ldr	r0, [pc, #60]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b44:	f002 fa5c 	bl	8007000 <HAL_DMA_Init>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8004b4e:	f7ff fd73 	bl	8004638 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a0a      	ldr	r2, [pc, #40]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b56:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b58:	4a09      	ldr	r2, [pc, #36]	@ (8004b80 <HAL_UART_MspInit+0x170>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2100      	movs	r1, #0
 8004b62:	2034      	movs	r0, #52	@ 0x34
 8004b64:	f002 fa07 	bl	8006f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b68:	2034      	movs	r0, #52	@ 0x34
 8004b6a:	f002 fa20 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8004b6e:	e0c9      	b.n	8004d04 <HAL_UART_MspInit+0x2f4>
 8004b70:	40004c00 	.word	0x40004c00
 8004b74:	40021000 	.word	0x40021000
 8004b78:	200008bc 	.word	0x200008bc
 8004b7c:	40020458 	.word	0x40020458
 8004b80:	20000904 	.word	0x20000904
 8004b84:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5f      	ldr	r2, [pc, #380]	@ (8004d0c <HAL_UART_MspInit+0x2fc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	f040 80b8 	bne.w	8004d04 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004b94:	2310      	movs	r3, #16
 8004b96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8004b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b9e:	f107 0320 	add.w	r3, r7, #32
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f006 fa00 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8004bae:	f7ff fd43 	bl	8004638 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004bb2:	4b57      	ldr	r3, [pc, #348]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb6:	4a56      	ldr	r2, [pc, #344]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004bb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bbe:	4b54      	ldr	r3, [pc, #336]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bca:	4b51      	ldr	r3, [pc, #324]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bce:	4a50      	ldr	r2, [pc, #320]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004bd0:	f043 0304 	orr.w	r3, r3, #4
 8004bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004be2:	4b4b      	ldr	r3, [pc, #300]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be6:	4a4a      	ldr	r2, [pc, #296]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004be8:	f043 0308 	orr.w	r3, r3, #8
 8004bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bee:	4b48      	ldr	r3, [pc, #288]	@ (8004d10 <HAL_UART_MspInit+0x300>)
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c02:	2302      	movs	r3, #2
 8004c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004c14:	2308      	movs	r3, #8
 8004c16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c1a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004c1e:	4619      	mov	r1, r3
 8004c20:	483c      	ldr	r0, [pc, #240]	@ (8004d14 <HAL_UART_MspInit+0x304>)
 8004c22:	f002 fd03 	bl	800762c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c26:	2304      	movs	r3, #4
 8004c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004c3e:	2308      	movs	r3, #8
 8004c40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4833      	ldr	r0, [pc, #204]	@ (8004d18 <HAL_UART_MspInit+0x308>)
 8004c4c:	f002 fcee 	bl	800762c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8004c50:	4b32      	ldr	r3, [pc, #200]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c52:	4a33      	ldr	r2, [pc, #204]	@ (8004d20 <HAL_UART_MspInit+0x310>)
 8004c54:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 8004c56:	4b31      	ldr	r3, [pc, #196]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c58:	2202      	movs	r2, #2
 8004c5a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c62:	4b2e      	ldr	r3, [pc, #184]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c68:	4b2c      	ldr	r3, [pc, #176]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c6a:	2280      	movs	r2, #128	@ 0x80
 8004c6c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c74:	4b29      	ldr	r3, [pc, #164]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004c7a:	4b28      	ldr	r3, [pc, #160]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c80:	4b26      	ldr	r3, [pc, #152]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004c86:	4825      	ldr	r0, [pc, #148]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c88:	f002 f9ba 	bl	8007000 <HAL_DMA_Init>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_UART_MspInit+0x286>
      Error_Handler();
 8004c92:	f7ff fcd1 	bl	8004638 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a20      	ldr	r2, [pc, #128]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c9a:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <HAL_UART_MspInit+0x30c>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 8004ca2:	4b20      	ldr	r3, [pc, #128]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004ca4:	4a20      	ldr	r2, [pc, #128]	@ (8004d28 <HAL_UART_MspInit+0x318>)
 8004ca6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004caa:	2202      	movs	r2, #2
 8004cac:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cae:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cba:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cbc:	2280      	movs	r2, #128	@ 0x80
 8004cbe:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cc0:	4b18      	ldr	r3, [pc, #96]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc6:	4b17      	ldr	r3, [pc, #92]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004ccc:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004cd8:	4812      	ldr	r0, [pc, #72]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cda:	f002 f991 	bl	8007000 <HAL_DMA_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8004ce4:	f7ff fca8 	bl	8004638 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a0e      	ldr	r2, [pc, #56]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cec:	671a      	str	r2, [r3, #112]	@ 0x70
 8004cee:	4a0d      	ldr	r2, [pc, #52]	@ (8004d24 <HAL_UART_MspInit+0x314>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	2035      	movs	r0, #53	@ 0x35
 8004cfa:	f002 f93c 	bl	8006f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004cfe:	2035      	movs	r0, #53	@ 0x35
 8004d00:	f002 f955 	bl	8006fae <HAL_NVIC_EnableIRQ>
}
 8004d04:	bf00      	nop
 8004d06:	37c0      	adds	r7, #192	@ 0xc0
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40005000 	.word	0x40005000
 8004d10:	40021000 	.word	0x40021000
 8004d14:	48000800 	.word	0x48000800
 8004d18:	48000c00 	.word	0x48000c00
 8004d1c:	2000094c 	.word	0x2000094c
 8004d20:	4002041c 	.word	0x4002041c
 8004d24:	20000994 	.word	0x20000994
 8004d28:	40020408 	.word	0x40020408

08004d2c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a20      	ldr	r2, [pc, #128]	@ (8004dbc <HAL_UART_MspDeInit+0x90>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d118      	bne.n	8004d70 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004d3e:	4b20      	ldr	r3, [pc, #128]	@ (8004dc0 <HAL_UART_MspDeInit+0x94>)
 8004d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d42:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc0 <HAL_UART_MspDeInit+0x94>)
 8004d44:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004d48:	6593      	str	r3, [r2, #88]	@ 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8004d4a:	2103      	movs	r1, #3
 8004d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d50:	f002 fdfe 	bl	8007950 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f002 fa09 	bl	8007170 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d62:	4618      	mov	r0, r3
 8004d64:	f002 fa04 	bl	8007170 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004d68:	2034      	movs	r0, #52	@ 0x34
 8004d6a:	f002 f92e 	bl	8006fca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }

}
 8004d6e:	e020      	b.n	8004db2 <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==UART5)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <HAL_UART_MspDeInit+0x98>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d11b      	bne.n	8004db2 <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_UART5_CLK_DISABLE();
 8004d7a:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <HAL_UART_MspDeInit+0x94>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7e:	4a10      	ldr	r2, [pc, #64]	@ (8004dc0 <HAL_UART_MspDeInit+0x94>)
 8004d80:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d84:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8004d86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d8a:	480f      	ldr	r0, [pc, #60]	@ (8004dc8 <HAL_UART_MspDeInit+0x9c>)
 8004d8c:	f002 fde0 	bl	8007950 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8004d90:	2104      	movs	r1, #4
 8004d92:	480e      	ldr	r0, [pc, #56]	@ (8004dcc <HAL_UART_MspDeInit+0xa0>)
 8004d94:	f002 fddc 	bl	8007950 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f002 f9e7 	bl	8007170 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	4618      	mov	r0, r3
 8004da8:	f002 f9e2 	bl	8007170 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8004dac:	2035      	movs	r0, #53	@ 0x35
 8004dae:	f002 f90c 	bl	8006fca <HAL_NVIC_DisableIRQ>
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40004c00 	.word	0x40004c00
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40005000 	.word	0x40005000
 8004dc8:	48000800 	.word	0x48000800
 8004dcc:	48000c00 	.word	0x48000c00

08004dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <NMI_Handler+0x4>

08004dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <HardFault_Handler+0x4>

08004de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <MemManage_Handler+0x4>

08004de8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <BusFault_Handler+0x4>

08004df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <UsageFault_Handler+0x4>

08004df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e26:	f000 fae7 	bl	80053f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e34:	4802      	ldr	r0, [pc, #8]	@ (8004e40 <DMA1_Channel1_IRQHandler+0x10>)
 8004e36:	f002 fb0c 	bl	8007452 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000680 	.word	0x20000680

08004e44 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004e48:	4802      	ldr	r0, [pc, #8]	@ (8004e54 <DMA1_Channel6_IRQHandler+0x10>)
 8004e4a:	f002 fb02 	bl	8007452 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000764 	.word	0x20000764

08004e58 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004e5c:	4802      	ldr	r0, [pc, #8]	@ (8004e68 <DMA1_Channel7_IRQHandler+0x10>)
 8004e5e:	f002 faf8 	bl	8007452 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000071c 	.word	0x2000071c

08004e6c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e70:	4802      	ldr	r0, [pc, #8]	@ (8004e7c <ADC1_2_IRQHandler+0x10>)
 8004e72:	f000 ff1b 	bl	8005cac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000618 	.word	0x20000618

08004e80 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e84:	4802      	ldr	r0, [pc, #8]	@ (8004e90 <I2C1_EV_IRQHandler+0x10>)
 8004e86:	f003 fa3f 	bl	8008308 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200006c8 	.word	0x200006c8

08004e94 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004e98:	4802      	ldr	r0, [pc, #8]	@ (8004ea4 <I2C1_ER_IRQHandler+0x10>)
 8004e9a:	f003 fa4f 	bl	800833c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200006c8 	.word	0x200006c8

08004ea8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004eac:	4802      	ldr	r0, [pc, #8]	@ (8004eb8 <UART4_IRQHandler+0x10>)
 8004eae:	f007 f9cb 	bl	800c248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200007ac 	.word	0x200007ac

08004ebc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004ec0:	4802      	ldr	r0, [pc, #8]	@ (8004ecc <UART5_IRQHandler+0x10>)
 8004ec2:	f007 f9c1 	bl	800c248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004ec6:	bf00      	nop
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000834 	.word	0x20000834

08004ed0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ed4:	4802      	ldr	r0, [pc, #8]	@ (8004ee0 <TIM6_DAC_IRQHandler+0x10>)
 8004ed6:	f006 fdf9 	bl	800bacc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200009dc 	.word	0x200009dc

08004ee4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004ee8:	4802      	ldr	r0, [pc, #8]	@ (8004ef4 <DMA2_Channel1_IRQHandler+0x10>)
 8004eea:	f002 fab2 	bl	8007452 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000994 	.word	0x20000994

08004ef8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004efc:	4802      	ldr	r0, [pc, #8]	@ (8004f08 <DMA2_Channel2_IRQHandler+0x10>)
 8004efe:	f002 faa8 	bl	8007452 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	2000094c 	.word	0x2000094c

08004f0c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004f10:	4802      	ldr	r0, [pc, #8]	@ (8004f1c <DMA2_Channel3_IRQHandler+0x10>)
 8004f12:	f002 fa9e 	bl	8007452 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000904 	.word	0x20000904

08004f20 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004f24:	4802      	ldr	r0, [pc, #8]	@ (8004f30 <DMA2_Channel5_IRQHandler+0x10>)
 8004f26:	f002 fa94 	bl	8007452 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	200008bc 	.word	0x200008bc

08004f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f38:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <SystemInit+0x20>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3e:	4a05      	ldr	r2, [pc, #20]	@ (8004f54 <SystemInit+0x20>)
 8004f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	e000ed00 	.word	0xe000ed00

08004f58 <_Z8tcpInputv>:
uint16_t limitTcpSys	= 120000/superloop;	// Limite para fijar datos system
bool flagSetSys;							// Indica que se debe enviar system

/*****	INPUT	*****/

void tcpInput(){
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
	tcpData();
 8004f5c:	f000 f840 	bl	8004fe0 <_Z7tcpDatav>
	tcpSystem();
 8004f60:	f000 f806 	bl	8004f70 <_Z9tcpSystemv>
	tcpGps();
 8004f64:	f000 f89a 	bl	800509c <_Z6tcpGpsv>
	tcpInLora();
 8004f68:	f000 f872 	bl	8005050 <_Z9tcpInLorav>
}
 8004f6c:	bf00      	nop
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_Z9tcpSystemv>:
 *
 *	OUTPUT	:	flagSetSys | Indica que se debe enviar un paquete con datos del sistema
 *
 */

void tcpSystem(){
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
	switch( stateTcpSys ){
 8004f74:	4b16      	ldr	r3, [pc, #88]	@ (8004fd0 <_Z9tcpSystemv+0x60>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <_Z9tcpSystemv+0x12>
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d014      	beq.n	8004faa <_Z9tcpSystemv+0x3a>
 8004f80:	e01d      	b.n	8004fbe <_Z9tcpSystemv+0x4e>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpSys++;						// Suma 1 al contador
 8004f82:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <_Z9tcpSystemv+0x64>)
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	3301      	adds	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	4b12      	ldr	r3, [pc, #72]	@ (8004fd4 <_Z9tcpSystemv+0x64>)
 8004f8c:	801a      	strh	r2, [r3, #0]

		if ( countTcpSys >= limitTcpSys ){	// Si pasa el limite
 8004f8e:	4b11      	ldr	r3, [pc, #68]	@ (8004fd4 <_Z9tcpSystemv+0x64>)
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	4b11      	ldr	r3, [pc, #68]	@ (8004fd8 <_Z9tcpSystemv+0x68>)
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d303      	bcc.n	8004fa2 <_Z9tcpSystemv+0x32>
			stateTcpSys	= 1;				// Pasa a S1
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <_Z9tcpSystemv+0x60>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateTcpSys	= 0;				// Espera en S0
		}
		break;
 8004fa0:	e011      	b.n	8004fc6 <_Z9tcpSystemv+0x56>
			stateTcpSys	= 0;				// Espera en S0
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <_Z9tcpSystemv+0x60>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
		break;
 8004fa8:	e00d      	b.n	8004fc6 <_Z9tcpSystemv+0x56>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetSys	= 1;	// Indica que se debe enviar datos
 8004faa:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <_Z9tcpSystemv+0x6c>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
		countTcpSys	= 0;	// Reinicia contador
 8004fb0:	4b08      	ldr	r3, [pc, #32]	@ (8004fd4 <_Z9tcpSystemv+0x64>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	801a      	strh	r2, [r3, #0]
		stateTcpSys	= 0;	// Vuelve a S0
 8004fb6:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <_Z9tcpSystemv+0x60>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
		break;
 8004fbc:	e003      	b.n	8004fc6 <_Z9tcpSystemv+0x56>

	default:
		stateTcpSys	= 0;
 8004fbe:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <_Z9tcpSystemv+0x60>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
		break;
 8004fc4:	bf00      	nop
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	2000114f 	.word	0x2000114f
 8004fd4:	20001150 	.word	0x20001150
 8004fd8:	20001152 	.word	0x20001152
 8004fdc:	20001154 	.word	0x20001154

08004fe0 <_Z7tcpDatav>:
 *
 *	OUTPUT	:	flagSetData | Indica que se debe enviar
 *
 */

void tcpData(){
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
	switch( stateTcpData ){
 8004fe4:	4b16      	ldr	r3, [pc, #88]	@ (8005040 <_Z7tcpDatav+0x60>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <_Z7tcpDatav+0x12>
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d014      	beq.n	800501a <_Z7tcpDatav+0x3a>
 8004ff0:	e01d      	b.n	800502e <_Z7tcpDatav+0x4e>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpData++;							// Suma 1 al contador
 8004ff2:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <_Z7tcpDatav+0x64>)
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	4b12      	ldr	r3, [pc, #72]	@ (8005044 <_Z7tcpDatav+0x64>)
 8004ffc:	801a      	strh	r2, [r3, #0]

		if ( countTcpData >= limitTcpData ){	// Si pasa el limite
 8004ffe:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <_Z7tcpDatav+0x64>)
 8005000:	881a      	ldrh	r2, [r3, #0]
 8005002:	4b11      	ldr	r3, [pc, #68]	@ (8005048 <_Z7tcpDatav+0x68>)
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d303      	bcc.n	8005012 <_Z7tcpDatav+0x32>
			stateTcpData	= 1;				// Pasa a S1
 800500a:	4b0d      	ldr	r3, [pc, #52]	@ (8005040 <_Z7tcpDatav+0x60>)
 800500c:	2201      	movs	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateTcpData	= 0;				// Espera en S0
		}
		break;
 8005010:	e011      	b.n	8005036 <_Z7tcpDatav+0x56>
			stateTcpData	= 0;				// Espera en S0
 8005012:	4b0b      	ldr	r3, [pc, #44]	@ (8005040 <_Z7tcpDatav+0x60>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
		break;
 8005018:	e00d      	b.n	8005036 <_Z7tcpDatav+0x56>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetData		= 1;	// Indica que se debe enviar datos
 800501a:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <_Z7tcpDatav+0x6c>)
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]
		countTcpData	= 0;	// Reinicia contador
 8005020:	4b08      	ldr	r3, [pc, #32]	@ (8005044 <_Z7tcpDatav+0x64>)
 8005022:	2200      	movs	r2, #0
 8005024:	801a      	strh	r2, [r3, #0]

		stateTcpData	= 0;	// Vuelve a S0
 8005026:	4b06      	ldr	r3, [pc, #24]	@ (8005040 <_Z7tcpDatav+0x60>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
		break;
 800502c:	e003      	b.n	8005036 <_Z7tcpDatav+0x56>

	default:
		stateTcpData	= 0;
 800502e:	4b04      	ldr	r3, [pc, #16]	@ (8005040 <_Z7tcpDatav+0x60>)
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
		break;
 8005034:	bf00      	nop
	}
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20001149 	.word	0x20001149
 8005044:	2000114a 	.word	0x2000114a
 8005048:	2000114c 	.word	0x2000114c
 800504c:	2000114e 	.word	0x2000114e

08005050 <_Z9tcpInLorav>:
 *
 *	OUTPUT	:	loraDecision.response()
 *				loraDecision.disable()
 */

void tcpInLora(){
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
	if ( loraCheck.check() ){					// Si hay respuesta nueva
 8005054:	480d      	ldr	r0, [pc, #52]	@ (800508c <_Z9tcpInLorav+0x3c>)
 8005056:	f7fe fc3a 	bl	80038ce <_ZN9loraCheck5checkEv>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <_Z9tcpInLorav+0x2a>
		busTcpLora	= loraCheck.response();		// Copia el codigo de respuesta
 8005060:	480a      	ldr	r0, [pc, #40]	@ (800508c <_Z9tcpInLorav+0x3c>)
 8005062:	f7fe fc45 	bl	80038f0 <_ZN9loraCheck8responseEv>
 8005066:	4603      	mov	r3, r0
 8005068:	461a      	mov	r2, r3
 800506a:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <_Z9tcpInLorav+0x40>)
 800506c:	701a      	strb	r2, [r3, #0]
		loraDecision.response( busTcpLora );	// Inserta en lora Decision
 800506e:	4b08      	ldr	r3, [pc, #32]	@ (8005090 <_Z9tcpInLorav+0x40>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	4619      	mov	r1, r3
 8005074:	4807      	ldr	r0, [pc, #28]	@ (8005094 <_Z9tcpInLorav+0x44>)
 8005076:	f7fe fd46 	bl	8003b06 <_ZN12loraDecision8responseEh>
			busTcpLora	= 6;
		}*/

	}

	if ( flagWdLora ){			// Si hay WD
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <_Z9tcpInLorav+0x48>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <_Z9tcpInLorav+0x38>
		loraDecision.disable();	// Deshabilita tcp y app
 8005082:	4804      	ldr	r0, [pc, #16]	@ (8005094 <_Z9tcpInLorav+0x44>)
 8005084:	f7fe fdcf 	bl	8003c26 <_ZN12loraDecision7disableEv>
	}
}
 8005088:	bf00      	nop
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000b68 	.word	0x20000b68
 8005090:	20001148 	.word	0x20001148
 8005094:	20000b7c 	.word	0x20000b7c
 8005098:	20000530 	.word	0x20000530

0800509c <_Z6tcpGpsv>:
 *
 *	OUTPUT	:	flagGpsSaved
 *				startGps
 */

void tcpGps(){
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
	switch ( stateGpsTcp ){
 80050a0:	4b22      	ldr	r3, [pc, #136]	@ (800512c <_Z6tcpGpsv+0x90>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d021      	beq.n	80050ec <_Z6tcpGpsv+0x50>
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	dc38      	bgt.n	800511e <_Z6tcpGpsv+0x82>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <_Z6tcpGpsv+0x1a>
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d014      	beq.n	80050de <_Z6tcpGpsv+0x42>
			stateGpsTcp	= 2;				// Se queda en S2
		}
		break;

	default:
		break;
 80050b4:	e033      	b.n	800511e <_Z6tcpGpsv+0x82>
		if ( savedGps ){		// Si se guardó un valor de GPS
 80050b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005130 <_Z6tcpGpsv+0x94>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <_Z6tcpGpsv+0x2a>
			stateGpsTcp	= 1;	// Pasa a S1
 80050be:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <_Z6tcpGpsv+0x90>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
		break;
 80050c4:	e02c      	b.n	8005120 <_Z6tcpGpsv+0x84>
		else if( stopGps ){		// Si se paró la recepcion de datos
 80050c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005134 <_Z6tcpGpsv+0x98>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <_Z6tcpGpsv+0x3a>
			stateGpsTcp	= 2;	// Pasa a S2
 80050ce:	4b17      	ldr	r3, [pc, #92]	@ (800512c <_Z6tcpGpsv+0x90>)
 80050d0:	2202      	movs	r2, #2
 80050d2:	701a      	strb	r2, [r3, #0]
		break;
 80050d4:	e024      	b.n	8005120 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 0;	// Espera en S0
 80050d6:	4b15      	ldr	r3, [pc, #84]	@ (800512c <_Z6tcpGpsv+0x90>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
		break;
 80050dc:	e020      	b.n	8005120 <_Z6tcpGpsv+0x84>
		flagGpsSaved	= 1;	// Indica que se guardó un mensaje
 80050de:	4b16      	ldr	r3, [pc, #88]	@ (8005138 <_Z6tcpGpsv+0x9c>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
		stateGpsTcp		= 2;	// Pasa a S3
 80050e4:	4b11      	ldr	r3, [pc, #68]	@ (800512c <_Z6tcpGpsv+0x90>)
 80050e6:	2202      	movs	r2, #2
 80050e8:	701a      	strb	r2, [r3, #0]
		break;
 80050ea:	e019      	b.n	8005120 <_Z6tcpGpsv+0x84>
		countGpsTcp++;						// Suma 1 al contador
 80050ec:	4b13      	ldr	r3, [pc, #76]	@ (800513c <_Z6tcpGpsv+0xa0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	4a12      	ldr	r2, [pc, #72]	@ (800513c <_Z6tcpGpsv+0xa0>)
 80050f4:	6013      	str	r3, [r2, #0]
		if ( countGpsTcp >= limitGpsTcp ){	// Si pasa el limite
 80050f6:	4b11      	ldr	r3, [pc, #68]	@ (800513c <_Z6tcpGpsv+0xa0>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b11      	ldr	r3, [pc, #68]	@ (8005140 <_Z6tcpGpsv+0xa4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	db09      	blt.n	8005116 <_Z6tcpGpsv+0x7a>
			startGps	= 1;				// Indica inicio de medicion gps
 8005102:	4b10      	ldr	r3, [pc, #64]	@ (8005144 <_Z6tcpGpsv+0xa8>)
 8005104:	2201      	movs	r2, #1
 8005106:	701a      	strb	r2, [r3, #0]
			countGpsTcp	= 0;				// Reinicia contador
 8005108:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <_Z6tcpGpsv+0xa0>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
			stateGpsTcp	= 0;				// Vuelve a S0
 800510e:	4b07      	ldr	r3, [pc, #28]	@ (800512c <_Z6tcpGpsv+0x90>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
		break;
 8005114:	e004      	b.n	8005120 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 2;				// Se queda en S2
 8005116:	4b05      	ldr	r3, [pc, #20]	@ (800512c <_Z6tcpGpsv+0x90>)
 8005118:	2202      	movs	r2, #2
 800511a:	701a      	strb	r2, [r3, #0]
		break;
 800511c:	e000      	b.n	8005120 <_Z6tcpGpsv+0x84>
		break;
 800511e:	bf00      	nop
	}
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	2000113d 	.word	0x2000113d
 8005130:	20000ae2 	.word	0x20000ae2
 8005134:	20000ae1 	.word	0x20000ae1
 8005138:	2000113e 	.word	0x2000113e
 800513c:	20001140 	.word	0x20001140
 8005140:	20001144 	.word	0x20001144
 8005144:	20000397 	.word	0x20000397

08005148 <_Z41__static_initialization_and_destruction_0ii>:
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d11e      	bne.n	8005196 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800515e:	4293      	cmp	r3, r2
 8005160:	d119      	bne.n	8005196 <_Z41__static_initialization_and_destruction_0ii+0x4e>
long int limitGpsTcp = 120000/superloop;// Tiempo que esta apagado GPS
 8005162:	4b10      	ldr	r3, [pc, #64]	@ (80051a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800516a:	fb93 f3f2 	sdiv	r3, r3, r2
 800516e:	4a0f      	ldr	r2, [pc, #60]	@ (80051ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005170:	6013      	str	r3, [r2, #0]
uint16_t limitTcpData	= 120000/superloop;	// Limite para fijar datos
 8005172:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800517a:	fb93 f3f2 	sdiv	r3, r3, r2
 800517e:	b29a      	uxth	r2, r3
 8005180:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005182:	801a      	strh	r2, [r3, #0]
uint16_t limitTcpSys	= 120000/superloop;	// Limite para fijar datos system
 8005184:	4b07      	ldr	r3, [pc, #28]	@ (80051a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	461a      	mov	r2, r3
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800518c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005190:	b29a      	uxth	r2, r3
 8005192:	4b08      	ldr	r3, [pc, #32]	@ (80051b4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005194:	801a      	strh	r2, [r3, #0]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000399 	.word	0x20000399
 80051a8:	0001d4c0 	.word	0x0001d4c0
 80051ac:	20001144 	.word	0x20001144
 80051b0:	2000114c 	.word	0x2000114c
 80051b4:	20001152 	.word	0x20001152

080051b8 <_GLOBAL__sub_I_stateGpsTcp>:
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80051c0:	2001      	movs	r0, #1
 80051c2:	f7ff ffc1 	bl	8005148 <_Z41__static_initialization_and_destruction_0ii>
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <_Z9tcpOutputv>:
uint16_t countTcpLoraOut;							// Contador para esperar
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando

/*****	OUTPUT	*****/

void tcpOutput(){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
	tcpOutLora();
 80051cc:	f000 f802 	bl	80051d4 <_Z10tcpOutLorav>
}
 80051d0:	bf00      	nop
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <_Z10tcpOutLorav>:

void tcpOutLora(){
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
	switch( stateTpcLoraOut ){
 80051d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005284 <_Z10tcpOutLorav+0xb0>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d028      	beq.n	8005232 <_Z10tcpOutLorav+0x5e>
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	dc48      	bgt.n	8005276 <_Z10tcpOutLorav+0xa2>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <_Z10tcpOutLorav+0x1a>
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d00e      	beq.n	800520a <_Z10tcpOutLorav+0x36>
 80051ec:	e043      	b.n	8005276 <_Z10tcpOutLorav+0xa2>
	///////////////////////
	// S0 - WAIT COMMAND //
	///////////////////////

	case 0:
		if ( loraSelect.newCommand() ){	// Si hay nuevo comando
 80051ee:	4826      	ldr	r0, [pc, #152]	@ (8005288 <_Z10tcpOutLorav+0xb4>)
 80051f0:	f7fe fc45 	bl	8003a7e <_ZN10loraSelect10newCommandEv>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <_Z10tcpOutLorav+0x2e>
 			stateTpcLoraOut	= 1;		// Pasa a S1
 80051fa:	4b22      	ldr	r3, [pc, #136]	@ (8005284 <_Z10tcpOutLorav+0xb0>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateTpcLoraOut	= 0;		// Queda en S0
		}
		break;
 8005200:	e03d      	b.n	800527e <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 0;		// Queda en S0
 8005202:	4b20      	ldr	r3, [pc, #128]	@ (8005284 <_Z10tcpOutLorav+0xb0>)
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
		break;
 8005208:	e039      	b.n	800527e <_Z10tcpOutLorav+0xaa>
	////////////////////////
	// S1 - WAIT FOR SEND //
	////////////////////////

	case 1:
		countTcpLoraOut++;							// Suma 1 al contador
 800520a:	4b20      	ldr	r3, [pc, #128]	@ (800528c <_Z10tcpOutLorav+0xb8>)
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	3301      	adds	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <_Z10tcpOutLorav+0xb8>)
 8005214:	801a      	strh	r2, [r3, #0]

		if ( countTcpLoraOut >= limitTcpLoraOut ){	// Si llega al limite
 8005216:	4b1d      	ldr	r3, [pc, #116]	@ (800528c <_Z10tcpOutLorav+0xb8>)
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	4b1d      	ldr	r3, [pc, #116]	@ (8005290 <_Z10tcpOutLorav+0xbc>)
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d303      	bcc.n	800522a <_Z10tcpOutLorav+0x56>
			stateTpcLoraOut	= 2;					// Pasa a S2
 8005222:	4b18      	ldr	r3, [pc, #96]	@ (8005284 <_Z10tcpOutLorav+0xb0>)
 8005224:	2202      	movs	r2, #2
 8005226:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateTpcLoraOut	= 1;					// Queda en S1
		}
		break;
 8005228:	e029      	b.n	800527e <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 1;					// Queda en S1
 800522a:	4b16      	ldr	r3, [pc, #88]	@ (8005284 <_Z10tcpOutLorav+0xb0>)
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
		break;
 8005230:	e025      	b.n	800527e <_Z10tcpOutLorav+0xaa>
	/////////////////////////////
	// S2 - CONFIG BY TRANSMIT //
	/////////////////////////////

	case 2:
		countTcpLoraOut	= 0;										// Reinicia contador
 8005232:	4b16      	ldr	r3, [pc, #88]	@ (800528c <_Z10tcpOutLorav+0xb8>)
 8005234:	2200      	movs	r2, #0
 8005236:	801a      	strh	r2, [r3, #0]

		loraTxCommand0 	= loraSelect.getCommand();					// Guarda comando
 8005238:	4813      	ldr	r0, [pc, #76]	@ (8005288 <_Z10tcpOutLorav+0xb4>)
 800523a:	f7fe fc31 	bl	8003aa0 <_ZN10loraSelect10getCommandEv>
 800523e:	4603      	mov	r3, r0
 8005240:	4a14      	ldr	r2, [pc, #80]	@ (8005294 <_Z10tcpOutLorav+0xc0>)
 8005242:	6013      	str	r3, [r2, #0]
		sizeTxCommand0	= loraSelect.getCommandSize();				// Guarda tamaño de comando
 8005244:	4810      	ldr	r0, [pc, #64]	@ (8005288 <_Z10tcpOutLorav+0xb4>)
 8005246:	f7fe fc37 	bl	8003ab8 <_ZN10loraSelect14getCommandSizeEv>
 800524a:	4603      	mov	r3, r0
 800524c:	461a      	mov	r2, r3
 800524e:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <_Z10tcpOutLorav+0xc4>)
 8005250:	701a      	strb	r2, [r3, #0]

		loraCheck.setIdealResponses( loraSelect.qttyResponses() );	// Guarda largo de lista de respuestas
 8005252:	480d      	ldr	r0, [pc, #52]	@ (8005288 <_Z10tcpOutLorav+0xb4>)
 8005254:	f7fe fc3c 	bl	8003ad0 <_ZN10loraSelect13qttyResponsesEv>
 8005258:	4603      	mov	r3, r0
 800525a:	4619      	mov	r1, r3
 800525c:	480f      	ldr	r0, [pc, #60]	@ (800529c <_Z10tcpOutLorav+0xc8>)
 800525e:	f7fe fada 	bl	8003816 <_ZN9loraCheck17setIdealResponsesEh>
		loraDecision.reset();										// Reinicia TCP
 8005262:	480f      	ldr	r0, [pc, #60]	@ (80052a0 <_Z10tcpOutLorav+0xcc>)
 8005264:	f7fe fcc9 	bl	8003bfa <_ZN12loraDecision5resetEv>
		flagTxLora	= 1;											// Transmite
 8005268:	4b0e      	ldr	r3, [pc, #56]	@ (80052a4 <_Z10tcpOutLorav+0xd0>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
		stateTpcLoraOut	= 0;										// Vuelve a S0
 800526e:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <_Z10tcpOutLorav+0xb0>)
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
		break;
 8005274:	e003      	b.n	800527e <_Z10tcpOutLorav+0xaa>

	default:
		stateTpcLoraOut	= 0;
 8005276:	4b03      	ldr	r3, [pc, #12]	@ (8005284 <_Z10tcpOutLorav+0xb0>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
		break;
 800527c:	bf00      	nop
	}

}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	2000115d 	.word	0x2000115d
 8005288:	20000b84 	.word	0x20000b84
 800528c:	2000115e 	.word	0x2000115e
 8005290:	20001160 	.word	0x20001160
 8005294:	20001158 	.word	0x20001158
 8005298:	2000115c 	.word	0x2000115c
 800529c:	20000b68 	.word	0x20000b68
 80052a0:	20000b7c 	.word	0x20000b7c
 80052a4:	200004e9 	.word	0x200004e9

080052a8 <_Z41__static_initialization_and_destruction_0ii>:
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10e      	bne.n	80052d6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052be:	4293      	cmp	r3, r2
 80052c0:	d109      	bne.n	80052d6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando
 80052c2:	4b08      	ldr	r3, [pc, #32]	@ (80052e4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	4b05      	ldr	r3, [pc, #20]	@ (80052e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80052d4:	801a      	strh	r2, [r3, #0]
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000399 	.word	0x20000399
 80052e8:	20001160 	.word	0x20001160

080052ec <_GLOBAL__sub_I_loraTxCommand0>:
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80052f4:	2001      	movs	r0, #1
 80052f6:	f7ff ffd7 	bl	80052a8 <_Z41__static_initialization_and_destruction_0ii>
 80052fa:	bd80      	pop	{r7, pc}

080052fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80052fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005334 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005300:	f7ff fe18 	bl	8004f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005304:	480c      	ldr	r0, [pc, #48]	@ (8005338 <LoopForever+0x6>)
  ldr r1, =_edata
 8005306:	490d      	ldr	r1, [pc, #52]	@ (800533c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005308:	4a0d      	ldr	r2, [pc, #52]	@ (8005340 <LoopForever+0xe>)
  movs r3, #0
 800530a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800530c:	e002      	b.n	8005314 <LoopCopyDataInit>

0800530e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800530e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005312:	3304      	adds	r3, #4

08005314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005318:	d3f9      	bcc.n	800530e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531a:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800531c:	4c0a      	ldr	r4, [pc, #40]	@ (8005348 <LoopForever+0x16>)
  movs r3, #0
 800531e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005320:	e001      	b.n	8005326 <LoopFillZerobss>

08005322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005324:	3204      	adds	r2, #4

08005326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005328:	d3fb      	bcc.n	8005322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800532a:	f008 f9e1 	bl	800d6f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800532e:	f7fe fce9 	bl	8003d04 <main>

08005332 <LoopForever>:

LoopForever:
    b LoopForever
 8005332:	e7fe      	b.n	8005332 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005334:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800533c:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8005340:	0800d7cc 	.word	0x0800d7cc
  ldr r2, =_sbss
 8005344:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8005348:	20001168 	.word	0x20001168

0800534c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800534c:	e7fe      	b.n	800534c <ADC3_IRQHandler>

0800534e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005358:	2003      	movs	r0, #3
 800535a:	f001 fe01 	bl	8006f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800535e:	200f      	movs	r0, #15
 8005360:	f000 f80e 	bl	8005380 <HAL_InitTick>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	71fb      	strb	r3, [r7, #7]
 800536e:	e001      	b.n	8005374 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005370:	f7ff f99c 	bl	80046ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005374:	79fb      	ldrb	r3, [r7, #7]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800538c:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <HAL_InitTick+0x6c>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d023      	beq.n	80053dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005394:	4b16      	ldr	r3, [pc, #88]	@ (80053f0 <HAL_InitTick+0x70>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b14      	ldr	r3, [pc, #80]	@ (80053ec <HAL_InitTick+0x6c>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 fe1b 	bl	8006fe6 <HAL_SYSTICK_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b0f      	cmp	r3, #15
 80053ba:	d809      	bhi.n	80053d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053bc:	2200      	movs	r2, #0
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	f001 fdd7 	bl	8006f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053c8:	4a0a      	ldr	r2, [pc, #40]	@ (80053f4 <HAL_InitTick+0x74>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e007      	b.n	80053e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e004      	b.n	80053e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	e001      	b.n	80053e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200003a4 	.word	0x200003a4
 80053f0:	2000039c 	.word	0x2000039c
 80053f4:	200003a0 	.word	0x200003a0

080053f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <HAL_IncTick+0x20>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_IncTick+0x24>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4413      	add	r3, r2
 8005408:	4a04      	ldr	r2, [pc, #16]	@ (800541c <HAL_IncTick+0x24>)
 800540a:	6013      	str	r3, [r2, #0]
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	200003a4 	.word	0x200003a4
 800541c:	20001164 	.word	0x20001164

08005420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return uwTick;
 8005424:	4b03      	ldr	r3, [pc, #12]	@ (8005434 <HAL_GetTick+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20001164 	.word	0x20001164

08005438 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800543c:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <HAL_SuspendTick+0x1c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a04      	ldr	r2, [pc, #16]	@ (8005454 <HAL_SuspendTick+0x1c>)
 8005442:	f023 0302 	bic.w	r3, r3, #2
 8005446:	6013      	str	r3, [r2, #0]
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	e000e010 	.word	0xe000e010

08005458 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800545c:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <HAL_ResumeTick+0x1c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a04      	ldr	r2, [pc, #16]	@ (8005474 <HAL_ResumeTick+0x1c>)
 8005462:	f043 0302 	orr.w	r3, r3, #2
 8005466:	6013      	str	r3, [r2, #0]
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	e000e010 	.word	0xe000e010

08005478 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	609a      	str	r2, [r3, #8]
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3360      	adds	r3, #96	@ 0x60
 80054f2:	461a      	mov	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b08      	ldr	r3, [pc, #32]	@ (8005524 <LL_ADC_SetOffset+0x44>)
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	03fff000 	.word	0x03fff000

08005528 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3360      	adds	r3, #96	@ 0x60
 8005536:	461a      	mov	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3360      	adds	r3, #96	@ 0x60
 8005564:	461a      	mov	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	431a      	orrs	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	615a      	str	r2, [r3, #20]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3330      	adds	r3, #48	@ 0x30
 80055e6:	461a      	mov	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	4413      	add	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	211f      	movs	r1, #31
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	401a      	ands	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	0e9b      	lsrs	r3, r3, #26
 800560e:	f003 011f 	and.w	r1, r3, #31
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	fa01 f303 	lsl.w	r3, r1, r3
 800561c:	431a      	orrs	r2, r3
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3314      	adds	r3, #20
 8005664:	461a      	mov	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	0e5b      	lsrs	r3, r3, #25
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	4413      	add	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	0d1b      	lsrs	r3, r3, #20
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2107      	movs	r1, #7
 8005682:	fa01 f303 	lsl.w	r3, r1, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	401a      	ands	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	0d1b      	lsrs	r3, r3, #20
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	fa01 f303 	lsl.w	r3, r1, r3
 8005698:	431a      	orrs	r2, r3
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c4:	43db      	mvns	r3, r3
 80056c6:	401a      	ands	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f003 0318 	and.w	r3, r3, #24
 80056ce:	4908      	ldr	r1, [pc, #32]	@ (80056f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80056d0:	40d9      	lsrs	r1, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	400b      	ands	r3, r1
 80056d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056da:	431a      	orrs	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	0007ffff 	.word	0x0007ffff

080056f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 031f 	and.w	r3, r3, #31
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800573c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6093      	str	r3, [r2, #8]
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005764:	d101      	bne.n	800576a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005788:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800578c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b4:	d101      	bne.n	80057ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057dc:	f043 0201 	orr.w	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <LL_ADC_IsEnabled+0x18>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <LL_ADC_IsEnabled+0x1a>
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005826:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800582a:	f043 0204 	orr.w	r2, r3, #4
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d101      	bne.n	8005856 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d101      	bne.n	800587c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b089      	sub	sp, #36	@ 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e133      	b.n	8005b0e <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fe ff1d 	bl	80046f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ff3f 	bl	8005750 <LL_ADC_IsDeepPowerDownEnabled>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff ff25 	bl	800572c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff ff5a 	bl	80057a0 <LL_ADC_IsInternalRegulatorEnabled>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d115      	bne.n	800591e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff ff3e 	bl	8005778 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058fc:	4b86      	ldr	r3, [pc, #536]	@ (8005b18 <HAL_ADC_Init+0x28c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	099b      	lsrs	r3, r3, #6
 8005902:	4a86      	ldr	r2, [pc, #536]	@ (8005b1c <HAL_ADC_Init+0x290>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	099b      	lsrs	r3, r3, #6
 800590a:	3301      	adds	r3, #1
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005910:	e002      	b.n	8005918 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3b01      	subs	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f9      	bne.n	8005912 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff ff3c 	bl	80057a0 <LL_ADC_IsInternalRegulatorEnabled>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10d      	bne.n	800594a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005932:	f043 0210 	orr.w	r2, r3, #16
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff ff75 	bl	800583e <LL_ADC_REG_IsConversionOngoing>
 8005954:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 80cc 	bne.w	8005afc <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 80c8 	bne.w	8005afc <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005970:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005974:	f043 0202 	orr.w	r2, r3, #2
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ff35 	bl	80057f0 <LL_ADC_IsEnabled>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d115      	bne.n	80059b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800598c:	4864      	ldr	r0, [pc, #400]	@ (8005b20 <HAL_ADC_Init+0x294>)
 800598e:	f7ff ff2f 	bl	80057f0 <LL_ADC_IsEnabled>
 8005992:	4604      	mov	r4, r0
 8005994:	4863      	ldr	r0, [pc, #396]	@ (8005b24 <HAL_ADC_Init+0x298>)
 8005996:	f7ff ff2b 	bl	80057f0 <LL_ADC_IsEnabled>
 800599a:	4603      	mov	r3, r0
 800599c:	431c      	orrs	r4, r3
 800599e:	4862      	ldr	r0, [pc, #392]	@ (8005b28 <HAL_ADC_Init+0x29c>)
 80059a0:	f7ff ff26 	bl	80057f0 <LL_ADC_IsEnabled>
 80059a4:	4603      	mov	r3, r0
 80059a6:	4323      	orrs	r3, r4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	4619      	mov	r1, r3
 80059b2:	485e      	ldr	r0, [pc, #376]	@ (8005b2c <HAL_ADC_Init+0x2a0>)
 80059b4:	f7ff fd60 	bl	8005478 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	7e5b      	ldrb	r3, [r3, #25]
 80059bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80059c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80059ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059d8:	4313      	orrs	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d106      	bne.n	80059f4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ea:	3b01      	subs	r3, #1
 80059ec:	045b      	lsls	r3, r3, #17
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d009      	beq.n	8005a10 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	4b46      	ldr	r3, [pc, #280]	@ (8005b30 <HAL_ADC_Init+0x2a4>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	69b9      	ldr	r1, [r7, #24]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff1b 	bl	8005864 <LL_ADC_INJ_IsConversionOngoing>
 8005a2e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d140      	bne.n	8005ab8 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d13d      	bne.n	8005ab8 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	7e1b      	ldrb	r3, [r3, #24]
 8005a44:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a46:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a5e:	f023 0306 	bic.w	r3, r3, #6
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	69b9      	ldr	r1, [r7, #24]
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d118      	bne.n	8005aa8 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a8c:	4311      	orrs	r1, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a92:	4311      	orrs	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	611a      	str	r2, [r3, #16]
 8005aa6:	e007      	b.n	8005ab8 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d10c      	bne.n	8005ada <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac6:	f023 010f 	bic.w	r1, r3, #15
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	1e5a      	subs	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ad8:	e007      	b.n	8005aea <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 020f 	bic.w	r2, r2, #15
 8005ae8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	f043 0201 	orr.w	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005afa:	e007      	b.n	8005b0c <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b00:	f043 0210 	orr.w	r2, r3, #16
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3724      	adds	r7, #36	@ 0x24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd90      	pop	{r4, r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2000039c 	.word	0x2000039c
 8005b1c:	053e2d63 	.word	0x053e2d63
 8005b20:	50040000 	.word	0x50040000
 8005b24:	50040100 	.word	0x50040100
 8005b28:	50040200 	.word	0x50040200
 8005b2c:	50040300 	.word	0x50040300
 8005b30:	fff0c007 	.word	0xfff0c007

08005b34 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b40:	4853      	ldr	r0, [pc, #332]	@ (8005c90 <HAL_ADC_Start_DMA+0x15c>)
 8005b42:	f7ff fdd7 	bl	80056f4 <LL_ADC_GetMultimode>
 8005b46:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fe76 	bl	800583e <LL_ADC_REG_IsConversionOngoing>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 8093 	bne.w	8005c80 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_ADC_Start_DMA+0x34>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e08e      	b.n	8005c86 <HAL_ADC_Start_DMA+0x152>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a47      	ldr	r2, [pc, #284]	@ (8005c94 <HAL_ADC_Start_DMA+0x160>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d008      	beq.n	8005b8c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	d002      	beq.n	8005b8c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b09      	cmp	r3, #9
 8005b8a:	d172      	bne.n	8005c72 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fed1 	bl	8006934 <ADC_Enable>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d165      	bne.n	8005c68 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ba4:	f023 0301 	bic.w	r3, r3, #1
 8005ba8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a38      	ldr	r2, [pc, #224]	@ (8005c98 <HAL_ADC_Start_DMA+0x164>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d002      	beq.n	8005bc0 <HAL_ADC_Start_DMA+0x8c>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	e000      	b.n	8005bc2 <HAL_ADC_Start_DMA+0x8e>
 8005bc0:	4b36      	ldr	r3, [pc, #216]	@ (8005c9c <HAL_ADC_Start_DMA+0x168>)
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d002      	beq.n	8005bd0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d006      	beq.n	8005bf6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bec:	f023 0206 	bic.w	r2, r3, #6
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bf4:	e002      	b.n	8005bfc <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c00:	4a27      	ldr	r2, [pc, #156]	@ (8005ca0 <HAL_ADC_Start_DMA+0x16c>)
 8005c02:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c08:	4a26      	ldr	r2, [pc, #152]	@ (8005ca4 <HAL_ADC_Start_DMA+0x170>)
 8005c0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c10:	4a25      	ldr	r2, [pc, #148]	@ (8005ca8 <HAL_ADC_Start_DMA+0x174>)
 8005c12:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	221c      	movs	r2, #28
 8005c1a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0210 	orr.w	r2, r2, #16
 8005c32:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3340      	adds	r3, #64	@ 0x40
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f001 fb1e 	bl	8007294 <HAL_DMA_Start_IT>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff fdd8 	bl	8005816 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c66:	e00d      	b.n	8005c84 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8005c70:	e008      	b.n	8005c84 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8005c7e:	e001      	b.n	8005c84 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
 8005c82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	50040300 	.word	0x50040300
 8005c94:	50040200 	.word	0x50040200
 8005c98:	50040100 	.word	0x50040100
 8005c9c:	50040000 	.word	0x50040000
 8005ca0:	08006a41 	.word	0x08006a41
 8005ca4:	08006b19 	.word	0x08006b19
 8005ca8:	08006b35 	.word	0x08006b35

08005cac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08a      	sub	sp, #40	@ 0x28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cc8:	4882      	ldr	r0, [pc, #520]	@ (8005ed4 <HAL_ADC_IRQHandler+0x228>)
 8005cca:	f7ff fd13 	bl	80056f4 <LL_ADC_GetMultimode>
 8005cce:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d017      	beq.n	8005d0a <HAL_ADC_IRQHandler+0x5e>
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d012      	beq.n	8005d0a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d105      	bne.n	8005cfc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 ff81 	bl	8006c04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2202      	movs	r2, #2
 8005d08:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <HAL_ADC_IRQHandler+0x72>
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8083 	beq.w	8005e30 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d07d      	beq.n	8005e30 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d105      	bne.n	8005d4c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fc2d 	bl	80055b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d062      	beq.n	8005e22 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5d      	ldr	r2, [pc, #372]	@ (8005ed8 <HAL_ADC_IRQHandler+0x22c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d002      	beq.n	8005d6c <HAL_ADC_IRQHandler+0xc0>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	e000      	b.n	8005d6e <HAL_ADC_IRQHandler+0xc2>
 8005d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8005edc <HAL_ADC_IRQHandler+0x230>)
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d008      	beq.n	8005d88 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b05      	cmp	r3, #5
 8005d80:	d002      	beq.n	8005d88 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d104      	bne.n	8005d92 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	623b      	str	r3, [r7, #32]
 8005d90:	e00c      	b.n	8005dac <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a50      	ldr	r2, [pc, #320]	@ (8005ed8 <HAL_ADC_IRQHandler+0x22c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d002      	beq.n	8005da2 <HAL_ADC_IRQHandler+0xf6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	e000      	b.n	8005da4 <HAL_ADC_IRQHandler+0xf8>
 8005da2:	4b4e      	ldr	r3, [pc, #312]	@ (8005edc <HAL_ADC_IRQHandler+0x230>)
 8005da4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d135      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d12e      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fd38 	bl	800583e <LL_ADC_REG_IsConversionOngoing>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11a      	bne.n	8005e0a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 020c 	bic.w	r2, r2, #12
 8005de2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d112      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e00:	f043 0201 	orr.w	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e08:	e00b      	b.n	8005e22 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0e:	f043 0210 	orr.w	r2, r3, #16
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1a:	f043 0201 	orr.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fe fb80 	bl	8004528 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	220c      	movs	r2, #12
 8005e2e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <HAL_ADC_IRQHandler+0x198>
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10b      	bne.n	8005e5c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 809f 	beq.w	8005f8e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 8099 	beq.w	8005f8e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff fbd8 	bl	800562e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005e7e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fb93 	bl	80055b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e8a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a11      	ldr	r2, [pc, #68]	@ (8005ed8 <HAL_ADC_IRQHandler+0x22c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d002      	beq.n	8005e9c <HAL_ADC_IRQHandler+0x1f0>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	e000      	b.n	8005e9e <HAL_ADC_IRQHandler+0x1f2>
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <HAL_ADC_IRQHandler+0x230>)
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d008      	beq.n	8005eb8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b06      	cmp	r3, #6
 8005eb0:	d002      	beq.n	8005eb8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b07      	cmp	r3, #7
 8005eb6:	d104      	bne.n	8005ec2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	e013      	b.n	8005eea <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <HAL_ADC_IRQHandler+0x22c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d009      	beq.n	8005ee0 <HAL_ADC_IRQHandler+0x234>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	e007      	b.n	8005ee2 <HAL_ADC_IRQHandler+0x236>
 8005ed2:	bf00      	nop
 8005ed4:	50040300 	.word	0x50040300
 8005ed8:	50040100 	.word	0x50040100
 8005edc:	50040000 	.word	0x50040000
 8005ee0:	4b7d      	ldr	r3, [pc, #500]	@ (80060d8 <HAL_ADC_IRQHandler+0x42c>)
 8005ee2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d047      	beq.n	8005f80 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <HAL_ADC_IRQHandler+0x25e>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d03f      	beq.n	8005f80 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d13a      	bne.n	8005f80 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	d133      	bne.n	8005f80 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12e      	bne.n	8005f80 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fc9c 	bl	8005864 <LL_ADC_INJ_IsConversionOngoing>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d11a      	bne.n	8005f68 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d112      	bne.n	8005f80 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5e:	f043 0201 	orr.w	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f66:	e00b      	b.n	8005f80 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6c:	f043 0210 	orr.w	r2, r3, #16
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f78:	f043 0201 	orr.w	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fe17 	bl	8006bb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2260      	movs	r2, #96	@ 0x60
 8005f8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d011      	beq.n	8005fbc <HAL_ADC_IRQHandler+0x310>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00c      	beq.n	8005fbc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8a0 	bl	80060f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2280      	movs	r2, #128	@ 0x80
 8005fba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d012      	beq.n	8005fec <HAL_ADC_IRQHandler+0x340>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00d      	beq.n	8005fec <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fdfd 	bl	8006bdc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d012      	beq.n	800601c <HAL_ADC_IRQHandler+0x370>
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00d      	beq.n	800601c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006004:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fdef 	bl	8006bf0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800601a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0310 	and.w	r3, r3, #16
 8006022:	2b00      	cmp	r3, #0
 8006024:	d036      	beq.n	8006094 <HAL_ADC_IRQHandler+0x3e8>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b00      	cmp	r3, #0
 800602e:	d031      	beq.n	8006094 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8006038:	2301      	movs	r3, #1
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
 800603c:	e014      	b.n	8006068 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006044:	4825      	ldr	r0, [pc, #148]	@ (80060dc <HAL_ADC_IRQHandler+0x430>)
 8006046:	f7ff fb63 	bl	8005710 <LL_ADC_GetMultiDMATransfer>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8006050:	2301      	movs	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
 8006054:	e008      	b.n	8006068 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8006064:	2301      	movs	r3, #1
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	2b01      	cmp	r3, #1
 800606c:	d10e      	bne.n	800608c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006072:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800607e:	f043 0202 	orr.w	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f83e 	bl	8006108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2210      	movs	r2, #16
 8006092:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800609a:	2b00      	cmp	r3, #0
 800609c:	d018      	beq.n	80060d0 <HAL_ADC_IRQHandler+0x424>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d013      	beq.n	80060d0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ac:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b8:	f043 0208 	orr.w	r2, r3, #8
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060c8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fd7c 	bl	8006bc8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80060d0:	bf00      	nop
 80060d2:	3728      	adds	r7, #40	@ 0x28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	50040000 	.word	0x50040000
 80060dc:	50040300 	.word	0x50040300

080060e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b0b6      	sub	sp, #216	@ 0xd8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800612c:	2300      	movs	r3, #0
 800612e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_ADC_ConfigChannel+0x22>
 800613a:	2302      	movs	r3, #2
 800613c:	e3e3      	b.n	8006906 <HAL_ADC_ConfigChannel+0x7ea>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fb77 	bl	800583e <LL_ADC_REG_IsConversionOngoing>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	f040 83c4 	bne.w	80068e0 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b05      	cmp	r3, #5
 8006166:	d824      	bhi.n	80061b2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	3b02      	subs	r3, #2
 800616e:	2b03      	cmp	r3, #3
 8006170:	d81b      	bhi.n	80061aa <HAL_ADC_ConfigChannel+0x8e>
 8006172:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <HAL_ADC_ConfigChannel+0x5c>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006189 	.word	0x08006189
 800617c:	08006191 	.word	0x08006191
 8006180:	08006199 	.word	0x08006199
 8006184:	080061a1 	.word	0x080061a1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006188:	230c      	movs	r3, #12
 800618a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800618e:	e010      	b.n	80061b2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006190:	2312      	movs	r3, #18
 8006192:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006196:	e00c      	b.n	80061b2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006198:	2318      	movs	r3, #24
 800619a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800619e:	e008      	b.n	80061b2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80061a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061a8:	e003      	b.n	80061b2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80061aa:	2306      	movs	r3, #6
 80061ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061b0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80061c0:	f7ff fa09 	bl	80055d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fb38 	bl	800583e <LL_ADC_REG_IsConversionOngoing>
 80061ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fb44 	bl	8005864 <LL_ADC_INJ_IsConversionOngoing>
 80061dc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 81bf 	bne.w	8006568 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 81ba 	bne.w	8006568 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061fc:	d10f      	bne.n	800621e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	4619      	mov	r1, r3
 800620a:	f7ff fa23 	bl	8005654 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff f9b7 	bl	800558a <LL_ADC_SetSamplingTimeCommonConfig>
 800621c:	e00e      	b.n	800623c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6819      	ldr	r1, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	461a      	mov	r2, r3
 800622c:	f7ff fa12 	bl	8005654 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff f9a7 	bl	800558a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	08db      	lsrs	r3, r3, #3
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b04      	cmp	r3, #4
 800625c:	d00a      	beq.n	8006274 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6919      	ldr	r1, [r3, #16]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800626e:	f7ff f937 	bl	80054e0 <LL_ADC_SetOffset>
 8006272:	e179      	b.n	8006568 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2100      	movs	r1, #0
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff f954 	bl	8005528 <LL_ADC_GetOffsetChannel>
 8006280:	4603      	mov	r3, r0
 8006282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <HAL_ADC_ConfigChannel+0x184>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2100      	movs	r1, #0
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff f949 	bl	8005528 <LL_ADC_GetOffsetChannel>
 8006296:	4603      	mov	r3, r0
 8006298:	0e9b      	lsrs	r3, r3, #26
 800629a:	f003 021f 	and.w	r2, r3, #31
 800629e:	e01e      	b.n	80062de <HAL_ADC_ConfigChannel+0x1c2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff f93e 	bl	8005528 <LL_ADC_GetOffsetChannel>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062b6:	fa93 f3a3 	rbit	r3, r3
 80062ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80062c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80062ce:	2320      	movs	r3, #32
 80062d0:	e004      	b.n	80062dc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80062d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062d6:	fab3 f383 	clz	r3, r3
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d105      	bne.n	80062f6 <HAL_ADC_ConfigChannel+0x1da>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	0e9b      	lsrs	r3, r3, #26
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	e018      	b.n	8006328 <HAL_ADC_ConfigChannel+0x20c>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006302:	fa93 f3a3 	rbit	r3, r3
 8006306:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800630a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800630e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006312:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800631a:	2320      	movs	r3, #32
 800631c:	e004      	b.n	8006328 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800631e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006322:	fab3 f383 	clz	r3, r3
 8006326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006328:	429a      	cmp	r2, r3
 800632a:	d106      	bne.n	800633a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2200      	movs	r2, #0
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff f90d 	bl	8005554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff f8f1 	bl	8005528 <LL_ADC_GetOffsetChannel>
 8006346:	4603      	mov	r3, r0
 8006348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <HAL_ADC_ConfigChannel+0x24a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2101      	movs	r1, #1
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff f8e6 	bl	8005528 <LL_ADC_GetOffsetChannel>
 800635c:	4603      	mov	r3, r0
 800635e:	0e9b      	lsrs	r3, r3, #26
 8006360:	f003 021f 	and.w	r2, r3, #31
 8006364:	e01e      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x288>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2101      	movs	r1, #1
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f8db 	bl	8005528 <LL_ADC_GetOffsetChannel>
 8006372:	4603      	mov	r3, r0
 8006374:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800637c:	fa93 f3a3 	rbit	r3, r3
 8006380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800638c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8006394:	2320      	movs	r3, #32
 8006396:	e004      	b.n	80063a2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8006398:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800639c:	fab3 f383 	clz	r3, r3
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d105      	bne.n	80063bc <HAL_ADC_ConfigChannel+0x2a0>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	0e9b      	lsrs	r3, r3, #26
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	e018      	b.n	80063ee <HAL_ADC_ConfigChannel+0x2d2>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063c8:	fa93 f3a3 	rbit	r3, r3
 80063cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80063d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80063d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80063e0:	2320      	movs	r3, #32
 80063e2:	e004      	b.n	80063ee <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80063e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063e8:	fab3 f383 	clz	r3, r3
 80063ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d106      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff f8aa 	bl	8005554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2102      	movs	r1, #2
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff f88e 	bl	8005528 <LL_ADC_GetOffsetChannel>
 800640c:	4603      	mov	r3, r0
 800640e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <HAL_ADC_ConfigChannel+0x310>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2102      	movs	r1, #2
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff f883 	bl	8005528 <LL_ADC_GetOffsetChannel>
 8006422:	4603      	mov	r3, r0
 8006424:	0e9b      	lsrs	r3, r3, #26
 8006426:	f003 021f 	and.w	r2, r3, #31
 800642a:	e01e      	b.n	800646a <HAL_ADC_ConfigChannel+0x34e>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2102      	movs	r1, #2
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff f878 	bl	8005528 <LL_ADC_GetOffsetChannel>
 8006438:	4603      	mov	r3, r0
 800643a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006442:	fa93 f3a3 	rbit	r3, r3
 8006446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800644a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800644e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800645a:	2320      	movs	r3, #32
 800645c:	e004      	b.n	8006468 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800645e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006462:	fab3 f383 	clz	r3, r3
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x366>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	0e9b      	lsrs	r3, r3, #26
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	e014      	b.n	80064ac <HAL_ADC_ConfigChannel+0x390>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006488:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800648a:	fa93 f3a3 	rbit	r3, r3
 800648e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006492:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006496:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800649e:	2320      	movs	r3, #32
 80064a0:	e004      	b.n	80064ac <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80064a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064a6:	fab3 f383 	clz	r3, r3
 80064aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d106      	bne.n	80064be <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2200      	movs	r2, #0
 80064b6:	2102      	movs	r1, #2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff f84b 	bl	8005554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2103      	movs	r1, #3
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff f82f 	bl	8005528 <LL_ADC_GetOffsetChannel>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x3ce>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2103      	movs	r1, #3
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff f824 	bl	8005528 <LL_ADC_GetOffsetChannel>
 80064e0:	4603      	mov	r3, r0
 80064e2:	0e9b      	lsrs	r3, r3, #26
 80064e4:	f003 021f 	and.w	r2, r3, #31
 80064e8:	e017      	b.n	800651a <HAL_ADC_ConfigChannel+0x3fe>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2103      	movs	r1, #3
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff f819 	bl	8005528 <LL_ADC_GetOffsetChannel>
 80064f6:	4603      	mov	r3, r0
 80064f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064fc:	fa93 f3a3 	rbit	r3, r3
 8006500:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006504:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800650c:	2320      	movs	r3, #32
 800650e:	e003      	b.n	8006518 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006512:	fab3 f383 	clz	r3, r3
 8006516:	b2db      	uxtb	r3, r3
 8006518:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006522:	2b00      	cmp	r3, #0
 8006524:	d105      	bne.n	8006532 <HAL_ADC_ConfigChannel+0x416>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	0e9b      	lsrs	r3, r3, #26
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	e011      	b.n	8006556 <HAL_ADC_ConfigChannel+0x43a>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800653a:	fa93 f3a3 	rbit	r3, r3
 800653e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006540:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006542:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800654a:	2320      	movs	r3, #32
 800654c:	e003      	b.n	8006556 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800654e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006550:	fab3 f383 	clz	r3, r3
 8006554:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006556:	429a      	cmp	r2, r3
 8006558:	d106      	bne.n	8006568 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2200      	movs	r2, #0
 8006560:	2103      	movs	r1, #3
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe fff6 	bl	8005554 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff f93f 	bl	80057f0 <LL_ADC_IsEnabled>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 813f 	bne.w	80067f8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6819      	ldr	r1, [r3, #0]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	461a      	mov	r2, r3
 8006588:	f7ff f890 	bl	80056ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a8e      	ldr	r2, [pc, #568]	@ (80067cc <HAL_ADC_ConfigChannel+0x6b0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	f040 8130 	bne.w	80067f8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <HAL_ADC_ConfigChannel+0x4a4>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	0e9b      	lsrs	r3, r3, #26
 80065ae:	3301      	adds	r3, #1
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2b09      	cmp	r3, #9
 80065b6:	bf94      	ite	ls
 80065b8:	2301      	movls	r3, #1
 80065ba:	2300      	movhi	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	e019      	b.n	80065f4 <HAL_ADC_ConfigChannel+0x4d8>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065c8:	fa93 f3a3 	rbit	r3, r3
 80065cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80065ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80065d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80065d8:	2320      	movs	r3, #32
 80065da:	e003      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80065dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065de:	fab3 f383 	clz	r3, r3
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2b09      	cmp	r3, #9
 80065ec:	bf94      	ite	ls
 80065ee:	2301      	movls	r3, #1
 80065f0:	2300      	movhi	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d079      	beq.n	80066ec <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006600:	2b00      	cmp	r3, #0
 8006602:	d107      	bne.n	8006614 <HAL_ADC_ConfigChannel+0x4f8>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	0e9b      	lsrs	r3, r3, #26
 800660a:	3301      	adds	r3, #1
 800660c:	069b      	lsls	r3, r3, #26
 800660e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006612:	e015      	b.n	8006640 <HAL_ADC_ConfigChannel+0x524>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800661a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661c:	fa93 f3a3 	rbit	r3, r3
 8006620:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006624:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800662c:	2320      	movs	r3, #32
 800662e:	e003      	b.n	8006638 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8006630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006632:	fab3 f383 	clz	r3, r3
 8006636:	b2db      	uxtb	r3, r3
 8006638:	3301      	adds	r3, #1
 800663a:	069b      	lsls	r3, r3, #26
 800663c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x544>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	0e9b      	lsrs	r3, r3, #26
 8006652:	3301      	adds	r3, #1
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	2101      	movs	r1, #1
 800665a:	fa01 f303 	lsl.w	r3, r1, r3
 800665e:	e017      	b.n	8006690 <HAL_ADC_ConfigChannel+0x574>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006668:	fa93 f3a3 	rbit	r3, r3
 800666c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800666e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006670:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8006678:	2320      	movs	r3, #32
 800667a:	e003      	b.n	8006684 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800667c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667e:	fab3 f383 	clz	r3, r3
 8006682:	b2db      	uxtb	r3, r3
 8006684:	3301      	adds	r3, #1
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2101      	movs	r1, #1
 800668c:	fa01 f303 	lsl.w	r3, r1, r3
 8006690:	ea42 0103 	orr.w	r1, r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <HAL_ADC_ConfigChannel+0x59a>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	0e9b      	lsrs	r3, r3, #26
 80066a6:	3301      	adds	r3, #1
 80066a8:	f003 021f 	and.w	r2, r3, #31
 80066ac:	4613      	mov	r3, r2
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	4413      	add	r3, r2
 80066b2:	051b      	lsls	r3, r3, #20
 80066b4:	e018      	b.n	80066e8 <HAL_ADC_ConfigChannel+0x5cc>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	fa93 f3a3 	rbit	r3, r3
 80066c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80066c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80066ce:	2320      	movs	r3, #32
 80066d0:	e003      	b.n	80066da <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	fab3 f383 	clz	r3, r3
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	3301      	adds	r3, #1
 80066dc:	f003 021f 	and.w	r2, r3, #31
 80066e0:	4613      	mov	r3, r2
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	4413      	add	r3, r2
 80066e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066e8:	430b      	orrs	r3, r1
 80066ea:	e080      	b.n	80067ee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d107      	bne.n	8006708 <HAL_ADC_ConfigChannel+0x5ec>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	0e9b      	lsrs	r3, r3, #26
 80066fe:	3301      	adds	r3, #1
 8006700:	069b      	lsls	r3, r3, #26
 8006702:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006706:	e015      	b.n	8006734 <HAL_ADC_ConfigChannel+0x618>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	fa93 f3a3 	rbit	r3, r3
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800671a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8006720:	2320      	movs	r3, #32
 8006722:	e003      	b.n	800672c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	fab3 f383 	clz	r3, r3
 800672a:	b2db      	uxtb	r3, r3
 800672c:	3301      	adds	r3, #1
 800672e:	069b      	lsls	r3, r3, #26
 8006730:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <HAL_ADC_ConfigChannel+0x638>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	0e9b      	lsrs	r3, r3, #26
 8006746:	3301      	adds	r3, #1
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2101      	movs	r1, #1
 800674e:	fa01 f303 	lsl.w	r3, r1, r3
 8006752:	e017      	b.n	8006784 <HAL_ADC_ConfigChannel+0x668>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	fa93 f3a3 	rbit	r3, r3
 8006760:	61bb      	str	r3, [r7, #24]
  return result;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800676c:	2320      	movs	r3, #32
 800676e:	e003      	b.n	8006778 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	fab3 f383 	clz	r3, r3
 8006776:	b2db      	uxtb	r3, r3
 8006778:	3301      	adds	r3, #1
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2101      	movs	r1, #1
 8006780:	fa01 f303 	lsl.w	r3, r1, r3
 8006784:	ea42 0103 	orr.w	r1, r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <HAL_ADC_ConfigChannel+0x694>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	0e9b      	lsrs	r3, r3, #26
 800679a:	3301      	adds	r3, #1
 800679c:	f003 021f 	and.w	r2, r3, #31
 80067a0:	4613      	mov	r3, r2
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	4413      	add	r3, r2
 80067a6:	3b1e      	subs	r3, #30
 80067a8:	051b      	lsls	r3, r3, #20
 80067aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067ae:	e01d      	b.n	80067ec <HAL_ADC_ConfigChannel+0x6d0>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	fa93 f3a3 	rbit	r3, r3
 80067bc:	60fb      	str	r3, [r7, #12]
  return result;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d103      	bne.n	80067d0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80067c8:	2320      	movs	r3, #32
 80067ca:	e005      	b.n	80067d8 <HAL_ADC_ConfigChannel+0x6bc>
 80067cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	fab3 f383 	clz	r3, r3
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	3301      	adds	r3, #1
 80067da:	f003 021f 	and.w	r2, r3, #31
 80067de:	4613      	mov	r3, r2
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	4413      	add	r3, r2
 80067e4:	3b1e      	subs	r3, #30
 80067e6:	051b      	lsls	r3, r3, #20
 80067e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067f2:	4619      	mov	r1, r3
 80067f4:	f7fe ff2e 	bl	8005654 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b44      	ldr	r3, [pc, #272]	@ (8006910 <HAL_ADC_ConfigChannel+0x7f4>)
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d07a      	beq.n	80068fa <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006804:	4843      	ldr	r0, [pc, #268]	@ (8006914 <HAL_ADC_ConfigChannel+0x7f8>)
 8006806:	f7fe fe5d 	bl	80054c4 <LL_ADC_GetCommonPathInternalCh>
 800680a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a41      	ldr	r2, [pc, #260]	@ (8006918 <HAL_ADC_ConfigChannel+0x7fc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d12c      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800681c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d126      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a3c      	ldr	r2, [pc, #240]	@ (800691c <HAL_ADC_ConfigChannel+0x800>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_ADC_ConfigChannel+0x71c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a3b      	ldr	r2, [pc, #236]	@ (8006920 <HAL_ADC_ConfigChannel+0x804>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d15d      	bne.n	80068f4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800683c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006840:	4619      	mov	r1, r3
 8006842:	4834      	ldr	r0, [pc, #208]	@ (8006914 <HAL_ADC_ConfigChannel+0x7f8>)
 8006844:	f7fe fe2b 	bl	800549e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006848:	4b36      	ldr	r3, [pc, #216]	@ (8006924 <HAL_ADC_ConfigChannel+0x808>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	099b      	lsrs	r3, r3, #6
 800684e:	4a36      	ldr	r2, [pc, #216]	@ (8006928 <HAL_ADC_ConfigChannel+0x80c>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	099b      	lsrs	r3, r3, #6
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	4613      	mov	r3, r2
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006862:	e002      	b.n	800686a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	3b01      	subs	r3, #1
 8006868:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1f9      	bne.n	8006864 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006870:	e040      	b.n	80068f4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a2d      	ldr	r2, [pc, #180]	@ (800692c <HAL_ADC_ConfigChannel+0x810>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d118      	bne.n	80068ae <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800687c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d112      	bne.n	80068ae <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a23      	ldr	r2, [pc, #140]	@ (800691c <HAL_ADC_ConfigChannel+0x800>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_ADC_ConfigChannel+0x780>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a22      	ldr	r2, [pc, #136]	@ (8006920 <HAL_ADC_ConfigChannel+0x804>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d12d      	bne.n	80068f8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800689c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068a4:	4619      	mov	r1, r3
 80068a6:	481b      	ldr	r0, [pc, #108]	@ (8006914 <HAL_ADC_ConfigChannel+0x7f8>)
 80068a8:	f7fe fdf9 	bl	800549e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068ac:	e024      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006930 <HAL_ADC_ConfigChannel+0x814>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d120      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11a      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a14      	ldr	r2, [pc, #80]	@ (800691c <HAL_ADC_ConfigChannel+0x800>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d115      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80068d6:	4619      	mov	r1, r3
 80068d8:	480e      	ldr	r0, [pc, #56]	@ (8006914 <HAL_ADC_ConfigChannel+0x7f8>)
 80068da:	f7fe fde0 	bl	800549e <LL_ADC_SetCommonPathInternalCh>
 80068de:	e00c      	b.n	80068fa <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80068f2:	e002      	b.n	80068fa <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006902:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006906:	4618      	mov	r0, r3
 8006908:	37d8      	adds	r7, #216	@ 0xd8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	80080000 	.word	0x80080000
 8006914:	50040300 	.word	0x50040300
 8006918:	c7520000 	.word	0xc7520000
 800691c:	50040000 	.word	0x50040000
 8006920:	50040200 	.word	0x50040200
 8006924:	2000039c 	.word	0x2000039c
 8006928:	053e2d63 	.word	0x053e2d63
 800692c:	cb840000 	.word	0xcb840000
 8006930:	80000001 	.word	0x80000001

08006934 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800693c:	2300      	movs	r3, #0
 800693e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe ff53 	bl	80057f0 <LL_ADC_IsEnabled>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d169      	bne.n	8006a24 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	4b36      	ldr	r3, [pc, #216]	@ (8006a30 <ADC_Enable+0xfc>)
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00d      	beq.n	800697a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006962:	f043 0210 	orr.w	r2, r3, #16
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e055      	b.n	8006a26 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe ff22 	bl	80057c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006984:	482b      	ldr	r0, [pc, #172]	@ (8006a34 <ADC_Enable+0x100>)
 8006986:	f7fe fd9d 	bl	80054c4 <LL_ADC_GetCommonPathInternalCh>
 800698a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800698c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006994:	4b28      	ldr	r3, [pc, #160]	@ (8006a38 <ADC_Enable+0x104>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	099b      	lsrs	r3, r3, #6
 800699a:	4a28      	ldr	r2, [pc, #160]	@ (8006a3c <ADC_Enable+0x108>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	4613      	mov	r3, r2
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069ae:	e002      	b.n	80069b6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1f9      	bne.n	80069b0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80069bc:	f7fe fd30 	bl	8005420 <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069c2:	e028      	b.n	8006a16 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe ff11 	bl	80057f0 <LL_ADC_IsEnabled>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe fef5 	bl	80057c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069de:	f7fe fd1f 	bl	8005420 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d914      	bls.n	8006a16 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d00d      	beq.n	8006a16 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fe:	f043 0210 	orr.w	r2, r3, #16
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0a:	f043 0201 	orr.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e007      	b.n	8006a26 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d1cf      	bne.n	80069c4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	8000003f 	.word	0x8000003f
 8006a34:	50040300 	.word	0x50040300
 8006a38:	2000039c 	.word	0x2000039c
 8006a3c:	053e2d63 	.word	0x053e2d63

08006a40 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a52:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d14b      	bne.n	8006af2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d021      	beq.n	8006ab8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe fd99 	bl	80055b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d032      	beq.n	8006aea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d12b      	bne.n	8006aea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d11f      	bne.n	8006aea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aae:	f043 0201 	orr.w	r2, r3, #1
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006ab6:	e018      	b.n	8006aea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d111      	bne.n	8006aea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae2:	f043 0201 	orr.w	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7fd fd1c 	bl	8004528 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006af0:	e00e      	b.n	8006b10 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fb02 	bl	8006108 <HAL_ADC_ErrorCallback>
}
 8006b04:	e004      	b.n	8006b10 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7ff fada 	bl	80060e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b52:	f043 0204 	orr.w	r2, r3, #4
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fad4 	bl	8006108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <LL_ADC_IsEnabled>:
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <LL_ADC_IsEnabled+0x18>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <LL_ADC_IsEnabled+0x1a>
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <LL_ADC_REG_IsConversionOngoing>:
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d101      	bne.n	8006ba6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b0a1      	sub	sp, #132	@ 0x84
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e093      	b.n	8006d5e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006c42:	2300      	movs	r3, #0
 8006c44:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a47      	ldr	r2, [pc, #284]	@ (8006d68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d102      	bne.n	8006c56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006c50:	4b46      	ldr	r3, [pc, #280]	@ (8006d6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	e001      	b.n	8006c5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10b      	bne.n	8006c78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c64:	f043 0220 	orr.w	r2, r3, #32
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e072      	b.n	8006d5e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff ff87 	bl	8006b8e <LL_ADC_REG_IsConversionOngoing>
 8006c80:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff ff81 	bl	8006b8e <LL_ADC_REG_IsConversionOngoing>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d154      	bne.n	8006d3c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d151      	bne.n	8006d3c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006c98:	4b35      	ldr	r3, [pc, #212]	@ (8006d70 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006c9a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d02c      	beq.n	8006cfe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	6859      	ldr	r1, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cb6:	035b      	lsls	r3, r3, #13
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cbe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cc0:	4829      	ldr	r0, [pc, #164]	@ (8006d68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006cc2:	f7ff ff51 	bl	8006b68 <LL_ADC_IsEnabled>
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4828      	ldr	r0, [pc, #160]	@ (8006d6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006cca:	f7ff ff4d 	bl	8006b68 <LL_ADC_IsEnabled>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	431c      	orrs	r4, r3
 8006cd2:	4828      	ldr	r0, [pc, #160]	@ (8006d74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006cd4:	f7ff ff48 	bl	8006b68 <LL_ADC_IsEnabled>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4323      	orrs	r3, r4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d137      	bne.n	8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006ce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006ce8:	f023 030f 	bic.w	r3, r3, #15
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	6811      	ldr	r1, [r2, #0]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	6892      	ldr	r2, [r2, #8]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cfa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006cfc:	e028      	b.n	8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d08:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d0a:	4817      	ldr	r0, [pc, #92]	@ (8006d68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006d0c:	f7ff ff2c 	bl	8006b68 <LL_ADC_IsEnabled>
 8006d10:	4604      	mov	r4, r0
 8006d12:	4816      	ldr	r0, [pc, #88]	@ (8006d6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006d14:	f7ff ff28 	bl	8006b68 <LL_ADC_IsEnabled>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	431c      	orrs	r4, r3
 8006d1c:	4815      	ldr	r0, [pc, #84]	@ (8006d74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006d1e:	f7ff ff23 	bl	8006b68 <LL_ADC_IsEnabled>
 8006d22:	4603      	mov	r3, r0
 8006d24:	4323      	orrs	r3, r4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d112      	bne.n	8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006d32:	f023 030f 	bic.w	r3, r3, #15
 8006d36:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006d38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d3a:	e009      	b.n	8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d40:	f043 0220 	orr.w	r2, r3, #32
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006d4e:	e000      	b.n	8006d52 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006d5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3784      	adds	r7, #132	@ 0x84
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd90      	pop	{r4, r7, pc}
 8006d66:	bf00      	nop
 8006d68:	50040000 	.word	0x50040000
 8006d6c:	50040100 	.word	0x50040100
 8006d70:	50040300 	.word	0x50040300
 8006d74:	50040200 	.word	0x50040200

08006d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d88:	4b0c      	ldr	r3, [pc, #48]	@ (8006dbc <__NVIC_SetPriorityGrouping+0x44>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d94:	4013      	ands	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006daa:	4a04      	ldr	r2, [pc, #16]	@ (8006dbc <__NVIC_SetPriorityGrouping+0x44>)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	60d3      	str	r3, [r2, #12]
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	e000ed00 	.word	0xe000ed00

08006dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dc4:	4b04      	ldr	r3, [pc, #16]	@ (8006dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	0a1b      	lsrs	r3, r3, #8
 8006dca:	f003 0307 	and.w	r3, r3, #7
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	e000ed00 	.word	0xe000ed00

08006ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	db0b      	blt.n	8006e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	f003 021f 	and.w	r2, r3, #31
 8006df4:	4907      	ldr	r1, [pc, #28]	@ (8006e14 <__NVIC_EnableIRQ+0x38>)
 8006df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8006e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	e000e100 	.word	0xe000e100

08006e18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	db12      	blt.n	8006e50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	f003 021f 	and.w	r2, r3, #31
 8006e30:	490a      	ldr	r1, [pc, #40]	@ (8006e5c <__NVIC_DisableIRQ+0x44>)
 8006e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	2001      	movs	r0, #1
 8006e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e3e:	3320      	adds	r3, #32
 8006e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e44:	f3bf 8f4f 	dsb	sy
}
 8006e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e4a:	f3bf 8f6f 	isb	sy
}
 8006e4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	e000e100 	.word	0xe000e100

08006e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	6039      	str	r1, [r7, #0]
 8006e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	db0a      	blt.n	8006e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	490c      	ldr	r1, [pc, #48]	@ (8006eac <__NVIC_SetPriority+0x4c>)
 8006e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7e:	0112      	lsls	r2, r2, #4
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	440b      	add	r3, r1
 8006e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e88:	e00a      	b.n	8006ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	4908      	ldr	r1, [pc, #32]	@ (8006eb0 <__NVIC_SetPriority+0x50>)
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	3b04      	subs	r3, #4
 8006e98:	0112      	lsls	r2, r2, #4
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	761a      	strb	r2, [r3, #24]
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	e000e100 	.word	0xe000e100
 8006eb0:	e000ed00 	.word	0xe000ed00

08006eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b089      	sub	sp, #36	@ 0x24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f1c3 0307 	rsb	r3, r3, #7
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	bf28      	it	cs
 8006ed2:	2304      	movcs	r3, #4
 8006ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	2b06      	cmp	r3, #6
 8006edc:	d902      	bls.n	8006ee4 <NVIC_EncodePriority+0x30>
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	3b03      	subs	r3, #3
 8006ee2:	e000      	b.n	8006ee6 <NVIC_EncodePriority+0x32>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	401a      	ands	r2, r3
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006efc:	f04f 31ff 	mov.w	r1, #4294967295
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	fa01 f303 	lsl.w	r3, r1, r3
 8006f06:	43d9      	mvns	r1, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f0c:	4313      	orrs	r3, r2
         );
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3724      	adds	r7, #36	@ 0x24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
	...

08006f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f2c:	d301      	bcc.n	8006f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e00f      	b.n	8006f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f32:	4a0a      	ldr	r2, [pc, #40]	@ (8006f5c <SysTick_Config+0x40>)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f3a:	210f      	movs	r1, #15
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	f7ff ff8e 	bl	8006e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f44:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <SysTick_Config+0x40>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f4a:	4b04      	ldr	r3, [pc, #16]	@ (8006f5c <SysTick_Config+0x40>)
 8006f4c:	2207      	movs	r2, #7
 8006f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	e000e010 	.word	0xe000e010

08006f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ff05 	bl	8006d78 <__NVIC_SetPriorityGrouping>
}
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b086      	sub	sp, #24
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f88:	f7ff ff1a 	bl	8006dc0 <__NVIC_GetPriorityGrouping>
 8006f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	6978      	ldr	r0, [r7, #20]
 8006f94:	f7ff ff8e 	bl	8006eb4 <NVIC_EncodePriority>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff ff5d 	bl	8006e60 <__NVIC_SetPriority>
}
 8006fa6:	bf00      	nop
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff ff0d 	bl	8006ddc <__NVIC_EnableIRQ>
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff1d 	bl	8006e18 <__NVIC_DisableIRQ>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff ff94 	bl	8006f1c <SysTick_Config>
 8006ff4:	4603      	mov	r3, r0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e098      	b.n	8007144 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	4b4d      	ldr	r3, [pc, #308]	@ (8007150 <HAL_DMA_Init+0x150>)
 800701a:	429a      	cmp	r2, r3
 800701c:	d80f      	bhi.n	800703e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	4b4b      	ldr	r3, [pc, #300]	@ (8007154 <HAL_DMA_Init+0x154>)
 8007026:	4413      	add	r3, r2
 8007028:	4a4b      	ldr	r2, [pc, #300]	@ (8007158 <HAL_DMA_Init+0x158>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	091b      	lsrs	r3, r3, #4
 8007030:	009a      	lsls	r2, r3, #2
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a48      	ldr	r2, [pc, #288]	@ (800715c <HAL_DMA_Init+0x15c>)
 800703a:	641a      	str	r2, [r3, #64]	@ 0x40
 800703c:	e00e      	b.n	800705c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	4b46      	ldr	r3, [pc, #280]	@ (8007160 <HAL_DMA_Init+0x160>)
 8007046:	4413      	add	r3, r2
 8007048:	4a43      	ldr	r2, [pc, #268]	@ (8007158 <HAL_DMA_Init+0x158>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	091b      	lsrs	r3, r3, #4
 8007050:	009a      	lsls	r2, r3, #2
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a42      	ldr	r2, [pc, #264]	@ (8007164 <HAL_DMA_Init+0x164>)
 800705a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007076:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800708c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070b6:	d039      	beq.n	800712c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070bc:	4a27      	ldr	r2, [pc, #156]	@ (800715c <HAL_DMA_Init+0x15c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d11a      	bne.n	80070f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070c2:	4b29      	ldr	r3, [pc, #164]	@ (8007168 <HAL_DMA_Init+0x168>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ca:	f003 031c 	and.w	r3, r3, #28
 80070ce:	210f      	movs	r1, #15
 80070d0:	fa01 f303 	lsl.w	r3, r1, r3
 80070d4:	43db      	mvns	r3, r3
 80070d6:	4924      	ldr	r1, [pc, #144]	@ (8007168 <HAL_DMA_Init+0x168>)
 80070d8:	4013      	ands	r3, r2
 80070da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070dc:	4b22      	ldr	r3, [pc, #136]	@ (8007168 <HAL_DMA_Init+0x168>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6859      	ldr	r1, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e8:	f003 031c 	and.w	r3, r3, #28
 80070ec:	fa01 f303 	lsl.w	r3, r1, r3
 80070f0:	491d      	ldr	r1, [pc, #116]	@ (8007168 <HAL_DMA_Init+0x168>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	600b      	str	r3, [r1, #0]
 80070f6:	e019      	b.n	800712c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070f8:	4b1c      	ldr	r3, [pc, #112]	@ (800716c <HAL_DMA_Init+0x16c>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007100:	f003 031c 	and.w	r3, r3, #28
 8007104:	210f      	movs	r1, #15
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	43db      	mvns	r3, r3
 800710c:	4917      	ldr	r1, [pc, #92]	@ (800716c <HAL_DMA_Init+0x16c>)
 800710e:	4013      	ands	r3, r2
 8007110:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007112:	4b16      	ldr	r3, [pc, #88]	@ (800716c <HAL_DMA_Init+0x16c>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6859      	ldr	r1, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800711e:	f003 031c 	and.w	r3, r3, #28
 8007122:	fa01 f303 	lsl.w	r3, r1, r3
 8007126:	4911      	ldr	r1, [pc, #68]	@ (800716c <HAL_DMA_Init+0x16c>)
 8007128:	4313      	orrs	r3, r2
 800712a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	40020407 	.word	0x40020407
 8007154:	bffdfff8 	.word	0xbffdfff8
 8007158:	cccccccd 	.word	0xcccccccd
 800715c:	40020000 	.word	0x40020000
 8007160:	bffdfbf8 	.word	0xbffdfbf8
 8007164:	40020400 	.word	0x40020400
 8007168:	400200a8 	.word	0x400200a8
 800716c:	400204a8 	.word	0x400204a8

08007170 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e072      	b.n	8007268 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	4b36      	ldr	r3, [pc, #216]	@ (8007274 <HAL_DMA_DeInit+0x104>)
 800719a:	429a      	cmp	r2, r3
 800719c:	d80f      	bhi.n	80071be <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	4b34      	ldr	r3, [pc, #208]	@ (8007278 <HAL_DMA_DeInit+0x108>)
 80071a6:	4413      	add	r3, r2
 80071a8:	4a34      	ldr	r2, [pc, #208]	@ (800727c <HAL_DMA_DeInit+0x10c>)
 80071aa:	fba2 2303 	umull	r2, r3, r2, r3
 80071ae:	091b      	lsrs	r3, r3, #4
 80071b0:	009a      	lsls	r2, r3, #2
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a31      	ldr	r2, [pc, #196]	@ (8007280 <HAL_DMA_DeInit+0x110>)
 80071ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80071bc:	e00e      	b.n	80071dc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007284 <HAL_DMA_DeInit+0x114>)
 80071c6:	4413      	add	r3, r2
 80071c8:	4a2c      	ldr	r2, [pc, #176]	@ (800727c <HAL_DMA_DeInit+0x10c>)
 80071ca:	fba2 2303 	umull	r2, r3, r2, r3
 80071ce:	091b      	lsrs	r3, r3, #4
 80071d0:	009a      	lsls	r2, r3, #2
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007288 <HAL_DMA_DeInit+0x118>)
 80071da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e8:	f003 021c 	and.w	r2, r3, #28
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f0:	2101      	movs	r1, #1
 80071f2:	fa01 f202 	lsl.w	r2, r1, r2
 80071f6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fc:	4a20      	ldr	r2, [pc, #128]	@ (8007280 <HAL_DMA_DeInit+0x110>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d10d      	bne.n	800721e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007202:	4b22      	ldr	r3, [pc, #136]	@ (800728c <HAL_DMA_DeInit+0x11c>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	f003 031c 	and.w	r3, r3, #28
 800720e:	210f      	movs	r1, #15
 8007210:	fa01 f303 	lsl.w	r3, r1, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	491d      	ldr	r1, [pc, #116]	@ (800728c <HAL_DMA_DeInit+0x11c>)
 8007218:	4013      	ands	r3, r2
 800721a:	600b      	str	r3, [r1, #0]
 800721c:	e00c      	b.n	8007238 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800721e:	4b1c      	ldr	r3, [pc, #112]	@ (8007290 <HAL_DMA_DeInit+0x120>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007226:	f003 031c 	and.w	r3, r3, #28
 800722a:	210f      	movs	r1, #15
 800722c:	fa01 f303 	lsl.w	r3, r1, r3
 8007230:	43db      	mvns	r3, r3
 8007232:	4917      	ldr	r1, [pc, #92]	@ (8007290 <HAL_DMA_DeInit+0x120>)
 8007234:	4013      	ands	r3, r2
 8007236:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	40020407 	.word	0x40020407
 8007278:	bffdfff8 	.word	0xbffdfff8
 800727c:	cccccccd 	.word	0xcccccccd
 8007280:	40020000 	.word	0x40020000
 8007284:	bffdfbf8 	.word	0xbffdfbf8
 8007288:	40020400 	.word	0x40020400
 800728c:	400200a8 	.word	0x400200a8
 8007290:	400204a8 	.word	0x400204a8

08007294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_DMA_Start_IT+0x20>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e04b      	b.n	800734c <HAL_DMA_Start_IT+0xb8>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d13a      	bne.n	800733e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f96d 	bl	80075cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d008      	beq.n	800730c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 020e 	orr.w	r2, r2, #14
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	e00f      	b.n	800732c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0204 	bic.w	r2, r2, #4
 800731a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 020a 	orr.w	r2, r2, #10
 800732a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e005      	b.n	800734a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007346:	2302      	movs	r3, #2
 8007348:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d008      	beq.n	800737e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2204      	movs	r2, #4
 8007370:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e022      	b.n	80073c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 020e 	bic.w	r2, r2, #14
 800738c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0201 	bic.w	r2, r2, #1
 800739c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a2:	f003 021c 	and.w	r2, r3, #28
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073aa:	2101      	movs	r1, #1
 80073ac:	fa01 f202 	lsl.w	r2, r1, r2
 80073b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d005      	beq.n	80073f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2204      	movs	r2, #4
 80073ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
 80073f2:	e029      	b.n	8007448 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 020e 	bic.w	r2, r2, #14
 8007402:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007418:	f003 021c 	and.w	r2, r3, #28
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007420:	2101      	movs	r1, #1
 8007422:	fa01 f202 	lsl.w	r2, r1, r2
 8007426:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
    }
  }
  return status;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746e:	f003 031c 	and.w	r3, r3, #28
 8007472:	2204      	movs	r2, #4
 8007474:	409a      	lsls	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4013      	ands	r3, r2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d026      	beq.n	80074cc <HAL_DMA_IRQHandler+0x7a>
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d021      	beq.n	80074cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d107      	bne.n	80074a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0204 	bic.w	r2, r2, #4
 80074a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074aa:	f003 021c 	and.w	r2, r3, #28
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	2104      	movs	r1, #4
 80074b4:	fa01 f202 	lsl.w	r2, r1, r2
 80074b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d071      	beq.n	80075a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80074ca:	e06c      	b.n	80075a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d0:	f003 031c 	and.w	r3, r3, #28
 80074d4:	2202      	movs	r2, #2
 80074d6:	409a      	lsls	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d02e      	beq.n	800753e <HAL_DMA_IRQHandler+0xec>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d029      	beq.n	800753e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 020a 	bic.w	r2, r2, #10
 8007506:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007514:	f003 021c 	and.w	r2, r3, #28
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	2102      	movs	r1, #2
 800751e:	fa01 f202 	lsl.w	r2, r1, r2
 8007522:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d038      	beq.n	80075a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800753c:	e033      	b.n	80075a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007542:	f003 031c 	and.w	r3, r3, #28
 8007546:	2208      	movs	r2, #8
 8007548:	409a      	lsls	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4013      	ands	r3, r2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02a      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x156>
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d025      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 020e 	bic.w	r2, r2, #14
 800756a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007570:	f003 021c 	and.w	r2, r3, #28
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007578:	2101      	movs	r1, #1
 800757a:	fa01 f202 	lsl.w	r2, r1, r2
 800757e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
}
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80075be:	b2db      	uxtb	r3, r3
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075de:	f003 021c 	and.w	r2, r3, #28
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e6:	2101      	movs	r1, #1
 80075e8:	fa01 f202 	lsl.w	r2, r1, r2
 80075ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d108      	bne.n	8007610 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800760e:	e007      	b.n	8007620 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	60da      	str	r2, [r3, #12]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800763a:	e166      	b.n	800790a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	2101      	movs	r1, #1
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	fa01 f303 	lsl.w	r3, r1, r3
 8007648:	4013      	ands	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8158 	beq.w	8007904 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f003 0303 	and.w	r3, r3, #3
 800765c:	2b01      	cmp	r3, #1
 800765e:	d005      	beq.n	800766c <HAL_GPIO_Init+0x40>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d130      	bne.n	80076ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	2203      	movs	r2, #3
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	43db      	mvns	r3, r3
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4013      	ands	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076a2:	2201      	movs	r2, #1
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	fa02 f303 	lsl.w	r3, r2, r3
 80076aa:	43db      	mvns	r3, r3
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4013      	ands	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	091b      	lsrs	r3, r3, #4
 80076b8:	f003 0201 	and.w	r2, r3, #1
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d017      	beq.n	800770a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	2203      	movs	r2, #3
 80076e6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ea:	43db      	mvns	r3, r3
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4013      	ands	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d123      	bne.n	800775e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	08da      	lsrs	r2, r3, #3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3208      	adds	r2, #8
 800771e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	220f      	movs	r2, #15
 800772e:	fa02 f303 	lsl.w	r3, r2, r3
 8007732:	43db      	mvns	r3, r3
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4013      	ands	r3, r2
 8007738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	08da      	lsrs	r2, r3, #3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3208      	adds	r2, #8
 8007758:	6939      	ldr	r1, [r7, #16]
 800775a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	2203      	movs	r2, #3
 800776a:	fa02 f303 	lsl.w	r3, r2, r3
 800776e:	43db      	mvns	r3, r3
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	4013      	ands	r3, r2
 8007774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f003 0203 	and.w	r2, r3, #3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 80b2 	beq.w	8007904 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077a0:	4b61      	ldr	r3, [pc, #388]	@ (8007928 <HAL_GPIO_Init+0x2fc>)
 80077a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a4:	4a60      	ldr	r2, [pc, #384]	@ (8007928 <HAL_GPIO_Init+0x2fc>)
 80077a6:	f043 0301 	orr.w	r3, r3, #1
 80077aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80077ac:	4b5e      	ldr	r3, [pc, #376]	@ (8007928 <HAL_GPIO_Init+0x2fc>)
 80077ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80077b8:	4a5c      	ldr	r2, [pc, #368]	@ (800792c <HAL_GPIO_Init+0x300>)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	089b      	lsrs	r3, r3, #2
 80077be:	3302      	adds	r3, #2
 80077c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	220f      	movs	r2, #15
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	43db      	mvns	r3, r3
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4013      	ands	r3, r2
 80077da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80077e2:	d02b      	beq.n	800783c <HAL_GPIO_Init+0x210>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a52      	ldr	r2, [pc, #328]	@ (8007930 <HAL_GPIO_Init+0x304>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d025      	beq.n	8007838 <HAL_GPIO_Init+0x20c>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a51      	ldr	r2, [pc, #324]	@ (8007934 <HAL_GPIO_Init+0x308>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d01f      	beq.n	8007834 <HAL_GPIO_Init+0x208>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a50      	ldr	r2, [pc, #320]	@ (8007938 <HAL_GPIO_Init+0x30c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d019      	beq.n	8007830 <HAL_GPIO_Init+0x204>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a4f      	ldr	r2, [pc, #316]	@ (800793c <HAL_GPIO_Init+0x310>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <HAL_GPIO_Init+0x200>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a4e      	ldr	r2, [pc, #312]	@ (8007940 <HAL_GPIO_Init+0x314>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00d      	beq.n	8007828 <HAL_GPIO_Init+0x1fc>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a4d      	ldr	r2, [pc, #308]	@ (8007944 <HAL_GPIO_Init+0x318>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d007      	beq.n	8007824 <HAL_GPIO_Init+0x1f8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a4c      	ldr	r2, [pc, #304]	@ (8007948 <HAL_GPIO_Init+0x31c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d101      	bne.n	8007820 <HAL_GPIO_Init+0x1f4>
 800781c:	2307      	movs	r3, #7
 800781e:	e00e      	b.n	800783e <HAL_GPIO_Init+0x212>
 8007820:	2308      	movs	r3, #8
 8007822:	e00c      	b.n	800783e <HAL_GPIO_Init+0x212>
 8007824:	2306      	movs	r3, #6
 8007826:	e00a      	b.n	800783e <HAL_GPIO_Init+0x212>
 8007828:	2305      	movs	r3, #5
 800782a:	e008      	b.n	800783e <HAL_GPIO_Init+0x212>
 800782c:	2304      	movs	r3, #4
 800782e:	e006      	b.n	800783e <HAL_GPIO_Init+0x212>
 8007830:	2303      	movs	r3, #3
 8007832:	e004      	b.n	800783e <HAL_GPIO_Init+0x212>
 8007834:	2302      	movs	r3, #2
 8007836:	e002      	b.n	800783e <HAL_GPIO_Init+0x212>
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <HAL_GPIO_Init+0x212>
 800783c:	2300      	movs	r3, #0
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	f002 0203 	and.w	r2, r2, #3
 8007844:	0092      	lsls	r2, r2, #2
 8007846:	4093      	lsls	r3, r2
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800784e:	4937      	ldr	r1, [pc, #220]	@ (800792c <HAL_GPIO_Init+0x300>)
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	089b      	lsrs	r3, r3, #2
 8007854:	3302      	adds	r3, #2
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800785c:	4b3b      	ldr	r3, [pc, #236]	@ (800794c <HAL_GPIO_Init+0x320>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	43db      	mvns	r3, r3
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4013      	ands	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007880:	4a32      	ldr	r2, [pc, #200]	@ (800794c <HAL_GPIO_Init+0x320>)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007886:	4b31      	ldr	r3, [pc, #196]	@ (800794c <HAL_GPIO_Init+0x320>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	43db      	mvns	r3, r3
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4013      	ands	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078aa:	4a28      	ldr	r2, [pc, #160]	@ (800794c <HAL_GPIO_Init+0x320>)
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80078b0:	4b26      	ldr	r3, [pc, #152]	@ (800794c <HAL_GPIO_Init+0x320>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	43db      	mvns	r3, r3
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4013      	ands	r3, r2
 80078be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80078d4:	4a1d      	ldr	r2, [pc, #116]	@ (800794c <HAL_GPIO_Init+0x320>)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80078da:	4b1c      	ldr	r3, [pc, #112]	@ (800794c <HAL_GPIO_Init+0x320>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	43db      	mvns	r3, r3
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4013      	ands	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80078fe:	4a13      	ldr	r2, [pc, #76]	@ (800794c <HAL_GPIO_Init+0x320>)
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	3301      	adds	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	fa22 f303 	lsr.w	r3, r2, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	f47f ae91 	bne.w	800763c <HAL_GPIO_Init+0x10>
  }
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40021000 	.word	0x40021000
 800792c:	40010000 	.word	0x40010000
 8007930:	48000400 	.word	0x48000400
 8007934:	48000800 	.word	0x48000800
 8007938:	48000c00 	.word	0x48000c00
 800793c:	48001000 	.word	0x48001000
 8007940:	48001400 	.word	0x48001400
 8007944:	48001800 	.word	0x48001800
 8007948:	48001c00 	.word	0x48001c00
 800794c:	40010400 	.word	0x40010400

08007950 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800795e:	e0c9      	b.n	8007af4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007960:	2201      	movs	r2, #1
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	4013      	ands	r3, r2
 800796c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80bc 	beq.w	8007aee <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007976:	4a66      	ldr	r2, [pc, #408]	@ (8007b10 <HAL_GPIO_DeInit+0x1c0>)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	089b      	lsrs	r3, r3, #2
 800797c:	3302      	adds	r3, #2
 800797e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007982:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	220f      	movs	r2, #15
 800798e:	fa02 f303 	lsl.w	r3, r2, r3
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4013      	ands	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800799e:	d02b      	beq.n	80079f8 <HAL_GPIO_DeInit+0xa8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a5c      	ldr	r2, [pc, #368]	@ (8007b14 <HAL_GPIO_DeInit+0x1c4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d025      	beq.n	80079f4 <HAL_GPIO_DeInit+0xa4>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a5b      	ldr	r2, [pc, #364]	@ (8007b18 <HAL_GPIO_DeInit+0x1c8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d01f      	beq.n	80079f0 <HAL_GPIO_DeInit+0xa0>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a5a      	ldr	r2, [pc, #360]	@ (8007b1c <HAL_GPIO_DeInit+0x1cc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d019      	beq.n	80079ec <HAL_GPIO_DeInit+0x9c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a59      	ldr	r2, [pc, #356]	@ (8007b20 <HAL_GPIO_DeInit+0x1d0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d013      	beq.n	80079e8 <HAL_GPIO_DeInit+0x98>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a58      	ldr	r2, [pc, #352]	@ (8007b24 <HAL_GPIO_DeInit+0x1d4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00d      	beq.n	80079e4 <HAL_GPIO_DeInit+0x94>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a57      	ldr	r2, [pc, #348]	@ (8007b28 <HAL_GPIO_DeInit+0x1d8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d007      	beq.n	80079e0 <HAL_GPIO_DeInit+0x90>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a56      	ldr	r2, [pc, #344]	@ (8007b2c <HAL_GPIO_DeInit+0x1dc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d101      	bne.n	80079dc <HAL_GPIO_DeInit+0x8c>
 80079d8:	2307      	movs	r3, #7
 80079da:	e00e      	b.n	80079fa <HAL_GPIO_DeInit+0xaa>
 80079dc:	2308      	movs	r3, #8
 80079de:	e00c      	b.n	80079fa <HAL_GPIO_DeInit+0xaa>
 80079e0:	2306      	movs	r3, #6
 80079e2:	e00a      	b.n	80079fa <HAL_GPIO_DeInit+0xaa>
 80079e4:	2305      	movs	r3, #5
 80079e6:	e008      	b.n	80079fa <HAL_GPIO_DeInit+0xaa>
 80079e8:	2304      	movs	r3, #4
 80079ea:	e006      	b.n	80079fa <HAL_GPIO_DeInit+0xaa>
 80079ec:	2303      	movs	r3, #3
 80079ee:	e004      	b.n	80079fa <HAL_GPIO_DeInit+0xaa>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e002      	b.n	80079fa <HAL_GPIO_DeInit+0xaa>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <HAL_GPIO_DeInit+0xaa>
 80079f8:	2300      	movs	r3, #0
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	f002 0203 	and.w	r2, r2, #3
 8007a00:	0092      	lsls	r2, r2, #2
 8007a02:	4093      	lsls	r3, r2
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d132      	bne.n	8007a70 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007a0a:	4b49      	ldr	r3, [pc, #292]	@ (8007b30 <HAL_GPIO_DeInit+0x1e0>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	43db      	mvns	r3, r3
 8007a12:	4947      	ldr	r1, [pc, #284]	@ (8007b30 <HAL_GPIO_DeInit+0x1e0>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007a18:	4b45      	ldr	r3, [pc, #276]	@ (8007b30 <HAL_GPIO_DeInit+0x1e0>)
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	4943      	ldr	r1, [pc, #268]	@ (8007b30 <HAL_GPIO_DeInit+0x1e0>)
 8007a22:	4013      	ands	r3, r2
 8007a24:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007a26:	4b42      	ldr	r3, [pc, #264]	@ (8007b30 <HAL_GPIO_DeInit+0x1e0>)
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	43db      	mvns	r3, r3
 8007a2e:	4940      	ldr	r1, [pc, #256]	@ (8007b30 <HAL_GPIO_DeInit+0x1e0>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007a34:	4b3e      	ldr	r3, [pc, #248]	@ (8007b30 <HAL_GPIO_DeInit+0x1e0>)
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	43db      	mvns	r3, r3
 8007a3c:	493c      	ldr	r1, [pc, #240]	@ (8007b30 <HAL_GPIO_DeInit+0x1e0>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f003 0303 	and.w	r3, r3, #3
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	220f      	movs	r2, #15
 8007a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a50:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007a52:	4a2f      	ldr	r2, [pc, #188]	@ (8007b10 <HAL_GPIO_DeInit+0x1c0>)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	089b      	lsrs	r3, r3, #2
 8007a58:	3302      	adds	r3, #2
 8007a5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	43da      	mvns	r2, r3
 8007a62:	482b      	ldr	r0, [pc, #172]	@ (8007b10 <HAL_GPIO_DeInit+0x1c0>)
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	089b      	lsrs	r3, r3, #2
 8007a68:	400a      	ands	r2, r1
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	2103      	movs	r1, #3
 8007a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	08da      	lsrs	r2, r3, #3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3208      	adds	r2, #8
 8007a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	220f      	movs	r2, #15
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	43db      	mvns	r3, r3
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	08d2      	lsrs	r2, r2, #3
 8007aa4:	4019      	ands	r1, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3208      	adds	r2, #8
 8007aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	2103      	movs	r1, #3
 8007ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8007abc:	43db      	mvns	r3, r3
 8007abe:	401a      	ands	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	2101      	movs	r1, #1
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68da      	ldr	r2, [r3, #12]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	2103      	movs	r1, #3
 8007ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae6:	43db      	mvns	r3, r3
 8007ae8:	401a      	ands	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	3301      	adds	r3, #1
 8007af2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f47f af2f 	bne.w	8007960 <HAL_GPIO_DeInit+0x10>
  }
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	40010000 	.word	0x40010000
 8007b14:	48000400 	.word	0x48000400
 8007b18:	48000800 	.word	0x48000800
 8007b1c:	48000c00 	.word	0x48000c00
 8007b20:	48001000 	.word	0x48001000
 8007b24:	48001400 	.word	0x48001400
 8007b28:	48001800 	.word	0x48001800
 8007b2c:	48001c00 	.word	0x48001c00
 8007b30:	40010400 	.word	0x40010400

08007b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	887b      	ldrh	r3, [r7, #2]
 8007b46:	4013      	ands	r3, r2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
 8007b50:	e001      	b.n	8007b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	807b      	strh	r3, [r7, #2]
 8007b70:	4613      	mov	r3, r2
 8007b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b74:	787b      	ldrb	r3, [r7, #1]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b7a:	887a      	ldrh	r2, [r7, #2]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007b80:	e002      	b.n	8007b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007b82:	887a      	ldrh	r2, [r7, #2]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e08d      	b.n	8007cc2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7fc fe3a 	bl	8004834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2224      	movs	r2, #36	@ 0x24
 8007bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007be4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d107      	bne.n	8007c0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689a      	ldr	r2, [r3, #8]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c0a:	609a      	str	r2, [r3, #8]
 8007c0c:	e006      	b.n	8007c1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007c1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d108      	bne.n	8007c36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c32:	605a      	str	r2, [r3, #4]
 8007c34:	e007      	b.n	8007c46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6812      	ldr	r2, [r2, #0]
 8007c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69d9      	ldr	r1, [r3, #28]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1a      	ldr	r2, [r3, #32]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	@ 0x28
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	460b      	mov	r3, r1
 8007cda:	817b      	strh	r3, [r7, #10]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	f040 80ef 	bne.w	8007ed0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d00:	d101      	bne.n	8007d06 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
 8007d04:	e0e5      	b.n	8007ed2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e0de      	b.n	8007ed2 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2221      	movs	r2, #33	@ 0x21
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2210      	movs	r2, #16
 8007d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	893a      	ldrh	r2, [r7, #8]
 8007d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4a66      	ldr	r2, [pc, #408]	@ (8007edc <HAL_I2C_Master_Transmit_DMA+0x210>)
 8007d42:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4a66      	ldr	r2, [pc, #408]	@ (8007ee0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007d48:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2bff      	cmp	r3, #255	@ 0xff
 8007d52:	d906      	bls.n	8007d62 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	22ff      	movs	r2, #255	@ 0xff
 8007d58:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d5e:	61fb      	str	r3, [r7, #28]
 8007d60:	e007      	b.n	8007d72 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d70:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d01a      	beq.n	8007db0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7e:	781a      	ldrb	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d94:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d074      	beq.n	8007ea2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d022      	beq.n	8007e06 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	4a47      	ldr	r2, [pc, #284]	@ (8007ee4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8007dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	4a46      	ldr	r2, [pc, #280]	@ (8007ee8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007dce:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	2200      	movs	r2, #0
 8007dde:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007df0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007df6:	f7ff fa4d 	bl	8007294 <HAL_DMA_Start_IT>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d13a      	bne.n	8007e7a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007e04:	e013      	b.n	8007e2e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e051      	b.n	8007ed2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	3301      	adds	r3, #1
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	8979      	ldrh	r1, [r7, #10]
 8007e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007eec <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f001 ff91 	bl	8009d68 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007e60:	2110      	movs	r1, #16
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f001 ffb2 	bl	8009dcc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	e028      	b.n	8007ecc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8e:	f043 0210 	orr.w	r2, r3, #16
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e017      	b.n	8007ed2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a12      	ldr	r2, [pc, #72]	@ (8007ef0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007ea6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	8979      	ldrh	r1, [r7, #10]
 8007eae:	4b0f      	ldr	r3, [pc, #60]	@ (8007eec <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f001 ff56 	bl	8009d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f001 ff80 	bl	8009dcc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	e000      	b.n	8007ed2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007ed0:	2302      	movs	r3, #2
  }
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3720      	adds	r7, #32
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	ffff0000 	.word	0xffff0000
 8007ee0:	080088d9 	.word	0x080088d9
 8007ee4:	0800985f 	.word	0x0800985f
 8007ee8:	0800998b 	.word	0x0800998b
 8007eec:	80002000 	.word	0x80002000
 8007ef0:	0800849b 	.word	0x0800849b

08007ef4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	461a      	mov	r2, r3
 8007f00:	460b      	mov	r3, r1
 8007f02:	817b      	strh	r3, [r7, #10]
 8007f04:	4613      	mov	r3, r2
 8007f06:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	f040 80cd 	bne.w	80080b0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f24:	d101      	bne.n	8007f2a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8007f26:	2302      	movs	r3, #2
 8007f28:	e0c3      	b.n	80080b2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_I2C_Master_Receive_DMA+0x44>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e0bc      	b.n	80080b2 <HAL_I2C_Master_Receive_DMA+0x1be>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2222      	movs	r2, #34	@ 0x22
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2210      	movs	r2, #16
 8007f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	893a      	ldrh	r2, [r7, #8]
 8007f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4a55      	ldr	r2, [pc, #340]	@ (80080bc <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8007f66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4a55      	ldr	r2, [pc, #340]	@ (80080c0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8007f6c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2bff      	cmp	r3, #255	@ 0xff
 8007f76:	d906      	bls.n	8007f86 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	22ff      	movs	r2, #255	@ 0xff
 8007f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007f7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e007      	b.n	8007f96 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007f90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f94:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d070      	beq.n	8008080 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d020      	beq.n	8007fe8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007faa:	4a46      	ldr	r2, [pc, #280]	@ (80080c4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8007fac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb2:	4a45      	ldr	r2, [pc, #276]	@ (80080c8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8007fb4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fba:	2200      	movs	r2, #0
 8007fbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3324      	adds	r3, #36	@ 0x24
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fd8:	f7ff f95c 	bl	8007294 <HAL_DMA_Start_IT>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007fe0:	7cfb      	ldrb	r3, [r7, #19]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d138      	bne.n	8008058 <HAL_I2C_Master_Receive_DMA+0x164>
 8007fe6:	e013      	b.n	8008010 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e050      	b.n	80080b2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008014:	b2da      	uxtb	r2, r3
 8008016:	8979      	ldrh	r1, [r7, #10]
 8008018:	4b2c      	ldr	r3, [pc, #176]	@ (80080cc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f001 fea2 	bl	8009d68 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800803e:	2110      	movs	r1, #16
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f001 fec3 	bl	8009dcc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e029      	b.n	80080ac <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806c:	f043 0210 	orr.w	r2, r3, #16
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e018      	b.n	80080b2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a13      	ldr	r2, [pc, #76]	@ (80080d0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8008084:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808a:	b2da      	uxtb	r2, r3
 800808c:	8979      	ldrh	r1, [r7, #10]
 800808e:	4b0f      	ldr	r3, [pc, #60]	@ (80080cc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f001 fe66 	bl	8009d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80080a4:	2102      	movs	r1, #2
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f001 fe90 	bl	8009dcc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	e000      	b.n	80080b2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80080b0:	2302      	movs	r3, #2
  }
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	ffff0000 	.word	0xffff0000
 80080c0:	080088d9 	.word	0x080088d9
 80080c4:	080098f5 	.word	0x080098f5
 80080c8:	0800998b 	.word	0x0800998b
 80080cc:	80002400 	.word	0x80002400
 80080d0:	0800849b 	.word	0x0800849b

080080d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	4608      	mov	r0, r1
 80080de:	4611      	mov	r1, r2
 80080e0:	461a      	mov	r2, r3
 80080e2:	4603      	mov	r3, r0
 80080e4:	817b      	strh	r3, [r7, #10]
 80080e6:	460b      	mov	r3, r1
 80080e8:	813b      	strh	r3, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	f040 80fd 	bne.w	80082f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_I2C_Mem_Read+0x34>
 8008102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008104:	2b00      	cmp	r3, #0
 8008106:	d105      	bne.n	8008114 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800810e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e0f1      	b.n	80082f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_I2C_Mem_Read+0x4e>
 800811e:	2302      	movs	r3, #2
 8008120:	e0ea      	b.n	80082f8 <HAL_I2C_Mem_Read+0x224>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800812a:	f7fd f979 	bl	8005420 <HAL_GetTick>
 800812e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	2319      	movs	r3, #25
 8008136:	2201      	movs	r2, #1
 8008138:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f001 fc59 	bl	80099f4 <I2C_WaitOnFlagUntilTimeout>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e0d5      	b.n	80082f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2222      	movs	r2, #34	@ 0x22
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2240      	movs	r2, #64	@ 0x40
 8008158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a3a      	ldr	r2, [r7, #32]
 8008166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800816c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008174:	88f8      	ldrh	r0, [r7, #6]
 8008176:	893a      	ldrh	r2, [r7, #8]
 8008178:	8979      	ldrh	r1, [r7, #10]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4603      	mov	r3, r0
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fe8f 	bl	8008ea8 <I2C_RequestMemoryRead>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e0ad      	b.n	80082f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2bff      	cmp	r3, #255	@ 0xff
 80081a4:	d90e      	bls.n	80081c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	22ff      	movs	r2, #255	@ 0xff
 80081aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	8979      	ldrh	r1, [r7, #10]
 80081b4:	4b52      	ldr	r3, [pc, #328]	@ (8008300 <HAL_I2C_Mem_Read+0x22c>)
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f001 fdd3 	bl	8009d68 <I2C_TransferConfig>
 80081c2:	e00f      	b.n	80081e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	8979      	ldrh	r1, [r7, #10]
 80081d6:	4b4a      	ldr	r3, [pc, #296]	@ (8008300 <HAL_I2C_Mem_Read+0x22c>)
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f001 fdc2 	bl	8009d68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	2200      	movs	r2, #0
 80081ec:	2104      	movs	r1, #4
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f001 fc00 	bl	80099f4 <I2C_WaitOnFlagUntilTimeout>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e07c      	b.n	80082f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800821a:	3b01      	subs	r3, #1
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008226:	b29b      	uxth	r3, r3
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d034      	beq.n	80082a4 <HAL_I2C_Mem_Read+0x1d0>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800823e:	2b00      	cmp	r3, #0
 8008240:	d130      	bne.n	80082a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	2200      	movs	r2, #0
 800824a:	2180      	movs	r1, #128	@ 0x80
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f001 fbd1 	bl	80099f4 <I2C_WaitOnFlagUntilTimeout>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e04d      	b.n	80082f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008260:	b29b      	uxth	r3, r3
 8008262:	2bff      	cmp	r3, #255	@ 0xff
 8008264:	d90e      	bls.n	8008284 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	22ff      	movs	r2, #255	@ 0xff
 800826a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008270:	b2da      	uxtb	r2, r3
 8008272:	8979      	ldrh	r1, [r7, #10]
 8008274:	2300      	movs	r3, #0
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f001 fd73 	bl	8009d68 <I2C_TransferConfig>
 8008282:	e00f      	b.n	80082a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008288:	b29a      	uxth	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008292:	b2da      	uxtb	r2, r3
 8008294:	8979      	ldrh	r1, [r7, #10]
 8008296:	2300      	movs	r3, #0
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f001 fd62 	bl	8009d68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d19a      	bne.n	80081e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f001 fc34 	bl	8009b20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e01a      	b.n	80082f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2220      	movs	r2, #32
 80082c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6859      	ldr	r1, [r3, #4]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008304 <HAL_I2C_Mem_Read+0x230>)
 80082d6:	400b      	ands	r3, r1
 80082d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2220      	movs	r2, #32
 80082de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e000      	b.n	80082f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80082f6:	2302      	movs	r3, #2
  }
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	80002400 	.word	0x80002400
 8008304:	fe00e800 	.word	0xfe00e800

08008308 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	68f9      	ldr	r1, [r7, #12]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	4798      	blx	r3
  }
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836c:	f043 0201 	orr.w	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800837c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00f      	beq.n	80083a8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008396:	f043 0208 	orr.w	r2, r3, #8
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80083a6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00f      	beq.n	80083d2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c0:	f043 0202 	orr.w	r2, r3, #2
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083d0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f003 030b 	and.w	r3, r3, #11
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 f8ff 	bl	80095e8 <I2C_ITError>
  }
}
 80083ea:	bf00      	nop
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
 8008426:	4613      	mov	r3, r2
 8008428:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b088      	sub	sp, #32
 800849e:	af02      	add	r7, sp, #8
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <I2C_Master_ISR_IT+0x1e>
 80084b4:	2302      	movs	r3, #2
 80084b6:	e113      	b.n	80086e0 <I2C_Master_ISR_IT+0x246>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d012      	beq.n	80084f0 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00d      	beq.n	80084f0 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2210      	movs	r2, #16
 80084da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e0:	f043 0204 	orr.w	r2, r3, #4
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f001 f994 	bl	8009816 <I2C_Flush_TXDR>
 80084ee:	e0e4      	b.n	80086ba <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d022      	beq.n	8008540 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01d      	beq.n	8008540 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f023 0304 	bic.w	r3, r3, #4
 800850a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800853e:	e0bc      	b.n	80086ba <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d128      	bne.n	800859c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008550:	2b00      	cmp	r3, #0
 8008552:	d023      	beq.n	800859c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01e      	beq.n	800859c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80a8 	beq.w	80086ba <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856e:	781a      	ldrb	r2, [r3, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008584:	3b01      	subs	r3, #1
 8008586:	b29a      	uxth	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800859a:	e08e      	b.n	80086ba <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d05c      	beq.n	8008660 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d057      	beq.n	8008660 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d040      	beq.n	800863c <I2C_Master_ISR_IT+0x1a2>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d13c      	bne.n	800863c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ce:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2bff      	cmp	r3, #255	@ 0xff
 80085d8:	d90e      	bls.n	80085f8 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	22ff      	movs	r2, #255	@ 0xff
 80085de:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	8a79      	ldrh	r1, [r7, #18]
 80085e8:	2300      	movs	r3, #0
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f001 fbb9 	bl	8009d68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085f6:	e032      	b.n	800865e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008606:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800860a:	d00b      	beq.n	8008624 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008610:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008616:	8a79      	ldrh	r1, [r7, #18]
 8008618:	2000      	movs	r0, #0
 800861a:	9000      	str	r0, [sp, #0]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f001 fba3 	bl	8009d68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008622:	e01c      	b.n	800865e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008628:	b2da      	uxtb	r2, r3
 800862a:	8a79      	ldrh	r1, [r7, #18]
 800862c:	2300      	movs	r3, #0
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f001 fb97 	bl	8009d68 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800863a:	e010      	b.n	800865e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800864a:	d003      	beq.n	8008654 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 fd03 	bl	8009058 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008652:	e032      	b.n	80086ba <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008654:	2140      	movs	r1, #64	@ 0x40
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 ffc6 	bl	80095e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800865c:	e02d      	b.n	80086ba <I2C_Master_ISR_IT+0x220>
 800865e:	e02c      	b.n	80086ba <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d027      	beq.n	80086ba <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008670:	2b00      	cmp	r3, #0
 8008672:	d022      	beq.n	80086ba <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d119      	bne.n	80086b2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008688:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800868c:	d015      	beq.n	80086ba <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008692:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008696:	d108      	bne.n	80086aa <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086a6:	605a      	str	r2, [r3, #4]
 80086a8:	e007      	b.n	80086ba <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 fcd4 	bl	8009058 <I2C_ITMasterSeqCplt>
 80086b0:	e003      	b.n	80086ba <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80086b2:	2140      	movs	r1, #64	@ 0x40
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 ff97 	bl	80095e8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f003 0320 	and.w	r3, r3, #32
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d008      	beq.n	80086d6 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80086ce:	6979      	ldr	r1, [r7, #20]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fd5b 	bl	800918c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <I2C_Slave_ISR_IT+0x24>
 8008708:	2302      	movs	r3, #2
 800870a:	e0e1      	b.n	80088d0 <I2C_Slave_ISR_IT+0x1e8>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d008      	beq.n	8008730 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008728:	6939      	ldr	r1, [r7, #16]
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fdf6 	bl	800931c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f003 0310 	and.w	r3, r3, #16
 8008736:	2b00      	cmp	r3, #0
 8008738:	d04b      	beq.n	80087d2 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008740:	2b00      	cmp	r3, #0
 8008742:	d046      	beq.n	80087d2 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008748:	b29b      	uxth	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d128      	bne.n	80087a0 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b28      	cmp	r3, #40	@ 0x28
 8008758:	d108      	bne.n	800876c <I2C_Slave_ISR_IT+0x84>
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008760:	d104      	bne.n	800876c <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008762:	6939      	ldr	r1, [r7, #16]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 feeb 	bl	8009540 <I2C_ITListenCplt>
 800876a:	e031      	b.n	80087d0 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b29      	cmp	r3, #41	@ 0x29
 8008776:	d10e      	bne.n	8008796 <I2C_Slave_ISR_IT+0xae>
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800877e:	d00a      	beq.n	8008796 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2210      	movs	r2, #16
 8008786:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f001 f844 	bl	8009816 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 fc9f 	bl	80090d2 <I2C_ITSlaveSeqCplt>
 8008794:	e01c      	b.n	80087d0 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2210      	movs	r2, #16
 800879c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800879e:	e08f      	b.n	80088c0 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2210      	movs	r2, #16
 80087a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ac:	f043 0204 	orr.w	r2, r3, #4
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <I2C_Slave_ISR_IT+0xda>
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087c0:	d17e      	bne.n	80088c0 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c6:	4619      	mov	r1, r3
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 ff0d 	bl	80095e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80087ce:	e077      	b.n	80088c0 <I2C_Slave_ISR_IT+0x1d8>
 80087d0:	e076      	b.n	80088c0 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d02f      	beq.n	800883c <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d02a      	beq.n	800883c <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d018      	beq.n	8008822 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	b2d2      	uxtb	r2, r2
 80087fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800880c:	3b01      	subs	r3, #1
 800880e:	b29a      	uxth	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008818:	b29b      	uxth	r3, r3
 800881a:	3b01      	subs	r3, #1
 800881c:	b29a      	uxth	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d14b      	bne.n	80088c4 <I2C_Slave_ISR_IT+0x1dc>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008832:	d047      	beq.n	80088c4 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 fc4c 	bl	80090d2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800883a:	e043      	b.n	80088c4 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008850:	6939      	ldr	r1, [r7, #16]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 fb7c 	bl	8008f50 <I2C_ITAddrCplt>
 8008858:	e035      	b.n	80088c6 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d030      	beq.n	80088c6 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800886a:	2b00      	cmp	r3, #0
 800886c:	d02b      	beq.n	80088c6 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	d018      	beq.n	80088aa <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887c:	781a      	ldrb	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008892:	b29b      	uxth	r3, r3
 8008894:	3b01      	subs	r3, #1
 8008896:	b29a      	uxth	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80088a8:	e00d      	b.n	80088c6 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088b0:	d002      	beq.n	80088b8 <I2C_Slave_ISR_IT+0x1d0>
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d106      	bne.n	80088c6 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 fc0a 	bl	80090d2 <I2C_ITSlaveSeqCplt>
 80088be:	e002      	b.n	80088c6 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80088c0:	bf00      	nop
 80088c2:	e000      	b.n	80088c6 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80088c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af02      	add	r7, sp, #8
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <I2C_Master_ISR_DMA+0x1a>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e0d9      	b.n	8008aa6 <I2C_Master_ISR_DMA+0x1ce>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f003 0310 	and.w	r3, r3, #16
 8008900:	2b00      	cmp	r3, #0
 8008902:	d016      	beq.n	8008932 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800890a:	2b00      	cmp	r3, #0
 800890c:	d011      	beq.n	8008932 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2210      	movs	r2, #16
 8008914:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891a:	f043 0204 	orr.w	r2, r3, #4
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008922:	2120      	movs	r1, #32
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f001 fa51 	bl	8009dcc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 ff73 	bl	8009816 <I2C_Flush_TXDR>
 8008930:	e0b4      	b.n	8008a9c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008938:	2b00      	cmp	r3, #0
 800893a:	d071      	beq.n	8008a20 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008942:	2b00      	cmp	r3, #0
 8008944:	d06c      	beq.n	8008a20 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008954:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d04e      	beq.n	80089fe <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	b29b      	uxth	r3, r3
 8008968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800896c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008972:	b29b      	uxth	r3, r3
 8008974:	2bff      	cmp	r3, #255	@ 0xff
 8008976:	d906      	bls.n	8008986 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	22ff      	movs	r2, #255	@ 0xff
 800897c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800897e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	e010      	b.n	80089a8 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800898a:	b29a      	uxth	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008998:	d003      	beq.n	80089a2 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e002      	b.n	80089a8 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80089a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089a6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	8a79      	ldrh	r1, [r7, #18]
 80089b0:	2300      	movs	r3, #0
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f001 f9d6 	bl	8009d68 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b22      	cmp	r3, #34	@ 0x22
 80089d8:	d108      	bne.n	80089ec <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80089ea:	e057      	b.n	8008a9c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80089fc:	e04e      	b.n	8008a9c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a0c:	d003      	beq.n	8008a16 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 fb22 	bl	8009058 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008a14:	e042      	b.n	8008a9c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a16:	2140      	movs	r1, #64	@ 0x40
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fde5 	bl	80095e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008a1e:	e03d      	b.n	8008a9c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d028      	beq.n	8008a7c <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d023      	beq.n	8008a7c <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d119      	bne.n	8008a72 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a4c:	d025      	beq.n	8008a9a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a56:	d108      	bne.n	8008a6a <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a66:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008a68:	e017      	b.n	8008a9a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 faf4 	bl	8009058 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008a70:	e013      	b.n	8008a9a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a72:	2140      	movs	r1, #64	@ 0x40
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 fdb7 	bl	80095e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008a7a:	e00e      	b.n	8008a9a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d005      	beq.n	8008a9c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fb7a 	bl	800918c <I2C_ITMasterCplt>
 8008a98:	e000      	b.n	8008a9c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8008a9a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008abc:	4b8d      	ldr	r3, [pc, #564]	@ (8008cf4 <I2C_Mem_ISR_DMA+0x244>)
 8008abe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <I2C_Mem_ISR_DMA+0x1e>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e10e      	b.n	8008cec <I2C_Mem_ISR_DMA+0x23c>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d016      	beq.n	8008b0e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2210      	movs	r2, #16
 8008af0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af6:	f043 0204 	orr.w	r2, r3, #4
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008afe:	2120      	movs	r1, #32
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f001 f963 	bl	8009dcc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fe85 	bl	8009816 <I2C_Flush_TXDR>
 8008b0c:	e0e9      	b.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00e      	beq.n	8008b36 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d009      	beq.n	8008b36 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b32:	651a      	str	r2, [r3, #80]	@ 0x50
 8008b34:	e0d5      	b.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d05f      	beq.n	8008c00 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d05a      	beq.n	8008c00 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f001 f9c1 	bl	8009ed4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008b52:	2110      	movs	r1, #16
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f001 f939 	bl	8009dcc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d048      	beq.n	8008bf6 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2bff      	cmp	r3, #255	@ 0xff
 8008b6c:	d910      	bls.n	8008b90 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	22ff      	movs	r2, #255	@ 0xff
 8008b72:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b78:	b299      	uxth	r1, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	2300      	movs	r3, #0
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f001 f8ed 	bl	8009d68 <I2C_TransferConfig>
 8008b8e:	e011      	b.n	8008bb4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b9e:	b299      	uxth	r1, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f001 f8da 	bl	8009d68 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b22      	cmp	r3, #34	@ 0x22
 8008bd0:	d108      	bne.n	8008be4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008be0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008be2:	e07e      	b.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bf2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008bf4:	e075      	b.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008bf6:	2140      	movs	r1, #64	@ 0x40
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fcf5 	bl	80095e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008bfe:	e070      	b.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d05d      	beq.n	8008cc6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d058      	beq.n	8008cc6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c14:	2101      	movs	r1, #1
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f001 f95c 	bl	8009ed4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008c1c:	2110      	movs	r1, #16
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f001 f8d4 	bl	8009dcc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b22      	cmp	r3, #34	@ 0x22
 8008c2e:	d101      	bne.n	8008c34 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8008c30:	4b31      	ldr	r3, [pc, #196]	@ (8008cf8 <I2C_Mem_ISR_DMA+0x248>)
 8008c32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2bff      	cmp	r3, #255	@ 0xff
 8008c3c:	d910      	bls.n	8008c60 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	22ff      	movs	r2, #255	@ 0xff
 8008c42:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c48:	b299      	uxth	r1, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f001 f885 	bl	8009d68 <I2C_TransferConfig>
 8008c5e:	e011      	b.n	8008c84 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c6e:	b299      	uxth	r1, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f001 f872 	bl	8009d68 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b22      	cmp	r3, #34	@ 0x22
 8008ca0:	d108      	bne.n	8008cb4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cb0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cb2:	e016      	b.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cc2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cc4:	e00d      	b.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d008      	beq.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 fa55 	bl	800918c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	80002000 	.word	0x80002000
 8008cf8:	80002400 	.word	0x80002400

08008cfc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d101      	bne.n	8008d20 <I2C_Slave_ISR_DMA+0x24>
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	e0bf      	b.n	8008ea0 <I2C_Slave_ISR_DMA+0x1a4>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d008      	beq.n	8008d44 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008d3c:	68b9      	ldr	r1, [r7, #8]
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 faec 	bl	800931c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f003 0310 	and.w	r3, r3, #16
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8095 	beq.w	8008e7a <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 808f 	beq.w	8008e7a <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d07d      	beq.n	8008e6c <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00c      	beq.n	8008d92 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00c      	beq.n	8008db4 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8008db0:	2301      	movs	r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d128      	bne.n	8008e0c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b28      	cmp	r3, #40	@ 0x28
 8008dc4:	d108      	bne.n	8008dd8 <I2C_Slave_ISR_DMA+0xdc>
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dcc:	d104      	bne.n	8008dd8 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 fbb5 	bl	8009540 <I2C_ITListenCplt>
 8008dd6:	e048      	b.n	8008e6a <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b29      	cmp	r3, #41	@ 0x29
 8008de2:	d10e      	bne.n	8008e02 <I2C_Slave_ISR_DMA+0x106>
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008dea:	d00a      	beq.n	8008e02 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2210      	movs	r2, #16
 8008df2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 fd0e 	bl	8009816 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 f969 	bl	80090d2 <I2C_ITSlaveSeqCplt>
 8008e00:	e033      	b.n	8008e6a <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2210      	movs	r2, #16
 8008e08:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008e0a:	e034      	b.n	8008e76 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2210      	movs	r2, #16
 8008e12:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e18:	f043 0204 	orr.w	r2, r3, #4
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e26:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <I2C_Slave_ISR_DMA+0x13a>
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e34:	d11f      	bne.n	8008e76 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	2b21      	cmp	r3, #33	@ 0x21
 8008e3a:	d002      	beq.n	8008e42 <I2C_Slave_ISR_DMA+0x146>
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b29      	cmp	r3, #41	@ 0x29
 8008e40:	d103      	bne.n	8008e4a <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2221      	movs	r2, #33	@ 0x21
 8008e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e48:	e008      	b.n	8008e5c <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	2b22      	cmp	r3, #34	@ 0x22
 8008e4e:	d002      	beq.n	8008e56 <I2C_Slave_ISR_DMA+0x15a>
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e54:	d102      	bne.n	8008e5c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2222      	movs	r2, #34	@ 0x22
 8008e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e60:	4619      	mov	r1, r3
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fbc0 	bl	80095e8 <I2C_ITError>
      if (treatdmanack == 1U)
 8008e68:	e005      	b.n	8008e76 <I2C_Slave_ISR_DMA+0x17a>
 8008e6a:	e004      	b.n	8008e76 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2210      	movs	r2, #16
 8008e72:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e74:	e00f      	b.n	8008e96 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8008e76:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e78:	e00d      	b.n	8008e96 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008e8e:	68b9      	ldr	r1, [r7, #8]
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 f85d 	bl	8008f50 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	4608      	mov	r0, r1
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	817b      	strh	r3, [r7, #10]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	813b      	strh	r3, [r7, #8]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	8979      	ldrh	r1, [r7, #10]
 8008ec8:	4b20      	ldr	r3, [pc, #128]	@ (8008f4c <I2C_RequestMemoryRead+0xa4>)
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 ff4a 	bl	8009d68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ed4:	69fa      	ldr	r2, [r7, #28]
 8008ed6:	69b9      	ldr	r1, [r7, #24]
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 fdda 	bl	8009a92 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e02c      	b.n	8008f42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d105      	bne.n	8008efa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008eee:	893b      	ldrh	r3, [r7, #8]
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ef8:	e015      	b.n	8008f26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008efa:	893b      	ldrh	r3, [r7, #8]
 8008efc:	0a1b      	lsrs	r3, r3, #8
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	69b9      	ldr	r1, [r7, #24]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fdc0 	bl	8009a92 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e012      	b.n	8008f42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f1c:	893b      	ldrh	r3, [r7, #8]
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2140      	movs	r1, #64	@ 0x40
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 fd5f 	bl	80099f4 <I2C_WaitOnFlagUntilTimeout>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e000      	b.n	8008f42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	80002000 	.word	0x80002000

08008f50 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f66:	2b28      	cmp	r3, #40	@ 0x28
 8008f68:	d16a      	bne.n	8009040 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	0c1b      	lsrs	r3, r3, #16
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	0c1b      	lsrs	r3, r3, #16
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008f88:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f96:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008fa4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d138      	bne.n	8009020 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008fae:	897b      	ldrh	r3, [r7, #10]
 8008fb0:	09db      	lsrs	r3, r3, #7
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	89bb      	ldrh	r3, [r7, #12]
 8008fb6:	4053      	eors	r3, r2
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	f003 0306 	and.w	r3, r3, #6
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d11c      	bne.n	8008ffc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008fc2:	897b      	ldrh	r3, [r7, #10]
 8008fc4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d13b      	bne.n	8009050 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2208      	movs	r2, #8
 8008fe4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008fee:	89ba      	ldrh	r2, [r7, #12]
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fa10 	bl	800841a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ffa:	e029      	b.n	8009050 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008ffc:	893b      	ldrh	r3, [r7, #8]
 8008ffe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009000:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 ff65 	bl	8009ed4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009012:	89ba      	ldrh	r2, [r7, #12]
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff f9fe 	bl	800841a <HAL_I2C_AddrCallback>
}
 800901e:	e017      	b.n	8009050 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009020:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 ff55 	bl	8009ed4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009032:	89ba      	ldrh	r2, [r7, #12]
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff f9ee 	bl	800841a <HAL_I2C_AddrCallback>
}
 800903e:	e007      	b.n	8009050 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2208      	movs	r2, #8
 8009046:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009050:	bf00      	nop
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b21      	cmp	r3, #33	@ 0x21
 8009072:	d115      	bne.n	80090a0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2211      	movs	r2, #17
 8009080:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009088:	2101      	movs	r1, #1
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 ff22 	bl	8009ed4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7fb fab3 	bl	8004604 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800909e:	e014      	b.n	80090ca <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2212      	movs	r2, #18
 80090ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80090b4:	2102      	movs	r1, #2
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 ff0c 	bl	8009ed4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7fb faad 	bl	8004624 <HAL_I2C_MasterRxCpltCallback>
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d008      	beq.n	8009106 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e00c      	b.n	8009120 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800911e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b29      	cmp	r3, #41	@ 0x29
 800912a:	d112      	bne.n	8009152 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2228      	movs	r2, #40	@ 0x28
 8009130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2221      	movs	r2, #33	@ 0x21
 8009138:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800913a:	2101      	movs	r1, #1
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fec9 	bl	8009ed4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff f951 	bl	80083f2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009150:	e017      	b.n	8009182 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b2a      	cmp	r3, #42	@ 0x2a
 800915c:	d111      	bne.n	8009182 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2228      	movs	r2, #40	@ 0x28
 8009162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2222      	movs	r2, #34	@ 0x22
 800916a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800916c:	2102      	movs	r1, #2
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 feb0 	bl	8009ed4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff f942 	bl	8008406 <HAL_I2C_SlaveRxCpltCallback>
}
 8009182:	bf00      	nop
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2220      	movs	r2, #32
 80091a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b21      	cmp	r3, #33	@ 0x21
 80091ac:	d107      	bne.n	80091be <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80091ae:	2101      	movs	r1, #1
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fe8f 	bl	8009ed4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2211      	movs	r2, #17
 80091ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80091bc:	e00c      	b.n	80091d8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b22      	cmp	r3, #34	@ 0x22
 80091c8:	d106      	bne.n	80091d8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80091ca:	2102      	movs	r1, #2
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fe81 	bl	8009ed4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2212      	movs	r2, #18
 80091d6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6859      	ldr	r1, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4b4c      	ldr	r3, [pc, #304]	@ (8009314 <I2C_ITMasterCplt+0x188>)
 80091e4:	400b      	ands	r3, r1
 80091e6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a49      	ldr	r2, [pc, #292]	@ (8009318 <I2C_ITMasterCplt+0x18c>)
 80091f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f003 0310 	and.w	r3, r3, #16
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2210      	movs	r2, #16
 8009204:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800920a:	f043 0204 	orr.w	r2, r3, #4
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b60      	cmp	r3, #96	@ 0x60
 800921c:	d10a      	bne.n	8009234 <I2C_ITMasterCplt+0xa8>
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d005      	beq.n	8009234 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800922e:	b2db      	uxtb	r3, r3
 8009230:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009232:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 faee 	bl	8009816 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800923e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b60      	cmp	r3, #96	@ 0x60
 800924a:	d002      	beq.n	8009252 <I2C_ITMasterCplt+0xc6>
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d006      	beq.n	8009260 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f9c5 	bl	80095e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800925e:	e054      	b.n	800930a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b21      	cmp	r3, #33	@ 0x21
 800926a:	d124      	bne.n	80092b6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b40      	cmp	r3, #64	@ 0x40
 8009284:	d10b      	bne.n	800929e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff f8d7 	bl	800844a <HAL_I2C_MemTxCpltCallback>
}
 800929c:	e035      	b.n	800930a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7fb f9a8 	bl	8004604 <HAL_I2C_MasterTxCpltCallback>
}
 80092b4:	e029      	b.n	800930a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b22      	cmp	r3, #34	@ 0x22
 80092c0:	d123      	bne.n	800930a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b40      	cmp	r3, #64	@ 0x40
 80092da:	d10b      	bne.n	80092f4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff f8b6 	bl	800845e <HAL_I2C_MemRxCpltCallback>
}
 80092f2:	e00a      	b.n	800930a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7fb f98d 	bl	8004624 <HAL_I2C_MasterRxCpltCallback>
}
 800930a:	bf00      	nop
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	fe00e800 	.word	0xfe00e800
 8009318:	ffff0000 	.word	0xffff0000

0800931c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009338:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2220      	movs	r2, #32
 8009340:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	2b21      	cmp	r3, #33	@ 0x21
 8009346:	d002      	beq.n	800934e <I2C_ITSlaveCplt+0x32>
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	2b29      	cmp	r3, #41	@ 0x29
 800934c:	d108      	bne.n	8009360 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800934e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fdbe 	bl	8009ed4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2221      	movs	r2, #33	@ 0x21
 800935c:	631a      	str	r2, [r3, #48]	@ 0x30
 800935e:	e019      	b.n	8009394 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	2b22      	cmp	r3, #34	@ 0x22
 8009364:	d002      	beq.n	800936c <I2C_ITSlaveCplt+0x50>
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b2a      	cmp	r3, #42	@ 0x2a
 800936a:	d108      	bne.n	800937e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800936c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fdaf 	bl	8009ed4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2222      	movs	r2, #34	@ 0x22
 800937a:	631a      	str	r2, [r3, #48]	@ 0x30
 800937c:	e00a      	b.n	8009394 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	2b28      	cmp	r3, #40	@ 0x28
 8009382:	d107      	bne.n	8009394 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009384:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fda3 	bl	8009ed4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093a2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6859      	ldr	r1, [r3, #4]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4b62      	ldr	r3, [pc, #392]	@ (8009538 <I2C_ITSlaveCplt+0x21c>)
 80093b0:	400b      	ands	r3, r1
 80093b2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fa2e 	bl	8009816 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d013      	beq.n	80093ec <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01f      	beq.n	800941c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093ea:	e017      	b.n	800941c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d012      	beq.n	800941c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009404:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d006      	beq.n	800941c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	b29a      	uxth	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d020      	beq.n	8009468 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f023 0304 	bic.w	r3, r3, #4
 800942c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009438:	b2d2      	uxtb	r2, r2
 800943a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00c      	beq.n	8009468 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009452:	3b01      	subs	r3, #1
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800945e:	b29b      	uxth	r3, r3
 8009460:	3b01      	subs	r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d005      	beq.n	800947e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009476:	f043 0204 	orr.w	r2, r3, #4
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009490:	2b00      	cmp	r3, #0
 8009492:	d010      	beq.n	80094b6 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8a4 	bl	80095e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b28      	cmp	r3, #40	@ 0x28
 80094aa:	d141      	bne.n	8009530 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80094ac:	6979      	ldr	r1, [r7, #20]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f846 	bl	8009540 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094b4:	e03c      	b.n	8009530 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80094be:	d014      	beq.n	80094ea <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff fe06 	bl	80090d2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1c      	ldr	r2, [pc, #112]	@ (800953c <I2C_ITSlaveCplt+0x220>)
 80094ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2220      	movs	r2, #32
 80094d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7fe ffa7 	bl	8008436 <HAL_I2C_ListenCpltCallback>
}
 80094e8:	e022      	b.n	8009530 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b22      	cmp	r3, #34	@ 0x22
 80094f4:	d10e      	bne.n	8009514 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7fe ff7a 	bl	8008406 <HAL_I2C_SlaveRxCpltCallback>
}
 8009512:	e00d      	b.n	8009530 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2220      	movs	r2, #32
 8009518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7fe ff61 	bl	80083f2 <HAL_I2C_SlaveTxCpltCallback>
}
 8009530:	bf00      	nop
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	fe00e800 	.word	0xfe00e800
 800953c:	ffff0000 	.word	0xffff0000

08009540 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a25      	ldr	r2, [pc, #148]	@ (80095e4 <I2C_ITListenCplt+0xa4>)
 800954e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d022      	beq.n	80095bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009580:	b2d2      	uxtb	r2, r2
 8009582:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009592:	2b00      	cmp	r3, #0
 8009594:	d012      	beq.n	80095bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800959a:	3b01      	subs	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	3b01      	subs	r3, #1
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b4:	f043 0204 	orr.w	r2, r3, #4
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80095bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fc87 	bl	8009ed4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2210      	movs	r2, #16
 80095cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7fe ff2d 	bl	8008436 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	ffff0000 	.word	0xffff0000

080095e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a6d      	ldr	r2, [pc, #436]	@ (80097bc <I2C_ITError+0x1d4>)
 8009606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b28      	cmp	r3, #40	@ 0x28
 800961e:	d005      	beq.n	800962c <I2C_ITError+0x44>
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	2b29      	cmp	r3, #41	@ 0x29
 8009624:	d002      	beq.n	800962c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	2b2a      	cmp	r3, #42	@ 0x2a
 800962a:	d10b      	bne.n	8009644 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800962c:	2103      	movs	r1, #3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fc50 	bl	8009ed4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2228      	movs	r2, #40	@ 0x28
 8009638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a60      	ldr	r2, [pc, #384]	@ (80097c0 <I2C_ITError+0x1d8>)
 8009640:	635a      	str	r2, [r3, #52]	@ 0x34
 8009642:	e030      	b.n	80096a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009644:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fc43 	bl	8009ed4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f8e1 	bl	8009816 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b60      	cmp	r3, #96	@ 0x60
 800965e:	d01f      	beq.n	80096a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b20      	cmp	r3, #32
 8009674:	d114      	bne.n	80096a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b10      	cmp	r3, #16
 8009682:	d109      	bne.n	8009698 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2210      	movs	r2, #16
 800968a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009690:	f043 0204 	orr.w	r2, r3, #4
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2220      	movs	r2, #32
 800969e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d039      	beq.n	8009728 <I2C_ITError+0x140>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b11      	cmp	r3, #17
 80096b8:	d002      	beq.n	80096c0 <I2C_ITError+0xd8>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b21      	cmp	r3, #33	@ 0x21
 80096be:	d133      	bne.n	8009728 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096ce:	d107      	bne.n	80096e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80096de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fd ff63 	bl	80075b0 <HAL_DMA_GetState>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d017      	beq.n	8009720 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f4:	4a33      	ldr	r2, [pc, #204]	@ (80097c4 <I2C_ITError+0x1dc>)
 80096f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009704:	4618      	mov	r0, r3
 8009706:	f7fd fe63 	bl	80073d0 <HAL_DMA_Abort_IT>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d04d      	beq.n	80097ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800971a:	4610      	mov	r0, r2
 800971c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800971e:	e045      	b.n	80097ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f851 	bl	80097c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009726:	e041      	b.n	80097ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d039      	beq.n	80097a4 <I2C_ITError+0x1bc>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b12      	cmp	r3, #18
 8009734:	d002      	beq.n	800973c <I2C_ITError+0x154>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b22      	cmp	r3, #34	@ 0x22
 800973a:	d133      	bne.n	80097a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800974a:	d107      	bne.n	800975c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800975a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009760:	4618      	mov	r0, r3
 8009762:	f7fd ff25 	bl	80075b0 <HAL_DMA_GetState>
 8009766:	4603      	mov	r3, r0
 8009768:	2b01      	cmp	r3, #1
 800976a:	d017      	beq.n	800979c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009770:	4a14      	ldr	r2, [pc, #80]	@ (80097c4 <I2C_ITError+0x1dc>)
 8009772:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009780:	4618      	mov	r0, r3
 8009782:	f7fd fe25 	bl	80073d0 <HAL_DMA_Abort_IT>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d011      	beq.n	80097b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009796:	4610      	mov	r0, r2
 8009798:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800979a:	e009      	b.n	80097b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f813 	bl	80097c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097a2:	e005      	b.n	80097b0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f80f 	bl	80097c8 <I2C_TreatErrorCallback>
  }
}
 80097aa:	e002      	b.n	80097b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097ac:	bf00      	nop
 80097ae:	e000      	b.n	80097b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097b0:	bf00      	nop
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	ffff0000 	.word	0xffff0000
 80097c0:	080086e9 	.word	0x080086e9
 80097c4:	080099b9 	.word	0x080099b9

080097c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b60      	cmp	r3, #96	@ 0x60
 80097da:	d10e      	bne.n	80097fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7fe fe47 	bl	8008486 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80097f8:	e009      	b.n	800980e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7fe fe32 	bl	8008472 <HAL_I2C_ErrorCallback>
}
 800980e:	bf00      	nop
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	2b02      	cmp	r3, #2
 800982a:	d103      	bne.n	8009834 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2200      	movs	r2, #0
 8009832:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b01      	cmp	r3, #1
 8009840:	d007      	beq.n	8009852 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	699a      	ldr	r2, [r3, #24]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f042 0201 	orr.w	r2, r2, #1
 8009850:	619a      	str	r2, [r3, #24]
  }
}
 8009852:	bf00      	nop
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800987a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009880:	b29b      	uxth	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d104      	bne.n	8009890 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009886:	2120      	movs	r1, #32
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 fa9f 	bl	8009dcc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800988e:	e02d      	b.n	80098ec <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009898:	441a      	add	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2bff      	cmp	r3, #255	@ 0xff
 80098a6:	d903      	bls.n	80098b0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	22ff      	movs	r2, #255	@ 0xff
 80098ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80098ae:	e004      	b.n	80098ba <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c2:	4619      	mov	r1, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3328      	adds	r3, #40	@ 0x28
 80098ca:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80098d0:	f7fd fce0 	bl	8007294 <HAL_DMA_Start_IT>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80098da:	2110      	movs	r1, #16
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7ff fe83 	bl	80095e8 <I2C_ITError>
}
 80098e2:	e003      	b.n	80098ec <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80098e4:	2140      	movs	r1, #64	@ 0x40
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 fa70 	bl	8009dcc <I2C_Enable_IRQ>
}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009910:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009916:	b29b      	uxth	r3, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800991c:	2120      	movs	r1, #32
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 fa54 	bl	8009dcc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009924:	e02d      	b.n	8009982 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800992e:	441a      	add	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009938:	b29b      	uxth	r3, r3
 800993a:	2bff      	cmp	r3, #255	@ 0xff
 800993c:	d903      	bls.n	8009946 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	22ff      	movs	r2, #255	@ 0xff
 8009942:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009944:	e004      	b.n	8009950 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800994a:	b29a      	uxth	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3324      	adds	r3, #36	@ 0x24
 800995a:	4619      	mov	r1, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009960:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009966:	f7fd fc95 	bl	8007294 <HAL_DMA_Start_IT>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d004      	beq.n	800997a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009970:	2110      	movs	r1, #16
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f7ff fe38 	bl	80095e8 <I2C_ITError>
}
 8009978:	e003      	b.n	8009982 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800997a:	2140      	movs	r1, #64	@ 0x40
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fa25 	bl	8009dcc <I2C_Enable_IRQ>
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009996:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099a6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80099a8:	2110      	movs	r1, #16
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fe1c 	bl	80095e8 <I2C_ITError>
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d2:	2200      	movs	r2, #0
 80099d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e2:	2200      	movs	r2, #0
 80099e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff feee 	bl	80097c8 <I2C_TreatErrorCallback>
}
 80099ec:	bf00      	nop
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	4613      	mov	r3, r2
 8009a02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a04:	e031      	b.n	8009a6a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0c:	d02d      	beq.n	8009a6a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a0e:	f7fb fd07 	bl	8005420 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d302      	bcc.n	8009a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d122      	bne.n	8009a6a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	699a      	ldr	r2, [r3, #24]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	bf0c      	ite	eq
 8009a34:	2301      	moveq	r3, #1
 8009a36:	2300      	movne	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d113      	bne.n	8009a6a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a46:	f043 0220 	orr.w	r2, r3, #32
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e00f      	b.n	8009a8a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	699a      	ldr	r2, [r3, #24]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4013      	ands	r3, r2
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	bf0c      	ite	eq
 8009a7a:	2301      	moveq	r3, #1
 8009a7c:	2300      	movne	r3, #0
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	461a      	mov	r2, r3
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d0be      	beq.n	8009a06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a9e:	e033      	b.n	8009b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	68b9      	ldr	r1, [r7, #8]
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 f87f 	bl	8009ba8 <I2C_IsErrorOccurred>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e031      	b.n	8009b18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aba:	d025      	beq.n	8009b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009abc:	f7fb fcb0 	bl	8005420 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d302      	bcc.n	8009ad2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d11a      	bne.n	8009b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d013      	beq.n	8009b08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae4:	f043 0220 	orr.w	r2, r3, #32
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2220      	movs	r2, #32
 8009af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e007      	b.n	8009b18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d1c4      	bne.n	8009aa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b2c:	e02f      	b.n	8009b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	68b9      	ldr	r1, [r7, #8]
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 f838 	bl	8009ba8 <I2C_IsErrorOccurred>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e02d      	b.n	8009b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b42:	f7fb fc6d 	bl	8005420 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d302      	bcc.n	8009b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11a      	bne.n	8009b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b20      	cmp	r3, #32
 8009b64:	d013      	beq.n	8009b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b6a:	f043 0220 	orr.w	r2, r3, #32
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e007      	b.n	8009b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	2b20      	cmp	r3, #32
 8009b9a:	d1c8      	bne.n	8009b2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	@ 0x28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	f003 0310 	and.w	r3, r3, #16
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d068      	beq.n	8009ca6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2210      	movs	r2, #16
 8009bda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009bdc:	e049      	b.n	8009c72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d045      	beq.n	8009c72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009be6:	f7fb fc1b 	bl	8005420 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d302      	bcc.n	8009bfc <I2C_IsErrorOccurred+0x54>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d13a      	bne.n	8009c72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c1e:	d121      	bne.n	8009c64 <I2C_IsErrorOccurred+0xbc>
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c26:	d01d      	beq.n	8009c64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c28:	7cfb      	ldrb	r3, [r7, #19]
 8009c2a:	2b20      	cmp	r3, #32
 8009c2c:	d01a      	beq.n	8009c64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c3e:	f7fb fbef 	bl	8005420 <HAL_GetTick>
 8009c42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c44:	e00e      	b.n	8009c64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c46:	f7fb fbeb 	bl	8005420 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	2b19      	cmp	r3, #25
 8009c52:	d907      	bls.n	8009c64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	f043 0320 	orr.w	r3, r3, #32
 8009c5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009c62:	e006      	b.n	8009c72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	f003 0320 	and.w	r3, r3, #32
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d1e9      	bne.n	8009c46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b20      	cmp	r3, #32
 8009c7e:	d003      	beq.n	8009c88 <I2C_IsErrorOccurred+0xe0>
 8009c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0aa      	beq.n	8009bde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d103      	bne.n	8009c98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2220      	movs	r2, #32
 8009c96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	f043 0304 	orr.w	r3, r3, #4
 8009c9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00b      	beq.n	8009cd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	f043 0301 	orr.w	r3, r3, #1
 8009cbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00b      	beq.n	8009cf2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	f043 0308 	orr.w	r3, r3, #8
 8009ce0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009cea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d01c      	beq.n	8009d56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7ff fd7a 	bl	8009816 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6859      	ldr	r1, [r3, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d64 <I2C_IsErrorOccurred+0x1bc>)
 8009d2e:	400b      	ands	r3, r1
 8009d30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2220      	movs	r2, #32
 8009d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3728      	adds	r7, #40	@ 0x28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	fe00e800 	.word	0xfe00e800

08009d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	607b      	str	r3, [r7, #4]
 8009d72:	460b      	mov	r3, r1
 8009d74:	817b      	strh	r3, [r7, #10]
 8009d76:	4613      	mov	r3, r2
 8009d78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d7a:	897b      	ldrh	r3, [r7, #10]
 8009d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d80:	7a7b      	ldrb	r3, [r7, #9]
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	0d5b      	lsrs	r3, r3, #21
 8009da2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009da6:	4b08      	ldr	r3, [pc, #32]	@ (8009dc8 <I2C_TransferConfig+0x60>)
 8009da8:	430b      	orrs	r3, r1
 8009daa:	43db      	mvns	r3, r3
 8009dac:	ea02 0103 	and.w	r1, r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	03ff63ff 	.word	0x03ff63ff

08009dcc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de0:	4a39      	ldr	r2, [pc, #228]	@ (8009ec8 <I2C_Enable_IRQ+0xfc>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d032      	beq.n	8009e4c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009dea:	4a38      	ldr	r2, [pc, #224]	@ (8009ecc <I2C_Enable_IRQ+0x100>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d02d      	beq.n	8009e4c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009df4:	4a36      	ldr	r2, [pc, #216]	@ (8009ed0 <I2C_Enable_IRQ+0x104>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d028      	beq.n	8009e4c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009dfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da03      	bge.n	8009e0a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009e08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009e0a:	887b      	ldrh	r3, [r7, #2]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009e1a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009e1c:	887b      	ldrh	r3, [r7, #2]
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009e2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009e2e:	887b      	ldrh	r3, [r7, #2]
 8009e30:	2b10      	cmp	r3, #16
 8009e32:	d103      	bne.n	8009e3c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009e3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e3c:	887b      	ldrh	r3, [r7, #2]
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	d133      	bne.n	8009eaa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f043 0320 	orr.w	r3, r3, #32
 8009e48:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e4a:	e02e      	b.n	8009eaa <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	da03      	bge.n	8009e5c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009e5a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009e5c:	887b      	ldrh	r3, [r7, #2]
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009e6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009e6e:	887b      	ldrh	r3, [r7, #2]
 8009e70:	f003 0302 	and.w	r3, r3, #2
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009e7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009e80:	887b      	ldrh	r3, [r7, #2]
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d103      	bne.n	8009e8e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009e8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e8e:	887b      	ldrh	r3, [r7, #2]
 8009e90:	2b20      	cmp	r3, #32
 8009e92:	d103      	bne.n	8009e9c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009e9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009e9c:	887b      	ldrh	r3, [r7, #2]
 8009e9e:	2b40      	cmp	r3, #64	@ 0x40
 8009ea0:	d103      	bne.n	8009eaa <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6819      	ldr	r1, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	601a      	str	r2, [r3, #0]
}
 8009eba:	bf00      	nop
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	080088d9 	.word	0x080088d9
 8009ecc:	08008cfd 	.word	0x08008cfd
 8009ed0:	08008ab1 	.word	0x08008ab1

08009ed4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009ee4:	887b      	ldrh	r3, [r7, #2]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00f      	beq.n	8009f0e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009ef4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009f02:	2b28      	cmp	r3, #40	@ 0x28
 8009f04:	d003      	beq.n	8009f0e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009f0c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009f0e:	887b      	ldrh	r3, [r7, #2]
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00f      	beq.n	8009f38 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009f1e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009f2c:	2b28      	cmp	r3, #40	@ 0x28
 8009f2e:	d003      	beq.n	8009f38 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009f36:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	da03      	bge.n	8009f48 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009f46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009f48:	887b      	ldrh	r3, [r7, #2]
 8009f4a:	2b10      	cmp	r3, #16
 8009f4c:	d103      	bne.n	8009f56 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009f54:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009f56:	887b      	ldrh	r3, [r7, #2]
 8009f58:	2b20      	cmp	r3, #32
 8009f5a:	d103      	bne.n	8009f64 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f043 0320 	orr.w	r3, r3, #32
 8009f62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009f64:	887b      	ldrh	r3, [r7, #2]
 8009f66:	2b40      	cmp	r3, #64	@ 0x40
 8009f68:	d103      	bne.n	8009f72 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f70:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6819      	ldr	r1, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	43da      	mvns	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	400a      	ands	r2, r1
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d138      	bne.n	800a018 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e032      	b.n	800a01a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2224      	movs	r2, #36	@ 0x24
 8009fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0201 	bic.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009fe2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6819      	ldr	r1, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0201 	orr.w	r2, r2, #1
 800a002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2220      	movs	r2, #32
 800a008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	e000      	b.n	800a01a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a018:	2302      	movs	r3, #2
  }
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a026:	b480      	push	{r7}
 800a028:	b085      	sub	sp, #20
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d139      	bne.n	800a0b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a046:	2302      	movs	r3, #2
 800a048:	e033      	b.n	800a0b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2224      	movs	r2, #36	@ 0x24
 800a056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f022 0201 	bic.w	r2, r2, #1
 800a068:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a078:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4313      	orrs	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f042 0201 	orr.w	r2, r2, #1
 800a09a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e000      	b.n	800a0b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a0b0:	2302      	movs	r3, #2
  }
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e038      	b.n	800a142 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800a0d8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f245 5255 	movw	r2, #21845	@ 0x5555
 800a0e2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6852      	ldr	r2, [r2, #4]
 800a0ec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	6892      	ldr	r2, [r2, #8]
 800a0f6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a0f8:	f7fb f992 	bl	8005420 <HAL_GetTick>
 800a0fc:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800a0fe:	e008      	b.n	800a112 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a100:	f7fb f98e 	bl	8005420 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	2b30      	cmp	r3, #48	@ 0x30
 800a10c:	d901      	bls.n	800a112 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e017      	b.n	800a142 <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1f1      	bne.n	800a100 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	691a      	ldr	r2, [r3, #16]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	429a      	cmp	r2, r3
 800a128:	d005      	beq.n	800a136 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	68d2      	ldr	r2, [r2, #12]
 800a132:	611a      	str	r2, [r3, #16]
 800a134:	e004      	b.n	800a140 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800a13e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800a15a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
	...

0800a16c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10c      	bne.n	800a198 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a17e:	4b13      	ldr	r3, [pc, #76]	@ (800a1cc <HAL_PWR_EnterSLEEPMode+0x60>)
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a18a:	d10e      	bne.n	800a1aa <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800a18c:	f000 f896 	bl	800a2bc <HAL_PWREx_DisableLowPowerRunMode>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800a196:	e016      	b.n	800a1c6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800a198:	4b0c      	ldr	r3, [pc, #48]	@ (800a1cc <HAL_PWR_EnterSLEEPMode+0x60>)
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a4:	d001      	beq.n	800a1aa <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800a1a6:	f000 f879 	bl	800a29c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a1aa:	4b09      	ldr	r3, [pc, #36]	@ (800a1d0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	4a08      	ldr	r2, [pc, #32]	@ (800a1d0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a1b0:	f023 0304 	bic.w	r3, r3, #4
 800a1b4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a1b6:	78fb      	ldrb	r3, [r7, #3]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d101      	bne.n	800a1c0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800a1bc:	bf30      	wfi
 800a1be:	e002      	b.n	800a1c6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a1c0:	bf40      	sev
    __WFE();
 800a1c2:	bf20      	wfe
    __WFE();
 800a1c4:	bf20      	wfe
  }

}
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	40007000 	.word	0x40007000
 800a1d0:	e000ed00 	.word	0xe000ed00

0800a1d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a1d8:	4b04      	ldr	r3, [pc, #16]	@ (800a1ec <HAL_PWREx_GetVoltageRange+0x18>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	40007000 	.word	0x40007000

0800a1f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1fe:	d130      	bne.n	800a262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a200:	4b23      	ldr	r3, [pc, #140]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a20c:	d038      	beq.n	800a280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a20e:	4b20      	ldr	r3, [pc, #128]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a216:	4a1e      	ldr	r2, [pc, #120]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a218:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a21c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a21e:	4b1d      	ldr	r3, [pc, #116]	@ (800a294 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2232      	movs	r2, #50	@ 0x32
 800a224:	fb02 f303 	mul.w	r3, r2, r3
 800a228:	4a1b      	ldr	r2, [pc, #108]	@ (800a298 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a22a:	fba2 2303 	umull	r2, r3, r2, r3
 800a22e:	0c9b      	lsrs	r3, r3, #18
 800a230:	3301      	adds	r3, #1
 800a232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a234:	e002      	b.n	800a23c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3b01      	subs	r3, #1
 800a23a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a23c:	4b14      	ldr	r3, [pc, #80]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a248:	d102      	bne.n	800a250 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1f2      	bne.n	800a236 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a250:	4b0f      	ldr	r3, [pc, #60]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a25c:	d110      	bne.n	800a280 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e00f      	b.n	800a282 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a262:	4b0b      	ldr	r3, [pc, #44]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a26a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a26e:	d007      	beq.n	800a280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a270:	4b07      	ldr	r3, [pc, #28]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a278:	4a05      	ldr	r2, [pc, #20]	@ (800a290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a27a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a27e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	40007000 	.word	0x40007000
 800a294:	2000039c 	.word	0x2000039c
 800a298:	431bde83 	.word	0x431bde83

0800a29c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a29c:	b480      	push	{r7}
 800a29e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a2a0:	4b05      	ldr	r3, [pc, #20]	@ (800a2b8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a04      	ldr	r2, [pc, #16]	@ (800a2b8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a2a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2aa:	6013      	str	r3, [r2, #0]
}
 800a2ac:	bf00      	nop
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	40007000 	.word	0x40007000

0800a2bc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a2c2:	4b17      	ldr	r3, [pc, #92]	@ (800a320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a16      	ldr	r2, [pc, #88]	@ (800a320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2cc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a2ce:	4b15      	ldr	r3, [pc, #84]	@ (800a324 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2232      	movs	r2, #50	@ 0x32
 800a2d4:	fb02 f303 	mul.w	r3, r2, r3
 800a2d8:	4a13      	ldr	r2, [pc, #76]	@ (800a328 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a2da:	fba2 2303 	umull	r2, r3, r2, r3
 800a2de:	0c9b      	lsrs	r3, r3, #18
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a2e4:	e002      	b.n	800a2ec <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a2ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2f8:	d102      	bne.n	800a300 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1f2      	bne.n	800a2e6 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a300:	4b07      	ldr	r3, [pc, #28]	@ (800a320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a30c:	d101      	bne.n	800a312 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e000      	b.n	800a314 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	40007000 	.word	0x40007000
 800a324:	2000039c 	.word	0x2000039c
 800a328:	431bde83 	.word	0x431bde83

0800a32c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	f000 bc08 	b.w	800ab50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a340:	4b96      	ldr	r3, [pc, #600]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f003 030c 	and.w	r3, r3, #12
 800a348:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a34a:	4b94      	ldr	r3, [pc, #592]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0310 	and.w	r3, r3, #16
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 80e4 	beq.w	800a52a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d007      	beq.n	800a378 <HAL_RCC_OscConfig+0x4c>
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	2b0c      	cmp	r3, #12
 800a36c:	f040 808b 	bne.w	800a486 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	2b01      	cmp	r3, #1
 800a374:	f040 8087 	bne.w	800a486 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a378:	4b88      	ldr	r3, [pc, #544]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0302 	and.w	r3, r3, #2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <HAL_RCC_OscConfig+0x64>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d101      	bne.n	800a390 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e3df      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a1a      	ldr	r2, [r3, #32]
 800a394:	4b81      	ldr	r3, [pc, #516]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0308 	and.w	r3, r3, #8
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <HAL_RCC_OscConfig+0x7e>
 800a3a0:	4b7e      	ldr	r3, [pc, #504]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3a8:	e005      	b.n	800a3b6 <HAL_RCC_OscConfig+0x8a>
 800a3aa:	4b7c      	ldr	r3, [pc, #496]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a3ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3b0:	091b      	lsrs	r3, r3, #4
 800a3b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d223      	bcs.n	800a402 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 fd92 	bl	800aee8 <RCC_SetFlashLatencyFromMSIRange>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e3c0      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3ce:	4b73      	ldr	r3, [pc, #460]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a72      	ldr	r2, [pc, #456]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a3d4:	f043 0308 	orr.w	r3, r3, #8
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	4b70      	ldr	r3, [pc, #448]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	496d      	ldr	r1, [pc, #436]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a3ec:	4b6b      	ldr	r3, [pc, #428]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	021b      	lsls	r3, r3, #8
 800a3fa:	4968      	ldr	r1, [pc, #416]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	604b      	str	r3, [r1, #4]
 800a400:	e025      	b.n	800a44e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a402:	4b66      	ldr	r3, [pc, #408]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a65      	ldr	r2, [pc, #404]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a408:	f043 0308 	orr.w	r3, r3, #8
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	4b63      	ldr	r3, [pc, #396]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	4960      	ldr	r1, [pc, #384]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a420:	4b5e      	ldr	r3, [pc, #376]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	495b      	ldr	r1, [pc, #364]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a430:	4313      	orrs	r3, r2
 800a432:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d109      	bne.n	800a44e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fd52 	bl	800aee8 <RCC_SetFlashLatencyFromMSIRange>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e380      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a44e:	f000 fc87 	bl	800ad60 <HAL_RCC_GetSysClockFreq>
 800a452:	4602      	mov	r2, r0
 800a454:	4b51      	ldr	r3, [pc, #324]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	091b      	lsrs	r3, r3, #4
 800a45a:	f003 030f 	and.w	r3, r3, #15
 800a45e:	4950      	ldr	r1, [pc, #320]	@ (800a5a0 <HAL_RCC_OscConfig+0x274>)
 800a460:	5ccb      	ldrb	r3, [r1, r3]
 800a462:	f003 031f 	and.w	r3, r3, #31
 800a466:	fa22 f303 	lsr.w	r3, r2, r3
 800a46a:	4a4e      	ldr	r2, [pc, #312]	@ (800a5a4 <HAL_RCC_OscConfig+0x278>)
 800a46c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a46e:	4b4e      	ldr	r3, [pc, #312]	@ (800a5a8 <HAL_RCC_OscConfig+0x27c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f7fa ff84 	bl	8005380 <HAL_InitTick>
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d052      	beq.n	800a528 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a482:	7bfb      	ldrb	r3, [r7, #15]
 800a484:	e364      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d032      	beq.n	800a4f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a48e:	4b43      	ldr	r3, [pc, #268]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a42      	ldr	r2, [pc, #264]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a494:	f043 0301 	orr.w	r3, r3, #1
 800a498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a49a:	f7fa ffc1 	bl	8005420 <HAL_GetTick>
 800a49e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4a0:	e008      	b.n	800a4b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a4a2:	f7fa ffbd 	bl	8005420 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d901      	bls.n	800a4b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e34d      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4b4:	4b39      	ldr	r3, [pc, #228]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0302 	and.w	r3, r3, #2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0f0      	beq.n	800a4a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4c0:	4b36      	ldr	r3, [pc, #216]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a35      	ldr	r2, [pc, #212]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4c6:	f043 0308 	orr.w	r3, r3, #8
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	4b33      	ldr	r3, [pc, #204]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	4930      	ldr	r1, [pc, #192]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4de:	4b2f      	ldr	r3, [pc, #188]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	021b      	lsls	r3, r3, #8
 800a4ec:	492b      	ldr	r1, [pc, #172]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	604b      	str	r3, [r1, #4]
 800a4f2:	e01a      	b.n	800a52a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a4f4:	4b29      	ldr	r3, [pc, #164]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a28      	ldr	r2, [pc, #160]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a4fa:	f023 0301 	bic.w	r3, r3, #1
 800a4fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a500:	f7fa ff8e 	bl	8005420 <HAL_GetTick>
 800a504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a508:	f7fa ff8a 	bl	8005420 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e31a      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a51a:	4b20      	ldr	r3, [pc, #128]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1f0      	bne.n	800a508 <HAL_RCC_OscConfig+0x1dc>
 800a526:	e000      	b.n	800a52a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d073      	beq.n	800a61e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d005      	beq.n	800a548 <HAL_RCC_OscConfig+0x21c>
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	2b0c      	cmp	r3, #12
 800a540:	d10e      	bne.n	800a560 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b03      	cmp	r3, #3
 800a546:	d10b      	bne.n	800a560 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a548:	4b14      	ldr	r3, [pc, #80]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d063      	beq.n	800a61c <HAL_RCC_OscConfig+0x2f0>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d15f      	bne.n	800a61c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e2f7      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a568:	d106      	bne.n	800a578 <HAL_RCC_OscConfig+0x24c>
 800a56a:	4b0c      	ldr	r3, [pc, #48]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a0b      	ldr	r2, [pc, #44]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	e025      	b.n	800a5c4 <HAL_RCC_OscConfig+0x298>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a580:	d114      	bne.n	800a5ac <HAL_RCC_OscConfig+0x280>
 800a582:	4b06      	ldr	r3, [pc, #24]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a05      	ldr	r2, [pc, #20]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a58c:	6013      	str	r3, [r2, #0]
 800a58e:	4b03      	ldr	r3, [pc, #12]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a02      	ldr	r2, [pc, #8]	@ (800a59c <HAL_RCC_OscConfig+0x270>)
 800a594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	e013      	b.n	800a5c4 <HAL_RCC_OscConfig+0x298>
 800a59c:	40021000 	.word	0x40021000
 800a5a0:	0800d758 	.word	0x0800d758
 800a5a4:	2000039c 	.word	0x2000039c
 800a5a8:	200003a0 	.word	0x200003a0
 800a5ac:	4ba0      	ldr	r3, [pc, #640]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a9f      	ldr	r2, [pc, #636]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a5b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	4b9d      	ldr	r3, [pc, #628]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a9c      	ldr	r2, [pc, #624]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a5be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d013      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5cc:	f7fa ff28 	bl	8005420 <HAL_GetTick>
 800a5d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5d4:	f7fa ff24 	bl	8005420 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b64      	cmp	r3, #100	@ 0x64
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e2b4      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5e6:	4b92      	ldr	r3, [pc, #584]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0f0      	beq.n	800a5d4 <HAL_RCC_OscConfig+0x2a8>
 800a5f2:	e014      	b.n	800a61e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f4:	f7fa ff14 	bl	8005420 <HAL_GetTick>
 800a5f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a5fa:	e008      	b.n	800a60e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5fc:	f7fa ff10 	bl	8005420 <HAL_GetTick>
 800a600:	4602      	mov	r2, r0
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	2b64      	cmp	r3, #100	@ 0x64
 800a608:	d901      	bls.n	800a60e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e2a0      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a60e:	4b88      	ldr	r3, [pc, #544]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1f0      	bne.n	800a5fc <HAL_RCC_OscConfig+0x2d0>
 800a61a:	e000      	b.n	800a61e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a61c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d060      	beq.n	800a6ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b04      	cmp	r3, #4
 800a62e:	d005      	beq.n	800a63c <HAL_RCC_OscConfig+0x310>
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	2b0c      	cmp	r3, #12
 800a634:	d119      	bne.n	800a66a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d116      	bne.n	800a66a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a63c:	4b7c      	ldr	r3, [pc, #496]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a644:	2b00      	cmp	r3, #0
 800a646:	d005      	beq.n	800a654 <HAL_RCC_OscConfig+0x328>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e27d      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a654:	4b76      	ldr	r3, [pc, #472]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	061b      	lsls	r3, r3, #24
 800a662:	4973      	ldr	r1, [pc, #460]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a664:	4313      	orrs	r3, r2
 800a666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a668:	e040      	b.n	800a6ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d023      	beq.n	800a6ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a672:	4b6f      	ldr	r3, [pc, #444]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a6e      	ldr	r2, [pc, #440]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a67c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a67e:	f7fa fecf 	bl	8005420 <HAL_GetTick>
 800a682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a684:	e008      	b.n	800a698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a686:	f7fa fecb 	bl	8005420 <HAL_GetTick>
 800a68a:	4602      	mov	r2, r0
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	2b02      	cmp	r3, #2
 800a692:	d901      	bls.n	800a698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a694:	2303      	movs	r3, #3
 800a696:	e25b      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a698:	4b65      	ldr	r3, [pc, #404]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d0f0      	beq.n	800a686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6a4:	4b62      	ldr	r3, [pc, #392]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	061b      	lsls	r3, r3, #24
 800a6b2:	495f      	ldr	r1, [pc, #380]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	604b      	str	r3, [r1, #4]
 800a6b8:	e018      	b.n	800a6ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6ba:	4b5d      	ldr	r3, [pc, #372]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a5c      	ldr	r2, [pc, #368]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a6c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c6:	f7fa feab 	bl	8005420 <HAL_GetTick>
 800a6ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6cc:	e008      	b.n	800a6e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6ce:	f7fa fea7 	bl	8005420 <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e237      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6e0:	4b53      	ldr	r3, [pc, #332]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1f0      	bne.n	800a6ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0308 	and.w	r3, r3, #8
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d03c      	beq.n	800a772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01c      	beq.n	800a73a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a700:	4b4b      	ldr	r3, [pc, #300]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a706:	4a4a      	ldr	r2, [pc, #296]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a708:	f043 0301 	orr.w	r3, r3, #1
 800a70c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a710:	f7fa fe86 	bl	8005420 <HAL_GetTick>
 800a714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a716:	e008      	b.n	800a72a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a718:	f7fa fe82 	bl	8005420 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b02      	cmp	r3, #2
 800a724:	d901      	bls.n	800a72a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e212      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a72a:	4b41      	ldr	r3, [pc, #260]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a72c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d0ef      	beq.n	800a718 <HAL_RCC_OscConfig+0x3ec>
 800a738:	e01b      	b.n	800a772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a73a:	4b3d      	ldr	r3, [pc, #244]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a73c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a740:	4a3b      	ldr	r2, [pc, #236]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a742:	f023 0301 	bic.w	r3, r3, #1
 800a746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a74a:	f7fa fe69 	bl	8005420 <HAL_GetTick>
 800a74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a750:	e008      	b.n	800a764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a752:	f7fa fe65 	bl	8005420 <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d901      	bls.n	800a764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e1f5      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a764:	4b32      	ldr	r3, [pc, #200]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1ef      	bne.n	800a752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 0304 	and.w	r3, r3, #4
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 80a6 	beq.w	800a8cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a780:	2300      	movs	r3, #0
 800a782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a784:	4b2a      	ldr	r3, [pc, #168]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10d      	bne.n	800a7ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a790:	4b27      	ldr	r3, [pc, #156]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a794:	4a26      	ldr	r2, [pc, #152]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a79a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a79c:	4b24      	ldr	r3, [pc, #144]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a79e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7a4:	60bb      	str	r3, [r7, #8]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7ac:	4b21      	ldr	r3, [pc, #132]	@ (800a834 <HAL_RCC_OscConfig+0x508>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d118      	bne.n	800a7ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a834 <HAL_RCC_OscConfig+0x508>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a834 <HAL_RCC_OscConfig+0x508>)
 800a7be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7c4:	f7fa fe2c 	bl	8005420 <HAL_GetTick>
 800a7c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7ca:	e008      	b.n	800a7de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7cc:	f7fa fe28 	bl	8005420 <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e1b8      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7de:	4b15      	ldr	r3, [pc, #84]	@ (800a834 <HAL_RCC_OscConfig+0x508>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0f0      	beq.n	800a7cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d108      	bne.n	800a804 <HAL_RCC_OscConfig+0x4d8>
 800a7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7f8:	4a0d      	ldr	r2, [pc, #52]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a7fa:	f043 0301 	orr.w	r3, r3, #1
 800a7fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a802:	e029      	b.n	800a858 <HAL_RCC_OscConfig+0x52c>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	2b05      	cmp	r3, #5
 800a80a:	d115      	bne.n	800a838 <HAL_RCC_OscConfig+0x50c>
 800a80c:	4b08      	ldr	r3, [pc, #32]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a812:	4a07      	ldr	r2, [pc, #28]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a814:	f043 0304 	orr.w	r3, r3, #4
 800a818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a81c:	4b04      	ldr	r3, [pc, #16]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a822:	4a03      	ldr	r2, [pc, #12]	@ (800a830 <HAL_RCC_OscConfig+0x504>)
 800a824:	f043 0301 	orr.w	r3, r3, #1
 800a828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a82c:	e014      	b.n	800a858 <HAL_RCC_OscConfig+0x52c>
 800a82e:	bf00      	nop
 800a830:	40021000 	.word	0x40021000
 800a834:	40007000 	.word	0x40007000
 800a838:	4b9d      	ldr	r3, [pc, #628]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a83e:	4a9c      	ldr	r2, [pc, #624]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a840:	f023 0301 	bic.w	r3, r3, #1
 800a844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a848:	4b99      	ldr	r3, [pc, #612]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a84e:	4a98      	ldr	r2, [pc, #608]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a850:	f023 0304 	bic.w	r3, r3, #4
 800a854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d016      	beq.n	800a88e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a860:	f7fa fdde 	bl	8005420 <HAL_GetTick>
 800a864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a866:	e00a      	b.n	800a87e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a868:	f7fa fdda 	bl	8005420 <HAL_GetTick>
 800a86c:	4602      	mov	r2, r0
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a876:	4293      	cmp	r3, r2
 800a878:	d901      	bls.n	800a87e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e168      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a87e:	4b8c      	ldr	r3, [pc, #560]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d0ed      	beq.n	800a868 <HAL_RCC_OscConfig+0x53c>
 800a88c:	e015      	b.n	800a8ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a88e:	f7fa fdc7 	bl	8005420 <HAL_GetTick>
 800a892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a894:	e00a      	b.n	800a8ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a896:	f7fa fdc3 	bl	8005420 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e151      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8ac:	4b80      	ldr	r3, [pc, #512]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1ed      	bne.n	800a896 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a8ba:	7ffb      	ldrb	r3, [r7, #31]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d105      	bne.n	800a8cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8c0:	4b7b      	ldr	r3, [pc, #492]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a8c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8c4:	4a7a      	ldr	r2, [pc, #488]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a8c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0320 	and.w	r3, r3, #32
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d03c      	beq.n	800a952 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d01c      	beq.n	800a91a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a8e0:	4b73      	ldr	r3, [pc, #460]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a8e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8e6:	4a72      	ldr	r2, [pc, #456]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a8e8:	f043 0301 	orr.w	r3, r3, #1
 800a8ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8f0:	f7fa fd96 	bl	8005420 <HAL_GetTick>
 800a8f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a8f6:	e008      	b.n	800a90a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8f8:	f7fa fd92 	bl	8005420 <HAL_GetTick>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	2b02      	cmp	r3, #2
 800a904:	d901      	bls.n	800a90a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a906:	2303      	movs	r3, #3
 800a908:	e122      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a90a:	4b69      	ldr	r3, [pc, #420]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a90c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d0ef      	beq.n	800a8f8 <HAL_RCC_OscConfig+0x5cc>
 800a918:	e01b      	b.n	800a952 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a91a:	4b65      	ldr	r3, [pc, #404]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a91c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a920:	4a63      	ldr	r2, [pc, #396]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a922:	f023 0301 	bic.w	r3, r3, #1
 800a926:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a92a:	f7fa fd79 	bl	8005420 <HAL_GetTick>
 800a92e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a930:	e008      	b.n	800a944 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a932:	f7fa fd75 	bl	8005420 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d901      	bls.n	800a944 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e105      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a944:	4b5a      	ldr	r3, [pc, #360]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1ef      	bne.n	800a932 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a956:	2b00      	cmp	r3, #0
 800a958:	f000 80f9 	beq.w	800ab4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a960:	2b02      	cmp	r3, #2
 800a962:	f040 80cf 	bne.w	800ab04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a966:	4b52      	ldr	r3, [pc, #328]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f003 0203 	and.w	r2, r3, #3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a976:	429a      	cmp	r2, r3
 800a978:	d12c      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a984:	3b01      	subs	r3, #1
 800a986:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a988:	429a      	cmp	r2, r3
 800a98a:	d123      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a996:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a998:	429a      	cmp	r2, r3
 800a99a:	d11b      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d113      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b6:	085b      	lsrs	r3, r3, #1
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d109      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d071      	beq.n	800aab8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b0c      	cmp	r3, #12
 800a9d8:	d068      	beq.n	800aaac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a9da:	4b35      	ldr	r3, [pc, #212]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d105      	bne.n	800a9f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a9e6:	4b32      	ldr	r3, [pc, #200]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e0ac      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a9f6:	4b2e      	ldr	r3, [pc, #184]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a2d      	ldr	r2, [pc, #180]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800a9fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aa02:	f7fa fd0d 	bl	8005420 <HAL_GetTick>
 800aa06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa08:	e008      	b.n	800aa1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa0a:	f7fa fd09 	bl	8005420 <HAL_GetTick>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d901      	bls.n	800aa1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e099      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa1c:	4b24      	ldr	r3, [pc, #144]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1f0      	bne.n	800aa0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa28:	4b21      	ldr	r3, [pc, #132]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800aa2a:	68da      	ldr	r2, [r3, #12]
 800aa2c:	4b21      	ldr	r3, [pc, #132]	@ (800aab4 <HAL_RCC_OscConfig+0x788>)
 800aa2e:	4013      	ands	r3, r2
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa38:	3a01      	subs	r2, #1
 800aa3a:	0112      	lsls	r2, r2, #4
 800aa3c:	4311      	orrs	r1, r2
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800aa42:	0212      	lsls	r2, r2, #8
 800aa44:	4311      	orrs	r1, r2
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800aa4a:	0852      	lsrs	r2, r2, #1
 800aa4c:	3a01      	subs	r2, #1
 800aa4e:	0552      	lsls	r2, r2, #21
 800aa50:	4311      	orrs	r1, r2
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800aa56:	0852      	lsrs	r2, r2, #1
 800aa58:	3a01      	subs	r2, #1
 800aa5a:	0652      	lsls	r2, r2, #25
 800aa5c:	4311      	orrs	r1, r2
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800aa62:	06d2      	lsls	r2, r2, #27
 800aa64:	430a      	orrs	r2, r1
 800aa66:	4912      	ldr	r1, [pc, #72]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800aa6c:	4b10      	ldr	r3, [pc, #64]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a0f      	ldr	r2, [pc, #60]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800aa72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aa78:	4b0d      	ldr	r3, [pc, #52]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	4a0c      	ldr	r2, [pc, #48]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800aa7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aa84:	f7fa fccc 	bl	8005420 <HAL_GetTick>
 800aa88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa8a:	e008      	b.n	800aa9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa8c:	f7fa fcc8 	bl	8005420 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d901      	bls.n	800aa9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e058      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa9e:	4b04      	ldr	r3, [pc, #16]	@ (800aab0 <HAL_RCC_OscConfig+0x784>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d0f0      	beq.n	800aa8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aaaa:	e050      	b.n	800ab4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e04f      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
 800aab0:	40021000 	.word	0x40021000
 800aab4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aab8:	4b27      	ldr	r3, [pc, #156]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d144      	bne.n	800ab4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800aac4:	4b24      	ldr	r3, [pc, #144]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a23      	ldr	r2, [pc, #140]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800aaca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aad0:	4b21      	ldr	r3, [pc, #132]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	4a20      	ldr	r2, [pc, #128]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800aad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aadc:	f7fa fca0 	bl	8005420 <HAL_GetTick>
 800aae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aae2:	e008      	b.n	800aaf6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aae4:	f7fa fc9c 	bl	8005420 <HAL_GetTick>
 800aae8:	4602      	mov	r2, r0
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d901      	bls.n	800aaf6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	e02c      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aaf6:	4b18      	ldr	r3, [pc, #96]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d0f0      	beq.n	800aae4 <HAL_RCC_OscConfig+0x7b8>
 800ab02:	e024      	b.n	800ab4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	2b0c      	cmp	r3, #12
 800ab08:	d01f      	beq.n	800ab4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab0a:	4b13      	ldr	r3, [pc, #76]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a12      	ldr	r2, [pc, #72]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800ab10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab16:	f7fa fc83 	bl	8005420 <HAL_GetTick>
 800ab1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab1c:	e008      	b.n	800ab30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab1e:	f7fa fc7f 	bl	8005420 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d901      	bls.n	800ab30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e00f      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab30:	4b09      	ldr	r3, [pc, #36]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f0      	bne.n	800ab1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ab3c:	4b06      	ldr	r3, [pc, #24]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	4905      	ldr	r1, [pc, #20]	@ (800ab58 <HAL_RCC_OscConfig+0x82c>)
 800ab42:	4b06      	ldr	r3, [pc, #24]	@ (800ab5c <HAL_RCC_OscConfig+0x830>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	60cb      	str	r3, [r1, #12]
 800ab48:	e001      	b.n	800ab4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e000      	b.n	800ab50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3720      	adds	r7, #32
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	40021000 	.word	0x40021000
 800ab5c:	feeefffc 	.word	0xfeeefffc

0800ab60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e0e7      	b.n	800ad44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab74:	4b75      	ldr	r3, [pc, #468]	@ (800ad4c <HAL_RCC_ClockConfig+0x1ec>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d910      	bls.n	800aba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab82:	4b72      	ldr	r3, [pc, #456]	@ (800ad4c <HAL_RCC_ClockConfig+0x1ec>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f023 0207 	bic.w	r2, r3, #7
 800ab8a:	4970      	ldr	r1, [pc, #448]	@ (800ad4c <HAL_RCC_ClockConfig+0x1ec>)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab92:	4b6e      	ldr	r3, [pc, #440]	@ (800ad4c <HAL_RCC_ClockConfig+0x1ec>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 0307 	and.w	r3, r3, #7
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d001      	beq.n	800aba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e0cf      	b.n	800ad44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d010      	beq.n	800abd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	4b66      	ldr	r3, [pc, #408]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d908      	bls.n	800abd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abc0:	4b63      	ldr	r3, [pc, #396]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	4960      	ldr	r1, [pc, #384]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d04c      	beq.n	800ac78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d107      	bne.n	800abf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abe6:	4b5a      	ldr	r3, [pc, #360]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d121      	bne.n	800ac36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e0a6      	b.n	800ad44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d107      	bne.n	800ac0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800abfe:	4b54      	ldr	r3, [pc, #336]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d115      	bne.n	800ac36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e09a      	b.n	800ad44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d107      	bne.n	800ac26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ac16:	4b4e      	ldr	r3, [pc, #312]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0302 	and.w	r3, r3, #2
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d109      	bne.n	800ac36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e08e      	b.n	800ad44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ac26:	4b4a      	ldr	r3, [pc, #296]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d101      	bne.n	800ac36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e086      	b.n	800ad44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac36:	4b46      	ldr	r3, [pc, #280]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	f023 0203 	bic.w	r2, r3, #3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	4943      	ldr	r1, [pc, #268]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac48:	f7fa fbea 	bl	8005420 <HAL_GetTick>
 800ac4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac4e:	e00a      	b.n	800ac66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac50:	f7fa fbe6 	bl	8005420 <HAL_GetTick>
 800ac54:	4602      	mov	r2, r0
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d901      	bls.n	800ac66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e06e      	b.n	800ad44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac66:	4b3a      	ldr	r3, [pc, #232]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f003 020c 	and.w	r2, r3, #12
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d1eb      	bne.n	800ac50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0302 	and.w	r3, r3, #2
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d010      	beq.n	800aca6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	689a      	ldr	r2, [r3, #8]
 800ac88:	4b31      	ldr	r3, [pc, #196]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d208      	bcs.n	800aca6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac94:	4b2e      	ldr	r3, [pc, #184]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	492b      	ldr	r1, [pc, #172]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aca6:	4b29      	ldr	r3, [pc, #164]	@ (800ad4c <HAL_RCC_ClockConfig+0x1ec>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 0307 	and.w	r3, r3, #7
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d210      	bcs.n	800acd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acb4:	4b25      	ldr	r3, [pc, #148]	@ (800ad4c <HAL_RCC_ClockConfig+0x1ec>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f023 0207 	bic.w	r2, r3, #7
 800acbc:	4923      	ldr	r1, [pc, #140]	@ (800ad4c <HAL_RCC_ClockConfig+0x1ec>)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acc4:	4b21      	ldr	r3, [pc, #132]	@ (800ad4c <HAL_RCC_ClockConfig+0x1ec>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0307 	and.w	r3, r3, #7
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d001      	beq.n	800acd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e036      	b.n	800ad44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d008      	beq.n	800acf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ace2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	4918      	ldr	r1, [pc, #96]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800acf0:	4313      	orrs	r3, r2
 800acf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0308 	and.w	r3, r3, #8
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d009      	beq.n	800ad14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ad00:	4b13      	ldr	r3, [pc, #76]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	4910      	ldr	r1, [pc, #64]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ad14:	f000 f824 	bl	800ad60 <HAL_RCC_GetSysClockFreq>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad50 <HAL_RCC_ClockConfig+0x1f0>)
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	091b      	lsrs	r3, r3, #4
 800ad20:	f003 030f 	and.w	r3, r3, #15
 800ad24:	490b      	ldr	r1, [pc, #44]	@ (800ad54 <HAL_RCC_ClockConfig+0x1f4>)
 800ad26:	5ccb      	ldrb	r3, [r1, r3]
 800ad28:	f003 031f 	and.w	r3, r3, #31
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad30:	4a09      	ldr	r2, [pc, #36]	@ (800ad58 <HAL_RCC_ClockConfig+0x1f8>)
 800ad32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ad34:	4b09      	ldr	r3, [pc, #36]	@ (800ad5c <HAL_RCC_ClockConfig+0x1fc>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fa fb21 	bl	8005380 <HAL_InitTick>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	72fb      	strb	r3, [r7, #11]

  return status;
 800ad42:	7afb      	ldrb	r3, [r7, #11]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	40022000 	.word	0x40022000
 800ad50:	40021000 	.word	0x40021000
 800ad54:	0800d758 	.word	0x0800d758
 800ad58:	2000039c 	.word	0x2000039c
 800ad5c:	200003a0 	.word	0x200003a0

0800ad60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b089      	sub	sp, #36	@ 0x24
 800ad64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ad66:	2300      	movs	r3, #0
 800ad68:	61fb      	str	r3, [r7, #28]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f003 030c 	and.w	r3, r3, #12
 800ad76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad78:	4b3b      	ldr	r3, [pc, #236]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f003 0303 	and.w	r3, r3, #3
 800ad80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <HAL_RCC_GetSysClockFreq+0x34>
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	2b0c      	cmp	r3, #12
 800ad8c:	d121      	bne.n	800add2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d11e      	bne.n	800add2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ad94:	4b34      	ldr	r3, [pc, #208]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0308 	and.w	r3, r3, #8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ada0:	4b31      	ldr	r3, [pc, #196]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ada2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ada6:	0a1b      	lsrs	r3, r3, #8
 800ada8:	f003 030f 	and.w	r3, r3, #15
 800adac:	61fb      	str	r3, [r7, #28]
 800adae:	e005      	b.n	800adbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800adb0:	4b2d      	ldr	r3, [pc, #180]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	091b      	lsrs	r3, r3, #4
 800adb6:	f003 030f 	and.w	r3, r3, #15
 800adba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800adbc:	4a2b      	ldr	r2, [pc, #172]	@ (800ae6c <HAL_RCC_GetSysClockFreq+0x10c>)
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10d      	bne.n	800ade8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800add0:	e00a      	b.n	800ade8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b04      	cmp	r3, #4
 800add6:	d102      	bne.n	800adde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800add8:	4b25      	ldr	r3, [pc, #148]	@ (800ae70 <HAL_RCC_GetSysClockFreq+0x110>)
 800adda:	61bb      	str	r3, [r7, #24]
 800addc:	e004      	b.n	800ade8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d101      	bne.n	800ade8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ade4:	4b23      	ldr	r3, [pc, #140]	@ (800ae74 <HAL_RCC_GetSysClockFreq+0x114>)
 800ade6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2b0c      	cmp	r3, #12
 800adec:	d134      	bne.n	800ae58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800adee:	4b1e      	ldr	r3, [pc, #120]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	f003 0303 	and.w	r3, r3, #3
 800adf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d003      	beq.n	800ae06 <HAL_RCC_GetSysClockFreq+0xa6>
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	d003      	beq.n	800ae0c <HAL_RCC_GetSysClockFreq+0xac>
 800ae04:	e005      	b.n	800ae12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ae06:	4b1a      	ldr	r3, [pc, #104]	@ (800ae70 <HAL_RCC_GetSysClockFreq+0x110>)
 800ae08:	617b      	str	r3, [r7, #20]
      break;
 800ae0a:	e005      	b.n	800ae18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ae0c:	4b19      	ldr	r3, [pc, #100]	@ (800ae74 <HAL_RCC_GetSysClockFreq+0x114>)
 800ae0e:	617b      	str	r3, [r7, #20]
      break;
 800ae10:	e002      	b.n	800ae18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	617b      	str	r3, [r7, #20]
      break;
 800ae16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ae18:	4b13      	ldr	r3, [pc, #76]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	091b      	lsrs	r3, r3, #4
 800ae1e:	f003 0307 	and.w	r3, r3, #7
 800ae22:	3301      	adds	r3, #1
 800ae24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ae26:	4b10      	ldr	r3, [pc, #64]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	0a1b      	lsrs	r3, r3, #8
 800ae2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	fb03 f202 	mul.w	r2, r3, r2
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	0e5b      	lsrs	r3, r3, #25
 800ae44:	f003 0303 	and.w	r3, r3, #3
 800ae48:	3301      	adds	r3, #1
 800ae4a:	005b      	lsls	r3, r3, #1
 800ae4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ae58:	69bb      	ldr	r3, [r7, #24]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3724      	adds	r7, #36	@ 0x24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	40021000 	.word	0x40021000
 800ae6c:	0800d770 	.word	0x0800d770
 800ae70:	00f42400 	.word	0x00f42400
 800ae74:	007a1200 	.word	0x007a1200

0800ae78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae7c:	4b03      	ldr	r3, [pc, #12]	@ (800ae8c <HAL_RCC_GetHCLKFreq+0x14>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	2000039c 	.word	0x2000039c

0800ae90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ae94:	f7ff fff0 	bl	800ae78 <HAL_RCC_GetHCLKFreq>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	4b06      	ldr	r3, [pc, #24]	@ (800aeb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	0a1b      	lsrs	r3, r3, #8
 800aea0:	f003 0307 	and.w	r3, r3, #7
 800aea4:	4904      	ldr	r1, [pc, #16]	@ (800aeb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aea6:	5ccb      	ldrb	r3, [r1, r3]
 800aea8:	f003 031f 	and.w	r3, r3, #31
 800aeac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	40021000 	.word	0x40021000
 800aeb8:	0800d768 	.word	0x0800d768

0800aebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800aec0:	f7ff ffda 	bl	800ae78 <HAL_RCC_GetHCLKFreq>
 800aec4:	4602      	mov	r2, r0
 800aec6:	4b06      	ldr	r3, [pc, #24]	@ (800aee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	0adb      	lsrs	r3, r3, #11
 800aecc:	f003 0307 	and.w	r3, r3, #7
 800aed0:	4904      	ldr	r1, [pc, #16]	@ (800aee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aed2:	5ccb      	ldrb	r3, [r1, r3]
 800aed4:	f003 031f 	and.w	r3, r3, #31
 800aed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aedc:	4618      	mov	r0, r3
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	40021000 	.word	0x40021000
 800aee4:	0800d768 	.word	0x0800d768

0800aee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800aef0:	2300      	movs	r3, #0
 800aef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800aef4:	4b2a      	ldr	r3, [pc, #168]	@ (800afa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800aef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800af00:	f7ff f968 	bl	800a1d4 <HAL_PWREx_GetVoltageRange>
 800af04:	6178      	str	r0, [r7, #20]
 800af06:	e014      	b.n	800af32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800af08:	4b25      	ldr	r3, [pc, #148]	@ (800afa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af0c:	4a24      	ldr	r2, [pc, #144]	@ (800afa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af12:	6593      	str	r3, [r2, #88]	@ 0x58
 800af14:	4b22      	ldr	r3, [pc, #136]	@ (800afa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800af20:	f7ff f958 	bl	800a1d4 <HAL_PWREx_GetVoltageRange>
 800af24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800af26:	4b1e      	ldr	r3, [pc, #120]	@ (800afa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af2a:	4a1d      	ldr	r2, [pc, #116]	@ (800afa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af38:	d10b      	bne.n	800af52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b80      	cmp	r3, #128	@ 0x80
 800af3e:	d919      	bls.n	800af74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2ba0      	cmp	r3, #160	@ 0xa0
 800af44:	d902      	bls.n	800af4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800af46:	2302      	movs	r3, #2
 800af48:	613b      	str	r3, [r7, #16]
 800af4a:	e013      	b.n	800af74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800af4c:	2301      	movs	r3, #1
 800af4e:	613b      	str	r3, [r7, #16]
 800af50:	e010      	b.n	800af74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b80      	cmp	r3, #128	@ 0x80
 800af56:	d902      	bls.n	800af5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800af58:	2303      	movs	r3, #3
 800af5a:	613b      	str	r3, [r7, #16]
 800af5c:	e00a      	b.n	800af74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b80      	cmp	r3, #128	@ 0x80
 800af62:	d102      	bne.n	800af6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800af64:	2302      	movs	r3, #2
 800af66:	613b      	str	r3, [r7, #16]
 800af68:	e004      	b.n	800af74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b70      	cmp	r3, #112	@ 0x70
 800af6e:	d101      	bne.n	800af74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800af70:	2301      	movs	r3, #1
 800af72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800af74:	4b0b      	ldr	r3, [pc, #44]	@ (800afa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f023 0207 	bic.w	r2, r3, #7
 800af7c:	4909      	ldr	r1, [pc, #36]	@ (800afa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	4313      	orrs	r3, r2
 800af82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800af84:	4b07      	ldr	r3, [pc, #28]	@ (800afa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 0307 	and.w	r3, r3, #7
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d001      	beq.n	800af96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e000      	b.n	800af98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	40021000 	.word	0x40021000
 800afa4:	40022000 	.word	0x40022000

0800afa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afb0:	2300      	movs	r3, #0
 800afb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afb4:	2300      	movs	r3, #0
 800afb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d041      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800afcc:	d02a      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800afce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800afd2:	d824      	bhi.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800afd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800afd8:	d008      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x44>
 800afda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800afde:	d81e      	bhi.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800afe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afe8:	d010      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800afea:	e018      	b.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800afec:	4b86      	ldr	r3, [pc, #536]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	4a85      	ldr	r2, [pc, #532]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800aff8:	e015      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3304      	adds	r3, #4
 800affe:	2100      	movs	r1, #0
 800b000:	4618      	mov	r0, r3
 800b002:	f000 facd 	bl	800b5a0 <RCCEx_PLLSAI1_Config>
 800b006:	4603      	mov	r3, r0
 800b008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b00a:	e00c      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3320      	adds	r3, #32
 800b010:	2100      	movs	r1, #0
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fbb6 	bl	800b784 <RCCEx_PLLSAI2_Config>
 800b018:	4603      	mov	r3, r0
 800b01a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b01c:	e003      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	74fb      	strb	r3, [r7, #19]
      break;
 800b022:	e000      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b024:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b026:	7cfb      	ldrb	r3, [r7, #19]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10b      	bne.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b02c:	4b76      	ldr	r3, [pc, #472]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b032:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b03a:	4973      	ldr	r1, [pc, #460]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800b042:	e001      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b044:	7cfb      	ldrb	r3, [r7, #19]
 800b046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d041      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b058:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b05c:	d02a      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b05e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b062:	d824      	bhi.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b068:	d008      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b06a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b06e:	d81e      	bhi.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00a      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b078:	d010      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b07a:	e018      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b07c:	4b62      	ldr	r3, [pc, #392]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	4a61      	ldr	r2, [pc, #388]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b086:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b088:	e015      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3304      	adds	r3, #4
 800b08e:	2100      	movs	r1, #0
 800b090:	4618      	mov	r0, r3
 800b092:	f000 fa85 	bl	800b5a0 <RCCEx_PLLSAI1_Config>
 800b096:	4603      	mov	r3, r0
 800b098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b09a:	e00c      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3320      	adds	r3, #32
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fb6e 	bl	800b784 <RCCEx_PLLSAI2_Config>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b0ac:	e003      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	74fb      	strb	r3, [r7, #19]
      break;
 800b0b2:	e000      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b0b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0b6:	7cfb      	ldrb	r3, [r7, #19]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10b      	bne.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b0bc:	4b52      	ldr	r3, [pc, #328]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ca:	494f      	ldr	r1, [pc, #316]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800b0d2:	e001      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d4:	7cfb      	ldrb	r3, [r7, #19]
 800b0d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80a0 	beq.w	800b226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b0ea:	4b47      	ldr	r3, [pc, #284]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00d      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b100:	4b41      	ldr	r3, [pc, #260]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b104:	4a40      	ldr	r2, [pc, #256]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b10a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b10c:	4b3e      	ldr	r3, [pc, #248]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b10e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b114:	60bb      	str	r3, [r7, #8]
 800b116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b118:	2301      	movs	r3, #1
 800b11a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b11c:	4b3b      	ldr	r3, [pc, #236]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a3a      	ldr	r2, [pc, #232]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b128:	f7fa f97a 	bl	8005420 <HAL_GetTick>
 800b12c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b12e:	e009      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b130:	f7fa f976 	bl	8005420 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d902      	bls.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b13e:	2303      	movs	r3, #3
 800b140:	74fb      	strb	r3, [r7, #19]
        break;
 800b142:	e005      	b.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b144:	4b31      	ldr	r3, [pc, #196]	@ (800b20c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d0ef      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b150:	7cfb      	ldrb	r3, [r7, #19]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d15c      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b156:	4b2c      	ldr	r3, [pc, #176]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01f      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	429a      	cmp	r2, r3
 800b172:	d019      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b174:	4b24      	ldr	r3, [pc, #144]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b17a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b17e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b180:	4b21      	ldr	r3, [pc, #132]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b186:	4a20      	ldr	r2, [pc, #128]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b18c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b190:	4b1d      	ldr	r3, [pc, #116]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b196:	4a1c      	ldr	r2, [pc, #112]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b19c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b1a0:	4a19      	ldr	r2, [pc, #100]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d016      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b2:	f7fa f935 	bl	8005420 <HAL_GetTick>
 800b1b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1b8:	e00b      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1ba:	f7fa f931 	bl	8005420 <HAL_GetTick>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d902      	bls.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	74fb      	strb	r3, [r7, #19]
            break;
 800b1d0:	e006      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1d8:	f003 0302 	and.w	r3, r3, #2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0ec      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b1e0:	7cfb      	ldrb	r3, [r7, #19]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10c      	bne.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1e6:	4b08      	ldr	r3, [pc, #32]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1f6:	4904      	ldr	r1, [pc, #16]	@ (800b208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b1fe:	e009      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b200:	7cfb      	ldrb	r3, [r7, #19]
 800b202:	74bb      	strb	r3, [r7, #18]
 800b204:	e006      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b206:	bf00      	nop
 800b208:	40021000 	.word	0x40021000
 800b20c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b210:	7cfb      	ldrb	r3, [r7, #19]
 800b212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b214:	7c7b      	ldrb	r3, [r7, #17]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d105      	bne.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b21a:	4ba6      	ldr	r3, [pc, #664]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b21c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b21e:	4aa5      	ldr	r2, [pc, #660]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b224:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00a      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b232:	4ba0      	ldr	r3, [pc, #640]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b238:	f023 0203 	bic.w	r2, r3, #3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b240:	499c      	ldr	r1, [pc, #624]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b242:	4313      	orrs	r3, r2
 800b244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 0302 	and.w	r3, r3, #2
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00a      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b254:	4b97      	ldr	r3, [pc, #604]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b25a:	f023 020c 	bic.w	r2, r3, #12
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b262:	4994      	ldr	r1, [pc, #592]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b264:	4313      	orrs	r3, r2
 800b266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0304 	and.w	r3, r3, #4
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00a      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b276:	4b8f      	ldr	r3, [pc, #572]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b27c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b284:	498b      	ldr	r1, [pc, #556]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b286:	4313      	orrs	r3, r2
 800b288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 0308 	and.w	r3, r3, #8
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00a      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b298:	4b86      	ldr	r3, [pc, #536]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b29e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2a6:	4983      	ldr	r1, [pc, #524]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0310 	and.w	r3, r3, #16
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b2ba:	4b7e      	ldr	r3, [pc, #504]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2c8:	497a      	ldr	r1, [pc, #488]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0320 	and.w	r3, r3, #32
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2dc:	4b75      	ldr	r3, [pc, #468]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2ea:	4972      	ldr	r1, [pc, #456]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2fe:	4b6d      	ldr	r3, [pc, #436]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b304:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b30c:	4969      	ldr	r1, [pc, #420]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00a      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b320:	4b64      	ldr	r3, [pc, #400]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b326:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b32e:	4961      	ldr	r1, [pc, #388]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b330:	4313      	orrs	r3, r2
 800b332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00a      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b342:	4b5c      	ldr	r3, [pc, #368]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b348:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b350:	4958      	ldr	r1, [pc, #352]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b352:	4313      	orrs	r3, r2
 800b354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00a      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b364:	4b53      	ldr	r3, [pc, #332]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b36a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b372:	4950      	ldr	r1, [pc, #320]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b374:	4313      	orrs	r3, r2
 800b376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00a      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b386:	4b4b      	ldr	r3, [pc, #300]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b38c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b394:	4947      	ldr	r1, [pc, #284]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b396:	4313      	orrs	r3, r2
 800b398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00a      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3a8:	4b42      	ldr	r3, [pc, #264]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b3ae:	f023 0203 	bic.w	r2, r3, #3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3b6:	493f      	ldr	r1, [pc, #252]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d028      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3ca:	4b3a      	ldr	r3, [pc, #232]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3d8:	4936      	ldr	r1, [pc, #216]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3e8:	d106      	bne.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3ea:	4b32      	ldr	r3, [pc, #200]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	4a31      	ldr	r2, [pc, #196]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3f4:	60d3      	str	r3, [r2, #12]
 800b3f6:	e011      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b400:	d10c      	bne.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	3304      	adds	r3, #4
 800b406:	2101      	movs	r1, #1
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 f8c9 	bl	800b5a0 <RCCEx_PLLSAI1_Config>
 800b40e:	4603      	mov	r3, r0
 800b410:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b412:	7cfb      	ldrb	r3, [r7, #19]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800b418:	7cfb      	ldrb	r3, [r7, #19]
 800b41a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d028      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b428:	4b22      	ldr	r3, [pc, #136]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b42e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b436:	491f      	ldr	r1, [pc, #124]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b438:	4313      	orrs	r3, r2
 800b43a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b446:	d106      	bne.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b448:	4b1a      	ldr	r3, [pc, #104]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	4a19      	ldr	r2, [pc, #100]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b44e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b452:	60d3      	str	r3, [r2, #12]
 800b454:	e011      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b45a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b45e:	d10c      	bne.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3304      	adds	r3, #4
 800b464:	2101      	movs	r1, #1
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f89a 	bl	800b5a0 <RCCEx_PLLSAI1_Config>
 800b46c:	4603      	mov	r3, r0
 800b46e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b470:	7cfb      	ldrb	r3, [r7, #19]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800b476:	7cfb      	ldrb	r3, [r7, #19]
 800b478:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b482:	2b00      	cmp	r3, #0
 800b484:	d02a      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b486:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b48c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b494:	4907      	ldr	r1, [pc, #28]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b496:	4313      	orrs	r3, r2
 800b498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4a4:	d108      	bne.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4a6:	4b03      	ldr	r3, [pc, #12]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	4a02      	ldr	r2, [pc, #8]	@ (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b4ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4b0:	60d3      	str	r3, [r2, #12]
 800b4b2:	e013      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x534>
 800b4b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4c0:	d10c      	bne.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 f869 	bl	800b5a0 <RCCEx_PLLSAI1_Config>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b4d2:	7cfb      	ldrb	r3, [r7, #19]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800b4d8:	7cfb      	ldrb	r3, [r7, #19]
 800b4da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d02f      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b4e8:	4b2c      	ldr	r3, [pc, #176]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4f6:	4929      	ldr	r1, [pc, #164]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b506:	d10d      	bne.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	3304      	adds	r3, #4
 800b50c:	2102      	movs	r1, #2
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f846 	bl	800b5a0 <RCCEx_PLLSAI1_Config>
 800b514:	4603      	mov	r3, r0
 800b516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b518:	7cfb      	ldrb	r3, [r7, #19]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d014      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b51e:	7cfb      	ldrb	r3, [r7, #19]
 800b520:	74bb      	strb	r3, [r7, #18]
 800b522:	e011      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b52c:	d10c      	bne.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3320      	adds	r3, #32
 800b532:	2102      	movs	r1, #2
 800b534:	4618      	mov	r0, r3
 800b536:	f000 f925 	bl	800b784 <RCCEx_PLLSAI2_Config>
 800b53a:	4603      	mov	r3, r0
 800b53c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b53e:	7cfb      	ldrb	r3, [r7, #19]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b544:	7cfb      	ldrb	r3, [r7, #19]
 800b546:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00b      	beq.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b554:	4b11      	ldr	r3, [pc, #68]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b55a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b564:	490d      	ldr	r1, [pc, #52]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b566:	4313      	orrs	r3, r2
 800b568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b578:	4b08      	ldr	r3, [pc, #32]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b57e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b588:	4904      	ldr	r1, [pc, #16]	@ (800b59c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b590:	7cbb      	ldrb	r3, [r7, #18]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	40021000 	.word	0x40021000

0800b5a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b5ae:	4b74      	ldr	r3, [pc, #464]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d018      	beq.n	800b5ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b5ba:	4b71      	ldr	r3, [pc, #452]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f003 0203 	and.w	r2, r3, #3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d10d      	bne.n	800b5e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
       ||
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d009      	beq.n	800b5e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b5d2:	4b6b      	ldr	r3, [pc, #428]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	091b      	lsrs	r3, r3, #4
 800b5d8:	f003 0307 	and.w	r3, r3, #7
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
       ||
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d047      	beq.n	800b676 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	73fb      	strb	r3, [r7, #15]
 800b5ea:	e044      	b.n	800b676 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b03      	cmp	r3, #3
 800b5f2:	d018      	beq.n	800b626 <RCCEx_PLLSAI1_Config+0x86>
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d825      	bhi.n	800b644 <RCCEx_PLLSAI1_Config+0xa4>
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d002      	beq.n	800b602 <RCCEx_PLLSAI1_Config+0x62>
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d009      	beq.n	800b614 <RCCEx_PLLSAI1_Config+0x74>
 800b600:	e020      	b.n	800b644 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b602:	4b5f      	ldr	r3, [pc, #380]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f003 0302 	and.w	r3, r3, #2
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d11d      	bne.n	800b64a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b612:	e01a      	b.n	800b64a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b614:	4b5a      	ldr	r3, [pc, #360]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d116      	bne.n	800b64e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b624:	e013      	b.n	800b64e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b626:	4b56      	ldr	r3, [pc, #344]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10f      	bne.n	800b652 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b632:	4b53      	ldr	r3, [pc, #332]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d109      	bne.n	800b652 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b642:	e006      	b.n	800b652 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	73fb      	strb	r3, [r7, #15]
      break;
 800b648:	e004      	b.n	800b654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b64a:	bf00      	nop
 800b64c:	e002      	b.n	800b654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b64e:	bf00      	nop
 800b650:	e000      	b.n	800b654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b652:	bf00      	nop
    }

    if(status == HAL_OK)
 800b654:	7bfb      	ldrb	r3, [r7, #15]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10d      	bne.n	800b676 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b65a:	4b49      	ldr	r3, [pc, #292]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6819      	ldr	r1, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	430b      	orrs	r3, r1
 800b670:	4943      	ldr	r1, [pc, #268]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b672:	4313      	orrs	r3, r2
 800b674:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d17c      	bne.n	800b776 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b67c:	4b40      	ldr	r3, [pc, #256]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a3f      	ldr	r2, [pc, #252]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b682:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b688:	f7f9 feca 	bl	8005420 <HAL_GetTick>
 800b68c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b68e:	e009      	b.n	800b6a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b690:	f7f9 fec6 	bl	8005420 <HAL_GetTick>
 800b694:	4602      	mov	r2, r0
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d902      	bls.n	800b6a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	73fb      	strb	r3, [r7, #15]
        break;
 800b6a2:	e005      	b.n	800b6b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b6a4:	4b36      	ldr	r3, [pc, #216]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1ef      	bne.n	800b690 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d15f      	bne.n	800b776 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d110      	bne.n	800b6de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6bc:	4b30      	ldr	r3, [pc, #192]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b6c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	6892      	ldr	r2, [r2, #8]
 800b6cc:	0211      	lsls	r1, r2, #8
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	68d2      	ldr	r2, [r2, #12]
 800b6d2:	06d2      	lsls	r2, r2, #27
 800b6d4:	430a      	orrs	r2, r1
 800b6d6:	492a      	ldr	r1, [pc, #168]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	610b      	str	r3, [r1, #16]
 800b6dc:	e027      	b.n	800b72e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d112      	bne.n	800b70a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6e4:	4b26      	ldr	r3, [pc, #152]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b6ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	6892      	ldr	r2, [r2, #8]
 800b6f4:	0211      	lsls	r1, r2, #8
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	6912      	ldr	r2, [r2, #16]
 800b6fa:	0852      	lsrs	r2, r2, #1
 800b6fc:	3a01      	subs	r2, #1
 800b6fe:	0552      	lsls	r2, r2, #21
 800b700:	430a      	orrs	r2, r1
 800b702:	491f      	ldr	r1, [pc, #124]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b704:	4313      	orrs	r3, r2
 800b706:	610b      	str	r3, [r1, #16]
 800b708:	e011      	b.n	800b72e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b70a:	4b1d      	ldr	r3, [pc, #116]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b712:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	6892      	ldr	r2, [r2, #8]
 800b71a:	0211      	lsls	r1, r2, #8
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	6952      	ldr	r2, [r2, #20]
 800b720:	0852      	lsrs	r2, r2, #1
 800b722:	3a01      	subs	r2, #1
 800b724:	0652      	lsls	r2, r2, #25
 800b726:	430a      	orrs	r2, r1
 800b728:	4915      	ldr	r1, [pc, #84]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b72a:	4313      	orrs	r3, r2
 800b72c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b72e:	4b14      	ldr	r3, [pc, #80]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a13      	ldr	r2, [pc, #76]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b734:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b738:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b73a:	f7f9 fe71 	bl	8005420 <HAL_GetTick>
 800b73e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b740:	e009      	b.n	800b756 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b742:	f7f9 fe6d 	bl	8005420 <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d902      	bls.n	800b756 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	73fb      	strb	r3, [r7, #15]
          break;
 800b754:	e005      	b.n	800b762 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b756:	4b0a      	ldr	r3, [pc, #40]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0ef      	beq.n	800b742 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b762:	7bfb      	ldrb	r3, [r7, #15]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d106      	bne.n	800b776 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b768:	4b05      	ldr	r3, [pc, #20]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b76a:	691a      	ldr	r2, [r3, #16]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	4903      	ldr	r1, [pc, #12]	@ (800b780 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b772:	4313      	orrs	r3, r2
 800b774:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b776:	7bfb      	ldrb	r3, [r7, #15]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	40021000 	.word	0x40021000

0800b784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b792:	4b69      	ldr	r3, [pc, #420]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	f003 0303 	and.w	r3, r3, #3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d018      	beq.n	800b7d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b79e:	4b66      	ldr	r3, [pc, #408]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f003 0203 	and.w	r2, r3, #3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d10d      	bne.n	800b7ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
       ||
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d009      	beq.n	800b7ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b7b6:	4b60      	ldr	r3, [pc, #384]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	091b      	lsrs	r3, r3, #4
 800b7bc:	f003 0307 	and.w	r3, r3, #7
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
       ||
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d047      	beq.n	800b85a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	73fb      	strb	r3, [r7, #15]
 800b7ce:	e044      	b.n	800b85a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b03      	cmp	r3, #3
 800b7d6:	d018      	beq.n	800b80a <RCCEx_PLLSAI2_Config+0x86>
 800b7d8:	2b03      	cmp	r3, #3
 800b7da:	d825      	bhi.n	800b828 <RCCEx_PLLSAI2_Config+0xa4>
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d002      	beq.n	800b7e6 <RCCEx_PLLSAI2_Config+0x62>
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d009      	beq.n	800b7f8 <RCCEx_PLLSAI2_Config+0x74>
 800b7e4:	e020      	b.n	800b828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b7e6:	4b54      	ldr	r3, [pc, #336]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d11d      	bne.n	800b82e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7f6:	e01a      	b.n	800b82e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b7f8:	4b4f      	ldr	r3, [pc, #316]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b800:	2b00      	cmp	r3, #0
 800b802:	d116      	bne.n	800b832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b808:	e013      	b.n	800b832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b80a:	4b4b      	ldr	r3, [pc, #300]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10f      	bne.n	800b836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b816:	4b48      	ldr	r3, [pc, #288]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d109      	bne.n	800b836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b826:	e006      	b.n	800b836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	73fb      	strb	r3, [r7, #15]
      break;
 800b82c:	e004      	b.n	800b838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b82e:	bf00      	nop
 800b830:	e002      	b.n	800b838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b832:	bf00      	nop
 800b834:	e000      	b.n	800b838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b836:	bf00      	nop
    }

    if(status == HAL_OK)
 800b838:	7bfb      	ldrb	r3, [r7, #15]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10d      	bne.n	800b85a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b83e:	4b3e      	ldr	r3, [pc, #248]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6819      	ldr	r1, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	3b01      	subs	r3, #1
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	430b      	orrs	r3, r1
 800b854:	4938      	ldr	r1, [pc, #224]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b856:	4313      	orrs	r3, r2
 800b858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b85a:	7bfb      	ldrb	r3, [r7, #15]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d166      	bne.n	800b92e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b860:	4b35      	ldr	r3, [pc, #212]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a34      	ldr	r2, [pc, #208]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b86a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b86c:	f7f9 fdd8 	bl	8005420 <HAL_GetTick>
 800b870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b872:	e009      	b.n	800b888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b874:	f7f9 fdd4 	bl	8005420 <HAL_GetTick>
 800b878:	4602      	mov	r2, r0
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d902      	bls.n	800b888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	73fb      	strb	r3, [r7, #15]
        break;
 800b886:	e005      	b.n	800b894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b888:	4b2b      	ldr	r3, [pc, #172]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1ef      	bne.n	800b874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b894:	7bfb      	ldrb	r3, [r7, #15]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d149      	bne.n	800b92e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d110      	bne.n	800b8c2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b8a0:	4b25      	ldr	r3, [pc, #148]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b8a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	6892      	ldr	r2, [r2, #8]
 800b8b0:	0211      	lsls	r1, r2, #8
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	68d2      	ldr	r2, [r2, #12]
 800b8b6:	06d2      	lsls	r2, r2, #27
 800b8b8:	430a      	orrs	r2, r1
 800b8ba:	491f      	ldr	r1, [pc, #124]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	614b      	str	r3, [r1, #20]
 800b8c0:	e011      	b.n	800b8e6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b8c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b8ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	6892      	ldr	r2, [r2, #8]
 800b8d2:	0211      	lsls	r1, r2, #8
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	6912      	ldr	r2, [r2, #16]
 800b8d8:	0852      	lsrs	r2, r2, #1
 800b8da:	3a01      	subs	r2, #1
 800b8dc:	0652      	lsls	r2, r2, #25
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	4915      	ldr	r1, [pc, #84]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b8e6:	4b14      	ldr	r3, [pc, #80]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a13      	ldr	r2, [pc, #76]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8f2:	f7f9 fd95 	bl	8005420 <HAL_GetTick>
 800b8f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b8f8:	e009      	b.n	800b90e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b8fa:	f7f9 fd91 	bl	8005420 <HAL_GetTick>
 800b8fe:	4602      	mov	r2, r0
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	2b02      	cmp	r3, #2
 800b906:	d902      	bls.n	800b90e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800b908:	2303      	movs	r3, #3
 800b90a:	73fb      	strb	r3, [r7, #15]
          break;
 800b90c:	e005      	b.n	800b91a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b90e:	4b0a      	ldr	r3, [pc, #40]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d0ef      	beq.n	800b8fa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d106      	bne.n	800b92e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b920:	4b05      	ldr	r3, [pc, #20]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b922:	695a      	ldr	r2, [r3, #20]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	4903      	ldr	r1, [pc, #12]	@ (800b938 <RCCEx_PLLSAI2_Config+0x1b4>)
 800b92a:	4313      	orrs	r3, r2
 800b92c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	40021000 	.word	0x40021000

0800b93c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e049      	b.n	800b9e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7f9 f82e 	bl	80049c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2202      	movs	r2, #2
 800b96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	3304      	adds	r3, #4
 800b978:	4619      	mov	r1, r3
 800b97a:	4610      	mov	r0, r2
 800b97c:	f000 f9d0 	bl	800bd20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
	...

0800b9ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d001      	beq.n	800ba04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e04f      	b.n	800baa4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2202      	movs	r2, #2
 800ba08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68da      	ldr	r2, [r3, #12]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f042 0201 	orr.w	r2, r2, #1
 800ba1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a23      	ldr	r2, [pc, #140]	@ (800bab0 <HAL_TIM_Base_Start_IT+0xc4>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d01d      	beq.n	800ba62 <HAL_TIM_Base_Start_IT+0x76>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba2e:	d018      	beq.n	800ba62 <HAL_TIM_Base_Start_IT+0x76>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a1f      	ldr	r2, [pc, #124]	@ (800bab4 <HAL_TIM_Base_Start_IT+0xc8>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d013      	beq.n	800ba62 <HAL_TIM_Base_Start_IT+0x76>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a1e      	ldr	r2, [pc, #120]	@ (800bab8 <HAL_TIM_Base_Start_IT+0xcc>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d00e      	beq.n	800ba62 <HAL_TIM_Base_Start_IT+0x76>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a1c      	ldr	r2, [pc, #112]	@ (800babc <HAL_TIM_Base_Start_IT+0xd0>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d009      	beq.n	800ba62 <HAL_TIM_Base_Start_IT+0x76>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a1b      	ldr	r2, [pc, #108]	@ (800bac0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d004      	beq.n	800ba62 <HAL_TIM_Base_Start_IT+0x76>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a19      	ldr	r2, [pc, #100]	@ (800bac4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d115      	bne.n	800ba8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	689a      	ldr	r2, [r3, #8]
 800ba68:	4b17      	ldr	r3, [pc, #92]	@ (800bac8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b06      	cmp	r3, #6
 800ba72:	d015      	beq.n	800baa0 <HAL_TIM_Base_Start_IT+0xb4>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba7a:	d011      	beq.n	800baa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 0201 	orr.w	r2, r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba8c:	e008      	b.n	800baa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f042 0201 	orr.w	r2, r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e000      	b.n	800baa2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	40012c00 	.word	0x40012c00
 800bab4:	40000400 	.word	0x40000400
 800bab8:	40000800 	.word	0x40000800
 800babc:	40000c00 	.word	0x40000c00
 800bac0:	40013400 	.word	0x40013400
 800bac4:	40014000 	.word	0x40014000
 800bac8:	00010007 	.word	0x00010007

0800bacc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f003 0302 	and.w	r3, r3, #2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d020      	beq.n	800bb30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f003 0302 	and.w	r3, r3, #2
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d01b      	beq.n	800bb30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f06f 0202 	mvn.w	r2, #2
 800bb00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	f003 0303 	and.w	r3, r3, #3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f8e4 	bl	800bce4 <HAL_TIM_IC_CaptureCallback>
 800bb1c:	e005      	b.n	800bb2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f8d6 	bl	800bcd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 f8e7 	bl	800bcf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f003 0304 	and.w	r3, r3, #4
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d020      	beq.n	800bb7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f003 0304 	and.w	r3, r3, #4
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d01b      	beq.n	800bb7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f06f 0204 	mvn.w	r2, #4
 800bb4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2202      	movs	r2, #2
 800bb52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f8be 	bl	800bce4 <HAL_TIM_IC_CaptureCallback>
 800bb68:	e005      	b.n	800bb76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f8b0 	bl	800bcd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f8c1 	bl	800bcf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	f003 0308 	and.w	r3, r3, #8
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d020      	beq.n	800bbc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f003 0308 	and.w	r3, r3, #8
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d01b      	beq.n	800bbc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f06f 0208 	mvn.w	r2, #8
 800bb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2204      	movs	r2, #4
 800bb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	f003 0303 	and.w	r3, r3, #3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d003      	beq.n	800bbb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f898 	bl	800bce4 <HAL_TIM_IC_CaptureCallback>
 800bbb4:	e005      	b.n	800bbc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f88a 	bl	800bcd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f89b 	bl	800bcf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f003 0310 	and.w	r3, r3, #16
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d020      	beq.n	800bc14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f003 0310 	and.w	r3, r3, #16
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01b      	beq.n	800bc14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f06f 0210 	mvn.w	r2, #16
 800bbe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2208      	movs	r2, #8
 800bbea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	69db      	ldr	r3, [r3, #28]
 800bbf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f872 	bl	800bce4 <HAL_TIM_IC_CaptureCallback>
 800bc00:	e005      	b.n	800bc0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f864 	bl	800bcd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f875 	bl	800bcf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00c      	beq.n	800bc38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f003 0301 	and.w	r3, r3, #1
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d007      	beq.n	800bc38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f06f 0201 	mvn.w	r2, #1
 800bc30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7f8 fcd0 	bl	80045d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00c      	beq.n	800bc5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d007      	beq.n	800bc5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bc54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f98e 	bl	800bf78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00c      	beq.n	800bc80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d007      	beq.n	800bc80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f986 	bl	800bf8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00c      	beq.n	800bca4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f834 	bl	800bd0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f003 0320 	and.w	r3, r3, #32
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00c      	beq.n	800bcc8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f003 0320 	and.w	r3, r3, #32
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d007      	beq.n	800bcc8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f06f 0220 	mvn.w	r2, #32
 800bcc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f94e 	bl	800bf64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a40      	ldr	r2, [pc, #256]	@ (800be34 <TIM_Base_SetConfig+0x114>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d013      	beq.n	800bd60 <TIM_Base_SetConfig+0x40>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd3e:	d00f      	beq.n	800bd60 <TIM_Base_SetConfig+0x40>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a3d      	ldr	r2, [pc, #244]	@ (800be38 <TIM_Base_SetConfig+0x118>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d00b      	beq.n	800bd60 <TIM_Base_SetConfig+0x40>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a3c      	ldr	r2, [pc, #240]	@ (800be3c <TIM_Base_SetConfig+0x11c>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d007      	beq.n	800bd60 <TIM_Base_SetConfig+0x40>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a3b      	ldr	r2, [pc, #236]	@ (800be40 <TIM_Base_SetConfig+0x120>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d003      	beq.n	800bd60 <TIM_Base_SetConfig+0x40>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a3a      	ldr	r2, [pc, #232]	@ (800be44 <TIM_Base_SetConfig+0x124>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d108      	bne.n	800bd72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a2f      	ldr	r2, [pc, #188]	@ (800be34 <TIM_Base_SetConfig+0x114>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d01f      	beq.n	800bdba <TIM_Base_SetConfig+0x9a>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd80:	d01b      	beq.n	800bdba <TIM_Base_SetConfig+0x9a>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4a2c      	ldr	r2, [pc, #176]	@ (800be38 <TIM_Base_SetConfig+0x118>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d017      	beq.n	800bdba <TIM_Base_SetConfig+0x9a>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a2b      	ldr	r2, [pc, #172]	@ (800be3c <TIM_Base_SetConfig+0x11c>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d013      	beq.n	800bdba <TIM_Base_SetConfig+0x9a>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a2a      	ldr	r2, [pc, #168]	@ (800be40 <TIM_Base_SetConfig+0x120>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d00f      	beq.n	800bdba <TIM_Base_SetConfig+0x9a>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a29      	ldr	r2, [pc, #164]	@ (800be44 <TIM_Base_SetConfig+0x124>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d00b      	beq.n	800bdba <TIM_Base_SetConfig+0x9a>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a28      	ldr	r2, [pc, #160]	@ (800be48 <TIM_Base_SetConfig+0x128>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d007      	beq.n	800bdba <TIM_Base_SetConfig+0x9a>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a27      	ldr	r2, [pc, #156]	@ (800be4c <TIM_Base_SetConfig+0x12c>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d003      	beq.n	800bdba <TIM_Base_SetConfig+0x9a>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a26      	ldr	r2, [pc, #152]	@ (800be50 <TIM_Base_SetConfig+0x130>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d108      	bne.n	800bdcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	695b      	ldr	r3, [r3, #20]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	689a      	ldr	r2, [r3, #8]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a10      	ldr	r2, [pc, #64]	@ (800be34 <TIM_Base_SetConfig+0x114>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d00f      	beq.n	800be18 <TIM_Base_SetConfig+0xf8>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a12      	ldr	r2, [pc, #72]	@ (800be44 <TIM_Base_SetConfig+0x124>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d00b      	beq.n	800be18 <TIM_Base_SetConfig+0xf8>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a11      	ldr	r2, [pc, #68]	@ (800be48 <TIM_Base_SetConfig+0x128>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d007      	beq.n	800be18 <TIM_Base_SetConfig+0xf8>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a10      	ldr	r2, [pc, #64]	@ (800be4c <TIM_Base_SetConfig+0x12c>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d003      	beq.n	800be18 <TIM_Base_SetConfig+0xf8>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a0f      	ldr	r2, [pc, #60]	@ (800be50 <TIM_Base_SetConfig+0x130>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d103      	bne.n	800be20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	691a      	ldr	r2, [r3, #16]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	615a      	str	r2, [r3, #20]
}
 800be26:	bf00      	nop
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	40012c00 	.word	0x40012c00
 800be38:	40000400 	.word	0x40000400
 800be3c:	40000800 	.word	0x40000800
 800be40:	40000c00 	.word	0x40000c00
 800be44:	40013400 	.word	0x40013400
 800be48:	40014000 	.word	0x40014000
 800be4c:	40014400 	.word	0x40014400
 800be50:	40014800 	.word	0x40014800

0800be54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be68:	2302      	movs	r3, #2
 800be6a:	e068      	b.n	800bf3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2202      	movs	r2, #2
 800be78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a2e      	ldr	r2, [pc, #184]	@ (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d004      	beq.n	800bea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a2d      	ldr	r2, [pc, #180]	@ (800bf50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d108      	bne.n	800beb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	4313      	orrs	r3, r2
 800beb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a1e      	ldr	r2, [pc, #120]	@ (800bf4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d01d      	beq.n	800bf12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bede:	d018      	beq.n	800bf12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a1b      	ldr	r2, [pc, #108]	@ (800bf54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d013      	beq.n	800bf12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a1a      	ldr	r2, [pc, #104]	@ (800bf58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d00e      	beq.n	800bf12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a18      	ldr	r2, [pc, #96]	@ (800bf5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d009      	beq.n	800bf12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a13      	ldr	r2, [pc, #76]	@ (800bf50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d004      	beq.n	800bf12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a14      	ldr	r2, [pc, #80]	@ (800bf60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d10c      	bne.n	800bf2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	4313      	orrs	r3, r2
 800bf22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	40012c00 	.word	0x40012c00
 800bf50:	40013400 	.word	0x40013400
 800bf54:	40000400 	.word	0x40000400
 800bf58:	40000800 	.word	0x40000800
 800bf5c:	40000c00 	.word	0x40000c00
 800bf60:	40014000 	.word	0x40014000

0800bf64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d101      	bne.n	800bfb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e040      	b.n	800c034 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d106      	bne.n	800bfc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7f8 fd24 	bl	8004a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2224      	movs	r2, #36	@ 0x24
 800bfcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 0201 	bic.w	r2, r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d002      	beq.n	800bfec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 ff04 	bl	800cdf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fc49 	bl	800c884 <UART_SetConfig>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d101      	bne.n	800bffc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e01b      	b.n	800c034 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	685a      	ldr	r2, [r3, #4]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c00a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	689a      	ldr	r2, [r3, #8]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c01a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f042 0201 	orr.w	r2, r2, #1
 800c02a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 ff83 	bl	800cf38 <UART_CheckIdleState>
 800c032:	4603      	mov	r3, r0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	e02f      	b.n	800c0ae <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2224      	movs	r2, #36	@ 0x24
 800c052:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0201 	bic.w	r2, r2, #1
 800c062:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2200      	movs	r2, #0
 800c072:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2200      	movs	r2, #0
 800c07a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7f8 fe55 	bl	8004d2c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b08a      	sub	sp, #40	@ 0x28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	d165      	bne.n	800c19a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <HAL_UART_Transmit_DMA+0x22>
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e05e      	b.n	800c19c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	88fa      	ldrh	r2, [r7, #6]
 800c0e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	88fa      	ldrh	r2, [r7, #6]
 800c0f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2221      	movs	r2, #33	@ 0x21
 800c100:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c106:	2b00      	cmp	r3, #0
 800c108:	d027      	beq.n	800c15a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c10e:	4a25      	ldr	r2, [pc, #148]	@ (800c1a4 <HAL_UART_Transmit_DMA+0xec>)
 800c110:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c116:	4a24      	ldr	r2, [pc, #144]	@ (800c1a8 <HAL_UART_Transmit_DMA+0xf0>)
 800c118:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c11e:	4a23      	ldr	r2, [pc, #140]	@ (800c1ac <HAL_UART_Transmit_DMA+0xf4>)
 800c120:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c126:	2200      	movs	r2, #0
 800c128:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c132:	4619      	mov	r1, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3328      	adds	r3, #40	@ 0x28
 800c13a:	461a      	mov	r2, r3
 800c13c:	88fb      	ldrh	r3, [r7, #6]
 800c13e:	f7fb f8a9 	bl	8007294 <HAL_DMA_Start_IT>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d008      	beq.n	800c15a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2210      	movs	r2, #16
 800c14c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2220      	movs	r2, #32
 800c154:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e020      	b.n	800c19c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2240      	movs	r2, #64	@ 0x40
 800c160:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3308      	adds	r3, #8
 800c168:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	e853 3f00 	ldrex	r3, [r3]
 800c170:	613b      	str	r3, [r7, #16]
   return(result);
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c178:	627b      	str	r3, [r7, #36]	@ 0x24
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3308      	adds	r3, #8
 800c180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c182:	623a      	str	r2, [r7, #32]
 800c184:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	69f9      	ldr	r1, [r7, #28]
 800c188:	6a3a      	ldr	r2, [r7, #32]
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e5      	bne.n	800c162 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	e000      	b.n	800c19c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c19a:	2302      	movs	r3, #2
  }
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3728      	adds	r7, #40	@ 0x28
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	0800d3ad 	.word	0x0800d3ad
 800c1a8:	0800d447 	.word	0x0800d447
 800c1ac:	0800d5cd 	.word	0x0800d5cd

0800c1b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b08a      	sub	sp, #40	@ 0x28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1c4:	2b20      	cmp	r3, #32
 800c1c6:	d137      	bne.n	800c238 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d002      	beq.n	800c1d4 <HAL_UART_Receive_DMA+0x24>
 800c1ce:	88fb      	ldrh	r3, [r7, #6]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e030      	b.n	800c23a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a18      	ldr	r2, [pc, #96]	@ (800c244 <HAL_UART_Receive_DMA+0x94>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d01f      	beq.n	800c228 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d018      	beq.n	800c228 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	e853 3f00 	ldrex	r3, [r3]
 800c202:	613b      	str	r3, [r7, #16]
   return(result);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c20a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	461a      	mov	r2, r3
 800c212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c214:	623b      	str	r3, [r7, #32]
 800c216:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c218:	69f9      	ldr	r1, [r7, #28]
 800c21a:	6a3a      	ldr	r2, [r7, #32]
 800c21c:	e841 2300 	strex	r3, r2, [r1]
 800c220:	61bb      	str	r3, [r7, #24]
   return(result);
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1e6      	bne.n	800c1f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	461a      	mov	r2, r3
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 ff92 	bl	800d158 <UART_Start_Receive_DMA>
 800c234:	4603      	mov	r3, r0
 800c236:	e000      	b.n	800c23a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c238:	2302      	movs	r3, #2
  }
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3728      	adds	r7, #40	@ 0x28
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	40008000 	.word	0x40008000

0800c248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b0ba      	sub	sp, #232	@ 0xe8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	69db      	ldr	r3, [r3, #28]
 800c256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c26e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c272:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c276:	4013      	ands	r3, r2
 800c278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c27c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c280:	2b00      	cmp	r3, #0
 800c282:	d115      	bne.n	800c2b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c288:	f003 0320 	and.w	r3, r3, #32
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00f      	beq.n	800c2b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c294:	f003 0320 	and.w	r3, r3, #32
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d009      	beq.n	800c2b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f000 82ae 	beq.w	800c802 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	4798      	blx	r3
      }
      return;
 800c2ae:	e2a8      	b.n	800c802 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c2b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 8117 	beq.w	800c4e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c2ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2be:	f003 0301 	and.w	r3, r3, #1
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d106      	bne.n	800c2d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c2c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c2ca:	4b85      	ldr	r3, [pc, #532]	@ (800c4e0 <HAL_UART_IRQHandler+0x298>)
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 810a 	beq.w	800c4e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d011      	beq.n	800c304 <HAL_UART_IRQHandler+0xbc>
 800c2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2fa:	f043 0201 	orr.w	r2, r3, #1
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c308:	f003 0302 	and.w	r3, r3, #2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d011      	beq.n	800c334 <HAL_UART_IRQHandler+0xec>
 800c310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c314:	f003 0301 	and.w	r3, r3, #1
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00b      	beq.n	800c334 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2202      	movs	r2, #2
 800c322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c32a:	f043 0204 	orr.w	r2, r3, #4
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c338:	f003 0304 	and.w	r3, r3, #4
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d011      	beq.n	800c364 <HAL_UART_IRQHandler+0x11c>
 800c340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00b      	beq.n	800c364 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2204      	movs	r2, #4
 800c352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c35a:	f043 0202 	orr.w	r2, r3, #2
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c368:	f003 0308 	and.w	r3, r3, #8
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d017      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c374:	f003 0320 	and.w	r3, r3, #32
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d105      	bne.n	800c388 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c37c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c380:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00b      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2208      	movs	r2, #8
 800c38e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c396:	f043 0208 	orr.w	r2, r3, #8
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d012      	beq.n	800c3d2 <HAL_UART_IRQHandler+0x18a>
 800c3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00c      	beq.n	800c3d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3c8:	f043 0220 	orr.w	r2, r3, #32
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 8214 	beq.w	800c806 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00d      	beq.n	800c406 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c3ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3ee:	f003 0320 	and.w	r3, r3, #32
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c40c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c41a:	2b40      	cmp	r3, #64	@ 0x40
 800c41c:	d005      	beq.n	800c42a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c41e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c422:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c426:	2b00      	cmp	r3, #0
 800c428:	d04f      	beq.n	800c4ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 ff5a 	bl	800d2e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c43a:	2b40      	cmp	r3, #64	@ 0x40
 800c43c:	d141      	bne.n	800c4c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c448:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c44c:	e853 3f00 	ldrex	r3, [r3]
 800c450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c45c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3308      	adds	r3, #8
 800c466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c46a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c46e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c47a:	e841 2300 	strex	r3, r2, [r1]
 800c47e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1d9      	bne.n	800c43e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d013      	beq.n	800c4ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c496:	4a13      	ldr	r2, [pc, #76]	@ (800c4e4 <HAL_UART_IRQHandler+0x29c>)
 800c498:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7fa ff96 	bl	80073d0 <HAL_DMA_Abort_IT>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d017      	beq.n	800c4da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b8:	e00f      	b.n	800c4da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f9cc 	bl	800c858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c0:	e00b      	b.n	800c4da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f9c8 	bl	800c858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c8:	e007      	b.n	800c4da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f9c4 	bl	800c858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c4d8:	e195      	b.n	800c806 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4da:	bf00      	nop
    return;
 800c4dc:	e193      	b.n	800c806 <HAL_UART_IRQHandler+0x5be>
 800c4de:	bf00      	nop
 800c4e0:	04000120 	.word	0x04000120
 800c4e4:	0800d64b 	.word	0x0800d64b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	f040 814e 	bne.w	800c78e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4f6:	f003 0310 	and.w	r3, r3, #16
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 8147 	beq.w	800c78e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c504:	f003 0310 	and.w	r3, r3, #16
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 8140 	beq.w	800c78e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2210      	movs	r2, #16
 800c514:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c520:	2b40      	cmp	r3, #64	@ 0x40
 800c522:	f040 80b8 	bne.w	800c696 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c532:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 8167 	beq.w	800c80a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c546:	429a      	cmp	r2, r3
 800c548:	f080 815f 	bcs.w	800c80a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c552:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0320 	and.w	r3, r3, #32
 800c562:	2b00      	cmp	r3, #0
 800c564:	f040 8086 	bne.w	800c674 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c570:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c57c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c584:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	461a      	mov	r2, r3
 800c58e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c596:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c59e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c5aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1da      	bne.n	800c568 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	3308      	adds	r3, #8
 800c5b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5bc:	e853 3f00 	ldrex	r3, [r3]
 800c5c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5c4:	f023 0301 	bic.w	r3, r3, #1
 800c5c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c5da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c5de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c5e2:	e841 2300 	strex	r3, r2, [r1]
 800c5e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c5e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1e1      	bne.n	800c5b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3308      	adds	r3, #8
 800c5f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5f8:	e853 3f00 	ldrex	r3, [r3]
 800c5fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c5fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3308      	adds	r3, #8
 800c60e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c612:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c614:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c616:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c618:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c61a:	e841 2300 	strex	r3, r2, [r1]
 800c61e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1e3      	bne.n	800c5ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2220      	movs	r2, #32
 800c62a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c63c:	e853 3f00 	ldrex	r3, [r3]
 800c640:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c644:	f023 0310 	bic.w	r3, r3, #16
 800c648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	461a      	mov	r2, r3
 800c652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c656:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c658:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c65c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c65e:	e841 2300 	strex	r3, r2, [r1]
 800c662:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1e4      	bne.n	800c634 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fa fe70 	bl	8007354 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2202      	movs	r2, #2
 800c678:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c686:	b29b      	uxth	r3, r3
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f8ec 	bl	800c86c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c694:	e0b9      	b.n	800c80a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 80ab 	beq.w	800c80e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800c6b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80a6 	beq.w	800c80e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ca:	e853 3f00 	ldrex	r3, [r3]
 800c6ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6ec:	e841 2300 	strex	r3, r2, [r1]
 800c6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e4      	bne.n	800c6c2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3308      	adds	r3, #8
 800c6fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c702:	e853 3f00 	ldrex	r3, [r3]
 800c706:	623b      	str	r3, [r7, #32]
   return(result);
 800c708:	6a3b      	ldr	r3, [r7, #32]
 800c70a:	f023 0301 	bic.w	r3, r3, #1
 800c70e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3308      	adds	r3, #8
 800c718:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c71c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c720:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c724:	e841 2300 	strex	r3, r2, [r1]
 800c728:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1e3      	bne.n	800c6f8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2220      	movs	r2, #32
 800c734:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	e853 3f00 	ldrex	r3, [r3]
 800c750:	60fb      	str	r3, [r7, #12]
   return(result);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f023 0310 	bic.w	r3, r3, #16
 800c758:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	461a      	mov	r2, r3
 800c762:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c766:	61fb      	str	r3, [r7, #28]
 800c768:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	69b9      	ldr	r1, [r7, #24]
 800c76c:	69fa      	ldr	r2, [r7, #28]
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	617b      	str	r3, [r7, #20]
   return(result);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e4      	bne.n	800c744 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2202      	movs	r2, #2
 800c77e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f870 	bl	800c86c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c78c:	e03f      	b.n	800c80e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00e      	beq.n	800c7b8 <HAL_UART_IRQHandler+0x570>
 800c79a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c79e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d008      	beq.n	800c7b8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c7ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 ff8a 	bl	800d6ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7b6:	e02d      	b.n	800c814 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00e      	beq.n	800c7e2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d008      	beq.n	800c7e2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d01c      	beq.n	800c812 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	4798      	blx	r3
    }
    return;
 800c7e0:	e017      	b.n	800c812 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d012      	beq.n	800c814 <HAL_UART_IRQHandler+0x5cc>
 800c7ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00c      	beq.n	800c814 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 ff3b 	bl	800d676 <UART_EndTransmit_IT>
    return;
 800c800:	e008      	b.n	800c814 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c802:	bf00      	nop
 800c804:	e006      	b.n	800c814 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c806:	bf00      	nop
 800c808:	e004      	b.n	800c814 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c80a:	bf00      	nop
 800c80c:	e002      	b.n	800c814 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c80e:	bf00      	nop
 800c810:	e000      	b.n	800c814 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c812:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c814:	37e8      	adds	r7, #232	@ 0xe8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop

0800c81c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c824:	bf00      	nop
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c888:	b08a      	sub	sp, #40	@ 0x28
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	689a      	ldr	r2, [r3, #8]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	431a      	orrs	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	69db      	ldr	r3, [r3, #28]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4ba4      	ldr	r3, [pc, #656]	@ (800cb44 <UART_SetConfig+0x2c0>)
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	6812      	ldr	r2, [r2, #0]
 800c8ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8bc:	430b      	orrs	r3, r1
 800c8be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	68da      	ldr	r2, [r3, #12]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a99      	ldr	r2, [pc, #612]	@ (800cb48 <UART_SetConfig+0x2c4>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d004      	beq.n	800c8f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c900:	430a      	orrs	r2, r1
 800c902:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a90      	ldr	r2, [pc, #576]	@ (800cb4c <UART_SetConfig+0x2c8>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d126      	bne.n	800c95c <UART_SetConfig+0xd8>
 800c90e:	4b90      	ldr	r3, [pc, #576]	@ (800cb50 <UART_SetConfig+0x2cc>)
 800c910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c914:	f003 0303 	and.w	r3, r3, #3
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d81b      	bhi.n	800c954 <UART_SetConfig+0xd0>
 800c91c:	a201      	add	r2, pc, #4	@ (adr r2, 800c924 <UART_SetConfig+0xa0>)
 800c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c922:	bf00      	nop
 800c924:	0800c935 	.word	0x0800c935
 800c928:	0800c945 	.word	0x0800c945
 800c92c:	0800c93d 	.word	0x0800c93d
 800c930:	0800c94d 	.word	0x0800c94d
 800c934:	2301      	movs	r3, #1
 800c936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c93a:	e116      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c93c:	2302      	movs	r3, #2
 800c93e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c942:	e112      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c944:	2304      	movs	r3, #4
 800c946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c94a:	e10e      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c94c:	2308      	movs	r3, #8
 800c94e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c952:	e10a      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c954:	2310      	movs	r3, #16
 800c956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c95a:	e106      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a7c      	ldr	r2, [pc, #496]	@ (800cb54 <UART_SetConfig+0x2d0>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d138      	bne.n	800c9d8 <UART_SetConfig+0x154>
 800c966:	4b7a      	ldr	r3, [pc, #488]	@ (800cb50 <UART_SetConfig+0x2cc>)
 800c968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c96c:	f003 030c 	and.w	r3, r3, #12
 800c970:	2b0c      	cmp	r3, #12
 800c972:	d82d      	bhi.n	800c9d0 <UART_SetConfig+0x14c>
 800c974:	a201      	add	r2, pc, #4	@ (adr r2, 800c97c <UART_SetConfig+0xf8>)
 800c976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97a:	bf00      	nop
 800c97c:	0800c9b1 	.word	0x0800c9b1
 800c980:	0800c9d1 	.word	0x0800c9d1
 800c984:	0800c9d1 	.word	0x0800c9d1
 800c988:	0800c9d1 	.word	0x0800c9d1
 800c98c:	0800c9c1 	.word	0x0800c9c1
 800c990:	0800c9d1 	.word	0x0800c9d1
 800c994:	0800c9d1 	.word	0x0800c9d1
 800c998:	0800c9d1 	.word	0x0800c9d1
 800c99c:	0800c9b9 	.word	0x0800c9b9
 800c9a0:	0800c9d1 	.word	0x0800c9d1
 800c9a4:	0800c9d1 	.word	0x0800c9d1
 800c9a8:	0800c9d1 	.word	0x0800c9d1
 800c9ac:	0800c9c9 	.word	0x0800c9c9
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9b6:	e0d8      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9be:	e0d4      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c9c0:	2304      	movs	r3, #4
 800c9c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9c6:	e0d0      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c9c8:	2308      	movs	r3, #8
 800c9ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9ce:	e0cc      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c9d0:	2310      	movs	r3, #16
 800c9d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9d6:	e0c8      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a5e      	ldr	r2, [pc, #376]	@ (800cb58 <UART_SetConfig+0x2d4>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d125      	bne.n	800ca2e <UART_SetConfig+0x1aa>
 800c9e2:	4b5b      	ldr	r3, [pc, #364]	@ (800cb50 <UART_SetConfig+0x2cc>)
 800c9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c9ec:	2b30      	cmp	r3, #48	@ 0x30
 800c9ee:	d016      	beq.n	800ca1e <UART_SetConfig+0x19a>
 800c9f0:	2b30      	cmp	r3, #48	@ 0x30
 800c9f2:	d818      	bhi.n	800ca26 <UART_SetConfig+0x1a2>
 800c9f4:	2b20      	cmp	r3, #32
 800c9f6:	d00a      	beq.n	800ca0e <UART_SetConfig+0x18a>
 800c9f8:	2b20      	cmp	r3, #32
 800c9fa:	d814      	bhi.n	800ca26 <UART_SetConfig+0x1a2>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <UART_SetConfig+0x182>
 800ca00:	2b10      	cmp	r3, #16
 800ca02:	d008      	beq.n	800ca16 <UART_SetConfig+0x192>
 800ca04:	e00f      	b.n	800ca26 <UART_SetConfig+0x1a2>
 800ca06:	2300      	movs	r3, #0
 800ca08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca0c:	e0ad      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca0e:	2302      	movs	r3, #2
 800ca10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca14:	e0a9      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca16:	2304      	movs	r3, #4
 800ca18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca1c:	e0a5      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca1e:	2308      	movs	r3, #8
 800ca20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca24:	e0a1      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca26:	2310      	movs	r3, #16
 800ca28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca2c:	e09d      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a4a      	ldr	r2, [pc, #296]	@ (800cb5c <UART_SetConfig+0x2d8>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d125      	bne.n	800ca84 <UART_SetConfig+0x200>
 800ca38:	4b45      	ldr	r3, [pc, #276]	@ (800cb50 <UART_SetConfig+0x2cc>)
 800ca3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ca42:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca44:	d016      	beq.n	800ca74 <UART_SetConfig+0x1f0>
 800ca46:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca48:	d818      	bhi.n	800ca7c <UART_SetConfig+0x1f8>
 800ca4a:	2b80      	cmp	r3, #128	@ 0x80
 800ca4c:	d00a      	beq.n	800ca64 <UART_SetConfig+0x1e0>
 800ca4e:	2b80      	cmp	r3, #128	@ 0x80
 800ca50:	d814      	bhi.n	800ca7c <UART_SetConfig+0x1f8>
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d002      	beq.n	800ca5c <UART_SetConfig+0x1d8>
 800ca56:	2b40      	cmp	r3, #64	@ 0x40
 800ca58:	d008      	beq.n	800ca6c <UART_SetConfig+0x1e8>
 800ca5a:	e00f      	b.n	800ca7c <UART_SetConfig+0x1f8>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca62:	e082      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca64:	2302      	movs	r3, #2
 800ca66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca6a:	e07e      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca6c:	2304      	movs	r3, #4
 800ca6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca72:	e07a      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca74:	2308      	movs	r3, #8
 800ca76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca7a:	e076      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca7c:	2310      	movs	r3, #16
 800ca7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca82:	e072      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a35      	ldr	r2, [pc, #212]	@ (800cb60 <UART_SetConfig+0x2dc>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d12a      	bne.n	800cae4 <UART_SetConfig+0x260>
 800ca8e:	4b30      	ldr	r3, [pc, #192]	@ (800cb50 <UART_SetConfig+0x2cc>)
 800ca90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca9c:	d01a      	beq.n	800cad4 <UART_SetConfig+0x250>
 800ca9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800caa2:	d81b      	bhi.n	800cadc <UART_SetConfig+0x258>
 800caa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caa8:	d00c      	beq.n	800cac4 <UART_SetConfig+0x240>
 800caaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caae:	d815      	bhi.n	800cadc <UART_SetConfig+0x258>
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d003      	beq.n	800cabc <UART_SetConfig+0x238>
 800cab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cab8:	d008      	beq.n	800cacc <UART_SetConfig+0x248>
 800caba:	e00f      	b.n	800cadc <UART_SetConfig+0x258>
 800cabc:	2300      	movs	r3, #0
 800cabe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cac2:	e052      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cac4:	2302      	movs	r3, #2
 800cac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caca:	e04e      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cacc:	2304      	movs	r3, #4
 800cace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cad2:	e04a      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cad4:	2308      	movs	r3, #8
 800cad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cada:	e046      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cadc:	2310      	movs	r3, #16
 800cade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cae2:	e042      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a17      	ldr	r2, [pc, #92]	@ (800cb48 <UART_SetConfig+0x2c4>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d13a      	bne.n	800cb64 <UART_SetConfig+0x2e0>
 800caee:	4b18      	ldr	r3, [pc, #96]	@ (800cb50 <UART_SetConfig+0x2cc>)
 800caf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800caf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cafc:	d01a      	beq.n	800cb34 <UART_SetConfig+0x2b0>
 800cafe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb02:	d81b      	bhi.n	800cb3c <UART_SetConfig+0x2b8>
 800cb04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb08:	d00c      	beq.n	800cb24 <UART_SetConfig+0x2a0>
 800cb0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb0e:	d815      	bhi.n	800cb3c <UART_SetConfig+0x2b8>
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d003      	beq.n	800cb1c <UART_SetConfig+0x298>
 800cb14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb18:	d008      	beq.n	800cb2c <UART_SetConfig+0x2a8>
 800cb1a:	e00f      	b.n	800cb3c <UART_SetConfig+0x2b8>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb22:	e022      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cb24:	2302      	movs	r3, #2
 800cb26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb2a:	e01e      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cb2c:	2304      	movs	r3, #4
 800cb2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb32:	e01a      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cb34:	2308      	movs	r3, #8
 800cb36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb3a:	e016      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cb3c:	2310      	movs	r3, #16
 800cb3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb42:	e012      	b.n	800cb6a <UART_SetConfig+0x2e6>
 800cb44:	efff69f3 	.word	0xefff69f3
 800cb48:	40008000 	.word	0x40008000
 800cb4c:	40013800 	.word	0x40013800
 800cb50:	40021000 	.word	0x40021000
 800cb54:	40004400 	.word	0x40004400
 800cb58:	40004800 	.word	0x40004800
 800cb5c:	40004c00 	.word	0x40004c00
 800cb60:	40005000 	.word	0x40005000
 800cb64:	2310      	movs	r3, #16
 800cb66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a9f      	ldr	r2, [pc, #636]	@ (800cdec <UART_SetConfig+0x568>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d17a      	bne.n	800cc6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cb78:	2b08      	cmp	r3, #8
 800cb7a:	d824      	bhi.n	800cbc6 <UART_SetConfig+0x342>
 800cb7c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb84 <UART_SetConfig+0x300>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cba9 	.word	0x0800cba9
 800cb88:	0800cbc7 	.word	0x0800cbc7
 800cb8c:	0800cbb1 	.word	0x0800cbb1
 800cb90:	0800cbc7 	.word	0x0800cbc7
 800cb94:	0800cbb7 	.word	0x0800cbb7
 800cb98:	0800cbc7 	.word	0x0800cbc7
 800cb9c:	0800cbc7 	.word	0x0800cbc7
 800cba0:	0800cbc7 	.word	0x0800cbc7
 800cba4:	0800cbbf 	.word	0x0800cbbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cba8:	f7fe f972 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 800cbac:	61f8      	str	r0, [r7, #28]
        break;
 800cbae:	e010      	b.n	800cbd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbb0:	4b8f      	ldr	r3, [pc, #572]	@ (800cdf0 <UART_SetConfig+0x56c>)
 800cbb2:	61fb      	str	r3, [r7, #28]
        break;
 800cbb4:	e00d      	b.n	800cbd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbb6:	f7fe f8d3 	bl	800ad60 <HAL_RCC_GetSysClockFreq>
 800cbba:	61f8      	str	r0, [r7, #28]
        break;
 800cbbc:	e009      	b.n	800cbd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbc2:	61fb      	str	r3, [r7, #28]
        break;
 800cbc4:	e005      	b.n	800cbd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cbd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 80fb 	beq.w	800cdd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	69fa      	ldr	r2, [r7, #28]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d305      	bcc.n	800cbf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cbf0:	69fa      	ldr	r2, [r7, #28]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d903      	bls.n	800cbfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cbfc:	e0e8      	b.n	800cdd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	2200      	movs	r2, #0
 800cc02:	461c      	mov	r4, r3
 800cc04:	4615      	mov	r5, r2
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	f04f 0300 	mov.w	r3, #0
 800cc0e:	022b      	lsls	r3, r5, #8
 800cc10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cc14:	0222      	lsls	r2, r4, #8
 800cc16:	68f9      	ldr	r1, [r7, #12]
 800cc18:	6849      	ldr	r1, [r1, #4]
 800cc1a:	0849      	lsrs	r1, r1, #1
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	4688      	mov	r8, r1
 800cc20:	4681      	mov	r9, r0
 800cc22:	eb12 0a08 	adds.w	sl, r2, r8
 800cc26:	eb43 0b09 	adc.w	fp, r3, r9
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	603b      	str	r3, [r7, #0]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc38:	4650      	mov	r0, sl
 800cc3a:	4659      	mov	r1, fp
 800cc3c:	f7f3 fad6 	bl	80001ec <__aeabi_uldivmod>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4613      	mov	r3, r2
 800cc46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc4e:	d308      	bcc.n	800cc62 <UART_SetConfig+0x3de>
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc56:	d204      	bcs.n	800cc62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	69ba      	ldr	r2, [r7, #24]
 800cc5e:	60da      	str	r2, [r3, #12]
 800cc60:	e0b6      	b.n	800cdd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cc68:	e0b2      	b.n	800cdd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc72:	d15e      	bne.n	800cd32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800cc74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cc78:	2b08      	cmp	r3, #8
 800cc7a:	d828      	bhi.n	800ccce <UART_SetConfig+0x44a>
 800cc7c:	a201      	add	r2, pc, #4	@ (adr r2, 800cc84 <UART_SetConfig+0x400>)
 800cc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc82:	bf00      	nop
 800cc84:	0800cca9 	.word	0x0800cca9
 800cc88:	0800ccb1 	.word	0x0800ccb1
 800cc8c:	0800ccb9 	.word	0x0800ccb9
 800cc90:	0800cccf 	.word	0x0800cccf
 800cc94:	0800ccbf 	.word	0x0800ccbf
 800cc98:	0800cccf 	.word	0x0800cccf
 800cc9c:	0800cccf 	.word	0x0800cccf
 800cca0:	0800cccf 	.word	0x0800cccf
 800cca4:	0800ccc7 	.word	0x0800ccc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cca8:	f7fe f8f2 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 800ccac:	61f8      	str	r0, [r7, #28]
        break;
 800ccae:	e014      	b.n	800ccda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccb0:	f7fe f904 	bl	800aebc <HAL_RCC_GetPCLK2Freq>
 800ccb4:	61f8      	str	r0, [r7, #28]
        break;
 800ccb6:	e010      	b.n	800ccda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ccb8:	4b4d      	ldr	r3, [pc, #308]	@ (800cdf0 <UART_SetConfig+0x56c>)
 800ccba:	61fb      	str	r3, [r7, #28]
        break;
 800ccbc:	e00d      	b.n	800ccda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccbe:	f7fe f84f 	bl	800ad60 <HAL_RCC_GetSysClockFreq>
 800ccc2:	61f8      	str	r0, [r7, #28]
        break;
 800ccc4:	e009      	b.n	800ccda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccca:	61fb      	str	r3, [r7, #28]
        break;
 800cccc:	e005      	b.n	800ccda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ccd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d077      	beq.n	800cdd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	005a      	lsls	r2, r3, #1
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	085b      	lsrs	r3, r3, #1
 800ccea:	441a      	add	r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	2b0f      	cmp	r3, #15
 800ccfa:	d916      	bls.n	800cd2a <UART_SetConfig+0x4a6>
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd02:	d212      	bcs.n	800cd2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	f023 030f 	bic.w	r3, r3, #15
 800cd0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	085b      	lsrs	r3, r3, #1
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	f003 0307 	and.w	r3, r3, #7
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	8afb      	ldrh	r3, [r7, #22]
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	8afa      	ldrh	r2, [r7, #22]
 800cd26:	60da      	str	r2, [r3, #12]
 800cd28:	e052      	b.n	800cdd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cd30:	e04e      	b.n	800cdd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cd36:	2b08      	cmp	r3, #8
 800cd38:	d827      	bhi.n	800cd8a <UART_SetConfig+0x506>
 800cd3a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd40 <UART_SetConfig+0x4bc>)
 800cd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd40:	0800cd65 	.word	0x0800cd65
 800cd44:	0800cd6d 	.word	0x0800cd6d
 800cd48:	0800cd75 	.word	0x0800cd75
 800cd4c:	0800cd8b 	.word	0x0800cd8b
 800cd50:	0800cd7b 	.word	0x0800cd7b
 800cd54:	0800cd8b 	.word	0x0800cd8b
 800cd58:	0800cd8b 	.word	0x0800cd8b
 800cd5c:	0800cd8b 	.word	0x0800cd8b
 800cd60:	0800cd83 	.word	0x0800cd83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd64:	f7fe f894 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 800cd68:	61f8      	str	r0, [r7, #28]
        break;
 800cd6a:	e014      	b.n	800cd96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd6c:	f7fe f8a6 	bl	800aebc <HAL_RCC_GetPCLK2Freq>
 800cd70:	61f8      	str	r0, [r7, #28]
        break;
 800cd72:	e010      	b.n	800cd96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd74:	4b1e      	ldr	r3, [pc, #120]	@ (800cdf0 <UART_SetConfig+0x56c>)
 800cd76:	61fb      	str	r3, [r7, #28]
        break;
 800cd78:	e00d      	b.n	800cd96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd7a:	f7fd fff1 	bl	800ad60 <HAL_RCC_GetSysClockFreq>
 800cd7e:	61f8      	str	r0, [r7, #28]
        break;
 800cd80:	e009      	b.n	800cd96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd86:	61fb      	str	r3, [r7, #28]
        break;
 800cd88:	e005      	b.n	800cd96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cd94:	bf00      	nop
    }

    if (pclk != 0U)
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d019      	beq.n	800cdd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	085a      	lsrs	r2, r3, #1
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	441a      	add	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	2b0f      	cmp	r3, #15
 800cdb4:	d909      	bls.n	800cdca <UART_SetConfig+0x546>
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdbc:	d205      	bcs.n	800cdca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	60da      	str	r2, [r3, #12]
 800cdc8:	e002      	b.n	800cdd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cddc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3728      	adds	r7, #40	@ 0x28
 800cde4:	46bd      	mov	sp, r7
 800cde6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdea:	bf00      	nop
 800cdec:	40008000 	.word	0x40008000
 800cdf0:	00f42400 	.word	0x00f42400

0800cdf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce00:	f003 0308 	and.w	r3, r3, #8
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00a      	beq.n	800ce1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	430a      	orrs	r2, r1
 800ce1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce22:	f003 0301 	and.w	r3, r3, #1
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00a      	beq.n	800ce40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	430a      	orrs	r2, r1
 800ce3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce44:	f003 0302 	and.w	r3, r3, #2
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00a      	beq.n	800ce62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce66:	f003 0304 	and.w	r3, r3, #4
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00a      	beq.n	800ce84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	430a      	orrs	r2, r1
 800ce82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce88:	f003 0310 	and.w	r3, r3, #16
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00a      	beq.n	800cea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	430a      	orrs	r2, r1
 800cea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceaa:	f003 0320 	and.w	r3, r3, #32
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00a      	beq.n	800cec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	430a      	orrs	r2, r1
 800cec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01a      	beq.n	800cf0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	430a      	orrs	r2, r1
 800cee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cef2:	d10a      	bne.n	800cf0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	430a      	orrs	r2, r1
 800cf08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00a      	beq.n	800cf2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	605a      	str	r2, [r3, #4]
  }
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b098      	sub	sp, #96	@ 0x60
 800cf3c:	af02      	add	r7, sp, #8
 800cf3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf48:	f7f8 fa6a 	bl	8005420 <HAL_GetTick>
 800cf4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f003 0308 	and.w	r3, r3, #8
 800cf58:	2b08      	cmp	r3, #8
 800cf5a:	d12e      	bne.n	800cfba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf64:	2200      	movs	r2, #0
 800cf66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f88c 	bl	800d088 <UART_WaitOnFlagUntilTimeout>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d021      	beq.n	800cfba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7e:	e853 3f00 	ldrex	r3, [r3]
 800cf82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf8a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	461a      	mov	r2, r3
 800cf92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf94:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1e6      	bne.n	800cf76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2220      	movs	r2, #32
 800cfac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	e062      	b.n	800d080 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0304 	and.w	r3, r3, #4
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	d149      	bne.n	800d05c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f856 	bl	800d088 <UART_WaitOnFlagUntilTimeout>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d03c      	beq.n	800d05c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfea:	e853 3f00 	ldrex	r3, [r3]
 800cfee:	623b      	str	r3, [r7, #32]
   return(result);
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	461a      	mov	r2, r3
 800cffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d000:	633b      	str	r3, [r7, #48]	@ 0x30
 800d002:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d004:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d008:	e841 2300 	strex	r3, r2, [r1]
 800d00c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1e6      	bne.n	800cfe2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	3308      	adds	r3, #8
 800d01a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	e853 3f00 	ldrex	r3, [r3]
 800d022:	60fb      	str	r3, [r7, #12]
   return(result);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f023 0301 	bic.w	r3, r3, #1
 800d02a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	3308      	adds	r3, #8
 800d032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d034:	61fa      	str	r2, [r7, #28]
 800d036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d038:	69b9      	ldr	r1, [r7, #24]
 800d03a:	69fa      	ldr	r2, [r7, #28]
 800d03c:	e841 2300 	strex	r3, r2, [r1]
 800d040:	617b      	str	r3, [r7, #20]
   return(result);
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1e5      	bne.n	800d014 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2220      	movs	r2, #32
 800d04c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d058:	2303      	movs	r3, #3
 800d05a:	e011      	b.n	800d080 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2220      	movs	r2, #32
 800d060:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2220      	movs	r2, #32
 800d066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3758      	adds	r7, #88	@ 0x58
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	603b      	str	r3, [r7, #0]
 800d094:	4613      	mov	r3, r2
 800d096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d098:	e049      	b.n	800d12e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0a0:	d045      	beq.n	800d12e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0a2:	f7f8 f9bd 	bl	8005420 <HAL_GetTick>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d302      	bcc.n	800d0b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d101      	bne.n	800d0bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	e048      	b.n	800d14e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 0304 	and.w	r3, r3, #4
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d031      	beq.n	800d12e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	69db      	ldr	r3, [r3, #28]
 800d0d0:	f003 0308 	and.w	r3, r3, #8
 800d0d4:	2b08      	cmp	r3, #8
 800d0d6:	d110      	bne.n	800d0fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2208      	movs	r2, #8
 800d0de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 f8ff 	bl	800d2e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2208      	movs	r2, #8
 800d0ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e029      	b.n	800d14e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	69db      	ldr	r3, [r3, #28]
 800d100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d108:	d111      	bne.n	800d12e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f000 f8e5 	bl	800d2e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2220      	movs	r2, #32
 800d11e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d12a:	2303      	movs	r3, #3
 800d12c:	e00f      	b.n	800d14e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	69da      	ldr	r2, [r3, #28]
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	4013      	ands	r3, r2
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	bf0c      	ite	eq
 800d13e:	2301      	moveq	r3, #1
 800d140:	2300      	movne	r3, #0
 800d142:	b2db      	uxtb	r3, r3
 800d144:	461a      	mov	r2, r3
 800d146:	79fb      	ldrb	r3, [r7, #7]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d0a6      	beq.n	800d09a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
	...

0800d158 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b096      	sub	sp, #88	@ 0x58
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	4613      	mov	r3, r2
 800d164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	88fa      	ldrh	r2, [r7, #6]
 800d170:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2222      	movs	r2, #34	@ 0x22
 800d180:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d028      	beq.n	800d1de <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d190:	4a3e      	ldr	r2, [pc, #248]	@ (800d28c <UART_Start_Receive_DMA+0x134>)
 800d192:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d198:	4a3d      	ldr	r2, [pc, #244]	@ (800d290 <UART_Start_Receive_DMA+0x138>)
 800d19a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1a0:	4a3c      	ldr	r2, [pc, #240]	@ (800d294 <UART_Start_Receive_DMA+0x13c>)
 800d1a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	3324      	adds	r3, #36	@ 0x24
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1bc:	461a      	mov	r2, r3
 800d1be:	88fb      	ldrh	r3, [r7, #6]
 800d1c0:	f7fa f868 	bl	8007294 <HAL_DMA_Start_IT>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d009      	beq.n	800d1de <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2210      	movs	r2, #16
 800d1ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2220      	movs	r2, #32
 800d1d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e051      	b.n	800d282 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d018      	beq.n	800d218 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ee:	e853 3f00 	ldrex	r3, [r3]
 800d1f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	461a      	mov	r2, r3
 800d202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d204:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d206:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d208:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d20a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d20c:	e841 2300 	strex	r3, r2, [r1]
 800d210:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1e6      	bne.n	800d1e6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3308      	adds	r3, #8
 800d21e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d222:	e853 3f00 	ldrex	r3, [r3]
 800d226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22a:	f043 0301 	orr.w	r3, r3, #1
 800d22e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3308      	adds	r3, #8
 800d236:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d238:	637a      	str	r2, [r7, #52]	@ 0x34
 800d23a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d23e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e5      	bne.n	800d218 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3308      	adds	r3, #8
 800d252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	e853 3f00 	ldrex	r3, [r3]
 800d25a:	613b      	str	r3, [r7, #16]
   return(result);
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3308      	adds	r3, #8
 800d26a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d26c:	623a      	str	r2, [r7, #32]
 800d26e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d270:	69f9      	ldr	r1, [r7, #28]
 800d272:	6a3a      	ldr	r2, [r7, #32]
 800d274:	e841 2300 	strex	r3, r2, [r1]
 800d278:	61bb      	str	r3, [r7, #24]
   return(result);
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1e5      	bne.n	800d24c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3758      	adds	r7, #88	@ 0x58
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	0800d463 	.word	0x0800d463
 800d290:	0800d58f 	.word	0x0800d58f
 800d294:	0800d5cd 	.word	0x0800d5cd

0800d298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d298:	b480      	push	{r7}
 800d29a:	b089      	sub	sp, #36	@ 0x24
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	e853 3f00 	ldrex	r3, [r3]
 800d2ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d2b4:	61fb      	str	r3, [r7, #28]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	61bb      	str	r3, [r7, #24]
 800d2c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c2:	6979      	ldr	r1, [r7, #20]
 800d2c4:	69ba      	ldr	r2, [r7, #24]
 800d2c6:	e841 2300 	strex	r3, r2, [r1]
 800d2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1e6      	bne.n	800d2a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2220      	movs	r2, #32
 800d2d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d2d8:	bf00      	nop
 800d2da:	3724      	adds	r7, #36	@ 0x24
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b095      	sub	sp, #84	@ 0x54
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2f4:	e853 3f00 	ldrex	r3, [r3]
 800d2f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	461a      	mov	r2, r3
 800d308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d30a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d30c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d310:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d312:	e841 2300 	strex	r3, r2, [r1]
 800d316:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e6      	bne.n	800d2ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3308      	adds	r3, #8
 800d324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	e853 3f00 	ldrex	r3, [r3]
 800d32c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	f023 0301 	bic.w	r3, r3, #1
 800d334:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3308      	adds	r3, #8
 800d33c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d33e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d340:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d342:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d346:	e841 2300 	strex	r3, r2, [r1]
 800d34a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d1e5      	bne.n	800d31e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d356:	2b01      	cmp	r3, #1
 800d358:	d118      	bne.n	800d38c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	e853 3f00 	ldrex	r3, [r3]
 800d366:	60bb      	str	r3, [r7, #8]
   return(result);
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f023 0310 	bic.w	r3, r3, #16
 800d36e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d378:	61bb      	str	r3, [r7, #24]
 800d37a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37c:	6979      	ldr	r1, [r7, #20]
 800d37e:	69ba      	ldr	r2, [r7, #24]
 800d380:	e841 2300 	strex	r3, r2, [r1]
 800d384:	613b      	str	r3, [r7, #16]
   return(result);
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1e6      	bne.n	800d35a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2220      	movs	r2, #32
 800d390:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d3a0:	bf00      	nop
 800d3a2:	3754      	adds	r7, #84	@ 0x54
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b090      	sub	sp, #64	@ 0x40
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f003 0320 	and.w	r3, r3, #32
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d137      	bne.n	800d438 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3da:	e853 3f00 	ldrex	r3, [r3]
 800d3de:	623b      	str	r3, [r7, #32]
   return(result);
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
 800d3e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3f0:	633a      	str	r2, [r7, #48]	@ 0x30
 800d3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3f8:	e841 2300 	strex	r3, r2, [r1]
 800d3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1e5      	bne.n	800d3d0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	e853 3f00 	ldrex	r3, [r3]
 800d410:	60fb      	str	r3, [r7, #12]
   return(result);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d418:	637b      	str	r3, [r7, #52]	@ 0x34
 800d41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	461a      	mov	r2, r3
 800d420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d422:	61fb      	str	r3, [r7, #28]
 800d424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d426:	69b9      	ldr	r1, [r7, #24]
 800d428:	69fa      	ldr	r2, [r7, #28]
 800d42a:	e841 2300 	strex	r3, r2, [r1]
 800d42e:	617b      	str	r3, [r7, #20]
   return(result);
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1e6      	bne.n	800d404 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d436:	e002      	b.n	800d43e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d438:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d43a:	f7ff f9ef 	bl	800c81c <HAL_UART_TxCpltCallback>
}
 800d43e:	bf00      	nop
 800d440:	3740      	adds	r7, #64	@ 0x40
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b084      	sub	sp, #16
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d452:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7ff f9eb 	bl	800c830 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d45a:	bf00      	nop
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b09c      	sub	sp, #112	@ 0x70
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f003 0320 	and.w	r3, r3, #32
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d171      	bne.n	800d562 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d47e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d480:	2200      	movs	r2, #0
 800d482:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d48e:	e853 3f00 	ldrex	r3, [r3]
 800d492:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d496:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d49a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d49c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4ac:	e841 2300 	strex	r3, r2, [r1]
 800d4b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1e6      	bne.n	800d486 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	3308      	adds	r3, #8
 800d4be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c2:	e853 3f00 	ldrex	r3, [r3]
 800d4c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ca:	f023 0301 	bic.w	r3, r3, #1
 800d4ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800d4d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d4d8:	647a      	str	r2, [r7, #68]	@ 0x44
 800d4da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4e0:	e841 2300 	strex	r3, r2, [r1]
 800d4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1e5      	bne.n	800d4b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3308      	adds	r3, #8
 800d4f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f6:	e853 3f00 	ldrex	r3, [r3]
 800d4fa:	623b      	str	r3, [r7, #32]
   return(result);
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d502:	663b      	str	r3, [r7, #96]	@ 0x60
 800d504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	3308      	adds	r3, #8
 800d50a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d50c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d50e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d514:	e841 2300 	strex	r3, r2, [r1]
 800d518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1e5      	bne.n	800d4ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d522:	2220      	movs	r2, #32
 800d524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d52a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d118      	bne.n	800d562 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	e853 3f00 	ldrex	r3, [r3]
 800d53c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f023 0310 	bic.w	r3, r3, #16
 800d544:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	461a      	mov	r2, r3
 800d54c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d54e:	61fb      	str	r3, [r7, #28]
 800d550:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d552:	69b9      	ldr	r1, [r7, #24]
 800d554:	69fa      	ldr	r2, [r7, #28]
 800d556:	e841 2300 	strex	r3, r2, [r1]
 800d55a:	617b      	str	r3, [r7, #20]
   return(result);
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1e6      	bne.n	800d530 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d564:	2200      	movs	r2, #0
 800d566:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d56a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d107      	bne.n	800d580 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d576:	4619      	mov	r1, r3
 800d578:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d57a:	f7ff f977 	bl	800c86c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d57e:	e002      	b.n	800d586 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d580:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d582:	f7f6 ffe7 	bl	8004554 <HAL_UART_RxCpltCallback>
}
 800d586:	bf00      	nop
 800d588:	3770      	adds	r7, #112	@ 0x70
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b084      	sub	sp, #16
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d59a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d109      	bne.n	800d5be <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d5b0:	085b      	lsrs	r3, r3, #1
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f7ff f958 	bl	800c86c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5bc:	e002      	b.n	800d5c4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f7ff f940 	bl	800c844 <HAL_UART_RxHalfCpltCallback>
}
 800d5c4:	bf00      	nop
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5f2:	2b80      	cmp	r3, #128	@ 0x80
 800d5f4:	d109      	bne.n	800d60a <UART_DMAError+0x3e>
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	2b21      	cmp	r3, #33	@ 0x21
 800d5fa:	d106      	bne.n	800d60a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d604:	6978      	ldr	r0, [r7, #20]
 800d606:	f7ff fe47 	bl	800d298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d614:	2b40      	cmp	r3, #64	@ 0x40
 800d616:	d109      	bne.n	800d62c <UART_DMAError+0x60>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2b22      	cmp	r3, #34	@ 0x22
 800d61c:	d106      	bne.n	800d62c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2200      	movs	r2, #0
 800d622:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d626:	6978      	ldr	r0, [r7, #20]
 800d628:	f7ff fe5c 	bl	800d2e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d632:	f043 0210 	orr.w	r2, r3, #16
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d63c:	6978      	ldr	r0, [r7, #20]
 800d63e:	f7ff f90b 	bl	800c858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d642:	bf00      	nop
 800d644:	3718      	adds	r7, #24
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b084      	sub	sp, #16
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d656:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7ff f8f5 	bl	800c858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d66e:	bf00      	nop
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b088      	sub	sp, #32
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	e853 3f00 	ldrex	r3, [r3]
 800d68a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d692:	61fb      	str	r3, [r7, #28]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	461a      	mov	r2, r3
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	61bb      	str	r3, [r7, #24]
 800d69e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a0:	6979      	ldr	r1, [r7, #20]
 800d6a2:	69ba      	ldr	r2, [r7, #24]
 800d6a4:	e841 2300 	strex	r3, r2, [r1]
 800d6a8:	613b      	str	r3, [r7, #16]
   return(result);
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1e6      	bne.n	800d67e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2220      	movs	r2, #32
 800d6b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff f8ad 	bl	800c81c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6c2:	bf00      	nop
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b083      	sub	sp, #12
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d6d2:	bf00      	nop
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <memset>:
 800d6de:	4402      	add	r2, r0
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d100      	bne.n	800d6e8 <memset+0xa>
 800d6e6:	4770      	bx	lr
 800d6e8:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ec:	e7f9      	b.n	800d6e2 <memset+0x4>
	...

0800d6f0 <__libc_init_array>:
 800d6f0:	b570      	push	{r4, r5, r6, lr}
 800d6f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d728 <__libc_init_array+0x38>)
 800d6f4:	4c0d      	ldr	r4, [pc, #52]	@ (800d72c <__libc_init_array+0x3c>)
 800d6f6:	1b64      	subs	r4, r4, r5
 800d6f8:	10a4      	asrs	r4, r4, #2
 800d6fa:	2600      	movs	r6, #0
 800d6fc:	42a6      	cmp	r6, r4
 800d6fe:	d109      	bne.n	800d714 <__libc_init_array+0x24>
 800d700:	4d0b      	ldr	r5, [pc, #44]	@ (800d730 <__libc_init_array+0x40>)
 800d702:	4c0c      	ldr	r4, [pc, #48]	@ (800d734 <__libc_init_array+0x44>)
 800d704:	f000 f818 	bl	800d738 <_init>
 800d708:	1b64      	subs	r4, r4, r5
 800d70a:	10a4      	asrs	r4, r4, #2
 800d70c:	2600      	movs	r6, #0
 800d70e:	42a6      	cmp	r6, r4
 800d710:	d105      	bne.n	800d71e <__libc_init_array+0x2e>
 800d712:	bd70      	pop	{r4, r5, r6, pc}
 800d714:	f855 3b04 	ldr.w	r3, [r5], #4
 800d718:	4798      	blx	r3
 800d71a:	3601      	adds	r6, #1
 800d71c:	e7ee      	b.n	800d6fc <__libc_init_array+0xc>
 800d71e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d722:	4798      	blx	r3
 800d724:	3601      	adds	r6, #1
 800d726:	e7f2      	b.n	800d70e <__libc_init_array+0x1e>
 800d728:	0800d7a8 	.word	0x0800d7a8
 800d72c:	0800d7a8 	.word	0x0800d7a8
 800d730:	0800d7a8 	.word	0x0800d7a8
 800d734:	0800d7c8 	.word	0x0800d7c8

0800d738 <_init>:
 800d738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73a:	bf00      	nop
 800d73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d73e:	bc08      	pop	{r3}
 800d740:	469e      	mov	lr, r3
 800d742:	4770      	bx	lr

0800d744 <_fini>:
 800d744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d746:	bf00      	nop
 800d748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d74a:	bc08      	pop	{r3}
 800d74c:	469e      	mov	lr, r3
 800d74e:	4770      	bx	lr
