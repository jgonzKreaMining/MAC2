
Calibracion_V1R0_A0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c44  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008df0  08008df0  00009df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e38  08008e38  0000a01c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e38  08008e38  00009e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e40  08008e40  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e50  08008e50  00009e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008e54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000001c  08008e70  0000a01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08008e70  0000a4d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb8c  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346c  00000000  00000000  00025bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  00029048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012cf  00000000  00000000  0002a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ca0  00000000  00000000  0002bb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4e1  00000000  00000000  000307af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001169f4  00000000  00000000  0004dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006634  00000000  00000000  001646c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0016acfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008dd8 	.word	0x08008dd8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08008dd8 	.word	0x08008dd8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_Z41__static_initialization_and_destruction_0ii>:



void display(){

}
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d117      	bne.n	800051c <_Z41__static_initialization_and_destruction_0ii+0x40>
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d112      	bne.n	800051c <_Z41__static_initialization_and_destruction_0ii+0x40>
uint32_t limitWarming	= 1200000/superloop;	//
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80004fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8000502:	461a      	mov	r2, r3
 8000504:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000506:	601a      	str	r2, [r3, #0]
const uint32_t limitProcess	= 20000/superloop;	//
 8000508:	4b07      	ldr	r3, [pc, #28]	@ (8000528 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000512:	fb93 f3f2 	sdiv	r3, r3, r2
 8000516:	461a      	mov	r2, r3
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	2000000f 	.word	0x2000000f
 800052c:	00124f80 	.word	0x00124f80
 8000530:	20000038 	.word	0x20000038
 8000534:	2000003c 	.word	0x2000003c

08000538 <_GLOBAL__sub_I_stateWarming>:
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
 800053c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff ffcb 	bl	80004dc <_Z41__static_initialization_and_destruction_0ii>
 8000546:	bd80      	pop	{r7, pc}

08000548 <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	hwBoton();
 800054c:	f000 fa2e 	bl	80009ac <_Z7hwBotonv>
	hwSht31();
 8000550:	f000 f8d4 	bl	80006fc <_Z7hwSht31v>
	hwAds1115();
 8000554:	f000 f802 	bl	800055c <_Z9hwAds1115v>
	//hwAnalog();
	//hwEEPROM();
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 8000560:	4b57      	ldr	r3, [pc, #348]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b05      	cmp	r3, #5
 8000566:	f200 80a8 	bhi.w	80006ba <_Z9hwAds1115v+0x15e>
 800056a:	a201      	add	r2, pc, #4	@ (adr r2, 8000570 <_Z9hwAds1115v+0x14>)
 800056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000570:	08000589 	.word	0x08000589
 8000574:	080005bd 	.word	0x080005bd
 8000578:	080005f3 	.word	0x080005f3
 800057c:	08000625 	.word	0x08000625
 8000580:	0800064b 	.word	0x0800064b
 8000584:	0800069f 	.word	0x0800069f
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 8000588:	4b4e      	ldr	r3, [pc, #312]	@ (80006c4 <_Z9hwAds1115v+0x168>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a4d      	ldr	r2, [pc, #308]	@ (80006c4 <_Z9hwAds1115v+0x168>)
 8000590:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 8000592:	4b4c      	ldr	r3, [pc, #304]	@ (80006c4 <_Z9hwAds1115v+0x168>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4b4c      	ldr	r3, [pc, #304]	@ (80006c8 <_Z9hwAds1115v+0x16c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	429a      	cmp	r2, r3
 800059c:	db0a      	blt.n	80005b4 <_Z9hwAds1115v+0x58>
 800059e:	4b4b      	ldr	r3, [pc, #300]	@ (80006cc <_Z9hwAds1115v+0x170>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d006      	beq.n	80005b4 <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 80005a6:	4b49      	ldr	r3, [pc, #292]	@ (80006cc <_Z9hwAds1115v+0x170>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 80005ac:	4b44      	ldr	r3, [pc, #272]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 80005b2:	e083      	b.n	80006bc <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 80005b4:	4b42      	ldr	r3, [pc, #264]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
		break;
 80005ba:	e07f      	b.n	80006bc <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 80005bc:	4b41      	ldr	r3, [pc, #260]	@ (80006c4 <_Z9hwAds1115v+0x168>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 80005c2:	4b43      	ldr	r3, [pc, #268]	@ (80006d0 <_Z9hwAds1115v+0x174>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d006      	beq.n	80005d8 <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 80005ca:	2303      	movs	r3, #3
 80005cc:	4a41      	ldr	r2, [pc, #260]	@ (80006d4 <_Z9hwAds1115v+0x178>)
 80005ce:	2190      	movs	r1, #144	@ 0x90
 80005d0:	4841      	ldr	r0, [pc, #260]	@ (80006d8 <_Z9hwAds1115v+0x17c>)
 80005d2:	f003 fdaf 	bl	8004134 <HAL_I2C_Master_Transmit_DMA>
 80005d6:	e005      	b.n	80005e4 <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 80005d8:	2303      	movs	r3, #3
 80005da:	4a40      	ldr	r2, [pc, #256]	@ (80006dc <_Z9hwAds1115v+0x180>)
 80005dc:	2190      	movs	r1, #144	@ 0x90
 80005de:	483e      	ldr	r0, [pc, #248]	@ (80006d8 <_Z9hwAds1115v+0x17c>)
 80005e0:	f003 fda8 	bl	8004134 <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 80005e4:	4b3e      	ldr	r3, [pc, #248]	@ (80006e0 <_Z9hwAds1115v+0x184>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 80005ea:	4b35      	ldr	r3, [pc, #212]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	701a      	strb	r2, [r3, #0]

		break;
 80005f0:	e064      	b.n	80006bc <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 80005f2:	2301      	movs	r3, #1
 80005f4:	4a3b      	ldr	r2, [pc, #236]	@ (80006e4 <_Z9hwAds1115v+0x188>)
 80005f6:	2190      	movs	r1, #144	@ 0x90
 80005f8:	4837      	ldr	r0, [pc, #220]	@ (80006d8 <_Z9hwAds1115v+0x17c>)
 80005fa:	f003 fd9b 	bl	8004134 <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 80005fe:	4b38      	ldr	r3, [pc, #224]	@ (80006e0 <_Z9hwAds1115v+0x184>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f083 0301 	eor.w	r3, r3, #1
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b37      	ldr	r3, [pc, #220]	@ (80006e8 <_Z9hwAds1115v+0x18c>)
 800060a:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 800060c:	4b34      	ldr	r3, [pc, #208]	@ (80006e0 <_Z9hwAds1115v+0x184>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 8000616:	2203      	movs	r2, #3
 8000618:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 800061a:	e04f      	b.n	80006bc <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 800061e:	2205      	movs	r2, #5
 8000620:	701a      	strb	r2, [r3, #0]
		break;
 8000622:	e04b      	b.n	80006bc <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 8000624:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <_Z9hwAds1115v+0x168>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a26      	ldr	r2, [pc, #152]	@ (80006c4 <_Z9hwAds1115v+0x168>)
 800062c:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 800062e:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <_Z9hwAds1115v+0x168>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b2e      	ldr	r3, [pc, #184]	@ (80006ec <_Z9hwAds1115v+0x190>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	db03      	blt.n	8000642 <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 800063c:	2204      	movs	r2, #4
 800063e:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 8000640:	e03c      	b.n	80006bc <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 8000642:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 8000644:	2203      	movs	r2, #3
 8000646:	701a      	strb	r2, [r3, #0]
		break;
 8000648:	e038      	b.n	80006bc <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <_Z9hwAds1115v+0x168>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 8000650:	2302      	movs	r3, #2
 8000652:	4a27      	ldr	r2, [pc, #156]	@ (80006f0 <_Z9hwAds1115v+0x194>)
 8000654:	2190      	movs	r1, #144	@ 0x90
 8000656:	4820      	ldr	r0, [pc, #128]	@ (80006d8 <_Z9hwAds1115v+0x17c>)
 8000658:	f003 fe80 	bl	800435c <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 800065c:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <_Z9hwAds1115v+0x174>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00c      	beq.n	800067e <_Z9hwAds1115v+0x122>
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <_Z9hwAds1115v+0x194>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b21a      	sxth	r2, r3
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <_Z9hwAds1115v+0x194>)
 800066e:	785b      	ldrb	r3, [r3, #1]
 8000670:	b21b      	sxth	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b21b      	sxth	r3, r3
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <_Z9hwAds1115v+0x198>)
 800067a:	801a      	strh	r2, [r3, #0]
 800067c:	e00b      	b.n	8000696 <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <_Z9hwAds1115v+0x194>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	b21a      	sxth	r2, r3
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <_Z9hwAds1115v+0x194>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21b      	sxth	r3, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <_Z9hwAds1115v+0x19c>)
 8000694:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 8000698:	2205      	movs	r2, #5
 800069a:	701a      	strb	r2, [r3, #0]
		break;
 800069c:	e00e      	b.n	80006bc <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <_Z9hwAds1115v+0x174>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <_Z9hwAds1115v+0x174>)
 80006aa:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <_Z9hwAds1115v+0x170>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 80006b2:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <_Z9hwAds1115v+0x164>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
		break;
 80006b8:	e000      	b.n	80006bc <_Z9hwAds1115v+0x160>

	default:
		break;
 80006ba:	bf00      	nop
	}
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000006c 	.word	0x2000006c
 80006c4:	20000070 	.word	0x20000070
 80006c8:	20000074 	.word	0x20000074
 80006cc:	20000007 	.word	0x20000007
 80006d0:	20000086 	.word	0x20000086
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000150 	.word	0x20000150
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	200004c1 	.word	0x200004c1
 80006e4:	2000007c 	.word	0x2000007c
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	20000078 	.word	0x20000078
 80006f0:	20000080 	.word	0x20000080
 80006f4:	20000082 	.word	0x20000082
 80006f8:	20000084 	.word	0x20000084

080006fc <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 8000700:	4b98      	ldr	r3, [pc, #608]	@ (8000964 <_Z7hwSht31v+0x268>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b06      	cmp	r3, #6
 8000706:	f200 8126 	bhi.w	8000956 <_Z7hwSht31v+0x25a>
 800070a:	a201      	add	r2, pc, #4	@ (adr r2, 8000710 <_Z7hwSht31v+0x14>)
 800070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000710:	0800072d 	.word	0x0800072d
 8000714:	08000761 	.word	0x08000761
 8000718:	0800079f 	.word	0x0800079f
 800071c:	080007e3 	.word	0x080007e3
 8000720:	08000809 	.word	0x08000809
 8000724:	08000829 	.word	0x08000829
 8000728:	08000925 	.word	0x08000925
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 800072c:	4b8e      	ldr	r3, [pc, #568]	@ (8000968 <_Z7hwSht31v+0x26c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a8d      	ldr	r2, [pc, #564]	@ (8000968 <_Z7hwSht31v+0x26c>)
 8000734:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 8000736:	4b8c      	ldr	r3, [pc, #560]	@ (8000968 <_Z7hwSht31v+0x26c>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b8c      	ldr	r3, [pc, #560]	@ (800096c <_Z7hwSht31v+0x270>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	429a      	cmp	r2, r3
 8000740:	db0a      	blt.n	8000758 <_Z7hwSht31v+0x5c>
 8000742:	4b8b      	ldr	r3, [pc, #556]	@ (8000970 <_Z7hwSht31v+0x274>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 800074a:	4b89      	ldr	r3, [pc, #548]	@ (8000970 <_Z7hwSht31v+0x274>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 8000750:	4b84      	ldr	r3, [pc, #528]	@ (8000964 <_Z7hwSht31v+0x268>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 8000756:	e102      	b.n	800095e <_Z7hwSht31v+0x262>
			stateSht31	= 0;					// Espera
 8000758:	4b82      	ldr	r3, [pc, #520]	@ (8000964 <_Z7hwSht31v+0x268>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
		break;
 800075e:	e0fe      	b.n	800095e <_Z7hwSht31v+0x262>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 8000760:	4b81      	ldr	r3, [pc, #516]	@ (8000968 <_Z7hwSht31v+0x26c>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 8000766:	4b83      	ldr	r3, [pc, #524]	@ (8000974 <_Z7hwSht31v+0x278>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b81      	ldr	r3, [pc, #516]	@ (8000978 <_Z7hwSht31v+0x27c>)
 8000772:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 8000774:	4b7f      	ldr	r3, [pc, #508]	@ (8000974 <_Z7hwSht31v+0x278>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b7f      	ldr	r3, [pc, #508]	@ (8000978 <_Z7hwSht31v+0x27c>)
 800077c:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 800077e:	4b7f      	ldr	r3, [pc, #508]	@ (800097c <_Z7hwSht31v+0x280>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 8000784:	4b7e      	ldr	r3, [pc, #504]	@ (8000980 <_Z7hwSht31v+0x284>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	b299      	uxth	r1, r3
 800078c:	2302      	movs	r3, #2
 800078e:	4a7a      	ldr	r2, [pc, #488]	@ (8000978 <_Z7hwSht31v+0x27c>)
 8000790:	487c      	ldr	r0, [pc, #496]	@ (8000984 <_Z7hwSht31v+0x288>)
 8000792:	f003 fccf 	bl	8004134 <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 8000796:	4b73      	ldr	r3, [pc, #460]	@ (8000964 <_Z7hwSht31v+0x268>)
 8000798:	2202      	movs	r2, #2
 800079a:	701a      	strb	r2, [r3, #0]
		break;
 800079c:	e0df      	b.n	800095e <_Z7hwSht31v+0x262>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 800079e:	4b7a      	ldr	r3, [pc, #488]	@ (8000988 <_Z7hwSht31v+0x28c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d007      	beq.n	80007bc <_Z7hwSht31v+0xc0>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 80007ac:	4b73      	ldr	r3, [pc, #460]	@ (800097c <_Z7hwSht31v+0x280>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b75      	ldr	r3, [pc, #468]	@ (800098c <_Z7hwSht31v+0x290>)
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e006      	b.n	80007ca <_Z7hwSht31v+0xce>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 80007bc:	4b6f      	ldr	r3, [pc, #444]	@ (800097c <_Z7hwSht31v+0x280>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f083 0301 	eor.w	r3, r3, #1
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b71      	ldr	r3, [pc, #452]	@ (800098c <_Z7hwSht31v+0x290>)
 80007c8:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 80007ca:	4b6c      	ldr	r3, [pc, #432]	@ (800097c <_Z7hwSht31v+0x280>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d003      	beq.n	80007da <_Z7hwSht31v+0xde>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 80007d2:	4b64      	ldr	r3, [pc, #400]	@ (8000964 <_Z7hwSht31v+0x268>)
 80007d4:	2203      	movs	r2, #3
 80007d6:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 80007d8:	e0c1      	b.n	800095e <_Z7hwSht31v+0x262>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 80007da:	4b62      	ldr	r3, [pc, #392]	@ (8000964 <_Z7hwSht31v+0x268>)
 80007dc:	2206      	movs	r2, #6
 80007de:	701a      	strb	r2, [r3, #0]
		break;
 80007e0:	e0bd      	b.n	800095e <_Z7hwSht31v+0x262>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 80007e2:	4b61      	ldr	r3, [pc, #388]	@ (8000968 <_Z7hwSht31v+0x26c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a5f      	ldr	r2, [pc, #380]	@ (8000968 <_Z7hwSht31v+0x26c>)
 80007ea:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 80007ec:	4b5e      	ldr	r3, [pc, #376]	@ (8000968 <_Z7hwSht31v+0x26c>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b67      	ldr	r3, [pc, #412]	@ (8000990 <_Z7hwSht31v+0x294>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	db03      	blt.n	8000800 <_Z7hwSht31v+0x104>
			stateSht31	= 4;					// Pasa a S4
 80007f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000964 <_Z7hwSht31v+0x268>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 80007fe:	e0ae      	b.n	800095e <_Z7hwSht31v+0x262>
			stateSht31	= 3;					// Espera en S3
 8000800:	4b58      	ldr	r3, [pc, #352]	@ (8000964 <_Z7hwSht31v+0x268>)
 8000802:	2203      	movs	r2, #3
 8000804:	701a      	strb	r2, [r3, #0]
		break;
 8000806:	e0aa      	b.n	800095e <_Z7hwSht31v+0x262>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 8000808:	4b57      	ldr	r3, [pc, #348]	@ (8000968 <_Z7hwSht31v+0x26c>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 800080e:	4b5c      	ldr	r3, [pc, #368]	@ (8000980 <_Z7hwSht31v+0x284>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	b299      	uxth	r1, r3
 8000816:	2306      	movs	r3, #6
 8000818:	4a5e      	ldr	r2, [pc, #376]	@ (8000994 <_Z7hwSht31v+0x298>)
 800081a:	485a      	ldr	r0, [pc, #360]	@ (8000984 <_Z7hwSht31v+0x288>)
 800081c:	f003 fd9e 	bl	800435c <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 8000820:	4b50      	ldr	r3, [pc, #320]	@ (8000964 <_Z7hwSht31v+0x268>)
 8000822:	2205      	movs	r2, #5
 8000824:	701a      	strb	r2, [r3, #0]
		break;
 8000826:	e09a      	b.n	800095e <_Z7hwSht31v+0x262>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 8000828:	4b57      	ldr	r3, [pc, #348]	@ (8000988 <_Z7hwSht31v+0x28c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	f083 0301 	eor.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d039      	beq.n	80008aa <_Z7hwSht31v+0x1ae>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8000836:	4b57      	ldr	r3, [pc, #348]	@ (8000994 <_Z7hwSht31v+0x298>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	b29b      	uxth	r3, r3
 800083e:	4a55      	ldr	r2, [pc, #340]	@ (8000994 <_Z7hwSht31v+0x298>)
 8000840:	7852      	ldrb	r2, [r2, #1]
 8000842:	4413      	add	r3, r2
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b54      	ldr	r3, [pc, #336]	@ (8000998 <_Z7hwSht31v+0x29c>)
 8000848:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 800084a:	4b53      	ldr	r3, [pc, #332]	@ (8000998 <_Z7hwSht31v+0x29c>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8000854:	fb02 f303 	mul.w	r3, r2, r3
 8000858:	4a50      	ldr	r2, [pc, #320]	@ (800099c <_Z7hwSht31v+0x2a0>)
 800085a:	fb82 1203 	smull	r1, r2, r2, r3
 800085e:	441a      	add	r2, r3
 8000860:	13d2      	asrs	r2, r2, #15
 8000862:	17db      	asrs	r3, r3, #31
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	b29b      	uxth	r3, r3
 8000868:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b4a      	ldr	r3, [pc, #296]	@ (8000998 <_Z7hwSht31v+0x29c>)
 8000870:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 8000872:	4b48      	ldr	r3, [pc, #288]	@ (8000994 <_Z7hwSht31v+0x298>)
 8000874:	78db      	ldrb	r3, [r3, #3]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	4a46      	ldr	r2, [pc, #280]	@ (8000994 <_Z7hwSht31v+0x298>)
 800087c:	7912      	ldrb	r2, [r2, #4]
 800087e:	4413      	add	r3, r2
 8000880:	b29a      	uxth	r2, r3
 8000882:	4b47      	ldr	r3, [pc, #284]	@ (80009a0 <_Z7hwSht31v+0x2a4>)
 8000884:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 8000886:	4b46      	ldr	r3, [pc, #280]	@ (80009a0 <_Z7hwSht31v+0x2a4>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000890:	fb02 f303 	mul.w	r3, r2, r3
 8000894:	4a41      	ldr	r2, [pc, #260]	@ (800099c <_Z7hwSht31v+0x2a0>)
 8000896:	fb82 1203 	smull	r1, r2, r2, r3
 800089a:	441a      	add	r2, r3
 800089c:	13d2      	asrs	r2, r2, #15
 800089e:	17db      	asrs	r3, r3, #31
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b3e      	ldr	r3, [pc, #248]	@ (80009a0 <_Z7hwSht31v+0x2a4>)
 80008a6:	801a      	strh	r2, [r3, #0]
 80008a8:	e038      	b.n	800091c <_Z7hwSht31v+0x220>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 80008aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000994 <_Z7hwSht31v+0x298>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4a38      	ldr	r2, [pc, #224]	@ (8000994 <_Z7hwSht31v+0x298>)
 80008b4:	7852      	ldrb	r2, [r2, #1]
 80008b6:	4413      	add	r3, r2
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b3a      	ldr	r3, [pc, #232]	@ (80009a4 <_Z7hwSht31v+0x2a8>)
 80008bc:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 80008be:	4b39      	ldr	r3, [pc, #228]	@ (80009a4 <_Z7hwSht31v+0x2a8>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 80008c8:	fb02 f303 	mul.w	r3, r2, r3
 80008cc:	4a33      	ldr	r2, [pc, #204]	@ (800099c <_Z7hwSht31v+0x2a0>)
 80008ce:	fb82 1203 	smull	r1, r2, r2, r3
 80008d2:	441a      	add	r2, r3
 80008d4:	13d2      	asrs	r2, r2, #15
 80008d6:	17db      	asrs	r3, r3, #31
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	b29b      	uxth	r3, r3
 80008dc:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	4b30      	ldr	r3, [pc, #192]	@ (80009a4 <_Z7hwSht31v+0x2a8>)
 80008e4:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 80008e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <_Z7hwSht31v+0x298>)
 80008e8:	78db      	ldrb	r3, [r3, #3]
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4a29      	ldr	r2, [pc, #164]	@ (8000994 <_Z7hwSht31v+0x298>)
 80008f0:	7912      	ldrb	r2, [r2, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b2c      	ldr	r3, [pc, #176]	@ (80009a8 <_Z7hwSht31v+0x2ac>)
 80008f8:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 80008fa:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <_Z7hwSht31v+0x2ac>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000904:	fb02 f303 	mul.w	r3, r2, r3
 8000908:	4a24      	ldr	r2, [pc, #144]	@ (800099c <_Z7hwSht31v+0x2a0>)
 800090a:	fb82 1203 	smull	r1, r2, r2, r3
 800090e:	441a      	add	r2, r3
 8000910:	13d2      	asrs	r2, r2, #15
 8000912:	17db      	asrs	r3, r3, #31
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <_Z7hwSht31v+0x2ac>)
 800091a:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <_Z7hwSht31v+0x268>)
 800091e:	2206      	movs	r2, #6
 8000920:	701a      	strb	r2, [r3, #0]
		break;
 8000922:	e01c      	b.n	800095e <_Z7hwSht31v+0x262>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <_Z7hwSht31v+0x274>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <_Z7hwSht31v+0x28c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	f083 0301 	eor.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <_Z7hwSht31v+0x28c>)
 8000936:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <_Z7hwSht31v+0x28c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <_Z7hwSht31v+0x24c>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <_Z7hwSht31v+0x284>)
 8000942:	2244      	movs	r2, #68	@ 0x44
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	e002      	b.n	800094e <_Z7hwSht31v+0x252>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <_Z7hwSht31v+0x284>)
 800094a:	2245      	movs	r2, #69	@ 0x45
 800094c:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <_Z7hwSht31v+0x268>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
		break;
 8000954:	e003      	b.n	800095e <_Z7hwSht31v+0x262>

	default:
		stateSht31	= 0;
 8000956:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <_Z7hwSht31v+0x268>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
		break;
 800095c:	bf00      	nop
	}
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000004d 	.word	0x2000004d
 8000968:	20000050 	.word	0x20000050
 800096c:	20000054 	.word	0x20000054
 8000970:	20000007 	.word	0x20000007
 8000974:	20000000 	.word	0x20000000
 8000978:	20000004 	.word	0x20000004
 800097c:	200004c1 	.word	0x200004c1
 8000980:	20000006 	.word	0x20000006
 8000984:	20000150 	.word	0x20000150
 8000988:	20000062 	.word	0x20000062
 800098c:	2000008c 	.word	0x2000008c
 8000990:	20000058 	.word	0x20000058
 8000994:	2000005c 	.word	0x2000005c
 8000998:	20000064 	.word	0x20000064
 800099c:	80008001 	.word	0x80008001
 80009a0:	20000066 	.word	0x20000066
 80009a4:	20000068 	.word	0x20000068
 80009a8:	2000006a 	.word	0x2000006a

080009ac <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 80009b0:	2108      	movs	r1, #8
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b6:	f003 faf1 	bl	8003f9c <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <_Z7hwBotonv+0xb0>)
 80009c8:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <_Z7hwBotonv+0xb4>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d03a      	beq.n	8000a48 <_Z7hwBotonv+0x9c>
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	dc3f      	bgt.n	8000a56 <_Z7hwBotonv+0xaa>
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <_Z7hwBotonv+0x34>
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d012      	beq.n	8000a04 <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 80009de:	e03a      	b.n	8000a56 <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 80009e0:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <_Z7hwBotonv+0xb8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 80009e6:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <_Z7hwBotonv+0xbc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <_Z7hwBotonv+0xb0>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <_Z7hwBotonv+0xb4>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
		break;
 80009fa:	e02d      	b.n	8000a58 <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 80009fc:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <_Z7hwBotonv+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
		break;
 8000a02:	e029      	b.n	8000a58 <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <_Z7hwBotonv+0xb8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a16      	ldr	r2, [pc, #88]	@ (8000a64 <_Z7hwBotonv+0xb8>)
 8000a0c:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <_Z7hwBotonv+0xb0>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d009      	beq.n	8000a2a <_Z7hwBotonv+0x7e>
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <_Z7hwBotonv+0xb8>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <_Z7hwBotonv+0xc0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	db03      	blt.n	8000a2a <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <_Z7hwBotonv+0xb4>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	701a      	strb	r2, [r3, #0]
		break;
 8000a28:	e016      	b.n	8000a58 <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <_Z7hwBotonv+0xb0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <_Z7hwBotonv+0xb4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
		break;
 8000a3e:	e00b      	b.n	8000a58 <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <_Z7hwBotonv+0xb4>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
		break;
 8000a46:	e007      	b.n	8000a58 <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <_Z7hwBotonv+0xbc>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 8000a4e:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <_Z7hwBotonv+0xb4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
		break;
 8000a54:	e000      	b.n	8000a58 <_Z7hwBotonv+0xac>
		break;
 8000a56:	bf00      	nop
	}
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000040 	.word	0x20000040
 8000a60:	2000004c 	.word	0x2000004c
 8000a64:	20000044 	.word	0x20000044
 8000a68:	200004c0 	.word	0x200004c0
 8000a6c:	20000048 	.word	0x20000048

08000a70 <_Z41__static_initialization_and_destruction_0ii>:
		break;
	default:
		stateEEPROM	= 0;
		break;
	}
}
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d137      	bne.n	8000af0 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d132      	bne.n	8000af0 <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a98:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000a9a:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8000aaa:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000aac:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2332      	movs	r3, #50	@ 0x32
 8000ab6:	fb93 f3f2 	sdiv	r3, r3, r2
 8000aba:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000abc:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	2364      	movs	r3, #100	@ 0x64
 8000ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8000aca:	4a10      	ldr	r2, [pc, #64]	@ (8000b0c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000acc:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ada:	3b01      	subs	r3, #1
 8000adc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b10 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000ade:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	2332      	movs	r3, #50	@ 0x32
 8000ae8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000aec:	4a09      	ldr	r2, [pc, #36]	@ (8000b14 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	2000000f 	.word	0x2000000f
 8000b00:	20000048 	.word	0x20000048
 8000b04:	20000054 	.word	0x20000054
 8000b08:	20000058 	.word	0x20000058
 8000b0c:	20000074 	.word	0x20000074
 8000b10:	20000078 	.word	0x20000078
 8000b14:	20000088 	.word	0x20000088

08000b18 <_GLOBAL__sub_I_boton>:
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff ffa5 	bl	8000a70 <_Z41__static_initialization_and_destruction_0ii>
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_Z41__static_initialization_and_destruction_0ii>:
		warningHardware[1]	= 1;		// Indica alarma
	}
	else{								// Si no
		warningHardware[1]	= 0;		// No hay alarma
	}
}
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d11f      	bne.n	8000b78 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d11a      	bne.n	8000b78 <_Z41__static_initialization_and_destruction_0ii+0x50>
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000b52:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000b5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000b62:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000b76:	801a      	strh	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	2000000f 	.word	0x2000000f
 8000b88:	20000094 	.word	0x20000094
 8000b8c:	000dbba0 	.word	0x000dbba0
 8000b90:	20000098 	.word	0x20000098
 8000b94:	2000009c 	.word	0x2000009c

08000b98 <_GLOBAL__sub_I_countEnableDisplay>:
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ffc1 	bl	8000b28 <_Z41__static_initialization_and_destruction_0ii>
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8000bac:	f000 ffd9 	bl	8001b62 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 8000bb0:	f000 f83a 	bl	8000c28 <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8000bb4:	f000 fab4 	bl	8001120 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000bb8:	f000 fa58 	bl	800106c <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8000bbc:	f000 f9ee 	bl	8000f9c <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8000bc0:	f000 fa20 	bl	8001004 <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 8000bc4:	f000 f95c 	bl	8000e80 <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 8000bc8:	f000 f9a8 	bl	8000f1c <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 8000bcc:	f000 f8a8 	bl	8000d20 <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 8000bd0:	f000 f882 	bl	8000cd8 <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 8000bd4:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <main+0x70>)
 8000bd6:	f006 fd89 	bl	80076ec <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 8000bda:	2203      	movs	r2, #3
 8000bdc:	490f      	ldr	r1, [pc, #60]	@ (8000c1c <main+0x74>)
 8000bde:	4810      	ldr	r0, [pc, #64]	@ (8000c20 <main+0x78>)
 8000be0:	f001 fb92 	bl	8002308 <HAL_ADC_Start_DMA>

  //
  //HAL_IWDG_Init(&hiwdg);
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f003 f9ee 	bl	8003fcc <HAL_GPIO_WritePin>

	  hwInput();
 8000bf0:	f7ff fcaa 	bl	8000548 <_Z7hwInputv>
	  //hwOutput();

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f003 f9e6 	bl	8003fcc <HAL_GPIO_WritePin>

	  //HAL_SuspendTick();
	  //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 8000c00:	bf00      	nop
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <main+0x7c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f8      	bne.n	8000c02 <main+0x5a>
	  }							// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <main+0x7c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c16:	e7e5      	b.n	8000be4 <main+0x3c>
 8000c18:	20000464 	.word	0x20000464
 8000c1c:	200004c4 	.word	0x200004c4
 8000c20:	200000a0 	.word	0x200000a0
 8000c24:	200004c2 	.word	0x200004c2

08000c28 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b096      	sub	sp, #88	@ 0x58
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2244      	movs	r2, #68	@ 0x44
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f008 f8a1 	bl	8008d7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c4e:	f005 f997 	bl	8005f80 <HAL_PWREx_ControlVoltageScaling>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf14      	ite	ne
 8000c58:	2301      	movne	r3, #1
 8000c5a:	2300      	moveq	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000c62:	f000 fb4b 	bl	80012fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c66:	2303      	movs	r3, #3
 8000c68:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c6e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c76:	2340      	movs	r3, #64	@ 0x40
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4618      	mov	r0, r3
 8000c84:	f005 f9d2 	bl	800602c <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8000c98:	f000 fb30 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 fdd3 	bl	8006860 <HAL_RCC_ClockConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bf14      	ite	ne
 8000cc0:	2301      	movne	r3, #1
 8000cc2:	2300      	moveq	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000cca:	f000 fb17 	bl	80012fc <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3758      	adds	r7, #88	@ 0x58
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* Initialize the IWDG peripheral */
  hiwdg.Instance = IWDG;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <_ZL12MX_IWDG_Initv+0x40>)
 8000cde:	4a0f      	ldr	r2, [pc, #60]	@ (8000d1c <_ZL12MX_IWDG_Initv+0x44>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <_ZL12MX_IWDG_Initv+0x40>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 399;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <_ZL12MX_IWDG_Initv+0x40>)
 8000cea:	f240 128f 	movw	r2, #399	@ 0x18f
 8000cee:	609a      	str	r2, [r3, #8]
  hiwdg.Init.Window	= 390;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <_ZL12MX_IWDG_Initv+0x40>)
 8000cf2:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8000cf6:	60da      	str	r2, [r3, #12]

  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <_ZL12MX_IWDG_Initv+0x40>)
 8000cfa:	f005 f8ec 	bl	8005ed6 <HAL_IWDG_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf14      	ite	ne
 8000d04:	2301      	movne	r3, #1
 8000d06:	2300      	moveq	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <_ZL12MX_IWDG_Initv+0x3a>
  {
    Error_Handler();
 8000d0e:	f000 faf5 	bl	80012fc <Error_Handler>
  }

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200004b0 	.word	0x200004b0
 8000d1c:	40003000 	.word	0x40003000

08000d20 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8000d42:	4b4a      	ldr	r3, [pc, #296]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d44:	4a4a      	ldr	r2, [pc, #296]	@ (8000e70 <_ZL12MX_ADC1_Initv+0x150>)
 8000d46:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d48:	4b48      	ldr	r3, [pc, #288]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4e:	4b47      	ldr	r3, [pc, #284]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d54:	4b45      	ldr	r3, [pc, #276]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d5a:	4b44      	ldr	r3, [pc, #272]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d60:	4b42      	ldr	r3, [pc, #264]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d66:	4b41      	ldr	r3, [pc, #260]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 8000d72:	4b3e      	ldr	r3, [pc, #248]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d74:	2203      	movs	r2, #3
 8000d76:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d78:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d80:	4b3a      	ldr	r3, [pc, #232]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d86:	4b39      	ldr	r3, [pc, #228]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d8c:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d94:	4b35      	ldr	r3, [pc, #212]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8000d9a:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da2:	4832      	ldr	r0, [pc, #200]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000da4:	f001 f95c 	bl	8002060 <HAL_ADC_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bf14      	ite	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	2300      	moveq	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 8000db8:	f000 faa0 	bl	80012fc <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4829      	ldr	r0, [pc, #164]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000dc8:	f002 fb10 	bl	80033ec <HAL_ADCEx_MultiModeConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 8000ddc:	f000 fa8e 	bl	80012fc <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <_ZL12MX_ADC1_Initv+0x154>)
 8000de2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de4:	2306      	movs	r3, #6
 8000de6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000de8:	2303      	movs	r3, #3
 8000dea:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dec:	237f      	movs	r3, #127	@ 0x7f
 8000dee:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df0:	2304      	movs	r3, #4
 8000df2:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481b      	ldr	r0, [pc, #108]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000dfe:	f001 fd77 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 8000e12:	f000 fa73 	bl	80012fc <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <_ZL12MX_ADC1_Initv+0x158>)
 8000e18:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4812      	ldr	r0, [pc, #72]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000e24:	f001 fd64 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf14      	ite	ne
 8000e2e:	2301      	movne	r3, #1
 8000e30:	2300      	moveq	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 8000e38:	f000 fa60 	bl	80012fc <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <_ZL12MX_ADC1_Initv+0x15c>)
 8000e3e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e40:	2312      	movs	r3, #18
 8000e42:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4808      	ldr	r0, [pc, #32]	@ (8000e6c <_ZL12MX_ADC1_Initv+0x14c>)
 8000e4a:	f001 fd51 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf14      	ite	ne
 8000e54:	2301      	movne	r3, #1
 8000e56:	2300      	moveq	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 8000e5e:	f000 fa4d 	bl	80012fc <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	@ 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000a0 	.word	0x200000a0
 8000e70:	50040000 	.word	0x50040000
 8000e74:	04300002 	.word	0x04300002
 8000e78:	08600004 	.word	0x08600004
 8000e7c:	0c900008 	.word	0x0c900008

08000e80 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e84:	4b22      	ldr	r3, [pc, #136]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000e86:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x94>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000e8c:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x98>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eba:	4815      	ldr	r0, [pc, #84]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000ebc:	f003 f89e 	bl	8003ffc <HAL_I2C_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf14      	ite	ne
 8000ec6:	2301      	movne	r3, #1
 8000ec8:	2300      	moveq	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000ed0:	f000 fa14 	bl	80012fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000ed8:	f004 ff66 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000eec:	f000 fa06 	bl	80012fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <_ZL12MX_I2C1_Initv+0x90>)
 8000ef4:	f004 ffa3 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000f08:	f000 f9f8 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000150 	.word	0x20000150
 8000f14:	40005400 	.word	0x40005400
 8000f18:	2000090e 	.word	0x2000090e

08000f1c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <_ZL12MX_TIM6_Initv+0x78>)
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000f98 <_ZL12MX_TIM6_Initv+0x7c>)
 8000f30:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <_ZL12MX_TIM6_Initv+0x78>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <_ZL12MX_TIM6_Initv+0x78>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <_ZL12MX_TIM6_Initv+0x78>)
 8000f40:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f44:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <_ZL12MX_TIM6_Initv+0x78>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <_ZL12MX_TIM6_Initv+0x78>)
 8000f4e:	f006 fb75 	bl	800763c <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 8000f62:	f000 f9cb 	bl	80012fc <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <_ZL12MX_TIM6_Initv+0x78>)
 8000f74:	f006 fdee 	bl	8007b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bf14      	ite	ne
 8000f7e:	2301      	movne	r3, #1
 8000f80:	2300      	moveq	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 8000f88:	f000 f9b8 	bl	80012fc <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000464 	.word	0x20000464
 8000f98:	40001000 	.word	0x40001000

08000f9c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fa0:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fa2:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <_ZL13MX_UART4_Initv+0x64>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fa8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000fac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <_ZL13MX_UART4_Initv+0x60>)
 8000fe0:	f006 fe5e 	bl	8007ca0 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf14      	ite	ne
 8000fea:	2301      	movne	r3, #1
 8000fec:	2300      	moveq	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 f982 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000234 	.word	0x20000234
 8001000:	40004c00 	.word	0x40004c00

08001004 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 800100a:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <_ZL13MX_UART5_Initv+0x64>)
 800100c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <_ZL13MX_UART5_Initv+0x60>)
 8001048:	f006 fe2a 	bl	8007ca0 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 800105c:	f000 f94e 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200002bc 	.word	0x200002bc
 8001068:	40005000 	.word	0x40005000

0800106c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <_ZL11MX_DMA_Initv+0xb0>)
 8001074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001076:	4a29      	ldr	r2, [pc, #164]	@ (800111c <_ZL11MX_DMA_Initv+0xb0>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6493      	str	r3, [r2, #72]	@ 0x48
 800107e:	4b27      	ldr	r3, [pc, #156]	@ (800111c <_ZL11MX_DMA_Initv+0xb0>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108a:	4b24      	ldr	r3, [pc, #144]	@ (800111c <_ZL11MX_DMA_Initv+0xb0>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108e:	4a23      	ldr	r2, [pc, #140]	@ (800111c <_ZL11MX_DMA_Initv+0xb0>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6493      	str	r3, [r2, #72]	@ 0x48
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <_ZL11MX_DMA_Initv+0xb0>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	200b      	movs	r0, #11
 80010a8:	f002 fb2b 	bl	8003702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010ac:	200b      	movs	r0, #11
 80010ae:	f002 fb44 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2010      	movs	r0, #16
 80010b8:	f002 fb23 	bl	8003702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010bc:	2010      	movs	r0, #16
 80010be:	f002 fb3c 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2011      	movs	r0, #17
 80010c8:	f002 fb1b 	bl	8003702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80010cc:	2011      	movs	r0, #17
 80010ce:	f002 fb34 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2038      	movs	r0, #56	@ 0x38
 80010d8:	f002 fb13 	bl	8003702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80010dc:	2038      	movs	r0, #56	@ 0x38
 80010de:	f002 fb2c 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2039      	movs	r0, #57	@ 0x39
 80010e8:	f002 fb0b 	bl	8003702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80010ec:	2039      	movs	r0, #57	@ 0x39
 80010ee:	f002 fb24 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	203a      	movs	r0, #58	@ 0x3a
 80010f8:	f002 fb03 	bl	8003702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80010fc:	203a      	movs	r0, #58	@ 0x3a
 80010fe:	f002 fb1c 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	203c      	movs	r0, #60	@ 0x3c
 8001108:	f002 fafb 	bl	8003702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800110c:	203c      	movs	r0, #60	@ 0x3c
 800110e:	f002 fb14 	bl	800373a <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	4b4b      	ldr	r3, [pc, #300]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a4a      	ldr	r2, [pc, #296]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 800113c:	f043 0310 	orr.w	r3, r3, #16
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b48      	ldr	r3, [pc, #288]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b45      	ldr	r3, [pc, #276]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a44      	ldr	r2, [pc, #272]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b42      	ldr	r3, [pc, #264]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	4b3f      	ldr	r3, [pc, #252]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a3e      	ldr	r2, [pc, #248]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b3c      	ldr	r3, [pc, #240]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a38      	ldr	r2, [pc, #224]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a32      	ldr	r2, [pc, #200]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <_ZL12MX_GPIO_Initv+0x144>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	210f      	movs	r1, #15
 80011ca:	4827      	ldr	r0, [pc, #156]	@ (8001268 <_ZL12MX_GPIO_Initv+0x148>)
 80011cc:	f002 fefe 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2174      	movs	r1, #116	@ 0x74
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d8:	f002 fef8 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011dc:	2200      	movs	r2, #0
 80011de:	f64f 7105 	movw	r1, #65285	@ 0xff05
 80011e2:	4822      	ldr	r0, [pc, #136]	@ (800126c <_ZL12MX_GPIO_Initv+0x14c>)
 80011e4:	f002 fef2 	bl	8003fcc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 80011e8:	230f      	movs	r3, #15
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	481a      	ldr	r0, [pc, #104]	@ (8001268 <_ZL12MX_GPIO_Initv+0x148>)
 8001200:	f002 fd3a 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001204:	2374      	movs	r3, #116	@ 0x74
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f002 fd2b 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001222:	2308      	movs	r3, #8
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001238:	f002 fd1e 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800123c:	f64f 7301 	movw	r3, #65281	@ 0xff01
 8001240:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <_ZL12MX_GPIO_Initv+0x14c>)
 8001256:	f002 fd0f 	bl	8003c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	@ 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	48001000 	.word	0x48001000
 800126c:	48000c00 	.word	0x48000c00

08001270 <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x24>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d102      	bne.n	8001288 <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_ADC_ConvCpltCallback+0x28>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	50040000 	.word	0x50040000
 8001298:	200004d0 	.word	0x200004d0

0800129c <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a05      	ldr	r2, [pc, #20]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d102      	bne.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 80012ae:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
	}
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40001000 	.word	0x40001000
 80012c4:	200004c2 	.word	0x200004c2

080012c8 <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200004c1 	.word	0x200004c1

080012e8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6613      	str	r3, [r2, #96]	@ 0x60
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6593      	str	r3, [r2, #88]	@ 0x58
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0ac      	sub	sp, #176	@ 0xb0
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	228c      	movs	r2, #140	@ 0x8c
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f007 fd04 	bl	8008d7e <memset>
  if(hadc->Instance==ADC1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a40      	ldr	r2, [pc, #256]	@ (800147c <HAL_ADC_MspInit+0x12c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d179      	bne.n	8001474 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001380:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001384:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001386:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800138a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800138e:	2303      	movs	r3, #3
 8001390:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001396:	2308      	movs	r3, #8
 8001398:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 fc79 	bl	8006ca8 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80013bc:	f7ff ff9e 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 80013c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b29      	ldr	r3, [pc, #164]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	4a28      	ldr	r2, [pc, #160]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80013f0:	2307      	movs	r3, #7
 80013f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001406:	4619      	mov	r1, r3
 8001408:	481e      	ldr	r0, [pc, #120]	@ (8001484 <HAL_ADC_MspInit+0x134>)
 800140a:	f002 fc35 	bl	8003c78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800140e:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <HAL_ADC_MspInit+0x13c>)
 8001412:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 800142e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001432:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 8001436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 800143e:	2220      	movs	r2, #32
 8001440:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001448:	480f      	ldr	r0, [pc, #60]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 800144a:	f002 f991 	bl	8003770 <HAL_DMA_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001454:	f7ff ff52 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a0b      	ldr	r2, [pc, #44]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 800145c:	651a      	str	r2, [r3, #80]	@ 0x50
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <HAL_ADC_MspInit+0x138>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	2012      	movs	r0, #18
 800146a:	f002 f94a 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800146e:	2012      	movs	r0, #18
 8001470:	f002 f963 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	37b0      	adds	r7, #176	@ 0xb0
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	50040000 	.word	0x50040000
 8001480:	40021000 	.word	0x40021000
 8001484:	48000800 	.word	0x48000800
 8001488:	20000108 	.word	0x20000108
 800148c:	40020008 	.word	0x40020008

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0ac      	sub	sp, #176	@ 0xb0
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	228c      	movs	r2, #140	@ 0x8c
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f007 fc64 	bl	8008d7e <memset>
  if(hi2c->Instance==I2C1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a52      	ldr	r2, [pc, #328]	@ (8001604 <HAL_I2C_MspInit+0x174>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	f040 809d 	bne.w	80015fc <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014c2:	2340      	movs	r3, #64	@ 0x40
 80014c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fbea 	bl	8006ca8 <HAL_RCCEx_PeriphCLKConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014da:	f7ff ff0f 	bl	80012fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <HAL_I2C_MspInit+0x178>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a49      	ldr	r2, [pc, #292]	@ (8001608 <HAL_I2C_MspInit+0x178>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <HAL_I2C_MspInit+0x178>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f6:	23c0      	movs	r3, #192	@ 0xc0
 80014f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fc:	2312      	movs	r3, #18
 80014fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150e:	2304      	movs	r3, #4
 8001510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001518:	4619      	mov	r1, r3
 800151a:	483c      	ldr	r0, [pc, #240]	@ (800160c <HAL_I2C_MspInit+0x17c>)
 800151c:	f002 fbac 	bl	8003c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001520:	4b39      	ldr	r3, [pc, #228]	@ (8001608 <HAL_I2C_MspInit+0x178>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	4a38      	ldr	r2, [pc, #224]	@ (8001608 <HAL_I2C_MspInit+0x178>)
 8001526:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152a:	6593      	str	r3, [r2, #88]	@ 0x58
 800152c:	4b36      	ldr	r3, [pc, #216]	@ (8001608 <HAL_I2C_MspInit+0x178>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001538:	4b35      	ldr	r3, [pc, #212]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 800153a:	4a36      	ldr	r2, [pc, #216]	@ (8001614 <HAL_I2C_MspInit+0x184>)
 800153c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800153e:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 8001540:	2203      	movs	r2, #3
 8001542:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001544:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001556:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155c:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001562:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800156e:	4828      	ldr	r0, [pc, #160]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 8001570:	f002 f8fe 	bl	8003770 <HAL_DMA_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 800157a:	f7ff febf 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a23      	ldr	r2, [pc, #140]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001584:	4a22      	ldr	r2, [pc, #136]	@ (8001610 <HAL_I2C_MspInit+0x180>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800158a:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 800158c:	4a23      	ldr	r2, [pc, #140]	@ (800161c <HAL_I2C_MspInit+0x18c>)
 800158e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8001590:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 8001592:	2203      	movs	r2, #3
 8001594:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 8001598:	2210      	movs	r2, #16
 800159a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800159c:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 80015a4:	2280      	movs	r2, #128	@ 0x80
 80015a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80015c0:	4815      	ldr	r0, [pc, #84]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 80015c2:	f002 f8d5 	bl	8003770 <HAL_DMA_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 80015cc:	f7ff fe96 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a11      	ldr	r2, [pc, #68]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 80015d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80015d6:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <HAL_I2C_MspInit+0x188>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	201f      	movs	r0, #31
 80015e2:	f002 f88e 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015e6:	201f      	movs	r0, #31
 80015e8:	f002 f8a7 	bl	800373a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2020      	movs	r0, #32
 80015f2:	f002 f886 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015f6:	2020      	movs	r0, #32
 80015f8:	f002 f89f 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	37b0      	adds	r7, #176	@ 0xb0
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40005400 	.word	0x40005400
 8001608:	40021000 	.word	0x40021000
 800160c:	48000400 	.word	0x48000400
 8001610:	200001a4 	.word	0x200001a4
 8001614:	40020080 	.word	0x40020080
 8001618:	200001ec 	.word	0x200001ec
 800161c:	4002006c 	.word	0x4002006c

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <HAL_TIM_Base_MspInit+0x44>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d113      	bne.n	800165a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_TIM_Base_MspInit+0x48>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	4a0c      	ldr	r2, [pc, #48]	@ (8001668 <HAL_TIM_Base_MspInit+0x48>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6593      	str	r3, [r2, #88]	@ 0x58
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_TIM_Base_MspInit+0x48>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2036      	movs	r0, #54	@ 0x36
 8001650:	f002 f857 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001654:	2036      	movs	r0, #54	@ 0x36
 8001656:	f002 f870 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40001000 	.word	0x40001000
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0b0      	sub	sp, #192	@ 0xc0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	228c      	movs	r2, #140	@ 0x8c
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f007 fb76 	bl	8008d7e <memset>
  if(huart->Instance==UART4)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a4d      	ldr	r2, [pc, #308]	@ (80017cc <HAL_UART_MspInit+0x160>)
 8001698:	4293      	cmp	r3, r2
 800169a:	f040 80a3 	bne.w	80017e4 <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800169e:	2308      	movs	r3, #8
 80016a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 fafc 	bl	8006ca8 <HAL_RCCEx_PeriphCLKConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016b6:	f7ff fe21 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016ba:	4b45      	ldr	r3, [pc, #276]	@ (80017d0 <HAL_UART_MspInit+0x164>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	4a44      	ldr	r2, [pc, #272]	@ (80017d0 <HAL_UART_MspInit+0x164>)
 80016c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c6:	4b42      	ldr	r3, [pc, #264]	@ (80017d0 <HAL_UART_MspInit+0x164>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <HAL_UART_MspInit+0x164>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	4a3e      	ldr	r2, [pc, #248]	@ (80017d0 <HAL_UART_MspInit+0x164>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016de:	4b3c      	ldr	r3, [pc, #240]	@ (80017d0 <HAL_UART_MspInit+0x164>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001702:	2308      	movs	r3, #8
 8001704:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001712:	f002 fab1 	bl	8003c78 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 8001718:	4a2f      	ldr	r2, [pc, #188]	@ (80017d8 <HAL_UART_MspInit+0x16c>)
 800171a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 800171c:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 800171e:	2202      	movs	r2, #2
 8001720:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001722:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001728:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800172e:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 8001730:	2280      	movs	r2, #128	@ 0x80
 8001732:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173a:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001740:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800174c:	4821      	ldr	r0, [pc, #132]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 800174e:	f002 f80f 	bl	8003770 <HAL_DMA_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001758:	f7ff fdd0 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 8001760:	675a      	str	r2, [r3, #116]	@ 0x74
 8001762:	4a1c      	ldr	r2, [pc, #112]	@ (80017d4 <HAL_UART_MspInit+0x168>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <HAL_UART_MspInit+0x170>)
 800176a:	4a1d      	ldr	r2, [pc, #116]	@ (80017e0 <HAL_UART_MspInit+0x174>)
 800176c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 800176e:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <HAL_UART_MspInit+0x170>)
 8001770:	2202      	movs	r2, #2
 8001772:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_UART_MspInit+0x170>)
 8001776:	2210      	movs	r2, #16
 8001778:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177a:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <HAL_UART_MspInit+0x170>)
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <HAL_UART_MspInit+0x170>)
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_UART_MspInit+0x170>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <HAL_UART_MspInit+0x170>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001792:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_UART_MspInit+0x170>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001798:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_UART_MspInit+0x170>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800179e:	480f      	ldr	r0, [pc, #60]	@ (80017dc <HAL_UART_MspInit+0x170>)
 80017a0:	f001 ffe6 	bl	8003770 <HAL_DMA_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80017aa:	f7ff fda7 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_UART_MspInit+0x170>)
 80017b2:	671a      	str	r2, [r3, #112]	@ 0x70
 80017b4:	4a09      	ldr	r2, [pc, #36]	@ (80017dc <HAL_UART_MspInit+0x170>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2034      	movs	r0, #52	@ 0x34
 80017c0:	f001 ff9f 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80017c4:	2034      	movs	r0, #52	@ 0x34
 80017c6:	f001 ffb8 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80017ca:	e0c9      	b.n	8001960 <HAL_UART_MspInit+0x2f4>
 80017cc:	40004c00 	.word	0x40004c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	20000344 	.word	0x20000344
 80017d8:	40020458 	.word	0x40020458
 80017dc:	2000038c 	.word	0x2000038c
 80017e0:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a5f      	ldr	r2, [pc, #380]	@ (8001968 <HAL_UART_MspInit+0x2fc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	f040 80b8 	bne.w	8001960 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80017f0:	2310      	movs	r3, #16
 80017f2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 80017f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	4618      	mov	r0, r3
 8001800:	f005 fa52 	bl	8006ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 800180a:	f7ff fd77 	bl	80012fc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800180e:	4b57      	ldr	r3, [pc, #348]	@ (800196c <HAL_UART_MspInit+0x300>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001812:	4a56      	ldr	r2, [pc, #344]	@ (800196c <HAL_UART_MspInit+0x300>)
 8001814:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001818:	6593      	str	r3, [r2, #88]	@ 0x58
 800181a:	4b54      	ldr	r3, [pc, #336]	@ (800196c <HAL_UART_MspInit+0x300>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b51      	ldr	r3, [pc, #324]	@ (800196c <HAL_UART_MspInit+0x300>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a50      	ldr	r2, [pc, #320]	@ (800196c <HAL_UART_MspInit+0x300>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b4e      	ldr	r3, [pc, #312]	@ (800196c <HAL_UART_MspInit+0x300>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	4b4b      	ldr	r3, [pc, #300]	@ (800196c <HAL_UART_MspInit+0x300>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	4a4a      	ldr	r2, [pc, #296]	@ (800196c <HAL_UART_MspInit+0x300>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184a:	4b48      	ldr	r3, [pc, #288]	@ (800196c <HAL_UART_MspInit+0x300>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001856:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800185a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001870:	2308      	movs	r3, #8
 8001872:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001876:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800187a:	4619      	mov	r1, r3
 800187c:	483c      	ldr	r0, [pc, #240]	@ (8001970 <HAL_UART_MspInit+0x304>)
 800187e:	f002 f9fb 	bl	8003c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001882:	2304      	movs	r3, #4
 8001884:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800189a:	2308      	movs	r3, #8
 800189c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018a4:	4619      	mov	r1, r3
 80018a6:	4833      	ldr	r0, [pc, #204]	@ (8001974 <HAL_UART_MspInit+0x308>)
 80018a8:	f002 f9e6 	bl	8003c78 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 80018ac:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018ae:	4a33      	ldr	r2, [pc, #204]	@ (800197c <HAL_UART_MspInit+0x310>)
 80018b0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 80018b2:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018be:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018c6:	2280      	movs	r2, #128	@ 0x80
 80018c8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d0:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80018d6:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018dc:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80018e2:	4825      	ldr	r0, [pc, #148]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018e4:	f001 ff44 	bl	8003770 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0x286>
      Error_Handler();
 80018ee:	f7ff fd05 	bl	80012fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a20      	ldr	r2, [pc, #128]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018f6:	675a      	str	r2, [r3, #116]	@ 0x74
 80018f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001978 <HAL_UART_MspInit+0x30c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_UART_MspInit+0x314>)
 8001900:	4a20      	ldr	r2, [pc, #128]	@ (8001984 <HAL_UART_MspInit+0x318>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 8001904:	4b1e      	ldr	r3, [pc, #120]	@ (8001980 <HAL_UART_MspInit+0x314>)
 8001906:	2202      	movs	r2, #2
 8001908:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <HAL_UART_MspInit+0x314>)
 800190c:	2210      	movs	r2, #16
 800190e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <HAL_UART_MspInit+0x314>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <HAL_UART_MspInit+0x314>)
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191c:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <HAL_UART_MspInit+0x314>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001922:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_UART_MspInit+0x314>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_UART_MspInit+0x314>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_UART_MspInit+0x314>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001934:	4812      	ldr	r0, [pc, #72]	@ (8001980 <HAL_UART_MspInit+0x314>)
 8001936:	f001 ff1b 	bl	8003770 <HAL_DMA_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8001940:	f7ff fcdc 	bl	80012fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0e      	ldr	r2, [pc, #56]	@ (8001980 <HAL_UART_MspInit+0x314>)
 8001948:	671a      	str	r2, [r3, #112]	@ 0x70
 800194a:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <HAL_UART_MspInit+0x314>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2035      	movs	r0, #53	@ 0x35
 8001956:	f001 fed4 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800195a:	2035      	movs	r0, #53	@ 0x35
 800195c:	f001 feed 	bl	800373a <HAL_NVIC_EnableIRQ>
}
 8001960:	bf00      	nop
 8001962:	37c0      	adds	r7, #192	@ 0xc0
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40005000 	.word	0x40005000
 800196c:	40021000 	.word	0x40021000
 8001970:	48000800 	.word	0x48000800
 8001974:	48000c00 	.word	0x48000c00
 8001978:	200003d4 	.word	0x200003d4
 800197c:	4002041c 	.word	0x4002041c
 8001980:	2000041c 	.word	0x2000041c
 8001984:	40020408 	.word	0x40020408

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <NMI_Handler+0x4>

08001990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <MemManage_Handler+0x4>

080019a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <UsageFault_Handler+0x4>

080019b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019de:	f000 f915 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <DMA1_Channel1_IRQHandler+0x10>)
 80019ee:	f002 f856 	bl	8003a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000108 	.word	0x20000108

080019fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <DMA1_Channel6_IRQHandler+0x10>)
 8001a02:	f002 f84c 	bl	8003a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200001ec 	.word	0x200001ec

08001a10 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <DMA1_Channel7_IRQHandler+0x10>)
 8001a16:	f002 f842 	bl	8003a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200001a4 	.word	0x200001a4

08001a24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <ADC1_2_IRQHandler+0x10>)
 8001a2a:	f000 fd29 	bl	8002480 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000a0 	.word	0x200000a0

08001a38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <I2C1_EV_IRQHandler+0x10>)
 8001a3e:	f002 fd7d 	bl	800453c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000150 	.word	0x20000150

08001a4c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <I2C1_ER_IRQHandler+0x10>)
 8001a52:	f002 fd8d 	bl	8004570 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000150 	.word	0x20000150

08001a60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <UART4_IRQHandler+0x10>)
 8001a66:	f006 f969 	bl	8007d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000234 	.word	0x20000234

08001a74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <UART5_IRQHandler+0x10>)
 8001a7a:	f006 f95f 	bl	8007d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002bc 	.word	0x200002bc

08001a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <TIM6_DAC_IRQHandler+0x10>)
 8001a8e:	f005 fe9d 	bl	80077cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000464 	.word	0x20000464

08001a9c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <DMA2_Channel1_IRQHandler+0x10>)
 8001aa2:	f001 fffc 	bl	8003a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000041c 	.word	0x2000041c

08001ab0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <DMA2_Channel2_IRQHandler+0x10>)
 8001ab6:	f001 fff2 	bl	8003a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200003d4 	.word	0x200003d4

08001ac4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <DMA2_Channel3_IRQHandler+0x10>)
 8001aca:	f001 ffe8 	bl	8003a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000038c 	.word	0x2000038c

08001ad8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <DMA2_Channel5_IRQHandler+0x10>)
 8001ade:	f001 ffde 	bl	8003a9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000344 	.word	0x20000344

08001aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <SystemInit+0x20>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001af6:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <SystemInit+0x20>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b14:	f7ff ffea 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	@ (8001b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <LoopForever+0xe>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	@ (8001b5c <LoopForever+0x16>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f007 f927 	bl	8008d90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b42:	f7ff f831 	bl	8000ba8 <main>

08001b46 <LoopForever>:

LoopForever:
    b LoopForever
 8001b46:	e7fe      	b.n	8001b46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b48:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001b54:	08008e54 	.word	0x08008e54
  ldr r2, =_sbss
 8001b58:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001b5c:	200004d8 	.word	0x200004d8

08001b60 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC3_IRQHandler>

08001b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f001 fdbd 	bl	80036ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b72:	200f      	movs	r0, #15
 8001b74:	f000 f80e 	bl	8001b94 <HAL_InitTick>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	e001      	b.n	8001b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b84:	f7ff fbc0 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ba0:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_InitTick+0x6c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d023      	beq.n	8001bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_InitTick+0x70>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <HAL_InitTick+0x6c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 fdc9 	bl	8003756 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10f      	bne.n	8001bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d809      	bhi.n	8001be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f001 fd93 	bl	8003702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <HAL_InitTick+0x74>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e007      	b.n	8001bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e004      	b.n	8001bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e001      	b.n	8001bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000018 	.word	0x20000018
 8001c04:	20000010 	.word	0x20000010
 8001c08:	20000014 	.word	0x20000014

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000018 	.word	0x20000018
 8001c30:	200004d4 	.word	0x200004d4

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200004d4 	.word	0x200004d4

08001c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3360      	adds	r3, #96	@ 0x60
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <LL_ADC_SetOffset+0x44>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cec:	bf00      	nop
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	03fff000 	.word	0x03fff000

08001cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3360      	adds	r3, #96	@ 0x60
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3360      	adds	r3, #96	@ 0x60
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	615a      	str	r2, [r3, #20]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3330      	adds	r3, #48	@ 0x30
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	211f      	movs	r1, #31
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 011f 	and.w	r1, r3, #31
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3314      	adds	r3, #20
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	0e5b      	lsrs	r3, r3, #25
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	4413      	add	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	0d1b      	lsrs	r3, r3, #20
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2107      	movs	r1, #7
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	0d1b      	lsrs	r3, r3, #20
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0318 	and.w	r3, r3, #24
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ea4:	40d9      	lsrs	r1, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	0007ffff 	.word	0x0007ffff

08001ec8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6093      	str	r3, [r2, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f88:	d101      	bne.n	8001f8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <LL_ADC_IsEnabled+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_ADC_IsEnabled+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ffa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ffe:	f043 0204 	orr.w	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d101      	bne.n	800202a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b08      	cmp	r3, #8
 800204a:	d101      	bne.n	8002050 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b089      	sub	sp, #36	@ 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e133      	b.n	80022e2 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff f961 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff3f 	bl	8001f24 <LL_ADC_IsDeepPowerDownEnabled>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff25 	bl	8001f00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff5a 	bl	8001f74 <LL_ADC_IsInternalRegulatorEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d115      	bne.n	80020f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff3e 	bl	8001f4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d0:	4b86      	ldr	r3, [pc, #536]	@ (80022ec <HAL_ADC_Init+0x28c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	4a86      	ldr	r2, [pc, #536]	@ (80022f0 <HAL_ADC_Init+0x290>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff3c 	bl	8001f74 <LL_ADC_IsInternalRegulatorEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	f043 0210 	orr.w	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff75 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 8002128:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 80cc 	bne.w	80022d0 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 80c8 	bne.w	80022d0 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002148:	f043 0202 	orr.w	r2, r3, #2
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff35 	bl	8001fc4 <LL_ADC_IsEnabled>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d115      	bne.n	800218c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002160:	4864      	ldr	r0, [pc, #400]	@ (80022f4 <HAL_ADC_Init+0x294>)
 8002162:	f7ff ff2f 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002166:	4604      	mov	r4, r0
 8002168:	4863      	ldr	r0, [pc, #396]	@ (80022f8 <HAL_ADC_Init+0x298>)
 800216a:	f7ff ff2b 	bl	8001fc4 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	431c      	orrs	r4, r3
 8002172:	4862      	ldr	r0, [pc, #392]	@ (80022fc <HAL_ADC_Init+0x29c>)
 8002174:	f7ff ff26 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002178:	4603      	mov	r3, r0
 800217a:	4323      	orrs	r3, r4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4619      	mov	r1, r3
 8002186:	485e      	ldr	r0, [pc, #376]	@ (8002300 <HAL_ADC_Init+0x2a0>)
 8002188:	f7ff fd60 	bl	8001c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e5b      	ldrb	r3, [r3, #25]
 8002190:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002196:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800219c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d106      	bne.n	80021c8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	3b01      	subs	r3, #1
 80021c0:	045b      	lsls	r3, r3, #17
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b46      	ldr	r3, [pc, #280]	@ (8002304 <HAL_ADC_Init+0x2a4>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff1b 	bl	8002038 <LL_ADC_INJ_IsConversionOngoing>
 8002202:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d140      	bne.n	800228c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d13d      	bne.n	800228c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
 8002218:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800221a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002222:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002232:	f023 0306 	bic.w	r3, r3, #6
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	430b      	orrs	r3, r1
 800223e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002246:	2b01      	cmp	r3, #1
 8002248:	d118      	bne.n	800227c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002260:	4311      	orrs	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002266:	4311      	orrs	r1, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800226c:	430a      	orrs	r2, r1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	e007      	b.n	800228c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10c      	bne.n	80022ae <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f023 010f 	bic.w	r1, r3, #15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	1e5a      	subs	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ac:	e007      	b.n	80022be <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 020f 	bic.w	r2, r2, #15
 80022bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80022ce:	e007      	b.n	80022e0 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d4:	f043 0210 	orr.w	r2, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000010 	.word	0x20000010
 80022f0:	053e2d63 	.word	0x053e2d63
 80022f4:	50040000 	.word	0x50040000
 80022f8:	50040100 	.word	0x50040100
 80022fc:	50040200 	.word	0x50040200
 8002300:	50040300 	.word	0x50040300
 8002304:	fff0c007 	.word	0xfff0c007

08002308 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002314:	4853      	ldr	r0, [pc, #332]	@ (8002464 <HAL_ADC_Start_DMA+0x15c>)
 8002316:	f7ff fdd7 	bl	8001ec8 <LL_ADC_GetMultimode>
 800231a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe76 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 8093 	bne.w	8002454 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_ADC_Start_DMA+0x34>
 8002338:	2302      	movs	r3, #2
 800233a:	e08e      	b.n	800245a <HAL_ADC_Start_DMA+0x152>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a47      	ldr	r2, [pc, #284]	@ (8002468 <HAL_ADC_Start_DMA+0x160>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d008      	beq.n	8002360 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b05      	cmp	r3, #5
 8002358:	d002      	beq.n	8002360 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b09      	cmp	r3, #9
 800235e:	d172      	bne.n	8002446 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fed1 	bl	8003108 <ADC_Enable>
 8002366:	4603      	mov	r3, r0
 8002368:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d165      	bne.n	800243c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a38      	ldr	r2, [pc, #224]	@ (800246c <HAL_ADC_Start_DMA+0x164>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d002      	beq.n	8002394 <HAL_ADC_Start_DMA+0x8c>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e000      	b.n	8002396 <HAL_ADC_Start_DMA+0x8e>
 8002394:	4b36      	ldr	r3, [pc, #216]	@ (8002470 <HAL_ADC_Start_DMA+0x168>)
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	4293      	cmp	r3, r2
 800239c:	d002      	beq.n	80023a4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c0:	f023 0206 	bic.w	r2, r3, #6
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023c8:	e002      	b.n	80023d0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d4:	4a27      	ldr	r2, [pc, #156]	@ (8002474 <HAL_ADC_Start_DMA+0x16c>)
 80023d6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023dc:	4a26      	ldr	r2, [pc, #152]	@ (8002478 <HAL_ADC_Start_DMA+0x170>)
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e4:	4a25      	ldr	r2, [pc, #148]	@ (800247c <HAL_ADC_Start_DMA+0x174>)
 80023e6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	221c      	movs	r2, #28
 80023ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0210 	orr.w	r2, r2, #16
 8002406:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3340      	adds	r3, #64	@ 0x40
 8002422:	4619      	mov	r1, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f001 fa5a 	bl	80038e0 <HAL_DMA_Start_IT>
 800242c:	4603      	mov	r3, r0
 800242e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fdd8 	bl	8001fea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800243a:	e00d      	b.n	8002458 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8002444:	e008      	b.n	8002458 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002452:	e001      	b.n	8002458 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	50040300 	.word	0x50040300
 8002468:	50040200 	.word	0x50040200
 800246c:	50040100 	.word	0x50040100
 8002470:	50040000 	.word	0x50040000
 8002474:	08003215 	.word	0x08003215
 8002478:	080032ed 	.word	0x080032ed
 800247c:	08003309 	.word	0x08003309

08002480 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	@ 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800249c:	4882      	ldr	r0, [pc, #520]	@ (80026a8 <HAL_ADC_IRQHandler+0x228>)
 800249e:	f7ff fd13 	bl	8001ec8 <LL_ADC_GetMultimode>
 80024a2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d017      	beq.n	80024de <HAL_ADC_IRQHandler+0x5e>
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 ff81 	bl	80033d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <HAL_ADC_IRQHandler+0x72>
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8083 	beq.w	8002604 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d07d      	beq.n	8002604 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fc2d 	bl	8001d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d062      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5d      	ldr	r2, [pc, #372]	@ (80026ac <HAL_ADC_IRQHandler+0x22c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d002      	beq.n	8002540 <HAL_ADC_IRQHandler+0xc0>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	e000      	b.n	8002542 <HAL_ADC_IRQHandler+0xc2>
 8002540:	4b5b      	ldr	r3, [pc, #364]	@ (80026b0 <HAL_ADC_IRQHandler+0x230>)
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4293      	cmp	r3, r2
 8002548:	d008      	beq.n	800255c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d002      	beq.n	800255c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b09      	cmp	r3, #9
 800255a:	d104      	bne.n	8002566 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	623b      	str	r3, [r7, #32]
 8002564:	e00c      	b.n	8002580 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a50      	ldr	r2, [pc, #320]	@ (80026ac <HAL_ADC_IRQHandler+0x22c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d002      	beq.n	8002576 <HAL_ADC_IRQHandler+0xf6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	e000      	b.n	8002578 <HAL_ADC_IRQHandler+0xf8>
 8002576:	4b4e      	ldr	r3, [pc, #312]	@ (80026b0 <HAL_ADC_IRQHandler+0x230>)
 8002578:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d135      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b08      	cmp	r3, #8
 8002596:	d12e      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fd38 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d11a      	bne.n	80025de <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 020c 	bic.w	r2, r2, #12
 80025b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d112      	bne.n	80025f6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	f043 0201 	orr.w	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	@ 0x58
 80025dc:	e00b      	b.n	80025f6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	f043 0210 	orr.w	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe fe3a 	bl	8001270 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	220c      	movs	r2, #12
 8002602:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <HAL_ADC_IRQHandler+0x198>
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 809f 	beq.w	8002762 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8099 	beq.w	8002762 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fbd8 	bl	8001e02 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002652:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fb93 	bl	8001d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 800265e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a11      	ldr	r2, [pc, #68]	@ (80026ac <HAL_ADC_IRQHandler+0x22c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d002      	beq.n	8002670 <HAL_ADC_IRQHandler+0x1f0>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	e000      	b.n	8002672 <HAL_ADC_IRQHandler+0x1f2>
 8002670:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <HAL_ADC_IRQHandler+0x230>)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	4293      	cmp	r3, r2
 8002678:	d008      	beq.n	800268c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b06      	cmp	r3, #6
 8002684:	d002      	beq.n	800268c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b07      	cmp	r3, #7
 800268a:	d104      	bne.n	8002696 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	e013      	b.n	80026be <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <HAL_ADC_IRQHandler+0x22c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_ADC_IRQHandler+0x234>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_ADC_IRQHandler+0x236>
 80026a6:	bf00      	nop
 80026a8:	50040300 	.word	0x50040300
 80026ac:	50040100 	.word	0x50040100
 80026b0:	50040000 	.word	0x50040000
 80026b4:	4b7d      	ldr	r3, [pc, #500]	@ (80028ac <HAL_ADC_IRQHandler+0x42c>)
 80026b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d047      	beq.n	8002754 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_ADC_IRQHandler+0x25e>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03f      	beq.n	8002754 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d13a      	bne.n	8002754 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e8:	2b40      	cmp	r3, #64	@ 0x40
 80026ea:	d133      	bne.n	8002754 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d12e      	bne.n	8002754 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fc9c 	bl	8002038 <LL_ADC_INJ_IsConversionOngoing>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11a      	bne.n	800273c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002714:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d112      	bne.n	8002754 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	659a      	str	r2, [r3, #88]	@ 0x58
 800273a:	e00b      	b.n	8002754 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f043 0210 	orr.w	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fe17 	bl	8003388 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2260      	movs	r2, #96	@ 0x60
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002768:	2b00      	cmp	r3, #0
 800276a:	d011      	beq.n	8002790 <HAL_ADC_IRQHandler+0x310>
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8a0 	bl	80028c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2280      	movs	r2, #128	@ 0x80
 800278e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d012      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x340>
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fdfd 	bl	80033b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <HAL_ADC_IRQHandler+0x370>
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fdef 	bl	80033c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d036      	beq.n	8002868 <HAL_ADC_IRQHandler+0x3e8>
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	d031      	beq.n	8002868 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800280c:	2301      	movs	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002810:	e014      	b.n	800283c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002818:	4825      	ldr	r0, [pc, #148]	@ (80028b0 <HAL_ADC_IRQHandler+0x430>)
 800281a:	f7ff fb63 	bl	8001ee4 <LL_ADC_GetMultiDMATransfer>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00b      	beq.n	800283c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002824:	2301      	movs	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
 8002828:	e008      	b.n	800283c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002838:	2301      	movs	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10e      	bne.n	8002860 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	f043 0202 	orr.w	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f83e 	bl	80028dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2210      	movs	r2, #16
 8002866:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286e:	2b00      	cmp	r3, #0
 8002870:	d018      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x424>
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	f043 0208 	orr.w	r2, r3, #8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800289c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fd7c 	bl	800339c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	@ 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	50040000 	.word	0x50040000
 80028b0:	50040300 	.word	0x50040300

080028b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0b6      	sub	sp, #216	@ 0xd8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x22>
 800290e:	2302      	movs	r3, #2
 8002910:	e3e3      	b.n	80030da <HAL_ADC_ConfigChannel+0x7ea>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fb77 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 83c4 	bne.w	80030b4 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d824      	bhi.n	8002986 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	3b02      	subs	r3, #2
 8002942:	2b03      	cmp	r3, #3
 8002944:	d81b      	bhi.n	800297e <HAL_ADC_ConfigChannel+0x8e>
 8002946:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <HAL_ADC_ConfigChannel+0x5c>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	0800295d 	.word	0x0800295d
 8002950:	08002965 	.word	0x08002965
 8002954:	0800296d 	.word	0x0800296d
 8002958:	08002975 	.word	0x08002975
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800295c:	230c      	movs	r3, #12
 800295e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002962:	e010      	b.n	8002986 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002964:	2312      	movs	r3, #18
 8002966:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800296a:	e00c      	b.n	8002986 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800296c:	2318      	movs	r3, #24
 800296e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002972:	e008      	b.n	8002986 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800297c:	e003      	b.n	8002986 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800297e:	2306      	movs	r3, #6
 8002980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002984:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002994:	f7ff fa09 	bl	8001daa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fb38 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 80029a2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fb44 	bl	8002038 <LL_ADC_INJ_IsConversionOngoing>
 80029b0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 81bf 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 81ba 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029d0:	d10f      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	4619      	mov	r1, r3
 80029de:	f7ff fa23 	bl	8001e28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f9b7 	bl	8001d5e <LL_ADC_SetSamplingTimeCommonConfig>
 80029f0:	e00e      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f7ff fa12 	bl	8001e28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f9a7 	bl	8001d5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	08db      	lsrs	r3, r3, #3
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d00a      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6919      	ldr	r1, [r3, #16]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a42:	f7ff f937 	bl	8001cb4 <LL_ADC_SetOffset>
 8002a46:	e179      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f954 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x184>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f949 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	0e9b      	lsrs	r3, r3, #26
 8002a6e:	f003 021f 	and.w	r2, r3, #31
 8002a72:	e01e      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x1c2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f93e 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e004      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002aa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x1da>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	e018      	b.n	8002afc <HAL_ADC_ConfigChannel+0x20c>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002aee:	2320      	movs	r3, #32
 8002af0:	e004      	b.n	8002afc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002af2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d106      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f90d 	bl	8001d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f8f1 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x24a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff f8e6 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002b30:	4603      	mov	r3, r0
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	e01e      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x288>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff f8db 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e004      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x2a0>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0e9b      	lsrs	r3, r3, #26
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	e018      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x2d2>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e004      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d106      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f8aa 	bl	8001d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2102      	movs	r1, #2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff f88e 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x310>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f883 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	f003 021f 	and.w	r2, r3, #31
 8002bfe:	e01e      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x34e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2102      	movs	r1, #2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f878 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e004      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x366>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	e014      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x390>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002c72:	2320      	movs	r3, #32
 8002c74:	e004      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d106      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f84b 	bl	8001d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2103      	movs	r1, #3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff f82f 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x3ce>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2103      	movs	r1, #3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff f824 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	e017      	b.n	8002cee <HAL_ADC_ConfigChannel+0x3fe>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f819 	bl	8001cfc <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002cda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x416>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	e011      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x43a>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002d14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d16:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002d1e:	2320      	movs	r3, #32
 8002d20:	e003      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002d22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d106      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2103      	movs	r1, #3
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fff6 	bl	8001d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff f93f 	bl	8001fc4 <LL_ADC_IsEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f040 813f 	bne.w	8002fcc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7ff f890 	bl	8001e80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a8e      	ldr	r2, [pc, #568]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	f040 8130 	bne.w	8002fcc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x4a4>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	3301      	adds	r3, #1
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2b09      	cmp	r3, #9
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e019      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x4d8>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e003      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002db0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2b09      	cmp	r3, #9
 8002dc0:	bf94      	ite	ls
 8002dc2:	2301      	movls	r3, #1
 8002dc4:	2300      	movhi	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d079      	beq.n	8002ec0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x4f8>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	3301      	adds	r3, #1
 8002de0:	069b      	lsls	r3, r3, #26
 8002de2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de6:	e015      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x524>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002df8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e003      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	069b      	lsls	r3, r3, #26
 8002e10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x544>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	e017      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x574>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e44:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	ea42 0103 	orr.w	r1, r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x59a>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	051b      	lsls	r3, r3, #20
 8002e88:	e018      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x5cc>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	e003      	b.n	8002eae <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	e080      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x5ec>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	069b      	lsls	r3, r3, #26
 8002ed6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eda:	e015      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x618>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e003      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	069b      	lsls	r3, r3, #26
 8002f04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x638>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	e017      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x668>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	61bb      	str	r3, [r7, #24]
  return result;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e003      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	2101      	movs	r1, #1
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	ea42 0103 	orr.w	r1, r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10d      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x694>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b1e      	subs	r3, #30
 8002f7c:	051b      	lsls	r3, r3, #20
 8002f7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	e01d      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x6d0>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	60fb      	str	r3, [r7, #12]
  return result;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d103      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	e005      	b.n	8002fac <HAL_ADC_ConfigChannel+0x6bc>
 8002fa0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f003 021f 	and.w	r2, r3, #31
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3b1e      	subs	r3, #30
 8002fba:	051b      	lsls	r3, r3, #20
 8002fbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fe ff2e 	bl	8001e28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b44      	ldr	r3, [pc, #272]	@ (80030e4 <HAL_ADC_ConfigChannel+0x7f4>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d07a      	beq.n	80030ce <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd8:	4843      	ldr	r0, [pc, #268]	@ (80030e8 <HAL_ADC_ConfigChannel+0x7f8>)
 8002fda:	f7fe fe5d 	bl	8001c98 <LL_ADC_GetCommonPathInternalCh>
 8002fde:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a41      	ldr	r2, [pc, #260]	@ (80030ec <HAL_ADC_ConfigChannel+0x7fc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d12c      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d126      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80030f0 <HAL_ADC_ConfigChannel+0x800>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_ADC_ConfigChannel+0x71c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a3b      	ldr	r2, [pc, #236]	@ (80030f4 <HAL_ADC_ConfigChannel+0x804>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d15d      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003010:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003014:	4619      	mov	r1, r3
 8003016:	4834      	ldr	r0, [pc, #208]	@ (80030e8 <HAL_ADC_ConfigChannel+0x7f8>)
 8003018:	f7fe fe2b 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800301c:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <HAL_ADC_ConfigChannel+0x808>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	4a36      	ldr	r2, [pc, #216]	@ (80030fc <HAL_ADC_ConfigChannel+0x80c>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003036:	e002      	b.n	800303e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3b01      	subs	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f9      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003044:	e040      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2d      	ldr	r2, [pc, #180]	@ (8003100 <HAL_ADC_ConfigChannel+0x810>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d118      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d112      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a23      	ldr	r2, [pc, #140]	@ (80030f0 <HAL_ADC_ConfigChannel+0x800>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x780>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a22      	ldr	r2, [pc, #136]	@ (80030f4 <HAL_ADC_ConfigChannel+0x804>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d12d      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003074:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003078:	4619      	mov	r1, r3
 800307a:	481b      	ldr	r0, [pc, #108]	@ (80030e8 <HAL_ADC_ConfigChannel+0x7f8>)
 800307c:	f7fe fdf9 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003080:	e024      	b.n	80030cc <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1f      	ldr	r2, [pc, #124]	@ (8003104 <HAL_ADC_ConfigChannel+0x814>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d120      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800308c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11a      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <HAL_ADC_ConfigChannel+0x800>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d115      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030aa:	4619      	mov	r1, r3
 80030ac:	480e      	ldr	r0, [pc, #56]	@ (80030e8 <HAL_ADC_ConfigChannel+0x7f8>)
 80030ae:	f7fe fde0 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
 80030b2:	e00c      	b.n	80030ce <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80030c6:	e002      	b.n	80030ce <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c8:	bf00      	nop
 80030ca:	e000      	b.n	80030ce <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80030d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	37d8      	adds	r7, #216	@ 0xd8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	80080000 	.word	0x80080000
 80030e8:	50040300 	.word	0x50040300
 80030ec:	c7520000 	.word	0xc7520000
 80030f0:	50040000 	.word	0x50040000
 80030f4:	50040200 	.word	0x50040200
 80030f8:	20000010 	.word	0x20000010
 80030fc:	053e2d63 	.word	0x053e2d63
 8003100:	cb840000 	.word	0xcb840000
 8003104:	80000001 	.word	0x80000001

08003108 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003110:	2300      	movs	r3, #0
 8003112:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe ff53 	bl	8001fc4 <LL_ADC_IsEnabled>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d169      	bne.n	80031f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <ADC_Enable+0xfc>)
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	f043 0210 	orr.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e055      	b.n	80031fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe ff22 	bl	8001f9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003158:	482b      	ldr	r0, [pc, #172]	@ (8003208 <ADC_Enable+0x100>)
 800315a:	f7fe fd9d 	bl	8001c98 <LL_ADC_GetCommonPathInternalCh>
 800315e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003168:	4b28      	ldr	r3, [pc, #160]	@ (800320c <ADC_Enable+0x104>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	4a28      	ldr	r2, [pc, #160]	@ (8003210 <ADC_Enable+0x108>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003182:	e002      	b.n	800318a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3b01      	subs	r3, #1
 8003188:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f9      	bne.n	8003184 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003190:	f7fe fd50 	bl	8001c34 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003196:	e028      	b.n	80031ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe ff11 	bl	8001fc4 <LL_ADC_IsEnabled>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe fef5 	bl	8001f9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031b2:	f7fe fd3f 	bl	8001c34 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d914      	bls.n	80031ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d00d      	beq.n	80031ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e007      	b.n	80031fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d1cf      	bne.n	8003198 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	8000003f 	.word	0x8000003f
 8003208:	50040300 	.word	0x50040300
 800320c:	20000010 	.word	0x20000010
 8003210:	053e2d63 	.word	0x053e2d63

08003214 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800322a:	2b00      	cmp	r3, #0
 800322c:	d14b      	bne.n	80032c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003232:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d021      	beq.n	800328c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe fd99 	bl	8001d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d032      	beq.n	80032be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d12b      	bne.n	80032be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11f      	bne.n	80032be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	659a      	str	r2, [r3, #88]	@ 0x58
 800328a:	e018      	b.n	80032be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d111      	bne.n	80032be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	f043 0201 	orr.w	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f7fd ffd6 	bl	8001270 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032c4:	e00e      	b.n	80032e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f7ff fb02 	bl	80028dc <HAL_ADC_ErrorCallback>
}
 80032d8:	e004      	b.n	80032e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff fada 	bl	80028b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f7ff fad4 	bl	80028dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <LL_ADC_IsEnabled>:
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <LL_ADC_IsEnabled+0x18>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_ADC_IsEnabled+0x1a>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_ADC_REG_IsConversionOngoing>:
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d101      	bne.n	800337a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b0a1      	sub	sp, #132	@ 0x84
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003406:	2302      	movs	r3, #2
 8003408:	e093      	b.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003412:	2300      	movs	r3, #0
 8003414:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003416:	2300      	movs	r3, #0
 8003418:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a47      	ldr	r2, [pc, #284]	@ (800353c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d102      	bne.n	800342a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003424:	4b46      	ldr	r3, [pc, #280]	@ (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e001      	b.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e072      	b.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff87 	bl	8003362 <LL_ADC_REG_IsConversionOngoing>
 8003454:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff81 	bl	8003362 <LL_ADC_REG_IsConversionOngoing>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d154      	bne.n	8003510 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003466:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003468:	2b00      	cmp	r3, #0
 800346a:	d151      	bne.n	8003510 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800346c:	4b35      	ldr	r3, [pc, #212]	@ (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800346e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02c      	beq.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800348a:	035b      	lsls	r3, r3, #13
 800348c:	430b      	orrs	r3, r1
 800348e:	431a      	orrs	r2, r3
 8003490:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003492:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003494:	4829      	ldr	r0, [pc, #164]	@ (800353c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003496:	f7ff ff51 	bl	800333c <LL_ADC_IsEnabled>
 800349a:	4604      	mov	r4, r0
 800349c:	4828      	ldr	r0, [pc, #160]	@ (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800349e:	f7ff ff4d 	bl	800333c <LL_ADC_IsEnabled>
 80034a2:	4603      	mov	r3, r0
 80034a4:	431c      	orrs	r4, r3
 80034a6:	4828      	ldr	r0, [pc, #160]	@ (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034a8:	f7ff ff48 	bl	800333c <LL_ADC_IsEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4323      	orrs	r3, r4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d137      	bne.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034bc:	f023 030f 	bic.w	r3, r3, #15
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	6811      	ldr	r1, [r2, #0]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	431a      	orrs	r2, r3
 80034cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ce:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034d0:	e028      	b.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034de:	4817      	ldr	r0, [pc, #92]	@ (800353c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034e0:	f7ff ff2c 	bl	800333c <LL_ADC_IsEnabled>
 80034e4:	4604      	mov	r4, r0
 80034e6:	4816      	ldr	r0, [pc, #88]	@ (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034e8:	f7ff ff28 	bl	800333c <LL_ADC_IsEnabled>
 80034ec:	4603      	mov	r3, r0
 80034ee:	431c      	orrs	r4, r3
 80034f0:	4815      	ldr	r0, [pc, #84]	@ (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034f2:	f7ff ff23 	bl	800333c <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4323      	orrs	r3, r4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d112      	bne.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003506:	f023 030f 	bic.w	r3, r3, #15
 800350a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800350c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800350e:	e009      	b.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003522:	e000      	b.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003524:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800352e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003532:	4618      	mov	r0, r3
 8003534:	3784      	adds	r7, #132	@ 0x84
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	bf00      	nop
 800353c:	50040000 	.word	0x50040000
 8003540:	50040100 	.word	0x50040100
 8003544:	50040300 	.word	0x50040300
 8003548:	50040200 	.word	0x50040200

0800354c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800355c:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003568:	4013      	ands	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003574:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357e:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	60d3      	str	r3, [r2, #12]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003598:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <__NVIC_GetPriorityGrouping+0x18>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0307 	and.w	r3, r3, #7
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db0b      	blt.n	80035da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f003 021f 	and.w	r2, r3, #31
 80035c8:	4907      	ldr	r1, [pc, #28]	@ (80035e8 <__NVIC_EnableIRQ+0x38>)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2001      	movs	r0, #1
 80035d2:	fa00 f202 	lsl.w	r2, r0, r2
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e000e100 	.word	0xe000e100

080035ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	db0a      	blt.n	8003616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	490c      	ldr	r1, [pc, #48]	@ (8003638 <__NVIC_SetPriority+0x4c>)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	0112      	lsls	r2, r2, #4
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	440b      	add	r3, r1
 8003610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003614:	e00a      	b.n	800362c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4908      	ldr	r1, [pc, #32]	@ (800363c <__NVIC_SetPriority+0x50>)
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3b04      	subs	r3, #4
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	440b      	add	r3, r1
 800362a:	761a      	strb	r2, [r3, #24]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000e100 	.word	0xe000e100
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f1c3 0307 	rsb	r3, r3, #7
 800365a:	2b04      	cmp	r3, #4
 800365c:	bf28      	it	cs
 800365e:	2304      	movcs	r3, #4
 8003660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3304      	adds	r3, #4
 8003666:	2b06      	cmp	r3, #6
 8003668:	d902      	bls.n	8003670 <NVIC_EncodePriority+0x30>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3b03      	subs	r3, #3
 800366e:	e000      	b.n	8003672 <NVIC_EncodePriority+0x32>
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	401a      	ands	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	43d9      	mvns	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	4313      	orrs	r3, r2
         );
}
 800369a:	4618      	mov	r0, r3
 800369c:	3724      	adds	r7, #36	@ 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036b8:	d301      	bcc.n	80036be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <SysTick_Config+0x40>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c6:	210f      	movs	r1, #15
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f7ff ff8e 	bl	80035ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <SysTick_Config+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d6:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <SysTick_Config+0x40>)
 80036d8:	2207      	movs	r2, #7
 80036da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff29 	bl	800354c <__NVIC_SetPriorityGrouping>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003714:	f7ff ff3e 	bl	8003594 <__NVIC_GetPriorityGrouping>
 8003718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7ff ff8e 	bl	8003640 <NVIC_EncodePriority>
 8003724:	4602      	mov	r2, r0
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff5d 	bl	80035ec <__NVIC_SetPriority>
}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff31 	bl	80035b0 <__NVIC_EnableIRQ>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ffa2 	bl	80036a8 <SysTick_Config>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e098      	b.n	80038b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4b4d      	ldr	r3, [pc, #308]	@ (80038c0 <HAL_DMA_Init+0x150>)
 800378a:	429a      	cmp	r2, r3
 800378c:	d80f      	bhi.n	80037ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b4b      	ldr	r3, [pc, #300]	@ (80038c4 <HAL_DMA_Init+0x154>)
 8003796:	4413      	add	r3, r2
 8003798:	4a4b      	ldr	r2, [pc, #300]	@ (80038c8 <HAL_DMA_Init+0x158>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a48      	ldr	r2, [pc, #288]	@ (80038cc <HAL_DMA_Init+0x15c>)
 80037aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80037ac:	e00e      	b.n	80037cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b46      	ldr	r3, [pc, #280]	@ (80038d0 <HAL_DMA_Init+0x160>)
 80037b6:	4413      	add	r3, r2
 80037b8:	4a43      	ldr	r2, [pc, #268]	@ (80038c8 <HAL_DMA_Init+0x158>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a42      	ldr	r2, [pc, #264]	@ (80038d4 <HAL_DMA_Init+0x164>)
 80037ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003826:	d039      	beq.n	800389c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	4a27      	ldr	r2, [pc, #156]	@ (80038cc <HAL_DMA_Init+0x15c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d11a      	bne.n	8003868 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003832:	4b29      	ldr	r3, [pc, #164]	@ (80038d8 <HAL_DMA_Init+0x168>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f003 031c 	and.w	r3, r3, #28
 800383e:	210f      	movs	r1, #15
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	4924      	ldr	r1, [pc, #144]	@ (80038d8 <HAL_DMA_Init+0x168>)
 8003848:	4013      	ands	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800384c:	4b22      	ldr	r3, [pc, #136]	@ (80038d8 <HAL_DMA_Init+0x168>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6859      	ldr	r1, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003858:	f003 031c 	and.w	r3, r3, #28
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	491d      	ldr	r1, [pc, #116]	@ (80038d8 <HAL_DMA_Init+0x168>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
 8003866:	e019      	b.n	800389c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003868:	4b1c      	ldr	r3, [pc, #112]	@ (80038dc <HAL_DMA_Init+0x16c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003870:	f003 031c 	and.w	r3, r3, #28
 8003874:	210f      	movs	r1, #15
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	4917      	ldr	r1, [pc, #92]	@ (80038dc <HAL_DMA_Init+0x16c>)
 800387e:	4013      	ands	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003882:	4b16      	ldr	r3, [pc, #88]	@ (80038dc <HAL_DMA_Init+0x16c>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	f003 031c 	and.w	r3, r3, #28
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	4911      	ldr	r1, [pc, #68]	@ (80038dc <HAL_DMA_Init+0x16c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40020407 	.word	0x40020407
 80038c4:	bffdfff8 	.word	0xbffdfff8
 80038c8:	cccccccd 	.word	0xcccccccd
 80038cc:	40020000 	.word	0x40020000
 80038d0:	bffdfbf8 	.word	0xbffdfbf8
 80038d4:	40020400 	.word	0x40020400
 80038d8:	400200a8 	.word	0x400200a8
 80038dc:	400204a8 	.word	0x400204a8

080038e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_DMA_Start_IT+0x20>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e04b      	b.n	8003998 <HAL_DMA_Start_IT+0xb8>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d13a      	bne.n	800398a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f96d 	bl	8003c18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 020e 	orr.w	r2, r2, #14
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e00f      	b.n	8003978 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0204 	bic.w	r2, r2, #4
 8003966:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 020a 	orr.w	r2, r2, #10
 8003976:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e005      	b.n	8003996 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d008      	beq.n	80039ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e022      	b.n	8003a10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 020e 	bic.w	r2, r2, #14
 80039d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f003 021c 	and.w	r2, r3, #28
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d005      	beq.n	8003a40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2204      	movs	r2, #4
 8003a38:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e029      	b.n	8003a94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 020e 	bic.w	r2, r2, #14
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a64:	f003 021c 	and.w	r2, r3, #28
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a72:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
    }
  }
  return status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	f003 031c 	and.w	r3, r3, #28
 8003abe:	2204      	movs	r2, #4
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d026      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x7a>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d021      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d107      	bne.n	8003af2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f003 021c 	and.w	r2, r3, #28
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	2104      	movs	r1, #4
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d071      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b16:	e06c      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1c:	f003 031c 	and.w	r3, r3, #28
 8003b20:	2202      	movs	r2, #2
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02e      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xec>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d029      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 020a 	bic.w	r2, r2, #10
 8003b52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b60:	f003 021c 	and.w	r2, r3, #28
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	2102      	movs	r1, #2
 8003b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d038      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b88:	e033      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	f003 031c 	and.w	r3, r3, #28
 8003b92:	2208      	movs	r2, #8
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02a      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x156>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d025      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 020e 	bic.w	r2, r2, #14
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbc:	f003 021c 	and.w	r2, r3, #28
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
}
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c0a:	b2db      	uxtb	r3, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f003 021c 	and.w	r2, r3, #28
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d108      	bne.n	8003c5c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c5a:	e007      	b.n	8003c6c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c86:	e166      	b.n	8003f56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8158 	beq.w	8003f50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d005      	beq.n	8003cb8 <HAL_GPIO_Init+0x40>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d130      	bne.n	8003d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cee:	2201      	movs	r2, #1
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	f003 0201 	and.w	r2, r3, #1
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d017      	beq.n	8003d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d123      	bne.n	8003daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	08da      	lsrs	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3208      	adds	r2, #8
 8003d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	220f      	movs	r2, #15
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	08da      	lsrs	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3208      	adds	r2, #8
 8003da4:	6939      	ldr	r1, [r7, #16]
 8003da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	2203      	movs	r2, #3
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0203 	and.w	r2, r3, #3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80b2 	beq.w	8003f50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dec:	4b61      	ldr	r3, [pc, #388]	@ (8003f74 <HAL_GPIO_Init+0x2fc>)
 8003dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df0:	4a60      	ldr	r2, [pc, #384]	@ (8003f74 <HAL_GPIO_Init+0x2fc>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003df8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f74 <HAL_GPIO_Init+0x2fc>)
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e04:	4a5c      	ldr	r2, [pc, #368]	@ (8003f78 <HAL_GPIO_Init+0x300>)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e2e:	d02b      	beq.n	8003e88 <HAL_GPIO_Init+0x210>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a52      	ldr	r2, [pc, #328]	@ (8003f7c <HAL_GPIO_Init+0x304>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d025      	beq.n	8003e84 <HAL_GPIO_Init+0x20c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a51      	ldr	r2, [pc, #324]	@ (8003f80 <HAL_GPIO_Init+0x308>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d01f      	beq.n	8003e80 <HAL_GPIO_Init+0x208>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a50      	ldr	r2, [pc, #320]	@ (8003f84 <HAL_GPIO_Init+0x30c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d019      	beq.n	8003e7c <HAL_GPIO_Init+0x204>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a4f      	ldr	r2, [pc, #316]	@ (8003f88 <HAL_GPIO_Init+0x310>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_GPIO_Init+0x200>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a4e      	ldr	r2, [pc, #312]	@ (8003f8c <HAL_GPIO_Init+0x314>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00d      	beq.n	8003e74 <HAL_GPIO_Init+0x1fc>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8003f90 <HAL_GPIO_Init+0x318>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d007      	beq.n	8003e70 <HAL_GPIO_Init+0x1f8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4c      	ldr	r2, [pc, #304]	@ (8003f94 <HAL_GPIO_Init+0x31c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <HAL_GPIO_Init+0x1f4>
 8003e68:	2307      	movs	r3, #7
 8003e6a:	e00e      	b.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	e00c      	b.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e70:	2306      	movs	r3, #6
 8003e72:	e00a      	b.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e74:	2305      	movs	r3, #5
 8003e76:	e008      	b.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e006      	b.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e004      	b.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e002      	b.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	f002 0203 	and.w	r2, r2, #3
 8003e90:	0092      	lsls	r2, r2, #2
 8003e92:	4093      	lsls	r3, r2
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e9a:	4937      	ldr	r1, [pc, #220]	@ (8003f78 <HAL_GPIO_Init+0x300>)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ecc:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ed2:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ef6:	4a28      	ldr	r2, [pc, #160]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003efc:	4b26      	ldr	r3, [pc, #152]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f20:	4a1d      	ldr	r2, [pc, #116]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f26:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f4a:	4a13      	ldr	r2, [pc, #76]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3301      	adds	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f47f ae91 	bne.w	8003c88 <HAL_GPIO_Init+0x10>
  }
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	48000400 	.word	0x48000400
 8003f80:	48000800 	.word	0x48000800
 8003f84:	48000c00 	.word	0x48000c00
 8003f88:	48001000 	.word	0x48001000
 8003f8c:	48001400 	.word	0x48001400
 8003f90:	48001800 	.word	0x48001800
 8003f94:	48001c00 	.word	0x48001c00
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	e001      	b.n	8003fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e08d      	b.n	800412a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd fa34 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	@ 0x24
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800404c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800405c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	e006      	b.n	8004084 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004082:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d108      	bne.n	800409e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	e007      	b.n	80040ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69d9      	ldr	r1, [r3, #28]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1a      	ldr	r2, [r3, #32]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	461a      	mov	r2, r3
 8004140:	460b      	mov	r3, r1
 8004142:	817b      	strh	r3, [r7, #10]
 8004144:	4613      	mov	r3, r2
 8004146:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b20      	cmp	r3, #32
 8004156:	f040 80ef 	bne.w	8004338 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004168:	d101      	bne.n	800416e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	e0e5      	b.n	800433a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2C_Master_Transmit_DMA+0x48>
 8004178:	2302      	movs	r3, #2
 800417a:	e0de      	b.n	800433a <HAL_I2C_Master_Transmit_DMA+0x206>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2221      	movs	r2, #33	@ 0x21
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2210      	movs	r2, #16
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	893a      	ldrh	r2, [r7, #8]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a66      	ldr	r2, [pc, #408]	@ (8004344 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80041aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a66      	ldr	r2, [pc, #408]	@ (8004348 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80041b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2bff      	cmp	r3, #255	@ 0xff
 80041ba:	d906      	bls.n	80041ca <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	22ff      	movs	r2, #255	@ 0xff
 80041c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80041c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e007      	b.n	80041da <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80041d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041d8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01a      	beq.n	8004218 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	d074      	beq.n	800430a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d022      	beq.n	800426e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	4a47      	ldr	r2, [pc, #284]	@ (800434c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800422e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	4a46      	ldr	r2, [pc, #280]	@ (8004350 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004236:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	2200      	movs	r2, #0
 8004246:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004258:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800425e:	f7ff fb3f 	bl	80038e0 <HAL_DMA_Start_IT>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004266:	7dfb      	ldrb	r3, [r7, #23]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d13a      	bne.n	80042e2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800426c:	e013      	b.n	8004296 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e051      	b.n	800433a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429a:	b2db      	uxtb	r3, r3
 800429c:	3301      	adds	r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	8979      	ldrh	r1, [r7, #10]
 80042a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004354 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f001 fc69 	bl	8005b80 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80042c8:	2110      	movs	r1, #16
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f001 fc8a 	bl	8005be4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e028      	b.n	8004334 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	f043 0210 	orr.w	r2, r3, #16
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e017      	b.n	800433a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a12      	ldr	r2, [pc, #72]	@ (8004358 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800430e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	8979      	ldrh	r1, [r7, #10]
 8004316:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f001 fc2e 	bl	8005b80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800432c:	2101      	movs	r1, #1
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f001 fc58 	bl	8005be4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	ffff0000 	.word	0xffff0000
 8004348:	08004b0d 	.word	0x08004b0d
 800434c:	080059eb 	.word	0x080059eb
 8004350:	08005b17 	.word	0x08005b17
 8004354:	80002000 	.word	0x80002000
 8004358:	080046cf 	.word	0x080046cf

0800435c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	461a      	mov	r2, r3
 8004368:	460b      	mov	r3, r1
 800436a:	817b      	strh	r3, [r7, #10]
 800436c:	4613      	mov	r3, r2
 800436e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b20      	cmp	r3, #32
 800437a:	f040 80cd 	bne.w	8004518 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800438c:	d101      	bne.n	8004392 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	e0c3      	b.n	800451a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_I2C_Master_Receive_DMA+0x44>
 800439c:	2302      	movs	r3, #2
 800439e:	e0bc      	b.n	800451a <HAL_I2C_Master_Receive_DMA+0x1be>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2222      	movs	r2, #34	@ 0x22
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2210      	movs	r2, #16
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	893a      	ldrh	r2, [r7, #8]
 80043c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a55      	ldr	r2, [pc, #340]	@ (8004524 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a55      	ldr	r2, [pc, #340]	@ (8004528 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80043d4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2bff      	cmp	r3, #255	@ 0xff
 80043de:	d906      	bls.n	80043ee <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	22ff      	movs	r2, #255	@ 0xff
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80043e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e007      	b.n	80043fe <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80043f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043fc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d070      	beq.n	80044e8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004412:	4a46      	ldr	r2, [pc, #280]	@ (800452c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004414:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441a:	4a45      	ldr	r2, [pc, #276]	@ (8004530 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800441c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442a:	2200      	movs	r2, #0
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3324      	adds	r3, #36	@ 0x24
 8004438:	4619      	mov	r1, r3
 800443a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004440:	f7ff fa4e 	bl	80038e0 <HAL_DMA_Start_IT>
 8004444:	4603      	mov	r3, r0
 8004446:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d138      	bne.n	80044c0 <HAL_I2C_Master_Receive_DMA+0x164>
 800444e:	e013      	b.n	8004478 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004464:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e050      	b.n	800451a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447c:	b2da      	uxtb	r2, r3
 800447e:	8979      	ldrh	r1, [r7, #10]
 8004480:	4b2c      	ldr	r3, [pc, #176]	@ (8004534 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f001 fb7a 	bl	8005b80 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80044a6:	2110      	movs	r1, #16
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f001 fb9b 	bl	8005be4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e029      	b.n	8004514 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d4:	f043 0210 	orr.w	r2, r3, #16
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e018      	b.n	800451a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a13      	ldr	r2, [pc, #76]	@ (8004538 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80044ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	8979      	ldrh	r1, [r7, #10]
 80044f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f001 fb3e 	bl	8005b80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800450c:	2102      	movs	r1, #2
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f001 fb68 	bl	8005be4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	ffff0000 	.word	0xffff0000
 8004528:	08004b0d 	.word	0x08004b0d
 800452c:	08005a81 	.word	0x08005a81
 8004530:	08005b17 	.word	0x08005b17
 8004534:	80002400 	.word	0x80002400
 8004538:	080046cf 	.word	0x080046cf

0800453c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
  }
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00f      	beq.n	80045b2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a0:	f043 0201 	orr.w	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00f      	beq.n	80045dc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f043 0208 	orr.w	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00f      	beq.n	8004606 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f4:	f043 0202 	orr.w	r2, r3, #2
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004604:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 030b 	and.w	r3, r3, #11
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 f8ab 	bl	8005774 <I2C_ITError>
  }
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	70fb      	strb	r3, [r7, #3]
 800465a:	4613      	mov	r3, r2
 800465c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b088      	sub	sp, #32
 80046d2:	af02      	add	r7, sp, #8
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <I2C_Master_ISR_IT+0x1e>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e113      	b.n	8004914 <I2C_Master_ISR_IT+0x246>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d012      	beq.n	8004724 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2210      	movs	r2, #16
 800470e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f001 f940 	bl	80059a2 <I2C_Flush_TXDR>
 8004722:	e0e4      	b.n	80048ee <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d022      	beq.n	8004774 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01d      	beq.n	8004774 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0304 	bic.w	r3, r3, #4
 800473e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004772:	e0bc      	b.n	80048ee <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d128      	bne.n	80047d0 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004784:	2b00      	cmp	r3, #0
 8004786:	d023      	beq.n	80047d0 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01e      	beq.n	80047d0 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a8 	beq.w	80048ee <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80047ce:	e08e      	b.n	80048ee <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d05c      	beq.n	8004894 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d057      	beq.n	8004894 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d040      	beq.n	8004870 <I2C_Master_ISR_IT+0x1a2>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d13c      	bne.n	8004870 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004802:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	2bff      	cmp	r3, #255	@ 0xff
 800480c:	d90e      	bls.n	800482c <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	22ff      	movs	r2, #255	@ 0xff
 8004812:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	b2da      	uxtb	r2, r3
 800481a:	8a79      	ldrh	r1, [r7, #18]
 800481c:	2300      	movs	r3, #0
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f001 f9ab 	bl	8005b80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800482a:	e032      	b.n	8004892 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800483e:	d00b      	beq.n	8004858 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004844:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800484a:	8a79      	ldrh	r1, [r7, #18]
 800484c:	2000      	movs	r0, #0
 800484e:	9000      	str	r0, [sp, #0]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f001 f995 	bl	8005b80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004856:	e01c      	b.n	8004892 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485c:	b2da      	uxtb	r2, r3
 800485e:	8a79      	ldrh	r1, [r7, #18]
 8004860:	2300      	movs	r3, #0
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f001 f989 	bl	8005b80 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800486e:	e010      	b.n	8004892 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800487e:	d003      	beq.n	8004888 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fcaf 	bl	80051e4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004886:	e032      	b.n	80048ee <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004888:	2140      	movs	r1, #64	@ 0x40
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 ff72 	bl	8005774 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004890:	e02d      	b.n	80048ee <I2C_Master_ISR_IT+0x220>
 8004892:	e02c      	b.n	80048ee <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d027      	beq.n	80048ee <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d022      	beq.n	80048ee <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d119      	bne.n	80048e6 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048c0:	d015      	beq.n	80048ee <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048ca:	d108      	bne.n	80048de <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	e007      	b.n	80048ee <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fc80 	bl	80051e4 <I2C_ITMasterSeqCplt>
 80048e4:	e003      	b.n	80048ee <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80048e6:	2140      	movs	r1, #64	@ 0x40
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 ff43 	bl	8005774 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004902:	6979      	ldr	r1, [r7, #20]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fd07 	bl	8005318 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <I2C_Slave_ISR_IT+0x24>
 800493c:	2302      	movs	r3, #2
 800493e:	e0e1      	b.n	8004b04 <I2C_Slave_ISR_IT+0x1e8>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800495c:	6939      	ldr	r1, [r7, #16]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fda2 	bl	80054a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04b      	beq.n	8004a06 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004974:	2b00      	cmp	r3, #0
 8004976:	d046      	beq.n	8004a06 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d128      	bne.n	80049d4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b28      	cmp	r3, #40	@ 0x28
 800498c:	d108      	bne.n	80049a0 <I2C_Slave_ISR_IT+0x84>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004994:	d104      	bne.n	80049a0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fe97 	bl	80056cc <I2C_ITListenCplt>
 800499e:	e031      	b.n	8004a04 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b29      	cmp	r3, #41	@ 0x29
 80049aa:	d10e      	bne.n	80049ca <I2C_Slave_ISR_IT+0xae>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049b2:	d00a      	beq.n	80049ca <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2210      	movs	r2, #16
 80049ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fff0 	bl	80059a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fc4b 	bl	800525e <I2C_ITSlaveSeqCplt>
 80049c8:	e01c      	b.n	8004a04 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2210      	movs	r2, #16
 80049d0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80049d2:	e08f      	b.n	8004af4 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2210      	movs	r2, #16
 80049da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e0:	f043 0204 	orr.w	r2, r3, #4
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <I2C_Slave_ISR_IT+0xda>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049f4:	d17e      	bne.n	8004af4 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	4619      	mov	r1, r3
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 feb9 	bl	8005774 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004a02:	e077      	b.n	8004af4 <I2C_Slave_ISR_IT+0x1d8>
 8004a04:	e076      	b.n	8004af4 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02f      	beq.n	8004a70 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02a      	beq.n	8004a70 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d018      	beq.n	8004a56 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d14b      	bne.n	8004af8 <I2C_Slave_ISR_IT+0x1dc>
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a66:	d047      	beq.n	8004af8 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fbf8 	bl	800525e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004a6e:	e043      	b.n	8004af8 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a84:	6939      	ldr	r1, [r7, #16]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fb28 	bl	80050dc <I2C_ITAddrCplt>
 8004a8c:	e035      	b.n	8004afa <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d030      	beq.n	8004afa <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02b      	beq.n	8004afa <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d018      	beq.n	8004ade <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004adc:	e00d      	b.n	8004afa <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ae4:	d002      	beq.n	8004aec <I2C_Slave_ISR_IT+0x1d0>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fbb6 	bl	800525e <I2C_ITSlaveSeqCplt>
 8004af2:	e002      	b.n	8004afa <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004af4:	bf00      	nop
 8004af6:	e000      	b.n	8004afa <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004af8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <I2C_Master_ISR_DMA+0x1a>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e0d9      	b.n	8004cda <I2C_Master_ISR_DMA+0x1ce>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d016      	beq.n	8004b66 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2210      	movs	r2, #16
 8004b48:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004b56:	2120      	movs	r1, #32
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f001 f843 	bl	8005be4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 ff1f 	bl	80059a2 <I2C_Flush_TXDR>
 8004b64:	e0b4      	b.n	8004cd0 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d071      	beq.n	8004c54 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d06c      	beq.n	8004c54 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b88:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d04e      	beq.n	8004c32 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2bff      	cmp	r3, #255	@ 0xff
 8004baa:	d906      	bls.n	8004bba <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	22ff      	movs	r2, #255	@ 0xff
 8004bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004bb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e010      	b.n	8004bdc <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bcc:	d003      	beq.n	8004bd6 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	e002      	b.n	8004bdc <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004bd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bda:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	8a79      	ldrh	r1, [r7, #18]
 8004be4:	2300      	movs	r3, #0
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 ffc8 	bl	8005b80 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b22      	cmp	r3, #34	@ 0x22
 8004c0c:	d108      	bne.n	8004c20 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c1c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004c1e:	e057      	b.n	8004cd0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c2e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004c30:	e04e      	b.n	8004cd0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c40:	d003      	beq.n	8004c4a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 face 	bl	80051e4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004c48:	e042      	b.n	8004cd0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c4a:	2140      	movs	r1, #64	@ 0x40
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fd91 	bl	8005774 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004c52:	e03d      	b.n	8004cd0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d028      	beq.n	8004cb0 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d023      	beq.n	8004cb0 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d119      	bne.n	8004ca6 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c80:	d025      	beq.n	8004cce <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c8a:	d108      	bne.n	8004c9e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c9a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004c9c:	e017      	b.n	8004cce <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 faa0 	bl	80051e4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004ca4:	e013      	b.n	8004cce <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004ca6:	2140      	movs	r1, #64	@ 0x40
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fd63 	bl	8005774 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004cae:	e00e      	b.n	8004cce <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fb26 	bl	8005318 <I2C_ITMasterCplt>
 8004ccc:	e000      	b.n	8004cd0 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004cce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8004f28 <I2C_Mem_ISR_DMA+0x244>)
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <I2C_Mem_ISR_DMA+0x1e>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e10e      	b.n	8004f20 <I2C_Mem_ISR_DMA+0x23c>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d016      	beq.n	8004d42 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2210      	movs	r2, #16
 8004d24:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	f043 0204 	orr.w	r2, r3, #4
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004d32:	2120      	movs	r1, #32
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 ff55 	bl	8005be4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fe31 	bl	80059a2 <I2C_Flush_TXDR>
 8004d40:	e0e9      	b.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00e      	beq.n	8004d6a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f04f 32ff 	mov.w	r2, #4294967295
 8004d66:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d68:	e0d5      	b.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05f      	beq.n	8004e34 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d05a      	beq.n	8004e34 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d7e:	2101      	movs	r1, #1
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 ffb3 	bl	8005cec <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004d86:	2110      	movs	r1, #16
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 ff2b 	bl	8005be4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d048      	beq.n	8004e2a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2bff      	cmp	r3, #255	@ 0xff
 8004da0:	d910      	bls.n	8004dc4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	22ff      	movs	r2, #255	@ 0xff
 8004da6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dac:	b299      	uxth	r1, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	2300      	movs	r3, #0
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fedf 	bl	8005b80 <I2C_TransferConfig>
 8004dc2:	e011      	b.n	8004de8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd2:	b299      	uxth	r1, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	2300      	movs	r3, #0
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fecc 	bl	8005b80 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b22      	cmp	r3, #34	@ 0x22
 8004e04:	d108      	bne.n	8004e18 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e14:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e16:	e07e      	b.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e26:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e28:	e075      	b.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e2a:	2140      	movs	r1, #64	@ 0x40
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fca1 	bl	8005774 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004e32:	e070      	b.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d05d      	beq.n	8004efa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d058      	beq.n	8004efa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 ff4e 	bl	8005cec <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004e50:	2110      	movs	r1, #16
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fec6 	bl	8005be4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b22      	cmp	r3, #34	@ 0x22
 8004e62:	d101      	bne.n	8004e68 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004e64:	4b31      	ldr	r3, [pc, #196]	@ (8004f2c <I2C_Mem_ISR_DMA+0x248>)
 8004e66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2bff      	cmp	r3, #255	@ 0xff
 8004e70:	d910      	bls.n	8004e94 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	22ff      	movs	r2, #255	@ 0xff
 8004e76:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7c:	b299      	uxth	r1, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fe77 	bl	8005b80 <I2C_TransferConfig>
 8004e92:	e011      	b.n	8004eb8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea2:	b299      	uxth	r1, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fe64 	bl	8005b80 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b22      	cmp	r3, #34	@ 0x22
 8004ed4:	d108      	bne.n	8004ee8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ee4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ee6:	e016      	b.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ef6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ef8:	e00d      	b.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fa01 	bl	8005318 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	80002000 	.word	0x80002000
 8004f2c:	80002400 	.word	0x80002400

08004f30 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <I2C_Slave_ISR_DMA+0x24>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0bf      	b.n	80050d4 <I2C_Slave_ISR_DMA+0x1a4>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fa98 	bl	80054a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8095 	beq.w	80050ae <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 808f 	beq.w	80050ae <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d07d      	beq.n	80050a0 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00c      	beq.n	8004fc6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d128      	bne.n	8005040 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b28      	cmp	r3, #40	@ 0x28
 8004ff8:	d108      	bne.n	800500c <I2C_Slave_ISR_DMA+0xdc>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005000:	d104      	bne.n	800500c <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fb61 	bl	80056cc <I2C_ITListenCplt>
 800500a:	e048      	b.n	800509e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b29      	cmp	r3, #41	@ 0x29
 8005016:	d10e      	bne.n	8005036 <I2C_Slave_ISR_DMA+0x106>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800501e:	d00a      	beq.n	8005036 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2210      	movs	r2, #16
 8005026:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fcba 	bl	80059a2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f915 	bl	800525e <I2C_ITSlaveSeqCplt>
 8005034:	e033      	b.n	800509e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2210      	movs	r2, #16
 800503c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800503e:	e034      	b.n	80050aa <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2210      	movs	r2, #16
 8005046:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504c:	f043 0204 	orr.w	r2, r3, #4
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <I2C_Slave_ISR_DMA+0x13a>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005068:	d11f      	bne.n	80050aa <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	2b21      	cmp	r3, #33	@ 0x21
 800506e:	d002      	beq.n	8005076 <I2C_Slave_ISR_DMA+0x146>
 8005070:	7dfb      	ldrb	r3, [r7, #23]
 8005072:	2b29      	cmp	r3, #41	@ 0x29
 8005074:	d103      	bne.n	800507e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2221      	movs	r2, #33	@ 0x21
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
 800507c:	e008      	b.n	8005090 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	2b22      	cmp	r3, #34	@ 0x22
 8005082:	d002      	beq.n	800508a <I2C_Slave_ISR_DMA+0x15a>
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b2a      	cmp	r3, #42	@ 0x2a
 8005088:	d102      	bne.n	8005090 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2222      	movs	r2, #34	@ 0x22
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005094:	4619      	mov	r1, r3
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fb6c 	bl	8005774 <I2C_ITError>
      if (treatdmanack == 1U)
 800509c:	e005      	b.n	80050aa <I2C_Slave_ISR_DMA+0x17a>
 800509e:	e004      	b.n	80050aa <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2210      	movs	r2, #16
 80050a6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80050a8:	e00f      	b.n	80050ca <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80050aa:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80050ac:	e00d      	b.n	80050ca <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f809 	bl	80050dc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050f2:	2b28      	cmp	r3, #40	@ 0x28
 80050f4:	d16a      	bne.n	80051cc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	b29b      	uxth	r3, r3
 8005110:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005114:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005122:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005130:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d138      	bne.n	80051ac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	09db      	lsrs	r3, r3, #7
 800513e:	b29a      	uxth	r2, r3
 8005140:	89bb      	ldrh	r3, [r7, #12]
 8005142:	4053      	eors	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	f003 0306 	and.w	r3, r3, #6
 800514a:	2b00      	cmp	r3, #0
 800514c:	d11c      	bne.n	8005188 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800514e:	897b      	ldrh	r3, [r7, #10]
 8005150:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005160:	2b02      	cmp	r3, #2
 8005162:	d13b      	bne.n	80051dc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2208      	movs	r2, #8
 8005170:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800517a:	89ba      	ldrh	r2, [r7, #12]
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fa64 	bl	800464e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005186:	e029      	b.n	80051dc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005188:	893b      	ldrh	r3, [r7, #8]
 800518a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800518c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fdab 	bl	8005cec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800519e:	89ba      	ldrh	r2, [r7, #12]
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	4619      	mov	r1, r3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fa52 	bl	800464e <HAL_I2C_AddrCallback>
}
 80051aa:	e017      	b.n	80051dc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80051ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fd9b 	bl	8005cec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051be:	89ba      	ldrh	r2, [r7, #12]
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fa42 	bl	800464e <HAL_I2C_AddrCallback>
}
 80051ca:	e007      	b.n	80051dc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2208      	movs	r2, #8
 80051d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b21      	cmp	r3, #33	@ 0x21
 80051fe:	d115      	bne.n	800522c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2211      	movs	r2, #17
 800520c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005214:	2101      	movs	r1, #1
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fd68 	bl	8005cec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fc f84f 	bl	80012c8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800522a:	e014      	b.n	8005256 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2212      	movs	r2, #18
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005240:	2102      	movs	r1, #2
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fd52 	bl	8005cec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fc f849 	bl	80012e8 <HAL_I2C_MasterRxCpltCallback>
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e00c      	b.n	80052ac <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052aa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b29      	cmp	r3, #41	@ 0x29
 80052b6:	d112      	bne.n	80052de <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2228      	movs	r2, #40	@ 0x28
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2221      	movs	r2, #33	@ 0x21
 80052c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052c6:	2101      	movs	r1, #1
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fd0f 	bl	8005cec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff f9a5 	bl	8004626 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052dc:	e017      	b.n	800530e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80052e8:	d111      	bne.n	800530e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2228      	movs	r2, #40	@ 0x28
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2222      	movs	r2, #34	@ 0x22
 80052f6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052f8:	2102      	movs	r1, #2
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fcf6 	bl	8005cec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff f996 	bl	800463a <HAL_I2C_SlaveRxCpltCallback>
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2220      	movs	r2, #32
 800532c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b21      	cmp	r3, #33	@ 0x21
 8005338:	d107      	bne.n	800534a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800533a:	2101      	movs	r1, #1
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fcd5 	bl	8005cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2211      	movs	r2, #17
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30
 8005348:	e00c      	b.n	8005364 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b22      	cmp	r3, #34	@ 0x22
 8005354:	d106      	bne.n	8005364 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005356:	2102      	movs	r1, #2
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fcc7 	bl	8005cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2212      	movs	r2, #18
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b4c      	ldr	r3, [pc, #304]	@ (80054a0 <I2C_ITMasterCplt+0x188>)
 8005370:	400b      	ands	r3, r1
 8005372:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a49      	ldr	r2, [pc, #292]	@ (80054a4 <I2C_ITMasterCplt+0x18c>)
 800537e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2210      	movs	r2, #16
 8005390:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	f043 0204 	orr.w	r2, r3, #4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b60      	cmp	r3, #96	@ 0x60
 80053a8:	d10a      	bne.n	80053c0 <I2C_ITMasterCplt+0xa8>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80053be:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 faee 	bl	80059a2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ca:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b60      	cmp	r3, #96	@ 0x60
 80053d6:	d002      	beq.n	80053de <I2C_ITMasterCplt+0xc6>
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f9c5 	bl	8005774 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80053ea:	e054      	b.n	8005496 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b21      	cmp	r3, #33	@ 0x21
 80053f6:	d124      	bne.n	8005442 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b40      	cmp	r3, #64	@ 0x40
 8005410:	d10b      	bne.n	800542a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff f92b 	bl	800467e <HAL_I2C_MemTxCpltCallback>
}
 8005428:	e035      	b.n	8005496 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb ff44 	bl	80012c8 <HAL_I2C_MasterTxCpltCallback>
}
 8005440:	e029      	b.n	8005496 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b22      	cmp	r3, #34	@ 0x22
 800544c:	d123      	bne.n	8005496 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b40      	cmp	r3, #64	@ 0x40
 8005466:	d10b      	bne.n	8005480 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff f90a 	bl	8004692 <HAL_I2C_MemRxCpltCallback>
}
 800547e:	e00a      	b.n	8005496 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fb ff29 	bl	80012e8 <HAL_I2C_MasterRxCpltCallback>
}
 8005496:	bf00      	nop
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	fe00e800 	.word	0xfe00e800
 80054a4:	ffff0000 	.word	0xffff0000

080054a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2220      	movs	r2, #32
 80054cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	2b21      	cmp	r3, #33	@ 0x21
 80054d2:	d002      	beq.n	80054da <I2C_ITSlaveCplt+0x32>
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b29      	cmp	r3, #41	@ 0x29
 80054d8:	d108      	bne.n	80054ec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80054da:	f248 0101 	movw	r1, #32769	@ 0x8001
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fc04 	bl	8005cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2221      	movs	r2, #33	@ 0x21
 80054e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80054ea:	e019      	b.n	8005520 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b22      	cmp	r3, #34	@ 0x22
 80054f0:	d002      	beq.n	80054f8 <I2C_ITSlaveCplt+0x50>
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f6:	d108      	bne.n	800550a <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80054f8:	f248 0102 	movw	r1, #32770	@ 0x8002
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fbf5 	bl	8005cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2222      	movs	r2, #34	@ 0x22
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
 8005508:	e00a      	b.n	8005520 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b28      	cmp	r3, #40	@ 0x28
 800550e:	d107      	bne.n	8005520 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005510:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fbe9 	bl	8005cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800552e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b62      	ldr	r3, [pc, #392]	@ (80056c4 <I2C_ITSlaveCplt+0x21c>)
 800553c:	400b      	ands	r3, r1
 800553e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fa2e 	bl	80059a2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d013      	beq.n	8005578 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800555e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01f      	beq.n	80055a8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	b29a      	uxth	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005576:	e017      	b.n	80055a8 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d012      	beq.n	80055a8 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005590:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d020      	beq.n	80055f4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f023 0304 	bic.w	r3, r3, #4
 80055b8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00c      	beq.n	80055f4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	f043 0204 	orr.w	r2, r3, #4
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561c:	2b00      	cmp	r3, #0
 800561e:	d010      	beq.n	8005642 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8a4 	bl	8005774 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b28      	cmp	r3, #40	@ 0x28
 8005636:	d141      	bne.n	80056bc <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005638:	6979      	ldr	r1, [r7, #20]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f846 	bl	80056cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005640:	e03c      	b.n	80056bc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800564a:	d014      	beq.n	8005676 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fe06 	bl	800525e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1c      	ldr	r2, [pc, #112]	@ (80056c8 <I2C_ITSlaveCplt+0x220>)
 8005656:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fe fffb 	bl	800466a <HAL_I2C_ListenCpltCallback>
}
 8005674:	e022      	b.n	80056bc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b22      	cmp	r3, #34	@ 0x22
 8005680:	d10e      	bne.n	80056a0 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fe ffce 	bl	800463a <HAL_I2C_SlaveRxCpltCallback>
}
 800569e:	e00d      	b.n	80056bc <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fe ffb5 	bl	8004626 <HAL_I2C_SlaveTxCpltCallback>
}
 80056bc:	bf00      	nop
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	fe00e800 	.word	0xfe00e800
 80056c8:	ffff0000 	.word	0xffff0000

080056cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a25      	ldr	r2, [pc, #148]	@ (8005770 <I2C_ITListenCplt+0xa4>)
 80056da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d022      	beq.n	8005748 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005740:	f043 0204 	orr.w	r2, r3, #4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005748:	f248 0103 	movw	r1, #32771	@ 0x8003
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 facd 	bl	8005cec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2210      	movs	r2, #16
 8005758:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fe ff81 	bl	800466a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	ffff0000 	.word	0xffff0000

08005774 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005784:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a6d      	ldr	r2, [pc, #436]	@ (8005948 <I2C_ITError+0x1d4>)
 8005792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2b28      	cmp	r3, #40	@ 0x28
 80057aa:	d005      	beq.n	80057b8 <I2C_ITError+0x44>
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b29      	cmp	r3, #41	@ 0x29
 80057b0:	d002      	beq.n	80057b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80057b6:	d10b      	bne.n	80057d0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057b8:	2103      	movs	r1, #3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa96 	bl	8005cec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2228      	movs	r2, #40	@ 0x28
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a60      	ldr	r2, [pc, #384]	@ (800594c <I2C_ITError+0x1d8>)
 80057cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80057ce:	e030      	b.n	8005832 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057d0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fa89 	bl	8005cec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8e1 	bl	80059a2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b60      	cmp	r3, #96	@ 0x60
 80057ea:	d01f      	beq.n	800582c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d114      	bne.n	800582c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b10      	cmp	r3, #16
 800580e:	d109      	bne.n	8005824 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2210      	movs	r2, #16
 8005816:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581c:	f043 0204 	orr.w	r2, r3, #4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2220      	movs	r2, #32
 800582a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	2b00      	cmp	r3, #0
 800583e:	d039      	beq.n	80058b4 <I2C_ITError+0x140>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b11      	cmp	r3, #17
 8005844:	d002      	beq.n	800584c <I2C_ITError+0xd8>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b21      	cmp	r3, #33	@ 0x21
 800584a:	d133      	bne.n	80058b4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800585a:	d107      	bne.n	800586c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800586a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	4618      	mov	r0, r3
 8005872:	f7fe f9c3 	bl	8003bfc <HAL_DMA_GetState>
 8005876:	4603      	mov	r3, r0
 8005878:	2b01      	cmp	r3, #1
 800587a:	d017      	beq.n	80058ac <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	4a33      	ldr	r2, [pc, #204]	@ (8005950 <I2C_ITError+0x1dc>)
 8005882:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe f8c3 	bl	8003a1c <HAL_DMA_Abort_IT>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d04d      	beq.n	8005938 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058a6:	4610      	mov	r0, r2
 80058a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058aa:	e045      	b.n	8005938 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f851 	bl	8005954 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058b2:	e041      	b.n	8005938 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d039      	beq.n	8005930 <I2C_ITError+0x1bc>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b12      	cmp	r3, #18
 80058c0:	d002      	beq.n	80058c8 <I2C_ITError+0x154>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b22      	cmp	r3, #34	@ 0x22
 80058c6:	d133      	bne.n	8005930 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d6:	d107      	bne.n	80058e8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe f985 	bl	8003bfc <HAL_DMA_GetState>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d017      	beq.n	8005928 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	4a14      	ldr	r2, [pc, #80]	@ (8005950 <I2C_ITError+0x1dc>)
 80058fe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe f885 	bl	8003a1c <HAL_DMA_Abort_IT>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d011      	beq.n	800593c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005922:	4610      	mov	r0, r2
 8005924:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005926:	e009      	b.n	800593c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f813 	bl	8005954 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800592e:	e005      	b.n	800593c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f80f 	bl	8005954 <I2C_TreatErrorCallback>
  }
}
 8005936:	e002      	b.n	800593e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800593c:	bf00      	nop
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	ffff0000 	.word	0xffff0000
 800594c:	0800491d 	.word	0x0800491d
 8005950:	08005b45 	.word	0x08005b45

08005954 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b60      	cmp	r3, #96	@ 0x60
 8005966:	d10e      	bne.n	8005986 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fe fe9b 	bl	80046ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005984:	e009      	b.n	800599a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fe fe86 	bl	80046a6 <HAL_I2C_ErrorCallback>
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d103      	bne.n	80059c0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2200      	movs	r2, #0
 80059be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d007      	beq.n	80059de <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0201 	orr.w	r2, r2, #1
 80059dc:	619a      	str	r2, [r3, #24]
  }
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a06:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005a12:	2120      	movs	r1, #32
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f8e5 	bl	8005be4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005a1a:	e02d      	b.n	8005a78 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005a24:	441a      	add	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2bff      	cmp	r3, #255	@ 0xff
 8005a32:	d903      	bls.n	8005a3c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	22ff      	movs	r2, #255	@ 0xff
 8005a38:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005a3a:	e004      	b.n	8005a46 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	4619      	mov	r1, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3328      	adds	r3, #40	@ 0x28
 8005a56:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a5c:	f7fd ff40 	bl	80038e0 <HAL_DMA_Start_IT>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005a66:	2110      	movs	r1, #16
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff fe83 	bl	8005774 <I2C_ITError>
}
 8005a6e:	e003      	b.n	8005a78 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005a70:	2140      	movs	r1, #64	@ 0x40
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f8b6 	bl	8005be4 <I2C_Enable_IRQ>
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a9c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005aa8:	2120      	movs	r1, #32
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f89a 	bl	8005be4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005ab0:	e02d      	b.n	8005b0e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005aba:	441a      	add	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2bff      	cmp	r3, #255	@ 0xff
 8005ac8:	d903      	bls.n	8005ad2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	22ff      	movs	r2, #255	@ 0xff
 8005ace:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005ad0:	e004      	b.n	8005adc <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3324      	adds	r3, #36	@ 0x24
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005af2:	f7fd fef5 	bl	80038e0 <HAL_DMA_Start_IT>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005afc:	2110      	movs	r1, #16
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fe38 	bl	8005774 <I2C_ITError>
}
 8005b04:	e003      	b.n	8005b0e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005b06:	2140      	movs	r1, #64	@ 0x40
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f86b 	bl	8005be4 <I2C_Enable_IRQ>
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b32:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005b34:	2110      	movs	r1, #16
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7ff fe1c 	bl	8005774 <I2C_ITError>
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	2200      	movs	r2, #0
 8005b60:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6e:	2200      	movs	r2, #0
 8005b70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff feee 	bl	8005954 <I2C_TreatErrorCallback>
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	607b      	str	r3, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	817b      	strh	r3, [r7, #10]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b92:	897b      	ldrh	r3, [r7, #10]
 8005b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b98:	7a7b      	ldrb	r3, [r7, #9]
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ba0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	0d5b      	lsrs	r3, r3, #21
 8005bba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005bbe:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <I2C_TransferConfig+0x60>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	ea02 0103 	and.w	r1, r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	03ff63ff 	.word	0x03ff63ff

08005be4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf8:	4a39      	ldr	r2, [pc, #228]	@ (8005ce0 <I2C_Enable_IRQ+0xfc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d032      	beq.n	8005c64 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005c02:	4a38      	ldr	r2, [pc, #224]	@ (8005ce4 <I2C_Enable_IRQ+0x100>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d02d      	beq.n	8005c64 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005c0c:	4a36      	ldr	r2, [pc, #216]	@ (8005ce8 <I2C_Enable_IRQ+0x104>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d028      	beq.n	8005c64 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005c12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da03      	bge.n	8005c22 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005c20:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005c22:	887b      	ldrh	r3, [r7, #2]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005c32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005c34:	887b      	ldrh	r3, [r7, #2]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005c44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c46:	887b      	ldrh	r3, [r7, #2]
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d103      	bne.n	8005c54 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005c52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c54:	887b      	ldrh	r3, [r7, #2]
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d133      	bne.n	8005cc2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f043 0320 	orr.w	r3, r3, #32
 8005c60:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c62:	e02e      	b.n	8005cc2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005c64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da03      	bge.n	8005c74 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005c72:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005c74:	887b      	ldrh	r3, [r7, #2]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005c84:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005c86:	887b      	ldrh	r3, [r7, #2]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005c96:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c98:	887b      	ldrh	r3, [r7, #2]
 8005c9a:	2b10      	cmp	r3, #16
 8005c9c:	d103      	bne.n	8005ca6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005ca4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ca6:	887b      	ldrh	r3, [r7, #2]
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d103      	bne.n	8005cb4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005cb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	2b40      	cmp	r3, #64	@ 0x40
 8005cb8:	d103      	bne.n	8005cc2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	601a      	str	r2, [r3, #0]
}
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	08004b0d 	.word	0x08004b0d
 8005ce4:	08004f31 	.word	0x08004f31
 8005ce8:	08004ce5 	.word	0x08004ce5

08005cec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005cfc:	887b      	ldrh	r3, [r7, #2]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005d0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d1a:	2b28      	cmp	r3, #40	@ 0x28
 8005d1c:	d003      	beq.n	8005d26 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005d24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005d26:	887b      	ldrh	r3, [r7, #2]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00f      	beq.n	8005d50 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005d36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d44:	2b28      	cmp	r3, #40	@ 0x28
 8005d46:	d003      	beq.n	8005d50 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005d4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da03      	bge.n	8005d60 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005d5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d103      	bne.n	8005d6e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005d6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d6e:	887b      	ldrh	r3, [r7, #2]
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d103      	bne.n	8005d7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f043 0320 	orr.w	r3, r3, #32
 8005d7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005d7c:	887b      	ldrh	r3, [r7, #2]
 8005d7e:	2b40      	cmp	r3, #64	@ 0x40
 8005d80:	d103      	bne.n	8005d8a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	43da      	mvns	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	400a      	ands	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d138      	bne.n	8005e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e032      	b.n	8005e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	@ 0x24
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d139      	bne.n	8005ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e033      	b.n	8005eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2224      	movs	r2, #36	@ 0x24
 8005e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e000      	b.n	8005eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
  }
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e038      	b.n	8005f5a <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f245 5255 	movw	r2, #21845	@ 0x5555
 8005efa:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6852      	ldr	r2, [r2, #4]
 8005f04:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6892      	ldr	r2, [r2, #8]
 8005f0e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005f10:	f7fb fe90 	bl	8001c34 <HAL_GetTick>
 8005f14:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005f18:	f7fb fe8c 	bl	8001c34 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b30      	cmp	r3, #48	@ 0x30
 8005f24:	d901      	bls.n	8005f2a <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e017      	b.n	8005f5a <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f1      	bne.n	8005f18 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d005      	beq.n	8005f4e <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68d2      	ldr	r2, [r2, #12]
 8005f4a:	611a      	str	r2, [r3, #16]
 8005f4c:	e004      	b.n	8005f58 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f68:	4b04      	ldr	r3, [pc, #16]	@ (8005f7c <HAL_PWREx_GetVoltageRange+0x18>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40007000 	.word	0x40007000

08005f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f8e:	d130      	bne.n	8005ff2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f90:	4b23      	ldr	r3, [pc, #140]	@ (8006020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f9c:	d038      	beq.n	8006010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f9e:	4b20      	ldr	r3, [pc, #128]	@ (8006020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8006020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fae:	4b1d      	ldr	r3, [pc, #116]	@ (8006024 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2232      	movs	r2, #50	@ 0x32
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006028 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0c9b      	lsrs	r3, r3, #18
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fc4:	e002      	b.n	8005fcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fcc:	4b14      	ldr	r3, [pc, #80]	@ (8006020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd8:	d102      	bne.n	8005fe0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f2      	bne.n	8005fc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fec:	d110      	bne.n	8006010 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e00f      	b.n	8006012 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffe:	d007      	beq.n	8006010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006000:	4b07      	ldr	r3, [pc, #28]	@ (8006020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006008:	4a05      	ldr	r2, [pc, #20]	@ (8006020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800600a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800600e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40007000 	.word	0x40007000
 8006024:	20000010 	.word	0x20000010
 8006028:	431bde83 	.word	0x431bde83

0800602c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f000 bc08 	b.w	8006850 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006040:	4b96      	ldr	r3, [pc, #600]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 030c 	and.w	r3, r3, #12
 8006048:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800604a:	4b94      	ldr	r3, [pc, #592]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80e4 	beq.w	800622a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <HAL_RCC_OscConfig+0x4c>
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b0c      	cmp	r3, #12
 800606c:	f040 808b 	bne.w	8006186 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b01      	cmp	r3, #1
 8006074:	f040 8087 	bne.w	8006186 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006078:	4b88      	ldr	r3, [pc, #544]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_RCC_OscConfig+0x64>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e3df      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	4b81      	ldr	r3, [pc, #516]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <HAL_RCC_OscConfig+0x7e>
 80060a0:	4b7e      	ldr	r3, [pc, #504]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060a8:	e005      	b.n	80060b6 <HAL_RCC_OscConfig+0x8a>
 80060aa:	4b7c      	ldr	r3, [pc, #496]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80060ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060b0:	091b      	lsrs	r3, r3, #4
 80060b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d223      	bcs.n	8006102 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fd92 	bl	8006be8 <RCC_SetFlashLatencyFromMSIRange>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e3c0      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060ce:	4b73      	ldr	r3, [pc, #460]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a72      	ldr	r2, [pc, #456]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80060d4:	f043 0308 	orr.w	r3, r3, #8
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	4b70      	ldr	r3, [pc, #448]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	496d      	ldr	r1, [pc, #436]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060ec:	4b6b      	ldr	r3, [pc, #428]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	4968      	ldr	r1, [pc, #416]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	604b      	str	r3, [r1, #4]
 8006100:	e025      	b.n	800614e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006102:	4b66      	ldr	r3, [pc, #408]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a65      	ldr	r2, [pc, #404]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006108:	f043 0308 	orr.w	r3, r3, #8
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	4b63      	ldr	r3, [pc, #396]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	4960      	ldr	r1, [pc, #384]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006120:	4b5e      	ldr	r3, [pc, #376]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	495b      	ldr	r1, [pc, #364]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006130:	4313      	orrs	r3, r2
 8006132:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fd52 	bl	8006be8 <RCC_SetFlashLatencyFromMSIRange>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e380      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800614e:	f000 fc87 	bl	8006a60 <HAL_RCC_GetSysClockFreq>
 8006152:	4602      	mov	r2, r0
 8006154:	4b51      	ldr	r3, [pc, #324]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	4950      	ldr	r1, [pc, #320]	@ (80062a0 <HAL_RCC_OscConfig+0x274>)
 8006160:	5ccb      	ldrb	r3, [r1, r3]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	fa22 f303 	lsr.w	r3, r2, r3
 800616a:	4a4e      	ldr	r2, [pc, #312]	@ (80062a4 <HAL_RCC_OscConfig+0x278>)
 800616c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800616e:	4b4e      	ldr	r3, [pc, #312]	@ (80062a8 <HAL_RCC_OscConfig+0x27c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4618      	mov	r0, r3
 8006174:	f7fb fd0e 	bl	8001b94 <HAL_InitTick>
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d052      	beq.n	8006228 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	e364      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d032      	beq.n	80061f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800618e:	4b43      	ldr	r3, [pc, #268]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a42      	ldr	r2, [pc, #264]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800619a:	f7fb fd4b 	bl	8001c34 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061a0:	e008      	b.n	80061b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061a2:	f7fb fd47 	bl	8001c34 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e34d      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061b4:	4b39      	ldr	r3, [pc, #228]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061c0:	4b36      	ldr	r3, [pc, #216]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a35      	ldr	r2, [pc, #212]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061c6:	f043 0308 	orr.w	r3, r3, #8
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	4b33      	ldr	r3, [pc, #204]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	4930      	ldr	r1, [pc, #192]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061de:	4b2f      	ldr	r3, [pc, #188]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	492b      	ldr	r1, [pc, #172]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
 80061f2:	e01a      	b.n	800622a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061f4:	4b29      	ldr	r3, [pc, #164]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a28      	ldr	r2, [pc, #160]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006200:	f7fb fd18 	bl	8001c34 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006208:	f7fb fd14 	bl	8001c34 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e31a      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800621a:	4b20      	ldr	r3, [pc, #128]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x1dc>
 8006226:	e000      	b.n	800622a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006228:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d073      	beq.n	800631e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b08      	cmp	r3, #8
 800623a:	d005      	beq.n	8006248 <HAL_RCC_OscConfig+0x21c>
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d10e      	bne.n	8006260 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d10b      	bne.n	8006260 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006248:	4b14      	ldr	r3, [pc, #80]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d063      	beq.n	800631c <HAL_RCC_OscConfig+0x2f0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d15f      	bne.n	800631c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e2f7      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006268:	d106      	bne.n	8006278 <HAL_RCC_OscConfig+0x24c>
 800626a:	4b0c      	ldr	r3, [pc, #48]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a0b      	ldr	r2, [pc, #44]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e025      	b.n	80062c4 <HAL_RCC_OscConfig+0x298>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006280:	d114      	bne.n	80062ac <HAL_RCC_OscConfig+0x280>
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a05      	ldr	r2, [pc, #20]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	4b03      	ldr	r3, [pc, #12]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a02      	ldr	r2, [pc, #8]	@ (800629c <HAL_RCC_OscConfig+0x270>)
 8006294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e013      	b.n	80062c4 <HAL_RCC_OscConfig+0x298>
 800629c:	40021000 	.word	0x40021000
 80062a0:	08008df0 	.word	0x08008df0
 80062a4:	20000010 	.word	0x20000010
 80062a8:	20000014 	.word	0x20000014
 80062ac:	4ba0      	ldr	r3, [pc, #640]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a9f      	ldr	r2, [pc, #636]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80062b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	4b9d      	ldr	r3, [pc, #628]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a9c      	ldr	r2, [pc, #624]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80062be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d013      	beq.n	80062f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fb fcb2 	bl	8001c34 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d4:	f7fb fcae 	bl	8001c34 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	@ 0x64
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e2b4      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062e6:	4b92      	ldr	r3, [pc, #584]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCC_OscConfig+0x2a8>
 80062f2:	e014      	b.n	800631e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fb fc9e 	bl	8001c34 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062fc:	f7fb fc9a 	bl	8001c34 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	@ 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e2a0      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800630e:	4b88      	ldr	r3, [pc, #544]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f0      	bne.n	80062fc <HAL_RCC_OscConfig+0x2d0>
 800631a:	e000      	b.n	800631e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800631c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d060      	beq.n	80063ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b04      	cmp	r3, #4
 800632e:	d005      	beq.n	800633c <HAL_RCC_OscConfig+0x310>
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b0c      	cmp	r3, #12
 8006334:	d119      	bne.n	800636a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d116      	bne.n	800636a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800633c:	4b7c      	ldr	r3, [pc, #496]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_RCC_OscConfig+0x328>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e27d      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006354:	4b76      	ldr	r3, [pc, #472]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	061b      	lsls	r3, r3, #24
 8006362:	4973      	ldr	r1, [pc, #460]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006364:	4313      	orrs	r3, r2
 8006366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006368:	e040      	b.n	80063ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d023      	beq.n	80063ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006372:	4b6f      	ldr	r3, [pc, #444]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a6e      	ldr	r2, [pc, #440]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800637c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fb fc59 	bl	8001c34 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006386:	f7fb fc55 	bl	8001c34 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e25b      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006398:	4b65      	ldr	r3, [pc, #404]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a4:	4b62      	ldr	r3, [pc, #392]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	061b      	lsls	r3, r3, #24
 80063b2:	495f      	ldr	r1, [pc, #380]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	e018      	b.n	80063ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a5c      	ldr	r2, [pc, #368]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80063c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c6:	f7fb fc35 	bl	8001c34 <HAL_GetTick>
 80063ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ce:	f7fb fc31 	bl	8001c34 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e237      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063e0:	4b53      	ldr	r3, [pc, #332]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f0      	bne.n	80063ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d03c      	beq.n	8006472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01c      	beq.n	800643a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006400:	4b4b      	ldr	r3, [pc, #300]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006406:	4a4a      	ldr	r2, [pc, #296]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006410:	f7fb fc10 	bl	8001c34 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006418:	f7fb fc0c 	bl	8001c34 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e212      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800642a:	4b41      	ldr	r3, [pc, #260]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 800642c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0ef      	beq.n	8006418 <HAL_RCC_OscConfig+0x3ec>
 8006438:	e01b      	b.n	8006472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800643a:	4b3d      	ldr	r3, [pc, #244]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 800643c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006440:	4a3b      	ldr	r2, [pc, #236]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644a:	f7fb fbf3 	bl	8001c34 <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006452:	f7fb fbef 	bl	8001c34 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e1f5      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006464:	4b32      	ldr	r3, [pc, #200]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1ef      	bne.n	8006452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80a6 	beq.w	80065cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006480:	2300      	movs	r3, #0
 8006482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006484:	4b2a      	ldr	r3, [pc, #168]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10d      	bne.n	80064ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006490:	4b27      	ldr	r3, [pc, #156]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006494:	4a26      	ldr	r2, [pc, #152]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800649a:	6593      	str	r3, [r2, #88]	@ 0x58
 800649c:	4b24      	ldr	r3, [pc, #144]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 800649e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064a8:	2301      	movs	r3, #1
 80064aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064ac:	4b21      	ldr	r3, [pc, #132]	@ (8006534 <HAL_RCC_OscConfig+0x508>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d118      	bne.n	80064ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006534 <HAL_RCC_OscConfig+0x508>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006534 <HAL_RCC_OscConfig+0x508>)
 80064be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064c4:	f7fb fbb6 	bl	8001c34 <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064cc:	f7fb fbb2 	bl	8001c34 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e1b8      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064de:	4b15      	ldr	r3, [pc, #84]	@ (8006534 <HAL_RCC_OscConfig+0x508>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d108      	bne.n	8006504 <HAL_RCC_OscConfig+0x4d8>
 80064f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006502:	e029      	b.n	8006558 <HAL_RCC_OscConfig+0x52c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b05      	cmp	r3, #5
 800650a:	d115      	bne.n	8006538 <HAL_RCC_OscConfig+0x50c>
 800650c:	4b08      	ldr	r3, [pc, #32]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006512:	4a07      	ldr	r2, [pc, #28]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006514:	f043 0304 	orr.w	r3, r3, #4
 8006518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800651c:	4b04      	ldr	r3, [pc, #16]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006522:	4a03      	ldr	r2, [pc, #12]	@ (8006530 <HAL_RCC_OscConfig+0x504>)
 8006524:	f043 0301 	orr.w	r3, r3, #1
 8006528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800652c:	e014      	b.n	8006558 <HAL_RCC_OscConfig+0x52c>
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000
 8006534:	40007000 	.word	0x40007000
 8006538:	4b9d      	ldr	r3, [pc, #628]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653e:	4a9c      	ldr	r2, [pc, #624]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006548:	4b99      	ldr	r3, [pc, #612]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654e:	4a98      	ldr	r2, [pc, #608]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 8006550:	f023 0304 	bic.w	r3, r3, #4
 8006554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d016      	beq.n	800658e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006560:	f7fb fb68 	bl	8001c34 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006566:	e00a      	b.n	800657e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006568:	f7fb fb64 	bl	8001c34 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e168      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800657e:	4b8c      	ldr	r3, [pc, #560]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0ed      	beq.n	8006568 <HAL_RCC_OscConfig+0x53c>
 800658c:	e015      	b.n	80065ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658e:	f7fb fb51 	bl	8001c34 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006594:	e00a      	b.n	80065ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fb fb4d 	bl	8001c34 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e151      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065ac:	4b80      	ldr	r3, [pc, #512]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1ed      	bne.n	8006596 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d105      	bne.n	80065cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c0:	4b7b      	ldr	r3, [pc, #492]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80065c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c4:	4a7a      	ldr	r2, [pc, #488]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80065c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d03c      	beq.n	8006652 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01c      	beq.n	800661a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065e0:	4b73      	ldr	r3, [pc, #460]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80065e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065e6:	4a72      	ldr	r2, [pc, #456]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7fb fb20 	bl	8001c34 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065f8:	f7fb fb1c 	bl	8001c34 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e122      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800660a:	4b69      	ldr	r3, [pc, #420]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800660c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ef      	beq.n	80065f8 <HAL_RCC_OscConfig+0x5cc>
 8006618:	e01b      	b.n	8006652 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800661a:	4b65      	ldr	r3, [pc, #404]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800661c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006620:	4a63      	ldr	r2, [pc, #396]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662a:	f7fb fb03 	bl	8001c34 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006632:	f7fb faff 	bl	8001c34 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e105      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006644:	4b5a      	ldr	r3, [pc, #360]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 8006646:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1ef      	bne.n	8006632 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 80f9 	beq.w	800684e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	2b02      	cmp	r3, #2
 8006662:	f040 80cf 	bne.w	8006804 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006666:	4b52      	ldr	r3, [pc, #328]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f003 0203 	and.w	r2, r3, #3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	429a      	cmp	r2, r3
 8006678:	d12c      	bne.n	80066d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006684:	3b01      	subs	r3, #1
 8006686:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006688:	429a      	cmp	r2, r3
 800668a:	d123      	bne.n	80066d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006696:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d11b      	bne.n	80066d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d113      	bne.n	80066d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	3b01      	subs	r3, #1
 80066ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066bc:	429a      	cmp	r2, r3
 80066be:	d109      	bne.n	80066d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	3b01      	subs	r3, #1
 80066ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d071      	beq.n	80067b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	2b0c      	cmp	r3, #12
 80066d8:	d068      	beq.n	80067ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80066da:	4b35      	ldr	r3, [pc, #212]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d105      	bne.n	80066f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80066e6:	4b32      	ldr	r3, [pc, #200]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e0ac      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80066f6:	4b2e      	ldr	r3, [pc, #184]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2d      	ldr	r2, [pc, #180]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80066fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006700:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006702:	f7fb fa97 	bl	8001c34 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670a:	f7fb fa93 	bl	8001c34 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e099      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800671c:	4b24      	ldr	r3, [pc, #144]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006728:	4b21      	ldr	r3, [pc, #132]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	4b21      	ldr	r3, [pc, #132]	@ (80067b4 <HAL_RCC_OscConfig+0x788>)
 800672e:	4013      	ands	r3, r2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006738:	3a01      	subs	r2, #1
 800673a:	0112      	lsls	r2, r2, #4
 800673c:	4311      	orrs	r1, r2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006742:	0212      	lsls	r2, r2, #8
 8006744:	4311      	orrs	r1, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800674a:	0852      	lsrs	r2, r2, #1
 800674c:	3a01      	subs	r2, #1
 800674e:	0552      	lsls	r2, r2, #21
 8006750:	4311      	orrs	r1, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006756:	0852      	lsrs	r2, r2, #1
 8006758:	3a01      	subs	r2, #1
 800675a:	0652      	lsls	r2, r2, #25
 800675c:	4311      	orrs	r1, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006762:	06d2      	lsls	r2, r2, #27
 8006764:	430a      	orrs	r2, r1
 8006766:	4912      	ldr	r1, [pc, #72]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 8006768:	4313      	orrs	r3, r2
 800676a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800676c:	4b10      	ldr	r3, [pc, #64]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0f      	ldr	r2, [pc, #60]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 8006772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006778:	4b0d      	ldr	r3, [pc, #52]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4a0c      	ldr	r2, [pc, #48]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 800677e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006784:	f7fb fa56 	bl	8001c34 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800678c:	f7fb fa52 	bl	8001c34 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e058      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800679e:	4b04      	ldr	r3, [pc, #16]	@ (80067b0 <HAL_RCC_OscConfig+0x784>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067aa:	e050      	b.n	800684e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e04f      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
 80067b0:	40021000 	.word	0x40021000
 80067b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b8:	4b27      	ldr	r3, [pc, #156]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d144      	bne.n	800684e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80067c4:	4b24      	ldr	r3, [pc, #144]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a23      	ldr	r2, [pc, #140]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 80067ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067d0:	4b21      	ldr	r3, [pc, #132]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4a20      	ldr	r2, [pc, #128]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 80067d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067dc:	f7fb fa2a 	bl	8001c34 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e4:	f7fb fa26 	bl	8001c34 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e02c      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067f6:	4b18      	ldr	r3, [pc, #96]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0x7b8>
 8006802:	e024      	b.n	800684e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b0c      	cmp	r3, #12
 8006808:	d01f      	beq.n	800684a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680a:	4b13      	ldr	r3, [pc, #76]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a12      	ldr	r2, [pc, #72]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 8006810:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006816:	f7fb fa0d 	bl	8001c34 <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800681c:	e008      	b.n	8006830 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800681e:	f7fb fa09 	bl	8001c34 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e00f      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006830:	4b09      	ldr	r3, [pc, #36]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f0      	bne.n	800681e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800683c:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	4905      	ldr	r1, [pc, #20]	@ (8006858 <HAL_RCC_OscConfig+0x82c>)
 8006842:	4b06      	ldr	r3, [pc, #24]	@ (800685c <HAL_RCC_OscConfig+0x830>)
 8006844:	4013      	ands	r3, r2
 8006846:	60cb      	str	r3, [r1, #12]
 8006848:	e001      	b.n	800684e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40021000 	.word	0x40021000
 800685c:	feeefffc 	.word	0xfeeefffc

08006860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0e7      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006874:	4b75      	ldr	r3, [pc, #468]	@ (8006a4c <HAL_RCC_ClockConfig+0x1ec>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d910      	bls.n	80068a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006882:	4b72      	ldr	r3, [pc, #456]	@ (8006a4c <HAL_RCC_ClockConfig+0x1ec>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f023 0207 	bic.w	r2, r3, #7
 800688a:	4970      	ldr	r1, [pc, #448]	@ (8006a4c <HAL_RCC_ClockConfig+0x1ec>)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	4313      	orrs	r3, r2
 8006890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006892:	4b6e      	ldr	r3, [pc, #440]	@ (8006a4c <HAL_RCC_ClockConfig+0x1ec>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d001      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0cf      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d010      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	4b66      	ldr	r3, [pc, #408]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068bc:	429a      	cmp	r2, r3
 80068be:	d908      	bls.n	80068d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c0:	4b63      	ldr	r3, [pc, #396]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	4960      	ldr	r1, [pc, #384]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d04c      	beq.n	8006978 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d107      	bne.n	80068f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068e6:	4b5a      	ldr	r3, [pc, #360]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d121      	bne.n	8006936 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e0a6      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d107      	bne.n	800690e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068fe:	4b54      	ldr	r3, [pc, #336]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d115      	bne.n	8006936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e09a      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d107      	bne.n	8006926 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006916:	4b4e      	ldr	r3, [pc, #312]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e08e      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006926:	4b4a      	ldr	r3, [pc, #296]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e086      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006936:	4b46      	ldr	r3, [pc, #280]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f023 0203 	bic.w	r2, r3, #3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	4943      	ldr	r1, [pc, #268]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006944:	4313      	orrs	r3, r2
 8006946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006948:	f7fb f974 	bl	8001c34 <HAL_GetTick>
 800694c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694e:	e00a      	b.n	8006966 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006950:	f7fb f970 	bl	8001c34 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695e:	4293      	cmp	r3, r2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e06e      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006966:	4b3a      	ldr	r3, [pc, #232]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 020c 	and.w	r2, r3, #12
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	429a      	cmp	r2, r3
 8006976:	d1eb      	bne.n	8006950 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d010      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	4b31      	ldr	r3, [pc, #196]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006990:	429a      	cmp	r2, r3
 8006992:	d208      	bcs.n	80069a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006994:	4b2e      	ldr	r3, [pc, #184]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	492b      	ldr	r1, [pc, #172]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069a6:	4b29      	ldr	r3, [pc, #164]	@ (8006a4c <HAL_RCC_ClockConfig+0x1ec>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d210      	bcs.n	80069d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b4:	4b25      	ldr	r3, [pc, #148]	@ (8006a4c <HAL_RCC_ClockConfig+0x1ec>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f023 0207 	bic.w	r2, r3, #7
 80069bc:	4923      	ldr	r1, [pc, #140]	@ (8006a4c <HAL_RCC_ClockConfig+0x1ec>)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c4:	4b21      	ldr	r3, [pc, #132]	@ (8006a4c <HAL_RCC_ClockConfig+0x1ec>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d001      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e036      	b.n	8006a44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	4918      	ldr	r1, [pc, #96]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a00:	4b13      	ldr	r3, [pc, #76]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	4910      	ldr	r1, [pc, #64]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a14:	f000 f824 	bl	8006a60 <HAL_RCC_GetSysClockFreq>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a50 <HAL_RCC_ClockConfig+0x1f0>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	091b      	lsrs	r3, r3, #4
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	490b      	ldr	r1, [pc, #44]	@ (8006a54 <HAL_RCC_ClockConfig+0x1f4>)
 8006a26:	5ccb      	ldrb	r3, [r1, r3]
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a30:	4a09      	ldr	r2, [pc, #36]	@ (8006a58 <HAL_RCC_ClockConfig+0x1f8>)
 8006a32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a34:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <HAL_RCC_ClockConfig+0x1fc>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fb f8ab 	bl	8001b94 <HAL_InitTick>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a42:	7afb      	ldrb	r3, [r7, #11]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40022000 	.word	0x40022000
 8006a50:	40021000 	.word	0x40021000
 8006a54:	08008df0 	.word	0x08008df0
 8006a58:	20000010 	.word	0x20000010
 8006a5c:	20000014 	.word	0x20000014

08006a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b089      	sub	sp, #36	@ 0x24
 8006a64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a78:	4b3b      	ldr	r3, [pc, #236]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0x34>
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b0c      	cmp	r3, #12
 8006a8c:	d121      	bne.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d11e      	bne.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a94:	4b34      	ldr	r3, [pc, #208]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d107      	bne.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006aa0:	4b31      	ldr	r3, [pc, #196]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aa6:	0a1b      	lsrs	r3, r3, #8
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	61fb      	str	r3, [r7, #28]
 8006aae:	e005      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006abc:	4a2b      	ldr	r2, [pc, #172]	@ (8006b6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10d      	bne.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ad0:	e00a      	b.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d102      	bne.n	8006ade <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ad8:	4b25      	ldr	r3, [pc, #148]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	e004      	b.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ae4:	4b23      	ldr	r3, [pc, #140]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ae6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b0c      	cmp	r3, #12
 8006aec:	d134      	bne.n	8006b58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006aee:	4b1e      	ldr	r3, [pc, #120]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d003      	beq.n	8006b06 <HAL_RCC_GetSysClockFreq+0xa6>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d003      	beq.n	8006b0c <HAL_RCC_GetSysClockFreq+0xac>
 8006b04:	e005      	b.n	8006b12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b06:	4b1a      	ldr	r3, [pc, #104]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b08:	617b      	str	r3, [r7, #20]
      break;
 8006b0a:	e005      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006b0c:	4b19      	ldr	r3, [pc, #100]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b0e:	617b      	str	r3, [r7, #20]
      break;
 8006b10:	e002      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	617b      	str	r3, [r7, #20]
      break;
 8006b16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b18:	4b13      	ldr	r3, [pc, #76]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	3301      	adds	r3, #1
 8006b24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b26:	4b10      	ldr	r3, [pc, #64]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	fb03 f202 	mul.w	r2, r3, r2
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	0e5b      	lsrs	r3, r3, #25
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	3301      	adds	r3, #1
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b58:	69bb      	ldr	r3, [r7, #24]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3724      	adds	r7, #36	@ 0x24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	08008e08 	.word	0x08008e08
 8006b70:	00f42400 	.word	0x00f42400
 8006b74:	007a1200 	.word	0x007a1200

08006b78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b7c:	4b03      	ldr	r3, [pc, #12]	@ (8006b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20000010 	.word	0x20000010

08006b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b94:	f7ff fff0 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	4904      	ldr	r1, [pc, #16]	@ (8006bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ba6:	5ccb      	ldrb	r3, [r1, r3]
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	08008e00 	.word	0x08008e00

08006bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bc0:	f7ff ffda 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	0adb      	lsrs	r3, r3, #11
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	4904      	ldr	r1, [pc, #16]	@ (8006be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bd2:	5ccb      	ldrb	r3, [r1, r3]
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40021000 	.word	0x40021000
 8006be4:	08008e00 	.word	0x08008e00

08006be8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c00:	f7ff f9b0 	bl	8005f64 <HAL_PWREx_GetVoltageRange>
 8006c04:	6178      	str	r0, [r7, #20]
 8006c06:	e014      	b.n	8006c32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c08:	4b25      	ldr	r3, [pc, #148]	@ (8006ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0c:	4a24      	ldr	r2, [pc, #144]	@ (8006ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c14:	4b22      	ldr	r3, [pc, #136]	@ (8006ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c20:	f7ff f9a0 	bl	8005f64 <HAL_PWREx_GetVoltageRange>
 8006c24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c26:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c38:	d10b      	bne.n	8006c52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b80      	cmp	r3, #128	@ 0x80
 8006c3e:	d919      	bls.n	8006c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2ba0      	cmp	r3, #160	@ 0xa0
 8006c44:	d902      	bls.n	8006c4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c46:	2302      	movs	r3, #2
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e013      	b.n	8006c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	e010      	b.n	8006c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b80      	cmp	r3, #128	@ 0x80
 8006c56:	d902      	bls.n	8006c5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c58:	2303      	movs	r3, #3
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	e00a      	b.n	8006c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b80      	cmp	r3, #128	@ 0x80
 8006c62:	d102      	bne.n	8006c6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c64:	2302      	movs	r3, #2
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	e004      	b.n	8006c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b70      	cmp	r3, #112	@ 0x70
 8006c6e:	d101      	bne.n	8006c74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c70:	2301      	movs	r3, #1
 8006c72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f023 0207 	bic.w	r2, r3, #7
 8006c7c:	4909      	ldr	r1, [pc, #36]	@ (8006ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c84:	4b07      	ldr	r3, [pc, #28]	@ (8006ca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d001      	beq.n	8006c96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	40022000 	.word	0x40022000

08006ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d041      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ccc:	d02a      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006cce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006cd2:	d824      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006cd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006cd8:	d008      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006cda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006cde:	d81e      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006ce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ce8:	d010      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006cea:	e018      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006cec:	4b86      	ldr	r3, [pc, #536]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	4a85      	ldr	r2, [pc, #532]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cf6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cf8:	e015      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 facd 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d0a:	e00c      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3320      	adds	r3, #32
 8006d10:	2100      	movs	r1, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fbb6 	bl	8007484 <RCCEx_PLLSAI2_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d1c:	e003      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	74fb      	strb	r3, [r7, #19]
      break;
 8006d22:	e000      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d26:	7cfb      	ldrb	r3, [r7, #19]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d2c:	4b76      	ldr	r3, [pc, #472]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d3a:	4973      	ldr	r1, [pc, #460]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006d42:	e001      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	7cfb      	ldrb	r3, [r7, #19]
 8006d46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d041      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d5c:	d02a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006d5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d62:	d824      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006d64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d68:	d008      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d6e:	d81e      	bhi.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d78:	d010      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006d7a:	e018      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d7c:	4b62      	ldr	r3, [pc, #392]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	4a61      	ldr	r2, [pc, #388]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d88:	e015      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fa85 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d9a:	e00c      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3320      	adds	r3, #32
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fb6e 	bl	8007484 <RCCEx_PLLSAI2_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	74fb      	strb	r3, [r7, #19]
      break;
 8006db2:	e000      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db6:	7cfb      	ldrb	r3, [r7, #19]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006dbc:	4b52      	ldr	r3, [pc, #328]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dca:	494f      	ldr	r1, [pc, #316]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006dd2:	e001      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80a0 	beq.w	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006de6:	2300      	movs	r3, #0
 8006de8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006dea:	4b47      	ldr	r3, [pc, #284]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00d      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e00:	4b41      	ldr	r3, [pc, #260]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e04:	4a40      	ldr	r2, [pc, #256]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a3a      	ldr	r2, [pc, #232]	@ (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e28:	f7fa ff04 	bl	8001c34 <HAL_GetTick>
 8006e2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e2e:	e009      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e30:	f7fa ff00 	bl	8001c34 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d902      	bls.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	74fb      	strb	r3, [r7, #19]
        break;
 8006e42:	e005      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e44:	4b31      	ldr	r3, [pc, #196]	@ (8006f0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0ef      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006e50:	7cfb      	ldrb	r3, [r7, #19]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d15c      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e56:	4b2c      	ldr	r3, [pc, #176]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01f      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d019      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e74:	4b24      	ldr	r3, [pc, #144]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e80:	4b21      	ldr	r3, [pc, #132]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e86:	4a20      	ldr	r2, [pc, #128]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e90:	4b1d      	ldr	r3, [pc, #116]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e96:	4a1c      	ldr	r2, [pc, #112]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ea0:	4a19      	ldr	r2, [pc, #100]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d016      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7fa febf 	bl	8001c34 <HAL_GetTick>
 8006eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eb8:	e00b      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eba:	f7fa febb 	bl	8001c34 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d902      	bls.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	74fb      	strb	r3, [r7, #19]
            break;
 8006ed0:	e006      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0ec      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006ee0:	7cfb      	ldrb	r3, [r7, #19]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ee6:	4b08      	ldr	r3, [pc, #32]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef6:	4904      	ldr	r1, [pc, #16]	@ (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006efe:	e009      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f00:	7cfb      	ldrb	r3, [r7, #19]
 8006f02:	74bb      	strb	r3, [r7, #18]
 8006f04:	e006      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	7cfb      	ldrb	r3, [r7, #19]
 8006f12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f14:	7c7b      	ldrb	r3, [r7, #17]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d105      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f1a:	4ba6      	ldr	r3, [pc, #664]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f1e:	4aa5      	ldr	r2, [pc, #660]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f32:	4ba0      	ldr	r3, [pc, #640]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f38:	f023 0203 	bic.w	r2, r3, #3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f40:	499c      	ldr	r1, [pc, #624]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f54:	4b97      	ldr	r3, [pc, #604]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f023 020c 	bic.w	r2, r3, #12
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f62:	4994      	ldr	r1, [pc, #592]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f76:	4b8f      	ldr	r3, [pc, #572]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f84:	498b      	ldr	r1, [pc, #556]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f98:	4b86      	ldr	r3, [pc, #536]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	4983      	ldr	r1, [pc, #524]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0310 	and.w	r3, r3, #16
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fba:	4b7e      	ldr	r3, [pc, #504]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc8:	497a      	ldr	r1, [pc, #488]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00a      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fdc:	4b75      	ldr	r3, [pc, #468]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fea:	4972      	ldr	r1, [pc, #456]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007004:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700c:	4969      	ldr	r1, [pc, #420]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007020:	4b64      	ldr	r3, [pc, #400]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007026:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800702e:	4961      	ldr	r1, [pc, #388]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007042:	4b5c      	ldr	r3, [pc, #368]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007048:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007050:	4958      	ldr	r1, [pc, #352]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007064:	4b53      	ldr	r3, [pc, #332]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007072:	4950      	ldr	r1, [pc, #320]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007086:	4b4b      	ldr	r3, [pc, #300]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007094:	4947      	ldr	r1, [pc, #284]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070a8:	4b42      	ldr	r3, [pc, #264]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80070aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070ae:	f023 0203 	bic.w	r2, r3, #3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b6:	493f      	ldr	r1, [pc, #252]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d028      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ca:	4b3a      	ldr	r3, [pc, #232]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80070cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d8:	4936      	ldr	r1, [pc, #216]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e8:	d106      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070ea:	4b32      	ldr	r3, [pc, #200]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	4a31      	ldr	r2, [pc, #196]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80070f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070f4:	60d3      	str	r3, [r2, #12]
 80070f6:	e011      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007100:	d10c      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3304      	adds	r3, #4
 8007106:	2101      	movs	r1, #1
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f8c9 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007112:	7cfb      	ldrb	r3, [r7, #19]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007118:	7cfb      	ldrb	r3, [r7, #19]
 800711a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d028      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007128:	4b22      	ldr	r3, [pc, #136]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007136:	491f      	ldr	r1, [pc, #124]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007146:	d106      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007148:	4b1a      	ldr	r3, [pc, #104]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a19      	ldr	r2, [pc, #100]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800714e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007152:	60d3      	str	r3, [r2, #12]
 8007154:	e011      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800715a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800715e:	d10c      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	2101      	movs	r1, #1
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f89a 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007170:	7cfb      	ldrb	r3, [r7, #19]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007176:	7cfb      	ldrb	r3, [r7, #19]
 8007178:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d02a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007186:	4b0b      	ldr	r3, [pc, #44]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007194:	4907      	ldr	r1, [pc, #28]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071a4:	d108      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071a6:	4b03      	ldr	r3, [pc, #12]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	4a02      	ldr	r2, [pc, #8]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80071ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071b0:	60d3      	str	r3, [r2, #12]
 80071b2:	e013      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80071b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071c0:	d10c      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3304      	adds	r3, #4
 80071c6:	2101      	movs	r1, #1
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 f869 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071d2:	7cfb      	ldrb	r3, [r7, #19]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80071d8:	7cfb      	ldrb	r3, [r7, #19]
 80071da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d02f      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071e8:	4b2c      	ldr	r3, [pc, #176]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80071ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071f6:	4929      	ldr	r1, [pc, #164]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007206:	d10d      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3304      	adds	r3, #4
 800720c:	2102      	movs	r1, #2
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f846 	bl	80072a0 <RCCEx_PLLSAI1_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007218:	7cfb      	ldrb	r3, [r7, #19]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d014      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800721e:	7cfb      	ldrb	r3, [r7, #19]
 8007220:	74bb      	strb	r3, [r7, #18]
 8007222:	e011      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800722c:	d10c      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3320      	adds	r3, #32
 8007232:	2102      	movs	r1, #2
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f925 	bl	8007484 <RCCEx_PLLSAI2_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800723e:	7cfb      	ldrb	r3, [r7, #19]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007244:	7cfb      	ldrb	r3, [r7, #19]
 8007246:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007254:	4b11      	ldr	r3, [pc, #68]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007264:	490d      	ldr	r1, [pc, #52]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007278:	4b08      	ldr	r3, [pc, #32]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007288:	4904      	ldr	r1, [pc, #16]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007290:	7cbb      	ldrb	r3, [r7, #18]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000

080072a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80072ae:	4b74      	ldr	r3, [pc, #464]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d018      	beq.n	80072ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80072ba:	4b71      	ldr	r3, [pc, #452]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0203 	and.w	r2, r3, #3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d10d      	bne.n	80072e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
       ||
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80072d2:	4b6b      	ldr	r3, [pc, #428]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
       ||
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d047      	beq.n	8007376 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
 80072ea:	e044      	b.n	8007376 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d018      	beq.n	8007326 <RCCEx_PLLSAI1_Config+0x86>
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d825      	bhi.n	8007344 <RCCEx_PLLSAI1_Config+0xa4>
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d002      	beq.n	8007302 <RCCEx_PLLSAI1_Config+0x62>
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d009      	beq.n	8007314 <RCCEx_PLLSAI1_Config+0x74>
 8007300:	e020      	b.n	8007344 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007302:	4b5f      	ldr	r3, [pc, #380]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11d      	bne.n	800734a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007312:	e01a      	b.n	800734a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007314:	4b5a      	ldr	r3, [pc, #360]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731c:	2b00      	cmp	r3, #0
 800731e:	d116      	bne.n	800734e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007324:	e013      	b.n	800734e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007326:	4b56      	ldr	r3, [pc, #344]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10f      	bne.n	8007352 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007332:	4b53      	ldr	r3, [pc, #332]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d109      	bne.n	8007352 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007342:	e006      	b.n	8007352 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
      break;
 8007348:	e004      	b.n	8007354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800734a:	bf00      	nop
 800734c:	e002      	b.n	8007354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800734e:	bf00      	nop
 8007350:	e000      	b.n	8007354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007352:	bf00      	nop
    }

    if(status == HAL_OK)
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10d      	bne.n	8007376 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800735a:	4b49      	ldr	r3, [pc, #292]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6819      	ldr	r1, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	3b01      	subs	r3, #1
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	430b      	orrs	r3, r1
 8007370:	4943      	ldr	r1, [pc, #268]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007372:	4313      	orrs	r3, r2
 8007374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d17c      	bne.n	8007476 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800737c:	4b40      	ldr	r3, [pc, #256]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a3f      	ldr	r2, [pc, #252]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007382:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007388:	f7fa fc54 	bl	8001c34 <HAL_GetTick>
 800738c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800738e:	e009      	b.n	80073a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007390:	f7fa fc50 	bl	8001c34 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d902      	bls.n	80073a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	73fb      	strb	r3, [r7, #15]
        break;
 80073a2:	e005      	b.n	80073b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073a4:	4b36      	ldr	r3, [pc, #216]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1ef      	bne.n	8007390 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d15f      	bne.n	8007476 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d110      	bne.n	80073de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073bc:	4b30      	ldr	r3, [pc, #192]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80073c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6892      	ldr	r2, [r2, #8]
 80073cc:	0211      	lsls	r1, r2, #8
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	68d2      	ldr	r2, [r2, #12]
 80073d2:	06d2      	lsls	r2, r2, #27
 80073d4:	430a      	orrs	r2, r1
 80073d6:	492a      	ldr	r1, [pc, #168]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	610b      	str	r3, [r1, #16]
 80073dc:	e027      	b.n	800742e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d112      	bne.n	800740a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073e4:	4b26      	ldr	r3, [pc, #152]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80073ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6892      	ldr	r2, [r2, #8]
 80073f4:	0211      	lsls	r1, r2, #8
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6912      	ldr	r2, [r2, #16]
 80073fa:	0852      	lsrs	r2, r2, #1
 80073fc:	3a01      	subs	r2, #1
 80073fe:	0552      	lsls	r2, r2, #21
 8007400:	430a      	orrs	r2, r1
 8007402:	491f      	ldr	r1, [pc, #124]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007404:	4313      	orrs	r3, r2
 8007406:	610b      	str	r3, [r1, #16]
 8007408:	e011      	b.n	800742e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800740a:	4b1d      	ldr	r3, [pc, #116]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007412:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6892      	ldr	r2, [r2, #8]
 800741a:	0211      	lsls	r1, r2, #8
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6952      	ldr	r2, [r2, #20]
 8007420:	0852      	lsrs	r2, r2, #1
 8007422:	3a01      	subs	r2, #1
 8007424:	0652      	lsls	r2, r2, #25
 8007426:	430a      	orrs	r2, r1
 8007428:	4915      	ldr	r1, [pc, #84]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800742a:	4313      	orrs	r3, r2
 800742c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800742e:	4b14      	ldr	r3, [pc, #80]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a13      	ldr	r2, [pc, #76]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007434:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007438:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800743a:	f7fa fbfb 	bl	8001c34 <HAL_GetTick>
 800743e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007440:	e009      	b.n	8007456 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007442:	f7fa fbf7 	bl	8001c34 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d902      	bls.n	8007456 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	73fb      	strb	r3, [r7, #15]
          break;
 8007454:	e005      	b.n	8007462 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007456:	4b0a      	ldr	r3, [pc, #40]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0ef      	beq.n	8007442 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007468:	4b05      	ldr	r3, [pc, #20]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	4903      	ldr	r1, [pc, #12]	@ (8007480 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007472:	4313      	orrs	r3, r2
 8007474:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40021000 	.word	0x40021000

08007484 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007492:	4b69      	ldr	r3, [pc, #420]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d018      	beq.n	80074d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800749e:	4b66      	ldr	r3, [pc, #408]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f003 0203 	and.w	r2, r3, #3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d10d      	bne.n	80074ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
       ||
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80074b6:	4b60      	ldr	r3, [pc, #384]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	091b      	lsrs	r3, r3, #4
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
       ||
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d047      	beq.n	800755a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	73fb      	strb	r3, [r7, #15]
 80074ce:	e044      	b.n	800755a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d018      	beq.n	800750a <RCCEx_PLLSAI2_Config+0x86>
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d825      	bhi.n	8007528 <RCCEx_PLLSAI2_Config+0xa4>
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d002      	beq.n	80074e6 <RCCEx_PLLSAI2_Config+0x62>
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d009      	beq.n	80074f8 <RCCEx_PLLSAI2_Config+0x74>
 80074e4:	e020      	b.n	8007528 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074e6:	4b54      	ldr	r3, [pc, #336]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d11d      	bne.n	800752e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074f6:	e01a      	b.n	800752e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074f8:	4b4f      	ldr	r3, [pc, #316]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007500:	2b00      	cmp	r3, #0
 8007502:	d116      	bne.n	8007532 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007508:	e013      	b.n	8007532 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800750a:	4b4b      	ldr	r3, [pc, #300]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007516:	4b48      	ldr	r3, [pc, #288]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007526:	e006      	b.n	8007536 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
      break;
 800752c:	e004      	b.n	8007538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800752e:	bf00      	nop
 8007530:	e002      	b.n	8007538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007532:	bf00      	nop
 8007534:	e000      	b.n	8007538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007536:	bf00      	nop
    }

    if(status == HAL_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10d      	bne.n	800755a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800753e:	4b3e      	ldr	r3, [pc, #248]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	3b01      	subs	r3, #1
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	430b      	orrs	r3, r1
 8007554:	4938      	ldr	r1, [pc, #224]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007556:	4313      	orrs	r3, r2
 8007558:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d166      	bne.n	800762e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007560:	4b35      	ldr	r3, [pc, #212]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a34      	ldr	r2, [pc, #208]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800756a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756c:	f7fa fb62 	bl	8001c34 <HAL_GetTick>
 8007570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007572:	e009      	b.n	8007588 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007574:	f7fa fb5e 	bl	8001c34 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d902      	bls.n	8007588 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
        break;
 8007586:	e005      	b.n	8007594 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007588:	4b2b      	ldr	r3, [pc, #172]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1ef      	bne.n	8007574 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d149      	bne.n	800762e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d110      	bne.n	80075c2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80075a0:	4b25      	ldr	r3, [pc, #148]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80075a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6892      	ldr	r2, [r2, #8]
 80075b0:	0211      	lsls	r1, r2, #8
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68d2      	ldr	r2, [r2, #12]
 80075b6:	06d2      	lsls	r2, r2, #27
 80075b8:	430a      	orrs	r2, r1
 80075ba:	491f      	ldr	r1, [pc, #124]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	614b      	str	r3, [r1, #20]
 80075c0:	e011      	b.n	80075e6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80075c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80075ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6892      	ldr	r2, [r2, #8]
 80075d2:	0211      	lsls	r1, r2, #8
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6912      	ldr	r2, [r2, #16]
 80075d8:	0852      	lsrs	r2, r2, #1
 80075da:	3a01      	subs	r2, #1
 80075dc:	0652      	lsls	r2, r2, #25
 80075de:	430a      	orrs	r2, r1
 80075e0:	4915      	ldr	r1, [pc, #84]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80075e6:	4b14      	ldr	r3, [pc, #80]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a13      	ldr	r2, [pc, #76]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f2:	f7fa fb1f 	bl	8001c34 <HAL_GetTick>
 80075f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075f8:	e009      	b.n	800760e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075fa:	f7fa fb1b 	bl	8001c34 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d902      	bls.n	800760e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	73fb      	strb	r3, [r7, #15]
          break;
 800760c:	e005      	b.n	800761a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800760e:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0ef      	beq.n	80075fa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007622:	695a      	ldr	r2, [r3, #20]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	4903      	ldr	r1, [pc, #12]	@ (8007638 <RCCEx_PLLSAI2_Config+0x1b4>)
 800762a:	4313      	orrs	r3, r2
 800762c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40021000 	.word	0x40021000

0800763c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e049      	b.n	80076e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7f9 ffdc 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	4619      	mov	r1, r3
 800767a:	4610      	mov	r0, r2
 800767c:	f000 f9d0 	bl	8007a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d001      	beq.n	8007704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e04f      	b.n	80077a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a23      	ldr	r2, [pc, #140]	@ (80077b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01d      	beq.n	8007762 <HAL_TIM_Base_Start_IT+0x76>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800772e:	d018      	beq.n	8007762 <HAL_TIM_Base_Start_IT+0x76>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a1f      	ldr	r2, [pc, #124]	@ (80077b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d013      	beq.n	8007762 <HAL_TIM_Base_Start_IT+0x76>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a1e      	ldr	r2, [pc, #120]	@ (80077b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00e      	beq.n	8007762 <HAL_TIM_Base_Start_IT+0x76>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1c      	ldr	r2, [pc, #112]	@ (80077bc <HAL_TIM_Base_Start_IT+0xd0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d009      	beq.n	8007762 <HAL_TIM_Base_Start_IT+0x76>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1b      	ldr	r2, [pc, #108]	@ (80077c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d004      	beq.n	8007762 <HAL_TIM_Base_Start_IT+0x76>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a19      	ldr	r2, [pc, #100]	@ (80077c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d115      	bne.n	800778e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	4b17      	ldr	r3, [pc, #92]	@ (80077c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800776a:	4013      	ands	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b06      	cmp	r3, #6
 8007772:	d015      	beq.n	80077a0 <HAL_TIM_Base_Start_IT+0xb4>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800777a:	d011      	beq.n	80077a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778c:	e008      	b.n	80077a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0201 	orr.w	r2, r2, #1
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e000      	b.n	80077a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	40012c00 	.word	0x40012c00
 80077b4:	40000400 	.word	0x40000400
 80077b8:	40000800 	.word	0x40000800
 80077bc:	40000c00 	.word	0x40000c00
 80077c0:	40013400 	.word	0x40013400
 80077c4:	40014000 	.word	0x40014000
 80077c8:	00010007 	.word	0x00010007

080077cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d020      	beq.n	8007830 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01b      	beq.n	8007830 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0202 	mvn.w	r2, #2
 8007800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f8e4 	bl	80079e4 <HAL_TIM_IC_CaptureCallback>
 800781c:	e005      	b.n	800782a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8d6 	bl	80079d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8e7 	bl	80079f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d020      	beq.n	800787c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01b      	beq.n	800787c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0204 	mvn.w	r2, #4
 800784c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8be 	bl	80079e4 <HAL_TIM_IC_CaptureCallback>
 8007868:	e005      	b.n	8007876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f8b0 	bl	80079d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8c1 	bl	80079f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d020      	beq.n	80078c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01b      	beq.n	80078c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0208 	mvn.w	r2, #8
 8007898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2204      	movs	r2, #4
 800789e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f898 	bl	80079e4 <HAL_TIM_IC_CaptureCallback>
 80078b4:	e005      	b.n	80078c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f88a 	bl	80079d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f89b 	bl	80079f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d020      	beq.n	8007914 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01b      	beq.n	8007914 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0210 	mvn.w	r2, #16
 80078e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2208      	movs	r2, #8
 80078ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f872 	bl	80079e4 <HAL_TIM_IC_CaptureCallback>
 8007900:	e005      	b.n	800790e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f864 	bl	80079d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f875 	bl	80079f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f06f 0201 	mvn.w	r2, #1
 8007930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7f9 fcb2 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00c      	beq.n	800795c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f98e 	bl	8007c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00c      	beq.n	8007980 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f986 	bl	8007c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00c      	beq.n	80079a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f834 	bl	8007a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00c      	beq.n	80079c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d007      	beq.n	80079c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f06f 0220 	mvn.w	r2, #32
 80079c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f94e 	bl	8007c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079c8:	bf00      	nop
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a40      	ldr	r2, [pc, #256]	@ (8007b34 <TIM_Base_SetConfig+0x114>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3e:	d00f      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a3d      	ldr	r2, [pc, #244]	@ (8007b38 <TIM_Base_SetConfig+0x118>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00b      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8007b3c <TIM_Base_SetConfig+0x11c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d007      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a3b      	ldr	r2, [pc, #236]	@ (8007b40 <TIM_Base_SetConfig+0x120>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d003      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a3a      	ldr	r2, [pc, #232]	@ (8007b44 <TIM_Base_SetConfig+0x124>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d108      	bne.n	8007a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a2f      	ldr	r2, [pc, #188]	@ (8007b34 <TIM_Base_SetConfig+0x114>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d01f      	beq.n	8007aba <TIM_Base_SetConfig+0x9a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a80:	d01b      	beq.n	8007aba <TIM_Base_SetConfig+0x9a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a2c      	ldr	r2, [pc, #176]	@ (8007b38 <TIM_Base_SetConfig+0x118>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d017      	beq.n	8007aba <TIM_Base_SetConfig+0x9a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8007b3c <TIM_Base_SetConfig+0x11c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d013      	beq.n	8007aba <TIM_Base_SetConfig+0x9a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a2a      	ldr	r2, [pc, #168]	@ (8007b40 <TIM_Base_SetConfig+0x120>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00f      	beq.n	8007aba <TIM_Base_SetConfig+0x9a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a29      	ldr	r2, [pc, #164]	@ (8007b44 <TIM_Base_SetConfig+0x124>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00b      	beq.n	8007aba <TIM_Base_SetConfig+0x9a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a28      	ldr	r2, [pc, #160]	@ (8007b48 <TIM_Base_SetConfig+0x128>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d007      	beq.n	8007aba <TIM_Base_SetConfig+0x9a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a27      	ldr	r2, [pc, #156]	@ (8007b4c <TIM_Base_SetConfig+0x12c>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_Base_SetConfig+0x9a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a26      	ldr	r2, [pc, #152]	@ (8007b50 <TIM_Base_SetConfig+0x130>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d108      	bne.n	8007acc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a10      	ldr	r2, [pc, #64]	@ (8007b34 <TIM_Base_SetConfig+0x114>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00f      	beq.n	8007b18 <TIM_Base_SetConfig+0xf8>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a12      	ldr	r2, [pc, #72]	@ (8007b44 <TIM_Base_SetConfig+0x124>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00b      	beq.n	8007b18 <TIM_Base_SetConfig+0xf8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a11      	ldr	r2, [pc, #68]	@ (8007b48 <TIM_Base_SetConfig+0x128>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d007      	beq.n	8007b18 <TIM_Base_SetConfig+0xf8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a10      	ldr	r2, [pc, #64]	@ (8007b4c <TIM_Base_SetConfig+0x12c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_Base_SetConfig+0xf8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a0f      	ldr	r2, [pc, #60]	@ (8007b50 <TIM_Base_SetConfig+0x130>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d103      	bne.n	8007b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	615a      	str	r2, [r3, #20]
}
 8007b26:	bf00      	nop
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40012c00 	.word	0x40012c00
 8007b38:	40000400 	.word	0x40000400
 8007b3c:	40000800 	.word	0x40000800
 8007b40:	40000c00 	.word	0x40000c00
 8007b44:	40013400 	.word	0x40013400
 8007b48:	40014000 	.word	0x40014000
 8007b4c:	40014400 	.word	0x40014400
 8007b50:	40014800 	.word	0x40014800

08007b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e068      	b.n	8007c3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2e      	ldr	r2, [pc, #184]	@ (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d004      	beq.n	8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d108      	bne.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01d      	beq.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bde:	d018      	beq.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d013      	beq.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1a      	ldr	r2, [pc, #104]	@ (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d00e      	beq.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a18      	ldr	r2, [pc, #96]	@ (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d009      	beq.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a13      	ldr	r2, [pc, #76]	@ (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d004      	beq.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a14      	ldr	r2, [pc, #80]	@ (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d10c      	bne.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40012c00 	.word	0x40012c00
 8007c50:	40013400 	.word	0x40013400
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800
 8007c5c:	40000c00 	.word	0x40000c00
 8007c60:	40014000 	.word	0x40014000

08007c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e040      	b.n	8007d34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7f9 fcd2 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2224      	movs	r2, #36	@ 0x24
 8007ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0201 	bic.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fdea 	bl	80088c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fb2f 	bl	8008350 <UART_SetConfig>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e01b      	b.n	8007d34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fe69 	bl	8008a04 <UART_CheckIdleState>
 8007d32:	4603      	mov	r3, r0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b0ba      	sub	sp, #232	@ 0xe8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d66:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d115      	bne.n	8007da4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00f      	beq.n	8007da4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d009      	beq.n	8007da4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 82ae 	beq.w	80082f6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
      }
      return;
 8007da2:	e2a8      	b.n	80082f6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 8117 	beq.w	8007fdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007dba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007dbe:	4b85      	ldr	r3, [pc, #532]	@ (8007fd4 <HAL_UART_IRQHandler+0x298>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 810a 	beq.w	8007fdc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d011      	beq.n	8007df8 <HAL_UART_IRQHandler+0xbc>
 8007dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2201      	movs	r2, #1
 8007de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dee:	f043 0201 	orr.w	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d011      	beq.n	8007e28 <HAL_UART_IRQHandler+0xec>
 8007e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2202      	movs	r2, #2
 8007e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e1e:	f043 0204 	orr.w	r2, r3, #4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d011      	beq.n	8007e58 <HAL_UART_IRQHandler+0x11c>
 8007e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2204      	movs	r2, #4
 8007e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e4e:	f043 0202 	orr.w	r2, r3, #2
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d017      	beq.n	8007e94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2208      	movs	r2, #8
 8007e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e8a:	f043 0208 	orr.w	r2, r3, #8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d012      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x18a>
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00c      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ebc:	f043 0220 	orr.w	r2, r3, #32
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8214 	beq.w	80082fa <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00d      	beq.n	8007efa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0e:	2b40      	cmp	r3, #64	@ 0x40
 8007f10:	d005      	beq.n	8007f1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d04f      	beq.n	8007fbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fe7f 	bl	8008c22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2e:	2b40      	cmp	r3, #64	@ 0x40
 8007f30:	d141      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3308      	adds	r3, #8
 8007f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1d9      	bne.n	8007f32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d013      	beq.n	8007fae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f8a:	4a13      	ldr	r2, [pc, #76]	@ (8007fd8 <HAL_UART_IRQHandler+0x29c>)
 8007f8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fb fd42 	bl	8003a1c <HAL_DMA_Abort_IT>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d017      	beq.n	8007fce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fac:	e00f      	b.n	8007fce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f9b8 	bl	8008324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb4:	e00b      	b.n	8007fce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9b4 	bl	8008324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbc:	e007      	b.n	8007fce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f9b0 	bl	8008324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007fcc:	e195      	b.n	80082fa <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fce:	bf00      	nop
    return;
 8007fd0:	e193      	b.n	80082fa <HAL_UART_IRQHandler+0x5be>
 8007fd2:	bf00      	nop
 8007fd4:	04000120 	.word	0x04000120
 8007fd8:	08008ceb 	.word	0x08008ceb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	f040 814e 	bne.w	8008282 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8147 	beq.w	8008282 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8140 	beq.w	8008282 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2210      	movs	r2, #16
 8008008:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008014:	2b40      	cmp	r3, #64	@ 0x40
 8008016:	f040 80b8 	bne.w	800818a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008026:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 8167 	beq.w	80082fe <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800803a:	429a      	cmp	r2, r3
 800803c:	f080 815f 	bcs.w	80082fe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008046:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	f040 8086 	bne.w	8008168 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008070:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008086:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800808a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008092:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800809e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1da      	bne.n	800805c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3308      	adds	r3, #8
 80080ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080b8:	f023 0301 	bic.w	r3, r3, #1
 80080bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3308      	adds	r3, #8
 80080c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e1      	bne.n	80080a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3308      	adds	r3, #8
 8008102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008106:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008108:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800810c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e3      	bne.n	80080e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008138:	f023 0310 	bic.w	r3, r3, #16
 800813c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800814a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800814c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008150:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e4      	bne.n	8008128 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008162:	4618      	mov	r0, r3
 8008164:	f7fb fc1c 	bl	80039a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800817a:	b29b      	uxth	r3, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	b29b      	uxth	r3, r3
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f8d8 	bl	8008338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008188:	e0b9      	b.n	80082fe <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008196:	b29b      	uxth	r3, r3
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 80ab 	beq.w	8008302 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80081ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80a6 	beq.w	8008302 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80081da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e4      	bne.n	80081b6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3308      	adds	r3, #8
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	623b      	str	r3, [r7, #32]
   return(result);
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	f023 0301 	bic.w	r3, r3, #1
 8008202:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008210:	633a      	str	r2, [r7, #48]	@ 0x30
 8008212:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800821e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e3      	bne.n	80081ec <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	60fb      	str	r3, [r7, #12]
   return(result);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f023 0310 	bic.w	r3, r3, #16
 800824c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	69b9      	ldr	r1, [r7, #24]
 8008260:	69fa      	ldr	r2, [r7, #28]
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	617b      	str	r3, [r7, #20]
   return(result);
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e4      	bne.n	8008238 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f85c 	bl	8008338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008280:	e03f      	b.n	8008302 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00e      	beq.n	80082ac <HAL_UART_IRQHandler+0x570>
 800828e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d008      	beq.n	80082ac <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80082a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fd60 	bl	8008d6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082aa:	e02d      	b.n	8008308 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00e      	beq.n	80082d6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d008      	beq.n	80082d6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d01c      	beq.n	8008306 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
    }
    return;
 80082d4:	e017      	b.n	8008306 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d012      	beq.n	8008308 <HAL_UART_IRQHandler+0x5cc>
 80082e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00c      	beq.n	8008308 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fd11 	bl	8008d16 <UART_EndTransmit_IT>
    return;
 80082f4:	e008      	b.n	8008308 <HAL_UART_IRQHandler+0x5cc>
      return;
 80082f6:	bf00      	nop
 80082f8:	e006      	b.n	8008308 <HAL_UART_IRQHandler+0x5cc>
    return;
 80082fa:	bf00      	nop
 80082fc:	e004      	b.n	8008308 <HAL_UART_IRQHandler+0x5cc>
      return;
 80082fe:	bf00      	nop
 8008300:	e002      	b.n	8008308 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008302:	bf00      	nop
 8008304:	e000      	b.n	8008308 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008306:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008308:	37e8      	adds	r7, #232	@ 0xe8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop

08008310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008354:	b08a      	sub	sp, #40	@ 0x28
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	431a      	orrs	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	431a      	orrs	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4313      	orrs	r3, r2
 8008376:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	4ba4      	ldr	r3, [pc, #656]	@ (8008610 <UART_SetConfig+0x2c0>)
 8008380:	4013      	ands	r3, r2
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	6812      	ldr	r2, [r2, #0]
 8008386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008388:	430b      	orrs	r3, r1
 800838a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a99      	ldr	r2, [pc, #612]	@ (8008614 <UART_SetConfig+0x2c4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d004      	beq.n	80083bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b8:	4313      	orrs	r3, r2
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083cc:	430a      	orrs	r2, r1
 80083ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a90      	ldr	r2, [pc, #576]	@ (8008618 <UART_SetConfig+0x2c8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d126      	bne.n	8008428 <UART_SetConfig+0xd8>
 80083da:	4b90      	ldr	r3, [pc, #576]	@ (800861c <UART_SetConfig+0x2cc>)
 80083dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d81b      	bhi.n	8008420 <UART_SetConfig+0xd0>
 80083e8:	a201      	add	r2, pc, #4	@ (adr r2, 80083f0 <UART_SetConfig+0xa0>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008401 	.word	0x08008401
 80083f4:	08008411 	.word	0x08008411
 80083f8:	08008409 	.word	0x08008409
 80083fc:	08008419 	.word	0x08008419
 8008400:	2301      	movs	r3, #1
 8008402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008406:	e116      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008408:	2302      	movs	r3, #2
 800840a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800840e:	e112      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008410:	2304      	movs	r3, #4
 8008412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008416:	e10e      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008418:	2308      	movs	r3, #8
 800841a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800841e:	e10a      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008420:	2310      	movs	r3, #16
 8008422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008426:	e106      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a7c      	ldr	r2, [pc, #496]	@ (8008620 <UART_SetConfig+0x2d0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d138      	bne.n	80084a4 <UART_SetConfig+0x154>
 8008432:	4b7a      	ldr	r3, [pc, #488]	@ (800861c <UART_SetConfig+0x2cc>)
 8008434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008438:	f003 030c 	and.w	r3, r3, #12
 800843c:	2b0c      	cmp	r3, #12
 800843e:	d82d      	bhi.n	800849c <UART_SetConfig+0x14c>
 8008440:	a201      	add	r2, pc, #4	@ (adr r2, 8008448 <UART_SetConfig+0xf8>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	0800847d 	.word	0x0800847d
 800844c:	0800849d 	.word	0x0800849d
 8008450:	0800849d 	.word	0x0800849d
 8008454:	0800849d 	.word	0x0800849d
 8008458:	0800848d 	.word	0x0800848d
 800845c:	0800849d 	.word	0x0800849d
 8008460:	0800849d 	.word	0x0800849d
 8008464:	0800849d 	.word	0x0800849d
 8008468:	08008485 	.word	0x08008485
 800846c:	0800849d 	.word	0x0800849d
 8008470:	0800849d 	.word	0x0800849d
 8008474:	0800849d 	.word	0x0800849d
 8008478:	08008495 	.word	0x08008495
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008482:	e0d8      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008484:	2302      	movs	r3, #2
 8008486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800848a:	e0d4      	b.n	8008636 <UART_SetConfig+0x2e6>
 800848c:	2304      	movs	r3, #4
 800848e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008492:	e0d0      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008494:	2308      	movs	r3, #8
 8008496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800849a:	e0cc      	b.n	8008636 <UART_SetConfig+0x2e6>
 800849c:	2310      	movs	r3, #16
 800849e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084a2:	e0c8      	b.n	8008636 <UART_SetConfig+0x2e6>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a5e      	ldr	r2, [pc, #376]	@ (8008624 <UART_SetConfig+0x2d4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d125      	bne.n	80084fa <UART_SetConfig+0x1aa>
 80084ae:	4b5b      	ldr	r3, [pc, #364]	@ (800861c <UART_SetConfig+0x2cc>)
 80084b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80084b8:	2b30      	cmp	r3, #48	@ 0x30
 80084ba:	d016      	beq.n	80084ea <UART_SetConfig+0x19a>
 80084bc:	2b30      	cmp	r3, #48	@ 0x30
 80084be:	d818      	bhi.n	80084f2 <UART_SetConfig+0x1a2>
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d00a      	beq.n	80084da <UART_SetConfig+0x18a>
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d814      	bhi.n	80084f2 <UART_SetConfig+0x1a2>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <UART_SetConfig+0x182>
 80084cc:	2b10      	cmp	r3, #16
 80084ce:	d008      	beq.n	80084e2 <UART_SetConfig+0x192>
 80084d0:	e00f      	b.n	80084f2 <UART_SetConfig+0x1a2>
 80084d2:	2300      	movs	r3, #0
 80084d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084d8:	e0ad      	b.n	8008636 <UART_SetConfig+0x2e6>
 80084da:	2302      	movs	r3, #2
 80084dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084e0:	e0a9      	b.n	8008636 <UART_SetConfig+0x2e6>
 80084e2:	2304      	movs	r3, #4
 80084e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084e8:	e0a5      	b.n	8008636 <UART_SetConfig+0x2e6>
 80084ea:	2308      	movs	r3, #8
 80084ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084f0:	e0a1      	b.n	8008636 <UART_SetConfig+0x2e6>
 80084f2:	2310      	movs	r3, #16
 80084f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084f8:	e09d      	b.n	8008636 <UART_SetConfig+0x2e6>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a4a      	ldr	r2, [pc, #296]	@ (8008628 <UART_SetConfig+0x2d8>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d125      	bne.n	8008550 <UART_SetConfig+0x200>
 8008504:	4b45      	ldr	r3, [pc, #276]	@ (800861c <UART_SetConfig+0x2cc>)
 8008506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800850a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800850e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008510:	d016      	beq.n	8008540 <UART_SetConfig+0x1f0>
 8008512:	2bc0      	cmp	r3, #192	@ 0xc0
 8008514:	d818      	bhi.n	8008548 <UART_SetConfig+0x1f8>
 8008516:	2b80      	cmp	r3, #128	@ 0x80
 8008518:	d00a      	beq.n	8008530 <UART_SetConfig+0x1e0>
 800851a:	2b80      	cmp	r3, #128	@ 0x80
 800851c:	d814      	bhi.n	8008548 <UART_SetConfig+0x1f8>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <UART_SetConfig+0x1d8>
 8008522:	2b40      	cmp	r3, #64	@ 0x40
 8008524:	d008      	beq.n	8008538 <UART_SetConfig+0x1e8>
 8008526:	e00f      	b.n	8008548 <UART_SetConfig+0x1f8>
 8008528:	2300      	movs	r3, #0
 800852a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800852e:	e082      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008530:	2302      	movs	r3, #2
 8008532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008536:	e07e      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008538:	2304      	movs	r3, #4
 800853a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800853e:	e07a      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008540:	2308      	movs	r3, #8
 8008542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008546:	e076      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008548:	2310      	movs	r3, #16
 800854a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800854e:	e072      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a35      	ldr	r2, [pc, #212]	@ (800862c <UART_SetConfig+0x2dc>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d12a      	bne.n	80085b0 <UART_SetConfig+0x260>
 800855a:	4b30      	ldr	r3, [pc, #192]	@ (800861c <UART_SetConfig+0x2cc>)
 800855c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008568:	d01a      	beq.n	80085a0 <UART_SetConfig+0x250>
 800856a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800856e:	d81b      	bhi.n	80085a8 <UART_SetConfig+0x258>
 8008570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008574:	d00c      	beq.n	8008590 <UART_SetConfig+0x240>
 8008576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800857a:	d815      	bhi.n	80085a8 <UART_SetConfig+0x258>
 800857c:	2b00      	cmp	r3, #0
 800857e:	d003      	beq.n	8008588 <UART_SetConfig+0x238>
 8008580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008584:	d008      	beq.n	8008598 <UART_SetConfig+0x248>
 8008586:	e00f      	b.n	80085a8 <UART_SetConfig+0x258>
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800858e:	e052      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008590:	2302      	movs	r3, #2
 8008592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008596:	e04e      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008598:	2304      	movs	r3, #4
 800859a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800859e:	e04a      	b.n	8008636 <UART_SetConfig+0x2e6>
 80085a0:	2308      	movs	r3, #8
 80085a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085a6:	e046      	b.n	8008636 <UART_SetConfig+0x2e6>
 80085a8:	2310      	movs	r3, #16
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ae:	e042      	b.n	8008636 <UART_SetConfig+0x2e6>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a17      	ldr	r2, [pc, #92]	@ (8008614 <UART_SetConfig+0x2c4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d13a      	bne.n	8008630 <UART_SetConfig+0x2e0>
 80085ba:	4b18      	ldr	r3, [pc, #96]	@ (800861c <UART_SetConfig+0x2cc>)
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80085c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085c8:	d01a      	beq.n	8008600 <UART_SetConfig+0x2b0>
 80085ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085ce:	d81b      	bhi.n	8008608 <UART_SetConfig+0x2b8>
 80085d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085d4:	d00c      	beq.n	80085f0 <UART_SetConfig+0x2a0>
 80085d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085da:	d815      	bhi.n	8008608 <UART_SetConfig+0x2b8>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <UART_SetConfig+0x298>
 80085e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085e4:	d008      	beq.n	80085f8 <UART_SetConfig+0x2a8>
 80085e6:	e00f      	b.n	8008608 <UART_SetConfig+0x2b8>
 80085e8:	2300      	movs	r3, #0
 80085ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ee:	e022      	b.n	8008636 <UART_SetConfig+0x2e6>
 80085f0:	2302      	movs	r3, #2
 80085f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085f6:	e01e      	b.n	8008636 <UART_SetConfig+0x2e6>
 80085f8:	2304      	movs	r3, #4
 80085fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085fe:	e01a      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008600:	2308      	movs	r3, #8
 8008602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008606:	e016      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008608:	2310      	movs	r3, #16
 800860a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800860e:	e012      	b.n	8008636 <UART_SetConfig+0x2e6>
 8008610:	efff69f3 	.word	0xefff69f3
 8008614:	40008000 	.word	0x40008000
 8008618:	40013800 	.word	0x40013800
 800861c:	40021000 	.word	0x40021000
 8008620:	40004400 	.word	0x40004400
 8008624:	40004800 	.word	0x40004800
 8008628:	40004c00 	.word	0x40004c00
 800862c:	40005000 	.word	0x40005000
 8008630:	2310      	movs	r3, #16
 8008632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a9f      	ldr	r2, [pc, #636]	@ (80088b8 <UART_SetConfig+0x568>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d17a      	bne.n	8008736 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008640:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008644:	2b08      	cmp	r3, #8
 8008646:	d824      	bhi.n	8008692 <UART_SetConfig+0x342>
 8008648:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <UART_SetConfig+0x300>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008675 	.word	0x08008675
 8008654:	08008693 	.word	0x08008693
 8008658:	0800867d 	.word	0x0800867d
 800865c:	08008693 	.word	0x08008693
 8008660:	08008683 	.word	0x08008683
 8008664:	08008693 	.word	0x08008693
 8008668:	08008693 	.word	0x08008693
 800866c:	08008693 	.word	0x08008693
 8008670:	0800868b 	.word	0x0800868b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008674:	f7fe fa8c 	bl	8006b90 <HAL_RCC_GetPCLK1Freq>
 8008678:	61f8      	str	r0, [r7, #28]
        break;
 800867a:	e010      	b.n	800869e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800867c:	4b8f      	ldr	r3, [pc, #572]	@ (80088bc <UART_SetConfig+0x56c>)
 800867e:	61fb      	str	r3, [r7, #28]
        break;
 8008680:	e00d      	b.n	800869e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008682:	f7fe f9ed 	bl	8006a60 <HAL_RCC_GetSysClockFreq>
 8008686:	61f8      	str	r0, [r7, #28]
        break;
 8008688:	e009      	b.n	800869e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800868a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800868e:	61fb      	str	r3, [r7, #28]
        break;
 8008690:	e005      	b.n	800869e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800869c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80fb 	beq.w	800889c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	4413      	add	r3, r2
 80086b0:	69fa      	ldr	r2, [r7, #28]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d305      	bcc.n	80086c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d903      	bls.n	80086ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80086c8:	e0e8      	b.n	800889c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	2200      	movs	r2, #0
 80086ce:	461c      	mov	r4, r3
 80086d0:	4615      	mov	r5, r2
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	f04f 0300 	mov.w	r3, #0
 80086da:	022b      	lsls	r3, r5, #8
 80086dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80086e0:	0222      	lsls	r2, r4, #8
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	6849      	ldr	r1, [r1, #4]
 80086e6:	0849      	lsrs	r1, r1, #1
 80086e8:	2000      	movs	r0, #0
 80086ea:	4688      	mov	r8, r1
 80086ec:	4681      	mov	r9, r0
 80086ee:	eb12 0a08 	adds.w	sl, r2, r8
 80086f2:	eb43 0b09 	adc.w	fp, r3, r9
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	603b      	str	r3, [r7, #0]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008704:	4650      	mov	r0, sl
 8008706:	4659      	mov	r1, fp
 8008708:	f7f7 fd70 	bl	80001ec <__aeabi_uldivmod>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4613      	mov	r3, r2
 8008712:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800871a:	d308      	bcc.n	800872e <UART_SetConfig+0x3de>
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008722:	d204      	bcs.n	800872e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	60da      	str	r2, [r3, #12]
 800872c:	e0b6      	b.n	800889c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008734:	e0b2      	b.n	800889c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800873e:	d15e      	bne.n	80087fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008740:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008744:	2b08      	cmp	r3, #8
 8008746:	d828      	bhi.n	800879a <UART_SetConfig+0x44a>
 8008748:	a201      	add	r2, pc, #4	@ (adr r2, 8008750 <UART_SetConfig+0x400>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	08008775 	.word	0x08008775
 8008754:	0800877d 	.word	0x0800877d
 8008758:	08008785 	.word	0x08008785
 800875c:	0800879b 	.word	0x0800879b
 8008760:	0800878b 	.word	0x0800878b
 8008764:	0800879b 	.word	0x0800879b
 8008768:	0800879b 	.word	0x0800879b
 800876c:	0800879b 	.word	0x0800879b
 8008770:	08008793 	.word	0x08008793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008774:	f7fe fa0c 	bl	8006b90 <HAL_RCC_GetPCLK1Freq>
 8008778:	61f8      	str	r0, [r7, #28]
        break;
 800877a:	e014      	b.n	80087a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800877c:	f7fe fa1e 	bl	8006bbc <HAL_RCC_GetPCLK2Freq>
 8008780:	61f8      	str	r0, [r7, #28]
        break;
 8008782:	e010      	b.n	80087a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008784:	4b4d      	ldr	r3, [pc, #308]	@ (80088bc <UART_SetConfig+0x56c>)
 8008786:	61fb      	str	r3, [r7, #28]
        break;
 8008788:	e00d      	b.n	80087a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800878a:	f7fe f969 	bl	8006a60 <HAL_RCC_GetSysClockFreq>
 800878e:	61f8      	str	r0, [r7, #28]
        break;
 8008790:	e009      	b.n	80087a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008796:	61fb      	str	r3, [r7, #28]
        break;
 8008798:	e005      	b.n	80087a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80087a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d077      	beq.n	800889c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	005a      	lsls	r2, r3, #1
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	085b      	lsrs	r3, r3, #1
 80087b6:	441a      	add	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	2b0f      	cmp	r3, #15
 80087c6:	d916      	bls.n	80087f6 <UART_SetConfig+0x4a6>
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087ce:	d212      	bcs.n	80087f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f023 030f 	bic.w	r3, r3, #15
 80087d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	b29b      	uxth	r3, r3
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	8afb      	ldrh	r3, [r7, #22]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	8afa      	ldrh	r2, [r7, #22]
 80087f2:	60da      	str	r2, [r3, #12]
 80087f4:	e052      	b.n	800889c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80087fc:	e04e      	b.n	800889c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008802:	2b08      	cmp	r3, #8
 8008804:	d827      	bhi.n	8008856 <UART_SetConfig+0x506>
 8008806:	a201      	add	r2, pc, #4	@ (adr r2, 800880c <UART_SetConfig+0x4bc>)
 8008808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880c:	08008831 	.word	0x08008831
 8008810:	08008839 	.word	0x08008839
 8008814:	08008841 	.word	0x08008841
 8008818:	08008857 	.word	0x08008857
 800881c:	08008847 	.word	0x08008847
 8008820:	08008857 	.word	0x08008857
 8008824:	08008857 	.word	0x08008857
 8008828:	08008857 	.word	0x08008857
 800882c:	0800884f 	.word	0x0800884f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008830:	f7fe f9ae 	bl	8006b90 <HAL_RCC_GetPCLK1Freq>
 8008834:	61f8      	str	r0, [r7, #28]
        break;
 8008836:	e014      	b.n	8008862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008838:	f7fe f9c0 	bl	8006bbc <HAL_RCC_GetPCLK2Freq>
 800883c:	61f8      	str	r0, [r7, #28]
        break;
 800883e:	e010      	b.n	8008862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008840:	4b1e      	ldr	r3, [pc, #120]	@ (80088bc <UART_SetConfig+0x56c>)
 8008842:	61fb      	str	r3, [r7, #28]
        break;
 8008844:	e00d      	b.n	8008862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008846:	f7fe f90b 	bl	8006a60 <HAL_RCC_GetSysClockFreq>
 800884a:	61f8      	str	r0, [r7, #28]
        break;
 800884c:	e009      	b.n	8008862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800884e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008852:	61fb      	str	r3, [r7, #28]
        break;
 8008854:	e005      	b.n	8008862 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008860:	bf00      	nop
    }

    if (pclk != 0U)
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d019      	beq.n	800889c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	085a      	lsrs	r2, r3, #1
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	441a      	add	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	fbb2 f3f3 	udiv	r3, r2, r3
 800887a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b0f      	cmp	r3, #15
 8008880:	d909      	bls.n	8008896 <UART_SetConfig+0x546>
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008888:	d205      	bcs.n	8008896 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60da      	str	r2, [r3, #12]
 8008894:	e002      	b.n	800889c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80088a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3728      	adds	r7, #40	@ 0x28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088b6:	bf00      	nop
 80088b8:	40008000 	.word	0x40008000
 80088bc:	00f42400 	.word	0x00f42400

080088c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088cc:	f003 0308 	and.w	r3, r3, #8
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008954:	f003 0310 	and.w	r3, r3, #16
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01a      	beq.n	80089d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089be:	d10a      	bne.n	80089d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00a      	beq.n	80089f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	605a      	str	r2, [r3, #4]
  }
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b098      	sub	sp, #96	@ 0x60
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a14:	f7f9 f90e 	bl	8001c34 <HAL_GetTick>
 8008a18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d12e      	bne.n	8008a86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a30:	2200      	movs	r2, #0
 8008a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f88c 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d021      	beq.n	8008a86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e6      	bne.n	8008a42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e062      	b.n	8008b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d149      	bne.n	8008b28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f856 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d03c      	beq.n	8008b28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	623b      	str	r3, [r7, #32]
   return(result);
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e6      	bne.n	8008aae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b00:	61fa      	str	r2, [r7, #28]
 8008b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	69b9      	ldr	r1, [r7, #24]
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e5      	bne.n	8008ae0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e011      	b.n	8008b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3758      	adds	r7, #88	@ 0x58
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	4613      	mov	r3, r2
 8008b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b64:	e049      	b.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6c:	d045      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6e:	f7f9 f861 	bl	8001c34 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e048      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d031      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d110      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2208      	movs	r2, #8
 8008baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f838 	bl	8008c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e029      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bd4:	d111      	bne.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f81e 	bl	8008c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e00f      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69da      	ldr	r2, [r3, #28]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	4013      	ands	r3, r2
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	bf0c      	ite	eq
 8008c0a:	2301      	moveq	r3, #1
 8008c0c:	2300      	movne	r3, #0
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	461a      	mov	r2, r3
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d0a6      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b095      	sub	sp, #84	@ 0x54
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e6      	bne.n	8008c2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e5      	bne.n	8008c5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d118      	bne.n	8008cca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f023 0310 	bic.w	r3, r3, #16
 8008cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6979      	ldr	r1, [r7, #20]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008cde:	bf00      	nop
 8008ce0:	3754      	adds	r7, #84	@ 0x54
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7ff fb0b 	bl	8008324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b088      	sub	sp, #32
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d32:	61fb      	str	r3, [r7, #28]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	61bb      	str	r3, [r7, #24]
 8008d3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6979      	ldr	r1, [r7, #20]
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e6      	bne.n	8008d1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2220      	movs	r2, #32
 8008d54:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff fad7 	bl	8008310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d62:	bf00      	nop
 8008d64:	3720      	adds	r7, #32
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d72:	bf00      	nop
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <memset>:
 8008d7e:	4402      	add	r2, r0
 8008d80:	4603      	mov	r3, r0
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d100      	bne.n	8008d88 <memset+0xa>
 8008d86:	4770      	bx	lr
 8008d88:	f803 1b01 	strb.w	r1, [r3], #1
 8008d8c:	e7f9      	b.n	8008d82 <memset+0x4>
	...

08008d90 <__libc_init_array>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	4d0d      	ldr	r5, [pc, #52]	@ (8008dc8 <__libc_init_array+0x38>)
 8008d94:	4c0d      	ldr	r4, [pc, #52]	@ (8008dcc <__libc_init_array+0x3c>)
 8008d96:	1b64      	subs	r4, r4, r5
 8008d98:	10a4      	asrs	r4, r4, #2
 8008d9a:	2600      	movs	r6, #0
 8008d9c:	42a6      	cmp	r6, r4
 8008d9e:	d109      	bne.n	8008db4 <__libc_init_array+0x24>
 8008da0:	4d0b      	ldr	r5, [pc, #44]	@ (8008dd0 <__libc_init_array+0x40>)
 8008da2:	4c0c      	ldr	r4, [pc, #48]	@ (8008dd4 <__libc_init_array+0x44>)
 8008da4:	f000 f818 	bl	8008dd8 <_init>
 8008da8:	1b64      	subs	r4, r4, r5
 8008daa:	10a4      	asrs	r4, r4, #2
 8008dac:	2600      	movs	r6, #0
 8008dae:	42a6      	cmp	r6, r4
 8008db0:	d105      	bne.n	8008dbe <__libc_init_array+0x2e>
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db8:	4798      	blx	r3
 8008dba:	3601      	adds	r6, #1
 8008dbc:	e7ee      	b.n	8008d9c <__libc_init_array+0xc>
 8008dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc2:	4798      	blx	r3
 8008dc4:	3601      	adds	r6, #1
 8008dc6:	e7f2      	b.n	8008dae <__libc_init_array+0x1e>
 8008dc8:	08008e40 	.word	0x08008e40
 8008dcc:	08008e40 	.word	0x08008e40
 8008dd0:	08008e40 	.word	0x08008e40
 8008dd4:	08008e50 	.word	0x08008e50

08008dd8 <_init>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	bf00      	nop
 8008ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dde:	bc08      	pop	{r3}
 8008de0:	469e      	mov	lr, r3
 8008de2:	4770      	bx	lr

08008de4 <_fini>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	bf00      	nop
 8008de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dea:	bc08      	pop	{r3}
 8008dec:	469e      	mov	lr, r3
 8008dee:	4770      	bx	lr
